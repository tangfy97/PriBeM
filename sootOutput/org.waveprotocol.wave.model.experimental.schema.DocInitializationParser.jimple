public final class org.waveprotocol.wave.model.experimental.schema.DocInitializationParser extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.document.operation.DocInitialization parse(java.io.InputStream) throws java.io.IOException, org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        java.io.InputStream r0;
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$FullHandler $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$FullHandler;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$FullHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)>(null);

        $r2 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.DocInitializationParser: org.waveprotocol.wave.model.document.operation.DocInitialization parse(java.io.InputStream,org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler)>(r0, $r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.operation.DocInitialization parseNonCharacterData(java.io.InputStream) throws java.io.IOException, org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)>(null);

        $r2 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.DocInitializationParser: org.waveprotocol.wave.model.document.operation.DocInitialization parse(java.io.InputStream,org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler)>(r0, $r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.document.operation.DocInitialization parse(java.io.InputStream, org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler) throws java.io.IOException, org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException $r7, $r9;
        javax.xml.parsers.SAXParserFactory $r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r5;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder $r4;
        javax.xml.parsers.ParserConfigurationException $r8;
        org.xml.sax.SAXException $r6;
        javax.xml.parsers.SAXParser $r1;
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler r3;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        virtualinvoke $r1.<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)>(r2, r3);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException;

        specialinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException: void <init>(java.lang.Exception,org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)>($r8, null);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException;

        specialinvoke $r7.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$ParseException: void <init>(java.lang.Exception,org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)>($r6, null);

        throw $r7;

     label5:
        $r4 = r3.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder builder>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.DocInitialization build()>();

        return $r5;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
        catch org.xml.sax.SAXException from label1 to label2 with label4;
    }
}
