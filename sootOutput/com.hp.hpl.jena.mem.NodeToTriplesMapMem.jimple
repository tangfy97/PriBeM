public class com.hp.hpl.jena.mem.NodeToTriplesMapMem extends com.hp.hpl.jena.mem.NodeToTriplesMapBase
{

    public void <init>(com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.graph.Triple$Field r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple$Field;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple$Field;

        r3 := @parameter2: com.hp.hpl.jena.graph.Triple$Field;

        specialinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void <init>(com.hp.hpl.jena.graph.Triple$Field,com.hp.hpl.jena.graph.Triple$Field,com.hp.hpl.jena.graph.Triple$Field)>(r1, r2, r3);

        return;
    }

    public boolean add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4, r9;
        com.hp.hpl.jena.mem.HashedTripleBunch $r5;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.ArrayBunch $r7;
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.mem.BunchMap $r3, $r6, $r8;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r2);

        r9 = $r4;

        if $r4 != null goto label1;

        $r8 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r7 = new com.hp.hpl.jena.mem.ArrayBunch;

        specialinvoke $r7.<com.hp.hpl.jena.mem.ArrayBunch: void <init>()>();

        r9 = $r7;

        interfaceinvoke $r8.<com.hp.hpl.jena.mem.BunchMap: void put(java.lang.Object,com.hp.hpl.jena.mem.TripleBunch)>($r2, $r7);

     label1:
        $z0 = interfaceinvoke r9.<com.hp.hpl.jena.mem.TripleBunch: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i0 = interfaceinvoke r9.<com.hp.hpl.jena.mem.TripleBunch: int size()>();

        if $i0 != 9 goto label3;

        $z1 = r9 instanceof com.hp.hpl.jena.mem.ArrayBunch;

        if $z1 == 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r5 = new com.hp.hpl.jena.mem.HashedTripleBunch;

        specialinvoke $r5.<com.hp.hpl.jena.mem.HashedTripleBunch: void <init>(com.hp.hpl.jena.mem.TripleBunch)>(r9);

        r9 = $r5;

        interfaceinvoke $r6.<com.hp.hpl.jena.mem.BunchMap: void put(java.lang.Object,com.hp.hpl.jena.mem.TripleBunch)>($r2, $r5);

     label3:
        interfaceinvoke r9.<com.hp.hpl.jena.mem.TripleBunch: void add(com.hp.hpl.jena.graph.Triple)>(r1);

        $i1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: int size>;

        $i2 = $i1 + 1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: int size> = $i2;

        return 1;
    }

    public boolean remove(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.mem.BunchMap $r3, $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r2);

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: void remove(com.hp.hpl.jena.graph.Triple)>(r1);

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: int size>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: int size> = $i1;

        $i2 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: int size()>();

        if $i2 != 0 goto label3;

        $r5 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        interfaceinvoke $r5.<com.hp.hpl.jena.mem.BunchMap: void remove(java.lang.Object)>($r2);

     label3:
        return 1;
    }

    public java.util.Iterator iterator(java.lang.Object, com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r3;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r4;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>(r4);

     label2:
        return $r5;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r3);

        if $r4 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

     label2:
        return $z0;
    }

    public boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r3);

        if $r4 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)>(r1);

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        com.hp.hpl.jena.graph.Node r0, r5, r8;
        com.hp.hpl.jena.graph.Triple$Field $r6, $r9;
        com.hp.hpl.jena.util.iterator.Filter $r7, $r10, $r11;
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r13, $r14;
        com.hp.hpl.jena.mem.BunchMap $r3;
        java.lang.Object $r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapMem$NotifyMe $r12;

        r2 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r8 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getIndexingValue()>();

        $r3 = r2.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r1);

        if $r4 != null goto label1;

        $r14 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        goto label2;

     label1:
        $r6 = r2.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.graph.Triple$Field f2>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Node)>(r5);

        $r9 = r2.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.graph.Triple$Field f3>;

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Node)>(r8);

        $r11 = virtualinvoke $r7.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.Filter and(com.hp.hpl.jena.util.iterator.Filter)>($r10);

        $r12 = new com.hp.hpl.jena.mem.NodeToTriplesMapMem$NotifyMe;

        specialinvoke $r12.<com.hp.hpl.jena.mem.NodeToTriplesMapMem$NotifyMe: void <init>(com.hp.hpl.jena.mem.NodeToTriplesMapMem,java.lang.Object)>(r2, $r1);

        $r13 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>($r12);

        $r14 = virtualinvoke $r11.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(java.util.Iterator)>($r13);

     label2:
        return $r14;
    }

    protected com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r3;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.Iterator iteratorForIndexed(java.lang.Object)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapMem r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.mem.TripleBunch $r2;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapMem;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapMem: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        return $r3;
    }
}
