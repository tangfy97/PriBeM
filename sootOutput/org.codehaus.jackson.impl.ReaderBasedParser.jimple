public final class org.codehaus.jackson.impl.ReaderBasedParser extends org.codehaus.jackson.impl.ReaderBasedNumericParser
{
    protected org.codehaus.jackson.ObjectCodec _objectCodec;
    protected final org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols;

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.Reader, org.codehaus.jackson.ObjectCodec, org.codehaus.jackson.sym.CharsToNameCanonicalizer)
    {
        org.codehaus.jackson.io.IOContext r1;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.ObjectCodec r3;
        int i0;
        java.io.Reader r2;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r4;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.Reader;

        r3 := @parameter3: org.codehaus.jackson.ObjectCodec;

        r4 := @parameter4: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.Reader)>(r1, i0, r2);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r3;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols> = r4;

        return;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return $r1;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r1;

        return;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r7, $r8, $r9, $r14, $r25, $r29, $r30, r32;
        org.codehaus.jackson.impl.JsonReadContext $r3, $r5, $r6, $r10, $r11, $r13, $r17, $r22, $r23, $r24, $r26, $r27, $r28, $r31;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r15, $r16, $r19, $r20;
        long $l2, $l3, $l4, $l5;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        java.lang.String $r12, $r18, $r21;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r2 != $r1 goto label01;

        $r30 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _nextAfterName()>();

        return $r30;

     label01:
        $z0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipString()>();

     label02:
        $i0 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _skipWSOrEnd()>();

        i16 = $i0;

        if $i0 >= 0 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void close()>();

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = null;

        return null;

     label03:
        $l3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: long _currInputProcessed>;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $l5 = $l4 - 1L;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: long _tokenInputTotal> = $l5;

        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRow>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputRow> = $i6;

        $i8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRowStart>;

        $i9 = $i8 - $i7;

        $i10 = $i9 - 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputCol> = $i10;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: byte[] _binaryValue> = null;

        if $i0 != 93 goto label05;

        $r26 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z3 = virtualinvoke $r26.<org.codehaus.jackson.impl.JsonReadContext: boolean inArray()>();

        if $z3 != 0 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportMismatchedEndMarker(int,char)>($i0, 125);

     label04:
        $r27 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r28 = virtualinvoke $r27.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r28;

        $r29 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = $r29;

        return $r29;

     label05:
        if $i0 != 125 goto label07;

        $r22 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z2 = virtualinvoke $r22.<org.codehaus.jackson.impl.JsonReadContext: boolean inObject()>();

        if $z2 != 0 goto label06;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportMismatchedEndMarker(int,char)>($i0, 93);

     label06:
        $r23 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r24 = virtualinvoke $r23.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r24;

        $r25 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = $r25;

        return $r25;

     label07:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r3.<org.codehaus.jackson.impl.JsonReadContext: boolean expectComma()>();

        if $z1 == 0 goto label09;

        if $i0 == 44 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was expecting comma to separate ");

        $r17 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r18 = virtualinvoke $r17.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>($i0, $r21);

     label08:
        i16 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _skipWS()>();

     label09:
        $r31 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z4 = virtualinvoke $r31.<org.codehaus.jackson.impl.JsonReadContext: boolean inObject()>();

        if $z4 == 0 goto label11;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _parseFieldName(int)>(i16);

        $r13 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        virtualinvoke $r13.<org.codehaus.jackson.impl.JsonReadContext: void setCurrentName(java.lang.String)>($r12);

        $r14 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = $r14;

        $i15 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _skipWS()>();

        if $i15 == 58 goto label10;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>($i15, "was expecting a colon to separate field name and value");

     label10:
        i16 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _skipWS()>();

     label11:
        lookupswitch(i16)
        {
            case 34: goto label12;
            case 45: goto label21;
            case 48: goto label21;
            case 49: goto label21;
            case 50: goto label21;
            case 51: goto label21;
            case 52: goto label21;
            case 53: goto label21;
            case 54: goto label21;
            case 55: goto label21;
            case 56: goto label21;
            case 57: goto label21;
            case 91: goto label13;
            case 93: goto label17;
            case 102: goto label19;
            case 110: goto label20;
            case 116: goto label18;
            case 123: goto label15;
            case 125: goto label17;
            default: goto label22;
        };

     label12:
        r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean _tokenIncomplete> = 1;

        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        goto label23;

     label13:
        if $z4 != 0 goto label14;

        $r10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i14 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputRow>;

        $i13 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputCol>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>($i14, $i13);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r11;

     label14:
        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        goto label23;

     label15:
        if $z4 != 0 goto label16;

        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i12 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputRow>;

        $i11 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputCol>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>($i12, $i11);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

     label16:
        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        goto label23;

     label17:
        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>(i16, "expected a value");

     label18:
        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r7);

        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        goto label23;

     label19:
        $r9 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r9);

        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        goto label23;

     label20:
        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r8);

        r32 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        goto label23;

     label21:
        r32 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken parseNumberText(int)>(i16);

        goto label23;

     label22:
        r32 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _handleUnexpectedValue(int)>(i16);

     label23:
        if $z4 == 0 goto label24;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _nextToken> = r32;

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r4;

     label24:
        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = r32;

        return r32;
    }

    private final org.codehaus.jackson.JsonToken _nextAfterName()
    {
        org.codehaus.jackson.JsonToken r1, $r2, $r3;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.impl.JsonReadContext $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean _nameCopied> = 0;

        r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _nextToken>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _nextToken> = null;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if r1 != $r2 goto label1;

        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputRow>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputCol>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>($i3, $i2);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r7;

        goto label2;

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if r1 != $r3 goto label2;

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputRow>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _tokenInputCol>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>($i1, $i0);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r5;

     label2:
        r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonToken _currToken> = r1;

        return r1;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void close()>();

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        virtualinvoke $r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void release()>();

        return;
    }

    protected final java.lang.String _parseFieldName(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r4;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int[] $r1;
        int i0, i1, i2, $i3, $i5, i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r5, $r6, $r7;
        char $c4;
        char[] $r2, $r3;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i0 := @parameter0: int;

        if i0 == 34 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _handleUnusualFieldName(int)>(i0);

        return $r6;

     label1:
        i9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i10 = 0;

        i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if i9 >= i1 goto label4;

        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        i2 = lengthof $r1;

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $c4 = $r2[i9];

        $i12 = (int) $c4;

        if $i12 >= i2 goto label3;

        $i13 = (int) $c4;

        $i5 = $r1[$i13];

        if $i5 == 0 goto label3;

        $i14 = (int) $c4;

        if $i14 != 34 goto label4;

        i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i7 = i9 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i7;

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i8 = i9 - i6;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r3, i6, $i8, i10);

        return $r5;

     label3:
        $i3 = i10 * 31;

        $i15 = (int) $c4;

        i10 = $i3 + $i15;

        i9 = i9 + 1;

        if i9 < i1 goto label2;

     label4:
        $i11 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i9;

        $r7 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _parseFieldName2(int,int,int)>($i11, i10, 34);

        return $r7;
    }

    private java.lang.String _parseFieldName2(int, int, int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r8;
        org.codehaus.jackson.util.TextBuffer $r2, $r3, $r4, $r5, $r6, r17;
        boolean $z0;
        java.lang.StringBuilder $r11, $r12, $r13, $r18;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i9, i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r9, $r14;
        char $c8, $c13, c14;
        char[] $r1, $r7, r15, $r16;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i0 := @parameter0: int;

        i9 := @parameter1: int;

        i5 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i2 = $i1 - i0;

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void resetWithShared(char[],int,int)>($r1, i0, $i2);

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r15 = virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: char[] getCurrentSegment()>();

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        i10 = virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: int getCurrentSegmentSize()>();

     label1:
        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i4 < $i3 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label2;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": was expecting closing \'");

        $c8 = (char) i5;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for name");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>($r14);

     label2:
        $r16 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i11 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i12 = $i11 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i12;

        $c13 = $r16[$i11];

        c14 = $c13;

        $i18 = (int) $c13;

        if $i18 > 92 goto label5;

        $i19 = (int) $c13;

        if $i19 != 92 goto label3;

        c14 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: char _decodeEscaped()>();

        goto label5;

     label3:
        $i20 = (int) $c13;

        if $i20 > i5 goto label5;

        $i21 = (int) $c13;

        if $i21 != i5 goto label4;

        goto label7;

     label4:
        $i22 = (int) $c13;

        if $i22 >= 32 goto label5;

        $i23 = (int) $c13;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwUnquotedSpace(int,java.lang.String)>($i23, "name");

     label5:
        $i15 = i9 * 31;

        $i24 = (int) $c13;

        i9 = $i15 + $i24;

        $i16 = i10;

        i10 = i10 + 1;

        r15[$i16] = c14;

        $i17 = lengthof r15;

        if i10 < $i17 goto label6;

        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r15 = virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i10 = 0;

     label6:
        goto label1;

     label7:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r6.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i10);

        r17 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r7 = virtualinvoke r17.<org.codehaus.jackson.util.TextBuffer: char[] getTextBuffer()>();

        $i6 = virtualinvoke r17.<org.codehaus.jackson.util.TextBuffer: int getTextOffset()>();

        $i7 = virtualinvoke r17.<org.codehaus.jackson.util.TextBuffer: int size()>();

        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r7, $i6, $i7, i9);

        return $r9;
    }

    protected final java.lang.String _handleUnusualFieldName(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r6, $r9;
        int[] $r2;
        boolean $z0, $z1, $z2, $z3, z4;
        org.codehaus.jackson.JsonParser$Feature $r1, $r11;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int i0, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, $i20, $i21, $i22;
        java.lang.String $r3, $r7, $r10, $r12;
        char $c1, $c3, $c5;
        char[] $r4, $r5, $r8;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i0 := @parameter0: int;

        if i0 != 39 goto label01;

        $r11 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r11);

        if $z2 == 0 goto label01;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _parseApostropheFieldName()>();

        return $r12;

     label01:
        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 != 0 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>(i0, "was expecting double-quote to start field name");

     label02:
        $r2 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1JsNames()>();

        $i15 = lengthof $r2;

        if i0 >= $i15 goto label06;

        $i14 = $r2[i0];

        if $i14 != 0 goto label04;

        if i0 < 48 goto label03;

        if i0 <= 57 goto label04;

     label03:
        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z4 = $z3;

        goto label07;

     label06:
        $c1 = (char) i0;

        z4 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c1);

     label07:
        if z4 != 0 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>(i0, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");

     label08:
        $i12 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i16 = $i12;

        i17 = 0;

        $i13 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i12 >= $i13 goto label12;

     label09:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $c5 = $r4[i16];

        $i20 = (int) $c5;

        if $i20 >= $i15 goto label10;

        $i21 = (int) $c5;

        $i9 = $r2[$i21];

        if $i9 == 0 goto label11;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i18 = $i10 - 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i16;

        $r9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i11 = i16 - i18;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r8, i18, $i11, i17);

        return $r10;

     label10:
        $c3 = (char) $c5;

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c3);

        if $z1 != 0 goto label11;

        $i7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i19 = $i7 - 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i16;

        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i8 = i16 - i19;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r5, i19, $i8, i17);

        return $r7;

     label11:
        $i4 = i17 * 31;

        $i22 = (int) $c5;

        i17 = $i4 + $i22;

        i16 = i16 + 1;

        if i16 < $i13 goto label09;

     label12:
        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i6 = $i2 - 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i16;

        $r3 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _parseUnusualFieldName2(int,int,int[])>($i6, i17, $r2);

        return $r3;
    }

    protected final java.lang.String _parseApostropheFieldName() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r4;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int[] $r1;
        int i0, i1, $i2, $i4, i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r5, $r6;
        char $c3;
        char[] $r2, $r3;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i9 = 0;

        i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if i8 >= i0 goto label4;

        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        i1 = lengthof $r1;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $c3 = $r2[i8];

        $i11 = (int) $c3;

        if $i11 != 39 goto label2;

        i5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i6 = i8 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i6;

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i7 = i8 - i5;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r3, i5, $i7, i9);

        return $r5;

     label2:
        $i12 = (int) $c3;

        if $i12 >= i1 goto label3;

        $i13 = (int) $c3;

        $i4 = $r1[$i13];

        if $i4 == 0 goto label3;

        goto label4;

     label3:
        $i2 = i9 * 31;

        $i14 = (int) $c3;

        i9 = $i2 + $i14;

        i8 = i8 + 1;

        if i8 < i0 goto label1;

     label4:
        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i8;

        $r6 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _parseFieldName2(int,int,int)>($i10, i9, 39);

        return $r6;
    }

    protected final org.codehaus.jackson.JsonToken _handleUnexpectedValue(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.codehaus.jackson.util.TextBuffer $r1, $r2, $r5, $r7;
        boolean $z0, $z1;
        char $c7, c8;
        char[] r6, $r8;
        org.codehaus.jackson.JsonParser$Feature $r4;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i1 := @parameter0: int;

        if i1 != 39 goto label1;

        $r4 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r4);

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>(i1, "expected a valid value (number, String, array, object, \'true\', \'false\' or \'null\')");

     label2:
        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r6 = virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $r7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        i2 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: int getCurrentSegmentSize()>();

     label3:
        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i3 < $i4 goto label4;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(": was expecting closing quote for a string value");

     label4:
        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i6;

        $c7 = $r8[$i5];

        c8 = $c7;

        $i10 = (int) $c7;

        if $i10 > 92 goto label7;

        $i11 = (int) $c7;

        if $i11 != 92 goto label5;

        c8 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: char _decodeEscaped()>();

        goto label7;

     label5:
        $i12 = (int) $c7;

        if $i12 > 39 goto label7;

        $i13 = (int) $c7;

        if $i13 != 39 goto label6;

        goto label9;

     label6:
        $i14 = (int) $c7;

        if $i14 >= 32 goto label7;

        $i15 = (int) $c7;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwUnquotedSpace(int,java.lang.String)>($i15, "string value");

     label7:
        $i9 = lengthof r6;

        if i2 < $i9 goto label8;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r6 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i2 = 0;

     label8:
        $i0 = i2;

        i2 = i2 + 1;

        r6[$i0] = c8;

        goto label3;

     label9:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i2);

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        return $r3;
    }

    private java.lang.String _parseUnusualFieldName2(int, int, int[]) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r12;
        int[] r5;
        org.codehaus.jackson.util.TextBuffer $r2, $r3, $r4, $r7, $r9, $r10;
        boolean $z0, $z1;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r13;
        char $c13;
        char[] $r1, $r6, r8, $r11;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i0 := @parameter0: int;

        i14 := @parameter1: int;

        r5 := @parameter2: int[];

        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i2 = $i1 - i0;

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void resetWithShared(char[],int,int)>($r1, i0, $i2);

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: char[] getCurrentSegment()>();

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        i15 = virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: int getCurrentSegmentSize()>();

        i3 = lengthof r5;

     label1:
        $i5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i5 < $i4 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z1 != 0 goto label2;

        goto label6;

     label2:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $c13 = $r6[$i6];

        $i18 = (int) $c13;

        if $i18 > i3 goto label3;

        $i19 = (int) $c13;

        $i12 = r5[$i19];

        if $i12 == 0 goto label4;

        goto label6;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c13);

        if $z0 != 0 goto label4;

        goto label6;

     label4:
        $i7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i8 = $i7 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i8;

        $i9 = i14 * 31;

        $i20 = (int) $c13;

        i14 = $i9 + $i20;

        $i10 = i15;

        i15 = i15 + 1;

        r8[$i10] = $c13;

        $i11 = lengthof r8;

        if i15 < $i11 goto label5;

        $r7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label5:
        goto label1;

     label6:
        $r9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r9.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i15);

        $r10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.util.TextBuffer: char[] getTextBuffer()>();

        $i16 = virtualinvoke $r10.<org.codehaus.jackson.util.TextBuffer: int getTextOffset()>();

        $i17 = virtualinvoke $r10.<org.codehaus.jackson.util.TextBuffer: int size()>();

        $r12 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.sym.CharsToNameCanonicalizer _symbols>;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>($r11, $i16, $i17, i14);

        return $r13;
    }

    protected void _finishString() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int[] $r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.codehaus.jackson.util.TextBuffer $r4, $r5;
        char $c2;
        char[] $r2, $r3, $r6;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        i8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if i8 >= i0 goto label3;

        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        i1 = lengthof $r1;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $c2 = $r2[i8];

        $i12 = (int) $c2;

        if $i12 >= i1 goto label2;

        $i13 = (int) $c2;

        $i3 = $r1[$i13];

        if $i3 == 0 goto label2;

        $i14 = (int) $c2;

        if $i14 != 34 goto label3;

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i5 = i8 - $i4;

        virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: void resetWithShared(char[],int,int)>($r3, $i6, $i5);

        $i7 = i8 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i7;

        return;

     label2:
        i8 = i8 + 1;

        if i8 < i0 goto label1;

     label3:
        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i11 = i8 - $i10;

        virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: void resetWithCopy(char[],int,int)>($r6, $i9, $i11);

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i8;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _finishString2()>();

        return;
    }

    protected void _finishString2() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.codehaus.jackson.util.TextBuffer $r1, $r2, $r3, $r4;
        boolean $z0;
        char $c6, c7;
        char[] r5, $r6;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r5 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] getCurrentSegment()>();

        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        i3 = virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: int getCurrentSegmentSize()>();

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(": was expecting closing quote for a string value");

     label2:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i5;

        $c6 = $r6[$i4];

        c7 = $c6;

        $i9 = (int) $c6;

        if $i9 > 92 goto label5;

        $i10 = (int) $c6;

        if $i10 != 92 goto label3;

        c7 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: char _decodeEscaped()>();

        goto label5;

     label3:
        $i11 = (int) $c6;

        if $i11 > 34 goto label5;

        $i12 = (int) $c6;

        if $i12 != 34 goto label4;

        goto label7;

     label4:
        $i13 = (int) $c6;

        if $i13 >= 32 goto label5;

        $i14 = (int) $c6;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwUnquotedSpace(int,java.lang.String)>($i14, "string value");

     label5:
        $i8 = lengthof r5;

        if i3 < $i8 goto label6;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r5 = virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i3 = 0;

     label6:
        $i2 = i3;

        i3 = i3 + 1;

        r5[$i2] = c7;

        goto label1;

     label7:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i3);

        return;
    }

    protected void _skipString() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        char $c3;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean _tokenIncomplete> = 0;

        i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

     label1:
        if i0 < i1 goto label3;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i0;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(": was expecting closing quote for a string value");

     label2:
        i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

     label3:
        $i2 = i0;

        i0 = i0 + 1;

        $c3 = r1[$i2];

        $i4 = (int) $c3;

        if $i4 > 92 goto label6;

        $i5 = (int) $c3;

        if $i5 != 92 goto label4;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i0;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: char _decodeEscaped()>();

        i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        goto label6;

     label4:
        $i6 = (int) $c3;

        if $i6 > 34 goto label6;

        $i7 = (int) $c3;

        if $i7 != 34 goto label5;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i0;

        goto label7;

     label5:
        $i8 = (int) $c3;

        if $i8 >= 32 goto label6;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = i0;

        $i9 = (int) $c3;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwUnquotedSpace(int,java.lang.String)>($i9, "string value");

     label6:
        goto label1;

     label7:
        return;
    }

    protected void _matchToken(org.codehaus.jackson.JsonToken) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken r0;
        org.codehaus.jackson.impl.ReaderBasedParser r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i9, $i10;
        java.lang.String $r1, $r3;
        boolean $z0;
        char $c7, $c8;
        char[] $r4;

        r2 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r0 := @parameter0: org.codehaus.jackson.JsonToken;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        i5 = 1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if i5 >= $i0 goto label4;

        $i2 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i1 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i2 < $i1 goto label2;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label2;

        virtualinvoke r2.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(" in a value");

     label2:
        $r4 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i6 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $c7 = $r4[$i6];

        $c8 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        $i9 = (int) $c7;

        $i10 = (int) $c8;

        if $i9 == $i10 goto label3;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        specialinvoke r2.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidToken(java.lang.String)>($r3);

     label3:
        $i3 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i4 = $i3 + 1;

        r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i4;

        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    private void _reportInvalidToken(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r1, $r6, $r9;
        boolean $z0, $z1;
        char $c5;
        char[] $r3;
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8;

        r2 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

     label1:
        $i1 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z1 = virtualinvoke r2.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z1 != 0 goto label2;

        goto label4;

     label2:
        $r3 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $c5 = $r3[$i2];

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c5);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $i3 = r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i4 = $i3 + 1;

        r2.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        goto label1;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized token \'");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': was expecting \'null\', \'true\' or \'false\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportError(java.lang.String)>($r9);

        return;
    }

    protected final void _skipCR() throws java.io.IOException
    {
        char $c3;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $c3 = $r1[$i2];

        $i9 = (int) $c3;

        if $i9 != 10 goto label2;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i5;

     label2:
        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRow>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRow> = $i7;

        $i8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRowStart> = $i8;

        return;
    }

    protected final void _skipLF() throws java.io.IOException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRow> = $i1;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _currInputRowStart> = $i2;

        return;
    }

    private final int _skipWS() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.impl.JsonReadContext $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r5, $r8;
        boolean $z0;
        char $c4;
        org.codehaus.jackson.JsonParseException $r9;
        char[] $r1;
        java.lang.StringBuilder $r3, $r6, $r7, $r10;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i3;

        $c4 = $r1[$i2];

        $i5 = (int) $c4;

        if $i5 <= 32 goto label4;

        $i6 = (int) $c4;

        if $i6 == 47 goto label3;

        $i7 = (int) $c4;

        return $i7;

     label3:
        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipComment()>();

        goto label7;

     label4:
        $i8 = (int) $c4;

        if $i8 == 32 goto label7;

        $i9 = (int) $c4;

        if $i9 != 10 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipLF()>();

        goto label7;

     label5:
        $i10 = (int) $c4;

        if $i10 != 13 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCR()>();

        goto label7;

     label6:
        $i11 = (int) $c4;

        if $i11 == 9 goto label7;

        $i12 = (int) $c4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwInvalidSpace(int)>($i12);

     label7:
        goto label1;

     label8:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input within/between ");

        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r8);

        throw $r9;
    }

    private final int _skipWSOrEnd() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        boolean $z0;
        char $c4;
        char[] $r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i3;

        $c4 = $r1[$i2];

        $i5 = (int) $c4;

        if $i5 <= 32 goto label4;

        $i6 = (int) $c4;

        if $i6 == 47 goto label3;

        $i7 = (int) $c4;

        return $i7;

     label3:
        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipComment()>();

        goto label7;

     label4:
        $i8 = (int) $c4;

        if $i8 == 32 goto label7;

        $i9 = (int) $c4;

        if $i9 != 10 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipLF()>();

        goto label7;

     label5:
        $i10 = (int) $c4;

        if $i10 != 13 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCR()>();

        goto label7;

     label6:
        $i11 = (int) $c4;

        if $i11 == 9 goto label7;

        $i12 = (int) $c4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwInvalidSpace(int)>($i12);

     label7:
        goto label1;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _handleEOF()>();

        $i14 = (int) -1;

        return $i14;
    }

    private final void _skipComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        char $c4;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        char[] $r2;
        org.codehaus.jackson.JsonParser$Feature $r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_COMMENTS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(" in a comment");

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i3;

        $c4 = $r2[$i2];

        $i5 = (int) $c4;

        if $i5 != 47 goto label3;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCppComment()>();

        goto label5;

     label3:
        $i6 = (int) $c4;

        if $i6 != 42 goto label4;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCComment()>();

        goto label5;

     label4:
        $i7 = (int) $c4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>($i7, "was expecting either \'*\' or \'/\' for a comment");

     label5:
        return;
    }

    private final void _skipCComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean $z0, $z1;
        char $c5, $c8;
        char[] $r1, $r2;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

     label1:
        $i9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i9 < $i10 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z1 == 0 goto label8;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i1;

        $c8 = $r1[$i0];

        $i11 = (int) $c8;

        if $i11 > 42 goto label7;

        $i12 = (int) $c8;

        if $i12 != 42 goto label4;

        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i3 < $i2 goto label3;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label3;

        goto label8;

     label3:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $c5 = $r2[$i4];

        $i13 = (int) $c5;

        if $i13 != 47 goto label1;

        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i7;

        return;

     label4:
        $i14 = (int) $c8;

        if $i14 >= 32 goto label7;

        $i15 = (int) $c8;

        if $i15 != 10 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipLF()>();

        goto label7;

     label5:
        $i16 = (int) $c8;

        if $i16 != 13 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCR()>();

        goto label7;

     label6:
        $i17 = (int) $c8;

        if $i17 == 9 goto label7;

        $i18 = (int) $c8;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwInvalidSpace(int)>($i18);

     label7:
        goto label1;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(" in a comment");

        return;
    }

    private final void _skipCppComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        char $c4;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        char[] $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 == 0 goto label6;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i3;

        $c4 = $r1[$i2];

        $i5 = (int) $c4;

        if $i5 >= 32 goto label5;

        $i6 = (int) $c4;

        if $i6 != 10 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipLF()>();

        goto label6;

     label3:
        $i7 = (int) $c4;

        if $i7 != 13 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _skipCR()>();

        goto label6;

     label4:
        $i8 = (int) $c4;

        if $i8 == 9 goto label5;

        $i9 = (int) $c4;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _throwInvalidSpace(int)>($i9);

     label5:
        goto label1;

     label6:
        return;
    }

    protected final char _decodeEscaped() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, i9, i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r3, $r5;
        boolean $z0, $z1;
        char $c2, $c8, $c13;
        char[] $r6, $r7;
        java.lang.StringBuilder $r2, $r4, $r8;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        $i1 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i1 < $i0 goto label01;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z1 != 0 goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(" in character escape sequence");

     label01:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i7;

        $c8 = $r6[$i6];

        $i15 = (int) $c8;

        lookupswitch($i15)
        {
            case 34: goto label07;
            case 47: goto label07;
            case 92: goto label07;
            case 98: goto label02;
            case 102: goto label05;
            case 110: goto label04;
            case 114: goto label06;
            case 116: goto label03;
            case 117: goto label08;
            default: goto label09;
        };

     label02:
        return 8;

     label03:
        return 9;

     label04:
        return 10;

     label05:
        return 12;

     label06:
        return 13;

     label07:
        return $c8;

     label08:
        goto label10;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character escape ");

        $i16 = (int) $c8;

        $r3 = staticinvoke <org.codehaus.jackson.impl.ReaderBasedParser: java.lang.String _getCharDesc(int)>($i16);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportError(java.lang.String)>($r5);

     label10:
        i9 = 0;

        i10 = 0;

     label11:
        if i10 >= 4 goto label14;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i4 < $i3 goto label12;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: boolean loadMore()>();

        if $z0 != 0 goto label12;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportInvalidEOF(java.lang.String)>(" in character escape sequence");

     label12:
        $r7 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i11 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i12 = $i11 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i12;

        $c13 = $r7[$i11];

        $i17 = (int) $c13;

        $i14 = staticinvoke <org.codehaus.jackson.util.CharTypes: int charToHex(int)>($i17);

        if $i14 >= 0 goto label13;

        $i18 = (int) $c13;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void _reportUnexpectedChar(int,java.lang.String)>($i18, "expected a hex-digit for character escape sequence");

     label13:
        $i5 = i9 << 4;

        i9 = $i5 | $i14;

        i10 = i10 + 1;

        goto label11;

     label14:
        $c2 = (char) i9;

        return $c2;
    }

    protected byte[] _decodeBase64(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r18;
        org.codehaus.jackson.Base64Variant r3;
        boolean $z0;
        java.lang.StringBuilder $r10, $r11, $r12, $r19;
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i31, $i32, i33, i34, i35, i36, i37, $i38, $i39, $i41, $i43;
        java.lang.String $r13;
        char $c21, $c26, $c27, $c28, $c29, $c30;
        java.lang.IllegalArgumentException $r7, $r14, $r15, $r16, $r17;
        char[] $r2, $r4, $r5, $r6, $r8;
        org.codehaus.jackson.util.ByteArrayBuilder $r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r3 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: org.codehaus.jackson.util.ByteArrayBuilder _getByteArrayBuilder()>();

     label01:
        $i31 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i32 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i31 < $i32 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void loadMoreGuaranteed()>();

     label02:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i1;

        $c30 = $r2[$i0];

        $i38 = (int) $c30;

        if $i38 <= 32 goto label01;

        $i2 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c30);

        if $i2 >= 0 goto label04;

        $i39 = (int) $c30;

        if $i39 != 34 goto label03;

        $r18 = virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r18;

     label03:
        $r17 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c30, 0);

        throw $r17;

     label04:
        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i4 < $i3 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void loadMoreGuaranteed()>();

     label05:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i6;

        $c29 = $r4[$i5];

        $i7 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c29);

        if $i7 >= 0 goto label06;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c29, 1);

        throw $r16;

     label06:
        $i8 = $i2 << 6;

        i33 = $i8 | $i7;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i9 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i10 < $i9 goto label07;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void loadMoreGuaranteed()>();

     label07:
        $r5 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i11 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i12 = $i11 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i12;

        $c28 = $r5[$i11];

        $i13 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c28);

        if $i13 >= 0 goto label11;

        $i41 = (int) -2;

        if $i13 == $i41 goto label08;

        $r15 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c28, 2);

        throw $r15;

     label08:
        $i23 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i22 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i23 < $i22 goto label09;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void loadMoreGuaranteed()>();

     label09:
        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i24 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i25 = $i24 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i25;

        $c27 = $r8[$i24];

        $z0 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c27);

        if $z0 != 0 goto label10;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c26 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c26);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r3, $c27, 3, $r13);

        throw $r14;

     label10:
        i34 = i33 >> 4;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i34);

        goto label01;

     label11:
        $i14 = i33 << 6;

        i35 = $i14 | $i13;

        $i16 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i15 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputEnd>;

        if $i16 < $i15 goto label12;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: void loadMoreGuaranteed()>();

     label12:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: char[] _inputBuffer>;

        $i17 = r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr>;

        $i18 = $i17 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParser: int _inputPtr> = $i18;

        $c21 = $r6[$i17];

        $i19 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c21);

        if $i19 >= 0 goto label14;

        $i43 = (int) -2;

        if $i19 == $i43 goto label13;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c21, 3);

        throw $r7;

     label13:
        i36 = i35 >> 2;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>(i36);

        goto label15;

     label14:
        $i20 = i35 << 6;

        i37 = $i20 | $i19;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i37);

     label15:
        goto label01;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant, char, int) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.impl.ReaderBasedParser r0;
        org.codehaus.jackson.Base64Variant r1;
        int i1;
        char c0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, c0, i1, null);

        return $r2;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant, char, int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r4, $r5, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r28, $r29, $r30, $r31, $r34, $r35, $r36, $r37, $r38;
        org.codehaus.jackson.impl.ReaderBasedParser r32;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, r6, $r16, $r27, r33;
        char c0, $c1;
        java.lang.IllegalArgumentException $r39;

        r32 := @this: org.codehaus.jackson.impl.ReaderBasedParser;

        r0 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i2 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        $i5 = (int) c0;

        if $i5 > 32 goto label1;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $i6 = (int) c0;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i4 = i2 + 1;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c1 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i3 = i2 + 1;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r33 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $i7 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $i8 = (int) c0;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r6 == null goto label6;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r33 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r33);

        return $r39;
    }
}
