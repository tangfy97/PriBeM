public final class org.aspectj.runtime.reflect.Factory extends java.lang.Object
{
    java.lang.Class lexicalClass;
    java.lang.ClassLoader lookupClassLoader;
    java.lang.String filename;
    int count;
    static java.util.Hashtable prims;
    private static java.lang.Object[] NO_ARGS;
    static java.lang.Class class$java$lang$ClassNotFoundException;

    static java.lang.Class makeClass(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.Object $r2;
        java.lang.Class r3, $r5, $r6, $r8, $r9;
        java.lang.ClassNotFoundException $r7;
        java.lang.String r0;
        java.lang.ClassLoader r4;
        java.util.Hashtable $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.ClassLoader;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

        if r3 == null goto label2;

        return r3;

     label2:
        if r4 != null goto label4;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label3:
        return $r6;

     label4:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 0, r4);

     label5:
        return $r5;

     label6:
        $r7 := @caughtexception;

        $r8 = <org.aspectj.runtime.reflect.Factory: java.lang.Class class$java$lang$ClassNotFoundException>;

        if $r8 != null goto label7;

        $r9 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class class$(java.lang.String)>("java.lang.ClassNotFoundException");

        <org.aspectj.runtime.reflect.Factory: java.lang.Class class$java$lang$ClassNotFoundException> = $r9;

        goto label8;

     label7:
        $r9 = <org.aspectj.runtime.reflect.Factory: java.lang.Class class$java$lang$ClassNotFoundException>;

     label8:
        return $r9;

        catch java.lang.ClassNotFoundException from label2 to label3 with label6;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    public void <init>(java.lang.String, java.lang.Class)
    {
        org.aspectj.runtime.reflect.Factory r0;
        java.lang.Class r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r0 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.runtime.reflect.Factory: java.lang.String filename> = r1;

        r0.<org.aspectj.runtime.reflect.Factory: java.lang.Class lexicalClass> = r2;

        r0.<org.aspectj.runtime.reflect.Factory: int count> = 0;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader> = $r3;

        return;
    }

    public org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)
    {
        org.aspectj.lang.reflect.SourceLocation $r11;
        org.aspectj.runtime.reflect.Factory r0;
        int $i0, $i1, i2, $i4;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, r10;
        org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl $r12;
        org.aspectj.lang.reflect.MethodSignature $r8;

        r0 := @this: org.aspectj.runtime.reflect.Factory;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        i2 := @parameter8: int;

        $r8 = virtualinvoke r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5, r6, r7);

        $r12 = new org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl;

        $i0 = r0.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r0.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $i4 = (int) -1;

        $r11 = virtualinvoke r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, $i4);

        specialinvoke $r12.<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r10, $r8, $r11);

        return $r12;
    }

    public org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)
    {
        org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl $r11;
        org.aspectj.lang.reflect.SourceLocation $r10;
        org.aspectj.runtime.reflect.Factory r0;
        int $i0, $i1, i2, $i4;
        org.aspectj.lang.reflect.MethodSignature $r7;
        java.lang.String r1, r2, r3, r4, r5, r6, r9;

        r0 := @this: org.aspectj.runtime.reflect.Factory;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        i2 := @parameter7: int;

        $r7 = virtualinvoke r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5, "", r6);

        $r11 = new org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl;

        $i0 = r0.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r0.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $i4 = (int) -1;

        $r10 = virtualinvoke r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, $i4);

        specialinvoke $r11.<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r9, $r7, $r10);

        return $r11;
    }

    public org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String, org.aspectj.lang.Signature, org.aspectj.lang.reflect.SourceLocation)
    {
        org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl $r0;
        org.aspectj.lang.reflect.SourceLocation r4;
        org.aspectj.runtime.reflect.Factory r1;
        int $i0, $i1;
        org.aspectj.lang.Signature r3;
        java.lang.String r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        r4 := @parameter2: org.aspectj.lang.reflect.SourceLocation;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, r4);

        return $r0;
    }

    public org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String, org.aspectj.lang.Signature, int, int)
    {
        org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl $r0;
        org.aspectj.lang.reflect.SourceLocation $r4;
        org.aspectj.runtime.reflect.Factory r1;
        org.aspectj.lang.Signature r3;
        int $i0, $i1, i2, i3;
        java.lang.String r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $r4 = virtualinvoke r1.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, i3);

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, $r4);

        return $r0;
    }

    public org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String, org.aspectj.lang.Signature, int)
    {
        org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl $r5;
        org.aspectj.lang.reflect.SourceLocation $r4;
        org.aspectj.runtime.reflect.Factory r1;
        org.aspectj.lang.Signature r3;
        int $i0, $i1, i2, $i4;
        java.lang.String r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        i2 := @parameter2: int;

        $r5 = new org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $i4 = (int) -1;

        $r4 = virtualinvoke r1.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, $i4);

        specialinvoke $r5.<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, $r4);

        return $r5;
    }

    public org.aspectj.lang.JoinPoint$EnclosingStaticPart makeESJP(java.lang.String, org.aspectj.lang.Signature, org.aspectj.lang.reflect.SourceLocation)
    {
        org.aspectj.lang.reflect.SourceLocation r4;
        org.aspectj.runtime.reflect.Factory r1;
        int $i0, $i1;
        org.aspectj.lang.Signature r3;
        org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl $r0;
        java.lang.String r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        r4 := @parameter2: org.aspectj.lang.reflect.SourceLocation;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, r4);

        return $r0;
    }

    public org.aspectj.lang.JoinPoint$EnclosingStaticPart makeESJP(java.lang.String, org.aspectj.lang.Signature, int, int)
    {
        org.aspectj.lang.reflect.SourceLocation $r4;
        org.aspectj.runtime.reflect.Factory r1;
        org.aspectj.lang.Signature r3;
        int $i0, $i1, i2, i3;
        org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl $r0;
        java.lang.String r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $r4 = virtualinvoke r1.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, i3);

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, $r4);

        return $r0;
    }

    public org.aspectj.lang.JoinPoint$EnclosingStaticPart makeESJP(java.lang.String, org.aspectj.lang.Signature, int)
    {
        org.aspectj.lang.reflect.SourceLocation $r4;
        org.aspectj.runtime.reflect.Factory r1;
        org.aspectj.lang.Signature r3;
        int $i0, $i1, i2, $i4;
        java.lang.String r2;
        org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl $r5;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.aspectj.lang.Signature;

        i2 := @parameter2: int;

        $r5 = new org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl;

        $i0 = r1.<org.aspectj.runtime.reflect.Factory: int count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.reflect.Factory: int count> = $i1;

        $i4 = (int) -1;

        $r4 = virtualinvoke r1.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>(i2, $i4);

        specialinvoke $r5.<org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i0, r2, r3, $r4);

        return $r5;
    }

    public static org.aspectj.lang.JoinPoint$StaticPart makeEncSJP(java.lang.reflect.Member)
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r18;
        java.lang.String[] $r6, $r14;
        java.lang.reflect.Constructor r20;
        org.aspectj.runtime.reflect.ConstructorSignatureImpl $r22;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r10, r19;
        org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl $r24;
        java.lang.reflect.Method r17;
        boolean $z0, $z1;
        java.lang.reflect.Member r0;
        java.lang.Class[] $r4, $r5, $r7, $r12, $r13, $r15;
        java.lang.IllegalArgumentException $r23;
        org.aspectj.runtime.reflect.MethodSignatureImpl $r21;
        java.lang.Class $r3, $r11, $r16;

        r0 := @parameter0: java.lang.reflect.Member;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        r17 = (java.lang.reflect.Method) r0;

        $r21 = new org.aspectj.runtime.reflect.MethodSignatureImpl;

        $i2 = virtualinvoke r17.<java.lang.reflect.Method: int getModifiers()>();

        $r10 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r12 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r13 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r13;

        $r14 = newarray (java.lang.String)[$i3];

        $r15 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $r16 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        specialinvoke $r21.<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>($i2, $r10, $r11, $r12, $r14, $r15, $r16);

        r18 = $r21;

        r19 = "method-execution";

        goto label3;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        r20 = (java.lang.reflect.Constructor) r0;

        $r22 = new org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        $i0 = virtualinvoke r20.<java.lang.reflect.Constructor: int getModifiers()>();

        $r3 = virtualinvoke r20.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke r20.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r5 = virtualinvoke r20.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        $r6 = newarray (java.lang.String)[$i1];

        $r7 = virtualinvoke r20.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();

        specialinvoke $r22.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: void <init>(int,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>($i0, $r3, $r4, $r6, $r7);

        r18 = $r22;

        r19 = "constructor-execution";

        goto label3;

     label2:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("member must be either a method or constructor");

        throw $r23;

     label3:
        $r24 = new org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl;

        $i5 = (int) -1;

        specialinvoke $r24.<org.aspectj.runtime.reflect.JoinPointImpl$EnclosingStaticPartImpl: void <init>(int,java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>($i5, r19, r18, null);

        return $r24;
    }

    public static org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart, java.lang.Object, java.lang.Object)
    {
        org.aspectj.runtime.reflect.JoinPointImpl $r0;
        java.lang.Object[] $r4;
        org.aspectj.lang.JoinPoint$StaticPart r1;
        java.lang.Object r2, r3;

        r1 := @parameter0: org.aspectj.lang.JoinPoint$StaticPart;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl;

        $r4 = <org.aspectj.runtime.reflect.Factory: java.lang.Object[] NO_ARGS>;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, $r4);

        return $r0;
    }

    public static org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.aspectj.runtime.reflect.JoinPointImpl $r0;
        java.lang.Object[] $r4;
        org.aspectj.lang.JoinPoint$StaticPart r1;
        java.lang.Object r2, r3, r5;

        r1 := @parameter0: org.aspectj.lang.JoinPoint$StaticPart;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, $r4);

        return $r0;
    }

    public static org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.aspectj.runtime.reflect.JoinPointImpl $r0;
        java.lang.Object[] $r4;
        org.aspectj.lang.JoinPoint$StaticPart r1;
        java.lang.Object r2, r3, r5, r6;

        r1 := @parameter0: org.aspectj.lang.JoinPoint$StaticPart;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

        r6 := @parameter4: java.lang.Object;

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r4[1] = r6;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, $r4);

        return $r0;
    }

    public static org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        org.aspectj.runtime.reflect.JoinPointImpl $r0;
        java.lang.Object[] r4;
        org.aspectj.lang.JoinPoint$StaticPart r1;
        java.lang.Object r2, r3;

        r1 := @parameter0: org.aspectj.lang.JoinPoint$StaticPart;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object[];

        $r0 = new org.aspectj.runtime.reflect.JoinPointImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, r4);

        return $r0;
    }

    public org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;
        org.aspectj.runtime.reflect.MethodSignatureImpl $r0;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.MethodSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.aspectj.runtime.reflect.MethodSignatureImpl $r15;
        java.lang.ClassLoader $r3, $r13, $r18, $r22;
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String[] r24;
        java.util.StringTokenizer $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String r0, r1, r6, r9, r11, r12, r16, $r17, $r20, $r21;
        java.lang.Class[] r7, r25;
        java.lang.Class $r4, $r14, $r19, $r23;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        r9 := @parameter4: java.lang.String;

        r11 := @parameter5: java.lang.String;

        r12 := @parameter6: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r4 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r1, $r3);

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, ":");

        $i1 = virtualinvoke $r5.<java.util.StringTokenizer: int countTokens()>();

        r7 = newarray (java.lang.Class)[$i1];

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $r21 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r22 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r23 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r21, $r22);

        r7[i4] = $r23;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, ":");

        $i2 = virtualinvoke $r8.<java.util.StringTokenizer: int countTokens()>();

        r24 = newarray (java.lang.String)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r20 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r24[i5] = $r20;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r11, ":");

        $i3 = virtualinvoke $r10.<java.util.StringTokenizer: int countTokens()>();

        r25 = newarray (java.lang.Class)[$i3];

        i6 = 0;

     label5:
        if i6 >= $i3 goto label6;

        $r17 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r18 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r19 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r17, $r18);

        r25[i6] = $r19;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r13 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r14 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r12, $r13);

        $r15 = new org.aspectj.runtime.reflect.MethodSignatureImpl;

        specialinvoke $r15.<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>($i0, r16, $r4, r7, r24, r25, $r14);

        return $r15;
    }

    public org.aspectj.lang.reflect.MethodSignature makeMethodSig(int, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[], java.lang.Class)
    {
        org.aspectj.runtime.reflect.Factory r7;
        java.lang.Class[] r3, r5;
        java.lang.String[] r4;
        org.aspectj.runtime.reflect.MethodSignatureImpl $r0;
        int i0;
        java.lang.Class r2, r6;
        java.lang.String r1;
        java.lang.ClassLoader $r8;

        r7 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.Class[];

        r6 := @parameter6: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.MethodSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>(i0, r1, r2, r3, r4, r5, r6);

        $r8 = r7.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r8);

        return $r0;
    }

    public org.aspectj.lang.reflect.ConstructorSignature makeConstructorSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.ConstructorSignatureImpl $r0;
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.ConstructorSignature makeConstructorSig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String[] r21;
        java.util.StringTokenizer $r5, $r8, $r10;
        org.aspectj.runtime.reflect.ConstructorSignatureImpl $r12;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String r0, r1, r6, r9, r11, $r14, $r17, $r18;
        java.lang.Class[] r7, r22;
        java.lang.Class $r4, $r16, $r20;
        java.lang.ClassLoader $r3, $r13, $r15, $r19;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        r11 := @parameter4: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r4 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r1, $r3);

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, ":");

        $i1 = virtualinvoke $r5.<java.util.StringTokenizer: int countTokens()>();

        r7 = newarray (java.lang.Class)[$i1];

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $r18 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r19 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r20 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r18, $r19);

        r7[i4] = $r20;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, ":");

        $i2 = virtualinvoke $r8.<java.util.StringTokenizer: int countTokens()>();

        r21 = newarray (java.lang.String)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r17 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r21[i5] = $r17;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r11, ":");

        $i3 = virtualinvoke $r10.<java.util.StringTokenizer: int countTokens()>();

        r22 = newarray (java.lang.Class)[$i3];

        i6 = 0;

     label5:
        if i6 >= $i3 goto label6;

        $r14 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r15 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r16 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r14, $r15);

        r22[i6] = $r16;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r12 = new org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        specialinvoke $r12.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: void <init>(int,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>($i0, $r4, r7, r21, r22);

        $r13 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r12.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r13);

        return $r12;
    }

    public org.aspectj.lang.reflect.ConstructorSignature makeConstructorSig(int, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[])
    {
        org.aspectj.runtime.reflect.Factory r5;
        java.lang.Class[] r2, r4;
        java.lang.String[] r3;
        org.aspectj.runtime.reflect.ConstructorSignatureImpl $r0;
        int i0;
        java.lang.Class r1;
        java.lang.ClassLoader $r6;

        r5 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.Class[];

        $r0 = new org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: void <init>(int,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>(i0, r1, r2, r3, r4);

        $r6 = r5.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r6);

        return $r0;
    }

    public org.aspectj.lang.reflect.FieldSignature makeFieldSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl $r0;
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.FieldSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.FieldSignature makeFieldSig(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl $r8;
        org.aspectj.runtime.reflect.Factory r2;
        int $i0;
        java.lang.Class $r4, $r7;
        java.lang.String r0, r1, r5, r9;
        java.lang.ClassLoader $r3, $r6, $r10;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r4 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r1, $r3);

        $r6 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r7 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r5, $r6);

        $r8 = new org.aspectj.runtime.reflect.FieldSignatureImpl;

        specialinvoke $r8.<org.aspectj.runtime.reflect.FieldSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class)>($i0, r9, $r4, $r7);

        $r10 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r8.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r10);

        return $r8;
    }

    public org.aspectj.lang.reflect.FieldSignature makeFieldSig(int, java.lang.String, java.lang.Class, java.lang.Class)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl $r0;
        org.aspectj.runtime.reflect.Factory r4;
        int i0;
        java.lang.Class r2, r3;
        java.lang.String r1;
        java.lang.ClassLoader $r5;

        r4 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.FieldSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class)>(i0, r1, r2, r3);

        $r5 = r4.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r5);

        return $r0;
    }

    public org.aspectj.lang.reflect.AdviceSignature makeAdviceSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.AdviceSignatureImpl $r0;
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.AdviceSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.AdviceSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.AdviceSignature makeAdviceSig(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.ClassLoader $r3, $r13, $r17, $r19, $r23;
        org.aspectj.runtime.reflect.AdviceSignatureImpl $r15;
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String[] r25;
        java.util.StringTokenizer $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String r0, r1, r6, r9, r11, r12, r16, $r18, $r21, $r22;
        java.lang.Class[] r7, r26;
        java.lang.Class $r4, $r14, $r20, $r24;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        r9 := @parameter4: java.lang.String;

        r11 := @parameter5: java.lang.String;

        r12 := @parameter6: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r4 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r1, $r3);

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, ":");

        $i1 = virtualinvoke $r5.<java.util.StringTokenizer: int countTokens()>();

        r7 = newarray (java.lang.Class)[$i1];

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $r22 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r23 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r24 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r22, $r23);

        r7[i4] = $r24;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, ":");

        $i2 = virtualinvoke $r8.<java.util.StringTokenizer: int countTokens()>();

        r25 = newarray (java.lang.String)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r21 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r25[i5] = $r21;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r11, ":");

        $i3 = virtualinvoke $r10.<java.util.StringTokenizer: int countTokens()>();

        r26 = newarray (java.lang.Class)[$i3];

        i6 = 0;

     label5:
        if i6 >= $i3 goto label6;

        $r18 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r19 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r20 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r18, $r19);

        r26[i6] = $r20;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r13 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r14 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r12, $r13);

        $r15 = new org.aspectj.runtime.reflect.AdviceSignatureImpl;

        specialinvoke $r15.<org.aspectj.runtime.reflect.AdviceSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>($i0, r16, $r4, r7, r25, r26, $r14);

        $r17 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r15.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r17);

        return $r15;
    }

    public org.aspectj.lang.reflect.AdviceSignature makeAdviceSig(int, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[], java.lang.Class)
    {
        org.aspectj.runtime.reflect.AdviceSignatureImpl $r0;
        org.aspectj.runtime.reflect.Factory r7;
        java.lang.Class[] r3, r5;
        java.lang.String[] r4;
        int i0;
        java.lang.Class r2, r6;
        java.lang.String r1;
        java.lang.ClassLoader $r8;

        r7 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.Class[];

        r6 := @parameter6: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.AdviceSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.AdviceSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>(i0, r1, r2, r3, r4, r5, r6);

        $r8 = r7.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r8);

        return $r0;
    }

    public org.aspectj.lang.reflect.InitializerSignature makeInitializerSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;
        org.aspectj.runtime.reflect.InitializerSignatureImpl $r0;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.InitializerSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.InitializerSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.InitializerSignature makeInitializerSig(java.lang.String, java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        int $i0;
        java.lang.Class $r4;
        java.lang.String r0, r1;
        java.lang.ClassLoader $r3, $r6;
        org.aspectj.runtime.reflect.InitializerSignatureImpl $r5;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r4 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r1, $r3);

        $r5 = new org.aspectj.runtime.reflect.InitializerSignatureImpl;

        specialinvoke $r5.<org.aspectj.runtime.reflect.InitializerSignatureImpl: void <init>(int,java.lang.Class)>($i0, $r4);

        $r6 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r5.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r6);

        return $r5;
    }

    public org.aspectj.lang.reflect.InitializerSignature makeInitializerSig(int, java.lang.Class)
    {
        org.aspectj.runtime.reflect.Factory r2;
        int i0;
        java.lang.Class r1;
        java.lang.ClassLoader $r3;
        org.aspectj.runtime.reflect.InitializerSignatureImpl $r0;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.InitializerSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.InitializerSignatureImpl: void <init>(int,java.lang.Class)>(i0, r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.CatchClauseSignature makeCatchClauseSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        org.aspectj.runtime.reflect.CatchClauseSignatureImpl $r0;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.CatchClauseSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.CatchClauseSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.CatchClauseSignature makeCatchClauseSig(java.lang.String, java.lang.String, java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r1;
        java.util.StringTokenizer $r4, $r9;
        org.aspectj.runtime.reflect.CatchClauseSignatureImpl $r12;
        java.lang.Class $r3, $r8;
        java.lang.String r0, r5, $r6, r10, $r11;
        java.lang.ClassLoader $r2, $r7, $r13;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        $r2 = r1.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r3 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, ":");

        $r6 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = r1.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r8 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r6, $r7);

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r10, ":");

        $r11 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r12 = new org.aspectj.runtime.reflect.CatchClauseSignatureImpl;

        specialinvoke $r12.<org.aspectj.runtime.reflect.CatchClauseSignatureImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String)>($r3, $r8, $r11);

        $r13 = r1.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r12.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r13);

        return $r12;
    }

    public org.aspectj.lang.reflect.CatchClauseSignature makeCatchClauseSig(java.lang.Class, java.lang.Class, java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r4;
        org.aspectj.runtime.reflect.CatchClauseSignatureImpl $r0;
        java.lang.Class r1, r2;
        java.lang.String r3;
        java.lang.ClassLoader $r5;

        r4 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.CatchClauseSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.CatchClauseSignatureImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String)>(r1, r2, r3);

        $r5 = r4.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r5);

        return $r0;
    }

    public org.aspectj.lang.reflect.LockSignature makeLockSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.String r1;
        java.lang.ClassLoader $r3;
        org.aspectj.runtime.reflect.LockSignatureImpl $r0;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.LockSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.LockSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.LockSignature makeLockSig()
    {
        org.aspectj.runtime.reflect.Factory r0;
        java.lang.Class $r2;
        java.lang.ClassLoader $r1, $r4;
        org.aspectj.runtime.reflect.LockSignatureImpl $r3;

        r0 := @this: org.aspectj.runtime.reflect.Factory;

        $r1 = r0.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r2 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>("Ljava/lang/Object;", $r1);

        $r3 = new org.aspectj.runtime.reflect.LockSignatureImpl;

        specialinvoke $r3.<org.aspectj.runtime.reflect.LockSignatureImpl: void <init>(java.lang.Class)>($r2);

        $r4 = r0.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r3.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r4);

        return $r3;
    }

    public org.aspectj.lang.reflect.LockSignature makeLockSig(java.lang.Class)
    {
        org.aspectj.runtime.reflect.Factory r2;
        java.lang.Class r1;
        java.lang.ClassLoader $r3;
        org.aspectj.runtime.reflect.LockSignatureImpl $r0;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.LockSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.LockSignatureImpl: void <init>(java.lang.Class)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.UnlockSignature makeUnlockSig(java.lang.String)
    {
        org.aspectj.runtime.reflect.Factory r2;
        org.aspectj.runtime.reflect.UnlockSignatureImpl $r0;
        java.lang.String r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.aspectj.runtime.reflect.UnlockSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.UnlockSignatureImpl: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.UnlockSignature makeUnlockSig()
    {
        org.aspectj.runtime.reflect.Factory r0;
        org.aspectj.runtime.reflect.UnlockSignatureImpl $r3;
        java.lang.Class $r2;
        java.lang.ClassLoader $r1, $r4;

        r0 := @this: org.aspectj.runtime.reflect.Factory;

        $r1 = r0.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        $r2 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>("Ljava/lang/Object;", $r1);

        $r3 = new org.aspectj.runtime.reflect.UnlockSignatureImpl;

        specialinvoke $r3.<org.aspectj.runtime.reflect.UnlockSignatureImpl: void <init>(java.lang.Class)>($r2);

        $r4 = r0.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r3.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r4);

        return $r3;
    }

    public org.aspectj.lang.reflect.UnlockSignature makeUnlockSig(java.lang.Class)
    {
        org.aspectj.runtime.reflect.Factory r2;
        org.aspectj.runtime.reflect.UnlockSignatureImpl $r0;
        java.lang.Class r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.aspectj.runtime.reflect.Factory;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.aspectj.runtime.reflect.UnlockSignatureImpl;

        specialinvoke $r0.<org.aspectj.runtime.reflect.UnlockSignatureImpl: void <init>(java.lang.Class)>(r1);

        $r3 = r2.<org.aspectj.runtime.reflect.Factory: java.lang.ClassLoader lookupClassLoader>;

        virtualinvoke $r0.<org.aspectj.runtime.reflect.SignatureImpl: void setLookupClassLoader(java.lang.ClassLoader)>($r3);

        return $r0;
    }

    public org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int, int)
    {
        org.aspectj.runtime.reflect.SourceLocationImpl $r0;
        org.aspectj.runtime.reflect.Factory r1;
        int i0, i1;
        java.lang.Class $r3;
        java.lang.String $r2;

        r1 := @this: org.aspectj.runtime.reflect.Factory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.aspectj.runtime.reflect.SourceLocationImpl;

        $r3 = r1.<org.aspectj.runtime.reflect.Factory: java.lang.Class lexicalClass>;

        $r2 = r1.<org.aspectj.runtime.reflect.Factory: java.lang.String filename>;

        specialinvoke $r0.<org.aspectj.runtime.reflect.SourceLocationImpl: void <init>(java.lang.Class,java.lang.String,int)>($r3, $r2, i0);

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r19;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Class $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims> = $r0;

        $r2 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r1);

        $r4 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r3);

        $r6 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r5);

        $r8 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r7);

        $r10 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r9 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r9);

        $r12 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r11);

        $r14 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r13 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r13);

        $r16 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r15);

        $r18 = <org.aspectj.runtime.reflect.Factory: java.util.Hashtable prims>;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r17);

        $r19 = newarray (java.lang.Object)[0];

        <org.aspectj.runtime.reflect.Factory: java.lang.Object[] NO_ARGS> = $r19;

        return;
    }
}
