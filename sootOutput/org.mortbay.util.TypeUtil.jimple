public class org.mortbay.util.TypeUtil extends java.lang.Object
{
    public static int CR;
    public static int LF;
    private static final java.util.HashMap name2Class;
    private static final java.util.HashMap class2Name;
    private static final java.util.HashMap class2Value;
    private static java.lang.Class[] stringArg;
    private static int intCacheSize;
    private static java.lang.Integer[] integerCache;
    private static java.lang.String[] integerStrCache;
    private static java.lang.Integer minusOne;
    private static int longCacheSize;
    private static java.lang.Long[] longCache;
    private static java.lang.Long minusOneL;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Character;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$String;

    public void <init>()
    {
        org.mortbay.util.TypeUtil r0;

        r0 := @this: org.mortbay.util.TypeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class fromName(java.lang.String)
    {
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public static java.lang.String toName(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.lang.Object valueOf(java.lang.Class, java.lang.String)
    {
        java.lang.Throwable $r15, $r16;
        java.lang.Object[] $r10, $r12;
        java.lang.NoSuchMethodException $r21;
        java.lang.Error $r17, $r18;
        java.util.HashMap $r2;
        java.lang.reflect.Constructor $r9;
        java.lang.Character $r5;
        java.lang.InstantiationException $r19;
        java.lang.String r6;
        java.lang.reflect.Method r23;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r20;
        java.lang.Class[] $r8;
        char $c0;
        java.lang.reflect.InvocationTargetException $r14;
        java.lang.Class r0, $r1, $r4, $r7, $r22, $r24;
        java.lang.Object $r3, $r11, $r13;

        r0 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.lang.String;

     label01:
        $r1 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label02;

        $r22 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r22;

        goto label03;

     label02:
        $r22 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label03:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r22);

        if $z0 == 0 goto label05;

     label04:
        return r6;

     label05:
        $r2 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r23 = (java.lang.reflect.Method) $r3;

        if r23 == null goto label07;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r6;

        $r13 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r12);

     label06:
        return $r13;

     label07:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label10;

        $r7 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

        if $r7 != null goto label08;

        $r24 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character> = $r24;

        goto label09;

     label08:
        $r24 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

     label09:
        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        if $z2 == 0 goto label12;

     label10:
        $r5 = new java.lang.Character;

        $c0 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r5.<java.lang.Character: void <init>(char)>($c0);

     label11:
        return $r5;

     label12:
        $r8 = <org.mortbay.util.TypeUtil: java.lang.Class[] stringArg>;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r8);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r6;

        $r11 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r10);

     label13:
        return $r11;

     label14:
        $r21 := @caughtexception;

        goto label18;

     label15:
        $r20 := @caughtexception;

        goto label18;

     label16:
        $r19 := @caughtexception;

        goto label18;

     label17:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = $r15 instanceof java.lang.Error;

        if $z3 == 0 goto label18;

        $r16 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r17 = (java.lang.Error) $r16;

        $r18 = (java.lang.Error) $r17;

        throw $r18;

     label18:
        return null;

        catch java.lang.NoSuchMethodException from label01 to label04 with label14;
        catch java.lang.NoSuchMethodException from label05 to label06 with label14;
        catch java.lang.NoSuchMethodException from label07 to label11 with label14;
        catch java.lang.NoSuchMethodException from label12 to label13 with label14;
        catch java.lang.IllegalAccessException from label01 to label04 with label15;
        catch java.lang.IllegalAccessException from label05 to label06 with label15;
        catch java.lang.IllegalAccessException from label07 to label11 with label15;
        catch java.lang.IllegalAccessException from label12 to label13 with label15;
        catch java.lang.InstantiationException from label01 to label04 with label16;
        catch java.lang.InstantiationException from label05 to label06 with label16;
        catch java.lang.InstantiationException from label07 to label11 with label16;
        catch java.lang.InstantiationException from label12 to label13 with label16;
        catch java.lang.reflect.InvocationTargetException from label01 to label04 with label17;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label17;
        catch java.lang.reflect.InvocationTargetException from label07 to label11 with label17;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label17;
    }

    public static java.lang.Object valueOf(java.lang.String, java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String r0, r2;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class fromName(java.lang.String)>(r0);

        $r3 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Object valueOf(java.lang.Class,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.lang.Integer newInteger(int)
    {
        java.lang.Integer $r1, $r3, $r5, $r8, $r9;
        int i0, $i1, $i3;
        java.lang.Integer[] $r2, $r4, $r7;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $i1 = <org.mortbay.util.TypeUtil: int intCacheSize>;

        if i0 >= $i1 goto label2;

        $r2 = <org.mortbay.util.TypeUtil: java.lang.Integer[] integerCache>;

        $r3 = $r2[i0];

        if $r3 != null goto label1;

        $r7 = <org.mortbay.util.TypeUtil: java.lang.Integer[] integerCache>;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(i0);

        $r7[i0] = $r8;

     label1:
        $r4 = <org.mortbay.util.TypeUtil: java.lang.Integer[] integerCache>;

        $r5 = $r4[i0];

        return $r5;

     label2:
        $i3 = (int) -1;

        if i0 != $i3 goto label3;

        $r1 = <org.mortbay.util.TypeUtil: java.lang.Integer minusOne>;

        return $r1;

     label3:
        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(i0);

        return $r9;
    }

    public static java.lang.Long newLong(long)
    {
        long l0, $l4;
        byte $b1, $b2, $b5;
        java.lang.Long $r1, $r3, $r5, $r8, $r9;
        int $i3, $i6, $i7, $i8, $i9, $i10;
        java.lang.Long[] $r2, $r4, $r7;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 < 0 goto label2;

        $i3 = <org.mortbay.util.TypeUtil: int longCacheSize>;

        $l4 = (long) $i3;

        $b5 = l0 cmp $l4;

        $i10 = (int) $b5;

        if $i10 >= 0 goto label2;

        $r2 = <org.mortbay.util.TypeUtil: java.lang.Long[] longCache>;

        $i6 = (int) l0;

        $r3 = $r2[$i6];

        if $r3 != null goto label1;

        $r7 = <org.mortbay.util.TypeUtil: java.lang.Long[] longCache>;

        $i8 = (int) l0;

        $r8 = new java.lang.Long;

        specialinvoke $r8.<java.lang.Long: void <init>(long)>(l0);

        $r7[$i8] = $r8;

     label1:
        $r4 = <org.mortbay.util.TypeUtil: java.lang.Long[] longCache>;

        $i7 = (int) l0;

        $r5 = $r4[$i7];

        return $r5;

     label2:
        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label3;

        $r1 = <org.mortbay.util.TypeUtil: java.lang.Long minusOneL>;

        return $r1;

     label3:
        $r9 = new java.lang.Long;

        specialinvoke $r9.<java.lang.Long: void <init>(long)>(l0);

        return $r9;
    }

    public static java.lang.String toString(int)
    {
        java.lang.String[] $r1, $r3, $r5;
        int i0, $i1, $i3;
        java.lang.String $r0, $r2, $r4, $r6;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $i1 = <org.mortbay.util.TypeUtil: int intCacheSize>;

        if i0 >= $i1 goto label2;

        $r1 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $r2 = $r1[i0];

        if $r2 != null goto label1;

        $r5 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5[i0] = $r6;

     label1:
        $r3 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $r4 = $r3[i0];

        return $r4;

     label2:
        $i3 = (int) -1;

        if i0 != $i3 goto label3;

        return "-1";

     label3:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public static java.lang.String toString(long)
    {
        long l0, $l4;
        java.lang.String[] $r1, $r3, $r5;
        byte $b1, $b2, $b5;
        int $i3, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r0, $r2, $r4, $r6;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 < 0 goto label2;

        $i3 = <org.mortbay.util.TypeUtil: int intCacheSize>;

        $l4 = (long) $i3;

        $b5 = l0 cmp $l4;

        $i10 = (int) $b5;

        if $i10 >= 0 goto label2;

        $r1 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $i6 = (int) l0;

        $r2 = $r1[$i6];

        if $r2 != null goto label1;

        $r5 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $i8 = (int) l0;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r5[$i8] = $r6;

     label1:
        $r3 = <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache>;

        $i7 = (int) l0;

        $r4 = $r3[$i7];

        return $r4;

     label2:
        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label3;

        return "-1";

     label3:
        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        return $r0;
    }

    public static int parseInt(java.lang.String, int, int, int) throws java.lang.NumberFormatException
    {
        int i0, $i1, $i3, $i4, i5, $i6, $i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String r0, $r2;
        char $c2;
        java.lang.NumberFormatException $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i8 := @parameter2: int;

        i5 := @parameter3: int;

        i9 = 0;

        if i8 >= 0 goto label1;

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        i8 = $i7 - i0;

     label1:
        i10 = 0;

     label2:
        if i10 >= i8 goto label8;

        $i1 = i0 + i10;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i14 = (int) $c2;

        i11 = $i14 - 48;

        if i11 < 0 goto label3;

        if i11 >= i5 goto label3;

        if i11 < 10 goto label5;

     label3:
        $i15 = (int) $c2;

        $i12 = 10 + $i15;

        $i13 = $i12 - 65;

        i11 = $i13;

        if $i13 < 10 goto label4;

        if $i13 < i5 goto label5;

     label4:
        $i16 = (int) $c2;

        $i3 = 10 + $i16;

        i11 = $i3 - 97;

     label5:
        if i11 < 0 goto label6;

        if i11 < i5 goto label7;

     label6:
        $r3 = new java.lang.NumberFormatException;

        $i4 = i0 + i8;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4);

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label7:
        $i6 = i9 * i5;

        i9 = $i6 + i11;

        i10 = i10 + 1;

        goto label2;

     label8:
        return i9;
    }

    public static int parseInt(byte[], int, int, int) throws java.lang.NumberFormatException
    {
        byte[] r0;
        short $s3, $s15;
        byte $b2;
        int i0, $i1, $i5, i6, $i7, $i8, i9, i10, i11, i12, $i13, $i14, $i16, $i17, $i18;
        java.lang.String $r3;
        char c4;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i9 := @parameter2: int;

        i6 := @parameter3: int;

        i10 = 0;

        if i9 >= 0 goto label1;

        $i8 = lengthof r0;

        i9 = $i8 - i0;

     label1:
        i11 = 0;

     label2:
        if i11 >= i9 goto label8;

        $i1 = i0 + i11;

        $b2 = r0[$i1];

        $s15 = (short) $b2;

        $s3 = 255 & $s15;

        c4 = (char) $s3;

        $i16 = (int) c4;

        i12 = $i16 - 48;

        if i12 < 0 goto label3;

        if i12 >= i6 goto label3;

        if i12 < 10 goto label5;

     label3:
        $i17 = (int) c4;

        $i13 = 10 + $i17;

        $i14 = $i13 - 65;

        i12 = $i14;

        if $i14 < 10 goto label4;

        if $i14 < i6 goto label5;

     label4:
        $i18 = (int) c4;

        $i5 = 10 + $i18;

        i12 = $i5 - 97;

     label5:
        if i12 < 0 goto label6;

        if i12 < i6 goto label7;

     label6:
        $r4 = new java.lang.NumberFormatException;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int)>(r0, i0, i9);

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label7:
        $i7 = i10 * i6;

        i10 = $i7 + i12;

        i11 = i11 + 1;

        goto label2;

     label8:
        return i10;
    }

    public static byte[] parseBytes(java.lang.String, int)
    {
        byte[] r1;
        byte $b6;
        int $i0, $i1, $i2, i3, $i4, $i5, i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        r1 = newarray (byte)[$i1];

        i7 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= $i2 goto label2;

        $i4 = i7 / 2;

        $i5 = staticinvoke <org.mortbay.util.TypeUtil: int parseInt(java.lang.String,int,int,int)>(r0, i7, 2, i3);

        $b6 = (byte) $i5;

        r1[$i4] = $b6;

        i7 = i7 + 2;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String toString(byte[], int)
    {
        byte[] r1;
        short s2, $s17;
        byte $b1;
        java.lang.StringBuffer $r3;
        int $i0, i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i18, $i19;
        java.lang.String $r2;
        char $c6, $c8;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i14 = 0;

     label1:
        $i0 = lengthof r1;

        if i14 >= $i0 goto label4;

        $b1 = r1[i14];

        $s17 = (short) $b1;

        s2 = 255 & $s17;

        $i18 = (int) s2;

        $i4 = $i18 / i3;

        $i5 = $i4 % i3;

        i15 = 48 + $i5;

        if i15 <= 57 goto label2;

        $i11 = i15 - 48;

        $i12 = $i11 - 10;

        i15 = 97 + $i12;

     label2:
        $c6 = (char) i15;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        $i19 = (int) s2;

        $i7 = $i19 % i3;

        $i13 = 48 + $i7;

        i16 = $i13;

        if $i13 <= 57 goto label3;

        $i9 = $i13 - 48;

        $i10 = $i9 - 10;

        i16 = 97 + $i10;

     label3:
        $c8 = (char) i16;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        i14 = i14 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static byte convertHexDigit(byte)
    {
        byte b0, $b3, $b6, $b8;
        int $i1, $i2, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;

        b0 := @parameter0: byte;

        $i9 = (int) b0;

        if $i9 < 48 goto label1;

        $i10 = (int) b0;

        if $i10 > 57 goto label1;

        $i11 = (int) b0;

        $i7 = $i11 - 48;

        $b8 = (byte) $i7;

        return $b8;

     label1:
        $i12 = (int) b0;

        if $i12 < 97 goto label2;

        $i13 = (int) b0;

        if $i13 > 102 goto label2;

        $i14 = (int) b0;

        $i4 = $i14 - 97;

        $i5 = $i4 + 10;

        $b6 = (byte) $i5;

        return $b6;

     label2:
        $i15 = (int) b0;

        if $i15 < 65 goto label3;

        $i16 = (int) b0;

        if $i16 > 70 goto label3;

        $i17 = (int) b0;

        $i1 = $i17 - 65;

        $i2 = $i1 + 10;

        $b3 = (byte) $i2;

        return $b3;

     label3:
        return 0;
    }

    public static java.lang.String toHexString(byte[])
    {
        byte[] r1;
        short s2, $s16;
        byte $b1;
        java.lang.StringBuffer $r3;
        int $i0, $i3, $i4, $i6, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i17, $i18;
        java.lang.String $r2;
        char $c5, $c7;

        r1 := @parameter0: byte[];

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i13 = 0;

     label1:
        $i0 = lengthof r1;

        if i13 >= $i0 goto label4;

        $b1 = r1[i13];

        $s16 = (short) $b1;

        s2 = 255 & $s16;

        $i17 = (int) s2;

        $i3 = $i17 / 16;

        $i4 = $i3 % 16;

        i14 = 48 + $i4;

        if i14 <= 57 goto label2;

        $i10 = i14 - 48;

        $i11 = $i10 - 10;

        i14 = 65 + $i11;

     label2:
        $c5 = (char) i14;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $i18 = (int) s2;

        $i6 = $i18 % 16;

        $i12 = 48 + $i6;

        i15 = $i12;

        if $i12 <= 57 goto label3;

        $i8 = $i12 - 48;

        $i9 = $i8 - 10;

        i15 = 97 + $i9;

     label3:
        $c7 = (char) i15;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        i13 = i13 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toHexString(byte[], int, int)
    {
        byte[] r2;
        short s4, $s18;
        byte $b3;
        java.lang.StringBuffer $r3;
        int i0, i1, $i2, $i5, $i6, $i8, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i19, $i20;
        java.lang.String $r1;
        char $c7, $c9;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i15 = i0;

     label1:
        $i2 = i0 + i1;

        if i15 >= $i2 goto label4;

        $b3 = r2[i15];

        $s18 = (short) $b3;

        s4 = 255 & $s18;

        $i19 = (int) s4;

        $i5 = $i19 / 16;

        $i6 = $i5 % 16;

        i16 = 48 + $i6;

        if i16 <= 57 goto label2;

        $i12 = i16 - 48;

        $i13 = $i12 - 10;

        i16 = 65 + $i13;

     label2:
        $c7 = (char) i16;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        $i20 = (int) s4;

        $i8 = $i20 % 16;

        $i14 = 48 + $i8;

        i17 = $i14;

        if $i14 <= 57 goto label3;

        $i10 = $i14 - 48;

        $i11 = $i10 - 10;

        i17 = 97 + $i11;

     label3:
        $c9 = (char) i17;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        i15 = i15 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public static byte[] fromHexString(java.lang.String)
    {
        byte[] r1;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        java.lang.String r0, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r3;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 / 2;

        r1 = newarray (byte)[$i3];

        i11 = 0;

     label2:
        $i4 = lengthof r1;

        if i11 >= $i4 goto label3;

        $i7 = i11 * 2;

        $i5 = i11 * 2;

        $i6 = $i5 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $i9 = 255 & $i8;

        $b10 = (byte) $i9;

        r1[i11] = $b10;

        i11 = i11 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static void dump(java.lang.Class)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.Class r3;
        java.lang.String $r5;
        java.lang.ClassLoader $r6;

        r3 := @parameter0: java.lang.Class;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dump: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.mortbay.util.TypeUtil: void dump(java.lang.ClassLoader)>($r6);

        return;
    }

    public static void dump(java.lang.ClassLoader)
    {
        java.io.PrintStream $r0, $r2;
        java.lang.StringBuffer $r1, $r3, $r4;
        java.lang.String $r5;
        java.lang.ClassLoader r6;

        r6 := @parameter0: java.lang.ClassLoader;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Dump Loaders:");

     label1:
        if r6 == null goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  loader ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        r6 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label1;

     label2:
        return;
    }

    public static byte[] readLine(java.io.InputStream) throws java.io.IOException
    {
        byte[] r1, r2, $r3;
        byte $b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i13, i14, $i15, $i17;
        boolean $z0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[256];

        i13 = 0;

        i14 = 0;

     label1:
        $i15 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i15 >= 0 goto label2;

        goto label6;

     label2:
        i14 = i14 + 1;

        if i14 != 1 goto label3;

        $i12 = <org.mortbay.util.TypeUtil: int LF>;

        if $i15 != $i12 goto label3;

        goto label1;

     label3:
        $i0 = <org.mortbay.util.TypeUtil: int CR>;

        if $i15 == $i0 goto label6;

        $i5 = <org.mortbay.util.TypeUtil: int LF>;

        if $i15 != $i5 goto label4;

        goto label6;

     label4:
        $i6 = lengthof r1;

        if i13 < $i6 goto label5;

        r2 = r1;

        $i9 = lengthof r1;

        $i10 = $i9 + 256;

        r1 = newarray (byte)[$i10];

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i11);

     label5:
        $i7 = i13;

        i13 = i13 + 1;

        $b8 = (byte) $i15;

        r1[$i7] = $b8;

        goto label1;

     label6:
        $i17 = (int) -1;

        if $i15 != $i17 goto label7;

        if i13 != 0 goto label7;

        return null;

     label7:
        $i1 = <org.mortbay.util.TypeUtil: int CR>;

        if $i15 != $i1 goto label8;

        $i2 = virtualinvoke r0.<java.io.InputStream: int available()>();

        if $i2 < 1 goto label8;

        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if $z0 == 0 goto label8;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(1);

        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i4 = <org.mortbay.util.TypeUtil: int LF>;

        if $i3 == $i4 goto label8;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label8:
        $r3 = newarray (byte)[i13];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i13);

        return $r3;
    }

    public static java.net.URL jarFor(java.lang.String)
    {
        java.net.URL $r5, $r7;
        java.lang.Exception $r9;
        java.lang.StringBuffer $r0, $r2, $r3;
        int $i0;
        java.lang.String $r1, $r4, $r6, $r8, r10;
        boolean $z0;

        r10 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke r10.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = staticinvoke <org.mortbay.util.Loader: java.net.URL getResource(java.lang.Class,java.lang.String,boolean)>(null, $r4, 0);

        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("jar:file:");

        if $z0 == 0 goto label3;

        $r7 = new java.net.URL;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>("!/");

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(4, $i0);

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r8);

     label2:
        return $r7;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r9);

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Integer $r156, $r160, $r252;
        java.lang.Long $r253;
        java.lang.Integer[] $r157;
        java.lang.Class[] $r116, $r154;
        java.lang.reflect.Method $r121, $r125, $r129, $r133, $r137, $r141, $r145, $r211, $r217, $r223, $r229, $r235, $r241, $r247;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.Class $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r78, $r80, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r98, $r100, $r102, $r104, $r106, $r108, $r110, $r113, $r117, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132, $r134, $r136, $r138, $r140, $r142, $r144, $r146, $r147, $r148, $r149, $r150, $r151, $r152, $r153, $r155, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r179, $r180, $r181, $r182, $r183, $r184, $r185, $r186, $r187, $r188, $r189, $r190, $r191, $r192, $r193, $r194, $r195, $r196, $r197, $r198, $r199, $r200, $r201, $r202, $r203, $r204, $r205, $r206, $r208, $r209, $r210, $r213, $r214, $r215, $r216, $r219, $r220, $r221, $r222, $r225, $r226, $r227, $r228, $r231, $r232, $r233, $r234, $r237, $r238, $r239, $r240, $r243, $r244, $r245, $r246, $r248;
        java.lang.Exception $r170;
        java.util.HashMap $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r79, $r81, $r83, $r85, $r87, $r89, $r91, $r93, $r95, $r97, $r99, $r101, $r103, $r105, $r107, $r109, $r111, $r112, $r114, $r119, $r123, $r127, $r131, $r135, $r139, $r143, $r207, $r212, $r218, $r224, $r230, $r236, $r242, $r249, $r250, $r251;
        java.lang.String[] $r158;
        java.lang.Long[] $r161;

        <org.mortbay.util.TypeUtil: int CR> = 13;

        <org.mortbay.util.TypeUtil: int LF> = 10;

        $r249 = new java.util.HashMap;

        specialinvoke $r249.<java.util.HashMap: void <init>()>();

        <org.mortbay.util.TypeUtil: java.util.HashMap name2Class> = $r249;

        $r2 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r1);

        $r4 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r3);

        $r6 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r5);

        $r8 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r7);

        $r10 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r9);

        $r12 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r11);

        $r14 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r13 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r13);

        $r16 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r15 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r15);

        $r18 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r17 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r17);

        $r20 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean.TYPE", $r19);

        $r22 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r21 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte.TYPE", $r21);

        $r24 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r23 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character.TYPE", $r23);

        $r26 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r25 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double.TYPE", $r25);

        $r28 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r27 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float.TYPE", $r27);

        $r30 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r29 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer.TYPE", $r29);

        $r32 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r31 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r32.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long.TYPE", $r31);

        $r34 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r33 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short.TYPE", $r33);

        $r36 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r35 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r36.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Void.TYPE", $r35);

        $r38 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r37 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r37 != null goto label001;

        $r171 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r171;

        goto label002;

     label001:
        $r171 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label002:
        virtualinvoke $r38.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean", $r171);

        $r40 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r39 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r39 != null goto label003;

        $r172 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r172;

        goto label004;

     label003:
        $r172 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label004:
        virtualinvoke $r40.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte", $r172);

        $r42 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r41 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

        if $r41 != null goto label005;

        $r173 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character> = $r173;

        goto label006;

     label005:
        $r173 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

     label006:
        virtualinvoke $r42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character", $r173);

        $r44 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r43 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r43 != null goto label007;

        $r174 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r174;

        goto label008;

     label007:
        $r174 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label008:
        virtualinvoke $r44.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double", $r174);

        $r46 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r45 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r45 != null goto label009;

        $r175 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r175;

        goto label010;

     label009:
        $r175 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label010:
        virtualinvoke $r46.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float", $r175);

        $r48 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r47 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r47 != null goto label011;

        $r176 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r176;

        goto label012;

     label011:
        $r176 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label012:
        virtualinvoke $r48.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer", $r176);

        $r50 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r49 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r49 != null goto label013;

        $r177 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r177;

        goto label014;

     label013:
        $r177 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label014:
        virtualinvoke $r50.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long", $r177);

        $r52 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r51 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r51 != null goto label015;

        $r178 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r178;

        goto label016;

     label015:
        $r178 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label016:
        virtualinvoke $r52.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short", $r178);

        $r54 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r53 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r53 != null goto label017;

        $r179 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r179;

        goto label018;

     label017:
        $r179 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label018:
        virtualinvoke $r54.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Boolean", $r179);

        $r56 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r55 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r55 != null goto label019;

        $r180 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r180;

        goto label020;

     label019:
        $r180 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label020:
        virtualinvoke $r56.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Byte", $r180);

        $r58 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r57 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

        if $r57 != null goto label021;

        $r181 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character> = $r181;

        goto label022;

     label021:
        $r181 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

     label022:
        virtualinvoke $r58.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Character", $r181);

        $r60 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r59 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r59 != null goto label023;

        $r182 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r182;

        goto label024;

     label023:
        $r182 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label024:
        virtualinvoke $r60.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Double", $r182);

        $r62 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r61 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r61 != null goto label025;

        $r183 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r183;

        goto label026;

     label025:
        $r183 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label026:
        virtualinvoke $r62.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Float", $r183);

        $r64 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r63 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r63 != null goto label027;

        $r184 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r184;

        goto label028;

     label027:
        $r184 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label028:
        virtualinvoke $r64.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Integer", $r184);

        $r66 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r65 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r65 != null goto label029;

        $r185 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r185;

        goto label030;

     label029:
        $r185 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label030:
        virtualinvoke $r66.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Long", $r185);

        $r68 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r67 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r67 != null goto label031;

        $r186 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r186;

        goto label032;

     label031:
        $r186 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label032:
        virtualinvoke $r68.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Short", $r186);

        $r70 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r69 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r70.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r69);

        $r72 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r71 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r71 != null goto label033;

        $r187 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r187;

        goto label034;

     label033:
        $r187 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label034:
        virtualinvoke $r72.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("string", $r187);

        $r74 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r73 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r73 != null goto label035;

        $r188 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r188;

        goto label036;

     label035:
        $r188 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label036:
        virtualinvoke $r74.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("String", $r188);

        $r76 = <org.mortbay.util.TypeUtil: java.util.HashMap name2Class>;

        $r75 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r75 != null goto label037;

        $r189 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r189;

        goto label038;

     label037:
        $r189 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label038:
        virtualinvoke $r76.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.String", $r189);

        $r250 = new java.util.HashMap;

        specialinvoke $r250.<java.util.HashMap: void <init>()>();

        <org.mortbay.util.TypeUtil: java.util.HashMap class2Name> = $r250;

        $r79 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r78 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r79.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r78, "boolean");

        $r81 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r80 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r81.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r80, "byte");

        $r83 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r82 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r83.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r82, "char");

        $r85 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r84 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r85.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r84, "double");

        $r87 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r86 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r86, "float");

        $r89 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r88 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r89.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r88, "int");

        $r91 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r90 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r91.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r90, "long");

        $r93 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r92 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r93.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r92, "short");

        $r95 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r94 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r95.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r94, "void");

        $r97 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r96 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r96 != null goto label039;

        $r190 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r190;

        goto label040;

     label039:
        $r190 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label040:
        virtualinvoke $r97.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r190, "java.lang.Boolean");

        $r99 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r98 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r98 != null goto label041;

        $r191 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r191;

        goto label042;

     label041:
        $r191 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label042:
        virtualinvoke $r99.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r191, "java.lang.Byte");

        $r101 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r100 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

        if $r100 != null goto label043;

        $r192 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character> = $r192;

        goto label044;

     label043:
        $r192 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Character>;

     label044:
        virtualinvoke $r101.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r192, "java.lang.Character");

        $r103 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r102 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r102 != null goto label045;

        $r193 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r193;

        goto label046;

     label045:
        $r193 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label046:
        virtualinvoke $r103.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r193, "java.lang.Double");

        $r105 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r104 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r104 != null goto label047;

        $r194 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r194;

        goto label048;

     label047:
        $r194 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label048:
        virtualinvoke $r105.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r194, "java.lang.Float");

        $r107 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r106 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r106 != null goto label049;

        $r195 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r195;

        goto label050;

     label049:
        $r195 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label050:
        virtualinvoke $r107.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r195, "java.lang.Integer");

        $r109 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r108 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r108 != null goto label051;

        $r196 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r196;

        goto label052;

     label051:
        $r196 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label052:
        virtualinvoke $r109.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r196, "java.lang.Long");

        $r111 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r110 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r110 != null goto label053;

        $r197 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r197;

        goto label054;

     label053:
        $r197 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label054:
        virtualinvoke $r111.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r197, "java.lang.Short");

        $r112 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r112.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "void");

        $r114 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Name>;

        $r113 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r113 != null goto label055;

        $r198 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r198;

        goto label056;

     label055:
        $r198 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label056:
        virtualinvoke $r114.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r198, "java.lang.String");

        $r251 = new java.util.HashMap;

        specialinvoke $r251.<java.util.HashMap: void <init>()>();

        <org.mortbay.util.TypeUtil: java.util.HashMap class2Value> = $r251;

     label057:
        $r116 = newarray (java.lang.Class)[1];

        $r117 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r117 != null goto label058;

        $r199 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r199;

        goto label059;

     label058:
        $r199 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label059:
        $r116[0] = $r199;

        $r119 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r120 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r118 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r118 != null goto label060;

        $r200 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r200;

        goto label061;

     label060:
        $r200 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label061:
        $r121 = virtualinvoke $r200.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r119.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r120, $r121);

        $r123 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r124 = <java.lang.Byte: java.lang.Class TYPE>;

        $r122 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r122 != null goto label062;

        $r201 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r201;

        goto label063;

     label062:
        $r201 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label063:
        $r125 = virtualinvoke $r201.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r123.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r124, $r125);

        $r127 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r128 = <java.lang.Double: java.lang.Class TYPE>;

        $r126 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r126 != null goto label064;

        $r202 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r202;

        goto label065;

     label064:
        $r202 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label065:
        $r129 = virtualinvoke $r202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r127.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r128, $r129);

        $r131 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r132 = <java.lang.Float: java.lang.Class TYPE>;

        $r130 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r130 != null goto label066;

        $r203 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r203;

        goto label067;

     label066:
        $r203 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label067:
        $r133 = virtualinvoke $r203.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r131.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r132, $r133);

        $r135 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r136 = <java.lang.Integer: java.lang.Class TYPE>;

        $r134 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r134 != null goto label068;

        $r204 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r204;

        goto label069;

     label068:
        $r204 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label069:
        $r137 = virtualinvoke $r204.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r135.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r136, $r137);

        $r139 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r140 = <java.lang.Long: java.lang.Class TYPE>;

        $r138 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r138 != null goto label070;

        $r205 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r205;

        goto label071;

     label070:
        $r205 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label071:
        $r141 = virtualinvoke $r205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r139.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r140, $r141);

        $r143 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r144 = <java.lang.Short: java.lang.Class TYPE>;

        $r142 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r142 != null goto label072;

        $r206 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r206;

        goto label073;

     label072:
        $r206 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label073:
        $r145 = virtualinvoke $r206.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r143.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r144, $r145);

        $r207 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r146 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r146 != null goto label074;

        $r169 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        $r208 = $r169;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r169;

        goto label075;

     label074:
        $r208 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label075:
        $r147 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

        if $r147 != null goto label076;

        $r209 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        $r210 = $r209;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean> = $r209;

        goto label077;

     label076:
        $r210 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Boolean>;

     label077:
        $r211 = virtualinvoke $r210.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r207.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r208, $r211);

        $r212 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r213 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r213 != null goto label078;

        $r168 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        $r214 = $r168;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r168;

        goto label079;

     label078:
        $r214 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label079:
        $r148 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

        if $r148 != null goto label080;

        $r215 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        $r216 = $r215;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte> = $r215;

        goto label081;

     label080:
        $r216 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Byte>;

     label081:
        $r217 = virtualinvoke $r216.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r212.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r214, $r217);

        $r218 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r219 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r219 != null goto label082;

        $r167 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        $r220 = $r167;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r167;

        goto label083;

     label082:
        $r220 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label083:
        $r149 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

        if $r149 != null goto label084;

        $r221 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        $r222 = $r221;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double> = $r221;

        goto label085;

     label084:
        $r222 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Double>;

     label085:
        $r223 = virtualinvoke $r222.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r218.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r220, $r223);

        $r224 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r225 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r225 != null goto label086;

        $r166 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        $r226 = $r166;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r166;

        goto label087;

     label086:
        $r226 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label087:
        $r150 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

        if $r150 != null goto label088;

        $r227 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        $r228 = $r227;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float> = $r227;

        goto label089;

     label088:
        $r228 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Float>;

     label089:
        $r229 = virtualinvoke $r228.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r224.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r226, $r229);

        $r230 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r231 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r231 != null goto label090;

        $r165 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        $r232 = $r165;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r165;

        goto label091;

     label090:
        $r232 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label091:
        $r151 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

        if $r151 != null goto label092;

        $r233 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        $r234 = $r233;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer> = $r233;

        goto label093;

     label092:
        $r234 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Integer>;

     label093:
        $r235 = virtualinvoke $r234.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r230.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r232, $r235);

        $r236 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r237 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r237 != null goto label094;

        $r164 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        $r238 = $r164;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r164;

        goto label095;

     label094:
        $r238 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label095:
        $r152 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

        if $r152 != null goto label096;

        $r239 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        $r240 = $r239;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long> = $r239;

        goto label097;

     label096:
        $r240 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Long>;

     label097:
        $r241 = virtualinvoke $r240.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r236.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r238, $r241);

        $r242 = <org.mortbay.util.TypeUtil: java.util.HashMap class2Value>;

        $r243 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r243 != null goto label098;

        $r163 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        $r244 = $r163;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r163;

        goto label099;

     label098:
        $r244 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label099:
        $r153 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

        if $r153 != null goto label100;

        $r245 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        $r246 = $r245;

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short> = $r245;

        goto label101;

     label100:
        $r246 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$Short>;

     label101:
        $r247 = virtualinvoke $r246.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r116);

        virtualinvoke $r242.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r244, $r247);

     label102:
        goto label104;

     label103:
        $r170 := @caughtexception;

        virtualinvoke $r170.<java.lang.Exception: void printStackTrace()>();

     label104:
        $r154 = newarray (java.lang.Class)[1];

        $r155 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

        if $r155 != null goto label105;

        $r248 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String> = $r248;

        goto label106;

     label105:
        $r248 = <org.mortbay.util.TypeUtil: java.lang.Class class$java$lang$String>;

     label106:
        $r154[0] = $r248;

        <org.mortbay.util.TypeUtil: java.lang.Class[] stringArg> = $r154;

        $r156 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("org.mortbay.util.TypeUtil.IntegerCacheSize", 600);

        $i0 = virtualinvoke $r156.<java.lang.Integer: int intValue()>();

        <org.mortbay.util.TypeUtil: int intCacheSize> = $i0;

        $i1 = <org.mortbay.util.TypeUtil: int intCacheSize>;

        $r157 = newarray (java.lang.Integer)[$i1];

        <org.mortbay.util.TypeUtil: java.lang.Integer[] integerCache> = $r157;

        $i2 = <org.mortbay.util.TypeUtil: int intCacheSize>;

        $r158 = newarray (java.lang.String)[$i2];

        <org.mortbay.util.TypeUtil: java.lang.String[] integerStrCache> = $r158;

        $r252 = new java.lang.Integer;

        $i6 = (int) -1;

        specialinvoke $r252.<java.lang.Integer: void <init>(int)>($i6);

        <org.mortbay.util.TypeUtil: java.lang.Integer minusOne> = $r252;

        $r160 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("org.mortbay.util.TypeUtil.LongCacheSize", 64);

        $i3 = virtualinvoke $r160.<java.lang.Integer: int intValue()>();

        <org.mortbay.util.TypeUtil: int longCacheSize> = $i3;

        $i4 = <org.mortbay.util.TypeUtil: int longCacheSize>;

        $r161 = newarray (java.lang.Long)[$i4];

        <org.mortbay.util.TypeUtil: java.lang.Long[] longCache> = $r161;

        $r253 = new java.lang.Long;

        specialinvoke $r253.<java.lang.Long: void <init>(long)>(-1L);

        <org.mortbay.util.TypeUtil: java.lang.Long minusOneL> = $r253;

        return;

        catch java.lang.Exception from label057 to label102 with label103;
    }
}
