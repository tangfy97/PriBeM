class org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1 extends java.lang.Thread
{
    private final java.io.InputStream val$is;
    private final org.apache.batik.ext.awt.image.renderable.DeferRable val$dr;
    private final java.lang.String val$errCode;
    private final java.lang.Object[] val$errParam;
    private final org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry this$0;

    void <init>(org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry, java.io.InputStream, org.apache.batik.ext.awt.image.renderable.DeferRable, java.lang.String, java.lang.Object[])
    {
        org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry r1;
        org.apache.batik.ext.awt.image.renderable.DeferRable r3;
        java.lang.Object[] r5;
        java.lang.String r4;
        org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1 r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object[];

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry this$0> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.io.InputStream val$is> = r2;

        r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr> = r3;

        r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.String val$errCode> = r4;

        r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.Object[] val$errParam> = r5;

        return;
    }

    public void run()
    {
        org.apache.batik.ext.awt.image.rendered.FormatRed $r7;
        java.awt.geom.Rectangle2D$Double $r3;
        boolean $z0;
        org.apache.batik.ext.awt.image.renderable.DeferRable $r4, $r23, $r34;
        java.awt.image.BufferedImage $r11, $r29, r32;
        org.apache.batik.ext.awt.image.renderable.RedRable $r13;
        com.sun.image.codec.jpeg.TruncatedFileException $r28;
        org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1 r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r22, r33;
        java.lang.ThreadDeath $r18;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r5, $r12;
        java.lang.Throwable $r14;
        java.lang.Object[] $r15, $r19, $r25;
        com.sun.image.codec.jpeg.JPEGImageDecoder $r2;
        int $i0, $i1;
        java.awt.image.Raster $r9;
        java.lang.String $r16, $r20, $r26;
        double $d0, $d1;
        java.io.IOException $r24, $r31;
        org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry $r17, $r21, $r27;
        java.awt.image.ColorModel $r8, $r10;
        java.awt.image.WritableRaster $r30;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed $r6;
        java.io.InputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1;

     label01:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.io.InputStream val$is>;

        $r2 = staticinvoke <com.sun.image.codec.jpeg.JPEGCodec: com.sun.image.codec.jpeg.JPEGImageDecoder createJPEGDecoder(java.io.InputStream)>($r1);

     label02:
        r32 = interfaceinvoke $r2.<com.sun.image.codec.jpeg.JPEGImageDecoder: java.awt.image.BufferedImage decodeAsBufferedImage()>();

     label03:
        goto label05;

     label04:
        $r28 := @caughtexception;

        $r29 = virtualinvoke $r28.<com.sun.image.codec.jpeg.TruncatedFileException: java.awt.image.BufferedImage getBufferedImage()>();

        r32 = $r29;

        if $r29 != null goto label05;

        $r31 = new java.io.IOException;

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>("JPEG File was truncated");

        throw $r31;

     label05:
        $r4 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        $r3 = new java.awt.geom.Rectangle2D$Double;

        $i0 = virtualinvoke r32.<java.awt.image.BufferedImage: int getWidth()>();

        $d0 = (double) $i0;

        $i1 = virtualinvoke r32.<java.awt.image.BufferedImage: int getHeight()>();

        $d1 = (double) $i1;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d0, $d1);

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setBounds(java.awt.geom.Rectangle2D)>($r3);

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>(r32);

        $r6 = new org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r5);

        $r7 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r8 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        specialinvoke $r7.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>($r6, $r8);

        $r9 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $r30 = (java.awt.image.WritableRaster) $r9;

        $r10 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r11 = new java.awt.image.BufferedImage;

        $z0 = virtualinvoke $r10.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r11.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r10, $r30, $z0, null);

        $r12 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r11);

        $r13 = new org.apache.batik.ext.awt.image.renderable.RedRable;

        specialinvoke $r13.<org.apache.batik.ext.awt.image.renderable.RedRable: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r12);

        r33 = $r13;

     label06:
        goto label10;

     label07:
        $r24 := @caughtexception;

        $r27 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry this$0>;

        $r26 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.String val$errCode>;

        $r25 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.Object[] val$errParam>;

        r33 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r27, $r26, $r25);

        goto label10;

     label08:
        $r18 := @caughtexception;

        $r21 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry this$0>;

        $r20 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.String val$errCode>;

        $r19 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.Object[] val$errParam>;

        $r22 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r21, $r20, $r19);

        $r23 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r23.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>($r22);

        throw $r18;

     label09:
        $r14 := @caughtexception;

        $r17 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry this$0>;

        $r16 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.String val$errCode>;

        $r15 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: java.lang.Object[] val$errParam>;

        r33 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r17, $r16, $r15);

     label10:
        $r34 = r0.<org.apache.batik.ext.awt.image.codec.jpeg.JPEGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r34.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r33);

        return;

        catch com.sun.image.codec.jpeg.TruncatedFileException from label02 to label03 with label04;
        catch java.io.IOException from label01 to label06 with label07;
        catch java.lang.ThreadDeath from label01 to label06 with label08;
        catch java.lang.Throwable from label01 to label06 with label09;
    }
}
