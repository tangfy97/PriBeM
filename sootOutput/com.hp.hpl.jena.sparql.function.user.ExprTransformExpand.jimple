public class com.hp.hpl.jena.sparql.function.user.ExprTransformExpand extends com.hp.hpl.jena.sparql.expr.ExprTransformCopy
{
    private java.util.Map definitions;

    public void <init>(java.util.Map)
    {
        com.hp.hpl.jena.sparql.function.user.ExprTransformExpand r0;
        java.lang.IllegalArgumentException $r2;
        java.util.Map r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.ExprTransformExpand;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("defs cannot be null");

        throw $r2;

     label1:
        r0.<com.hp.hpl.jena.sparql.function.user.ExprTransformExpand: java.util.Map definitions> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionN, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.sse.builders.ExprBuildException $r18;
        com.hp.hpl.jena.sparql.expr.ExprFunction $r1, $r6;
        com.hp.hpl.jena.sparql.function.Function $r10;
        com.hp.hpl.jena.sparql.expr.Expr $r4, $r15, $r16;
        com.hp.hpl.jena.sparql.expr.ExprList r3, $r13;
        java.util.Map $r5;
        int $i0, $i1, i2;
        com.hp.hpl.jena.sparql.function.user.ExprTransformExpand r2;
        java.lang.String $r7, $r14, $r17, $r21, $r26;
        boolean $z0;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r11;
        java.util.List $r12;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        java.lang.Object $r8;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r24, $r25;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r9;

        r2 := @this: com.hp.hpl.jena.sparql.function.user.ExprTransformExpand;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprFunction getFunction()>();

        $z0 = specialinvoke r2.<com.hp.hpl.jena.sparql.function.user.ExprTransformExpand: boolean shouldExpand(com.hp.hpl.jena.sparql.expr.ExprFunction)>($r1);

        if $z0 == 0 goto label6;

        $r5 = r2.<com.hp.hpl.jena.sparql.function.user.ExprTransformExpand: java.util.Map definitions>;

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprFunction: com.hp.hpl.jena.sparql.expr.ExprFunction getFunction()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprFunction: java.lang.String getFunctionIRI()>();

        $r8 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition) $r8;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: com.hp.hpl.jena.sparql.function.Function newFunctionInstance()>();

        r11 = (com.hp.hpl.jena.sparql.function.user.UserDefinedFunction) $r10;

        $r12 = virtualinvoke r9.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List getArgList()>();

        $r13 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if i2 >= $i0 goto label5;

        $r16 = virtualinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(i2);

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.sparql.expr.Expr: java.lang.String getVarName()>();

        if $r17 != null goto label2;

        virtualinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r16);

        goto label4;

     label2:
        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i2 <= $i1 goto label3;

        $r18 = new com.hp.hpl.jena.sparql.sse.builders.ExprBuildException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to expand function dependency, the function <");

        $r21 = virtualinvoke r9.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.lang.String getUri()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is called but uses an argument ?");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not an argument to the outer function");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: void <init>(java.lang.String)>($r26);

        throw $r18;

     label3:
        virtualinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r16);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r14 = virtualinvoke r9.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.lang.String getUri()>();

        virtualinvoke r11.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: void build(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>($r14, $r13);

        $r15 = virtualinvoke r11.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: com.hp.hpl.jena.sparql.expr.Expr getActualExpr()>();

        return $r15;

     label6:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionN,com.hp.hpl.jena.sparql.expr.ExprList)>(r0, r3);

        return $r4;
    }

    private boolean shouldExpand(com.hp.hpl.jena.sparql.expr.ExprFunction)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.function.user.ExprTransformExpand r0;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.expr.ExprFunction r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.ExprTransformExpand;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction;

        $r2 = r0.<com.hp.hpl.jena.sparql.function.user.ExprTransformExpand: java.util.Map definitions>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction: java.lang.String getFunctionIRI()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        return $z0;
    }
}
