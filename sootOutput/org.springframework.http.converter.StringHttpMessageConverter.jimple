public class org.springframework.http.converter.StringHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter
{
    public static final java.nio.charset.Charset DEFAULT_CHARSET;
    private final java.util.List availableCharsets;
    private boolean writeAcceptCharset;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.springframework.http.converter.StringHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.http.MediaType[] $r1;
        org.springframework.http.MediaType $r2, $r4;
        java.util.Collection $r7;
        org.springframework.http.converter.StringHttpMessageConverter r0;
        java.util.ArrayList $r5;
        java.nio.charset.Charset $r3;
        java.util.SortedMap $r6;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        $r1 = newarray (org.springframework.http.MediaType)[2];

        $r2 = new org.springframework.http.MediaType;

        $r3 = <org.springframework.http.converter.StringHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r2.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>("text", "plain", $r3);

        $r1[0] = $r2;

        $r4 = <org.springframework.http.MediaType: org.springframework.http.MediaType ALL>;

        $r1[1] = $r4;

        specialinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType[])>($r1);

        r0.<org.springframework.http.converter.StringHttpMessageConverter: boolean writeAcceptCharset> = 1;

        $r5 = new java.util.ArrayList;

        $r6 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();

        $r7 = interfaceinvoke $r6.<java.util.SortedMap: java.util.Collection values()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r0.<org.springframework.http.converter.StringHttpMessageConverter: java.util.List availableCharsets> = $r5;

        return;
    }

    public void setWriteAcceptCharset(boolean)
    {
        org.springframework.http.converter.StringHttpMessageConverter r0;
        boolean z0;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.http.converter.StringHttpMessageConverter: boolean writeAcceptCharset> = z0;

        return;
    }

    public boolean supports(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;
        org.springframework.http.converter.StringHttpMessageConverter r2;

        r2 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/lang/String;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    protected java.lang.String readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException
    {
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType $r2;
        java.io.InputStreamReader $r4;
        org.springframework.http.converter.StringHttpMessageConverter r7;
        org.springframework.http.HttpInputMessage r0;
        java.nio.charset.Charset $r3, $r9;
        java.lang.Class r8;
        java.lang.String $r6;
        java.io.InputStream $r5;

        r7 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r8 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.http.HttpInputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r3 = virtualinvoke $r2.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r3 == null goto label1;

        $r9 = virtualinvoke $r2.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        goto label2;

     label1:
        $r9 = <org.springframework.http.converter.StringHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

     label2:
        $r4 = new java.io.InputStreamReader;

        $r5 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r9);

        $r6 = staticinvoke <org.springframework.util.FileCopyUtils: java.lang.String copyToString(java.io.Reader)>($r4);

        return $r6;
    }

    protected java.lang.Long getContentLength(java.lang.String, org.springframework.http.MediaType)
    {
        byte[] $r5;
        org.springframework.http.MediaType r0;
        long $l1;
        org.springframework.http.converter.StringHttpMessageConverter r10;
        java.nio.charset.Charset $r1, $r2;
        java.lang.Long $r6;
        int $i0;
        java.lang.InternalError $r8;
        java.lang.String r3, $r4, $r9;
        java.io.UnsupportedEncodingException $r7;

        r10 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.http.MediaType;

        if r0 == null goto label4;

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r1 == null goto label4;

        $r2 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

     label1:
        $r4 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r5 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r4);

        $i0 = lengthof $r5;

        $l1 = (long) $i0;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.InternalError;

        $r9 = virtualinvoke $r7.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected void writeInternal(java.lang.String, org.springframework.http.HttpOutputMessage) throws java.io.IOException
    {
        java.io.OutputStream $r7;
        org.springframework.http.HttpHeaders $r2, $r8;
        org.springframework.http.MediaType $r3;
        org.springframework.http.converter.StringHttpMessageConverter r0;
        java.util.List $r9;
        java.nio.charset.Charset $r4, $r10;
        java.io.OutputStreamWriter $r6;
        java.lang.String r5;
        boolean $z0;
        org.springframework.http.HttpOutputMessage r1;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.http.HttpOutputMessage;

        $z0 = r0.<org.springframework.http.converter.StringHttpMessageConverter: boolean writeAcceptCharset>;

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r9 = virtualinvoke r0.<org.springframework.http.converter.StringHttpMessageConverter: java.util.List getAcceptedCharsets()>();

        virtualinvoke $r8.<org.springframework.http.HttpHeaders: void setAcceptCharset(java.util.List)>($r9);

     label1:
        $r2 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r3 = virtualinvoke $r2.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r4 = virtualinvoke $r3.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r4 == null goto label2;

        $r10 = virtualinvoke $r3.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        goto label3;

     label2:
        $r10 = <org.springframework.http.converter.StringHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

     label3:
        $r6 = new java.io.OutputStreamWriter;

        $r7 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r7, $r10);

        staticinvoke <org.springframework.util.FileCopyUtils: void copy(java.lang.String,java.io.Writer)>(r5, $r6);

        return;
    }

    protected java.util.List getAcceptedCharsets()
    {
        java.util.List $r1;
        org.springframework.http.converter.StringHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.StringHttpMessageConverter: java.util.List availableCharsets>;

        return $r1;
    }

    protected volatile java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.HttpInputMessage r2;
        java.lang.Class r1, $r3;
        java.lang.String $r4;
        org.springframework.http.converter.StringHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.StringHttpMessageConverter: java.lang.String readInternal(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    protected volatile java.lang.Long getContentLength(java.lang.Object, org.springframework.http.MediaType)
    {
        java.lang.Long $r4;
        org.springframework.http.MediaType r2;
        java.lang.Object r1;
        java.lang.String $r3;
        org.springframework.http.converter.StringHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.StringHttpMessageConverter: java.lang.Long getContentLength(java.lang.String,org.springframework.http.MediaType)>($r3, r2);

        return $r4;
    }

    protected volatile void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.lang.Object r1;
        java.lang.String $r3;
        org.springframework.http.converter.StringHttpMessageConverter r0;
        org.springframework.http.HttpOutputMessage r2;

        r0 := @this: org.springframework.http.converter.StringHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.springframework.http.converter.StringHttpMessageConverter: void writeInternal(java.lang.String,org.springframework.http.HttpOutputMessage)>($r3, r2);

        return;
    }
}
