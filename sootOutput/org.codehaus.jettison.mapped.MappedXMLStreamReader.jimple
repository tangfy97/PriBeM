public class org.codehaus.jettison.mapped.MappedXMLStreamReader extends org.codehaus.jettison.AbstractXMLStreamReader
{
    private org.codehaus.jettison.util.FastStack nodes;
    private java.lang.String currentValue;
    private org.codehaus.jettison.mapped.MappedNamespaceConvention convention;
    private java.lang.String valueKey;
    private javax.xml.namespace.NamespaceContext ctx;

    public void <init>(org.codehaus.jettison.json.JSONObject) throws org.codehaus.jettison.json.JSONException, javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r2;
        org.codehaus.jettison.json.JSONObject r1;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        r1 := @parameter0: org.codehaus.jettison.json.JSONObject;

        $r2 = new org.codehaus.jettison.mapped.MappedNamespaceConvention;

        specialinvoke $r2.<org.codehaus.jettison.mapped.MappedNamespaceConvention: void <init>()>();

        specialinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: void <init>(org.codehaus.jettison.json.JSONObject,org.codehaus.jettison.mapped.MappedNamespaceConvention)>(r1, $r2);

        return;
    }

    public void <init>(org.codehaus.jettison.json.JSONObject, org.codehaus.jettison.mapped.MappedNamespaceConvention) throws org.codehaus.jettison.json.JSONException, javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.util.FastStack $r6, $r22;
        org.codehaus.jettison.Node $r8, $r10, $r14, $r18, $r23;
        int $i0;
        java.lang.String r4, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r5, $r9, $r11, $r15, $r19;
        org.codehaus.jettison.json.JSONObject r1, $r20;
        org.codehaus.jettison.json.JSONArray $r13, $r16;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;
        java.lang.Object $r3, $r7, $r12, $r17;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        r1 := @parameter0: org.codehaus.jettison.json.JSONObject;

        r5 := @parameter1: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        specialinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String valueKey> = "$";

        $r2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention> = r5;

        $r6 = new org.codehaus.jettison.util.FastStack;

        specialinvoke $r6.<org.codehaus.jettison.util.FastStack: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes> = $r6;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: javax.xml.namespace.NamespaceContext ctx> = r5;

        $r7 = virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r4);

        $z0 = $r7 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label1;

        $r18 = new org.codehaus.jettison.Node;

        $r20 = (org.codehaus.jettison.json.JSONObject) $r7;

        $r19 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r18.<org.codehaus.jettison.Node: void <init>(org.codehaus.jettison.Node,java.lang.String,org.codehaus.jettison.json.JSONObject,org.codehaus.jettison.Convention)>(null, r4, $r20, $r19);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r18;

        goto label6;

     label1:
        $z1 = $r7 instanceof org.codehaus.jettison.json.JSONArray;

        if $z1 == 0 goto label3;

        $r13 = (org.codehaus.jettison.json.JSONArray) $r7;

        $i0 = virtualinvoke $r13.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 != 1 goto label2;

        $r16 = (org.codehaus.jettison.json.JSONArray) $r7;

        $r17 = virtualinvoke $r16.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(0);

        $z3 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("");

        if $z3 != 0 goto label3;

     label2:
        $r14 = new org.codehaus.jettison.Node;

        $r15 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r14.<org.codehaus.jettison.Node: void <init>(org.codehaus.jettison.Node,java.lang.String,org.codehaus.jettison.json.JSONObject,org.codehaus.jettison.Convention)>(null, r4, r1, $r15);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r14;

        goto label6;

     label3:
        $r8 = new org.codehaus.jettison.Node;

        $r9 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r8.<org.codehaus.jettison.Node: void <init>(java.lang.String,org.codehaus.jettison.Convention)>(r4, $r9);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r8;

        $r11 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $r10 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r11.<org.codehaus.jettison.mapped.MappedNamespaceConvention: void processAttributesAndNamespaces(org.codehaus.jettison.Node,org.codehaus.jettison.json.JSONObject)>($r10, r1);

        $r12 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        $z2 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label4;

        $r21 = null;

        goto label5;

     label4:
        $r21 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label5:
        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue> = $r21;

     label6:
        $r22 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r23 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r22.<org.codehaus.jettison.util.FastStack: void push(java.lang.Object)>($r23);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 7;

        return;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1;
        javax.xml.namespace.QName $r9;
        org.codehaus.jettison.util.FastStack $r5, $r6, $r12, $r15, $r20, $r21, $r24, $r28;
        org.codehaus.jettison.Node $r1, $r3, r8, $r14, $r17, $r18, $r23, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r10, $r11, $r27;
        java.util.Iterator $r2, $r19;
        org.codehaus.jettison.json.JSONArray $r4;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;
        java.lang.Object $r7, $r13, $r16, $r22, $r25;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i0 != 7 goto label01;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 1;

        goto label10;

     label01:
        $i1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i1 != 4 goto label02;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 2;

        $r24 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r25 = virtualinvoke $r24.<org.codehaus.jettison.util.FastStack: java.lang.Object pop()>();

        $r26 = (org.codehaus.jettison.Node) $r25;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r26;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue> = null;

        goto label10;

     label02:
        $i2 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i2 == 1 goto label03;

        $i7 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i7 != 2 goto label10;

     label03:
        $i3 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i3 != 2 goto label04;

        $r20 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $i6 = virtualinvoke $r20.<org.codehaus.jettison.util.FastStack: int size()>();

        if $i6 <= 0 goto label04;

        $r21 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r22 = virtualinvoke $r21.<org.codehaus.jettison.util.FastStack: java.lang.Object peek()>();

        $r23 = (org.codehaus.jettison.Node) $r22;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r23;

     label04:
        $r27 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue>;

        if $r27 == null goto label05;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 4;

        goto label10;

     label05:
        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.util.Iterator getKeys()>();

        if $r2 == null goto label06;

        $r18 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r19 = virtualinvoke $r18.<org.codehaus.jettison.Node: java.util.Iterator getKeys()>();

        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label07;

     label06:
        $r3 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r4 = virtualinvoke $r3.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray getArray()>();

        if $r4 == null goto label08;

     label07:
        specialinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: void processElement()>();

        goto label10;

     label08:
        $r5 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $i4 = virtualinvoke $r5.<org.codehaus.jettison.util.FastStack: int size()>();

        if $i4 <= 0 goto label09;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 2;

        $r15 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r16 = virtualinvoke $r15.<org.codehaus.jettison.util.FastStack: java.lang.Object pop()>();

        $r17 = (org.codehaus.jettison.Node) $r16;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r17;

        goto label10;

     label09:
        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 8;

     label10:
        $r28 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $i8 = virtualinvoke $r28.<org.codehaus.jettison.util.FastStack: int size()>();

        if $i8 <= 0 goto label11;

        $r6 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r7 = virtualinvoke $r6.<org.codehaus.jettison.util.FastStack: java.lang.Object peek()>();

        r8 = (org.codehaus.jettison.Node) $r7;

        $i5 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        if $i5 != 1 goto label11;

        $r9 = virtualinvoke r8.<org.codehaus.jettison.Node: javax.xml.namespace.QName getName()>();

        $r10 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r11 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String valueKey>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label11;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 4;

        $r12 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r13 = virtualinvoke $r12.<org.codehaus.jettison.util.FastStack: java.lang.Object pop()>();

        $r14 = (org.codehaus.jettison.Node) $r13;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r14;

     label11:
        $i9 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event>;

        return $i9;
    }

    private void processElement() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r69;
        java.lang.StringBuilder $r45, $r51, $r52, $r53;
        javax.xml.namespace.QName $r38, $r42, $r48;
        org.codehaus.jettison.Node $r1, $r3, $r6, $r8, $r10, $r13, $r18, $r19, $r21, $r23, $r24, $r25, $r27, $r29, $r32, $r33, $r35, $r37, $r40, $r44, $r46, $r57, $r58, $r59, $r61, $r65, $r66;
        java.lang.String $r31, $r39, $r41, $r43, $r49, $r50, r71, $r73;
        org.codehaus.jettison.json.JSONObject $r7, $r17;
        org.codehaus.jettison.json.JSONArray $r2, $r34, $r36, $r62, r72;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;
        org.codehaus.jettison.json.JSONException $r68;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r9, $r16, $r22, $r28, $r47;
        org.codehaus.jettison.util.FastStack $r11, $r14, $r20, $r26, $r30, $r54, $r55, $r63;
        int $i0, $i1, i2;
        java.util.Iterator $r4, $r60, $r67;
        java.lang.Object $r5, $r12, $r15, $r56, $r64, r70;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

     label01:
        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray getArray()>();

        if $r2 == null goto label10;

        $r32 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $i0 = virtualinvoke $r32.<org.codehaus.jettison.Node: int getArrayIndex()>();

        $r33 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r34 = virtualinvoke $r33.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray getArray()>();

        $i1 = virtualinvoke $r34.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 < $i1 goto label08;

        $r54 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        virtualinvoke $r54.<org.codehaus.jettison.util.FastStack: java.lang.Object pop()>();

        $r55 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r56 = virtualinvoke $r55.<org.codehaus.jettison.util.FastStack: java.lang.Object peek()>();

        $r57 = (org.codehaus.jettison.Node) $r56;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r57;

        $r58 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        if $r58 != null goto label03;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 8;

     label02:
        return;

     label03:
        $r59 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r60 = virtualinvoke $r59.<org.codehaus.jettison.Node: java.util.Iterator getKeys()>();

        if $r60 == null goto label04;

        $r66 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r67 = virtualinvoke $r66.<org.codehaus.jettison.Node: java.util.Iterator getKeys()>();

        $z5 = interfaceinvoke $r67.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label05;

     label04:
        $r61 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r62 = virtualinvoke $r61.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray getArray()>();

        if $r62 == null goto label06;

     label05:
        specialinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: void processElement()>();

        goto label07;

     label06:
        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 2;

        $r63 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r64 = virtualinvoke $r63.<org.codehaus.jettison.util.FastStack: java.lang.Object pop()>();

        $r65 = (org.codehaus.jettison.Node) $r64;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r65;

     label07:
        return;

     label08:
        $r35 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r36 = virtualinvoke $r35.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray getArray()>();

        i2 = $i0 + 1;

        r70 = virtualinvoke $r36.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>($i0);

        $r37 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r38 = virtualinvoke $r37.<org.codehaus.jettison.Node: javax.xml.namespace.QName getName()>();

        $r39 = virtualinvoke $r38.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        r71 = $r39;

        $r41 = "";

        $r40 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r42 = virtualinvoke $r40.<org.codehaus.jettison.Node: javax.xml.namespace.QName getName()>();

        $r43 = virtualinvoke $r42.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z4 != 0 goto label09;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $r46 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r48 = virtualinvoke $r46.<org.codehaus.jettison.Node: javax.xml.namespace.QName getName()>();

        $r49 = virtualinvoke $r48.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r50 = virtualinvoke $r47.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String getPrefix(java.lang.String)>($r49);

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        r71 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r44 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r44.<org.codehaus.jettison.Node: void setArrayIndex(int)>(i2);

        goto label11;

     label10:
        $r3 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r4 = virtualinvoke $r3.<org.codehaus.jettison.Node: java.util.Iterator getKeys()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r71 = (java.lang.String) $r5;

        $r6 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        $r7 = virtualinvoke $r6.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONObject getObject()>();

        r70 = virtualinvoke $r7.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r71);

     label11:
        $z0 = r70 instanceof java.lang.String;

        if $z0 == 0 goto label13;

        $r27 = new org.codehaus.jettison.Node;

        $r28 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r27.<org.codehaus.jettison.Node: void <init>(java.lang.String,org.codehaus.jettison.Convention)>(r71, $r28);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r27;

        $r30 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r29 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r30.<org.codehaus.jettison.util.FastStack: void push(java.lang.Object)>($r29);

        $r31 = (java.lang.String) r70;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue> = $r31;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 1;

     label12:
        return;

     label13:
        $z1 = r70 instanceof org.codehaus.jettison.json.JSONArray;

        if $z1 == 0 goto label15;

        r72 = (org.codehaus.jettison.json.JSONArray) r70;

        $r21 = new org.codehaus.jettison.Node;

        $r22 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r21.<org.codehaus.jettison.Node: void <init>(java.lang.String,org.codehaus.jettison.Convention)>(r71, $r22);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r21;

        $r23 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r23.<org.codehaus.jettison.Node: void setArray(org.codehaus.jettison.json.JSONArray)>(r72);

        $r24 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r24.<org.codehaus.jettison.Node: void setArrayIndex(int)>(0);

        $r26 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r25 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r26.<org.codehaus.jettison.util.FastStack: void push(java.lang.Object)>($r25);

        specialinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: void processElement()>();

     label14:
        return;

     label15:
        $z2 = r70 instanceof org.codehaus.jettison.json.JSONObject;

        if $z2 == 0 goto label17;

        $r13 = new org.codehaus.jettison.Node;

        $r14 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r15 = virtualinvoke $r14.<org.codehaus.jettison.util.FastStack: java.lang.Object peek()>();

        $r18 = (org.codehaus.jettison.Node) $r15;

        $r17 = (org.codehaus.jettison.json.JSONObject) r70;

        $r16 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r13.<org.codehaus.jettison.Node: void <init>(org.codehaus.jettison.Node,java.lang.String,org.codehaus.jettison.json.JSONObject,org.codehaus.jettison.Convention)>($r18, r71, $r17, $r16);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r13;

        $r20 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r19 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r20.<org.codehaus.jettison.util.FastStack: void push(java.lang.Object)>($r19);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 1;

     label16:
        return;

     label17:
        $r8 = new org.codehaus.jettison.Node;

        $r9 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r8.<org.codehaus.jettison.Node: void <init>(java.lang.String,org.codehaus.jettison.Convention)>(r71, $r9);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node> = $r8;

        $r11 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.util.FastStack nodes>;

        $r10 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: org.codehaus.jettison.Node node>;

        virtualinvoke $r11.<org.codehaus.jettison.util.FastStack: void push(java.lang.Object)>($r10);

        $r12 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        $z3 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>(r70);

        if $z3 == 0 goto label18;

        $r73 = null;

        goto label19;

     label18:
        $r73 = virtualinvoke r70.<java.lang.Object: java.lang.String toString()>();

     label19:
        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue> = $r73;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 1;

     label20:
        return;

     label21:
        $r68 := @caughtexception;

        $r69 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r69.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r68);

        throw $r69;

        catch org.codehaus.jettison.json.JSONException from label01 to label02 with label21;
        catch org.codehaus.jettison.json.JSONException from label03 to label07 with label21;
        catch org.codehaus.jettison.json.JSONException from label08 to label12 with label21;
        catch org.codehaus.jettison.json.JSONException from label13 to label14 with label21;
        catch org.codehaus.jettison.json.JSONException from label15 to label16 with label21;
        catch org.codehaus.jettison.json.JSONException from label17 to label20 with label21;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        return;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        java.lang.String $r1;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: int event> = 4;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue>;

        return $r1;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        javax.xml.namespace.NamespaceContext $r1;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: javax.xml.namespace.NamespaceContext ctx>;

        return $r1;
    }

    public java.lang.String getText()
    {
        java.lang.String $r1;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String currentValue>;

        return $r1;
    }

    public void setValueKey(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jettison.mapped.MappedXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamReader;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamReader: java.lang.String valueKey> = r1;

        return;
    }
}
