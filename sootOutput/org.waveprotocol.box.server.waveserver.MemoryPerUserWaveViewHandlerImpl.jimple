public class org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.PerUserWaveViewHandler
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final int PER_USER_WAVES_VIEW_CACHE_MINUTES;
    public java.util.concurrent.ConcurrentMap explicitPerUserWaveViews;

    public void <init>(org.waveprotocol.box.server.waveserver.WaveMap)
    {
        java.util.concurrent.TimeUnit $r2;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl$1 $r4;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl r0;
        com.google.common.collect.MapMaker $r1, $r3;
        org.waveprotocol.box.server.waveserver.WaveMap r5;
        java.util.concurrent.ConcurrentMap $r6;

        r0 := @this: org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl;

        r5 := @parameter0: org.waveprotocol.box.server.waveserver.WaveMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r3 = virtualinvoke $r1.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit)>(5L, $r2);

        $r4 = new org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl$1;

        specialinvoke $r4.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl,org.waveprotocol.box.server.waveserver.WaveMap)>(r0, r5);

        $r6 = virtualinvoke $r3.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r4);

        r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews> = $r6;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture onParticipantAdded(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.id.WaveletId $r6, $r8;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        com.google.common.collect.Multimap r18;
        com.google.common.util.concurrent.SettableFuture $r19;
        java.util.concurrent.ConcurrentMap $r2, $r3;
        org.waveprotocol.wave.util.logging.Log $r11;
        java.lang.String $r15, $r17;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName r5;
        org.waveprotocol.wave.model.id.WaveId $r7, $r9;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r16;

        r0 := @this: org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r18 = (com.google.common.collect.Multimap) $r4;

        $r7 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r6 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $z1 = interfaceinvoke r18.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z1 != 0 goto label1;

        $r9 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r8 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        interfaceinvoke r18.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r9, $r8);

        $r11 = <org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added wavelet: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to the view of user: ");

        $r15 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r17);

     label1:
        $r19 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r19.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(null);

        return $r19;
    }

    public com.google.common.util.concurrent.ListenableFuture onParticipantRemoved(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.id.WaveletId $r6, $r8;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        com.google.common.collect.Multimap r18;
        com.google.common.util.concurrent.SettableFuture $r19;
        java.util.concurrent.ConcurrentMap $r2, $r3;
        org.waveprotocol.wave.util.logging.Log $r11;
        java.lang.String $r15, $r17;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName r5;
        org.waveprotocol.wave.model.id.WaveId $r7, $r9;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r16;

        r0 := @this: org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r18 = (com.google.common.collect.Multimap) $r4;

        $r7 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r6 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $z1 = interfaceinvoke r18.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z1 == 0 goto label1;

        $r9 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r8 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        interfaceinvoke r18.<com.google.common.collect.Multimap: boolean remove(java.lang.Object,java.lang.Object)>($r9, $r8);

        $r11 = <org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed wavelet: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from the view of user: ");

        $r15 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r17);

     label1:
        $r19 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r19.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(null);

        return $r19;
    }

    public com.google.common.collect.Multimap retrievePerUserWaveView(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl r0;
        com.google.common.collect.Multimap $r4;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: java.util.concurrent.ConcurrentMap explicitPerUserWaveViews>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.google.common.collect.Multimap) $r3;

        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture onWaveInit(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        com.google.common.util.concurrent.SettableFuture $r0;
        org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl r1;

        r1 := @this: org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r0.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(null);

        return $r0;
    }

    static org.waveprotocol.wave.util.logging.Log access$000()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: int PER_USER_WAVES_VIEW_CACHE_MINUTES> = 5;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/MemoryPerUserWaveViewHandlerImpl;");

        <org.waveprotocol.box.server.waveserver.MemoryPerUserWaveViewHandlerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
