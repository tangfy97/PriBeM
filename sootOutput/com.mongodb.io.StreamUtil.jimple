public class com.mongodb.io.StreamUtil extends java.lang.Object
{

    public void <init>()
    {
        com.mongodb.io.StreamUtil r0;

        r0 := @this: com.mongodb.io.StreamUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] execSafe(java.lang.String)
    {
        java.lang.String[] $r1;
        java.io.IOException $r2;
        java.lang.String r0;
        java.lang.RuntimeException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String[] exec(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.String[] exec(java.lang.String) throws java.io.IOException
    {
        java.lang.Process $r2;
        java.lang.Runtime $r0;
        java.lang.String[] $r7;
        java.lang.String r1, $r4, $r6;
        java.io.InputStream $r3, $r5;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.InputStream)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.Process: java.io.InputStream getErrorStream()>();

        $r6 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.InputStream)>($r5);

        virtualinvoke $r2.<java.lang.Process: void destroy()>();

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = $r4;

        $r7[1] = $r6;

        return $r7;
    }

    public static java.lang.String readFully(java.io.File) throws java.io.IOException
    {
        java.lang.String $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.File,java.lang.String)>(r0, "utf8");

        return $r1;
    }

    public static java.lang.String readFully(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.FileInputStream $r0;
        java.lang.String r2, $r3;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r3 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.InputStream,java.lang.String)>($r0, r2);

        virtualinvoke $r0.<java.io.FileInputStream: void close()>();

        return $r3;
    }

    public static java.lang.String readFully(java.io.InputStream) throws java.io.IOException
    {
        java.lang.String $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.InputStream,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String readFully(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r2;
        java.io.InputStreamReader $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        goto label2;

     label1:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r0);

     label2:
        $r2 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.InputStreamReader)>($r3);

        return $r2;
    }

    public static java.lang.String readFully(java.io.InputStreamReader) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.lang.String $r2;
        java.io.InputStreamReader r1;

        r1 := @parameter0: java.io.InputStreamReader;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        $r2 = staticinvoke <com.mongodb.io.StreamUtil: java.lang.String readFully(java.io.BufferedReader)>($r0);

        return $r2;
    }

    public static java.lang.String readFully(java.io.BufferedReader) throws java.io.IOException
    {
        java.lang.StringBuilder $r0;
        java.io.BufferedReader r1;
        java.lang.String $r2, $r3;

        r1 := @parameter0: java.io.BufferedReader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static byte[] readBytesFully(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.mongodb.io.StreamUtil: int pipe(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static int pipe(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        int $i0, $i2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $i2 = (int) -1;

        $i0 = staticinvoke <com.mongodb.io.StreamUtil: int pipe(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, $i2);

        return $i0;
    }

    public static int pipe(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        java.io.IOException $r4;
        int i0, i1, $i2, $i4;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r0 = newarray (byte)[4096];

        i1 = 0;

     label1:
        $i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i4 = (int) -1;

        if $i2 == $i4 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i2);

        i1 = i1 + $i2;

        if i0 <= 0 goto label1;

        if i1 <= i0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("too big");

        throw $r4;

     label2:
        return i1;
    }

    public static int send(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r1;
        java.io.ByteArrayInputStream $r0;
        int $i0;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $i0 = staticinvoke <com.mongodb.io.StreamUtil: int pipe(java.io.InputStream,java.io.OutputStream)>($r0, r2);

        return $i0;
    }

    public static byte readByte(java.io.InputStream) throws java.io.IOException
    {
        byte $b2;
        int $i0, $i1;
        java.io.IOException $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("end of stream");

        throw $r1;

     label1:
        $i1 = $i0 & 255;

        $b2 = (byte) $i1;

        return $b2;
    }

    public static char readChar(java.io.InputStream) throws java.io.IOException
    {
        char $c1;
        byte $b0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $b0 = staticinvoke <com.mongodb.io.StreamUtil: byte readByte(java.io.InputStream)>(r0);

        $c1 = (char) $b0;

        return $c1;
    }
}
