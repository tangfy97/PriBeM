public final enum class com.mycila.inject.internal.guava.base.CaseFormat extends java.lang.Enum
{
    public static final enum com.mycila.inject.internal.guava.base.CaseFormat LOWER_HYPHEN;
    public static final enum com.mycila.inject.internal.guava.base.CaseFormat LOWER_UNDERSCORE;
    public static final enum com.mycila.inject.internal.guava.base.CaseFormat LOWER_CAMEL;
    public static final enum com.mycila.inject.internal.guava.base.CaseFormat UPPER_CAMEL;
    public static final enum com.mycila.inject.internal.guava.base.CaseFormat UPPER_UNDERSCORE;
    private final com.mycila.inject.internal.guava.base.CharMatcher wordBoundary;
    private final java.lang.String wordSeparator;
    private static final com.mycila.inject.internal.guava.base.CaseFormat[] $VALUES;

    public static com.mycila.inject.internal.guava.base.CaseFormat[] values()
    {
        com.mycila.inject.internal.guava.base.CaseFormat[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.mycila.inject.internal.guava.base.CaseFormat[]) $r1;

        return $r2;
    }

    public static com.mycila.inject.internal.guava.base.CaseFormat valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.mycila.inject.internal.guava.base.CaseFormat $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mycila/inject/internal/guava/base/CaseFormat;", r0);

        $r2 = (com.mycila.inject.internal.guava.base.CaseFormat) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, com.mycila.inject.internal.guava.base.CharMatcher, java.lang.String)
    {
        com.mycila.inject.internal.guava.base.CaseFormat r0;
        int i0;
        java.lang.String r1, r3;
        com.mycila.inject.internal.guava.base.CharMatcher r2;

        r0 := @this: com.mycila.inject.internal.guava.base.CaseFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.guava.base.CharMatcher;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CharMatcher wordBoundary> = r2;

        r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String wordSeparator> = r3;

        return;
    }

    public java.lang.String 'to'(com.mycila.inject.internal.guava.base.CaseFormat, java.lang.String)
    {
        java.lang.NullPointerException $r31, $r32;
        com.mycila.inject.internal.guava.base.CharMatcher $r30;
        int[] $r3, $r4, $r20, $r24;
        com.mycila.inject.internal.guava.base.CaseFormat r0, r2;
        java.lang.StringBuilder r29, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16, $i18, $i20;
        java.lang.String r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25, $r26;

        r2 := @this: com.mycila.inject.internal.guava.base.CaseFormat;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CaseFormat;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label01;

        $r31 = new java.lang.NullPointerException;

        specialinvoke $r31.<java.lang.NullPointerException: void <init>()>();

        throw $r31;

     label01:
        if r1 != null goto label02;

        $r32 = new java.lang.NullPointerException;

        specialinvoke $r32.<java.lang.NullPointerException: void <init>()>();

        throw $r32;

     label02:
        if r0 != r2 goto label03;

        return r1;

     label03:
        $r3 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i0 = virtualinvoke r2.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label12;
            case 3: goto label04;
            default: goto label15;
        };

     label04:
        $r4 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i2 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i3 = $r4[$i2];

        lookupswitch($i3)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        return $r7;

     label06:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toUpperCase(java.lang.String)>($r5);

        return $r6;

     label07:
        goto label15;

     label08:
        $r24 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i11 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i12 = $r24[$i11];

        lookupswitch($i12)
        {
            case 2: goto label10;
            case 3: goto label09;
            default: goto label11;
        };

     label09:
        $r25 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        return $r25;

     label10:
        $r26 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toUpperCase(java.lang.String)>(r1);

        return $r26;

     label11:
        goto label15;

     label12:
        $r20 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i9 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i10 = $r20[$i9];

        lookupswitch($i10)
        {
            case 1: goto label14;
            case 3: goto label13;
            default: goto label15;
        };

     label13:
        $r21 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        $r22 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>($r21);

        return $r22;

     label14:
        $r23 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>(r1);

        return $r23;

     label15:
        r29 = null;

        i13 = 0;

        $i18 = (int) -1;

        i14 = $i18;

     label16:
        $r30 = r2.<com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CharMatcher wordBoundary>;

        i15 = i14 + 1;

        $i16 = virtualinvoke $r30.<com.mycila.inject.internal.guava.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>(r1, i15);

        i14 = $i16;

        $i20 = (int) -1;

        if $i16 == $i20 goto label19;

        if i13 != 0 goto label17;

        $r33 = new java.lang.StringBuilder;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $r17 = r2.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String wordSeparator>;

        $i6 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i7 = 4 * $i6;

        $i8 = $i5 + $i7;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(int)>($i8);

        r29 = $r33;

        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i13, $i16);

        $r19 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String normalizeFirstWord(java.lang.String)>($r18);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        goto label18;

     label17:
        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i13, $i16);

        $r13 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String normalizeWord(java.lang.String)>($r12);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label18:
        $r14 = r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String wordSeparator>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = r2.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String wordSeparator>;

        $i4 = virtualinvoke $r15.<java.lang.String: int length()>();

        i13 = $i16 + $i4;

        goto label16;

     label19:
        if i13 != 0 goto label20;

        $r11 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String normalizeFirstWord(java.lang.String)>(r1);

        return $r11;

     label20:
        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i13);

        $r9 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String normalizeWord(java.lang.String)>($r8);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private java.lang.String normalizeFirstWord(java.lang.String)
    {
        int[] $r1;
        com.mycila.inject.internal.guava.base.CaseFormat r0;
        int $i0, $i1;
        java.lang.String r2, $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.base.CaseFormat;

        r2 := @parameter0: java.lang.String;

        $r1 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>(r2);

        return $r3;

     label2:
        $r4 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String normalizeWord(java.lang.String)>(r2);

        return $r4;
    }

    private java.lang.String normalizeWord(java.lang.String)
    {
        java.lang.RuntimeException $r8;
        int[] $r1;
        com.mycila.inject.internal.guava.base.CaseFormat r0;
        int $i0, $i1;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r12;

        r0 := @this: com.mycila.inject.internal.guava.base.CaseFormat;

        r2 := @parameter0: java.lang.String;

        $r1 = <com.mycila.inject.internal.guava.base.CaseFormat$1: int[] $SwitchMap$com$google$common$base$CaseFormat>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CaseFormat: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label6;
        };

     label1:
        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>(r2);

        return $r5;

     label2:
        $r7 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>(r2);

        return $r7;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String firstCharOnlyToUpper(java.lang.String)>(r2);

        return $r4;

     label4:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.CaseFormat: java.lang.String firstCharOnlyToUpper(java.lang.String)>(r2);

        return $r3;

     label5:
        $r6 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toUpperCase(java.lang.String)>(r2);

        return $r6;

     label6:
        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown case: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    private static java.lang.String firstCharOnlyToUpper(java.lang.String)
    {
        char $c1, $c2;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String r0, $r3, $r4, $r6;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c2 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: char toUpperCase(char)>($c1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.base.CharMatcher $r1, $r3, $r5, $r7, $r9;
        com.mycila.inject.internal.guava.base.CaseFormat $r0, $r2, $r4, $r6, $r8, $r11, $r12, $r13, $r14, $r15;
        com.mycila.inject.internal.guava.base.CaseFormat[] $r10;

        $r0 = new com.mycila.inject.internal.guava.base.CaseFormat;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher is(char)>(45);

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.CaseFormat: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.base.CharMatcher,java.lang.String)>("LOWER_HYPHEN", 0, $r1, "-");

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_HYPHEN> = $r0;

        $r2 = new com.mycila.inject.internal.guava.base.CaseFormat;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher is(char)>(95);

        specialinvoke $r2.<com.mycila.inject.internal.guava.base.CaseFormat: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.base.CharMatcher,java.lang.String)>("LOWER_UNDERSCORE", 1, $r3, "_");

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_UNDERSCORE> = $r2;

        $r4 = new com.mycila.inject.internal.guava.base.CaseFormat;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher inRange(char,char)>(65, 90);

        specialinvoke $r4.<com.mycila.inject.internal.guava.base.CaseFormat: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.base.CharMatcher,java.lang.String)>("LOWER_CAMEL", 2, $r5, "");

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_CAMEL> = $r4;

        $r6 = new com.mycila.inject.internal.guava.base.CaseFormat;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher inRange(char,char)>(65, 90);

        specialinvoke $r6.<com.mycila.inject.internal.guava.base.CaseFormat: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.base.CharMatcher,java.lang.String)>("UPPER_CAMEL", 3, $r7, "");

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat UPPER_CAMEL> = $r6;

        $r8 = new com.mycila.inject.internal.guava.base.CaseFormat;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher is(char)>(95);

        specialinvoke $r8.<com.mycila.inject.internal.guava.base.CaseFormat: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.base.CharMatcher,java.lang.String)>("UPPER_UNDERSCORE", 4, $r9, "_");

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat UPPER_UNDERSCORE> = $r8;

        $r10 = newarray (com.mycila.inject.internal.guava.base.CaseFormat)[5];

        $r11 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_HYPHEN>;

        $r10[0] = $r11;

        $r12 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_UNDERSCORE>;

        $r10[1] = $r12;

        $r13 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat LOWER_CAMEL>;

        $r10[2] = $r13;

        $r14 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat UPPER_CAMEL>;

        $r10[3] = $r14;

        $r15 = <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat UPPER_UNDERSCORE>;

        $r10[4] = $r15;

        <com.mycila.inject.internal.guava.base.CaseFormat: com.mycila.inject.internal.guava.base.CaseFormat[] $VALUES> = $r10;

        return;
    }
}
