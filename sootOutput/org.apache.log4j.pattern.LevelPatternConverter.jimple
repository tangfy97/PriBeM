public final class org.apache.log4j.pattern.LevelPatternConverter extends org.apache.log4j.pattern.LoggingEventPatternConverter
{
    private static final int TRACE_INT;
    private static final org.apache.log4j.pattern.LevelPatternConverter INSTANCE;

    private void <init>()
    {
        org.apache.log4j.pattern.LevelPatternConverter r0;

        r0 := @this: org.apache.log4j.pattern.LevelPatternConverter;

        specialinvoke r0.<org.apache.log4j.pattern.LoggingEventPatternConverter: void <init>(java.lang.String,java.lang.String)>("Level", "level");

        return;
    }

    public static org.apache.log4j.pattern.LevelPatternConverter newInstance(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.log4j.pattern.LevelPatternConverter $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = <org.apache.log4j.pattern.LevelPatternConverter: org.apache.log4j.pattern.LevelPatternConverter INSTANCE>;

        return $r0;
    }

    public void format(org.apache.log4j.spi.LoggingEvent, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        org.apache.log4j.Level $r2;
        org.apache.log4j.spi.LoggingEvent r1;
        java.lang.String $r3;
        org.apache.log4j.pattern.LevelPatternConverter r4;

        r4 := @this: org.apache.log4j.pattern.LevelPatternConverter;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        r0 := @parameter1: java.lang.StringBuffer;

        $r2 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r3 = virtualinvoke $r2.<org.apache.log4j.Priority: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }

    public java.lang.String getStyleClass(java.lang.Object)
    {
        org.apache.log4j.spi.LoggingEvent $r1, $r5;
        java.lang.StringBuffer $r3, $r4, $r8;
        org.apache.log4j.Level $r2, $r6;
        int $i0;
        java.lang.Object r0;
        java.lang.String $r7, $r9;
        org.apache.log4j.pattern.LevelPatternConverter r10;
        boolean $z0;

        r10 := @this: org.apache.log4j.pattern.LevelPatternConverter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.log4j.spi.LoggingEvent;

        if $z0 == 0 goto label8;

        $r1 = (org.apache.log4j.spi.LoggingEvent) r0;

        $r2 = virtualinvoke $r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $i0 = virtualinvoke $r2.<org.apache.log4j.Priority: int toInt()>();

        lookupswitch($i0)
        {
            case 5000: goto label1;
            case 10000: goto label2;
            case 20000: goto label3;
            case 30000: goto label4;
            case 40000: goto label5;
            case 50000: goto label6;
            default: goto label7;
        };

     label1:
        return "level trace";

     label2:
        return "level debug";

     label3:
        return "level info";

     label4:
        return "level warn";

     label5:
        return "level error";

     label6:
        return "level fatal";

     label7:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("level ");

        $r5 = (org.apache.log4j.spi.LoggingEvent) r0;

        $r6 = virtualinvoke $r5.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r7 = virtualinvoke $r6.<org.apache.log4j.Priority: java.lang.String toString()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label8:
        return "level";
    }

    static void <clinit>()
    {
        org.apache.log4j.pattern.LevelPatternConverter $r0;

        <org.apache.log4j.pattern.LevelPatternConverter: int TRACE_INT> = 5000;

        $r0 = new org.apache.log4j.pattern.LevelPatternConverter;

        specialinvoke $r0.<org.apache.log4j.pattern.LevelPatternConverter: void <init>()>();

        <org.apache.log4j.pattern.LevelPatternConverter: org.apache.log4j.pattern.LevelPatternConverter INSTANCE> = $r0;

        return;
    }
}
