abstract class nu.xom.jaxen.expr.DefaultTruthExpr extends nu.xom.jaxen.expr.DefaultBinaryExpr
{

    void <init>(nu.xom.jaxen.expr.Expr, nu.xom.jaxen.expr.Expr)
    {
        nu.xom.jaxen.expr.Expr r1, r2;
        nu.xom.jaxen.expr.DefaultTruthExpr r0;

        r0 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r1 := @parameter0: nu.xom.jaxen.expr.Expr;

        r2 := @parameter1: nu.xom.jaxen.expr.Expr;

        specialinvoke r0.<nu.xom.jaxen.expr.DefaultBinaryExpr: void <init>(nu.xom.jaxen.expr.Expr,nu.xom.jaxen.expr.Expr)>(r1, r2);

        return;
    }

    public java.lang.String toString()
    {
        nu.xom.jaxen.expr.Expr $r3, $r6;
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r9;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[(DefaultTruthExpr): ");

        $r3 = virtualinvoke r2.<nu.xom.jaxen.expr.DefaultTruthExpr: nu.xom.jaxen.expr.Expr getLHS()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = virtualinvoke r2.<nu.xom.jaxen.expr.DefaultTruthExpr: nu.xom.jaxen.expr.Expr getRHS()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    protected boolean bothAreSets(java.lang.Object, java.lang.Object)
    {
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof java.util.List;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected boolean eitherIsSet(java.lang.Object, java.lang.Object)
    {
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.util.List;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean isSet(java.lang.Object)
    {
        java.lang.Object r0;
        nu.xom.jaxen.expr.DefaultTruthExpr r1;
        boolean $z0;

        r1 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.List;

        return $z0;
    }

    protected boolean isBoolean(java.lang.Object)
    {
        java.lang.Object r0;
        nu.xom.jaxen.expr.DefaultTruthExpr r1;
        boolean $z0;

        r1 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        return $z0;
    }

    protected boolean setIsEmpty(java.util.List)
    {
        java.util.List r0;
        nu.xom.jaxen.expr.DefaultTruthExpr r1;
        int $i0;
        boolean $z0;

        r1 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean eitherIsBoolean(java.lang.Object, java.lang.Object)
    {
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Boolean;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean bothAreBoolean(java.lang.Object, java.lang.Object)
    {
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof java.lang.Boolean;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected boolean eitherIsNumber(java.lang.Object, java.lang.Object)
    {
        nu.xom.jaxen.expr.DefaultTruthExpr r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.jaxen.expr.DefaultTruthExpr;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
