public final class org.waveprotocol.wave.model.id.WaveId extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String domain;
    private final java.lang.String id;
    private transient java.lang.String cachedSerialisation;

    public static org.waveprotocol.wave.model.id.WaveId checkedDeserialise(java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        org.waveprotocol.wave.model.id.DualIdSerialiser $r1;
        java.lang.String r0;
        org.waveprotocol.wave.model.id.WaveId $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.id.DualIdSerialiser: org.waveprotocol.wave.model.id.DualIdSerialiser MODERN>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.DualIdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>(r0);

        return $r2;
    }

    public static org.waveprotocol.wave.model.id.WaveId deserialise(java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.id.InvalidIdException $r2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId checkedDeserialise(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public static org.waveprotocol.wave.model.id.WaveId of(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r2, $r3;
        org.waveprotocol.wave.model.id.WaveId $r4;
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null domain");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null id");

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(0, r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid domain %s", $r2);

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidIdentifier(java.lang.String)>(r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid id %s", $r3);

        $r4 = new org.waveprotocol.wave.model.id.WaveId;

        specialinvoke $r4.<org.waveprotocol.wave.model.id.WaveId: void <init>(java.lang.String,java.lang.String)>(r0, r1);

        return $r4;
    }

    public static org.waveprotocol.wave.model.id.WaveId ofChecked(java.lang.String, java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.InvalidIdException $r3, $r4;
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null domain");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null id");

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(0, r0);

        if $z0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.id.InvalidIdException;

        specialinvoke $r4.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, "Invalid domain");

        throw $r4;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidIdentifier(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        $r3 = new org.waveprotocol.wave.model.id.InvalidIdException;

        specialinvoke $r3.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r1, "Invalid id");

        throw $r3;

     label2:
        $r2 = new org.waveprotocol.wave.model.id.WaveId;

        specialinvoke $r2.<org.waveprotocol.wave.model.id.WaveId: void <init>(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.id.WaveId ofLegacy(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.id.WaveId $r4;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null domain");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null id");

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Empty domain");

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Empty id");

        $r2 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $z2 = virtualinvoke $r2.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: boolean hasEscapeCharacters(java.lang.String)>(r0);

        if $z2 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Domain cannot contain characters that requires escaping: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r12);

     label5:
        $r3 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $z3 = virtualinvoke $r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: boolean isEscapedProperly(char,java.lang.String)>(43, r1);

        if $z3 != 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Id is not properly escaped: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r8);

     label6:
        $r4 = new org.waveprotocol.wave.model.id.WaveId;

        specialinvoke $r4.<org.waveprotocol.wave.model.id.WaveId: void <init>(java.lang.String,java.lang.String)>(r0, r1);

        return $r4;
    }

    private void <init>(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveId r0;
        java.lang.String r1, $r2, r3;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String cachedSerialisation> = null;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>();

        r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain> = $r2;

        r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id> = r3;

        return;
    }

    public java.lang.String getDomain()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.id.WaveId r0;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        $r1 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        return $r1;
    }

    public java.lang.String getId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.id.WaveId r0;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        $r1 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        return $r1;
    }

    public java.lang.String serialise()
    {
        org.waveprotocol.wave.model.id.DualIdSerialiser $r3;
        org.waveprotocol.wave.model.id.WaveId r0;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        $r1 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String cachedSerialisation>;

        if $r1 != null goto label1;

        $r3 = <org.waveprotocol.wave.model.id.DualIdSerialiser: org.waveprotocol.wave.model.id.DualIdSerialiser MODERN>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.id.DualIdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>(r0);

        r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String cachedSerialisation> = $r4;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String cachedSerialisation>;

        return $r2;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.id.WaveId r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        $r1 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i3 = 31 + $i0;

        $i1 = 31 * i3;

        $r2 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        $i2 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.id.WaveId r0, r2;
        java.lang.Object r1;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.model.id.WaveId;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.waveprotocol.wave.model.id.WaveId) r1;

        $r4 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        $r3 = r2.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        $r5 = r2.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: org.waveprotocol.wave.model.id.WaveId;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WaveId ");

        $r3 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>(r2);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int compareTo(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveId r0, r1;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r3 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveId: java.lang.String domain>;

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r2);

        if $i0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        $r4 = r1.<org.waveprotocol.wave.model.id.WaveId: java.lang.String id>;

        $i1 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r4);

        return $i1;

     label1:
        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.model.id.WaveId r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.id.WaveId) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: int compareTo(org.waveprotocol.wave.model.id.WaveId)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.id.WaveId: long serialVersionUID> = 0L;

        return;
    }
}
