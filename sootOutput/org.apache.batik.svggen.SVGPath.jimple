public class org.apache.batik.svggen.SVGPath extends org.apache.batik.svggen.SVGGraphicObjectConverter
{

    public void <init>(org.apache.batik.svggen.SVGGeneratorContext)
    {
        org.apache.batik.svggen.SVGPath r0;
        org.apache.batik.svggen.SVGGeneratorContext r1;

        r0 := @this: org.apache.batik.svggen.SVGPath;

        r1 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphicObjectConverter: void <init>(org.apache.batik.svggen.SVGGeneratorContext)>(r1);

        return;
    }

    public org.w3c.dom.Element toSVG(java.awt.Shape)
    {
        java.awt.Shape r0;
        org.apache.batik.svggen.SVGPath r1;
        java.awt.geom.PathIterator $r7;
        org.w3c.dom.Element $r6;
        org.apache.batik.svggen.SVGGeneratorContext $r2, $r4;
        org.w3c.dom.Document $r5;
        int $i0, $i1;
        java.lang.String $r3;

        r1 := @this: org.apache.batik.svggen.SVGPath;

        r0 := @parameter0: java.awt.Shape;

        $r2 = r1.<org.apache.batik.svggen.SVGGraphicObjectConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        $r3 = staticinvoke <org.apache.batik.svggen.SVGPath: java.lang.String toSVGPathData(java.awt.Shape,org.apache.batik.svggen.SVGGeneratorContext)>(r0, $r2);

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = r1.<org.apache.batik.svggen.SVGGraphicObjectConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        $r5 = $r4.<org.apache.batik.svggen.SVGGeneratorContext: org.w3c.dom.Document domFactory>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "path");

        interfaceinvoke $r6.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "d", $r3);

        $r7 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        $i1 = interfaceinvoke $r7.<java.awt.geom.PathIterator: int getWindingRule()>();

        if $i1 != 0 goto label3;

        interfaceinvoke $r6.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "fill-rule", "evenodd");

     label3:
        return $r6;
    }

    public static java.lang.String toSVGPathData(java.awt.Shape, org.apache.batik.svggen.SVGGeneratorContext)
    {
        java.lang.Error $r5;
        float[] r3;
        java.awt.geom.PathIterator $r2;
        java.lang.StringBuffer $r0, $r6, $r7, $r8;
        int $i0, $i1;
        java.lang.String $r9, $r10, $r11;
        boolean $z0;
        java.awt.Shape r1;
        org.apache.batik.svggen.SVGGeneratorContext r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r1 := @parameter0: java.awt.Shape;

        r4 := @parameter1: org.apache.batik.svggen.SVGGeneratorContext;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(40);

        $r2 = interfaceinvoke r1.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r3 = newarray (float)[6];

        goto label09;

     label01:
        $i0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: int currentSegment(float[])>(r3);

        tableswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label04;
            default: goto label07;
        };

     label02:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("M");

        $f13 = r3[0];

        $f12 = r3[1];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f13, $f12, r4);

        goto label08;

     label03:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $f11 = r3[0];

        $f10 = r3[1];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f11, $f10, r4);

        goto label08;

     label04:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Z");

        goto label08;

     label05:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Q");

        $f7 = r3[0];

        $f6 = r3[1];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f7, $f6, r4);

        $f9 = r3[2];

        $f8 = r3[3];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f9, $f8, r4);

        goto label08;

     label06:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("C");

        $f1 = r3[0];

        $f0 = r3[1];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f1, $f0, r4);

        $f3 = r3[2];

        $f2 = r3[3];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f3, $f2, r4);

        $f5 = r3[4];

        $f4 = r3[5];

        staticinvoke <org.apache.batik.svggen.SVGPath: void appendPoint(java.lang.StringBuffer,float,float,org.apache.batik.svggen.SVGGeneratorContext)>($r0, $f5, $f4, r4);

        goto label08;

     label07:
        $r5 = new java.lang.Error;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid segmentType:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.String)>($r9);

        throw $r5;

     label08:
        interfaceinvoke $r2.<java.awt.geom.PathIterator: void next()>();

     label09:
        $z0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 == 0 goto label01;

        $i1 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i1 <= 0 goto label10;

        $r10 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        return $r11;

     label10:
        return "";
    }

    private static void appendPoint(java.lang.StringBuffer, float, float, org.apache.batik.svggen.SVGGeneratorContext)
    {
        java.lang.StringBuffer r0;
        org.apache.batik.svggen.SVGGeneratorContext r1;
        float f0, f1;
        java.lang.String $r2, $r3;
        double $d0, $d1;

        r0 := @parameter0: java.lang.StringBuffer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r1 := @parameter3: org.apache.batik.svggen.SVGGeneratorContext;

        $d0 = (double) f0;

        $r2 = virtualinvoke r1.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $d1 = (double) f1;

        $r3 = virtualinvoke r1.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d1);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        return;
    }
}
