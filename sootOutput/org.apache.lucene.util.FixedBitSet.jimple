public final class org.apache.lucene.util.FixedBitSet extends org.apache.lucene.search.DocIdSet implements org.apache.lucene.util.Bits
{
    private final long[] bits;
    private final int numBits;
    private final int wordLength;
    static final boolean $assertionsDisabled;

    public static int bits2words(int)
    {
        int i0, $i1, i2;

        i0 := @parameter0: int;

        i2 = i0 >>> 6;

        $i1 = i0 & 63;

        if $i1 == 0 goto label1;

        i2 = i2 + 1;

     label1:
        return i2;
    }

    public void <init>(int)
    {
        long[] $r1, $r2;
        int i0, $i1, $i2;
        org.apache.lucene.util.FixedBitSet r0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        r0.<org.apache.lucene.util.FixedBitSet: int numBits> = i0;

        $i1 = staticinvoke <org.apache.lucene.util.FixedBitSet: int bits2words(int)>(i0);

        $r1 = newarray (long)[$i1];

        r0.<org.apache.lucene.util.FixedBitSet: long[] bits> = $r1;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i2 = lengthof $r2;

        r0.<org.apache.lucene.util.FixedBitSet: int wordLength> = $i2;

        return;
    }

    public void <init>(long[], int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        java.lang.IllegalArgumentException $r2;
        long[] r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        $i1 = staticinvoke <org.apache.lucene.util.FixedBitSet: int bits2words(int)>(i0);

        r0.<org.apache.lucene.util.FixedBitSet: int wordLength> = $i1;

        $i3 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given long array is too small  to hold ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        r0.<org.apache.lucene.util.FixedBitSet: int numBits> = i0;

        r0.<org.apache.lucene.util.FixedBitSet: long[] bits> = r1;

        return;
    }

    public void <init>(org.apache.lucene.util.FixedBitSet)
    {
        org.apache.lucene.util.FixedBitSet r0, r1;
        long[] $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: org.apache.lucene.util.FixedBitSet;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        $i0 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        $r2 = newarray (long)[$i0];

        r0.<org.apache.lucene.util.FixedBitSet: long[] bits> = $r2;

        $r4 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $r3 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i1 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i1);

        $i2 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        r0.<org.apache.lucene.util.FixedBitSet: int numBits> = $i2;

        $i3 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        r0.<org.apache.lucene.util.FixedBitSet: int wordLength> = $i3;

        return;
    }

    public org.apache.lucene.search.DocIdSetIterator iterator()
    {
        long[] $r2;
        org.apache.lucene.util.OpenBitSetIterator $r0;
        int $i0;
        org.apache.lucene.util.FixedBitSet r1;

        r1 := @this: org.apache.lucene.util.FixedBitSet;

        $r0 = new org.apache.lucene.util.OpenBitSetIterator;

        $r2 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i0 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        specialinvoke $r0.<org.apache.lucene.util.OpenBitSetIterator: void <init>(long[],int)>($r2, $i0);

        return $r0;
    }

    public org.apache.lucene.util.Bits bits()
    {
        org.apache.lucene.util.FixedBitSet r0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        return r0;
    }

    public int length()
    {
        int $i0;
        org.apache.lucene.util.FixedBitSet r0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        $i0 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        return $i0;
    }

    public boolean isCacheable()
    {
        org.apache.lucene.util.FixedBitSet r0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        return 1;
    }

    public long[] getBits()
    {
        org.apache.lucene.util.FixedBitSet r0;
        long[] $r1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        return $r1;
    }

    public int cardinality()
    {
        long[] $r1, $r2;
        int $i0, $i2;
        org.apache.lucene.util.FixedBitSet r0;
        long $l1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i0 = lengthof $r1;

        $l1 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r2, 0, $i0);

        $i2 = (int) $l1;

        return $i2;
    }

    public boolean get(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l2, $l7;
        java.lang.AssertionError $r2;
        long[] $r1;
        byte $b3;
        int i0, $i4, $i5, $i6;
        java.lang.String $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i4 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i4 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r2;

     label2:
        $i5 = i0 >> 6;

        $i6 = i0 & 63;

        $l7 = 1L << $i6;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l1 = $r1[$i5];

        $l2 = $l1 & $l7;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void set(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l2, $l7;
        java.lang.AssertionError $r2;
        long[] $r1;
        int i0, $i3, $i4, $i5, $i6;
        java.lang.String $r8;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i4 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i4 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numBits=");

        $i3 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r2;

     label2:
        $i5 = i0 >> 6;

        $i6 = i0 & 63;

        $l7 = 1L << $i6;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l1 = $r1[$i5];

        $l2 = $l1 | $l7;

        $r1[$i5] = $l2;

        return;
    }

    public boolean getAndSet(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l2, $l4, $l5, $l9;
        java.lang.AssertionError $r3;
        long[] $r1, $r2;
        byte $b3;
        int i0, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i6 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i6 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i7 = i0 >> 6;

        $i8 = i0 & 63;

        $l9 = 1L << $i8;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l1 = $r1[$i7];

        $l2 = $l1 & $l9;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l4 = $r2[$i7];

        $l5 = $l4 | $l9;

        $r2[$i7] = $l5;

        return $z1;
    }

    public void clear(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l2, $l3, $l7;
        java.lang.AssertionError $r2;
        long[] $r1;
        int i0, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i4 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i4 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i5 = i0 >> 6;

        $i6 = i0 & 63;

        $l7 = 1L << $i6;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l2 = $r1[$i5];

        $l1 = $l7 ^ -1L;

        $l3 = $l2 & $l1;

        $r1[$i5] = $l3;

        return;
    }

    public boolean getAndClear(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l2, $l4, $l5, $l6, $l10;
        java.lang.AssertionError $r3;
        long[] $r1, $r2;
        byte $b3;
        int i0, $i7, $i8, $i9;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i7 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i7 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i8 = i0 >> 6;

        $i9 = i0 & 63;

        $l10 = 1L << $i9;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l1 = $r1[$i8];

        $l2 = $l1 & $l10;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l5 = $r2[$i8];

        $l4 = $l10 ^ -1L;

        $l6 = $l5 & $l4;

        $r2[$i8] = $l6;

        return $z1;
    }

    public int nextSetBit(int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l1, $l15, l17;
        java.lang.AssertionError $r4;
        long[] $r1, $r2;
        byte $b2, $b4;
        int i0, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, $i19;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i12 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i12 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i13 = i0 >> 6;

        i16 = $i13;

        $i14 = i0 & 63;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l1 = $r1[$i13];

        $l15 = $l1 >> $i14;

        $b2 = $l15 cmp 0L;

        if $b2 == 0 goto label3;

        $i8 = $i13 << 6;

        $i9 = $i8 + $i14;

        $i10 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l15);

        $i11 = $i9 + $i10;

        return $i11;

     label3:
        i16 = i16 + 1;

        $i3 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        if i16 >= $i3 goto label4;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        l17 = $r2[i16];

        $b4 = l17 cmp 0L;

        if $b4 == 0 goto label3;

        $i5 = i16 << 6;

        $i6 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l17);

        $i7 = $i5 + $i6;

        return $i7;

     label4:
        $i19 = (int) -1;

        return $i19;
    }

    public int prevSetBit(int)
    {
        byte $b3, $b4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10;
        org.apache.lucene.util.FixedBitSet r0;
        long $l2, $l17, l19;
        java.lang.AssertionError $r11;
        long[] $r1, $r2;
        int i0, $i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i18, $i21, $i23;
        java.lang.String $r9;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i14 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 < $i14 goto label2;

     label1:
        $r11 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numBits=");

        $i13 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r11;

     label2:
        $i15 = i0 >> 6;

        i18 = $i15;

        $i16 = i0 & 63;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l2 = $r1[$i15];

        $i1 = 63 - $i16;

        $l17 = $l2 << $i1;

        $b3 = $l17 cmp 0L;

        if $b3 == 0 goto label3;

        $i9 = $i15 << 6;

        $i10 = $i9 + $i16;

        $i11 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l17);

        $i12 = $i10 - $i11;

        return $i12;

     label3:
        $i21 = (int) -1;

        i18 = i18 + $i21;

        if i18 < 0 goto label4;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        l19 = $r2[i18];

        $b4 = l19 cmp 0L;

        if $b4 == 0 goto label3;

        $i5 = i18 << 6;

        $i6 = $i5 + 63;

        $i7 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l19);

        $i8 = $i6 - $i7;

        return $i8;

     label4:
        $i23 = (int) -1;

        return $i23;
    }

    public void or(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException
    {
        org.apache.lucene.util.OpenBitSetIterator r3;
        org.apache.lucene.util.FixedBitSet r1;
        long[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        org.apache.lucene.search.DocIdSetIterator r0;
        boolean $z0;

        r1 := @this: org.apache.lucene.util.FixedBitSet;

        r0 := @parameter0: org.apache.lucene.search.DocIdSetIterator;

        $z0 = r0 instanceof org.apache.lucene.util.OpenBitSetIterator;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int docID()>();

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        r3 = (org.apache.lucene.util.OpenBitSetIterator) r0;

        $r2 = r3.<org.apache.lucene.util.OpenBitSetIterator: long[] arr>;

        $i1 = r3.<org.apache.lucene.util.OpenBitSetIterator: int words>;

        specialinvoke r1.<org.apache.lucene.util.FixedBitSet: void or(long[],int)>($r2, $i1);

        $i2 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        virtualinvoke r3.<org.apache.lucene.util.OpenBitSetIterator: int advance(int)>($i2);

        goto label2;

     label1:
        $i3 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int nextDoc()>();

        $i4 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if $i3 >= $i4 goto label2;

        virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: void set(int)>($i3);

        goto label1;

     label2:
        return;
    }

    public void or(org.apache.lucene.util.FixedBitSet)
    {
        long[] $r2;
        int $i0;
        org.apache.lucene.util.FixedBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: org.apache.lucene.util.FixedBitSet;

        $r2 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i0 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        specialinvoke r0.<org.apache.lucene.util.FixedBitSet: void or(long[],int)>($r2, $i0);

        return;
    }

    private void or(long[], int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l2, $l3, $l4;
        long[] r1, r2;
        int i0, $i1, i5, $i7;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r2 := @parameter0: long[];

        i0 := @parameter1: int;

        r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

     label1:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        if i5 < 0 goto label2;

        $l3 = r1[i5];

        $l2 = r2[i5];

        $l4 = $l3 | $l2;

        r1[i5] = $l4;

        goto label1;

     label2:
        return;
    }

    public void and(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException
    {
        org.apache.lucene.util.FixedBitSet r1;
        long[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i12, $i14, $i16, $i18;
        org.apache.lucene.search.DocIdSetIterator r0;
        boolean $z0;
        org.apache.lucene.util.OpenBitSetIterator r3;

        r1 := @this: org.apache.lucene.util.FixedBitSet;

        r0 := @parameter0: org.apache.lucene.search.DocIdSetIterator;

        $z0 = r0 instanceof org.apache.lucene.util.OpenBitSetIterator;

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int docID()>();

        $i12 = (int) -1;

        if $i5 != $i12 goto label1;

        r3 = (org.apache.lucene.util.OpenBitSetIterator) r0;

        $r2 = r3.<org.apache.lucene.util.OpenBitSetIterator: long[] arr>;

        $i6 = r3.<org.apache.lucene.util.OpenBitSetIterator: int words>;

        specialinvoke r1.<org.apache.lucene.util.FixedBitSet: void and(long[],int)>($r2, $i6);

        $i7 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        virtualinvoke r3.<org.apache.lucene.util.OpenBitSetIterator: int advance(int)>($i7);

        goto label7;

     label1:
        $i0 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if $i0 != 0 goto label2;

        return;

     label2:
        i8 = virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: int nextSetBit(int)>(0);

     label3:
        $i14 = (int) -1;

        if i8 == $i14 goto label6;

        $i2 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int advance(int)>(i8);

        $i3 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if $i2 >= $i3 goto label6;

        virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: void clear(int,int)>(i8, $i2);

        i9 = $i2 + 1;

        $i4 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i9 >= $i4 goto label4;

        $i10 = virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: int nextSetBit(int)>(i9);

        goto label5;

     label4:
        $i16 = (int) -1;

        $i10 = $i16;

     label5:
        i8 = $i10;

        goto label3;

     label6:
        $i18 = (int) -1;

        if i8 == $i18 goto label7;

        $i1 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: void clear(int,int)>(i8, $i1);

     label7:
        return;
    }

    public void and(org.apache.lucene.util.FixedBitSet)
    {
        long[] $r2;
        int $i0;
        org.apache.lucene.util.FixedBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: org.apache.lucene.util.FixedBitSet;

        $r2 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i0 = r1.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        specialinvoke r0.<org.apache.lucene.util.FixedBitSet: void and(long[],int)>($r2, $i0);

        return;
    }

    private void and(long[], int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l4, $l5, $l6;
        long[] r1, r2;
        int i0, $i1, $i2, $i3, i7, $i9;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r2 := @parameter0: long[];

        i0 := @parameter1: int;

        r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        i7 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

     label1:
        $i9 = (int) -1;

        i7 = i7 + $i9;

        if i7 < 0 goto label2;

        $l5 = r1[i7];

        $l4 = r2[i7];

        $l6 = $l5 & $l4;

        r1[i7] = $l6;

        goto label1;

     label2:
        $i2 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        if $i2 <= i0 goto label3;

        $i3 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>(r1, i0, $i3, 0L);

     label3:
        return;
    }

    public void andNot(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException
    {
        org.apache.lucene.util.OpenBitSetIterator r3;
        org.apache.lucene.util.FixedBitSet r1;
        long[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        org.apache.lucene.search.DocIdSetIterator r0;
        boolean $z0;

        r1 := @this: org.apache.lucene.util.FixedBitSet;

        r0 := @parameter0: org.apache.lucene.search.DocIdSetIterator;

        $z0 = r0 instanceof org.apache.lucene.util.OpenBitSetIterator;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int docID()>();

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        r3 = (org.apache.lucene.util.OpenBitSetIterator) r0;

        $r2 = r3.<org.apache.lucene.util.OpenBitSetIterator: long[] arr>;

        $i1 = r3.<org.apache.lucene.util.OpenBitSetIterator: int words>;

        specialinvoke r1.<org.apache.lucene.util.FixedBitSet: void andNot(long[],int)>($r2, $i1);

        $i2 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        virtualinvoke r3.<org.apache.lucene.util.OpenBitSetIterator: int advance(int)>($i2);

        goto label2;

     label1:
        $i3 = virtualinvoke r0.<org.apache.lucene.search.DocIdSetIterator: int nextDoc()>();

        $i4 = r1.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if $i3 >= $i4 goto label2;

        virtualinvoke r1.<org.apache.lucene.util.FixedBitSet: void clear(int)>($i3);

        goto label1;

     label2:
        return;
    }

    public void andNot(org.apache.lucene.util.FixedBitSet)
    {
        long[] $r2, $r3;
        int $i0;
        org.apache.lucene.util.FixedBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: org.apache.lucene.util.FixedBitSet;

        $r3 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $r2 = r1.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i0 = lengthof $r2;

        specialinvoke r0.<org.apache.lucene.util.FixedBitSet: void andNot(long[],int)>($r3, $i0);

        return;
    }

    private void andNot(long[], int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l2, $l3, $l4, $l5;
        long[] r1, r2;
        int i0, $i1, i6, $i8;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r2 := @parameter0: long[];

        i0 := @parameter1: int;

        r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

     label1:
        $i8 = (int) -1;

        i6 = i6 + $i8;

        if i6 < 0 goto label2;

        $l4 = r1[i6];

        $l2 = r2[i6];

        $l3 = $l2 ^ -1L;

        $l5 = $l4 & $l3;

        r1[i6] = $l5;

        goto label1;

     label2:
        return;
    }

    public void flip(int, int)
    {
        long l5, l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        org.apache.lucene.util.FixedBitSet r0;
        java.lang.AssertionError $r6, $r7;
        long[] $r1, $r2, $r3, $r4, $r5;
        int i0, i1, i2, $i3, i4, $i6, $i17, $i18, i19;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i1 < 0 goto label1;

        $i18 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i1 < $i18 goto label2;

     label1:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $z1 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if i0 < 0 goto label3;

        $i17 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 <= $i17 goto label4;

     label3:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        if i0 > i1 goto label5;

        return;

     label5:
        i2 = i1 >> 6;

        $i3 = i0 - 1;

        i4 = $i3 >> 6;

        l5 = -1L << i1;

        $i6 = neg i0;

        l7 = -1L >>> $i6;

        if i2 != i4 goto label6;

        $r5 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l15 = $r5[i2];

        $l14 = l5 & l7;

        $l16 = $l15 ^ $l14;

        $r5[i2] = $l16;

        return;

     label6:
        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l8 = $r1[i2];

        $l9 = $l8 ^ l5;

        $r1[i2] = $l9;

        i19 = i2 + 1;

     label7:
        if i19 >= i4 goto label8;

        $r4 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $r3 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l12 = $r3[i19];

        $l13 = $l12 ^ -1L;

        $r4[i19] = $l13;

        i19 = i19 + 1;

        goto label7;

     label8:
        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l10 = $r2[i4];

        $l11 = $l10 ^ l7;

        $r2[i4] = $l11;

        return;
    }

    public void set(int, int)
    {
        long l5, l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15;
        org.apache.lucene.util.FixedBitSet r0;
        java.lang.AssertionError $r5, $r6;
        long[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3, i4, $i6, $i10, $i16, $i17;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i1 < 0 goto label1;

        $i17 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i1 < $i17 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $z1 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if i0 < 0 goto label3;

        $i16 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 <= $i16 goto label4;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        if i0 > i1 goto label5;

        return;

     label5:
        i2 = i1 >> 6;

        $i3 = i0 - 1;

        i4 = $i3 >> 6;

        l5 = -1L << i1;

        $i6 = neg i0;

        l7 = -1L >>> $i6;

        if i2 != i4 goto label6;

        $r4 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l14 = $r4[i2];

        $l13 = l5 & l7;

        $l15 = $l14 | $l13;

        $r4[i2] = $l15;

        return;

     label6:
        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l8 = $r1[i2];

        $l9 = $l8 | l5;

        $r1[i2] = $l9;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i10 = i2 + 1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r2, $i10, i4, -1L);

        $r3 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l11 = $r3[i4];

        $l12 = $l11 | l7;

        $r3[i4] = $l12;

        return;
    }

    public void clear(int, int)
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l6, $l7, $l9, $l10, $l11, $l12, $l13, l16, l17, l18, l19;
        java.lang.AssertionError $r5, $r6;
        long[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3, i4, $i5, $i8, $i14, $i15;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i1 < 0 goto label1;

        $i15 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i1 < $i15 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $z1 = <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if i0 < 0 goto label3;

        $i14 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        if i0 <= $i14 goto label4;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        if i0 > i1 goto label5;

        return;

     label5:
        i2 = i1 >> 6;

        $i3 = i0 - 1;

        i4 = $i3 >> 6;

        l16 = -1L << i1;

        $i5 = neg i0;

        l17 = -1L >>> $i5;

        l18 = l16 ^ -1L;

        l19 = l17 ^ -1L;

        if i2 != i4 goto label6;

        $r4 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l12 = $r4[i2];

        $l11 = l18 | l19;

        $l13 = $l12 & $l11;

        $r4[i2] = $l13;

        return;

     label6:
        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l6 = $r1[i2];

        $l7 = $l6 & l18;

        $r1[i2] = $l7;

        $r2 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $i8 = i2 + 1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r2, $i8, i4, 0L);

        $r3 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l9 = $r3[i4];

        $l10 = $l9 & l19;

        $r3[i4] = $l10;

        return;
    }

    public org.apache.lucene.util.FixedBitSet clone()
    {
        org.apache.lucene.util.FixedBitSet $r0, r1;

        r1 := @this: org.apache.lucene.util.FixedBitSet;

        $r0 = new org.apache.lucene.util.FixedBitSet;

        specialinvoke $r0.<org.apache.lucene.util.FixedBitSet: void <init>(org.apache.lucene.util.FixedBitSet)>(r1);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.util.FixedBitSet r0, r2;
        long[] $r3, $r4;
        int $i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.util.FixedBitSet;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.util.FixedBitSet) r1;

        $i0 = r0.<org.apache.lucene.util.FixedBitSet: int numBits>;

        $i1 = virtualinvoke r2.<org.apache.lucene.util.FixedBitSet: int length()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r4 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $r3 = r2.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r4, $r3);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.lucene.util.FixedBitSet r0;
        long $l0, $l1, $l4, $l5, $l6, l7, l9;
        long[] $r1;
        int $i2, $i3, i8, $i11;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        l7 = 0L;

        i8 = r0.<org.apache.lucene.util.FixedBitSet: int wordLength>;

     label1:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        if i8 < 0 goto label2;

        $r1 = r0.<org.apache.lucene.util.FixedBitSet: long[] bits>;

        $l4 = $r1[i8];

        l9 = l7 ^ $l4;

        $l6 = l9 << 1;

        $l5 = l9 >>> 63;

        l7 = $l6 | $l5;

        goto label1;

     label2:
        $l0 = l7 >> 32;

        $l1 = $l0 ^ l7;

        $i2 = (int) $l1;

        $i3 = $i2 + -1737092556;

        return $i3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.FixedBitSet r0, $r1;

        r0 := @this: org.apache.lucene.util.FixedBitSet;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.FixedBitSet: org.apache.lucene.util.FixedBitSet clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/FixedBitSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.FixedBitSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
