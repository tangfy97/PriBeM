class org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.PacketCallback
{
    final org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1;

    void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco$3)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1 r0;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run(org.xmpp.packet.Packet)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1 r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r4;
        org.xmpp.packet.Packet r0;
        org.xmpp.packet.IQ $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1;

        r0 := @parameter0: org.xmpp.packet.Packet;

        $z0 = r0 instanceof org.xmpp.packet.IQ;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Manager must provide response IQ");

        $r2 = r1.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1>;

        $r4 = $r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r3 = (org.xmpp.packet.IQ) r0;

        staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: void access$000(org.waveprotocol.wave.federation.xmpp.RemoteDisco,org.xmpp.packet.IQ)>($r4, $r3);

        return;
    }

    public void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 $r7, $r15, $r17;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r8, $r16;
        java.lang.String $r9, $r14;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r1, $r2, $r12;
        boolean $z0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r0;
        java.util.logging.Logger $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1 r6;
        java.lang.StringBuilder $r4, $r5, $r10, $r11, $r13;

        r6 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1;

        r0 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code getErrorCode()>();

        $r2 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code REMOTE_SERVER_TIMEOUT>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r17 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1>;

        virtualinvoke $r17.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: void retry()>();

        goto label2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger access$200()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote server ");

        $r7 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1>;

        $r8 = $r7.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String access$100(org.waveprotocol.wave.federation.xmpp.RemoteDisco)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed on disco items: ");

        $r12 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code getErrorCode()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void info(java.lang.String)>($r14);

        $r15 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 this$1>;

        $r16 = $r15.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: void access$000(org.waveprotocol.wave.federation.xmpp.RemoteDisco,org.xmpp.packet.IQ)>($r16, null);

     label2:
        return;
    }
}
