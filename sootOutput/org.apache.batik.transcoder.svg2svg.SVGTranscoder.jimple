public class org.apache.batik.transcoder.svg2svg.SVGTranscoder extends org.apache.batik.transcoder.AbstractTranscoder
{
    public static final org.apache.batik.transcoder.ErrorHandler DEFAULT_ERROR_HANDLER;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_NEWLINE;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_CR;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_CR_LF;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_LF;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_FORMAT;
    public static final java.lang.Boolean VALUE_FORMAT_ON;
    public static final java.lang.Boolean VALUE_FORMAT_OFF;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_TABULATION_WIDTH;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCUMENT_WIDTH;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCTYPE;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_CHANGE;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_REMOVE;
    public static final org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_KEEP_UNCHANGED;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_PUBLIC_ID;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_SYSTEM_ID;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_XML_DECLARATION;

    public void <init>()
    {
        org.apache.batik.transcoder.ErrorHandler $r1;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.SVGTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.AbstractTranscoder: void <init>()>();

        $r1 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.ErrorHandler DEFAULT_ERROR_HANDLER>;

        virtualinvoke r0.<org.apache.batik.transcoder.TranscoderSupport: void setErrorHandler(org.apache.batik.transcoder.ErrorHandler)>($r1);

        return;
    }

    public void transcode(org.apache.batik.transcoder.TranscoderInput, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.lang.Error $r5, $r10, $r12;
        org.w3c.dom.Document $r6;
        java.lang.StringBuffer $r13, $r14, $r16;
        java.lang.String $r9, $r15, $r17;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder r4;
        java.io.StringWriter $r7;
        org.apache.batik.transcoder.TranscoderOutput r2;
        java.io.IOException $r11;
        java.io.Reader $r1, r18;
        java.io.StringReader $r8;
        org.apache.batik.transcoder.TranscoderInput r0;
        java.io.Writer $r3;

        r4 := @this: org.apache.batik.transcoder.svg2svg.SVGTranscoder;

        r0 := @parameter0: org.apache.batik.transcoder.TranscoderInput;

        r2 := @parameter1: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderInput: java.io.Reader getReader()>();

        r18 = $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.transcoder.TranscoderOutput: java.io.Writer getWriter()>();

        if $r1 != null goto label6;

        $r6 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderInput: org.w3c.dom.Document getDocument()>();

        if $r6 != null goto label1;

        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>("Reader or Document expected");

        throw $r10;

     label1:
        $r7 = new java.io.StringWriter;

        specialinvoke $r7.<java.io.StringWriter: void <init>(int)>(1024);

     label2:
        staticinvoke <org.apache.batik.dom.util.DOMUtilities: void writeDocument(org.w3c.dom.Document,java.io.Writer)>($r6, $r7);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.Error;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IO:");

        $r15 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>($r17);

        throw $r12;

     label5:
        $r8 = new java.io.StringReader;

        $r9 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>();

        specialinvoke $r8.<java.io.StringReader: void <init>(java.lang.String)>($r9);

        r18 = $r8;

     label6:
        if $r3 != null goto label7;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.String)>("Writer expected");

        throw $r5;

     label7:
        virtualinvoke r4.<org.apache.batik.transcoder.svg2svg.SVGTranscoder: void prettyPrint(java.io.Reader,java.io.Writer)>(r18, $r3);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected void prettyPrint(java.io.Reader, java.io.Writer) throws org.apache.batik.transcoder.TranscoderException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r0;
        java.lang.Integer $r33, $r34;
        org.apache.batik.transcoder.TranscodingHints$Key $r2, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder r1;
        boolean $z0;
        java.io.Reader r27;
        org.apache.batik.transcoder.TranscodingHints $r3, $r7, $r10, $r13, $r16, $r19, $r22, $r25;
        java.io.Writer r28;
        org.apache.batik.transcoder.ErrorHandler $r38;
        int $i0, $i1, $i2;
        java.lang.Boolean $r36;
        java.lang.String $r29, $r30, $r31, $r35, $r40;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue r5;
        java.io.IOException $r37;
        org.apache.batik.transcoder.TranscoderException $r39;
        java.lang.Object $r4, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue $r32;

        r1 := @this: org.apache.batik.transcoder.svg2svg.SVGTranscoder;

        r27 := @parameter0: java.io.Reader;

        r28 := @parameter1: java.io.Writer;

     label01:
        $r0 = new org.apache.batik.transcoder.svg2svg.PrettyPrinter;

        specialinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void <init>()>();

        $r3 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r2 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_NEWLINE>;

        $r4 = virtualinvoke $r3.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue) $r4;

        if r5 == null goto label02;

        $r35 = virtualinvoke r5.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue: java.lang.String getValue()>();

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setNewline(java.lang.String)>($r35);

     label02:
        $r7 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r6 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORMAT>;

        $r8 = virtualinvoke $r7.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r6);

        $r36 = (java.lang.Boolean) $r8;

        if $r36 == null goto label03;

        $z0 = virtualinvoke $r36.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setFormat(boolean)>($z0);

     label03:
        $r10 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r9 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_TABULATION_WIDTH>;

        $r11 = virtualinvoke $r10.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r9);

        $r34 = (java.lang.Integer) $r11;

        if $r34 == null goto label04;

        $i2 = virtualinvoke $r34.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setTabulationWidth(int)>($i2);

     label04:
        $r13 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r12 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCUMENT_WIDTH>;

        $r14 = virtualinvoke $r13.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r12);

        $r33 = (java.lang.Integer) $r14;

        if $r33 == null goto label05;

        $i1 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setDocumentWidth(int)>($i1);

     label05:
        $r16 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r15 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCTYPE>;

        $r17 = virtualinvoke $r16.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r15);

        $r32 = (org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue) $r17;

        if $r32 == null goto label06;

        $i0 = virtualinvoke $r32.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue: int getValue()>();

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setDoctypeOption(int)>($i0);

     label06:
        $r19 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r18 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_PUBLIC_ID>;

        $r20 = virtualinvoke $r19.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r18);

        $r31 = (java.lang.String) $r20;

        if $r31 == null goto label07;

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setPublicId(java.lang.String)>($r31);

     label07:
        $r22 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r21 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_SYSTEM_ID>;

        $r23 = virtualinvoke $r22.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r21);

        $r30 = (java.lang.String) $r23;

        if $r30 == null goto label08;

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setSystemId(java.lang.String)>($r30);

     label08:
        $r25 = r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r24 = <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_XML_DECLARATION>;

        $r26 = virtualinvoke $r25.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r24);

        $r29 = (java.lang.String) $r26;

        if $r29 == null goto label09;

        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void setXMLDeclaration(java.lang.String)>($r29);

     label09:
        virtualinvoke $r0.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: void print(java.io.Reader,java.io.Writer)>(r27, r28);

        virtualinvoke r28.<java.io.Writer: void flush()>();

     label10:
        goto label12;

     label11:
        $r37 := @caughtexception;

        $r38 = virtualinvoke r1.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.ErrorHandler getErrorHandler()>();

        $r39 = new org.apache.batik.transcoder.TranscoderException;

        $r40 = virtualinvoke $r37.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r39.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>($r40);

        interfaceinvoke $r38.<org.apache.batik.transcoder.ErrorHandler: void fatalError(org.apache.batik.transcoder.TranscoderException)>($r39);

     label12:
        return;

        catch java.io.IOException from label01 to label10 with label11;
    }

    static void <clinit>()
    {
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeKey $r10;
        java.lang.Boolean $r6, $r7;
        org.apache.batik.transcoder.keys.IntegerKey $r8, $r9;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue $r2, $r3, $r4;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineKey $r1;
        org.apache.batik.transcoder.keys.StringKey $r14, $r15, $r16;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue $r11, $r12, $r13;
        org.apache.batik.transcoder.svg2svg.SVGTranscoder$1 $r0;
        org.apache.batik.transcoder.keys.BooleanKey $r5;

        $r0 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$1;

        specialinvoke $r0.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$1: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.ErrorHandler DEFAULT_ERROR_HANDLER> = $r0;

        $r1 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineKey;

        specialinvoke $r1.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_NEWLINE> = $r1;

        $r2 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue;

        specialinvoke $r2.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue: void <init>(java.lang.String)>("\r");

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_CR> = $r2;

        $r3 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue;

        specialinvoke $r3.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue: void <init>(java.lang.String)>("\r\n");

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_CR_LF> = $r3;

        $r4 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue;

        specialinvoke $r4.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue: void <init>(java.lang.String)>("\n");

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$NewlineValue VALUE_NEWLINE_LF> = $r4;

        $r5 = new org.apache.batik.transcoder.keys.BooleanKey;

        specialinvoke $r5.<org.apache.batik.transcoder.keys.BooleanKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORMAT> = $r5;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: java.lang.Boolean VALUE_FORMAT_ON> = $r6;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: java.lang.Boolean VALUE_FORMAT_OFF> = $r7;

        $r8 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r8.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_TABULATION_WIDTH> = $r8;

        $r9 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r9.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCUMENT_WIDTH> = $r9;

        $r10 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeKey;

        specialinvoke $r10.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_DOCTYPE> = $r10;

        $r11 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue;

        specialinvoke $r11.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue: void <init>(int)>(0);

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_CHANGE> = $r11;

        $r12 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue;

        specialinvoke $r12.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue: void <init>(int)>(1);

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_REMOVE> = $r12;

        $r13 = new org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue;

        specialinvoke $r13.<org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue: void <init>(int)>(2);

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.svg2svg.SVGTranscoder$DoctypeValue VALUE_DOCTYPE_KEEP_UNCHANGED> = $r13;

        $r14 = new org.apache.batik.transcoder.keys.StringKey;

        specialinvoke $r14.<org.apache.batik.transcoder.keys.StringKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_PUBLIC_ID> = $r14;

        $r15 = new org.apache.batik.transcoder.keys.StringKey;

        specialinvoke $r15.<org.apache.batik.transcoder.keys.StringKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_SYSTEM_ID> = $r15;

        $r16 = new org.apache.batik.transcoder.keys.StringKey;

        specialinvoke $r16.<org.apache.batik.transcoder.keys.StringKey: void <init>()>();

        <org.apache.batik.transcoder.svg2svg.SVGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_XML_DECLARATION> = $r16;

        return;
    }
}
