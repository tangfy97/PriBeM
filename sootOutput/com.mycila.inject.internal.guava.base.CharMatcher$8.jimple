final class com.mycila.inject.internal.guava.base.CharMatcher$8 extends com.mycila.inject.internal.guava.base.CharMatcher
{
    final char val$match;

    void <init>(char)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r0;
        char c0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        c0 := @parameter0: char;

        r0.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match> = c0;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: void <init>()>();

        return;
    }

    public boolean matches(char)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r0;
        int $i2, $i3;
        char c0, $c1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        c0 := @parameter0: char;

        $c1 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        $i2 = (int) c0;

        $i3 = (int) $c1;

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        com.mycila.inject.internal.guava.base.CharMatcher$8 r2;
        char c0, $c1;
        java.lang.String $r1, $r3;

        r2 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $c1 = r2.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>($c1, c0);

        return $r3;
    }

    public com.mycila.inject.internal.guava.base.CharMatcher and(com.mycila.inject.internal.guava.base.CharMatcher)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r1;
        char $c0;
        com.mycila.inject.internal.guava.base.CharMatcher r0, $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher;

        $c0 = r1.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>($c0);

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = <com.mycila.inject.internal.guava.base.CharMatcher$8: com.mycila.inject.internal.guava.base.CharMatcher NONE>;

     label2:
        return $r2;
    }

    public com.mycila.inject.internal.guava.base.CharMatcher or(com.mycila.inject.internal.guava.base.CharMatcher)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r1;
        char $c0;
        com.mycila.inject.internal.guava.base.CharMatcher r0, $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher;

        $c0 = r1.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>($c0);

        if $z0 == 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = specialinvoke r1.<com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher or(com.mycila.inject.internal.guava.base.CharMatcher)>(r0);

     label2:
        return $r2;
    }

    public com.mycila.inject.internal.guava.base.CharMatcher negate()
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r0;
        char $c0;
        com.mycila.inject.internal.guava.base.CharMatcher $r1;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        $c0 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher$8: com.mycila.inject.internal.guava.base.CharMatcher isNot(char)>($c0);

        return $r1;
    }

    void setBits(com.mycila.inject.internal.guava.base.CharMatcher$LookupTable)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r1;
        char $c0;
        com.mycila.inject.internal.guava.base.CharMatcher$LookupTable r0;

        r1 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher$LookupTable;

        $c0 = r1.<com.mycila.inject.internal.guava.base.CharMatcher$8: char val$match>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher$LookupTable: void set(char)>($c0);

        return;
    }

    public com.mycila.inject.internal.guava.base.CharMatcher precomputed()
    {
        com.mycila.inject.internal.guava.base.CharMatcher$8 r0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        return r0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        java.lang.Character $r2;
        com.mycila.inject.internal.guava.base.CharMatcher$8 r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$8;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: boolean apply(java.lang.Character)>($r2);

        return $z0;
    }
}
