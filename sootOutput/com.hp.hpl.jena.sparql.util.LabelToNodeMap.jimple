public class com.hp.hpl.jena.sparql.util.LabelToNodeMap extends java.lang.Object
{
    java.util.Map bNodeLabels;
    boolean generateVars;
    com.hp.hpl.jena.sparql.core.VarAlloc allocator;

    public static com.hp.hpl.jena.sparql.util.LabelToNodeMap createBNodeMap()
    {
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void <init>(boolean,com.hp.hpl.jena.sparql.core.VarAlloc)>(0, null);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.util.LabelToNodeMap createVarMap()
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r1;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        $r1 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("?");

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void <init>(boolean,com.hp.hpl.jena.sparql.core.VarAlloc)>(1, $r1);

        return $r0;
    }

    private void <init>(boolean, com.hp.hpl.jena.sparql.core.VarAlloc)
    {
        com.hp.hpl.jena.sparql.core.VarAlloc r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        z0 := @parameter0: boolean;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Map bNodeLabels> = $r1;

        r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: boolean generateVars> = 0;

        r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.core.VarAlloc allocator> = null;

        r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: boolean generateVars> = z0;

        r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.core.VarAlloc allocator> = r2;

        return;
    }

    public java.util.Set getLabels()
    {
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Map bNodeLabels>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node asNode(java.lang.String)
    {
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r4, r6;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Map bNodeLabels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.hp.hpl.jena.graph.Node) $r3;

        if r6 == null goto label1;

        return r6;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node allocNode()>();

        $r5 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Map bNodeLabels>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    public com.hp.hpl.jena.graph.Node allocNode()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        $z0 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: boolean generateVars>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node allocAnonVariable()>();

        return $r2;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        return $r1;
    }

    private com.hp.hpl.jena.graph.Node allocAnonVariable()
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r1;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;
        com.hp.hpl.jena.sparql.core.Var $r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.core.VarAlloc allocator>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        return $r2;
    }

    public void clear()
    {
        com.hp.hpl.jena.sparql.util.LabelToNodeMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.LabelToNodeMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Map bNodeLabels>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
}
