public class org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser extends org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl implements org.waveprotocol.wave.client.editor.content.ContentDocument$PermanentMutationHandler
{
    private final org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler lineHandler;
    public static boolean USE_STRONG_CHECK;
    boolean nested;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl: void <init>()>();

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler lineHandler> = $r1;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 0;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler getLineHandler()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler lineHandler>;

        return $r1;
    }

    public void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void handleNewChild(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r2, r0);

     label1:
        return;
    }

    public void handleNewChild(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r3, $r5, $r7, $r9, r12, $r16, $r19;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.util.LocalDocument $r6, $r15, $r17, $r20;
        java.lang.Throwable $r24;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;
        java.lang.AssertionError $r21, $r23;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r4, $r13, $r14, $r18, $r22, $r26, $r27, $r28;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r8, r25;
        java.lang.Object $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 1;

     label02:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r4 == null goto label11;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r4);

        if $z1 == 0 goto label11;

        $r8 = new org.waveprotocol.wave.client.editor.content.paragraph.Line;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.content.paragraph.Line: void <init>(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.ContentElement)>($r2, $r4);

        $r9 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r3);

        r12 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r11;

        if r12 != null goto label03;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void insertAsFirstLine(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r1, $r8);

        goto label09;

     label03:
        $r13 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r13 != r1 goto label06;

        $z3 = <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        if $r9 == null goto label04;

        $z4 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>($r9);

        if $z4 != 0 goto label05;

     label04:
        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label05:
        $r22 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        r25 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>($r22);

        goto label07;

     label06:
        $r14 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        r25 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>($r14);

     label07:
        $z2 = <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean $assertionsDisabled>;

        if $z2 != 0 goto label08;

        if r25 != null goto label08;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label08:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void insertAfterLine(org.waveprotocol.wave.client.editor.content.paragraph.Line,org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r25, $r8);

     label09:
        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        $r26 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r27 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r27 == r1 goto label10;

        $r15 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r16 = virtualinvoke $r26.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        interfaceinvoke $r15.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r26, $r16, null, null);

        $r17 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r18 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r19 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        interfaceinvoke $r17.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, $r26, null, $r19);

        $r20 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        interfaceinvoke $r20.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, $r4, null, $r26);

     label10:
        goto label14;

     label11:
        $r5 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        if $r5 != null goto label12;

        $r28 = null;

        goto label13;

     label12:
        $r28 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: org.waveprotocol.wave.client.editor.content.ContentElement asParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>($r5);

     label13:
        if $r28 == null goto label14;

        $r6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r7 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r28, r3, $r7, null);

     label14:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 0;

        goto label17;

     label15:
        $r24 := @caughtexception;

     label16:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 0;

        throw $r24;

     label17:
        return;

        catch java.lang.Throwable from label02 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void handleRemovedChild(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, r2);

        return;
    }

    public void handleRemovedChild(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        java.lang.Throwable $r18;
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r7, $r14;
        org.waveprotocol.wave.common.logging.Logger $r17;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;
        java.lang.AssertionError $r15;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r2, $r4, $r6, $r10, $r12, $r13;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r5, $r8;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.util.LocalDocument $r9, $r11;
        org.waveprotocol.wave.common.logging.LoggerBundle $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isContentAttached()>();

        if $z1 == 0 goto label02;

        $r16 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r17.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Node was moved and not removed?");

        return;

     label02:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 1;

     label03:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r4 == null goto label07;

        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r4);

        if $z2 == 0 goto label07;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r4);

        $z3 = <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        if $r5 != null goto label04;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label04:
        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r7 == null goto label06;

        $r8 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

        if $r8 == null goto label05;

        $r11 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r12 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r13 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        interfaceinvoke $r11.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r12, $r14, null, null);

        goto label06;

     label05:
        $r9 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r10 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        interfaceinvoke $r9.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentUnwrap(java.lang.Object)>($r10);

     label06:
        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Line: void remove()>();

     label07:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 0;

        goto label10;

     label08:
        $r18 := @caughtexception;

     label09:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean nested> = 0;

        throw $r18;

     label10:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static org.waveprotocol.wave.client.editor.content.ContentElement asParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("l:p");

        if $z0 == 0 goto label1;

        $r3 = $r1;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    void insertAsFirstLine(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1, r2;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLineOfContainer(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r1 == null goto label1;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: void insertBefore(org.waveprotocol.wave.client.editor.content.paragraph.Line)>($r1);

     label1:
        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: void setFirstLineOfContainer(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0, r2);

        return;
    }

    void insertAfterLine(org.waveprotocol.wave.client.editor.content.paragraph.Line, org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, r1;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r2;

        r2 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: void insertAfter(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r1);

        return;
    }

    private static void errorLogAndThrow(java.lang.String)
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        java.lang.String r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>(r2);

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r3;

     label1:
        return;
    }

    public static boolean containerIsHealthyStrong(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r5, $r9, r36;
        boolean $z0, $z1, $z2;
        com.google.gwt.dom.client.Element $r11, $r24, $r28;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r21, $r31, $r32, $r33;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r4, $r6, $r7, $r8, $r10, $r12, $r18, $r23, $r27, $r30;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r2, $r3, $r13, $r14, $r15, $r26, $r29, r35;
        java.lang.String $r22, $r34;
        com.google.gwt.dom.client.Node $r25;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLineOfContainer(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        r35 = $r2;

        if $r2 != null goto label02;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Empty container - must have at least one child");

        if $r1 == null goto label01;

        return 0;

     label01:
        return 1;

     label02:
        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

        if $r3 == null goto label03;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("First line must have no previous sibling");

        return 0;

     label03:
        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentNode)>($r1);

        if $z0 != 0 goto label04;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("First child not a line element");

        return 0;

     label04:
        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

     label05:
        $r4 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        $r6 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        if $r5 == $r6 goto label06;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Junk between line token and its paragraph");

        return 0;

     label06:
        $r7 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        r36 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label07:
        if r36 == null goto label09;

        $r30 = virtualinvoke r36.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r30 == null goto label08;

        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r30);

        if $z2 == 0 goto label08;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line element stuck inside rendering paragraph: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>($r34);

        return 0;

     label08:
        r36 = virtualinvoke r36.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label07;

     label09:
        $r8 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        if $r9 != null goto label11;

        $r29 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        if $r29 == null goto label10;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Supposed to have another line, but no more nodes");

        return 0;

     label10:
        return 1;

     label11:
        $r10 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r11 == null goto label12;

        $r23 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r24 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r25 = virtualinvoke $r24.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getNextSibling()>();

        $r26 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        $r27 = virtualinvoke $r26.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r25 == $r28 goto label12;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Junk in html between paragraph nodelets");

        return 0;

     label12:
        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentNode)>($r9);

        if $z1 != 0 goto label13;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Junk after rendering paragraph ");

        $r18 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", junk: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>($r22);

        return 0;

     label13:
        $r12 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r12);

        $r14 = virtualinvoke r35.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        if $r14 == $r13 goto label14;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Next line doesn\'t correspond to next line element");

        return 0;

     label14:
        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

        if $r15 == r35 goto label15;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void errorLogAndThrow(java.lang.String)>("Line linked list corruption: nextLine.previous != line");

        return 0;

     label15:
        r35 = $r13;

        goto label05;
    }

    static com.google.gwt.dom.client.Node endingNodelet(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper $r1;
        com.google.gwt.dom.client.Node $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper INSTANCE>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper: com.google.gwt.dom.client.Node getEndingNodelet(com.google.gwt.dom.client.Element)>(r0);

        return $r2;
    }

    public volatile void onChildRemoved(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r4, $r3);

        return;
    }

    public volatile void onChildAdded(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser r0;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r4, $r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/LineContainerParagraphiser;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean $assertionsDisabled> = $z1;

        <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean USE_STRONG_CHECK> = 0;

        return;
    }
}
