class nu.xom.jaxen.expr.NodeComparator extends java.lang.Object implements java.util.Comparator
{
    private nu.xom.jaxen.Navigator navigator;

    void <init>(nu.xom.jaxen.Navigator)
    {
        nu.xom.jaxen.expr.NodeComparator r0;
        nu.xom.jaxen.Navigator r1;

        r0 := @this: nu.xom.jaxen.expr.NodeComparator;

        r1 := @parameter0: nu.xom.jaxen.Navigator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator> = r1;

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        nu.xom.jaxen.expr.NodeComparator r0;
        int $i0, $i1, $i2, i3, i4, $i6, $i8, $i10, $i12;
        nu.xom.jaxen.Navigator $r1, $r4, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17;
        nu.xom.jaxen.UnsupportedAxisException $r18, $r19;
        java.lang.Object r2, r3, $r5, $r7, $r11, $r13, r20, r21;

        r0 := @this: nu.xom.jaxen.expr.NodeComparator;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        if $r1 != null goto label01;

        return 0;

     label01:
        $z0 = specialinvoke r0.<nu.xom.jaxen.expr.NodeComparator: boolean isNonChild(java.lang.Object)>(r2);

        if $z0 == 0 goto label09;

        $z1 = specialinvoke r0.<nu.xom.jaxen.expr.NodeComparator: boolean isNonChild(java.lang.Object)>(r3);

        if $z1 == 0 goto label09;

     label02:
        $r10 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r11 = interfaceinvoke $r10.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r2);

        $r12 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r13 = interfaceinvoke $r12.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r3);

        if $r11 != $r13 goto label06;

        $r14 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z2 = interfaceinvoke $r14.<nu.xom.jaxen.Navigator: boolean isNamespace(java.lang.Object)>(r2);

        if $z2 == 0 goto label04;

        $r17 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z5 = interfaceinvoke $r17.<nu.xom.jaxen.Navigator: boolean isAttribute(java.lang.Object)>(r3);

        if $z5 == 0 goto label04;

     label03:
        $i6 = (int) -1;

        return $i6;

     label04:
        $r15 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z3 = interfaceinvoke $r15.<nu.xom.jaxen.Navigator: boolean isNamespace(java.lang.Object)>(r3);

        if $z3 == 0 goto label06;

        $r16 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z4 = interfaceinvoke $r16.<nu.xom.jaxen.Navigator: boolean isAttribute(java.lang.Object)>(r2);

        if $z4 == 0 goto label06;

     label05:
        return 1;

     label06:
        $i2 = virtualinvoke r0.<nu.xom.jaxen.expr.NodeComparator: int compare(java.lang.Object,java.lang.Object)>($r11, $r13);

     label07:
        return $i2;

     label08:
        $r19 := @caughtexception;

        return 0;

     label09:
        i3 = specialinvoke r0.<nu.xom.jaxen.expr.NodeComparator: int getDepth(java.lang.Object)>(r2);

        $i0 = specialinvoke r0.<nu.xom.jaxen.expr.NodeComparator: int getDepth(java.lang.Object)>(r3);

        i4 = $i0;

        r20 = r2;

        r21 = r3;

     label10:
        if i3 <= $i0 goto label11;

        $r9 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        r20 = interfaceinvoke $r9.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r20);

        $i8 = (int) -1;

        i3 = i3 + $i8;

        goto label10;

     label11:
        if r20 != r3 goto label13;

     label12:
        return 1;

     label13:
        if i4 <= i3 goto label14;

        $r8 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        r21 = interfaceinvoke $r8.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r21);

        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label13;

     label14:
        if r21 != r2 goto label16;

     label15:
        $i12 = (int) -1;

        return $i12;

     label16:
        $r4 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r5 = interfaceinvoke $r4.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r20);

        $r6 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r7 = interfaceinvoke $r6.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r21);

        if $r5 != $r7 goto label18;

        $i1 = specialinvoke r0.<nu.xom.jaxen.expr.NodeComparator: int compareSiblings(java.lang.Object,java.lang.Object)>(r20, r21);

     label17:
        return $i1;

     label18:
        r20 = $r5;

        r21 = $r7;

        goto label16;

     label19:
        $r18 := @caughtexception;

        return 0;

        catch nu.xom.jaxen.UnsupportedAxisException from label02 to label03 with label08;
        catch nu.xom.jaxen.UnsupportedAxisException from label04 to label05 with label08;
        catch nu.xom.jaxen.UnsupportedAxisException from label06 to label07 with label08;
        catch nu.xom.jaxen.UnsupportedAxisException from label09 to label12 with label19;
        catch nu.xom.jaxen.UnsupportedAxisException from label13 to label15 with label19;
        catch nu.xom.jaxen.UnsupportedAxisException from label16 to label17 with label19;
        catch nu.xom.jaxen.UnsupportedAxisException from label18 to label19 with label19;
    }

    private boolean isNonChild(java.lang.Object)
    {
        nu.xom.jaxen.expr.NodeComparator r0;
        java.lang.Object r1;
        nu.xom.jaxen.Navigator $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: nu.xom.jaxen.expr.NodeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z0 = interfaceinvoke $r2.<nu.xom.jaxen.Navigator: boolean isAttribute(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $z1 = interfaceinvoke $r3.<nu.xom.jaxen.Navigator: boolean isNamespace(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private int compareSiblings(java.lang.Object, java.lang.Object) throws nu.xom.jaxen.UnsupportedAxisException
    {
        java.util.Iterator $r3;
        nu.xom.jaxen.expr.NodeComparator r0;
        int $i1;
        java.lang.Object r1, $r4, r5;
        nu.xom.jaxen.Navigator $r2;
        boolean $z0, $z1;

        r0 := @this: nu.xom.jaxen.expr.NodeComparator;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r3 = interfaceinvoke $r2.<nu.xom.jaxen.Navigator: java.util.Iterator getFollowingSiblingAxisIterator(java.lang.Object)>(r1);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private int getDepth(java.lang.Object) throws nu.xom.jaxen.UnsupportedAxisException
    {
        nu.xom.jaxen.expr.NodeComparator r1;
        int i0;
        java.lang.Object r0, $r3, r4;
        nu.xom.jaxen.Navigator $r2;

        r1 := @this: nu.xom.jaxen.expr.NodeComparator;

        r0 := @parameter0: java.lang.Object;

        i0 = 0;

        r4 = r0;

     label1:
        $r2 = r1.<nu.xom.jaxen.expr.NodeComparator: nu.xom.jaxen.Navigator navigator>;

        $r3 = interfaceinvoke $r2.<nu.xom.jaxen.Navigator: java.lang.Object getParentNode(java.lang.Object)>(r4);

        r4 = $r3;

        if $r3 == null goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }
}
