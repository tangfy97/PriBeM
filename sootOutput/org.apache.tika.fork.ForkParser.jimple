public class org.apache.tika.fork.ForkParser extends org.apache.tika.parser.AbstractParser
{
    private static final long serialVersionUID;
    private final java.lang.ClassLoader loader;
    private final org.apache.tika.parser.Parser parser;
    private java.lang.String java;
    private int poolSize;
    private int currentlyInUse;
    private final java.util.Queue pool;

    public void <init>(java.lang.ClassLoader, org.apache.tika.parser.Parser)
    {
        org.apache.tika.parser.Parser r2;
        java.lang.ClassLoader r3;
        java.util.LinkedList $r1;
        java.lang.IllegalArgumentException $r4;
        org.apache.tika.fork.ForkParser r0;
        boolean $z0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        r3 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.apache.tika.parser.Parser;

        specialinvoke r0.<org.apache.tika.parser.AbstractParser: void <init>()>();

        r0.<org.apache.tika.fork.ForkParser: java.lang.String java> = "java -Xmx32m";

        r0.<org.apache.tika.fork.ForkParser: int poolSize> = 5;

        r0.<org.apache.tika.fork.ForkParser: int currentlyInUse> = 0;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool> = $r1;

        $z0 = r2 instanceof org.apache.tika.fork.ForkParser;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The underlying parser of a ForkParser should not be a ForkParser, but a specific implementation.");

        throw $r4;

     label1:
        r0.<org.apache.tika.fork.ForkParser: java.lang.ClassLoader loader> = r3;

        r0.<org.apache.tika.fork.ForkParser: org.apache.tika.parser.Parser parser> = r2;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.apache.tika.parser.AutoDetectParser $r2;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new org.apache.tika.parser.AutoDetectParser;

        specialinvoke $r2.<org.apache.tika.parser.AutoDetectParser: void <init>()>();

        specialinvoke r0.<org.apache.tika.fork.ForkParser: void <init>(java.lang.ClassLoader,org.apache.tika.parser.Parser)>(r1, $r2);

        return;
    }

    public void <init>()
    {
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        $r1 = class "Lorg/apache/tika/fork/ForkParser;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke r0.<org.apache.tika.fork.ForkParser: void <init>(java.lang.ClassLoader)>($r2);

        return;
    }

    public synchronized int getPoolSize()
    {
        int $i0;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        $i0 = r0.<org.apache.tika.fork.ForkParser: int poolSize>;

        return $i0;
    }

    public synchronized void setPoolSize(int)
    {
        int i0;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        i0 := @parameter0: int;

        r0.<org.apache.tika.fork.ForkParser: int poolSize> = i0;

        return;
    }

    public java.lang.String getJavaCommand()
    {
        java.lang.String $r1;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        $r1 = r0.<org.apache.tika.fork.ForkParser: java.lang.String java>;

        return $r1;
    }

    public void setJavaCommand(java.lang.String)
    {
        java.lang.String r1;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.tika.fork.ForkParser: java.lang.String java> = r1;

        return;
    }

    public java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)
    {
        org.apache.tika.parser.Parser $r2;
        org.apache.tika.parser.ParseContext r1;
        java.util.Set $r3;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        r1 := @parameter0: org.apache.tika.parser.ParseContext;

        $r2 = r0.<org.apache.tika.fork.ForkParser: org.apache.tika.parser.Parser parser>;

        $r3 = interfaceinvoke $r2.<org.apache.tika.parser.Parser: java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)>(r1);

        return $r3;
    }

    public void parse(java.io.InputStream, org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, org.apache.tika.parser.ParseContext) throws java.io.IOException, org.xml.sax.SAXException, org.apache.tika.exception.TikaException
    {
        java.lang.Throwable $r10, $r16;
        java.lang.Object[] $r8;
        org.apache.tika.fork.ForkClient $r2;
        java.lang.NullPointerException $r15;
        org.apache.tika.metadata.Metadata r7;
        org.apache.tika.exception.TikaException $r11, $r12, $r18, $r19;
        org.xml.sax.ContentHandler r5;
        boolean $z0, $z1, $z2, z3;
        java.io.IOException $r14, $r17;
        org.xml.sax.ContentHandler[] $r4;
        org.apache.tika.sax.TeeContentHandler $r3;
        org.apache.tika.parser.ParseContext r9;
        org.xml.sax.SAXException $r13;
        org.apache.tika.fork.MetadataContentHandler $r6;
        org.apache.tika.fork.ForkParser r1;
        java.io.InputStream r0;

        r1 := @this: org.apache.tika.fork.ForkParser;

        r0 := @parameter0: java.io.InputStream;

        r5 := @parameter1: org.xml.sax.ContentHandler;

        r7 := @parameter2: org.apache.tika.metadata.Metadata;

        r9 := @parameter3: org.apache.tika.parser.ParseContext;

        if r0 != null goto label01;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("null stream");

        throw $r15;

     label01:
        z3 = 0;

        $r2 = specialinvoke r1.<org.apache.tika.fork.ForkParser: org.apache.tika.fork.ForkClient acquireClient()>();

     label02:
        $r3 = new org.apache.tika.sax.TeeContentHandler;

        $r4 = newarray (org.xml.sax.ContentHandler)[2];

        $r4[0] = r5;

        $r6 = new org.apache.tika.fork.MetadataContentHandler;

        specialinvoke $r6.<org.apache.tika.fork.MetadataContentHandler: void <init>(org.apache.tika.metadata.Metadata)>(r7);

        $r4[1] = $r6;

        specialinvoke $r3.<org.apache.tika.sax.TeeContentHandler: void <init>(org.xml.sax.ContentHandler[])>($r4);

        $r8 = newarray (java.lang.Object)[4];

        $r8[0] = r0;

        $r8[1] = $r3;

        $r8[2] = r7;

        $r8[3] = r9;

        $r10 = virtualinvoke $r2.<org.apache.tika.fork.ForkClient: java.lang.Throwable call(java.lang.String,java.lang.Object[])>("parse", $r8);

     label03:
        specialinvoke r1.<org.apache.tika.fork.ForkParser: void releaseClient(org.apache.tika.fork.ForkClient,boolean)>($r2, 1);

        goto label08;

     label04:
        $r19 := @caughtexception;

        z3 = 1;

        throw $r19;

     label05:
        $r17 := @caughtexception;

        $r18 = new org.apache.tika.exception.TikaException;

        specialinvoke $r18.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to communicate with a forked parser process. The process has most likely crashed due to some error like running out of memory. A new process will be started for the next parsing request.", $r17);

        throw $r18;

     label06:
        $r16 := @caughtexception;

     label07:
        specialinvoke r1.<org.apache.tika.fork.ForkParser: void releaseClient(org.apache.tika.fork.ForkClient,boolean)>($r2, z3);

        throw $r16;

     label08:
        $z0 = $r10 instanceof java.io.IOException;

        if $z0 == 0 goto label09;

        $r14 = (java.io.IOException) $r10;

        throw $r14;

     label09:
        $z1 = $r10 instanceof org.xml.sax.SAXException;

        if $z1 == 0 goto label10;

        $r13 = (org.xml.sax.SAXException) $r10;

        throw $r13;

     label10:
        $z2 = $r10 instanceof org.apache.tika.exception.TikaException;

        if $z2 == 0 goto label11;

        $r12 = (org.apache.tika.exception.TikaException) $r10;

        throw $r12;

     label11:
        if $r10 == null goto label12;

        $r11 = new org.apache.tika.exception.TikaException;

        specialinvoke $r11.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error in forked server process", $r10);

        throw $r11;

     label12:
        return;

        catch org.apache.tika.exception.TikaException from label02 to label03 with label04;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label07 with label06;
    }

    public synchronized void close()
    {
        java.util.Iterator $r2;
        org.apache.tika.fork.ForkClient r5;
        java.lang.Object $r4;
        java.util.Queue $r1, $r3;
        org.apache.tika.fork.ForkParser r0;
        boolean $z0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        $r1 = r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.tika.fork.ForkClient) $r4;

        virtualinvoke r5.<org.apache.tika.fork.ForkClient: void close()>();

        goto label1;

     label2:
        $r3 = r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool>;

        interfaceinvoke $r3.<java.util.Queue: void clear()>();

        r0.<org.apache.tika.fork.ForkParser: int poolSize> = 0;

        return;
    }

    private synchronized org.apache.tika.fork.ForkClient acquireClient() throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.Parser $r6;
        org.apache.tika.fork.ForkClient $r3, $r4, r10;
        org.apache.tika.exception.TikaException $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5;
        boolean $z0;
        java.lang.InterruptedException $r8;
        java.lang.Object $r2;
        java.util.Queue $r1;
        java.lang.ClassLoader $r7;
        org.apache.tika.fork.ForkParser r0;

        r0 := @this: org.apache.tika.fork.ForkParser;

     label1:
        $r1 = r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        $r3 = (org.apache.tika.fork.ForkClient) $r2;

        r10 = $r3;

        if $r3 != null goto label2;

        $i5 = r0.<org.apache.tika.fork.ForkParser: int currentlyInUse>;

        $i4 = r0.<org.apache.tika.fork.ForkParser: int poolSize>;

        if $i5 >= $i4 goto label2;

        $r4 = new org.apache.tika.fork.ForkClient;

        $r7 = r0.<org.apache.tika.fork.ForkParser: java.lang.ClassLoader loader>;

        $r6 = r0.<org.apache.tika.fork.ForkParser: org.apache.tika.parser.Parser parser>;

        $r5 = r0.<org.apache.tika.fork.ForkParser: java.lang.String java>;

        specialinvoke $r4.<org.apache.tika.fork.ForkClient: void <init>(java.lang.ClassLoader,java.lang.Object,java.lang.String)>($r7, $r6, $r5);

        r10 = $r4;

     label2:
        if r10 == null goto label3;

        $z0 = virtualinvoke r10.<org.apache.tika.fork.ForkClient: boolean ping()>();

        if $z0 != 0 goto label3;

        virtualinvoke r10.<org.apache.tika.fork.ForkClient: void close()>();

        r10 = null;

     label3:
        if r10 == null goto label4;

        $i2 = r0.<org.apache.tika.fork.ForkParser: int currentlyInUse>;

        $i3 = $i2 + 1;

        r0.<org.apache.tika.fork.ForkParser: int currentlyInUse> = $i3;

        return r10;

     label4:
        $i1 = r0.<org.apache.tika.fork.ForkParser: int currentlyInUse>;

        $i0 = r0.<org.apache.tika.fork.ForkParser: int poolSize>;

        if $i1 < $i0 goto label8;

     label5:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = new org.apache.tika.exception.TikaException;

        specialinvoke $r9.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while waiting for a fork parser", $r8);

        throw $r9;

     label8:
        goto label1;

        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    private synchronized void releaseClient(org.apache.tika.fork.ForkClient, boolean)
    {
        org.apache.tika.fork.ForkClient r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Queue $r1, $r3;
        org.apache.tika.fork.ForkParser r0;
        boolean z0;

        r0 := @this: org.apache.tika.fork.ForkParser;

        r2 := @parameter0: org.apache.tika.fork.ForkClient;

        z0 := @parameter1: boolean;

        $i0 = r0.<org.apache.tika.fork.ForkParser: int currentlyInUse>;

        $i1 = $i0 - 1;

        r0.<org.apache.tika.fork.ForkParser: int currentlyInUse> = $i1;

        $i2 = r0.<org.apache.tika.fork.ForkParser: int currentlyInUse>;

        $r1 = r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool>;

        $i3 = interfaceinvoke $r1.<java.util.Queue: int size()>();

        $i5 = $i2 + $i3;

        $i4 = r0.<org.apache.tika.fork.ForkParser: int poolSize>;

        if $i5 >= $i4 goto label1;

        if z0 == 0 goto label1;

        $r3 = r0.<org.apache.tika.fork.ForkParser: java.util.Queue pool>;

        interfaceinvoke $r3.<java.util.Queue: boolean offer(java.lang.Object)>(r2);

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label2;

     label1:
        virtualinvoke r2.<org.apache.tika.fork.ForkClient: void close()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.fork.ForkParser: long serialVersionUID> = -4962742892274663950L;

        return;
    }
}
