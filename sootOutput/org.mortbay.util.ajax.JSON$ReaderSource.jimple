public class org.mortbay.util.ajax.JSON$ReaderSource extends java.lang.Object implements org.mortbay.util.ajax.JSON$Source
{
    private java.io.Reader _reader;
    private int _next;
    private char[] scratch;

    public void <init>(java.io.Reader)
    {
        int $i1;
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        java.io.Reader r1;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next> = $i1;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: java.io.Reader _reader> = r1;

        return;
    }

    public void setReader(java.io.Reader)
    {
        int $i1;
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        java.io.Reader r1;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        r1 := @parameter0: java.io.Reader;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: java.io.Reader _reader> = r1;

        $i1 = (int) -1;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next> = $i1;

        return;
    }

    public boolean hasNext()
    {
        int $i0;
        org.mortbay.util.ajax.JSON$ReaderSource r0;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        specialinvoke r0.<org.mortbay.util.ajax.JSON$ReaderSource: void getNext()>();

        $i0 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next>;

        if $i0 >= 0 goto label1;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: char[] scratch> = null;

        return 0;

     label1:
        return 1;
    }

    public char next()
    {
        int $i0, $i3;
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        char c1;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        specialinvoke r0.<org.mortbay.util.ajax.JSON$ReaderSource: void getNext()>();

        $i0 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next>;

        c1 = (char) $i0;

        $i3 = (int) -1;

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next> = $i3;

        return c1;
    }

    public char peek()
    {
        int $i0;
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        char $c1;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        specialinvoke r0.<org.mortbay.util.ajax.JSON$ReaderSource: void getNext()>();

        $i0 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next>;

        $c1 = (char) $i0;

        return $c1;
    }

    private void getNext()
    {
        int $i0, $i1;
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        java.io.IOException $r2;
        java.io.Reader $r1;
        java.lang.RuntimeException $r3;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        $i0 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next>;

        if $i0 >= 0 goto label4;

     label1:
        $r1 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: java.io.Reader _reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: int _next> = $i1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public char[] scratchBuffer()
    {
        org.mortbay.util.ajax.JSON$ReaderSource r0;
        char[] $r1, $r2, $r3;

        r0 := @this: org.mortbay.util.ajax.JSON$ReaderSource;

        $r1 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: char[] scratch>;

        if $r1 != null goto label1;

        $r3 = newarray (char)[1024];

        r0.<org.mortbay.util.ajax.JSON$ReaderSource: char[] scratch> = $r3;

     label1:
        $r2 = r0.<org.mortbay.util.ajax.JSON$ReaderSource: char[] scratch>;

        return $r2;
    }
}
