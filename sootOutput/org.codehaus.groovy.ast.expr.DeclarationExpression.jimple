public class org.codehaus.groovy.ast.expr.DeclarationExpression extends org.codehaus.groovy.ast.expr.BinaryExpression
{

    public void <init>(org.codehaus.groovy.ast.expr.VariableExpression, org.codehaus.groovy.syntax.Token, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.expr.Expression r3;
        org.codehaus.groovy.syntax.Token r2;
        org.codehaus.groovy.ast.expr.DeclarationExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.DeclarationExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        r2 := @parameter1: org.codehaus.groovy.syntax.Token;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>(r1, r2, r3);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.expr.DeclarationExpression r1;

        r1 := @this: org.codehaus.groovy.ast.expr.DeclarationExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.VariableExpression getVariableExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.VariableExpression $r2;
        org.codehaus.groovy.ast.expr.DeclarationExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r2 = (org.codehaus.groovy.ast.expr.VariableExpression) $r1;

        return $r2;
    }

    public void setLeftExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.expr.VariableExpression $r2;
        org.codehaus.groovy.ast.expr.DeclarationExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.DeclarationExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $r2 = (org.codehaus.groovy.ast.expr.VariableExpression) r1;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: void setLeftExpression(org.codehaus.groovy.ast.expr.Expression)>($r2);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r5;
        org.codehaus.groovy.syntax.Token $r6;
        org.codehaus.groovy.ast.expr.DeclarationExpression $r0, r2;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r7, $r8;

        r2 := @this: org.codehaus.groovy.ast.expr.DeclarationExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = (org.codehaus.groovy.ast.expr.VariableExpression) $r4;

        $r6 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $r7 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r8 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r7);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: void <init>(org.codehaus.groovy.ast.expr.VariableExpression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r5, $r6, $r8);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }
}
