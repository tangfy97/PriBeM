public abstract class org.springframework.remoting.rmi.RemoteInvocationSerializingExporter extends org.springframework.remoting.support.RemoteInvocationBasedExporter implements org.springframework.beans.factory.InitializingBean
{
    public static final java.lang.String CONTENT_TYPE_SERIALIZED_OBJECT;
    private java.lang.String contentType;
    private boolean acceptProxyClasses;
    private java.lang.Object proxy;

    public void <init>()
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: void <init>()>();

        r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.String contentType> = "application/x-java-serialized-object";

        r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: boolean acceptProxyClasses> = 1;

        return;
    }

    public void setContentType(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r1;

        r1 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'contentType\' must not be null");

        r1.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.String contentType> = r0;

        return;
    }

    public java.lang.String getContentType()
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        $r1 = r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.String contentType>;

        return $r1;
    }

    public void setAcceptProxyClasses(boolean)
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: boolean acceptProxyClasses> = z0;

        return;
    }

    public boolean isAcceptProxyClasses()
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        $z0 = r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: boolean acceptProxyClasses>;

        return $z0;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        virtualinvoke r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: void prepare()>();

        return;
    }

    public void prepare()
    {
        java.lang.Object $r1;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.Object getProxyForService()>();

        r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.Object proxy> = $r1;

        return;
    }

    protected final java.lang.Object getProxy()
    {
        java.lang.StringBuilder $r1, $r6;
        java.lang.Object $r2, $r8;
        java.lang.Class $r3;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r0;
        java.lang.String $r4, $r5, $r7;

        r0 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        $r2 = r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.Object proxy>;

        $r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r3);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been initialized");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r2, $r7);

        $r8 = r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.Object proxy>;

        return $r8;
    }

    protected java.io.ObjectInputStream createObjectInputStream(java.io.InputStream) throws java.io.IOException
    {
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r2;
        java.lang.ClassLoader $r3;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream $r0;
        java.io.InputStream r1;
        boolean $z0;

        r2 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        $r3 = virtualinvoke r2.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.ClassLoader getBeanClassLoader()>();

        $z0 = virtualinvoke r2.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: boolean isAcceptProxyClasses()>();

        specialinvoke $r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,boolean)>(r1, $r3, $z0);

        return $r0;
    }

    protected org.springframework.remoting.support.RemoteInvocation doReadRemoteInvocation(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.springframework.remoting.support.RemoteInvocation $r2;
        java.rmi.RemoteException $r3;
        java.lang.Object $r1;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;
        java.lang.Class $r5;
        java.lang.String $r6, $r10;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r11;
        boolean $z0;

        r11 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        r0 := @parameter0: java.io.ObjectInputStream;

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $z0 = $r1 instanceof org.springframework.remoting.support.RemoteInvocation;

        if $z0 != 0 goto label1;

        $r3 = new java.rmi.RemoteException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Deserialized object needs to be assignable to type [");

        $r5 = class "Lorg/springframework/remoting/support/RemoteInvocation;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.rmi.RemoteException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        $r2 = (org.springframework.remoting.support.RemoteInvocation) $r1;

        return $r2;
    }

    protected java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.ObjectOutputStream $r0;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r2;

        r2 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.ObjectOutputStream;

        specialinvoke $r0.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    protected void doWriteRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.springframework.remoting.rmi.RemoteInvocationSerializingExporter r2;
        org.springframework.remoting.support.RemoteInvocationResult r1;

        r2 := @this: org.springframework.remoting.rmi.RemoteInvocationSerializingExporter;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocationResult;

        r0 := @parameter1: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: java.lang.String CONTENT_TYPE_SERIALIZED_OBJECT> = "application/x-java-serialized-object";

        return;
    }
}
