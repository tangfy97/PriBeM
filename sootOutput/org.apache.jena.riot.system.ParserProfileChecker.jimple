public class org.apache.jena.riot.system.ParserProfileChecker extends org.apache.jena.riot.system.ParserProfileBase
{
    private boolean checkLiterals;

    public void <init>(org.apache.jena.riot.system.Prologue, org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        org.apache.jena.riot.system.ErrorHandler r2;
        org.apache.jena.riot.system.Prologue r1;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: org.apache.jena.riot.system.Prologue;

        r2 := @parameter1: org.apache.jena.riot.system.ErrorHandler;

        specialinvoke r0.<org.apache.jena.riot.system.ParserProfileBase: void <init>(org.apache.jena.riot.system.Prologue,org.apache.jena.riot.system.ErrorHandler)>(r1, r2);

        r0.<org.apache.jena.riot.system.ParserProfileChecker: boolean checkLiterals> = 1;

        return;
    }

    public void <init>(org.apache.jena.riot.system.Prologue, org.apache.jena.riot.system.ErrorHandler, org.apache.jena.riot.lang.LabelToNode)
    {
        org.apache.jena.riot.lang.LabelToNode r3;
        org.apache.jena.riot.system.ParserProfileChecker r0;
        org.apache.jena.riot.system.ErrorHandler r2;
        org.apache.jena.riot.system.Prologue r1;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: org.apache.jena.riot.system.Prologue;

        r2 := @parameter1: org.apache.jena.riot.system.ErrorHandler;

        r3 := @parameter2: org.apache.jena.riot.lang.LabelToNode;

        specialinvoke r0.<org.apache.jena.riot.system.ParserProfileBase: void <init>(org.apache.jena.riot.system.Prologue,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.lang.LabelToNode)>(r1, r2, r3);

        r0.<org.apache.jena.riot.system.ParserProfileChecker: boolean checkLiterals> = 1;

        return;
    }

    public java.lang.String resolveIRI(java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        long l0, l1;
        java.lang.String r1, $r3;
        org.apache.jena.iri.IRI $r2;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.iri.IRI makeIRI(java.lang.String,long,long)>(r1, l0, l1);

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        return $r3;
    }

    public org.apache.jena.iri.IRI makeIRI(java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        org.apache.jena.riot.system.Prologue $r1;
        long l0, l1;
        org.apache.jena.riot.system.IRIResolver $r2;
        org.apache.jena.riot.system.ErrorHandler $r5;
        java.lang.String r3;
        org.apache.jena.iri.IRI $r4;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r3 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.Prologue prologue>;

        $r2 = virtualinvoke $r1.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.IRIResolver getResolver()>();

        $r4 = virtualinvoke $r2.<org.apache.jena.riot.system.IRIResolver: org.apache.jena.iri.IRI resolveSilent(java.lang.String)>(r3);

        $r5 = r0.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        staticinvoke <org.apache.jena.riot.checker.CheckerIRI: void iriViolations(org.apache.jena.iri.IRI,org.apache.jena.riot.system.ErrorHandler,long,long)>($r4, $r5, l0, l1);

        return $r4;
    }

    public com.hp.hpl.jena.graph.Triple createTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple $r4;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        specialinvoke r0.<org.apache.jena.riot.system.ParserProfileChecker: void checkTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r1, r2, r3, l0, l1);

        $r4 = specialinvoke r0.<org.apache.jena.riot.system.ParserProfileBase: com.hp.hpl.jena.graph.Triple createTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r1, r2, r3, l0, l1);

        return $r4;
    }

    private void checkTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r1;
        org.apache.jena.riot.RiotException $r3, $r10, $r17;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0, r8, r15;
        org.apache.jena.riot.system.ErrorHandler $r2, $r9, $r16;
        java.lang.String $r7, $r14, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r18, $r19, $r20;

        r1 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.graph.Node;

        r15 := @parameter2: com.hp.hpl.jena.graph.Node;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label2;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label2;

     label1:
        $r2 = r1.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        interfaceinvoke $r2.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Subject is not a URI or blank node", l0, l1);

        $r3 = new org.apache.jena.riot.RiotException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad subject: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        if r8 == null goto label3;

        $z1 = virtualinvoke r8.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 != 0 goto label4;

     label3:
        $r9 = r1.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        interfaceinvoke $r9.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Predicate not a URI", l0, l1);

        $r10 = new org.apache.jena.riot.RiotException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad predicate: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        if r15 == null goto label5;

        $z2 = virtualinvoke r15.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label6;

        $z3 = virtualinvoke r15.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 != 0 goto label6;

        $z4 = virtualinvoke r15.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 != 0 goto label6;

     label5:
        $r16 = r1.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        interfaceinvoke $r16.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Object is not a URI, blank node or literal", l0, l1);

        $r17 = new org.apache.jena.riot.RiotException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad object: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label6:
        return;
    }

    public com.hp.hpl.jena.sparql.core.Quad createQuad(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.Quad $r5;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        specialinvoke r0.<org.apache.jena.riot.system.ParserProfileChecker: void checkQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r1, r2, r3, r4, l0, l1);

        $r5 = specialinvoke r0.<org.apache.jena.riot.system.ParserProfileBase: com.hp.hpl.jena.sparql.core.Quad createQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r1, r2, r3, r4, l0, l1);

        return $r5;
    }

    private void checkQuad(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r1;
        org.apache.jena.riot.RiotException $r11;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0, r2, r3, r4;
        org.apache.jena.riot.system.ErrorHandler $r6;
        java.lang.String $r8, $r10, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r9, $r12, $r13, $r14;

        r1 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 != 0 goto label1;

        $r6 = r1.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Graph name is not a URI or blank node: ");

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>($r10, l0, l1);

        $r11 = new org.apache.jena.riot.RiotException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad graph name: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        specialinvoke r1.<org.apache.jena.riot.system.ParserProfileChecker: void checkTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r2, r3, r4, l0, l1);

        return;
    }

    public com.hp.hpl.jena.graph.Node createURI(java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r1;
        org.apache.jena.riot.RiotException $r5;
        long l0, l1;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $z0 = staticinvoke <org.apache.jena.riot.system.RiotLib: boolean isBNodeIRI(java.lang.String)>(r0);

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: com.hp.hpl.jena.graph.Node createIRIorBNode(java.lang.String)>(r0);

     label2:
        return $r4;

     label3:
        $r2 = virtualinvoke r1.<org.apache.jena.riot.system.ParserProfileChecker: java.lang.String resolveIRI(java.lang.String,long,long)>(r0, l0, l1);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r2);

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

        throw $r5;

        catch org.apache.jena.riot.RiotException from label1 to label2 with label5;
        catch org.apache.jena.riot.RiotException from label3 to label4 with label5;
    }

    public com.hp.hpl.jena.graph.Node createTypedLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r3;
        org.apache.jena.riot.system.ErrorHandler $r4;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        long l0, l1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, r1);

        $r4 = r3.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, $r4, l0, l1);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node createLangLiteral(java.lang.String, java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r3;
        org.apache.jena.riot.system.ErrorHandler $r4;
        long l0, l1;
        java.lang.String r0, r1;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1, null);

        $r4 = r3.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.system.ErrorHandler errorHandler>;

        staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(java.lang.String,java.lang.String,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, $r4, l0, l1);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node createStringLiteral(java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r2;
        long l0, l1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r2 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>(r0);

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node, java.lang.String, long, long)
    {
        org.apache.jena.riot.system.ParserProfileChecker r0;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1, $r5;
        org.apache.jena.riot.lang.LabelToNode $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.apache.jena.riot.system.ParserProfileChecker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r3 = r0.<org.apache.jena.riot.system.ParserProfileChecker: org.apache.jena.riot.lang.LabelToNode labelMapping>;

        $r4 = virtualinvoke $r3.<org.apache.jena.riot.lang.LabelToNode: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (com.hp.hpl.jena.graph.Node) $r4;

        return $r5;
    }
}
