public class org.springframework.util.WeakReferenceMonitor extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private static final java.lang.ref.ReferenceQueue handleQueue;
    private static final java.util.Map trackedEntries;
    private static java.lang.Thread monitoringThread;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.util.HashMap $r2;
        java.lang.ref.ReferenceQueue $r1;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/util/WeakReferenceMonitor;");

        <org.springframework.util.WeakReferenceMonitor: org.apache.commons.logging.Log logger> = $r0;

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        <org.springframework.util.WeakReferenceMonitor: java.lang.ref.ReferenceQueue handleQueue> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.springframework.util.WeakReferenceMonitor: java.util.Map trackedEntries> = $r2;

        <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread> = null;

        return;
    }

    public void <init>()
    {
        org.springframework.util.WeakReferenceMonitor r0;

        r0 := @this: org.springframework.util.WeakReferenceMonitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void monitor(java.lang.Object, org.springframework.util.WeakReferenceMonitor$ReleaseListener)
    {
        java.lang.ref.ReferenceQueue $r3;
        org.springframework.util.WeakReferenceMonitor$ReleaseListener r4;
        org.apache.commons.logging.Log $r0, $r6;
        java.lang.Object r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        java.lang.ref.WeakReference $r1;
        boolean $z0;

        r2 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.springframework.util.WeakReferenceMonitor$ReleaseListener;

        $r0 = <org.springframework.util.WeakReferenceMonitor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.springframework.util.WeakReferenceMonitor: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Monitoring handle [");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with release listener [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label1:
        $r1 = new java.lang.ref.WeakReference;

        $r3 = <org.springframework.util.WeakReferenceMonitor: java.lang.ref.ReferenceQueue handleQueue>;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, $r3);

        staticinvoke <org.springframework.util.WeakReferenceMonitor: void addEntry(java.lang.ref.Reference,org.springframework.util.WeakReferenceMonitor$ReleaseListener)>($r1, r4);

        return;
    }

    private static void addEntry(java.lang.ref.Reference, org.springframework.util.WeakReferenceMonitor$ReleaseListener)
    {
        org.springframework.util.WeakReferenceMonitor$MonitoringProcess $r5;
        java.lang.Throwable $r10;
        java.lang.ref.Reference r0;
        org.springframework.util.WeakReferenceMonitor$ReleaseListener r1;
        java.util.Map $r2;
        java.lang.Thread $r3, $r4, $r8, $r9;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.lang.ref.Reference;

        r1 := @parameter1: org.springframework.util.WeakReferenceMonitor$ReleaseListener;

        entermonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label1:
        $r2 = <org.springframework.util.WeakReferenceMonitor: java.util.Map trackedEntries>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r3 = <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread>;

        if $r3 != null goto label2;

        $r4 = new java.lang.Thread;

        $r5 = new org.springframework.util.WeakReferenceMonitor$MonitoringProcess;

        specialinvoke $r5.<org.springframework.util.WeakReferenceMonitor$MonitoringProcess: void <init>(org.springframework.util.WeakReferenceMonitor$MonitoringProcess)>(null);

        $r6 = class "Lorg/springframework/util/WeakReferenceMonitor;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r5, $r7);

        <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread> = $r4;

        $r8 = <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread>;

        virtualinvoke $r8.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r9 = <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread>;

        virtualinvoke $r9.<java.lang.Thread: void start()>();

     label2:
        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static org.springframework.util.WeakReferenceMonitor$ReleaseListener removeEntry(java.lang.ref.Reference)
    {
        java.lang.ref.Reference r0;
        java.lang.Throwable $r4;
        org.springframework.util.WeakReferenceMonitor$ReleaseListener $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.ref.Reference;

        entermonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label1:
        $r1 = <org.springframework.util.WeakReferenceMonitor: java.util.Map trackedEntries>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (org.springframework.util.WeakReferenceMonitor$ReleaseListener) $r2;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static boolean keepMonitoringThreadAlive()
    {
        java.lang.Throwable $r2;
        java.util.Map $r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;

        entermonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label1:
        $r0 = <org.springframework.util.WeakReferenceMonitor: java.util.Map trackedEntries>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label2:
        return 1;

     label3:
        $r1 = <org.springframework.util.WeakReferenceMonitor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No entries left to track - stopping reference monitor thread");

        <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread> = null;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label4:
        return 0;

     label5:
        $r2 := @caughtexception;

        exitmonitor class "Lorg/springframework/util/WeakReferenceMonitor;";

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static org.apache.commons.logging.Log access$0()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = <org.springframework.util.WeakReferenceMonitor: org.apache.commons.logging.Log logger>;

        return $r0;
    }

    static boolean access$1()
    {
        boolean $z0;

        $z0 = staticinvoke <org.springframework.util.WeakReferenceMonitor: boolean keepMonitoringThreadAlive()>();

        return $z0;
    }

    static java.lang.ref.ReferenceQueue access$2()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <org.springframework.util.WeakReferenceMonitor: java.lang.ref.ReferenceQueue handleQueue>;

        return $r0;
    }

    static org.springframework.util.WeakReferenceMonitor$ReleaseListener access$3(java.lang.ref.Reference)
    {
        java.lang.ref.Reference r0;
        org.springframework.util.WeakReferenceMonitor$ReleaseListener $r1;

        r0 := @parameter0: java.lang.ref.Reference;

        $r1 = staticinvoke <org.springframework.util.WeakReferenceMonitor: org.springframework.util.WeakReferenceMonitor$ReleaseListener removeEntry(java.lang.ref.Reference)>(r0);

        return $r1;
    }

    static void access$4(java.lang.Thread)
    {
        java.lang.Thread r0;

        r0 := @parameter0: java.lang.Thread;

        <org.springframework.util.WeakReferenceMonitor: java.lang.Thread monitoringThread> = r0;

        return;
    }
}
