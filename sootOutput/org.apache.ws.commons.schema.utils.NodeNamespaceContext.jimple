public final class org.apache.ws.commons.schema.utils.NodeNamespaceContext extends java.lang.Object implements org.apache.ws.commons.schema.utils.NamespacePrefixList, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final boolean DOM_LEVEL_3;
    private static final java.util.Collection XML_NS_PREFIX_COLLECTION;
    private static final java.util.Collection XMLNS_ATTRIBUTE_COLLECTION;
    private final java.util.Map declarations;
    private java.lang.String[] prefixes;

    private void <init>(java.util.Map)
    {
        org.apache.ws.commons.schema.utils.NodeNamespaceContext r0;
        java.util.Map r1;

        r0 := @this: org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Map declarations> = r1;

        return;
    }

    public static java.lang.String getNamespacePrefix(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext $r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $z0 = <org.apache.ws.commons.schema.utils.NodeNamespaceContext: boolean DOM_LEVEL_3>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String getNamespacePrefixDomLevel3(org.w3c.dom.Element,java.lang.String)>(r0, r2);

        return $r4;

     label1:
        $r1 = staticinvoke <org.apache.ws.commons.schema.utils.NodeNamespaceContext: org.apache.ws.commons.schema.utils.NodeNamespaceContext getNamespaceContext(org.w3c.dom.Node)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String getPrefix(java.lang.String)>(r2);

        return $r3;
    }

    private static java.lang.String getNamespacePrefixDomLevel3(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String lookupPrefix(java.lang.String)>(r1);

        return $r2;
    }

    public static java.lang.String getNamespaceURI(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r3;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext $r4;
        java.lang.String r0, $r1, $r2, $r5, $r6;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        $r1 = "xml";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return "http://www.w3.org/XML/1998/namespace";

     label1:
        $r2 = "xmlns";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return "http://www.w3.org/2000/xmlns/";

     label2:
        $z2 = <org.apache.ws.commons.schema.utils.NodeNamespaceContext: boolean DOM_LEVEL_3>;

        if $z2 == 0 goto label3;

        $r6 = staticinvoke <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String getNamespaceURIDomLevel3(org.w3c.dom.Element,java.lang.String)>(r3, r0);

        return $r6;

     label3:
        $r4 = staticinvoke <org.apache.ws.commons.schema.utils.NodeNamespaceContext: org.apache.ws.commons.schema.utils.NodeNamespaceContext getNamespaceContext(org.w3c.dom.Node)>(r3);

        $r5 = virtualinvoke $r4.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r0);

        return $r5;
    }

    private static java.lang.String getNamespaceURIDomLevel3(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r1;
        java.lang.String $r0, $r2, r3;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.String;

        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String lookupNamespaceURI(java.lang.String)>(r3);

        return $r2;
    }

    public static org.apache.ws.commons.schema.utils.NodeNamespaceContext getNamespaceContext(org.w3c.dom.Node)
    {
        org.apache.ws.commons.schema.utils.NodeNamespaceContext$1 $r1;
        org.w3c.dom.Node r2;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext $r3;
        java.util.HashMap $r0;

        r2 := @parameter0: org.w3c.dom.Node;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new org.apache.ws.commons.schema.utils.NodeNamespaceContext$1;

        specialinvoke $r1.<org.apache.ws.commons.schema.utils.NodeNamespaceContext$1: void <init>(java.util.Map)>($r0);

        virtualinvoke $r1.<org.apache.ws.commons.schema.utils.NodeNamespaceContext$1: void searchAllPrefixDeclarations(org.w3c.dom.Node)>(r2);

        $r3 = new org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        specialinvoke $r3.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: void <init>(java.util.Map)>($r0);

        return $r3;
    }

    public java.lang.String[] getDeclaredPrefixes()
    {
        java.lang.Object[] $r6;
        java.util.Set $r4;
        java.lang.String[] $r1, $r2, $r5, $r7;
        java.util.Map $r3;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext r0;
        int $i0;

        r0 := @this: org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        $r1 = r0.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String[] prefixes>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Map declarations>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        r0.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String[] prefixes> = $r7;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.lang.String[] prefixes>;

        return $r2;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.IllegalArgumentException $r7;
        java.util.Map $r4;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext r3;
        java.lang.Object $r5;
        java.lang.String r0, $r1, $r2, r6, $r8;
        boolean $z0, $z1;

        r3 := @this: org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The prefix must not be null.");

        throw $r7;

     label1:
        $r1 = "xml";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return "http://www.w3.org/XML/1998/namespace";

     label2:
        $r2 = "xmlns";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        return "http://www.w3.org/2000/xmlns/";

     label3:
        $r4 = r3.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Map declarations>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (java.lang.String) $r5;

        if r6 != null goto label4;

        $r8 = "";

        goto label5;

     label4:
        $r8 = r6;

     label5:
        return $r8;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        java.util.Map $r4;
        java.lang.String r0, $r1, $r2, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.lang.IllegalArgumentException $r12;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext r3;
        java.lang.Object $r7, $r9, $r10;

        r3 := @this: org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The namespace URI must not be null.");

        throw $r12;

     label1:
        $r1 = "http://www.w3.org/XML/1998/namespace";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return "xml";

     label2:
        $r2 = "http://www.w3.org/2000/xmlns/";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        return "xmlns";

     label3:
        $r4 = r3.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Map declarations>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label5;

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        return $r11;

     label5:
        goto label4;

     label6:
        return null;
    }

    public java.util.Iterator getPrefixes(java.lang.String)
    {
        java.util.ArrayList $r3;
        java.util.Map $r5;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r10;
        java.util.Iterator $r7, $r8, $r14, $r16;
        java.util.Collection $r13, $r15;
        java.util.Set $r6;
        java.lang.IllegalArgumentException $r17;
        org.apache.ws.commons.schema.utils.NodeNamespaceContext r4;
        java.lang.Object $r9, $r11, $r12;

        r4 := @this: org.apache.ws.commons.schema.utils.NodeNamespaceContext;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The namespace URI must not be null.");

        throw $r17;

     label1:
        $r1 = "http://www.w3.org/XML/1998/namespace";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r15 = <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Collection XML_NS_PREFIX_COLLECTION>;

        $r16 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

        return $r16;

     label2:
        $r2 = "http://www.w3.org/2000/xmlns/";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r13 = <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Collection XMLNS_ATTRIBUTE_COLLECTION>;

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

        return $r14;

     label3:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Map declarations>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label5;

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label5:
        goto label4;

     label6:
        $r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        return $r8;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r9;
        java.lang.Class[] $r5, $r7;
        java.util.List $r0, $r1;
        java.lang.Class $r2, $r4, $r6, $r8;
        java.lang.ClassLoader $r3;
        boolean z0;

        <org.apache.ws.commons.schema.utils.NodeNamespaceContext: long serialVersionUID> = 1L;

        $r0 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("xml");

        <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Collection XML_NS_PREFIX_COLLECTION> = $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("xmlns");

        <org.apache.ws.commons.schema.utils.NodeNamespaceContext: java.util.Collection XMLNS_ATTRIBUTE_COLLECTION> = $r1;

     label1:
        $r2 = class "Lorg/w3c/dom/Node;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.w3c.dom.UserDataHandler", 0, $r3);

        $r6 = class "Lorg/w3c/dom/Node;";

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/String;";

        virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getUserData", $r5);

        $r8 = class "Lorg/w3c/dom/Node;";

        $r7 = newarray (java.lang.Class)[3];

        $r7[0] = class "Ljava/lang/String;";

        $r7[1] = class "Ljava/lang/Object;";

        $r7[2] = $r4;

        virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setUserData", $r7);

        z0 = 1;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        z0 = 0;

     label4:
        <org.apache.ws.commons.schema.utils.NodeNamespaceContext: boolean DOM_LEVEL_3> = z0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
