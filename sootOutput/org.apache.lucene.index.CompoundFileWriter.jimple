public final class org.apache.lucene.index.CompoundFileWriter extends java.lang.Object
{
    static final int FORMAT_PRE_VERSION;
    static final int FORMAT_NO_SEGMENT_PREFIX;
    static final int FORMAT_CURRENT;
    private org.apache.lucene.store.Directory directory;
    private java.lang.String fileName;
    private java.util.HashSet ids;
    private java.util.LinkedList entries;
    private boolean merged;
    private org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.Directory, java.lang.String)
    {
        org.apache.lucene.index.CompoundFileWriter r0;
        java.lang.String r2;
        org.apache.lucene.store.Directory r1;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.lucene.index.CompoundFileWriter: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.SegmentMerger$CheckAbort)>(r1, r2, null);

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.SegmentMerger$CheckAbort)
    {
        org.apache.lucene.index.CompoundFileWriter r0;
        java.lang.NullPointerException $r6, $r7;
        java.util.HashSet $r4;
        org.apache.lucene.index.SegmentMerger$CheckAbort r3;
        org.apache.lucene.store.Directory r1;
        java.lang.String r2;
        java.util.LinkedList $r5;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.SegmentMerger$CheckAbort;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.CompoundFileWriter: boolean merged> = 0;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("directory cannot be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("name cannot be null");

        throw $r6;

     label2:
        r0.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort> = r3;

        r0.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory directory> = r1;

        r0.<org.apache.lucene.index.CompoundFileWriter: java.lang.String fileName> = r2;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.lucene.index.CompoundFileWriter: java.util.HashSet ids> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries> = $r5;

        return;
    }

    public org.apache.lucene.store.Directory getDirectory()
    {
        org.apache.lucene.index.CompoundFileWriter r0;
        org.apache.lucene.store.Directory $r1;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.lucene.index.CompoundFileWriter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.index.CompoundFileWriter: java.lang.String fileName>;

        return $r1;
    }

    public void addFile(java.lang.String)
    {
        org.apache.lucene.index.CompoundFileWriter r0;
        java.lang.String r1;
        org.apache.lucene.store.Directory $r2;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r0.<org.apache.lucene.index.CompoundFileWriter: void addFile(java.lang.String,org.apache.lucene.store.Directory)>(r1, $r2);

        return;
    }

    public void addFile(java.lang.String, org.apache.lucene.store.Directory)
    {
        java.lang.IllegalStateException $r13;
        java.lang.NullPointerException $r12;
        java.util.HashSet $r2;
        org.apache.lucene.store.Directory r4;
        java.lang.String r1, $r11;
        java.util.LinkedList $r5;
        boolean $z0, $z1;
        org.apache.lucene.index.CompoundFileWriter r0;
        org.apache.lucene.index.CompoundFileWriter$FileEntry $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.lucene.store.Directory;

        $z0 = r0.<org.apache.lucene.index.CompoundFileWriter: boolean merged>;

        if $z0 == 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t add extensions after merge has been called");

        throw $r13;

     label1:
        if r1 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("file cannot be null");

        throw $r12;

     label2:
        $r2 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.HashSet ids>;

        $z1 = virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already added");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $r3 = new org.apache.lucene.index.CompoundFileWriter$FileEntry;

        specialinvoke $r3.<org.apache.lucene.index.CompoundFileWriter$FileEntry: void <init>(org.apache.lucene.index.CompoundFileWriter$1)>(null);

        $r3.<org.apache.lucene.index.CompoundFileWriter$FileEntry: java.lang.String file> = r1;

        $r3.<org.apache.lucene.index.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir> = r4;

        $r5 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.IllegalStateException $r32, $r33;
        byte $b3;
        org.apache.lucene.store.Directory $r3, $r21;
        java.io.Closeable[] $r12, $r25, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.CompoundFileWriter r0;
        java.lang.Throwable $r24;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l8, l9, l10;
        java.lang.AssertionError $r34;
        int $i0, $i12;
        java.lang.String $r2, $r18, $r19, $r20;
        java.util.LinkedList $r1, $r5, $r6, $r8, $r10;
        org.apache.lucene.store.IndexOutput $r4, r28;
        java.util.Iterator $r7, $r9, $r11;
        org.apache.lucene.index.CompoundFileWriter$FileEntry r17, r30, r31;
        java.io.IOException $r26, r29;
        java.lang.Object $r14, $r15, $r16;

        r0 := @this: org.apache.lucene.index.CompoundFileWriter;

        $z0 = r0.<org.apache.lucene.index.CompoundFileWriter: boolean merged>;

        if $z0 == 0 goto label01;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Merge already performed");

        throw $r32;

     label01:
        $r1 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        $z1 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No entries to merge have been defined");

        throw $r33;

     label02:
        r0.<org.apache.lucene.index.CompoundFileWriter: boolean merged> = 1;

        $r3 = r0.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $r2 = r0.<org.apache.lucene.index.CompoundFileWriter: java.lang.String fileName>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>($r2);

        r28 = $r4;

        r29 = null;

     label03:
        $i12 = (int) -1;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i12);

        $r5 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        $i0 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        l9 = 0L;

        $r6 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r16 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.lucene.index.CompoundFileWriter$FileEntry) $r16;

        $l7 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        r17.<org.apache.lucene.index.CompoundFileWriter$FileEntry: long directoryOffset> = $l7;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeLong(long)>(0L);

        $r18 = r17.<org.apache.lucene.index.CompoundFileWriter$FileEntry: java.lang.String file>;

        $r19 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>($r18);

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)>($r19);

        $r21 = r17.<org.apache.lucene.index.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir>;

        $r20 = r17.<org.apache.lucene.index.CompoundFileWriter$FileEntry: java.lang.String file>;

        $l8 = virtualinvoke $r21.<org.apache.lucene.store.Directory: long fileLength(java.lang.String)>($r20);

        l9 = l9 + $l8;

        goto label04;

     label05:
        $l1 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        l10 = l9 + $l1;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void setLength(long)>(l10);

        $r8 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r15 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.lucene.index.CompoundFileWriter$FileEntry) $r15;

        $l6 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        r30.<org.apache.lucene.index.CompoundFileWriter$FileEntry: long dataOffset> = $l6;

        specialinvoke r0.<org.apache.lucene.index.CompoundFileWriter: void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry,org.apache.lucene.store.IndexOutput)>(r30, $r4);

        goto label06;

     label07:
        $r10 = r0.<org.apache.lucene.index.CompoundFileWriter: java.util.LinkedList entries>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.lucene.index.CompoundFileWriter$FileEntry) $r14;

        $l4 = r31.<org.apache.lucene.index.CompoundFileWriter$FileEntry: long directoryOffset>;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void seek(long)>($l4);

        $l5 = r31.<org.apache.lucene.index.CompoundFileWriter$FileEntry: long dataOffset>;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l5);

        goto label08;

     label09:
        $z5 = <org.apache.lucene.index.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        $l2 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long length()>();

        $b3 = l10 cmp $l2;

        if $b3 == 0 goto label10;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label10:
        r28 = null;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void close()>();

     label11:
        goto label18;

     label12:
        goto label17;

     label13:
        $r26 := @caughtexception;

        r29 = $r26;

        goto label19;

     label14:
        goto label17;

     label15:
        $r24 := @caughtexception;

        goto label20;

     label16:
        throw $r24;

     label17:
        return;

     label18:
        $r12 = newarray (java.io.Closeable)[1];

        $r12[0] = null;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r12);

        goto label12;

     label19:
        $r27 = newarray (java.io.Closeable)[1];

        $r27[0] = r28;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>($r26, $r27);

        goto label14;

     label20:
        $r25 = newarray (java.io.Closeable)[1];

        $r25[0] = r28;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(r29, $r25);

        goto label16;

        catch java.io.IOException from label03 to label11 with label13;
        catch java.lang.Throwable from label03 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry, org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        java.lang.Throwable $r15;
        long $l0, $l1, $l2, $l4;
        byte $b3;
        org.apache.lucene.index.SegmentMerger$CheckAbort $r6, $r14;
        org.apache.lucene.store.Directory $r2;
        java.lang.String $r1, $r13;
        org.apache.lucene.store.IndexOutput r4;
        double $d0;
        org.apache.lucene.index.CompoundFileWriter r5;
        org.apache.lucene.store.IndexInput $r3;
        org.apache.lucene.index.CompoundFileWriter$FileEntry r0;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r5 := @this: org.apache.lucene.index.CompoundFileWriter;

        r0 := @parameter0: org.apache.lucene.index.CompoundFileWriter$FileEntry;

        r4 := @parameter1: org.apache.lucene.store.IndexOutput;

        $r2 = r0.<org.apache.lucene.index.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir>;

        $r1 = r0.<org.apache.lucene.index.CompoundFileWriter$FileEntry: java.lang.String file>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String)>($r1);

     label1:
        $l0 = virtualinvoke r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $l1 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: long length()>();

        virtualinvoke r4.<org.apache.lucene.store.IndexOutput: void copyBytes(org.apache.lucene.store.DataInput,long)>($r3, $l1);

        $r6 = r5.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort>;

        if $r6 == null goto label2;

        $r14 = r5.<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort>;

        $d0 = (double) $l1;

        virtualinvoke $r14.<org.apache.lucene.index.SegmentMerger$CheckAbort: void work(double)>($d0);

     label2:
        $l2 = virtualinvoke r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $l4 = $l2 - $l0;

        $b3 = $l4 cmp $l1;

        if $b3 == 0 goto label3;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Difference in the output file offsets ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match the original file length ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label3:
        goto label8;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        goto label9;

     label6:
        throw $r15;

     label7:
        return;

     label8:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        goto label4;

     label9:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        goto label6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.index.CompoundFileWriter: int FORMAT_CURRENT> = -1;

        <org.apache.lucene.index.CompoundFileWriter: int FORMAT_NO_SEGMENT_PREFIX> = -1;

        <org.apache.lucene.index.CompoundFileWriter: int FORMAT_PRE_VERSION> = 0;

        $r0 = class "Lorg/apache/lucene/index/CompoundFileWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.CompoundFileWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
