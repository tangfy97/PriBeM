public final class org.apache.poi.hssf.record.RecordInputStream extends java.lang.Object implements org.apache.poi.util.LittleEndianInput
{
    public static final short MAX_RECORD_DATA_SIZE;
    private static final int INVALID_SID_VALUE;
    private static final int DATA_LEN_NEEDS_TO_BE_READ;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private final org.apache.poi.hssf.record.BiffHeaderInput _bhi;
    private final org.apache.poi.util.LittleEndianInput _dataInput;
    private int _currentSid;
    private int _currentDataLength;
    private int _nextSid;
    private int _currentDataOffset;

    public void <init>(java.io.InputStream) throws org.apache.poi.hssf.record.RecordFormatException
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void <init>(java.io.InputStream,org.apache.poi.hssf.record.crypto.Biff8EncryptionKey,int)>(r1, null, 0);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.poi.hssf.record.crypto.Biff8EncryptionKey, int) throws org.apache.poi.hssf.record.RecordFormatException
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream $r2;
        org.apache.poi.hssf.record.RecordInputStream$SimpleHeaderInput $r5;
        org.apache.poi.hssf.record.crypto.Biff8EncryptionKey r1;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int i0, $i1;
        org.apache.poi.util.LittleEndianInput $r4;
        java.io.InputStream r3;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        r3 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.poi.hssf.record.crypto.Biff8EncryptionKey;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = staticinvoke <org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput getLEI(java.io.InputStream)>(r3);

        r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput> = $r4;

        $r5 = new org.apache.poi.hssf.record.RecordInputStream$SimpleHeaderInput;

        specialinvoke $r5.<org.apache.poi.hssf.record.RecordInputStream$SimpleHeaderInput: void <init>(java.io.InputStream)>(r3);

        r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.hssf.record.BiffHeaderInput _bhi> = $r5;

        goto label2;

     label1:
        $r2 = new org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        specialinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: void <init>(java.io.InputStream,int,org.apache.poi.hssf.record.crypto.Biff8EncryptionKey)>(r3, i0, r1);

        r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.hssf.record.BiffHeaderInput _bhi> = $r2;

        r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput> = $r2;

     label2:
        $i1 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int readNextSid()>();

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid> = $i1;

        return;
    }

    static org.apache.poi.util.LittleEndianInput getLEI(java.io.InputStream)
    {
        org.apache.poi.util.LittleEndianInputStream $r1;
        org.apache.poi.util.LittleEndianInput $r2;
        java.io.InputStream r0;
        boolean $z0;

        r0 := @parameter0: java.io.InputStream;

        $z0 = r0 instanceof org.apache.poi.util.LittleEndianInput;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.poi.util.LittleEndianInput) r0;

        return $r2;

     label1:
        $r1 = new org.apache.poi.util.LittleEndianInputStream;

        specialinvoke $r1.<org.apache.poi.util.LittleEndianInputStream: void <init>(java.io.InputStream)>(r0);

        return $r1;
    }

    public int available()
    {
        int $i0;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        return $i0;
    }

    public int read(byte[], int, int)
    {
        byte[] r1;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int i0, $i1, $i2, i3;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        if $i2 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void readFully(byte[],int,int)>(r1, i3, $i2);

        return $i2;
    }

    public short getSid()
    {
        int $i0;
        short $s1;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentSid>;

        $s1 = (short) $i0;

        return $s1;
    }

    public boolean hasNextRecord() throws org.apache.poi.hssf.record.RecordInputStream$LeftoverDataException
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        org.apache.poi.hssf.record.RecordInputStream$LeftoverDataException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i13;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i9 = (int) -1;

        if $i0 == $i9 goto label1;

        $i5 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i4 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        if $i5 == $i4 goto label1;

        $r2 = new org.apache.poi.hssf.record.RecordInputStream$LeftoverDataException;

        $i6 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentSid>;

        $i7 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        specialinvoke $r2.<org.apache.poi.hssf.record.RecordInputStream$LeftoverDataException: void <init>(int,int)>($i6, $i7);

        throw $r2;

     label1:
        $i1 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i11 = (int) -1;

        if $i1 == $i11 goto label2;

        $i3 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int readNextSid()>();

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid> = $i3;

     label2:
        $i2 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid>;

        $i13 = (int) -1;

        if $i2 == $i13 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private int readNextSid()
    {
        org.apache.poi.hssf.record.BiffHeaderInput $r1, $r2;
        org.apache.poi.hssf.record.RecordInputStream r0;
        org.apache.poi.hssf.record.RecordFormatException $r10;
        int $i0, $i1, $i3, $i5, $i7;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.hssf.record.BiffHeaderInput _bhi>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.hssf.record.BiffHeaderInput: int available()>();

        if $i0 >= 4 goto label2;

        if $i0 <= 0 goto label1;

     label1:
        $i3 = (int) -1;

        return $i3;

     label2:
        $r2 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.hssf.record.BiffHeaderInput _bhi>;

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.BiffHeaderInput: int readRecordSID()>();

        $i5 = (int) -1;

        if $i1 != $i5 goto label3;

        $r10 = new org.apache.poi.hssf.record.RecordFormatException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found invalid sid (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label3:
        $i7 = (int) -1;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength> = $i7;

        return $i1;
    }

    public void nextRecord() throws org.apache.poi.hssf.record.RecordFormatException
    {
        java.lang.IllegalStateException $r5, $r6;
        org.apache.poi.hssf.record.BiffHeaderInput $r1;
        org.apache.poi.hssf.record.RecordInputStream r0;
        org.apache.poi.hssf.record.RecordFormatException $r7;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EOF - next record not available");

        throw $r5;

     label1:
        $i1 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i8 = (int) -1;

        if $i1 == $i8 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call nextRecord() without checking hasNextRecord() first");

        throw $r6;

     label2:
        $i2 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid>;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentSid> = $i2;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = 0;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.hssf.record.BiffHeaderInput _bhi>;

        $i3 = interfaceinvoke $r1.<org.apache.poi.hssf.record.BiffHeaderInput: int readDataSize()>();

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength> = $i3;

        $i4 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        if $i4 <= 8224 goto label3;

        $r7 = new org.apache.poi.hssf.record.RecordFormatException;

        specialinvoke $r7.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>("The content of an excel record cannot exceed 8224 bytes");

        throw $r7;

     label3:
        return;
    }

    private void checkRecordPosition(int)
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        org.apache.poi.hssf.record.RecordFormatException $r1;
        int $i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        if $i0 < i1 goto label1;

        return;

     label1:
        if $i0 != 0 goto label2;

        $z0 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: boolean isContinueNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void nextRecord()>();

        return;

     label2:
        $r1 = new org.apache.poi.hssf.record.RecordFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough data (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to read requested (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") bytes");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    public byte readByte()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        byte $b2;
        int $i0, $i1;
        org.apache.poi.util.LittleEndianInput $r1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(1);

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i1 = $i0 + 1;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i1;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        $b2 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: byte readByte()>();

        return $b2;
    }

    public short readShort()
    {
        short $s2;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1;
        org.apache.poi.util.LittleEndianInput $r1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(2);

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i1 = $i0 + 2;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i1;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        $s2 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: short readShort()>();

        return $s2;
    }

    public int readInt()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1, $i2;
        org.apache.poi.util.LittleEndianInput $r1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(4);

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i1 = $i0 + 4;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i1;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        $i2 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readInt()>();

        return $i2;
    }

    public long readLong()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1;
        org.apache.poi.util.LittleEndianInput $r1;
        long $l2;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(8);

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i1 = $i0 + 8;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i1;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        $l2 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: long readLong()>();

        return $l2;
    }

    public int readUByte()
    {
        short $s1, $s2;
        org.apache.poi.hssf.record.RecordInputStream r0;
        byte $b0;
        int $i3;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $b0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: byte readByte()>();

        $s2 = (short) $b0;

        $s1 = $s2 & 255;

        $i3 = (int) $s1;

        return $i3;
    }

    public int readUShort()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1, $i2;
        org.apache.poi.util.LittleEndianInput $r1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(2);

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i1 = $i0 + 2;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i1;

        $r1 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        $i2 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        return $i2;
    }

    public double readDouble()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        long $l0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $l0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

     label1:
        return $d0;
    }

    public void readFully(byte[])
    {
        int $i0;
        byte[] r1;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void readFully(byte[], int, int)
    {
        byte[] r1;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int i0, i1, $i2, $i3;
        org.apache.poi.util.LittleEndianInput $r2;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void checkRecordPosition(int)>(i0);

        $r2 = r0.<org.apache.poi.hssf.record.RecordInputStream: org.apache.poi.util.LittleEndianInput _dataInput>;

        interfaceinvoke $r2.<org.apache.poi.util.LittleEndianInput: void readFully(byte[],int,int)>(r1, i1, i0);

        $i2 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i3 = $i2 + i0;

        r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset> = $i3;

        return;
    }

    public java.lang.String readString()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        byte $b1;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        $b1 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: byte readByte()>();

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: java.lang.String readStringCommon(int,boolean)>($i0, $z0);

        return $r1;
    }

    public java.lang.String readUnicodeLEString(int)
    {
        int i0;
        java.lang.String $r1;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: java.lang.String readStringCommon(int,boolean)>(i0, 0);

        return $r1;
    }

    public java.lang.String readCompressedUnicode(int)
    {
        int i0;
        java.lang.String $r1;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: java.lang.String readStringCommon(int,boolean)>(i0, 1);

        return $r1;
    }

    private java.lang.String readStringCommon(int, boolean)
    {
        byte $b4;
        boolean z0, $z1, z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r23, $r26, $r28;
        short $s7, $s9;
        org.apache.poi.hssf.record.RecordInputStream r7;
        org.apache.poi.hssf.record.RecordFormatException $r27, $r29;
        int i0, $i1, $i2, $i3, $i5, $i6, $i8, $i10, i11, $i12, i13, $i17;
        java.lang.String $r5, $r13, $r21, $r25;
        char c14, c15;
        java.lang.IllegalArgumentException $r24;
        char[] r6;

        r7 := @this: org.apache.poi.hssf.record.RecordInputStream;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 < 0 goto label01;

        if i0 <= 1048576 goto label02;

     label01:
        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad requested string length (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r24;

     label02:
        r6 = newarray (char)[i0];

        z2 = z0;

        i11 = 0;

     label03:
        if z2 == 0 goto label04;

        $i12 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        goto label05;

     label04:
        $i1 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        $i12 = $i1 / 2;

     label05:
        i13 = $i12;

        $i2 = i0 - i11;

        if $i2 > $i12 goto label10;

     label06:
        if i11 >= i0 goto label09;

        if z2 == 0 goto label07;

        $i10 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int readUByte()>();

        c14 = (char) $i10;

        goto label08;

     label07:
        $s9 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: short readShort()>();

        c14 = (char) $s9;

     label08:
        r6[i11] = c14;

        i11 = i11 + 1;

        goto label06;

     label09:
        $r25 = new java.lang.String;

        specialinvoke $r25.<java.lang.String: void <init>(char[])>(r6);

        return $r25;

     label10:
        if i13 <= 0 goto label13;

        if z2 == 0 goto label11;

        $i8 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int readUByte()>();

        c15 = (char) $i8;

        goto label12;

     label11:
        $s7 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: short readShort()>();

        c15 = (char) $s7;

     label12:
        r6[i11] = c15;

        i11 = i11 + 1;

        $i17 = (int) -1;

        i13 = i13 + $i17;

        goto label10;

     label13:
        $z1 = specialinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: boolean isContinueNext()>();

        if $z1 != 0 goto label14;

        $r27 = new org.apache.poi.hssf.record.RecordFormatException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to find a ContinueRecord in order to read remaining ");

        $i6 = i0 - i11;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chars");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r21);

        throw $r27;

     label14:
        $i3 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        if $i3 == 0 goto label15;

        $r29 = new org.apache.poi.hssf.record.RecordFormatException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Odd number of bytes(");

        $i5 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") left behind");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r13);

        throw $r29;

     label15:
        virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: void nextRecord()>();

        $b4 = virtualinvoke r7.<org.apache.poi.hssf.record.RecordInputStream: byte readByte()>();

        if $b4 != 0 goto label16;

        $z3 = 1;

        goto label17;

     label16:
        $z3 = 0;

     label17:
        z2 = $z3;

        goto label03;
    }

    public byte[] readRemainder()
    {
        byte[] r1, $r2;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.poi.hssf.record.RecordInputStream: byte[] EMPTY_BYTE_ARRAY>;

        return $r2;

     label1:
        r1 = newarray (byte)[$i0];

        virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: void readFully(byte[])>(r1);

        return r1;
    }

    public byte[] readAllContinuedRemainder()
    {
        byte[] $r2, $r3;
        java.io.ByteArrayOutputStream $r0;
        org.apache.poi.hssf.record.RecordInputStream r1;
        int $i0;
        boolean $z0;

        r1 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(16448);

     label1:
        $r2 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: byte[] readRemainder()>();

        $i0 = lengthof $r2;

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        $z0 = specialinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: boolean isContinueNext()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: void nextRecord()>();

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public int remaining()
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        return 0;

     label1:
        $i2 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i1 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i3 = $i2 - $i1;

        return $i3;
    }

    private boolean isContinueNext()
    {
        java.lang.IllegalStateException $r2;
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        $i3 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataOffset>;

        $i2 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _currentDataLength>;

        if $i3 == $i2 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should never be called before end of current record");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: boolean hasNextRecord()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid>;

        if $i1 != 60 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int getNextSid()
    {
        int $i0;
        org.apache.poi.hssf.record.RecordInputStream r0;

        r0 := @this: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = r0.<org.apache.poi.hssf.record.RecordInputStream: int _nextSid>;

        return $i0;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.poi.hssf.record.RecordInputStream: int DATA_LEN_NEEDS_TO_BE_READ> = -1;

        <org.apache.poi.hssf.record.RecordInputStream: int INVALID_SID_VALUE> = -1;

        <org.apache.poi.hssf.record.RecordInputStream: short MAX_RECORD_DATA_SIZE> = 8224;

        $r0 = newarray (byte)[0];

        <org.apache.poi.hssf.record.RecordInputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
}
