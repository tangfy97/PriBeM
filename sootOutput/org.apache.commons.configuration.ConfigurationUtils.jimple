public final class org.apache.commons.configuration.ConfigurationUtils extends java.lang.Object
{
    static final java.lang.String PROTOCOL_FILE;
    static final java.lang.String RESOURCE_PATH_SEPARATOR;
    private static final java.lang.String METHOD_CLONE;
    private static final float JAVA_1_4;
    private static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$commons$configuration$ConfigurationUtils;

    private void <init>()
    {
        org.apache.commons.configuration.ConfigurationUtils r0;

        r0 := @this: org.apache.commons.configuration.ConfigurationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(org.apache.commons.configuration.Configuration, java.io.PrintStream)
    {
        org.apache.commons.configuration.Configuration r0;
        java.io.PrintWriter $r1;
        java.io.PrintStream r2;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        r2 := @parameter1: java.io.PrintStream;

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        staticinvoke <org.apache.commons.configuration.ConfigurationUtils: void dump(org.apache.commons.configuration.Configuration,java.io.PrintWriter)>(r0, $r1);

        return;
    }

    public static void dump(org.apache.commons.configuration.Configuration, java.io.PrintWriter)
    {
        org.apache.commons.configuration.Configuration r0;
        java.io.PrintWriter r2;
        java.util.Iterator $r1;
        java.lang.Object $r3, $r5;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        r2 := @parameter1: java.io.PrintWriter;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("=");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.Object)>($r5);

        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label2:
        goto label1;

     label3:
        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static java.lang.String toString(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r1;
        java.io.PrintWriter $r2;
        java.io.StringWriter $r0;
        java.lang.String $r3;

        r1 := @parameter0: org.apache.commons.configuration.Configuration;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        staticinvoke <org.apache.commons.configuration.ConfigurationUtils: void dump(org.apache.commons.configuration.Configuration,java.io.PrintWriter)>(r1, $r2);

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public static void copy(org.apache.commons.configuration.Configuration, org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0, r4;
        java.util.Iterator $r1;
        java.lang.Object $r2, $r5;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        r4 := @parameter1: org.apache.commons.configuration.Configuration;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r5 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r3);

        interfaceinvoke r4.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>(r3, $r5);

        goto label1;

     label2:
        return;
    }

    public static void append(org.apache.commons.configuration.Configuration, org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0, r4;
        java.util.Iterator $r1;
        java.lang.Object $r2, $r5;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        r4 := @parameter1: org.apache.commons.configuration.Configuration;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r5 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r3);

        interfaceinvoke r4.<org.apache.commons.configuration.Configuration: void addProperty(java.lang.String,java.lang.Object)>(r3, $r5);

        goto label1;

     label2:
        return;
    }

    public static org.apache.commons.configuration.HierarchicalConfiguration convertToHierarchical(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0;
        org.apache.commons.configuration.HierarchicalConfiguration $r1;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.configuration.HierarchicalConfiguration convertToHierarchical(org.apache.commons.configuration.Configuration,org.apache.commons.configuration.tree.ExpressionEngine)>(r0, null);

        return $r1;
    }

    public static org.apache.commons.configuration.HierarchicalConfiguration convertToHierarchical(org.apache.commons.configuration.Configuration, org.apache.commons.configuration.tree.ExpressionEngine)
    {
        org.apache.commons.configuration.Configuration r0;
        org.apache.commons.configuration.tree.ExpressionEngine r2;
        org.apache.commons.configuration.HierarchicalConfiguration $r1, r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        r2 := @parameter1: org.apache.commons.configuration.tree.ExpressionEngine;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.apache.commons.configuration.HierarchicalConfiguration;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.configuration.HierarchicalConfiguration) r0;

        if r2 == null goto label2;

        virtualinvoke r3.<org.apache.commons.configuration.HierarchicalConfiguration: void setExpressionEngine(org.apache.commons.configuration.tree.ExpressionEngine)>(r2);

     label2:
        return r3;

     label3:
        $r1 = new org.apache.commons.configuration.HierarchicalConfiguration;

        specialinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: void <init>()>();

        if r2 == null goto label4;

        virtualinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: void setExpressionEngine(org.apache.commons.configuration.tree.ExpressionEngine)>(r2);

     label4:
        $z1 = virtualinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: boolean isDelimiterParsingDisabled()>();

        virtualinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: void setDelimiterParsingDisabled(boolean)>(1);

        virtualinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: void append(org.apache.commons.configuration.Configuration)>(r0);

        virtualinvoke $r1.<org.apache.commons.configuration.HierarchicalConfiguration: void setDelimiterParsingDisabled(boolean)>($z1);

        return $r1;
    }

    public static org.apache.commons.configuration.Configuration cloneConfiguration(org.apache.commons.configuration.Configuration) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        org.apache.commons.configuration.Configuration r0, $r2;
        org.apache.commons.configuration.ConfigurationRuntimeException $r4;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r3;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.lang.Object clone(java.lang.Object)>(r0);

        $r2 = (org.apache.commons.configuration.Configuration) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r4.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static java.lang.Object clone(java.lang.Object) throws java.lang.CloneNotSupportedException
    {
        java.lang.NoSuchMethodException $r15;
        java.lang.CloneNotSupportedException $r1, $r16;
        java.lang.StringBuffer $r2, $r5, $r6, $r17, $r18, $r21;
        java.lang.String $r4, $r7, $r20, $r22;
        java.lang.reflect.Method $r9;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.lang.reflect.InvocationTargetException $r11;
        org.apache.commons.configuration.ConfigurationRuntimeException $r12, $r14;
        java.lang.Object r0, $r10;
        java.lang.Class $r3, $r8, $r19;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Cloneable;

        if $z0 == 0 goto label6;

     label1:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", null);

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, null);

     label2:
        return $r10;

     label3:
        $r15 := @caughtexception;

        $r16 = new java.lang.CloneNotSupportedException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No clone() method found for class");

        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r14.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label5:
        $r11 := @caughtexception;

        $r12 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r12.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label6:
        $r1 = new java.lang.CloneNotSupportedException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not implement Cloneable");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r7);

        throw $r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static java.net.URL getURL(java.lang.String, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.MalformedURLException $r7;
        java.net.URL $r3, $r4, $r5, $r6, $r9;
        java.io.File $r0, $r8;
        java.lang.String r1, r2;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r0);

        return $r6;

     label1:
        if r2 != null goto label3;

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>(r1);

     label2:
        return $r5;

     label3:
        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r2);

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r1);

     label4:
        return $r4;

     label5:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>(r2, r1);

        $r9 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r8);

        return $r9;

        catch java.net.MalformedURLException from label1 to label2 with label5;
        catch java.net.MalformedURLException from label3 to label4 with label5;
    }

    static java.io.File constructFile(java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r3, $r5, $r6, $r8;
        java.lang.String r0, r1, $r4, $r7, $r9, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.io.File $r2, $r10, $r14, r15, r16;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r15 = null;

        if r0 == null goto label1;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r0);

        r15 = $r14;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        if r15 == null goto label3;

        $z3 = virtualinvoke r15.<java.io.File: boolean isAbsolute()>();

        if $z3 == 0 goto label3;

     label2:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        r16 = $r2;

        goto label7;

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = <java.io.File: java.lang.String separator>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r4);

        if $z1 != 0 goto label4;

        $r13 = <java.io.File: java.lang.String separator>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label4:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = <java.io.File: java.lang.String separator>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z2 == 0 goto label5;

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label6;

     label5:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

     label6:
        $r10 = new java.io.File;

        $r11 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        r16 = $r10;

     label7:
        return r16;
    }

    public static java.net.URL locate(java.lang.String)
    {
        java.lang.String r0;
        java.net.URL $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(java.lang.String,java.lang.String)>(null, r0);

        return $r1;
    }

    public static java.net.URL locate(java.lang.String, java.lang.String)
    {
        java.net.URL $r3, $r4, $r25, r39;
        java.lang.NullPointerException r45;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable $r38;
        java.lang.StringBuffer $r8, $r10, $r11, $r14, $r16, $r17, $r20, $r22, $r23, $r26, $r27, $r28, $r41, $r42, $r43;
        java.lang.String r1, r2, $r6, $r12, $r18, $r24, $r30, $r44;
        java.net.MalformedURLException $r31, $r33, $r35;
        java.io.IOException $r37;
        java.io.File $r7, $r13, $r19;
        org.apache.commons.logging.Log $r0, $r9, $r15, $r21, $r29, $r32, $r34, $r36, $r40;
        java.io.InputStream $r5;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ConfigurationUtils.locate(): base is ");

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", name is ");

        virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r29 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r30 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

     label01:
        if r1 != null goto label02;

        return null;

     label02:
        if r2 != null goto label03;

        $r25 = new java.net.URL;

        specialinvoke $r25.<java.net.URL: void <init>(java.lang.String)>(r1);

        r39 = $r25;

        goto label09;

     label03:
        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r2);

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r1);

        r39 = $r4;

     label04:
        $r5 = virtualinvoke $r4.<java.net.URL: java.io.InputStream openStream()>();

     label05:
        if $r5 == null goto label09;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        goto label09;

     label06:
        $r38 := @caughtexception;

     label07:
        if null == null goto label08;

        r45 = new java.lang.NullPointerException;

        specialinvoke r45.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke in#5.<java.io.InputStream: void close()>()");

        throw r45;

     label08:
        throw $r38;

     label09:
        $r40 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the URL ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r39);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r44);

     label10:
        goto label12;

     label11:
        $r37 := @caughtexception;

        r39 = null;

     label12:
        if r39 != null goto label16;

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>(r1);

        $z3 = virtualinvoke $r19.<java.io.File: boolean isAbsolute()>();

        if $z3 == 0 goto label16;

        $z4 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label16;

     label13:
        r39 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r19);

        $r21 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the absolute path ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label14:
        goto label16;

     label15:
        $r35 := @caughtexception;

        $r36 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not obtain URL from file", $r35);

     label16:
        if r39 != null goto label21;

     label17:
        $r13 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>(r2, r1);

        if $r13 == null goto label18;

        $z2 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label18;

        r39 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r13);

     label18:
        if r39 == null goto label19;

        $r15 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the path ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label19:
        goto label21;

     label20:
        $r33 := @caughtexception;

        $r34 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not obtain URL from file", $r33);

     label21:
        if r39 != null goto label26;

     label22:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r7 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>($r6, r1);

        if $r7 == null goto label23;

        $z1 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label23;

        r39 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r7);

     label23:
        if r39 == null goto label24;

        $r9 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the home path ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label24:
        goto label26;

     label25:
        $r31 := @caughtexception;

        $r32 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r32.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not obtain URL from file", $r31);

     label26:
        if r39 != null goto label27;

        r39 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locateFromClasspath(java.lang.String)>(r1);

     label27:
        return r39;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label02 to label10 with label11;
        catch java.net.MalformedURLException from label13 to label14 with label15;
        catch java.net.MalformedURLException from label17 to label19 with label20;
        catch java.net.MalformedURLException from label22 to label24 with label25;
    }

    static java.net.URL locateFromClasspath(java.lang.String)
    {
        java.net.URL $r3, $r10, r17;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r11, $r13, $r14, $r15;
        java.lang.Thread $r0;
        java.lang.String r2, $r9, $r16;
        org.apache.commons.logging.Log $r5, $r12;
        java.lang.ClassLoader $r1;

        r2 := @parameter0: java.lang.String;

        r17 = null;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r1 == null goto label1;

        $r10 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2);

        r17 = $r10;

        if $r10 == null goto label1;

        $r12 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the context classpath (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label1:
        if r17 != null goto label2;

        $r3 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r2);

        r17 = $r3;

        if $r3 == null goto label2;

        $r5 = <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading configuration from the system classpath (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label2:
        return r17;
    }

    static java.lang.String getBasePath(java.net.URL)
    {
        java.net.URL r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.net.URL;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>();

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>($r2);

        if $z1 == 0 goto label3;

     label2:
        return $r1;

     label3:
        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r3;
    }

    static java.lang.String getFileName(java.net.URL)
    {
        java.net.URL r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.net.URL;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z1 == 0 goto label3;

     label2:
        return null;

     label3:
        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i1 = $i0 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    public static java.io.File getFile(java.lang.String, java.lang.String)
    {
        java.net.MalformedURLException $r7, $r8;
        java.net.URL $r2, $r3, $r9, r10;
        java.io.File $r0, $r5, $r6;
        java.lang.String r1, r4;
        boolean $z0;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r2 = new java.net.URL;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r4);

        specialinvoke $r2.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r1);

        r10 = $r2;

     label2:
        goto label7;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = new java.net.URL;

        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>(r1);

        r10 = $r9;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r10 = null;

     label7:
        if r10 == null goto label8;

        $r6 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>(r10);

        return $r6;

     label8:
        $r5 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>(r4, r1);

        return $r5;

        catch java.net.MalformedURLException from label1 to label2 with label3;
        catch java.net.MalformedURLException from label4 to label5 with label6;
    }

    public static java.io.File fileFromURL(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1, $r2, $r4, $r5;
        java.io.File $r3;
        boolean $z0;

        r0 := @parameter0: java.net.URL;

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new java.io.File;

        $r4 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>();

        $r5 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String)>($r4);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        return $r3;

     label1:
        return null;
    }

    static java.net.URL toURL(java.io.File) throws java.net.MalformedURLException
    {
        java.net.URL $r1, r12;
        java.lang.String $r15;
        java.lang.reflect.Method $r4, $r9;
        boolean $z0;
        java.net.MalformedURLException $r14;
        java.lang.Class[] $r3, $r5, $r8, $r10;
        java.io.File r0;
        java.lang.Exception $r13;
        java.lang.Class $r2, $r7;
        java.lang.Object $r6, $r11;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <org.apache.commons.lang.SystemUtils: boolean isJavaVersionAtLeast(float)>(1.4F);

        if $z0 == 0 goto label4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toURI", $r3);

        $r5 = (java.lang.Class[]) null;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = (java.lang.Class[]) null;

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toURL", $r8);

        $r10 = (java.lang.Class[]) null;

        $r11 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r10);

        r12 = (java.net.URL) $r11;

     label2:
        return r12;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.net.MalformedURLException;

        $r15 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r14.<java.net.MalformedURLException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label4:
        $r1 = virtualinvoke r0.<java.io.File: java.net.URL toURL()>();

        return $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void enableRuntimeExceptions(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0;
        org.apache.commons.configuration.ConfigurationUtils$1 $r1;
        org.apache.commons.configuration.event.EventSource $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        $z0 = r0 instanceof org.apache.commons.configuration.event.EventSource;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Configuration must be derived from EventSource!");

        throw $r3;

     label1:
        $r2 = (org.apache.commons.configuration.event.EventSource) r0;

        $r1 = new org.apache.commons.configuration.ConfigurationUtils$1;

        specialinvoke $r1.<org.apache.commons.configuration.ConfigurationUtils$1: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.configuration.event.EventSource: void addErrorListener(org.apache.commons.configuration.event.ConfigurationErrorListener)>($r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.configuration.ConfigurationUtils: float JAVA_1_4> = 1.4F;

        <org.apache.commons.configuration.ConfigurationUtils: java.lang.String METHOD_CLONE> = "clone";

        <org.apache.commons.configuration.ConfigurationUtils: java.lang.String RESOURCE_PATH_SEPARATOR> = "/";

        <org.apache.commons.configuration.ConfigurationUtils: java.lang.String PROTOCOL_FILE> = "file";

        $r0 = <org.apache.commons.configuration.ConfigurationUtils: java.lang.Class class$org$apache$commons$configuration$ConfigurationUtils>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.lang.Class class$(java.lang.String)>("org.apache.commons.configuration.ConfigurationUtils");

        <org.apache.commons.configuration.ConfigurationUtils: java.lang.Class class$org$apache$commons$configuration$ConfigurationUtils> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.configuration.ConfigurationUtils: java.lang.Class class$org$apache$commons$configuration$ConfigurationUtils>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.logging.Log log> = $r1;

        return;
    }
}
