public class org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory extends javax.xml.parsers.SAXParserFactory
{
    private java.util.Map featureMap;
    private static java.lang.Boolean TRUE;
    private static java.lang.Boolean FALSE;
    private org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser;
    private javax.xml.parsers.SAXParserFactory validatingFactory;
    private static final java.lang.String VALIDATING_PROPERTY;
    private static java.lang.Class validatingFactoryClass;
    private javax.xml.parsers.ParserConfigurationException pendingValidatingException;
    private javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException;
    private boolean validating;
    private boolean namespaceAware;

    public static javax.xml.parsers.SAXParserFactory newInstance()
    {
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory $r0;

        $r0 = new org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        specialinvoke $r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: void <init>()>();

        return $r0;
    }

    public void <init>()
    {
        javax.xml.parsers.SAXParserFactory $r6, $r7, $r8;
        java.util.HashMap $r1;
        java.lang.Exception $r9;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        org.apache.xmlbeans.impl.piccolo.xml.Piccolo $r2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        specialinvoke r0.<javax.xml.parsers.SAXParserFactory: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.util.Map featureMap> = $r1;

        $r2 = new org.apache.xmlbeans.impl.piccolo.xml.Piccolo;

        specialinvoke $r2.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: void <init>()>();

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser> = $r2;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException> = null;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException> = null;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating> = 0;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean namespaceAware> = 0;

     label1:
        $r3 = <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Class validatingFactoryClass>;

        if $r3 == null goto label2;

        $r4 = <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Class validatingFactoryClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (javax.xml.parsers.SAXParserFactory) $r5;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory> = $r6;

        $r7 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        virtualinvoke $r7.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(0);

        $r8 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        virtualinvoke $r8.<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory> = null;

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: void setNamespaceAware(boolean)>(0);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean getFeature(java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        javax.xml.parsers.SAXParserFactory $r3, $r4;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        org.apache.xmlbeans.impl.piccolo.xml.Piccolo $r2;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        $z2 = virtualinvoke $r4.<javax.xml.parsers.SAXParserFactory: boolean getFeature(java.lang.String)>(r1);

        return $z2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser>;

        $z1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: boolean getFeature(java.lang.String)>(r1);

        return $z1;
    }

    public javax.xml.parsers.SAXParser newSAXParser() throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException
    {
        javax.xml.parsers.SAXParserFactory $r6, $r8;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        javax.xml.parsers.ParserConfigurationException $r1, $r5, $r7, $r10, $r11;
        org.apache.xmlbeans.impl.piccolo.xml.Piccolo $r3, $r4;
        javax.xml.parsers.SAXParser $r9;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory$JAXPSAXParser $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        $z0 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        if $r6 != null goto label1;

        $r11 = new javax.xml.parsers.ParserConfigurationException;

        specialinvoke $r11.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>("XML document validation is not supported");

        throw $r11;

     label1:
        $r7 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException>;

        if $r7 == null goto label2;

        $r10 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException>;

        throw $r10;

     label2:
        $r8 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        $r9 = virtualinvoke $r8.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        return $r9;

     label3:
        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException>;

        if $r1 == null goto label4;

        $r5 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException>;

        throw $r5;

     label4:
        $r2 = new org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory$JAXPSAXParser;

        $r3 = new org.apache.xmlbeans.impl.piccolo.xml.Piccolo;

        $r4 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser>;

        specialinvoke $r3.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: void <init>(org.apache.xmlbeans.impl.piccolo.xml.Piccolo)>($r4);

        specialinvoke $r2.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory$JAXPSAXParser: void <init>(org.apache.xmlbeans.impl.piccolo.xml.Piccolo)>($r3);

        return $r2;
    }

    public void setFeature(java.lang.String, boolean) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        javax.xml.parsers.SAXParserFactory $r3, $r9;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        java.util.Map $r2;
        java.lang.Boolean $r11;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        javax.xml.parsers.ParserConfigurationException $r4, $r5, $r6, $r7, $r8, $r10, $r12;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.util.Map featureMap>;

        if z0 == 0 goto label1;

        $r11 = <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r11 = <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Boolean FALSE>;

     label2:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

        $r3 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        if $r3 == null goto label6;

        $r8 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException>;

        if $r8 == null goto label3;

        specialinvoke r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: void reconfigureValidating()>();

        goto label6;

     label3:
        $r9 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        virtualinvoke $r9.<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>(r1, z0);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException> = $r10;

     label6:
        $r12 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException>;

        if $r12 == null goto label7;

        specialinvoke r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: void reconfigureNonvalidating()>();

     label7:
        $z1 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating>;

        if $z1 == 0 goto label8;

        $r6 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException>;

        if $r6 == null goto label8;

        $r7 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException>;

        throw $r7;

     label8:
        $z2 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating>;

        if $z2 != 0 goto label9;

        $r4 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException>;

        if $r4 == null goto label9;

        $r5 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException>;

        throw $r5;

     label9:
        return;

        catch javax.xml.parsers.ParserConfigurationException from label3 to label4 with label5;
    }

    public void setNamespaceAware(boolean)
    {
        org.xml.sax.SAXNotSupportedException $r11;
        javax.xml.parsers.SAXParserFactory $r3, $r18;
        org.xml.sax.SAXNotRecognizedException $r4;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        java.lang.StringBuffer $r6, $r7, $r9, $r13, $r14, $r16;
        java.lang.String $r8, $r10, $r15, $r17;
        boolean z0, $z1;
        javax.xml.parsers.ParserConfigurationException $r5, $r12;
        org.apache.xmlbeans.impl.piccolo.xml.Piccolo $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(z0);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean namespaceAware> = z0;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", z0);

        $r2 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser>;

        if z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke $r2.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespace-prefixes", $z1);

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        $r12 = new javax.xml.parsers.ParserConfigurationException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error setting namespace feature: ");

        $r15 = virtualinvoke $r11.<org.xml.sax.SAXNotSupportedException: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r17);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException> = $r12;

        goto label7;

     label6:
        $r4 := @caughtexception;

        $r5 = new javax.xml.parsers.ParserConfigurationException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error setting namespace feature: ");

        $r8 = virtualinvoke $r4.<org.xml.sax.SAXNotRecognizedException: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r10);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException> = $r5;

     label7:
        $r18 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        if $r18 == null goto label8;

        $r3 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        virtualinvoke $r3.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(z0);

     label8:
        return;

        catch org.xml.sax.SAXNotSupportedException from label1 to label4 with label5;
        catch org.xml.sax.SAXNotRecognizedException from label1 to label4 with label6;
    }

    public void setValidating(boolean)
    {
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)>(z0);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: boolean validating> = z0;

        return;
    }

    private static java.lang.Class findValidatingFactory()
    {
        java.util.Enumeration $r12;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r0, $r1, $r4, $r7, $r10, $r18, r26;
        boolean $z0, $z1, $z2;
        java.util.Properties $r16;
        java.io.FileInputStream $r17;
        java.io.File $r11;
        java.lang.Exception $r22, $r24, $r25;
        java.lang.Class $r13, $r15, $r19, $r20;
        java.lang.Object $r14;
        java.lang.ClassNotFoundException $r21, $r23;

     label01:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.xmlbeans.impl.piccolo.xml.ValidatingSAXParserFactory");

        if $r0 == null goto label03;

        $r20 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label02:
        return $r20;

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

     label05:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r4 = <java.io.File: java.lang.String separator>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lib");

        $r7 = <java.io.File: java.lang.String separator>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("jaxp.properties");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r10);

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label07;

        $r16 = new java.util.Properties;

        specialinvoke $r16.<java.util.Properties: void <init>()>();

        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.io.File)>($r11);

        virtualinvoke $r16.<java.util.Properties: void load(java.io.InputStream)>($r17);

        $r18 = virtualinvoke $r16.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.xmlbeans.impl.piccolo.xml.ValidatingSAXParserFactory");

        if $r18 == null goto label07;

        $r19 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r18);

     label06:
        return $r19;

     label07:
        goto label09;

     label08:
        $r24 := @caughtexception;

     label09:
        $r12 = staticinvoke <org.apache.xmlbeans.impl.piccolo.util.FactoryServiceFinder: java.util.Enumeration findServices(java.lang.String)>("javax.xml.parsers.SAXParserFactory");

     label10:
        $z2 = interfaceinvoke $r12.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label15;

     label11:
        $r14 = interfaceinvoke $r12.<java.util.Enumeration: java.lang.Object nextElement()>();

        r26 = (java.lang.String) $r14;

        $z1 = virtualinvoke r26.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.xmlbeans.impl.piccolo.xml.Piccolo");

        if $z1 != 0 goto label13;

        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r26);

     label12:
        return $r15;

     label13:
        goto label10;

     label14:
        $r23 := @caughtexception;

        goto label10;

     label15:
        goto label17;

     label16:
        $r22 := @caughtexception;

     label17:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.crimson.jaxp.SAXParserFactoryImpl");

     label18:
        return $r13;

     label19:
        $r21 := @caughtexception;

        return null;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.ClassNotFoundException from label11 to label12 with label14;
        catch java.lang.Exception from label09 to label12 with label16;
        catch java.lang.Exception from label13 to label15 with label16;
        catch java.lang.ClassNotFoundException from label17 to label18 with label19;
    }

    private void reconfigureValidating()
    {
        org.xml.sax.SAXNotSupportedException $r12;
        javax.xml.parsers.SAXParserFactory $r1, $r7;
        org.xml.sax.SAXNotRecognizedException $r15;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        java.util.Map $r2;
        java.lang.Boolean $r11;
        java.lang.String $r9, $r14, $r17;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        javax.xml.parsers.ParserConfigurationException $r13, $r16, $r18;
        java.lang.Object $r5, $r8, $r10;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.util.Map featureMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.SAXParserFactory validatingFactory>;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Boolean) $r10;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r7.<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>($r9, $z1);

        goto label2;

     label3:
        goto label7;

     label4:
        $r18 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException> = $r18;

        goto label7;

     label5:
        $r15 := @caughtexception;

        $r16 = new javax.xml.parsers.ParserConfigurationException;

        $r17 = virtualinvoke $r15.<org.xml.sax.SAXNotRecognizedException: java.lang.String toString()>();

        specialinvoke $r16.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r17);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException> = $r16;

        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new javax.xml.parsers.ParserConfigurationException;

        $r14 = virtualinvoke $r12.<org.xml.sax.SAXNotSupportedException: java.lang.String toString()>();

        specialinvoke $r13.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r14);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingValidatingException> = $r13;

     label7:
        return;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label3 with label4;
        catch org.xml.sax.SAXNotRecognizedException from label1 to label3 with label5;
        catch org.xml.sax.SAXNotSupportedException from label1 to label3 with label6;
    }

    private void reconfigureNonvalidating()
    {
        org.xml.sax.SAXNotSupportedException $r11;
        org.xml.sax.SAXNotRecognizedException $r14;
        org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory r0;
        java.util.Map $r1;
        java.lang.Boolean $r10;
        java.lang.String $r8, $r13, $r16;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        javax.xml.parsers.ParserConfigurationException $r12, $r15;
        org.apache.xmlbeans.impl.piccolo.xml.Piccolo $r6;
        java.lang.Object $r4, $r7, $r9;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.util.Map featureMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: org.apache.xmlbeans.impl.piccolo.xml.Piccolo nvParser>;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.Boolean) $r9;

        $z1 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r6.<org.apache.xmlbeans.impl.piccolo.xml.Piccolo: void setFeature(java.lang.String,boolean)>($r8, $z1);

        goto label2;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        $r15 = new javax.xml.parsers.ParserConfigurationException;

        $r16 = virtualinvoke $r14.<org.xml.sax.SAXNotRecognizedException: java.lang.String toString()>();

        specialinvoke $r15.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r16);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException> = $r15;

        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new javax.xml.parsers.ParserConfigurationException;

        $r13 = virtualinvoke $r11.<org.xml.sax.SAXNotSupportedException: java.lang.String toString()>();

        specialinvoke $r12.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r13);

        r0.<org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: javax.xml.parsers.ParserConfigurationException pendingNonvalidatingException> = $r12;

     label6:
        return;

        catch org.xml.sax.SAXNotRecognizedException from label1 to label3 with label4;
        catch org.xml.sax.SAXNotSupportedException from label1 to label3 with label5;
    }

    static void <clinit>()
    {
        java.lang.Boolean $r0, $r1;
        java.lang.Class $r2;

        <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.String VALIDATING_PROPERTY> = "org.apache.xmlbeans.impl.piccolo.xml.ValidatingSAXParserFactory";

        $r0 = new java.lang.Boolean;

        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>(1);

        <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Boolean TRUE> = $r0;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(0);

        <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Boolean FALSE> = $r1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Class findValidatingFactory()>();

        <org.apache.xmlbeans.impl.piccolo.xml.JAXPSAXParserFactory: java.lang.Class validatingFactoryClass> = $r2;

        return;
    }
}
