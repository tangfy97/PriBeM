public class com.hp.hpl.jena.sparql.util.NodeFactoryExtra extends java.lang.Object
{
    private static final org.apache.jena.riot.system.PrefixMap prefixMappingDefault;
    private static org.apache.jena.riot.system.PrefixMap pmapEmpty;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.NodeFactoryExtra r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeFactoryExtra;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Node parseNode(java.lang.String)
    {
        java.lang.String r0;
        org.apache.jena.riot.system.PrefixMap $r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: org.apache.jena.riot.system.PrefixMap prefixMappingDefault>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node parseNode(java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node parseNode(java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        org.apache.jena.riot.RiotException $r6, $r11, $r16, $r21;
        com.hp.hpl.jena.graph.Node $r4;
        org.apache.jena.riot.tokens.Token $r2;
        org.apache.jena.riot.system.PrefixMap r3;
        int $i0;
        java.lang.String r0, $r5, $r10, $r15, $r20;
        boolean $z0, $z1, $z2;
        org.apache.jena.riot.tokens.Tokenizer $r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerString(java.lang.String)>(r0);

        $z0 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r21 = new org.apache.jena.riot.RiotException;

        specialinvoke $r21.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>("Empty RDF term");

        throw $r21;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: org.apache.jena.riot.tokens.Token next()>();

        $r4 = virtualinvoke $r2.<org.apache.jena.riot.tokens.Token: com.hp.hpl.jena.graph.Node asNode(org.apache.jena.riot.system.PrefixMap)>(r3);

        if $r4 != null goto label2;

        $r16 = new org.apache.jena.riot.RiotException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad RDF Term: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label2:
        $z1 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = new org.apache.jena.riot.RiotException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trailing characters in string: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label3:
        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 == 0 goto label4;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(32);

        if $i0 < 0 goto label4;

        $r6 = new org.apache.jena.riot.RiotException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Space(s) in  IRI: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return $r4;
    }

    private static com.hp.hpl.jena.query.QueryParseException makeException(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String r1;
        com.hp.hpl.jena.query.QueryParseException $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.query.QueryParseException;

        specialinvoke $r0.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.datatypes.RDFDatatype r5;
        java.lang.String r0, r3, r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r4 == null goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label1;

        r4 = null;

     label1:
        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

        r3 = null;

     label2:
        r5 = null;

        if r4 == null goto label3;

        $r2 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        r5 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r4);

     label3:
        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r3, r5);

        return $r1;
    }

    public static int nodeToInt(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        int $i0;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.Number $r4;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z0 != 0 goto label1;

        return -2147483648;

     label1:
        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public static long nodeToLong(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        java.lang.Object $r3;
        long $l0;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.Number $r4;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z0 != 0 goto label1;

        return -9223372036854775808L;

     label1:
        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public static float nodeToFloat(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        float $f0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.Number $r4;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z0 != 0 goto label1;

        return #NaNF;

     label1:
        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public static double nodeToDouble(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.Number $r4;
        boolean $z0;
        double $d0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public static com.hp.hpl.jena.graph.Node intToNode(int)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        int i0;
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, "", $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node intToNode(long)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        long l0;
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, "", $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node floatToNode(float)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        float f0;
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;

        f0 := @parameter0: float;

        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, "", $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node doubleToNode(double)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, "", $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node dateTimeToNode(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateTimeString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node dateToNode(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node timeToNode(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDTimeString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node nowAsDateTime()
    {
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String nowAsXSDDateTimeString()>();

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, null, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node todayAsDate()
    {
        java.lang.String $r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String todayAsXSDDateString()>();

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r0, null, $r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.jena.riot.system.PrefixMap $r1, $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapRead()>();

        $r1 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap createForInput(com.hp.hpl.jena.shared.PrefixMapping)>($r0);

        <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: org.apache.jena.riot.system.PrefixMap prefixMappingDefault> = $r1;

        $r2 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap create()>();

        <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: org.apache.jena.riot.system.PrefixMap pmapEmpty> = $r2;

        return;
    }
}
