final class kodkod.util.ints.IntRange$TwoPointRange extends kodkod.util.ints.IntRange
{
    private final int min;
    private final int max;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/util/ints/IntRange$TwoPointRange;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.util.ints.IntRange$TwoPointRange: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int)
    {
        kodkod.util.ints.IntRange$TwoPointRange r0;
        int i0, i1;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.IntRange$TwoPointRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<kodkod.util.ints.IntRange: void <init>(kodkod.util.ints.IntRange)>(null);

        $z0 = <kodkod.util.ints.IntRange$TwoPointRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 < i1 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<kodkod.util.ints.IntRange$TwoPointRange: int min> = i0;

        r0.<kodkod.util.ints.IntRange$TwoPointRange: int max> = i1;

        return;
    }

    public final int min()
    {
        int $i0;
        kodkod.util.ints.IntRange$TwoPointRange r0;

        r0 := @this: kodkod.util.ints.IntRange$TwoPointRange;

        $i0 = r0.<kodkod.util.ints.IntRange$TwoPointRange: int min>;

        return $i0;
    }

    public final int max()
    {
        int $i0;
        kodkod.util.ints.IntRange$TwoPointRange r0;

        r0 := @this: kodkod.util.ints.IntRange$TwoPointRange;

        $i0 = r0.<kodkod.util.ints.IntRange$TwoPointRange: int max>;

        return $i0;
    }
}
