abstract class org.apache.lucene.util.packed.AbstractBlockPackedWriter extends java.lang.Object
{
    static final int MAX_BLOCK_SIZE;
    static final int MIN_VALUE_EQUALS_0;
    static final int BPV_SHIFT;
    protected org.apache.lucene.store.DataOutput out;
    protected final long[] values;
    protected byte[] blocks;
    protected int off;
    protected long ord;
    protected boolean finished;
    static final boolean $assertionsDisabled;

    static void checkBlockSize(int)
    {
        int i0, $i1, $i2;
        java.lang.String $r4, $r9, $r14;
        java.lang.IllegalArgumentException $r0, $r5, $r10;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r11, $r12, $r13;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        if i0 <= 134217728 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockSize must be > 0 and < 134217728, got ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        if i0 >= 64 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockSize must be >= 64, got ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $i1 = i0 - 1;

        $i2 = i0 & $i1;

        if $i2 == 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockSize must be a power of two, got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        return;
    }

    static long zigZagEncode(long)
    {
        long l0, $l1, $l2, $l3;

        l0 := @parameter0: long;

        $l2 = l0 >> 63;

        $l1 = l0 << 1;

        $l3 = $l2 ^ $l1;

        return $l3;
    }

    static void writeVLong(org.apache.lucene.store.DataOutput, long) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r0;
        long $l0, $l5, $l6, l9;
        byte $b1, $b3, $b8;
        int $i2, $i4, $i7, i10;

        r0 := @parameter0: org.apache.lucene.store.DataOutput;

        l9 := @parameter1: long;

        i10 = 0;

     label1:
        $l0 = l9 & -128L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $i4 = i10;

        i10 = i10 + 1;

        if $i4 >= 8 goto label2;

        $l5 = l9 & 127L;

        $l6 = $l5 | 128L;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        virtualinvoke r0.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b8);

        l9 = l9 >>> 7;

        goto label1;

     label2:
        $i2 = (int) l9;

        $b3 = (byte) $i2;

        virtualinvoke r0.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b3);

        return;
    }

    public void <init>(org.apache.lucene.store.DataOutput, int)
    {
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        long[] $r2;
        org.apache.lucene.store.DataOutput r1;
        int i0;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.lucene.util.packed.AbstractBlockPackedWriter: void checkBlockSize(int)>(i0);

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>(r1);

        $r2 = newarray (long)[i0];

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values> = $r2;

        return;
    }

    public void reset(org.apache.lucene.store.DataOutput)
    {
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        org.apache.lucene.store.DataOutput r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        $z0 = <org.apache.lucene.util.packed.AbstractBlockPackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: org.apache.lucene.store.DataOutput out> = r1;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off> = 0;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord> = 0L;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: boolean finished> = 0;

        return;
    }

    private void checkNotFinished()
    {
        java.lang.IllegalStateException $r1;
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        $z0 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: boolean finished>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already finished");

        throw $r1;

     label1:
        return;
    }

    public void add(long) throws java.io.IOException
    {
        long l4, $l5, $l6;
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        long[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        l4 := @parameter0: long;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void checkNotFinished()>();

        $i1 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void flush()>();

     label1:
        $r2 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i2 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off> = $i3;

        $r2[$i2] = l4;

        $l5 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord>;

        $l6 = $l5 + 1L;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord> = $l6;

        return;
    }

    void addBlockOfZeros() throws java.io.IOException
    {
        java.lang.IllegalStateException $r6;
        long $l5, $l6, $l7;
        long[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, $i10;
        java.lang.String $r10;
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void checkNotFinished()>();

        $i0 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        if $i0 == 0 goto label1;

        $i9 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r5 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i8 = lengthof $r5;

        if $i9 == $i8 goto label1;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i10 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $i2 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void flush()>();

     label2:
        $r2 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r2, 0L);

        $r3 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i3 = lengthof $r3;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off> = $i3;

        $l6 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord>;

        $r4 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i4 = lengthof $r4;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord> = $l7;

        return;
    }

    public void finish() throws java.io.IOException
    {
        int $i0;
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void checkNotFinished()>();

        $i0 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        if $i0 <= 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void flush()>();

     label1:
        r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: boolean finished> = 1;

        return;
    }

    public long ord()
    {
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r0;
        long $l0;

        r0 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        $l0 = r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord>;

        return $l0;
    }

    protected abstract void flush() throws java.io.IOException;

    protected final void writeValues(int) throws java.io.IOException
    {
        byte[] $r4, $r5, $r6, $r9, $r13;
        org.apache.lucene.store.DataOutput $r10;
        long $l7;
        long[] $r3, $r7, $r11, $r12, $r14;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.lucene.util.packed.PackedInts$Format $r0, $r8;
        org.apache.lucene.util.packed.PackedInts$Encoder $r1;
        org.apache.lucene.util.packed.AbstractBlockPackedWriter r2;

        r2 := @this: org.apache.lucene.util.packed.AbstractBlockPackedWriter;

        i0 := @parameter0: int;

        $r0 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r0, 1, i0);

        $r3 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i1 = lengthof $r3;

        $i2 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Encoder: int byteValueCount()>();

        i3 = $i1 / $i2;

        $i4 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Encoder: int byteBlockCount()>();

        i5 = $i4 * i3;

        $r4 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: byte[] blocks>;

        if $r4 == null goto label1;

        $r13 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: byte[] blocks>;

        $i11 = lengthof $r13;

        if $i11 >= i5 goto label2;

     label1:
        $r5 = newarray (byte)[i5];

        r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: byte[] blocks> = $r5;

     label2:
        $i12 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r14 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i13 = lengthof $r14;

        if $i12 >= $i13 goto label3;

        $r12 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i9 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $r11 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $i8 = lengthof $r11;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r12, $i9, $i8, 0L);

     label3:
        $r7 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long[] values>;

        $r6 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: byte[] blocks>;

        interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Encoder: void encode(long[],int,byte[],int,int)>($r7, 0, $r6, 0, i3);

        $r8 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i6 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: int off>;

        $l7 = virtualinvoke $r8.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(1, $i6, i0);

        $i10 = (int) $l7;

        $r10 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        $r9 = r2.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: byte[] blocks>;

        virtualinvoke $r10.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int)>($r9, $i10);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.packed.AbstractBlockPackedWriter: int BPV_SHIFT> = 1;

        <org.apache.lucene.util.packed.AbstractBlockPackedWriter: int MIN_VALUE_EQUALS_0> = 1;

        <org.apache.lucene.util.packed.AbstractBlockPackedWriter: int MAX_BLOCK_SIZE> = 134217728;

        $r0 = class "Lorg/apache/lucene/util/packed/AbstractBlockPackedWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.AbstractBlockPackedWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
