final class org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer extends java.lang.Object
{

    void <init>()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    org.waveprotocol.wave.model.operation.OperationPair transformOperations(org.waveprotocol.wave.model.document.operation.DocOp, org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer r20;
        org.waveprotocol.wave.model.operation.TransformException $r8;
        org.waveprotocol.wave.model.document.operation.DocOp $r5, $r6, r21, r22;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String $r19;
        org.waveprotocol.wave.model.operation.OperationPair $r7;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition $r1, $r2;

        r20 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer;

        r21 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        r22 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: void <init>()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition getPosition1()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition getPosition2()>();

        $r3 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)>($r1);

        $r4 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)>($r2);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget: void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)>($r4);

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget)>($r3);

        i10 = 0;

        i11 = 0;

     label1:
        $i0 = interfaceinvoke r21.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i10 >= $i0 goto label4;

        $i3 = i10;

        i10 = i10 + 1;

        interfaceinvoke r21.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i3, $r3);

     label2:
        $i4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        if $i4 <= 0 goto label1;

        $i5 = interfaceinvoke r22.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i11 < $i5 goto label3;

        $r8 = new org.waveprotocol.wave.model.operation.TransformException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ran out of ");

        $i7 = interfaceinvoke r22.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" noninsertion op components after ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i8 = interfaceinvoke r21.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" insertion op components, with ");

        $i9 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spare positions");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.waveprotocol.wave.model.operation.TransformException: void <init>(java.lang.String)>($r19);

        throw $r8;

     label3:
        $i6 = i11;

        i11 = i11 + 1;

        interfaceinvoke r22.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i6, $r4);

        goto label2;

     label4:
        $i1 = interfaceinvoke r22.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i11 >= $i1 goto label5;

        $i2 = i11;

        i11 = i11 + 1;

        interfaceinvoke r22.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i2, $r4);

        goto label4;

     label5:
        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        $r7 = new org.waveprotocol.wave.model.operation.OperationPair;

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        return $r7;
    }
}
