public class org.eclipse.jdt.internal.compiler.DocumentElementParser extends org.eclipse.jdt.internal.compiler.parser.Parser
{
    org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor;
    private int localIntPtr;
    private int lastFieldEndPosition;
    private int lastFieldBodyEndPosition;
    private int typeStartPosition;
    private long selectorSourcePositions;
    private int typeDims;
    private int extendsDim;
    private int declarationSourceStart;
    int[][] intArrayStack;
    int intArrayPtr;

    public void <init>(org.eclipse.jdt.internal.compiler.IDocumentElementRequestor, org.eclipse.jdt.internal.compiler.IProblemFactory, org.eclipse.jdt.internal.compiler.impl.CompilerOptions)
    {
        int[][] $r6;
        org.eclipse.jdt.internal.compiler.IProblemFactory r4;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r7;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor r5;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.IProblemFactory;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        $r1 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy exitAfterAllProblems()>();

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r2, r3, r4);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r1, 0);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor> = r5;

        $r6 = newarray (int[])[30];

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack> = $r6;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options> = r3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r7.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDocComment> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void setMethodsFullRecovery(boolean)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void setStatementsRecovery(boolean)>(0);

        return;
    }

    public void checkComment()
    {
        int[] $r1, $r5, $r7, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i8, $i10;
        boolean z0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r3, $r4, $r6, $r9;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r8;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        z0 = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i0 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i6 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label5;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        i1 = $r5[i6];

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        $i8 = (int) -1;

        if $i2 == $i8 goto label2;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        if $i5 >= i1 goto label2;

        goto label4;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i3 = $r7[i6];

        if $i3 >= 0 goto label3;

        goto label4;

     label3:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        z0 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDeprecation(int)>(i6);

        goto label6;

     label4:
        $i10 = (int) -1;

        i6 = i6 + $i10;

     label5:
        if i6 >= 0 goto label1;

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkAndSetModifiers(int)>(1048576);

     label7:
        if i0 < 0 goto label8;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i4 = $r10[0];

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart> = $i4;

     label8:
        return;
    }

    protected void consumeClassBodyDeclaration()
    {
        int[][] $r5;
        org.eclipse.jdt.internal.compiler.ast.Block $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Initializer r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyDeclaration()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Initializer) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart>;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r8 = $r5[$i1];

        $i7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        $r6 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i6 = $r6.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i5 = $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptInitializer(int,int,int[],int,int,int,int)>($i3, $i4, $r8, 0, $i7, $i6, $i5);

        return;
    }

    protected void consumeClassDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassDeclaration()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endStatementPosition>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        $r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $i1 = $r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitClass(int,int)>($i2, $i1);

        return;
    }

    protected void consumeClassHeader()
    {
        int[][] $r7, $r14;
        char[][] $r10, $r19, r22;
        int[] $r8, $r17, r23, r24;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] r4;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r18, $r21;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r6, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, $i30, $i32, $i34;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r12, $r15;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9, $r11, $r16, $r20;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeader()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i26 = $i25 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i26;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        r22 = (char[][]) null;

        r23 = (int[]) null;

        r24 = (int[]) null;

        if r4 == null goto label4;

        i27 = lengthof r4;

        r22 = newarray (char[])[i27];

        r23 = newarray (int)[i27];

        r24 = newarray (int)[i27];

        i28 = 0;

        goto label3;

     label2:
        r18 = r4[i28];

        $r19 = virtualinvoke r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r20 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r19, 46);

        r22[i28] = $r20;

        $i23 = r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r23[i28] = $i23;

        $i24 = r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r24[i28] = $i24;

        i28 = i28 + 1;

     label3:
        if i28 < i27 goto label2;

     label4:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i30 = (int) -1;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i30;

        $r21 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference superclass>;

        if $r21 != null goto label5;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i15 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i14;

        $r17 = $r14[$i13];

        $i22 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i21 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeStartPosition>;

        $r16 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $i19 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart>;

        $i18 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i16 = $r15.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i17 = $i16 - 1;

        $i32 = (int) -1;

        $i34 = (int) -1;

        interfaceinvoke $r13.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterClass(int,int[],int,int,int,char[],int,int,char[],int,int,char[][],int[],int[],int)>($i15, $r17, $i22, $i21, $i20, $r16, $i19, $i18, null, $i32, $i34, r22, r23, r24, $i17);

        goto label6;

     label5:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r8 = $r7[$i1];

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i5 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeStartPosition>;

        $r9 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $i7 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart>;

        $i8 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $r10 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r11 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r10, 46);

        $i12 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $i11 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i9 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i10 = $i9 - 1;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterClass(int,int[],int,int,int,char[],int,int,char[],int,int,char[][],int[],int[],int)>($i3, $r8, $i4, $i5, $i6, $r9, $i7, $i8, $r11, $i12, $i11, r22, r23, r24, $i10);

     label6:
        return;
    }

    protected void consumeClassHeaderName1()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7;
        char[][] $r10;
        int[] $r4, $r5, $r12, $r13, $r14, $r15;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r8;
        long $l16, $l18;
        long[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r1;
        char[] $r11;

        r1 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        if $i12 == 0 goto label2;

        $i13 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i14 = $i13 | 1024;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i14;

        goto label2;

     label1:
        $i2 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 256;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void blockReal()>();

     label2:
        $r9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $l16 = $r9[$i15];

        $i17 = (int) $l16;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i17;

        $l18 = $l16 >>> 32;

        $i19 = (int) $l18;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i19;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i21 = $i20 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i21;

        $r11 = $r10[$i20];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r11;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i23 = $i22 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i23;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i24 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i25 = $i24 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i25;

        $i26 = $r12[$i24];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i26;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeStartPosition> = $i26;

        $i27 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i28 = $i27 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i28;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i29 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i30 = $i29 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i30;

        $i31 = $r13[$i29];

        $r14 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i32 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i33 = $i32 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i33;

        $i34 = $r14[$i32];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i34;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i35 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i36 = $i35 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i36;

        $i37 = $r15[$i35];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i37;

        $i38 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        if $i38 <= $i31 goto label3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i31;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i5;

        $i6 = $r5[$i4];

        if $i6 == 0 goto label4;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i10 = $i9 - $i6;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i10;

        $i11 = $i10 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i11, $r8, 0, $i6);

     label4:
        $i7 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i8 = $i7 + 1;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i8;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        $r6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i0, $i1;
        char[] $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] source>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        interfaceinvoke $r3.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitCompilationUnit(int)>($i1);

        return;
    }

    protected void consumeConstructorDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorDeclaration()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endStatementPosition>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitConstructor(int,int)>($i2, $i1);

        return;
    }

    protected void consumeConstructorHeader()
    {
        int[][] $r6;
        char[][] $r11, r16, r17, r24;
        int[] $r9, r18, r19, r20, r21, r25, r26;
        org.eclipse.jdt.internal.compiler.ast.Argument[] r4;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r15;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.Argument r22;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r10, r23;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        long $l4, $l5;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r7;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r8, $r12, $r13, $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorHeader()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i21 = $i20 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i21;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        r16 = (char[][]) null;

        r17 = (char[][]) null;

        r18 = (int[]) null;

        r19 = (int[]) null;

        r20 = (int[]) null;

        r21 = (int[]) null;

        if r4 == null goto label4;

        i22 = lengthof r4;

        r16 = newarray (char[])[i22];

        r17 = newarray (char[])[i22];

        r20 = newarray (int)[i22];

        r21 = newarray (int)[i22];

        r18 = newarray (int)[i22];

        r19 = newarray (int)[i22];

        i23 = 0;

        goto label3;

     label2:
        r22 = r4[i23];

        r23 = r22.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r13 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[] returnTypeName(org.eclipse.jdt.internal.compiler.ast.TypeReference)>(r23);

        r16[i23] = $r13;

        $r14 = r22.<org.eclipse.jdt.internal.compiler.ast.Argument: char[] name>;

        r17[i23] = $r14;

        $i16 = r22.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceStart>;

        r20[i23] = $i16;

        $i17 = r22.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceEnd>;

        r21[i23] = $i17;

        $i18 = r23.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r18[i23] = $i18;

        $i19 = r23.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r19[i23] = $i19;

        i23 = i23 + 1;

     label3:
        if i23 < i22 goto label2;

     label4:
        $r15 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        r24 = (char[][]) null;

        r25 = (int[]) null;

        r26 = (int[]) null;

        if $r15 == null goto label7;

        i13 = lengthof $r15;

        r24 = newarray (char[])[i13];

        r25 = newarray (int)[i13];

        r26 = newarray (int)[i13];

        i24 = 0;

        goto label6;

     label5:
        r10 = $r15[i24];

        $r11 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r12 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r11, 46);

        r24[i24] = $r12;

        $i14 = r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r25[i24] = $i14;

        $i15 = r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r26[i24] = $i15;

        i24 = i24 + 1;

     label6:
        if i24 < i13 goto label5;

     label7:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceStart>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r9 = $r6[$i1];

        $i12 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        $i11 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiersSourceStart>;

        $r8 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: char[] selector>;

        $i10 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart>;

        $l4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions>;

        $l5 = $l4 & 4294967295L;

        $i9 = (int) $l5;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int rParenPos>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i7 = $i6 - 1;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterConstructor(int,int[],int,int,char[],int,int,char[][],int[],int[],char[][],int[],int[],int,char[][],int[],int[],int)>($i3, $r9, $i12, $i11, $r8, $i10, $i9, r16, r18, r19, r17, r20, r21, $i8, r24, r25, r26, $i7);

        return;
    }

    protected void consumeConstructorHeaderName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r12;
        char[][] $r4;
        int[] $r7, $r8, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;
        long $l3, $l18, $l19;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r13;
        long[] $r6;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r1;
        char[] $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $r5 = $r4[$i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: char[] selector> = $r5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i2;

        $l3 = $r6[$i1];

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions> = $l3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i5;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i7;

        $i8 = $r7[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceStart> = $i8;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i10 = $i9 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i10;

        $i11 = $r8[$i9];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiersSourceStart> = $i11;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i13;

        $i14 = $r9[$i12];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers> = $i14;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i16 = $i15 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i16;

        $i17 = $r10[$i15];

        if $i17 == 0 goto label1;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i24 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i25 = $i24 - $i17;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i25;

        $i26 = $i25 + 1;

        $r13 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i17];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i26, $r13, 0, $i17);

     label1:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r11;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l18 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions>;

        $l19 = $l18 >>> 32;

        $i20 = (int) $l19;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart> = $i20;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        $i21 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lParenPos>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd> = $i21;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lParenPos>;

        $i23 = $i22 + 1;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart> = $i23;

        return;
    }

    protected void consumeDefaultModifiers()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i0);

        $i4 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i4);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i1 < 0 goto label1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeDiet()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDiet()>();

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        return;
    }

    protected void consumeEnterCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        interfaceinvoke $r1.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterCompilationUnit()>();

        return;
    }

    protected void consumeEnterVariable()
    {
        char[][] $r34;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, $r12, $r19, $r30, r40;
        long $l0, $l22, $l61, $l72;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r13, $r33;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r5;
        char[] $r14, $r35;
        int[][] $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r24;
        int[] $r2, $r9, $r10, $r15, $r17, $r18, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r32, $r37, $r38;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r43;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] r7, $r16, $r25;
        long[] $r36;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, i78, $i79, i80, $i81, $i83;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r42;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r39, r41;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 != 0 goto label01;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] variablesCounter>;

        $i65 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i66 = $r32[$i65];

        if $i66 == 0 goto label01;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i68 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldBodyEndPosition>;

        $i67 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldEndPosition>;

        interfaceinvoke $r33.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitField(int,int)>($i68, $i67);

     label01:
        $r34 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i69 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $r35 = $r34[$i69];

        $r36 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i70 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i71 = $i70 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i71;

        $l72 = $r36[$i70];

        $r37 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i73 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i74 = $i73 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i74;

        $i75 = $r37[$i73];

        $r38 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i76 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i77 = $r38[$i76];

        if $i77 == 0 goto label02;

        $r42 = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;

        $l61 = $l72 >>> 32;

        $i63 = (int) $l61;

        $i62 = (int) $l72;

        specialinvoke $r42.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: void <init>(char[],int,int)>($r35, $i63, $i62);

        r39 = $r42;

        goto label03;

     label02:
        $r43 = new org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        $l0 = $l72 >>> 32;

        $i2 = (int) $l0;

        $i1 = (int) $l72;

        specialinvoke $r43.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: void <init>(char[],int,int)>($r35, $i2, $i1);

        r39 = $r43;

     label03:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] variablesCounter>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i64 = $r2[$i5];

        if $i64 != 0 goto label06;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i29 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i30 = $r17[$i29];

        if $i30 == 0 goto label04;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i49 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i50 = $i49 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i50;

        $i51 = $r26[$i49];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i51;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i52 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i53 = $i52 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i53;

        $i54 = $r27[$i52];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiersSourceStart> = $i54;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i55 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i56 = $i55 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i56;

        $i57 = $r28[$i55];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i57;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i58 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i59 = $i58 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i59;

        $i60 = $r29[$i58];

        i78 = $i60;

        $r30 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i60);

        r40 = $r30;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r30);

        goto label05;

     label04:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i32 = $i31 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i32;

        $i33 = $r18[$i31];

        i78 = $i33;

        $r19 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i33);

        r40 = $r19;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r19);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i34 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i35 = $i34 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i35;

        $i36 = $r20[$i34];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i36;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i37 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i38 = $i37 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i38;

        $i39 = $r21[$i37];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiersSourceStart> = $i39;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i40 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i41 = $i40 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i41;

        $i42 = $r22[$i40];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i42;

     label05:
        $r23 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i43 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i44 = $i43 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i44;

        $i45 = $r23[$i43];

        if $i45 == 0 goto label07;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i46 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i47 = $i46 - $i45;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i47;

        $i48 = $i47 + 1;

        $r25 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i45];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, $i48, $r25, 0, $i45);

        goto label07;

     label06:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $i7 = $i6 - $i64;

        $r4 = $r3[$i7];

        r40 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r4;

        i78 = virtualinvoke r40.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r6 = $r5[$i8];

        r41 = (org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) $r6;

        $i9 = r41.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart>;

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i9;

        $i10 = r41.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers>;

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i10;

        $i11 = r41.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiersSourceStart>;

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiersSourceStart> = $i11;

        r7 = r41.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if r7 == null goto label07;

        i28 = lengthof r7;

        $r16 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[i28];

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, $r16, 0, i28);

     label07:
        $i79 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr> = $i79;

        if $i75 != 0 goto label08;

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = r40;

        goto label09;

     label08:
        i80 = i78 + $i75;

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r40, i80);

        r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r8;

     label09:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] variablesCounter>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i13 = $r9[$i12];

        $i14 = $i13 + 1;

        $r9[$i12] = $i14;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i16 = $r10[$i15];

        $i17 = $i16 + 1;

        $r10[$i15] = $i17;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r39);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $r15 = $r11[$i18];

        if $z0 != 0 goto label12;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i19 = r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart>;

        $i20 = r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers>;

        $i21 = r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiersSourceStart>;

        $r12 = r39.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r14 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[] returnTypeName(org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r12);

        $i27 = r40.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $i26 = r40.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeDims>;

        $l22 = $l72 >>> 32;

        $i24 = (int) $l22;

        $i23 = (int) $l72;

        if $i75 != 0 goto label10;

        $i83 = (int) -1;

        $i81 = $i83;

        goto label11;

     label10:
        $i81 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

     label11:
        interfaceinvoke $r13.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterField(int,int[],int,int,char[],int,int,int,char[],int,int,int,int)>($i19, $r15, $i20, $i21, $r14, $i27, $i26, $i25, $r35, $i24, $i23, $i75, $i81);

     label12:
        return;
    }

    protected void consumeExitVariableWithInitialization()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r4;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitVariableWithInitialization()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 - 1;

        $r1[$i0] = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldEndPosition> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r4 = $r3[$i5];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) $r4;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        $i6 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldBodyEndPosition> = $i6;

        return;
    }

    protected void consumeExitVariableWithoutInitialization()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitVariableWithoutInitialization()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 - 1;

        $r1[$i0] = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldEndPosition> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldBodyEndPosition> = $i6;

        return;
    }

    protected void consumeFieldDeclaration()
    {
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r2;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;
        int $i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] variablesCounter>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        i1 = $r1[$i0];

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFieldDeclaration()>();

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i3;

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        if i1 == 0 goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldBodyEndPosition>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldEndPosition>;

        interfaceinvoke $r2.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitField(int,int)>($i5, $i4);

     label2:
        return;
    }

    protected void consumeFormalParameter(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7;
        char[][] $r1;
        int[] $r4, $r5, $r10, $r13, $r14;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.Argument $r12;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r6, $r9, r11;
        long l5;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r8;
        long[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        r2 = $r1[$i2];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i4;

        l5 = $r3[$i3];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i7;

        i8 = $r4[$i6];

        i23 = 0;

        if z0 == 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i20 = $i19 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i20;

        i23 = $r10[$i19];

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i10;

        $i21 = $r5[$i9];

        $i22 = $i21 + i8;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i22);

        r11 = $r6;

        if z0 == 0 goto label3;

        $i16 = $i22 + 1;

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r6, $i16);

        r11 = $r9;

        if i8 != 0 goto label2;

        $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = i23;

     label2:
        $i17 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i18 = $i17 | 16384;

        $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i18;

     label3:
        $i24 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i25 = $i24 - 3;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i25;

        $r12 = new org.eclipse.jdt.internal.compiler.ast.Argument;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i26 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i27 = $i26 + 1;

        $i28 = $r13[$i27];

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Argument: void <init>(char[],long,org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r2, l5, r11, $i28);

        $r14 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i29 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i30 = $i29 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i30;

        $i31 = $r14[$i29];

        if $i31 == 0 goto label4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i14 = $i13 - $i31;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i14;

        $i15 = $i14 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i31];

        $r12.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i15, $r8, 0, $i31);

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r12);

        $i11 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i12;

        return;
    }

    protected void consumeInterfaceDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceDeclaration()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endStatementPosition>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        $r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $i1 = $r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitInterface(int,int)>($i2, $i1);

        return;
    }

    protected void consumeInterfaceHeader()
    {
        int[][] $r7;
        char[][] $r12, r14;
        int[] $r10, r15, r16;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] r4;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r11;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i18;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r8;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9, $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceHeader()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i14;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        r14 = (char[][]) null;

        r15 = (int[]) null;

        r16 = (int[]) null;

        i15 = 0;

        if r4 == null goto label2;

        i15 = lengthof r4;

        r14 = newarray (char[])[i15];

        r15 = newarray (int)[i15];

        r16 = newarray (int)[i15];

     label2:
        if r4 == null goto label5;

        i16 = 0;

        goto label4;

     label3:
        r11 = r4[i16];

        $r12 = virtualinvoke r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r13 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r12, 46);

        r14[i16] = $r13;

        $i11 = r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r15[i16] = $i11;

        $i12 = r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r16[i16] = $i12;

        i16 = i16 + 1;

     label4:
        if i16 < i15 goto label3;

     label5:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i18 = (int) -1;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i18;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r10 = $r7[$i1];

        $i10 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i9 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeStartPosition>;

        $r9 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $i7 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart>;

        $i6 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i5 = $i4 - 1;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterInterface(int,int[],int,int,int,char[],int,int,char[][],int[],int[],int)>($i3, $r10, $i10, $i9, $i8, $r9, $i7, $i6, r14, r15, r16, $i5);

        return;
    }

    protected void consumeInterfaceHeaderName1()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7;
        char[][] $r10;
        int[] $r4, $r5, $r12, $r13, $r14, $r15;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r8;
        long $l16, $l18;
        long[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r1;
        char[] $r11;

        r1 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        if $i12 == 0 goto label2;

        $i13 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i14 = $i13 | 1024;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i14;

        goto label2;

     label1:
        $i2 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 256;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void blockReal()>();

     label2:
        $r9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $l16 = $r9[$i15];

        $i17 = (int) $l16;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i17;

        $l18 = $l16 >>> 32;

        $i19 = (int) $l18;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i19;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i21 = $i20 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i21;

        $r11 = $r10[$i20];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r11;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i23 = $i22 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i23;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i24 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i25 = $i24 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i25;

        $i26 = $r12[$i24];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i26;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeStartPosition> = $i26;

        $i27 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i28 = $i27 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i28;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i29 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i30 = $i29 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i30;

        $i31 = $r13[$i29];

        $r14 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i32 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i33 = $i32 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i33;

        $i34 = $r14[$i32];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i34;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i35 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i36 = $i35 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i36;

        $i37 = $r15[$i35];

        $i38 = $i37 | 512;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i38;

        $i39 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        if $i39 <= $i31 goto label3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i31;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i5;

        $i6 = $r5[$i4];

        if $i6 == 0 goto label4;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i10 = $i9 - $i6;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i10;

        $i11 = $i10 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i11, $r8, 0, $i6);

     label4:
        $i7 = $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i8 = $i7 + 1;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i8;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        $r6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeInternalCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        return;
    }

    protected void consumeInternalCompilationUnitWithTypes()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r2, $r5;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r6;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[$i2];

        $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = $r2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr> = $i4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $i6 = $i5 + 1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i6, $r5, 0, $i2);

     label1:
        return;
    }

    protected void consumeLocalVariableDeclaration()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLocalVariableDeclaration()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i1;

        return;
    }

    protected void consumeMethodDeclaration(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodDeclaration(boolean)>(z0);

        $z1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endStatementPosition>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void exitMethod(int,int)>($i2, $i1);

        return;
    }

    protected void consumeMethodHeader()
    {
        char[][] $r12, $r15, $r19, r24, r25, r32;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r23;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r4, r18, r31;
        long $l4, $l5;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r7;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r9;
        char[] $r5, $r10, $r20, $r21, $r22;
        int[][] $r8;
        int[] $r11, $r13, $r14, $r16, $r17, r26, r27, r28, r29, r33, r34;
        org.eclipse.jdt.internal.compiler.ast.Argument[] r6;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.Argument r30;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, $i30, $i32;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeader()>();

        $z0 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean isLocalDeclaration()>();

        if $z0 == 0 goto label1;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i26 = $i25 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i26;

        return;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType>;

        $r5 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[] returnTypeName(org.eclipse.jdt.internal.compiler.ast.TypeReference)>(r4);

        r6 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        r24 = (char[][]) null;

        r25 = (char[][]) null;

        r26 = (int[]) null;

        r27 = (int[]) null;

        r28 = (int[]) null;

        r29 = (int[]) null;

        if r6 == null goto label4;

        i27 = lengthof r6;

        r24 = newarray (char[])[i27];

        r25 = newarray (char[])[i27];

        r28 = newarray (int)[i27];

        r29 = newarray (int)[i27];

        r26 = newarray (int)[i27];

        r27 = newarray (int)[i27];

        i28 = 0;

        goto label3;

     label2:
        r30 = r6[i28];

        r31 = r30.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r21 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[] returnTypeName(org.eclipse.jdt.internal.compiler.ast.TypeReference)>(r31);

        r24[i28] = $r21;

        $r22 = r30.<org.eclipse.jdt.internal.compiler.ast.Argument: char[] name>;

        r25[i28] = $r22;

        $i21 = r30.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceStart>;

        r28[i28] = $i21;

        $i22 = r30.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceEnd>;

        r29[i28] = $i22;

        $i23 = r31.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r26[i28] = $i23;

        $i24 = r31.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r27[i28] = $i24;

        i28 = i28 + 1;

     label3:
        if i28 < i27 goto label2;

     label4:
        $r23 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        r32 = (char[][]) null;

        r33 = (int[]) null;

        r34 = (int[]) null;

        if $r23 == null goto label7;

        i18 = lengthof $r23;

        r33 = newarray (int)[i18];

        r34 = newarray (int)[i18];

        r32 = newarray (char[])[i18];

        i29 = 0;

        goto label6;

     label5:
        r18 = $r23[i29];

        $r19 = virtualinvoke r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r20 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r19, 46);

        r32[i29] = $r20;

        $i19 = r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r33[i29] = $i19;

        $i20 = r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r34[i29] = $i20;

        i29 = i29 + 1;

     label6:
        if i29 < i18 goto label5;

     label7:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceStart>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r11 = $r8[$i1];

        $i17 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers>;

        $i16 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiersSourceStart>;

        $i15 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $i14 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeDims>;

        $r10 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector>;

        $i12 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart>;

        $l4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions>;

        $l5 = $l4 & 4294967295L;

        $i11 = (int) $l5;

        $r12 = r24;

        $r13 = r26;

        $r14 = r27;

        $r15 = r25;

        $r16 = r28;

        $r17 = r29;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int rParenPos>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int extendsDim>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int extendsDim>;

        if $i6 != 0 goto label8;

        $i32 = (int) -1;

        $i30 = $i32;

        goto label9;

     label8:
        $i30 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

     label9:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i8 = $i7 - 1;

        interfaceinvoke $r7.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void enterMethod(int,int[],int,int,char[],int,int,int,char[],int,int,char[][],int[],int[],char[][],int[],int[],int,int,int,char[][],int[],int[],int)>($i3, $r11, $i17, $i16, $r5, $i15, $i14, $i13, $r10, $i12, $i11, $r12, $r13, $r14, $r15, $r16, $r17, $i10, $i9, $i30, r32, r33, r34, $i8);

        return;
    }

    protected void consumeMethodHeaderExtendedDims()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int[] $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r5, $r6;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i2;

        i3 = $r4[$i1];

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int extendsDim> = i3;

        if i3 == 0 goto label1;

        r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd> = $i4;

        $i5 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        i6 = $i5 + i3;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r5, i6);

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = $r6;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int currentToken>;

        if $i7 != 69 goto label1;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

        $i9 = $i8 + 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i9;

     label1:
        return;
    }

    protected void consumeMethodHeaderName(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r13;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r15;
        char[][] $r4;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration $r17;
        int[] $r7, $r9, $r10, $r11, $r12;
        boolean z0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3, $r19;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r18;
        long $l3, $l21, $l22;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r16;
        long[] $r6;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration $r0, r20;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r14;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r1;
        char[] $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r17 = new org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r19);

        r20 = $r17;

        goto label2;

     label1:
        $r0 = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        r20 = $r0;

     label2:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $r5 = $r4[$i0];

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector> = $r5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierPtr> = $i2;

        $l3 = $r6[$i1];

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions> = $l3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int identifierLengthPtr> = $i5;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i7;

        $i8 = $r7[$i6];

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int typeDims> = $i8;

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i8);

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = $r8;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i10 = $i9 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i10;

        $i11 = $r9[$i9];

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceStart> = $i11;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i13;

        $i14 = $r10[$i12];

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiersSourceStart> = $i14;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i16 = $i15 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i16;

        $i17 = $r11[$i15];

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i17;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] expressionLengthStack>;

        $i18 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr>;

        $i19 = $i18 - 1;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionLengthPtr> = $i19;

        $i20 = $r12[$i18];

        if $i20 == 0 goto label3;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i26 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr>;

        $i27 = $i26 - $i20;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int expressionPtr> = $i27;

        $i28 = $i27 + 1;

        $r16 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i20];

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, $i28, $r16, 0, $i20);

     label3:
        $r13 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r13;

        r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l21 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long selectorSourcePositions>;

        $l22 = $l21 >>> 32;

        $i23 = (int) $l22;

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart> = $i23;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r20);

        $r14 = r1.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i24 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i25 = $i24 - 1;

        r20.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i25;

        return;
    }

    protected void consumeModifiers()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i1);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i2 < 0 goto label1;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label2;

     label1:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void resetModifiers()>();

        return;
    }

    protected void consumePackageDeclarationName()
    {
        int[][] $r5;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r3;
        char[][] $r7;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageDeclarationName()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i1;

        $r6 = $r5[$i0];

        $r7 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r8 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r7, 46);

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptPackage(int,int,int[],char[],int)>($i2, $i3, $r6, $r8, $i4);

        return;
    }

    protected void consumePackageDeclarationNameWithModifiers()
    {
        int[][] $r5;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r3;
        char[][] $r7;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageDeclarationNameWithModifiers()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i1;

        $r6 = $r5[$i0];

        $r7 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r8 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r7, 46);

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptPackage(int,int,int[],char[],int)>($i2, $i3, $r6, $r8, $i4);

        return;
    }

    protected void consumePushModifiers()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        if $i1 >= 0 goto label3;

        $i8 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i8);

        $i4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i4 < 0 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i5);

        goto label6;

     label3:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i2);

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i3 < 0 goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label5;

     label4:
        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i6);

     label6:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumePushRealModifiers()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        if $i1 >= 0 goto label3;

        $i8 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i8);

        $i4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i4 < 0 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i5);

        goto label6;

     label3:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i2);

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i3 < 0 goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label5;

     label4:
        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i6);

     label6:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void resetModifiers()>();

        return;
    }

    protected void consumeSingleStaticImportDeclarationName()
    {
        int[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        char[][] $r8;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r5;
        int[] $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleStaticImportDeclarationName()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r3 = $r2[$i0];

        r4 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i4 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r7 = $r6[$i1];

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r9 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r8, 46);

        $i5 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptImport(int,int,int[],char[],int,boolean,int)>($i3, $i4, $r7, $r9, $i5, 0, 8);

        return;
    }

    protected void consumeSingleTypeImportDeclarationName()
    {
        int[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        char[][] $r8;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r5;
        int[] $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleTypeImportDeclarationName()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r3 = $r2[$i0];

        r4 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i4 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r7 = $r6[$i1];

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r9 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r8, 46);

        $i5 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptImport(int,int,int[],char[],int,boolean,int)>($i3, $i4, $r7, $r9, $i5, 0, 0);

        return;
    }

    protected void consumeStaticImportOnDemandDeclarationName()
    {
        int[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        char[][] $r8;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r5;
        int[] $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStaticImportOnDemandDeclarationName()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r3 = $r2[$i0];

        r4 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i4 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r7 = $r6[$i1];

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r9 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r8, 46);

        $i5 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptImport(int,int,int[],char[],int,boolean,int)>($i3, $i4, $r7, $r9, $i5, 1, 8);

        return;
    }

    protected void consumeStaticInitializer()
    {
        int[][] $r5;
        org.eclipse.jdt.internal.compiler.ast.Block $r8;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        int[] $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Initializer r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStaticInitializer()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Initializer) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart>;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r6 = $r5[$i1];

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intPtr> = $i6;

        $i9 = $r7[$i5];

        $r8 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i8 = $r8.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $i7 = r3.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptInitializer(int,int,int[],int,int,int,int)>($i3, $i4, $r6, 8, $i9, $i8, $i7);

        return;
    }

    protected void consumeStaticOnly()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i0);

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i1);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        if $i2 < 0 goto label1;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart>;

        goto label2;

     label1:
        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int modifiersSourceStart>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntStack(int)>($i6);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void jumpOverMethodBody()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        $i4 = $r2[$i3];

        $i5 = $i4 + 1;

        $r2[$i3] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void resetModifiers()>();

        return;
    }

    protected void consumeTypeImportOnDemandDeclarationName()
    {
        int[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        char[][] $r8;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r5;
        int[] $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] getJavaDocPositions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void pushOnIntArrayStack(int[])>($r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeImportOnDemandDeclarationName()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int astPtr>;

        $r3 = $r2[$i0];

        r4 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $i3 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart>;

        $i4 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        $r7 = $r6[$i1];

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>();

        $r9 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r8, 46);

        $i5 = r4.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptImport(int,int,int[],char[],int,boolean,int)>($i3, $i4, $r7, $r9, $i5, 1, 0);

        return;
    }

    public int flushCommentsDefinedPriorTo(int)
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>(i0);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int lastFieldEndPosition> = $i1;

        return $i1;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r3;
        org.eclipse.jdt.internal.compiler.IDocumentElementRequestor $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r5;
        int i0;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.IDocumentElementRequestor requestor>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] getLineEnds()>();

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IDocumentElementRequestor: void acceptLineSeparatorPositions(int[])>($r5);

     label1:
        $r2 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)>(i0);

        return $r2;
    }

    public void initialize(boolean)
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize(boolean)>(z0);

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i1;

        return;
    }

    public void initialize()
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i1;

        return;
    }

    private boolean isLocalDeclaration()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] $r1;
        int $i0, i1, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int nestedType>;

        goto label3;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] nestedMethod>;

        $i0 = $r1[i1];

        if $i0 == 0 goto label2;

        return 1;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label3:
        if i1 >= 0 goto label1;

        return 0;
    }

    protected void parse()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: boolean diet> = 1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

        return;
    }

    public void parseCompilationUnit(org.eclipse.jdt.internal.compiler.env.ICompilationUnit)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r7, $r8;
        org.eclipse.jdt.internal.compiler.CompilationResult $r5;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r2;
        int $i0, $i1, $i2;
        char[] $r1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r9;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;

        r2 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        $r1 = interfaceinvoke r0.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getContents()>();

     label1:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize(boolean)>(1);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForCompilationUnit()>();

        $r3 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r4 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r5 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r6 = r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>(r0, 0, 0, $i0);

        $i1 = lengthof $r1;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r4, $r5, $i1);

        r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r3;

        r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r3;

        $r7 = r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof $r1;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r8 = r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>($r1);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseConstructor(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForClassBodyDeclarations()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseField(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForFieldDeclaration()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseImport(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForImportDeclaration()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseInitializer(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForInitializer()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseMethod(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForGenericMethodDeclaration()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parsePackage(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForPackageDeclaration()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public void parseType(char[])
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int $i0, $i1, $i2;
        char[] r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r4 := @parameter0: char[];

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void goForTypeDeclaration()>();

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>(r4, 0, 0, $i0);

        $i1 = lengthof r4;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r2, $r3, $i1);

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = lengthof r4;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: void parse()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
    }

    public org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2, $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r2.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter>;

        return $r3;
    }

    protected void pushOnIntArrayStack(int[])
    {
        int[][] $r1, $r3, $r4, $r5;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r2 := @parameter0: int[];

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr> = $i2;

        if $i2 < i0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i4 = i0 + 255;

        $r4 = newarray (int[])[$i4];

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack> = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i0);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[][] intArrayStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $r3[$i3] = r2;

        return;
    }

    protected void resetModifiers()
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int declarationSourceStart> = $i1;

        return;
    }

    protected boolean resumeOnSyntaxError()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        return 0;
    }

    private char[] returnTypeName(org.eclipse.jdt.internal.compiler.ast.TypeReference)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference r0;
        char[][] $r1, $r4;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r7;
        int $i0, $i1, $i2, $i3, $i4, i5;
        char[] $r2, r3, $r5, $r6;

        r7 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        if $i0 == 0 goto label3;

        $i1 = $i0 * 2;

        r3 = newarray (char)[$i1];

        i5 = 0;

        goto label2;

     label1:
        $i2 = i5 * 2;

        r3[$i2] = 91;

        $i3 = i5 * 2;

        $i4 = $i3 + 1;

        r3[$i4] = 93;

        i5 = i5 + 1;

     label2:
        if i5 < $i0 goto label1;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r5 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r4, 46);

        $r6 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[])>($r5, r3);

        return $r6;

     label3:
        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r1, 46);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.DocumentElementParser r2;
        java.lang.StringBuffer $r0, $r1, $r3, $r4;
        int $i0;
        java.lang.String $r5, $r6, $r7;

        r2 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("intArrayPtr = ");

        $i0 = r2.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int intArrayPtr>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = specialinvoke r2.<org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected org.eclipse.jdt.internal.compiler.ast.TypeReference typeReference(int, int, int)
    {
        char[][] r2, $r4, $r12, $r16;
        int[] $r1, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, r19;
        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference $r7;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference $r6;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference $r11;
        long $l15, $l17;
        long[] r3, $r5, $r14, $r18;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, i18, i19;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r15;
        org.eclipse.jdt.internal.compiler.DocumentElementParser r0;
        char[] $r13, $r17;

        r0 := @this: org.eclipse.jdt.internal.compiler.DocumentElementParser;

        i4 := @parameter0: int;

        i18 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] identifierLengthStack>;

        $i1 = $r1[i0];

        if $i1 != 1 goto label2;

        if i4 != 0 goto label1;

        $r15 = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $r17 = $r16[i18];

        $r18 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $l17 = $r18[i18];

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>($r17, $l17);

        r19 = $r15;

        goto label6;

     label1:
        $r11 = new org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $r13 = $r12[i18];

        $r14 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $l15 = $r14[i18];

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: void <init>(char[],int,long)>($r13, i4, $l15);

        r19 = $r11;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

        $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i16;

        goto label6;

     label2:
        if $i1 >= 0 goto label4;

        $i5 = neg $i1;

        $r8 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference baseTypeReference(int,int)>($i5, i4);

        r19 = $r8;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr> = $i7;

        $i8 = $r9[$i6];

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart> = $i8;

        if i4 != 0 goto label3;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr> = $i13;

        $i14 = $r10[$i12];

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i14;

        goto label6;

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int localIntPtr> = $i10;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: int endPosition>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i11;

        goto label6;

     label4:
        r2 = newarray (char[])[$i1];

        i19 = i18 - $i1;

        r3 = newarray (long)[$i1];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: char[][] identifierStack>;

        $i2 = i19 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, r2, 0, $i1);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.DocumentElementParser: long[] identifierPositionStack>;

        $i3 = i19 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i3, r3, 0, $i1);

        if i4 != 0 goto label5;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: void <init>(char[][],long[])>(r2, r3);

        r19 = $r7;

        goto label6;

     label5:
        $r6 = new org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: void <init>(char[][],int,long[])>(r2, i4, r3);

        r19 = $r6;

     label6:
        return r19;
    }
}
