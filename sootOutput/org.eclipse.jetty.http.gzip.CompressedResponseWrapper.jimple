public abstract class org.eclipse.jetty.http.gzip.CompressedResponseWrapper extends javax.servlet.http.HttpServletResponseWrapper
{
    public static final int DEFAULT_BUFFER_SIZE;
    public static final int DEFAULT_MIN_COMPRESS_SIZE;
    private java.util.Set _mimeTypes;
    private int _bufferSize;
    private int _minCompressSize;
    protected javax.servlet.http.HttpServletRequest _request;
    private java.io.PrintWriter _writer;
    private org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream;
    private java.lang.String _etag;
    private long _contentLength;
    private boolean _noCompression;

    public void <init>(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        javax.servlet.http.HttpServletResponse r1;
        javax.servlet.http.HttpServletRequest r2;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void <init>(javax.servlet.http.HttpServletResponse)>(r1);

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _bufferSize> = 8192;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _minCompressSize> = 256;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength> = -1L;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.http.HttpServletRequest _request> = r2;

        return;
    }

    public long getContentLength()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        long $l0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $l0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        return $l0;
    }

    public int getBufferSize()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int $i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $i0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _bufferSize>;

        return $i0;
    }

    public int getMinCompressSize()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int $i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $i0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _minCompressSize>;

        return $i0;
    }

    public java.lang.String getETag()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String _etag>;

        return $r1;
    }

    public javax.servlet.http.HttpServletRequest getRequest()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        javax.servlet.http.HttpServletRequest $r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.http.HttpServletRequest _request>;

        return $r1;
    }

    public void setMimeTypes(java.util.Set)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.util.Set r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r1 := @parameter0: java.util.Set;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.util.Set _mimeTypes> = r1;

        return;
    }

    public void setBufferSize(int)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _bufferSize> = i0;

        return;
    }

    public void setMinCompressSize(int)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int _minCompressSize> = i0;

        return;
    }

    public void setContentType(java.lang.String)
    {
        java.io.OutputStream $r5;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r4, $r7;
        java.util.Set $r1, $r2, $r8;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int $i0;
        java.lang.String $r3, r6;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void setContentType(java.lang.String)>(r6);

        if r6 == null goto label1;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(";");

        if $i0 <= 0 goto label1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r7 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r7 == null goto label2;

        $r4 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        $r5 = virtualinvoke $r4.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream getOutputStream()>();

        if $r5 != null goto label5;

     label2:
        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.util.Set _mimeTypes>;

        if $r1 != null goto label3;

        if r6 == null goto label3;

        $z1 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("gzip");

        if $z1 != 0 goto label4;

     label3:
        $r8 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.util.Set _mimeTypes>;

        if $r8 == null goto label5;

        if r6 == null goto label4;

        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.util.Set _mimeTypes>;

        $r3 = staticinvoke <org.eclipse.jetty.util.StringUtil: java.lang.String asciiToLowerCase(java.lang.String)>(r6);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label5;

     label4:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

     label5:
        return;
    }

    public void setStatus(int, java.lang.String)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void setStatus(int,java.lang.String)>(i0, r1);

        if i0 < 200 goto label1;

        if i0 == 204 goto label1;

        if i0 == 205 goto label1;

        if i0 < 300 goto label2;

     label1:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

     label2:
        return;
    }

    public void setStatus(int)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>(i0);

        if i0 < 200 goto label1;

        if i0 == 204 goto label1;

        if i0 == 205 goto label1;

        if i0 < 300 goto label2;

     label1:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

     label2:
        return;
    }

    public void setContentLength(int)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;
        long $l1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentLength(long)>($l1);

        return;
    }

    protected void setContentLength(long)
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r1, $r5;
        long l0, $l1, $l3, $l5, $l6;
        byte $b2, $b4;
        int $i7, $i8, $i9;
        java.lang.String $r4;
        boolean $z0;
        javax.servlet.http.HttpServletResponse r3;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        javax.servlet.ServletResponse $r2;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        l0 := @parameter0: long;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength> = l0;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r1 == null goto label1;

        $r5 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r5.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setContentLength()>();

        goto label3;

     label1:
        $z0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean _noCompression>;

        if $z0 == 0 goto label3;

        $l1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        $b2 = $l1 cmp 0L;

        $i8 = (int) $b2;

        if $i8 < 0 goto label3;

        $r2 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        r3 = (javax.servlet.http.HttpServletResponse) $r2;

        $l3 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        $b4 = $l3 cmp 2147483647L;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label2;

        $l6 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        $i7 = (int) $l6;

        interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: void setContentLength(int)>($i7);

        goto label3;

     label2:
        $l5 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l5);

        interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-Length", $r4);

     label3:
        return;
    }

    public void addHeader(java.lang.String, java.lang.String)
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r7, $r8;
        long $l0;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r5;
        java.lang.String r0, $r1, $r2, $r3, $r4, r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r5 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = "content-length";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

        r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength> = $l0;

        $r7 = r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r7 == null goto label5;

        $r8 = r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r8.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setContentLength()>();

        goto label5;

     label1:
        $r2 = "content-type";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentType(java.lang.String)>(r6);

        goto label5;

     label2:
        $r3 = "content-encoding";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        specialinvoke r5.<javax.servlet.http.HttpServletResponseWrapper: void addHeader(java.lang.String,java.lang.String)>(r0, r6);

        $z4 = virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean isCommitted()>();

        if $z4 != 0 goto label5;

        virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

        goto label5;

     label3:
        $r4 = "etag";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String _etag> = r6;

        goto label5;

     label4:
        specialinvoke r5.<javax.servlet.http.HttpServletResponseWrapper: void addHeader(java.lang.String,java.lang.String)>(r0, r6);

     label5:
        return;
    }

    public void flushBuffer() throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.io.PrintWriter $r1, $r5;
        javax.servlet.ServletResponse $r3;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r2, $r4;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        if $r1 == null goto label1;

        $r5 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        virtualinvoke $r5.<java.io.PrintWriter: void flush()>();

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r2 == null goto label2;

        $r4 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r4.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void finish()>();

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        interfaceinvoke $r3.<javax.servlet.ServletResponse: void flushBuffer()>();

     label3:
        return;
    }

    public void reset()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r1, $r2;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void reset()>();

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r2.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void resetBuffer()>();

     label1:
        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer> = null;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream> = null;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean _noCompression> = 0;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength> = -1L;

        return;
    }

    public void resetBuffer()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r1, $r2;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void resetBuffer()>();

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r2.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void resetBuffer()>();

     label1:
        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer> = null;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream> = null;

        return;
    }

    public void sendError(int, java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void resetBuffer()>();

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void sendError(int,java.lang.String)>(i0, r1);

        return;
    }

    public void sendError(int) throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        int i0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void resetBuffer()>();

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void sendError(int)>(i0);

        return;
    }

    public void sendRedirect(java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void resetBuffer()>();

        specialinvoke r0.<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>(r1);

        return;
    }

    public void noCompression()
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.lang.IllegalStateException $r4;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r1, $r2;
        java.io.IOException $r3;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean _noCompression> = 1;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r2.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void finish() throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        java.io.PrintWriter $r1, $r4;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        $z0 = virtualinvoke $r3.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

     label1:
        $r5 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r5 == null goto label2;

        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r2.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void finish()>();

     label2:
        return;
    }

    public void setHeader(java.lang.String, java.lang.String)
    {
        long $l0;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r5;
        java.lang.String r0, $r1, $r2, $r3, $r4, r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r5 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = "content-length";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

        virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentLength(long)>($l0);

        goto label5;

     label1:
        $r2 = "content-type";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentType(java.lang.String)>(r6);

        goto label5;

     label2:
        $r3 = "content-encoding";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        specialinvoke r5.<javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>(r0, r6);

        $z4 = virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean isCommitted()>();

        if $z4 != 0 goto label5;

        virtualinvoke r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

        goto label5;

     label3:
        $r4 = "etag";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        r5.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String _etag> = r6;

        goto label5;

     label4:
        specialinvoke r5.<javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>(r0, r6);

     label5:
        return;
    }

    public boolean containsHeader(java.lang.String)
    {
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r2;
        java.lang.String r0, $r1, $r3;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r0 := @parameter0: java.lang.String;

        $r1 = "etag";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String _etag>;

        if $r3 == null goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r2.<javax.servlet.http.HttpServletResponseWrapper: boolean containsHeader(java.lang.String)>(r0);

        return $z1;
    }

    public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException
    {
        java.io.PrintWriter $r2;
        java.lang.IllegalStateException $r4;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r1, $r3, $r11;
        javax.servlet.http.HttpServletResponse $r10;
        long $l0;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        javax.servlet.http.HttpServletRequest $r8;
        javax.servlet.ServletResponse $r5, $r6, $r9;
        javax.servlet.ServletOutputStream $r7;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r1 != null goto label3;

        $r5 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $z0 = interfaceinvoke $r5.<javax.servlet.ServletResponse: boolean isCommitted()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean _noCompression>;

        if $z1 == 0 goto label2;

     label1:
        $l0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentLength(long)>($l0);

        $r6 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r7 = interfaceinvoke $r6.<javax.servlet.ServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        return $r7;

     label2:
        $r8 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.http.HttpServletRequest _request>;

        $r9 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r10 = (javax.servlet.http.HttpServletResponse) $r9;

        $r11 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream newCompressedStream(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>($r8, $r10);

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream> = $r11;

        goto label4;

     label3:
        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        if $r2 == null goto label4;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getWriter() called");

        throw $r4;

     label4:
        $r3 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        return $r3;
    }

    public java.io.PrintWriter getWriter() throws java.io.IOException
    {
        java.lang.IllegalStateException $r14;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r3, $r10, $r11;
        long $l0;
        javax.servlet.http.HttpServletRequest $r7;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.io.PrintWriter $r1, $r2, $r6, $r13;
        javax.servlet.http.HttpServletResponse $r9;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r0;
        javax.servlet.ServletResponse $r4, $r5, $r8;

        r0 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        $r1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        if $r1 != null goto label4;

        $r3 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r3 == null goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getOutputStream() called");

        throw $r14;

     label1:
        $r4 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $z0 = interfaceinvoke $r4.<javax.servlet.ServletResponse: boolean isCommitted()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: boolean _noCompression>;

        if $z1 == 0 goto label3;

     label2:
        $l0 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength>;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentLength(long)>($l0);

        $r5 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r6 = interfaceinvoke $r5.<javax.servlet.ServletResponse: java.io.PrintWriter getWriter()>();

        return $r6;

     label3:
        $r7 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.http.HttpServletRequest _request>;

        $r8 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r9 = (javax.servlet.http.HttpServletResponse) $r8;

        $r10 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream newCompressedStream(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>($r7, $r9);

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream> = $r10;

        $r11 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        $r12 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String getCharacterEncoding()>();

        $r13 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter newWriter(java.io.OutputStream,java.lang.String)>($r11, $r12);

        r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer> = $r13;

     label4:
        $r2 = r0.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.io.PrintWriter _writer>;

        return $r2;
    }

    public void setIntHeader(java.lang.String, int)
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream $r3, $r4;
        long $l1;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r2;
        int i0;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = "content-length";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $l1 = (long) i0;

        r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long _contentLength> = $l1;

        $r3 = r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        if $r3 == null goto label2;

        $r4 = r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: org.eclipse.jetty.http.gzip.AbstractCompressedStream _compressedStream>;

        virtualinvoke $r4.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setContentLength()>();

        goto label2;

     label1:
        specialinvoke r2.<javax.servlet.http.HttpServletResponseWrapper: void setIntHeader(java.lang.String,int)>(r0, i0);

     label2:
        return;
    }

    protected java.io.PrintWriter newWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r2;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r3;
        java.io.PrintWriter $r4;
        java.io.OutputStreamWriter $r1;
        java.lang.String r0;

        r3 := @this: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r2 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        goto label2;

     label1:
        $r4 = new java.io.PrintWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r0);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

     label2:
        return $r4;
    }

    protected abstract org.eclipse.jetty.http.gzip.AbstractCompressedStream newCompressedStream(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException;

    public static void <clinit>()
    {
        <org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int DEFAULT_MIN_COMPRESS_SIZE> = 256;

        <org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int DEFAULT_BUFFER_SIZE> = 8192;

        return;
    }
}
