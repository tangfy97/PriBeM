class com.google.inject.internal.cglib.reflect.$FastClassEmitter extends com.google.inject.internal.cglib.core.$ClassEmitter
{
    private static final com.google.inject.internal.cglib.core.$Signature CSTRUCT_CLASS;
    private static final com.google.inject.internal.cglib.core.$Signature METHOD_GET_INDEX;
    private static final com.google.inject.internal.cglib.core.$Signature SIGNATURE_GET_INDEX;
    private static final com.google.inject.internal.cglib.core.$Signature TO_STRING;
    private static final com.google.inject.internal.cglib.core.$Signature CONSTRUCTOR_GET_INDEX;
    private static final com.google.inject.internal.cglib.core.$Signature INVOKE;
    private static final com.google.inject.internal.cglib.core.$Signature NEW_INSTANCE;
    private static final com.google.inject.internal.cglib.core.$Signature GET_MAX_INDEX;
    private static final com.google.inject.internal.cglib.core.$Signature GET_SIGNATURE_WITHOUT_RETURN_TYPE;
    private static final com.google.inject.internal.asm.$Type FAST_CLASS;
    private static final com.google.inject.internal.asm.$Type ILLEGAL_ARGUMENT_EXCEPTION;
    private static final com.google.inject.internal.asm.$Type INVOCATION_TARGET_EXCEPTION;
    private static final com.google.inject.internal.asm.$Type[] INVOCATION_TARGET_EXCEPTION_ARRAY;
    private static final int TOO_MANY_METHODS;

    public void <init>(com.google.inject.internal.asm.$ClassVisitor, java.lang.String, java.lang.Class)
    {
        com.google.inject.internal.cglib.core.$CodeEmitter $r7, $r17, $r23, $r26, $r28;
        java.util.ArrayList $r10, $r13;
        java.lang.reflect.Constructor[] $r14;
        com.google.inject.internal.asm.$Type[] $r21, $r24;
        int $i0, $i1;
        com.google.inject.internal.asm.$Type $r3, $r5;
        java.lang.String r4;
        com.google.inject.internal.cglib.core.$Signature $r6, $r8, $r16, $r22, $r25, $r27;
        com.google.inject.internal.cglib.core.$VisibilityPredicate $r9;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback $r20;
        com.google.inject.internal.cglib.core.$MethodInfoTransformer $r18;
        java.util.List $r11, $r15, $r19;
        com.google.inject.internal.cglib.core.$DuplicatesPredicate $r12;
        java.lang.Class r2;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter r0;
        com.google.inject.internal.asm.$ClassVisitor r1;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClassEmitter;

        r1 := @parameter0: com.google.inject.internal.asm.$ClassVisitor;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<com.google.inject.internal.cglib.core.$ClassEmitter: void <init>(com.google.inject.internal.asm.$ClassVisitor)>(r1);

        $r3 = staticinvoke <com.google.inject.internal.asm.$Type: com.google.inject.internal.asm.$Type getType(java.lang.Class)>(r2);

        $r5 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type FAST_CLASS>;

        virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void begin_class(int,int,java.lang.String,com.google.inject.internal.asm.$Type,com.google.inject.internal.asm.$Type[],java.lang.String)>(46, 1, r4, $r5, null, "<generated>");

        $r6 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature CSTRUCT_CLASS>;

        $r7 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r6, null);

        virtualinvoke $r7.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_this()>();

        virtualinvoke $r7.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_args()>();

        $r8 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature CSTRUCT_CLASS>;

        virtualinvoke $r7.<com.google.inject.internal.cglib.core.$CodeEmitter: void super_invoke_constructor(com.google.inject.internal.cglib.core.$Signature)>($r8);

        virtualinvoke $r7.<com.google.inject.internal.cglib.core.$CodeEmitter: void return_value()>();

        virtualinvoke $r7.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        $r9 = new com.google.inject.internal.cglib.core.$VisibilityPredicate;

        specialinvoke $r9.<com.google.inject.internal.cglib.core.$VisibilityPredicate: void <init>(java.lang.Class,boolean)>(r2, 0);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)>(r2, $r10);

        staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.Collection filter(java.util.Collection,com.google.inject.internal.cglib.core.$Predicate)>($r11, $r9);

        $r12 = new com.google.inject.internal.cglib.core.$DuplicatesPredicate;

        specialinvoke $r12.<com.google.inject.internal.cglib.core.$DuplicatesPredicate: void <init>()>();

        staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.Collection filter(java.util.Collection,com.google.inject.internal.cglib.core.$Predicate)>($r11, $r12);

        $r13 = new java.util.ArrayList;

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r15);

        staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.Collection filter(java.util.Collection,com.google.inject.internal.cglib.core.$Predicate)>($r13, $r9);

        specialinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void emitIndexBySignature(java.util.List)>($r11);

        specialinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void emitIndexByClassArray(java.util.List)>($r11);

        $r16 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature CONSTRUCTOR_GET_INDEX>;

        $r17 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r16, null);

        virtualinvoke $r17.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_args()>();

        $r18 = staticinvoke <com.google.inject.internal.cglib.core.$MethodInfoTransformer: com.google.inject.internal.cglib.core.$MethodInfoTransformer getInstance()>();

        $r19 = staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.List transform(java.util.Collection,com.google.inject.internal.cglib.core.$Transformer)>($r13, $r18);

        $r20 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback;

        specialinvoke $r20.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback: void <init>(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List)>($r17, $r19);

        staticinvoke <com.google.inject.internal.cglib.core.$EmitUtils: void constructor_switch(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List,com.google.inject.internal.cglib.core.$ObjectSwitchCallback)>($r17, $r19, $r20);

        virtualinvoke $r17.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        $r22 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature INVOKE>;

        $r21 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type[] INVOCATION_TARGET_EXCEPTION_ARRAY>;

        $r23 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r22, $r21);

        virtualinvoke $r23.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r23.<com.google.inject.internal.cglib.core.$CodeEmitter: void checkcast(com.google.inject.internal.asm.$Type)>($r3);

        virtualinvoke $r23.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_arg(int)>(0);

        staticinvoke <com.google.inject.internal.cglib.reflect.$FastClassEmitter: void invokeSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List,int,com.google.inject.internal.asm.$Type)>($r23, $r11, 2, $r3);

        virtualinvoke $r23.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        $r25 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature NEW_INSTANCE>;

        $r24 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type[] INVOCATION_TARGET_EXCEPTION_ARRAY>;

        $r26 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r25, $r24);

        virtualinvoke $r26.<com.google.inject.internal.cglib.core.$CodeEmitter: void new_instance(com.google.inject.internal.asm.$Type)>($r3);

        virtualinvoke $r26.<com.google.inject.internal.cglib.core.$CodeEmitter: void dup()>();

        virtualinvoke $r26.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_arg(int)>(0);

        staticinvoke <com.google.inject.internal.cglib.reflect.$FastClassEmitter: void invokeSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List,int,com.google.inject.internal.asm.$Type)>($r26, $r13, 1, $r3);

        virtualinvoke $r26.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        $r27 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature GET_MAX_INDEX>;

        $r28 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r27, null);

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r28.<com.google.inject.internal.cglib.core.$CodeEmitter: void push(int)>($i1);

        virtualinvoke $r28.<com.google.inject.internal.cglib.core.$CodeEmitter: void return_value()>();

        virtualinvoke $r28.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void end_class()>();

        return;
    }

    private void emitIndexBySignature(java.util.List)
    {
        com.google.inject.internal.cglib.core.$CodeEmitter $r2;
        java.util.List r3, $r5;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$1 $r4;
        com.google.inject.internal.asm.$Type $r7;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter r0;
        com.google.inject.internal.cglib.core.$Signature $r1, $r6;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClassEmitter;

        r3 := @parameter0: java.util.List;

        $r1 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature SIGNATURE_GET_INDEX>;

        $r2 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r1, null);

        $r4 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$1;

        specialinvoke $r4.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$1: void <init>(com.google.inject.internal.cglib.reflect.$FastClassEmitter)>(r0);

        $r5 = staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.List transform(java.util.Collection,com.google.inject.internal.cglib.core.$Transformer)>(r3, $r4);

        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_arg(int)>(0);

        $r7 = <com.google.inject.internal.cglib.core.$Constants: com.google.inject.internal.asm.$Type TYPE_OBJECT>;

        $r6 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature TO_STRING>;

        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void invoke_virtual(com.google.inject.internal.asm.$Type,com.google.inject.internal.cglib.core.$Signature)>($r7, $r6);

        specialinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void signatureSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List)>($r2, $r5);

        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        return;
    }

    private void emitIndexByClassArray(java.util.List)
    {
        com.google.inject.internal.cglib.core.$CodeEmitter $r2;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback $r6;
        com.google.inject.internal.cglib.core.$MethodInfoTransformer $r4;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$2 $r7;
        java.util.List r3, $r5, $r8;
        int $i0;
        com.google.inject.internal.asm.$Type $r10;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter r0;
        com.google.inject.internal.cglib.core.$Signature $r1, $r9;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClassEmitter;

        r3 := @parameter0: java.util.List;

        $r1 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature METHOD_GET_INDEX>;

        $r2 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$CodeEmitter begin_method(int,com.google.inject.internal.cglib.core.$Signature,com.google.inject.internal.asm.$Type[])>(1, $r1, null);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 <= 100 goto label1;

        $r7 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$2;

        specialinvoke $r7.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$2: void <init>(com.google.inject.internal.cglib.reflect.$FastClassEmitter)>(r0);

        $r8 = staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.List transform(java.util.Collection,com.google.inject.internal.cglib.core.$Transformer)>(r3, $r7);

        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_args()>();

        $r10 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type FAST_CLASS>;

        $r9 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature GET_SIGNATURE_WITHOUT_RETURN_TYPE>;

        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void invoke_static(com.google.inject.internal.asm.$Type,com.google.inject.internal.cglib.core.$Signature)>($r10, $r9);

        specialinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter: void signatureSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List)>($r2, $r8);

        goto label2;

     label1:
        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void load_args()>();

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$MethodInfoTransformer: com.google.inject.internal.cglib.core.$MethodInfoTransformer getInstance()>();

        $r5 = staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.List transform(java.util.Collection,com.google.inject.internal.cglib.core.$Transformer)>(r3, $r4);

        $r6 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback;

        specialinvoke $r6.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$GetIndexCallback: void <init>(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List)>($r2, $r5);

        staticinvoke <com.google.inject.internal.cglib.core.$EmitUtils: void method_switch(com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List,com.google.inject.internal.cglib.core.$ObjectSwitchCallback)>($r2, $r5, $r6);

     label2:
        virtualinvoke $r2.<com.google.inject.internal.cglib.core.$CodeEmitter: void end_method()>();

        return;
    }

    private void signatureSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter, java.util.List)
    {
        java.lang.Object[] $r5;
        com.google.inject.internal.cglib.core.$CodeEmitter r2;
        java.lang.String[] $r4, $r6, $r7;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$3 $r0;
        java.util.List r3;
        int $i0;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter r1;

        r1 := @this: com.google.inject.internal.cglib.reflect.$FastClassEmitter;

        r2 := @parameter0: com.google.inject.internal.cglib.core.$CodeEmitter;

        r3 := @parameter1: java.util.List;

        $r0 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$3;

        specialinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$3: void <init>(com.google.inject.internal.cglib.reflect.$FastClassEmitter,com.google.inject.internal.cglib.core.$CodeEmitter,java.util.List)>(r1, r2, r3);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        $r7 = (java.lang.String[]) $r6;

        staticinvoke <com.google.inject.internal.cglib.core.$EmitUtils: void string_switch(com.google.inject.internal.cglib.core.$CodeEmitter,java.lang.String[],int,com.google.inject.internal.cglib.core.$ObjectSwitchCallback)>(r2, $r7, 1, $r0);

        return;
    }

    private static void invokeSwitchHelper(com.google.inject.internal.cglib.core.$CodeEmitter, java.util.List, int, com.google.inject.internal.asm.$Type)
    {
        com.google.inject.internal.cglib.core.$CodeEmitter r3;
        com.google.inject.internal.cglib.core.$MethodInfoTransformer $r1;
        java.util.List r0, $r2;
        com.google.inject.internal.cglib.core.$Block $r5;
        int[] $r6;
        com.google.inject.internal.cglib.reflect.$FastClassEmitter$4 $r7;
        int $i0, i1;
        com.google.inject.internal.asm.$Label $r4;
        com.google.inject.internal.asm.$Type r8, $r9, $r10;

        r3 := @parameter0: com.google.inject.internal.cglib.core.$CodeEmitter;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r8 := @parameter3: com.google.inject.internal.asm.$Type;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$MethodInfoTransformer: com.google.inject.internal.cglib.core.$MethodInfoTransformer getInstance()>();

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$CollectionUtils: java.util.List transform(java.util.Collection,com.google.inject.internal.cglib.core.$Transformer)>(r0, $r1);

        $r4 = virtualinvoke r3.<com.google.inject.internal.cglib.core.$CodeEmitter: com.google.inject.internal.asm.$Label make_label()>();

        $r5 = virtualinvoke r3.<com.google.inject.internal.cglib.core.$CodeEmitter: com.google.inject.internal.cglib.core.$Block begin_block()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r6 = staticinvoke <com.google.inject.internal.cglib.reflect.$FastClassEmitter: int[] getIntRange(int)>($i0);

        $r7 = new com.google.inject.internal.cglib.reflect.$FastClassEmitter$4;

        specialinvoke $r7.<com.google.inject.internal.cglib.reflect.$FastClassEmitter$4: void <init>(java.util.List,com.google.inject.internal.cglib.core.$CodeEmitter,int,com.google.inject.internal.asm.$Type,com.google.inject.internal.asm.$Label)>($r2, r3, i1, r8, $r4);

        virtualinvoke r3.<com.google.inject.internal.cglib.core.$CodeEmitter: void process_switch(int[],com.google.inject.internal.cglib.core.$ProcessSwitchCallback)>($r6, $r7);

        virtualinvoke $r5.<com.google.inject.internal.cglib.core.$Block: void end()>();

        $r9 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type INVOCATION_TARGET_EXCEPTION>;

        staticinvoke <com.google.inject.internal.cglib.core.$EmitUtils: void wrap_throwable(com.google.inject.internal.cglib.core.$Block,com.google.inject.internal.asm.$Type)>($r5, $r9);

        virtualinvoke r3.<com.google.inject.internal.cglib.core.$CodeEmitter: void mark(com.google.inject.internal.asm.$Label)>($r4);

        $r10 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type ILLEGAL_ARGUMENT_EXCEPTION>;

        virtualinvoke r3.<com.google.inject.internal.cglib.core.$CodeEmitter: void throw_exception(com.google.inject.internal.asm.$Type,java.lang.String)>($r10, "Cannot find matching method/constructor");

        return;
    }

    private static int[] getIntRange(int)
    {
        int i0, i1;
        int[] r0;

        i0 := @parameter0: int;

        r0 = newarray (int)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r0[i1] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    static void <clinit>()
    {
        com.google.inject.internal.asm.$Type[] $r3, $r15;
        com.google.inject.internal.asm.$Type $r4, $r5, $r12, $r13, $r14, $r16;
        com.google.inject.internal.cglib.core.$Signature $r0, $r1, $r2, $r6, $r7, $r8, $r9, $r10, $r11;

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: int TOO_MANY_METHODS> = 100;

        $r0 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseConstructor(java.lang.String)>("Class");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature CSTRUCT_CLASS> = $r0;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("int getIndex(String, Class[])");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature METHOD_GET_INDEX> = $r1;

        $r2 = new com.google.inject.internal.cglib.core.$Signature;

        $r5 = <com.google.inject.internal.asm.$Type: com.google.inject.internal.asm.$Type INT_TYPE>;

        $r3 = newarray (com.google.inject.internal.asm.$Type)[1];

        $r4 = <com.google.inject.internal.cglib.core.$Constants: com.google.inject.internal.asm.$Type TYPE_SIGNATURE>;

        $r3[0] = $r4;

        specialinvoke $r2.<com.google.inject.internal.cglib.core.$Signature: void <init>(java.lang.String,com.google.inject.internal.asm.$Type,com.google.inject.internal.asm.$Type[])>("getIndex", $r5, $r3);

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature SIGNATURE_GET_INDEX> = $r2;

        $r6 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("String toString()");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature TO_STRING> = $r6;

        $r7 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("int getIndex(Class[])");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature CONSTRUCTOR_GET_INDEX> = $r7;

        $r8 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("Object invoke(int, Object, Object[])");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature INVOKE> = $r8;

        $r9 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("Object newInstance(int, Object[])");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature NEW_INSTANCE> = $r9;

        $r10 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("int getMaxIndex()");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature GET_MAX_INDEX> = $r10;

        $r11 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.cglib.core.$Signature parseSignature(java.lang.String)>("String getSignatureWithoutReturnType(String, Class[])");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.cglib.core.$Signature GET_SIGNATURE_WITHOUT_RETURN_TYPE> = $r11;

        $r12 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type parseType(java.lang.String)>("com.google.inject.internal.cglib.reflect.$FastClass");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type FAST_CLASS> = $r12;

        $r13 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type parseType(java.lang.String)>("IllegalArgumentException");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type ILLEGAL_ARGUMENT_EXCEPTION> = $r13;

        $r14 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type parseType(java.lang.String)>("java.lang.reflect.InvocationTargetException");

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type INVOCATION_TARGET_EXCEPTION> = $r14;

        $r15 = newarray (com.google.inject.internal.asm.$Type)[1];

        $r16 = <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type INVOCATION_TARGET_EXCEPTION>;

        $r15[0] = $r16;

        <com.google.inject.internal.cglib.reflect.$FastClassEmitter: com.google.inject.internal.asm.$Type[] INVOCATION_TARGET_EXCEPTION_ARRAY> = $r15;

        return;
    }
}
