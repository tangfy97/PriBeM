public class org.apache.xml.serializer.NamespaceMappings extends java.lang.Object
{
    private int count;
    private java.util.Stack m_prefixStack;
    private java.util.Hashtable m_namespaces;
    private java.util.Stack m_nodeStack;
    private static final java.lang.String EMPTYSTRING;
    private static final java.lang.String XML_PREFIX;

    public void <init>()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.util.Stack $r1, $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: int count> = 0;

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces> = $r2;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack> = $r3;

        specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: void initNamespaces()>();

        return;
    }

    private void initNamespaces()
    {
        java.lang.Integer $r11;
        java.util.Stack $r3, $r6, $r8, $r9, $r10;
        int $i1;
        org.apache.xml.serializer.NamespaceMappings r0;
        java.util.Hashtable $r2, $r5;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r9 = new java.util.Stack;

        specialinvoke $r9.<java.util.Stack: void <init>()>();

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("", $r9);

        virtualinvoke $r9.<java.util.Stack: java.lang.Object push(java.lang.Object)>("");

        $r3 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>("");

        $r5 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", $r10);

        virtualinvoke $r10.<java.util.Stack: java.lang.Object push(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        $r6 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>("xml");

        $r8 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        $r11 = new java.lang.Integer;

        $i1 = (int) -1;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r8.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r11);

        return;
    }

    public java.lang.String lookupNamespace(java.lang.String)
    {
        java.util.Stack r4;
        java.lang.Object $r3, $r5;
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, $r6;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Stack) $r3;

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object peek()>();

        $r6 = (java.lang.String) $r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public java.lang.String lookupPrefix(java.lang.String)
    {
        java.util.Enumeration $r2;
        java.lang.Object $r3;
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r4, $r5, r6, r7;
        java.util.Hashtable $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r6 := @parameter0: java.lang.String;

        r7 = null;

        $r1 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r0.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupNamespace(java.lang.String)>(r4);

        if $r5 == null goto label2;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        r7 = r4;

        goto label3;

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label1;

     label3:
        return r7;
    }

    public boolean popNamespace(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r0;
        org.apache.xml.serializer.NamespaceMappings r1;
        java.util.Hashtable $r2;
        java.util.Stack $r4;
        boolean $z0;

        r1 := @this: org.apache.xml.serializer.NamespaceMappings;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.util.Stack) $r3;

        if $r4 == null goto label2;

        virtualinvoke $r4.<java.util.Stack: java.lang.Object pop()>();

        return 1;

     label2:
        return 0;
    }

    public boolean pushNamespace(java.lang.String, java.lang.String, int)
    {
        java.lang.Integer $r7;
        java.util.Stack $r4, $r6, $r8, $r10, r12;
        int i0;
        java.lang.String r0, r5;
        java.util.Hashtable $r2, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r9;
        org.apache.xml.serializer.NamespaceMappings r1;

        r1 := @this: org.apache.xml.serializer.NamespaceMappings;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.util.Stack) $r3;

        r12 = $r4;

        if $r4 != null goto label2;

        $r11 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r10);

     label2:
        $z1 = virtualinvoke r12.<java.util.Stack: boolean empty()>();

        if $z1 != 0 goto label3;

        $r9 = virtualinvoke r12.<java.util.Stack: java.lang.Object peek()>();

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r5);

        $r6 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r8 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r8.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r7);

        return 1;
    }

    public void popNamespaces(int, org.xml.sax.ContentHandler)
    {
        java.lang.Integer r4;
        java.util.Stack $r1, $r2, $r5, $r6;
        org.xml.sax.SAXException $r10;
        int $i0, i1;
        java.lang.Object $r3, $r7;
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r8;
        org.xml.sax.ContentHandler r9;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        i1 := @parameter0: int;

        r9 := @parameter1: org.xml.sax.ContentHandler;

        goto label1;

     label1:
        $r1 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 >= i1 goto label3;

        return;

     label3:
        $r5 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        virtualinvoke $r5.<java.util.Stack: java.lang.Object pop()>();

        $r6 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        $r7 = virtualinvoke $r6.<java.util.Stack: java.lang.Object pop()>();

        r8 = (java.lang.String) $r7;

        virtualinvoke r0.<org.apache.xml.serializer.NamespaceMappings: boolean popNamespace(java.lang.String)>(r8);

        if r9 == null goto label7;

     label4:
        interfaceinvoke r9.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>(r8);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

     label7:
        goto label1;

        catch org.xml.sax.SAXException from label4 to label5 with label6;
    }

    public java.lang.String generateNextPrefix()
    {
        java.lang.StringBuffer $r0, $r1, $r3;
        int $i0, $i1;
        org.apache.xml.serializer.NamespaceMappings r2;
        java.lang.String $r4;

        r2 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ns");

        $i0 = r2.<org.apache.xml.serializer.NamespaceMappings: int count>;

        $i1 = $i0 + 1;

        r2.<org.apache.xml.serializer.NamespaceMappings: int count> = $i1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.Stack $r2, $r4, $r5, $r7;
        int $i0;
        java.lang.Object $r3, $r6, $r9;
        org.apache.xml.serializer.NamespaceMappings $r0, r1;
        java.util.Hashtable $r8, $r10;

        r1 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r0 = new org.apache.xml.serializer.NamespaceMappings;

        specialinvoke $r0.<org.apache.xml.serializer.NamespaceMappings: void <init>()>();

        $r2 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object clone()>();

        $r4 = (java.util.Stack) $r3;

        $r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack> = $r4;

        $r5 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object clone()>();

        $r7 = (java.util.Stack) $r6;

        $r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack> = $r7;

        $r8 = r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r9 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object clone()>();

        $r10 = (java.util.Hashtable) $r9;

        $r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces> = $r10;

        $i0 = r1.<org.apache.xml.serializer.NamespaceMappings: int count>;

        $r0.<org.apache.xml.serializer.NamespaceMappings: int count> = $i0;

        return $r0;
    }

    public final void reset()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.util.Hashtable $r1;
        java.util.Stack $r2, $r3;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r0.<org.apache.xml.serializer.NamespaceMappings: int count> = 0;

        $r1 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_nodeStack>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

        $r3 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Stack m_prefixStack>;

        virtualinvoke $r3.<java.util.Vector: void clear()>();

        specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: void initNamespaces()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.serializer.NamespaceMappings: java.lang.String XML_PREFIX> = "xml";

        <org.apache.xml.serializer.NamespaceMappings: java.lang.String EMPTYSTRING> = "";

        return;
    }
}
