public class org.apache.http.ProtocolVersion extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final long serialVersionUID;
    protected final java.lang.String protocol;
    protected final int major;
    protected final int minor;

    public void <init>(java.lang.String, int, int)
    {
        org.apache.http.ProtocolVersion r0;
        int i0, i1;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: org.apache.http.ProtocolVersion;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Protocol name must not be null.");

        throw $r4;

     label1:
        if i0 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Protocol major version number must not be negative.");

        throw $r3;

     label2:
        if i1 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Protocol minor version number may not be negative");

        throw $r2;

     label3:
        r0.<org.apache.http.ProtocolVersion: java.lang.String protocol> = r1;

        r0.<org.apache.http.ProtocolVersion: int major> = i0;

        r0.<org.apache.http.ProtocolVersion: int minor> = i1;

        return;
    }

    public final java.lang.String getProtocol()
    {
        org.apache.http.ProtocolVersion r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.ProtocolVersion;

        $r1 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        return $r1;
    }

    public final int getMajor()
    {
        int $i0;
        org.apache.http.ProtocolVersion r0;

        r0 := @this: org.apache.http.ProtocolVersion;

        $i0 = r0.<org.apache.http.ProtocolVersion: int major>;

        return $i0;
    }

    public final int getMinor()
    {
        int $i0;
        org.apache.http.ProtocolVersion r0;

        r0 := @this: org.apache.http.ProtocolVersion;

        $i0 = r0.<org.apache.http.ProtocolVersion: int minor>;

        return $i0;
    }

    public org.apache.http.ProtocolVersion forVersion(int, int)
    {
        org.apache.http.ProtocolVersion r0, $r1;
        int i0, $i1, i2, $i3;
        java.lang.String $r2;

        r0 := @this: org.apache.http.ProtocolVersion;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.http.ProtocolVersion: int major>;

        if i0 != $i1 goto label1;

        $i3 = r0.<org.apache.http.ProtocolVersion: int minor>;

        if i2 != $i3 goto label1;

        return r0;

     label1:
        $r1 = new org.apache.http.ProtocolVersion;

        $r2 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        specialinvoke $r1.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>($r2, i0, i2);

        return $r1;
    }

    public final int hashCode()
    {
        org.apache.http.ProtocolVersion r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1;

        r0 := @this: org.apache.http.ProtocolVersion;

        $r1 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = r0.<org.apache.http.ProtocolVersion: int major>;

        $i2 = $i1 * 100000;

        $i4 = $i0 ^ $i2;

        $i3 = r0.<org.apache.http.ProtocolVersion: int minor>;

        $i5 = $i4 ^ $i3;

        return $i5;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.http.ProtocolVersion r0, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.http.ProtocolVersion;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.http.ProtocolVersion;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.http.ProtocolVersion) r1;

        $r4 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $r3 = r2.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $i1 = r0.<org.apache.http.ProtocolVersion: int major>;

        $i0 = r2.<org.apache.http.ProtocolVersion: int major>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<org.apache.http.ProtocolVersion: int minor>;

        $i2 = r2.<org.apache.http.ProtocolVersion: int minor>;

        if $i3 != $i2 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public boolean isComparable(org.apache.http.ProtocolVersion)
    {
        org.apache.http.ProtocolVersion r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.http.ProtocolVersion;

        r0 := @parameter0: org.apache.http.ProtocolVersion;

        if r0 == null goto label1;

        $r3 = r1.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $r2 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int compareToVersion(org.apache.http.ProtocolVersion)
    {
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r2, $r3, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r11;
        org.apache.http.ProtocolVersion r0, r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r1 := @this: org.apache.http.ProtocolVersion;

        r0 := @parameter0: org.apache.http.ProtocolVersion;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Protocol version must not be null.");

        throw $r11;

     label1:
        $r3 = r1.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $r2 = r0.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Versions for different protocols cannot be compared. ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $i0 = virtualinvoke r1.<org.apache.http.ProtocolVersion: int getMajor()>();

        $i1 = virtualinvoke r0.<org.apache.http.ProtocolVersion: int getMajor()>();

        i4 = $i0 - $i1;

        if i4 != 0 goto label3;

        $i2 = virtualinvoke r1.<org.apache.http.ProtocolVersion: int getMinor()>();

        $i3 = virtualinvoke r0.<org.apache.http.ProtocolVersion: int getMinor()>();

        i4 = $i2 - $i3;

     label3:
        return i4;
    }

    public final boolean greaterEquals(org.apache.http.ProtocolVersion)
    {
        org.apache.http.ProtocolVersion r0, r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.ProtocolVersion;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        $z0 = virtualinvoke r0.<org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>(r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>(r1);

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean lessEquals(org.apache.http.ProtocolVersion)
    {
        org.apache.http.ProtocolVersion r0, r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.ProtocolVersion;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        $z0 = virtualinvoke r0.<org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>(r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>(r1);

        if $i0 > 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        org.apache.http.ProtocolVersion r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3, $r4, $r5;

        r1 := @this: org.apache.http.ProtocolVersion;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.http.ProtocolVersion: java.lang.String protocol>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i0 = r1.<org.apache.http.ProtocolVersion: int major>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i1 = r1.<org.apache.http.ProtocolVersion: int minor>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.ProtocolVersion r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.ProtocolVersion;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.http.ProtocolVersion: long serialVersionUID> = 8950662842175091068L;

        return;
    }
}
