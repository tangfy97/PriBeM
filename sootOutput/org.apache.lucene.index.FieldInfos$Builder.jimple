final class org.apache.lucene.index.FieldInfos$Builder extends java.lang.Object
{
    private final java.util.HashMap byName;
    final org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumbers;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.index.FieldInfos$Builder r0;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r1;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        $r1 = new org.apache.lucene.index.FieldInfos$FieldNumbers;

        specialinvoke $r1.<org.apache.lucene.index.FieldInfos$FieldNumbers: void <init>()>();

        specialinvoke r0.<org.apache.lucene.index.FieldInfos$Builder: void <init>(org.apache.lucene.index.FieldInfos$FieldNumbers)>($r1);

        return;
    }

    void <init>(org.apache.lucene.index.FieldInfos$FieldNumbers)
    {
        org.apache.lucene.index.FieldInfos$FieldNumbers r2;
        org.apache.lucene.index.FieldInfos$Builder r0;
        java.util.HashMap $r1;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r2 := @parameter0: org.apache.lucene.index.FieldInfos$FieldNumbers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName> = $r1;

        $z0 = <org.apache.lucene.index.FieldInfos$Builder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumbers> = r2;

        return;
    }

    public void add(org.apache.lucene.index.FieldInfos)
    {
        java.util.Iterator $r1;
        org.apache.lucene.index.FieldInfos$Builder r4;
        org.apache.lucene.index.FieldInfo r3;
        java.lang.Object $r2;
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r4 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r0 := @parameter0: org.apache.lucene.index.FieldInfos;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.lucene.index.FieldInfo) $r2;

        virtualinvoke r4.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.index.FieldInfo addOrUpdate(java.lang.String, org.apache.lucene.index.IndexableFieldType)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r3;
        org.apache.lucene.index.FieldInfos$Builder r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r4;
        org.apache.lucene.index.IndexableFieldType r2;
        int $i1;
        org.apache.lucene.index.FieldInfo $r5;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.index.IndexableFieldType;

        $z0 = interfaceinvoke r2.<org.apache.lucene.index.IndexableFieldType: boolean indexed()>();

        $z1 = interfaceinvoke r2.<org.apache.lucene.index.IndexableFieldType: boolean omitNorms()>();

        $r3 = interfaceinvoke r2.<org.apache.lucene.index.IndexableFieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions()>();

        $r4 = interfaceinvoke r2.<org.apache.lucene.index.IndexableFieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType()>();

        $i1 = (int) -1;

        $r5 = specialinvoke r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfo addOrUpdateInternal(java.lang.String,int,boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions,org.apache.lucene.index.FieldInfo$DocValuesType,org.apache.lucene.index.FieldInfo$DocValuesType)>(r1, $i1, $z0, 0, $z1, 0, $r3, $r4, null);

        return $r5;
    }

    private org.apache.lucene.index.FieldInfo addOrUpdateInternal(java.lang.String, int, boolean, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions, org.apache.lucene.index.FieldInfo$DocValuesType, org.apache.lucene.index.FieldInfo$DocValuesType)
    {
        org.apache.lucene.index.FieldInfos$Builder r0;
        java.util.HashMap $r9, $r16;
        java.lang.AssertionError $r14, $r17;
        java.lang.Integer $r11;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r6, $r10;
        int i0, $i1, $i2;
        java.lang.String r1, $r8, $r12, $r15;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.lucene.index.FieldInfo$IndexOptions r3;
        org.apache.lucene.index.FieldInfo$DocValuesType r4, r5, $r13;
        org.apache.lucene.index.FieldInfo $r2, $r7, r18;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        r3 := @parameter6: org.apache.lucene.index.FieldInfo$IndexOptions;

        r4 := @parameter7: org.apache.lucene.index.FieldInfo$DocValuesType;

        r5 := @parameter8: org.apache.lucene.index.FieldInfo$DocValuesType;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        r18 = $r2;

        if $r2 != null goto label3;

        $r6 = r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumbers>;

        $i1 = virtualinvoke $r6.<org.apache.lucene.index.FieldInfos$FieldNumbers: int addOrGet(java.lang.String,int,org.apache.lucene.index.FieldInfo$DocValuesType)>(r1, i0, r4);

        $r7 = new org.apache.lucene.index.FieldInfo;

        specialinvoke $r7.<org.apache.lucene.index.FieldInfo: void <init>(java.lang.String,boolean,int,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions,org.apache.lucene.index.FieldInfo$DocValuesType,org.apache.lucene.index.FieldInfo$DocValuesType,java.util.Map)>(r1, z0, $i1, z1, z2, z3, r3, r4, r5, null);

        r18 = $r7;

        $z5 = <org.apache.lucene.index.FieldInfos$Builder: boolean $assertionsDisabled>;

        if $z5 != 0 goto label1;

        $r16 = r0.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName>;

        $r15 = $r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $z8 = virtualinvoke $r16.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r15);

        if $z8 == 0 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z6 = <org.apache.lucene.index.FieldInfos$Builder: boolean $assertionsDisabled>;

        if $z6 != 0 goto label2;

        $r10 = r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumbers>;

        $i2 = $r7.<org.apache.lucene.index.FieldInfo: int number>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r12 = $r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r13 = virtualinvoke $r7.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $z7 = virtualinvoke $r10.<org.apache.lucene.index.FieldInfos$FieldNumbers: boolean containsConsistent(java.lang.Integer,java.lang.String,org.apache.lucene.index.FieldInfo$DocValuesType)>($r11, $r12, $r13);

        if $z7 != 0 goto label2;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $r9 = r0.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName>;

        $r8 = $r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label5;

     label3:
        virtualinvoke $r2.<org.apache.lucene.index.FieldInfo: void update(boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions)>(z0, z1, z2, z3, r3);

        if r4 == null goto label4;

        virtualinvoke $r2.<org.apache.lucene.index.FieldInfo: void setDocValuesType(org.apache.lucene.index.FieldInfo$DocValuesType)>(r4);

     label4:
        $z4 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfo: boolean omitsNorms()>();

        if $z4 != 0 goto label5;

        if r5 == null goto label5;

        virtualinvoke $r2.<org.apache.lucene.index.FieldInfo: void setNormValueType(org.apache.lucene.index.FieldInfo$DocValuesType)>(r5);

     label5:
        return r18;
    }

    public org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r3;
        org.apache.lucene.index.FieldInfos$Builder r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r4, $r5;
        int $i0;
        org.apache.lucene.index.FieldInfo r1, $r6;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $i0 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        $z0 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        $z1 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: boolean hasVectors()>();

        $z2 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: boolean omitsNorms()>();

        $z3 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: boolean hasPayloads()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r4 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r5 = virtualinvoke r1.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getNormType()>();

        $r6 = specialinvoke r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfo addOrUpdateInternal(java.lang.String,int,boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions,org.apache.lucene.index.FieldInfo$DocValuesType,org.apache.lucene.index.FieldInfo$DocValuesType)>($r2, $i0, $z0, $z1, $z2, $z3, $r3, $r4, $r5);

        return $r6;
    }

    public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)
    {
        org.apache.lucene.index.FieldInfos$Builder r0;
        org.apache.lucene.index.FieldInfo $r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.index.FieldInfos$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.lucene.index.FieldInfo) $r3;

        return $r4;
    }

    final org.apache.lucene.index.FieldInfos finish()
    {
        java.lang.Object[] $r6;
        java.util.Collection $r3;
        org.apache.lucene.index.FieldInfos$Builder r1;
        java.util.HashMap $r2, $r4;
        org.apache.lucene.index.FieldInfo[] $r5, $r7;
        int $i0;
        org.apache.lucene.index.FieldInfos $r0;

        r1 := @this: org.apache.lucene.index.FieldInfos$Builder;

        $r0 = new org.apache.lucene.index.FieldInfos;

        $r2 = r1.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = r1.<org.apache.lucene.index.FieldInfos$Builder: java.util.HashMap byName>;

        $i0 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        $r5 = newarray (org.apache.lucene.index.FieldInfo)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.lucene.index.FieldInfo[]) $r6;

        specialinvoke $r0.<org.apache.lucene.index.FieldInfos: void <init>(org.apache.lucene.index.FieldInfo[])>($r7);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FieldInfos;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FieldInfos$Builder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
