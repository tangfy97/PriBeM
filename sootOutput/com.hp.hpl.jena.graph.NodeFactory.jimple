public class com.hp.hpl.jena.graph.NodeFactory extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.graph.NodeFactory r0;

        r0 := @this: com.hp.hpl.jena.graph.NodeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r0;
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createAnon()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.rdf.model.AnonId $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.AnonId: com.hp.hpl.jena.rdf.model.AnonId create()>();

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)
    {
        com.hp.hpl.jena.graph.Node$NodeMaker $r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.AnonId r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.AnonId;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeAnon>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node$NodeMaker,java.lang.Object)>($r1, r0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        com.hp.hpl.jena.graph.Node$NodeMaker $r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeLiteral>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node$NodeMaker,java.lang.Object)>($r1, r0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createURI(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node$NodeMaker $r1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeURI>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node$NodeMaker,java.lang.Object)>($r1, r0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createVariable(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node$NodeMaker $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeVariable>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Node_Variable: java.lang.Object variable(java.lang.String)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node$NodeMaker,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>(r0, "", 0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, boolean)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabel $r2;
        java.lang.String r0, r1;
        com.hp.hpl.jena.graph.Node $r3;
        java.lang.NullPointerException $r4;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null for literals has been illegal since Jena 2.0");

        throw $r4;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.String,java.lang.String,boolean)>(r0, r1, z0);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r3;
        java.lang.String r0, r1;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel createLiteralLabel(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1, r2);

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel createLiteralLabel(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, "", r1);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.graph.Node_Literal $r0;
        com.hp.hpl.jena.datatypes.RDFDatatype r3;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r4;
        java.lang.Object r1;
        java.lang.String r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r0 = new com.hp.hpl.jena.graph.Node_Literal;

        $r4 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2, r3);

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node_Literal: void <init>(java.lang.Object)>($r4);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.graph.Node_Literal $r0;
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r3;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r0 = new com.hp.hpl.jena.graph.Node_Literal;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, "", r2);

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node_Literal: void <init>(java.lang.Object)>($r3);

        return $r0;
    }
}
