class org.apache.jena.riot.lang.LangRDFXML$HandlerSink extends com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler implements com.hp.hpl.jena.rdf.arp.StatementHandler, com.hp.hpl.jena.rdf.arp.NamespaceHandler
{
    private org.apache.jena.riot.system.StreamRDF output;
    private org.apache.jena.riot.system.ErrorHandler errHandler;
    private org.apache.jena.riot.checker.CheckerLiterals checker;

    void <init>(org.apache.jena.riot.system.StreamRDF, org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.lang.LangRDFXML$ErrorHandlerBridge $r1;
        org.apache.jena.riot.system.ErrorHandler r2;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r0;
        org.apache.jena.riot.checker.CheckerLiterals $r4;
        org.apache.jena.riot.system.StreamRDF r3;

        r0 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r3 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r2 := @parameter1: org.apache.jena.riot.system.ErrorHandler;

        $r1 = new org.apache.jena.riot.lang.LangRDFXML$ErrorHandlerBridge;

        specialinvoke $r1.<org.apache.jena.riot.lang.LangRDFXML$ErrorHandlerBridge: void <init>(org.apache.jena.riot.system.ErrorHandler)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler: void <init>(com.hp.hpl.jena.rdf.model.RDFErrorHandler)>($r1);

        r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.system.StreamRDF output> = r3;

        r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.system.ErrorHandler errHandler> = r2;

        $r4 = new org.apache.jena.riot.checker.CheckerLiterals;

        specialinvoke $r4.<org.apache.jena.riot.checker.CheckerLiterals: void <init>(org.apache.jena.riot.system.ErrorHandler)>(r2);

        r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.checker.CheckerLiterals checker> = $r4;

        return;
    }

    public void statement(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r1, r2, r3;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r0;
        org.apache.jena.riot.system.StreamRDF $r4;
        com.hp.hpl.jena.graph.Triple $r5;

        r0 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r3 := @parameter2: com.hp.hpl.jena.rdf.arp.AResource;

        $r4 = r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.system.StreamRDF output>;

        $r5 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource,com.hp.hpl.jena.rdf.arp.AResource,com.hp.hpl.jena.rdf.arp.AResource)>(r1, r2, r3);

        interfaceinvoke $r4.<org.apache.jena.riot.system.StreamRDF: void triple(com.hp.hpl.jena.graph.Triple)>($r5);

        return;
    }

    public void statement(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.rdf.arp.AResource r1, r2;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r0;
        org.apache.jena.riot.system.StreamRDF $r4;
        com.hp.hpl.jena.rdf.arp.ALiteral r3;
        com.hp.hpl.jena.graph.Triple $r5;

        r0 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r3 := @parameter2: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r4 = r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.system.StreamRDF output>;

        $r5 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource,com.hp.hpl.jena.rdf.arp.AResource,com.hp.hpl.jena.rdf.arp.ALiteral)>(r1, r2, r3);

        interfaceinvoke $r4.<org.apache.jena.riot.system.StreamRDF: void triple(com.hp.hpl.jena.graph.Triple)>($r5);

        return;
    }

    private static com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r2;
        com.hp.hpl.jena.graph.Node $r5, $r7, $r10;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.String $r1, $r4, $r6, $r8, $r9;
        com.hp.hpl.jena.rdf.arp.ALiteral r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getDatatypeURI()>();

        if $r1 != null goto label1;

        $r8 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r9 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getLang()>();

        $r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>($r8, $r9, 0);

        return $r10;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: boolean isWellFormedXML()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r7 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>($r6, null, 1);

        return $r7;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r1);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r4, null, $r3);

        return $r5;
    }

    private static com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node $r2, $r4, r5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: boolean isAnonymous()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.String getURI()>();

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r3);

        return $r4;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.Object getUserData()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r1;

        if r5 != null goto label2;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        r5 = $r2;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: void setUserData(java.lang.Object)>($r2);

     label2:
        return r5;
    }

    private com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0, r2, r4;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5;
        com.hp.hpl.jena.graph.Triple $r6;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r7;

        r7 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r4 := @parameter2: com.hp.hpl.jena.rdf.arp.AResource;

        $r1 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r0);

        $r3 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r2);

        $r5 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3, $r5);

        return $r6;
    }

    private com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.rdf.arp.AResource r4, r6;
        com.hp.hpl.jena.graph.Node $r1, $r5, $r7;
        com.hp.hpl.jena.graph.Triple $r8;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r2;
        org.apache.jena.riot.checker.CheckerLiterals $r3;
        com.hp.hpl.jena.rdf.arp.ALiteral r0;

        r2 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r4 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r6 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r0 := @parameter2: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r1 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.ALiteral)>(r0);

        $r3 = r2.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.checker.CheckerLiterals checker>;

        virtualinvoke $r3.<org.apache.jena.riot.checker.CheckerLiterals: boolean check(com.hp.hpl.jena.graph.Node,long,long)>($r1, -1L, -1L);

        $r5 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r4);

        $r7 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML$HandlerSink: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r6);

        $r8 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r7, $r1);

        return $r8;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String)
    {
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r0;
        org.apache.jena.riot.system.StreamRDF $r3;
        java.lang.String r1, r2;

        r0 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.jena.riot.lang.LangRDFXML$HandlerSink: org.apache.jena.riot.system.StreamRDF output>;

        interfaceinvoke $r3.<org.apache.jena.riot.system.StreamRDF: void prefix(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void endPrefixMapping(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.riot.lang.LangRDFXML$HandlerSink r0;

        r0 := @this: org.apache.jena.riot.lang.LangRDFXML$HandlerSink;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
