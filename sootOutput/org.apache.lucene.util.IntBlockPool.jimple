public final class org.apache.lucene.util.IntBlockPool extends java.lang.Object
{
    public static final int INT_BLOCK_SHIFT;
    public static final int INT_BLOCK_SIZE;
    public static final int INT_BLOCK_MASK;
    public int[][] buffers;
    private int bufferUpto;
    public int intUpto;
    public int[] buffer;
    public int intOffset;
    private final org.apache.lucene.util.IntBlockPool$Allocator allocator;
    private static final int[] NEXT_LEVEL_ARRAY;
    private static final int[] LEVEL_SIZE_ARRAY;
    private static final int FIRST_LEVEL_SIZE;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.IntBlockPool$DirectAllocator $r1;
        org.apache.lucene.util.IntBlockPool r0;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        $r1 = new org.apache.lucene.util.IntBlockPool$DirectAllocator;

        specialinvoke $r1.<org.apache.lucene.util.IntBlockPool$DirectAllocator: void <init>()>();

        specialinvoke r0.<org.apache.lucene.util.IntBlockPool: void <init>(org.apache.lucene.util.IntBlockPool$Allocator)>($r1);

        return;
    }

    public void <init>(org.apache.lucene.util.IntBlockPool$Allocator)
    {
        int[][] $r1;
        org.apache.lucene.util.IntBlockPool$Allocator r2;
        org.apache.lucene.util.IntBlockPool r0;
        int $i1, $i3;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        r2 := @parameter0: org.apache.lucene.util.IntBlockPool$Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int[])[10];

        r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers> = $r1;

        $i1 = (int) -1;

        r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto> = $i1;

        r0.<org.apache.lucene.util.IntBlockPool: int intUpto> = 8192;

        $i3 = (int) -8192;

        r0.<org.apache.lucene.util.IntBlockPool: int intOffset> = $i3;

        r0.<org.apache.lucene.util.IntBlockPool: org.apache.lucene.util.IntBlockPool$Allocator allocator> = r2;

        return;
    }

    public void reset()
    {
        org.apache.lucene.util.IntBlockPool r0;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        virtualinvoke r0.<org.apache.lucene.util.IntBlockPool: void reset(boolean,boolean)>(1, 1);

        return;
    }

    public void reset(boolean, boolean)
    {
        int[][] $r1, $r3, $r4, $r6, $r8;
        org.apache.lucene.util.IntBlockPool r0;
        byte $b10, $b11;
        int[] $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i13, $i15, $i17;
        boolean z0, z1;
        org.apache.lucene.util.IntBlockPool$Allocator $r2;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i13 = (int) -1;

        if $i0 == $i13 goto label9;

        if z0 == 0 goto label3;

        i9 = 0;

     label1:
        $i6 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        if i9 >= $i6 goto label2;

        $r8 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $r9 = $r8[i9];

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r9, 0);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i7 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $r7 = $r6[$i7];

        $i8 = r0.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r7, 0, $i8, 0);

     label3:
        $i1 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        if $i1 > 0 goto label4;

        if z1 != 0 goto label7;

     label4:
        if z1 == 0 goto label5;

        $b11 = 1;

        $b10 = 1;

        goto label6;

     label5:
        $b11 = 0;

        $b10 = 0;

     label6:
        $r2 = r0.<org.apache.lucene.util.IntBlockPool: org.apache.lucene.util.IntBlockPool$Allocator allocator>;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i2 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i3 = 1 + $i2;

        virtualinvoke $r2.<org.apache.lucene.util.IntBlockPool$Allocator: void recycleIntBlocks(int[][],int,int)>($r1, $b10, $i3);

        $r3 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i4 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i5 = $i4 + 1;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r3, $b11, $i5, null);

     label7:
        if z1 == 0 goto label8;

        r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto> = 0;

        r0.<org.apache.lucene.util.IntBlockPool: int intUpto> = 0;

        r0.<org.apache.lucene.util.IntBlockPool: int intOffset> = 0;

        $r4 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $r5 = $r4[0];

        r0.<org.apache.lucene.util.IntBlockPool: int[] buffer> = $r5;

        goto label9;

     label8:
        $i15 = (int) -1;

        r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto> = $i15;

        r0.<org.apache.lucene.util.IntBlockPool: int intUpto> = 8192;

        $i17 = (int) -8192;

        r0.<org.apache.lucene.util.IntBlockPool: int intOffset> = $i17;

        r0.<org.apache.lucene.util.IntBlockPool: int[] buffer> = null;

     label9:
        return;
    }

    public void nextBuffer()
    {
        int[][] $r1, $r3, $r5, r6, $r7, $r8;
        org.apache.lucene.util.IntBlockPool r0;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double $d0, $d1;
        org.apache.lucene.util.IntBlockPool$Allocator $r2;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i2 = 1 + $i0;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $r5 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i9 = lengthof $r5;

        $d0 = (double) $i9;

        $d1 = $d0 * 1.5;

        $i10 = (int) $d1;

        r6 = newarray (int[])[$i10];

        $r8 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $r7 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i11 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r6, 0, $i11);

        r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers> = r6;

     label1:
        $r3 = r0.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i3 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i4 = 1 + $i3;

        $r2 = r0.<org.apache.lucene.util.IntBlockPool: org.apache.lucene.util.IntBlockPool$Allocator allocator>;

        $r4 = virtualinvoke $r2.<org.apache.lucene.util.IntBlockPool$Allocator: int[] getIntBlock()>();

        $r3[$i4] = $r4;

        r0.<org.apache.lucene.util.IntBlockPool: int[] buffer> = $r4;

        $i5 = r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.util.IntBlockPool: int bufferUpto> = $i6;

        r0.<org.apache.lucene.util.IntBlockPool: int intUpto> = 0;

        $i7 = r0.<org.apache.lucene.util.IntBlockPool: int intOffset>;

        $i8 = $i7 + 8192;

        r0.<org.apache.lucene.util.IntBlockPool: int intOffset> = $i8;

        return;
    }

    private int newSlice(int)
    {
        java.lang.AssertionError $r2;
        org.apache.lucene.util.IntBlockPool r0;
        int[] $r1, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.IntBlockPool;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i1 = 8192 - i0;

        if $i2 <= $i1 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.IntBlockPool: void nextBuffer()>();

        $z0 = <org.apache.lucene.util.IntBlockPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool: int[] buffer>;

        $z1 = staticinvoke <org.apache.lucene.util.IntBlockPool: boolean assertSliceBuffer(int[])>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i3 = r0.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i4 = r0.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i5 = $i4 + i0;

        r0.<org.apache.lucene.util.IntBlockPool: int intUpto> = $i5;

        $r3 = r0.<org.apache.lucene.util.IntBlockPool: int[] buffer>;

        $i6 = r0.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i7 = $i6 - 1;

        $r3[$i7] = 1;

        return $i3;
    }

    private static final boolean assertSliceBuffer(int[])
    {
        int[] r0;
        int $i0, $i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: int[];

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label2;

        $i1 = r0[i3];

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        if i2 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private int allocSlice(int[], int)
    {
        java.lang.AssertionError $r5;
        org.apache.lucene.util.IntBlockPool r3;
        int[] r0, $r1, $r2, $r4, $r6;
        int i0, i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.util.IntBlockPool;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = r0[i0];

        $r1 = <org.apache.lucene.util.IntBlockPool: int[] NEXT_LEVEL_ARRAY>;

        $i2 = i1 - 1;

        i3 = $r1[$i2];

        $r2 = <org.apache.lucene.util.IntBlockPool: int[] LEVEL_SIZE_ARRAY>;

        i4 = $r2[i3];

        $i6 = r3.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i5 = 8192 - i4;

        if $i6 <= $i5 goto label1;

        virtualinvoke r3.<org.apache.lucene.util.IntBlockPool: void nextBuffer()>();

        $z0 = <org.apache.lucene.util.IntBlockPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r3.<org.apache.lucene.util.IntBlockPool: int[] buffer>;

        $z1 = staticinvoke <org.apache.lucene.util.IntBlockPool: boolean assertSliceBuffer(int[])>($r4);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $i7 = r3.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i8 = r3.<org.apache.lucene.util.IntBlockPool: int intOffset>;

        $i9 = $i7 + $i8;

        $i10 = r3.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i11 = $i10 + i4;

        r3.<org.apache.lucene.util.IntBlockPool: int intUpto> = $i11;

        r0[i0] = $i9;

        $r6 = r3.<org.apache.lucene.util.IntBlockPool: int[] buffer>;

        $i12 = r3.<org.apache.lucene.util.IntBlockPool: int intUpto>;

        $i13 = $i12 - 1;

        $r6[$i13] = i3;

        return $i7;
    }

    static int access$000(org.apache.lucene.util.IntBlockPool, int[], int)
    {
        org.apache.lucene.util.IntBlockPool r0;
        int[] r1;
        int i0, $i1;

        r0 := @parameter0: org.apache.lucene.util.IntBlockPool;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        $i1 = specialinvoke r0.<org.apache.lucene.util.IntBlockPool: int allocSlice(int[],int)>(r1, i0);

        return $i1;
    }

    static int access$100()
    {
        int $i0;

        $i0 = <org.apache.lucene.util.IntBlockPool: int FIRST_LEVEL_SIZE>;

        return $i0;
    }

    static int access$200(org.apache.lucene.util.IntBlockPool, int)
    {
        int i0, $i1;
        org.apache.lucene.util.IntBlockPool r0;

        r0 := @parameter0: org.apache.lucene.util.IntBlockPool;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<org.apache.lucene.util.IntBlockPool: int newSlice(int)>(i0);

        return $i1;
    }

    static int[] access$300()
    {
        int[] $r0;

        $r0 = <org.apache.lucene.util.IntBlockPool: int[] LEVEL_SIZE_ARRAY>;

        return $r0;
    }

    static int[] access$400()
    {
        int[] $r0;

        $r0 = <org.apache.lucene.util.IntBlockPool: int[] NEXT_LEVEL_ARRAY>;

        return $r0;
    }

    static void <clinit>()
    {
        int[] $r1, $r2, $r3;
        int $i0;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.IntBlockPool: int INT_BLOCK_MASK> = 8191;

        <org.apache.lucene.util.IntBlockPool: int INT_BLOCK_SIZE> = 8192;

        <org.apache.lucene.util.IntBlockPool: int INT_BLOCK_SHIFT> = 13;

        $r0 = class "Lorg/apache/lucene/util/IntBlockPool;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.IntBlockPool: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[10];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 4;

        $r1[4] = 5;

        $r1[5] = 6;

        $r1[6] = 7;

        $r1[7] = 8;

        $r1[8] = 9;

        $r1[9] = 9;

        <org.apache.lucene.util.IntBlockPool: int[] NEXT_LEVEL_ARRAY> = $r1;

        $r2 = newarray (int)[10];

        $r2[0] = 2;

        $r2[1] = 4;

        $r2[2] = 8;

        $r2[3] = 16;

        $r2[4] = 32;

        $r2[5] = 64;

        $r2[6] = 128;

        $r2[7] = 256;

        $r2[8] = 512;

        $r2[9] = 1024;

        <org.apache.lucene.util.IntBlockPool: int[] LEVEL_SIZE_ARRAY> = $r2;

        $r3 = <org.apache.lucene.util.IntBlockPool: int[] LEVEL_SIZE_ARRAY>;

        $i0 = $r3[0];

        <org.apache.lucene.util.IntBlockPool: int FIRST_LEVEL_SIZE> = $i0;

        return;
    }
}
