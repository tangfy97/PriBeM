public final class org.wiztools.commons.ArrayUtil extends java.lang.Object
{

    private void <init>()
    {
        org.wiztools.commons.ArrayUtil r0;

        r0 := @this: org.wiztools.commons.ArrayUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isArray(java.lang.Object) throws java.lang.NullPointerException
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Object is null: cannot determine if it is of array type.");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        return $z0;
    }

    public static transient java.lang.Object[] concat(java.lang.Object[][])
    {
        java.lang.Object[] $r2, r3, r5;
        java.util.ArrayList $r0;
        java.lang.Object[][] r1;
        int i0, $i1, i2, i3;
        java.lang.Object $r4;

        r1 := @parameter0: java.lang.Object[][];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r5 = null;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r3 = r1[i2];

        i3 = 0;

     label2:
        $i1 = lengthof r3;

        if i3 >= $i1 goto label3;

        $r4 = r3[i3];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        r5 = r3;

        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        return $r2;
    }

    public static transient short[] concat(short[][])
    {
        short[][] r0;
        short $s1;
        int $i0, $i2, i3, i4, i5, i6, i7, i8, i9;
        short[] r1, r2, r3;

        r0 := @parameter0: short[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (short)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label6;

        r1 = r0[i8];

        i9 = 0;

     label4:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label5;

        $s1 = r1[i9];

        r3[i6] = $s1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient int[] concat(int[][])
    {
        int[][] r0;
        int[] r1, r2, r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @parameter0: int[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (int)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label6;

        r1 = r0[i8];

        i9 = 0;

     label4:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label5;

        $i1 = r1[i9];

        r3[i6] = $i1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient long[] concat(long[][])
    {
        long[][] r0;
        long $l1;
        long[] r1, r2, r3;
        int $i0, $i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @parameter0: long[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (long)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label6;

        r1 = r0[i8];

        i9 = 0;

     label4:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label5;

        $l1 = r1[i9];

        r3[i6] = $l1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient byte[] concat(byte[][])
    {
        byte[] r1, r2, r3;
        byte[][] r0;
        byte $b1;
        int $i0, $i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @parameter0: byte[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (byte)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label6;

        r1 = r0[i8];

        i9 = 0;

     label4:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label5;

        $b1 = r1[i9];

        r3[i6] = $b1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient char[] concat(char[][])
    {
        char $c1;
        char[][] r0;
        int $i0, $i2, i3, i4, i5, i6, i7, i8, i9;
        char[] r1, r2, r3;

        r0 := @parameter0: char[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (char)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label6;

        r1 = r0[i8];

        i9 = 0;

     label4:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label5;

        $c1 = r1[i9];

        r3[i6] = $c1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient float[] concat(float[][])
    {
        float[][] r0;
        float[] r1, r2, r3;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8;
        float $f0;

        r0 := @parameter0: float[][];

        i2 = 0;

        i3 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        r2 = r0[i4];

        $i1 = lengthof r2;

        i2 = i2 + $i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        r3 = newarray (float)[i2];

        i5 = 0;

        i6 = lengthof r0;

        i7 = 0;

     label3:
        if i7 >= i6 goto label6;

        r1 = r0[i7];

        i8 = 0;

     label4:
        $i0 = lengthof r1;

        if i8 >= $i0 goto label5;

        $f0 = r1[i8];

        r3[i5] = $f0;

        i5 = i5 + 1;

        i8 = i8 + 1;

        goto label4;

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient double[] concat(double[][])
    {
        double[] r1, r2, r3;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8;
        double[][] r0;
        double $d0;

        r0 := @parameter0: double[][];

        i2 = 0;

        i3 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        r2 = r0[i4];

        $i1 = lengthof r2;

        i2 = i2 + $i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        r3 = newarray (double)[i2];

        i5 = 0;

        i6 = lengthof r0;

        i7 = 0;

     label3:
        if i7 >= i6 goto label6;

        r1 = r0[i7];

        i8 = 0;

     label4:
        $i0 = lengthof r1;

        if i8 >= $i0 goto label5;

        $d0 = r1[i8];

        r3[i5] = $d0;

        i5 = i5 + 1;

        i8 = i8 + 1;

        goto label4;

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static transient boolean[] concat(boolean[][])
    {
        boolean[] r1, r2, r3;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8;
        boolean[][] r0;
        boolean $z0;

        r0 := @parameter0: boolean[][];

        i2 = 0;

        i3 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        r2 = r0[i4];

        $i1 = lengthof r2;

        i2 = i2 + $i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        r3 = newarray (boolean)[i2];

        i5 = 0;

        i6 = lengthof r0;

        i7 = 0;

     label3:
        if i7 >= i6 goto label6;

        r1 = r0[i7];

        i8 = 0;

     label4:
        $i0 = lengthof r1;

        if i8 >= $i0 goto label5;

        $z0 = r1[i8];

        r3[i5] = $z0;

        i5 = i5 + 1;

        i8 = i8 + 1;

        goto label4;

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        return r3;
    }

    public static void reverse(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1, i2, $i4;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i1 >= i2 goto label2;

        r1 = r0[i1];

        $r2 = r0[i2];

        r0[i1] = $r2;

        r0[i2] = r1;

        i1 = i1 + 1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }

    public static void reverse(boolean[])
    {
        boolean[] r0;
        int $i0, i1, i2, $i4;
        boolean z0, $z1;

        r0 := @parameter0: boolean[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i1 >= i2 goto label2;

        z0 = r0[i1];

        $z1 = r0[i2];

        r0[i1] = $z1;

        r0[i2] = z0;

        i1 = i1 + 1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }

    public static void reverse(byte[])
    {
        byte[] r0;
        byte b1, $b2;
        int $i0, i3, i4, $i6;

        r0 := @parameter0: byte[];

        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i3 >= i4 goto label2;

        b1 = r0[i3];

        $b2 = r0[i4];

        r0[i3] = $b2;

        r0[i4] = b1;

        i3 = i3 + 1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    public static void reverse(char[])
    {
        int $i0, i3, i4, $i6;
        char[] r0;
        char c1, $c2;

        r0 := @parameter0: char[];

        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i3 >= i4 goto label2;

        c1 = r0[i3];

        $c2 = r0[i4];

        r0[i3] = $c2;

        r0[i4] = c1;

        i3 = i3 + 1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    public static void reverse(short[])
    {
        short s1, $s2;
        int $i0, i3, i4, $i6;
        short[] r0;

        r0 := @parameter0: short[];

        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i3 >= i4 goto label2;

        s1 = r0[i3];

        $s2 = r0[i4];

        r0[i3] = $s2;

        r0[i4] = s1;

        i3 = i3 + 1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    public static void reverse(int[])
    {
        int[] r0;
        int $i0, i1, $i2, i3, i4, $i6;

        r0 := @parameter0: int[];

        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i3 >= i4 goto label2;

        i1 = r0[i3];

        $i2 = r0[i4];

        r0[i3] = $i2;

        r0[i4] = i1;

        i3 = i3 + 1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    public static void reverse(long[])
    {
        long[] r0;
        int $i0, i3, i4, $i6;
        long l1, $l2;

        r0 := @parameter0: long[];

        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i3 >= i4 goto label2;

        l1 = r0[i3];

        $l2 = r0[i4];

        r0[i3] = $l2;

        r0[i4] = l1;

        i3 = i3 + 1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    public static void reverse(float[])
    {
        int $i0, i1, i2, $i4;
        float f0, $f1;
        float[] r0;

        r0 := @parameter0: float[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i1 >= i2 goto label2;

        f0 = r0[i1];

        $f1 = r0[i2];

        r0[i1] = $f1;

        r0[i2] = f0;

        i1 = i1 + 1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }

    public static void reverse(double[])
    {
        double[] r0;
        int $i0, i1, i2, $i4;
        double d0, $d1;

        r0 := @parameter0: double[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i1 >= i2 goto label2;

        d0 = r0[i1];

        $d1 = r0[i2];

        r0[i1] = $d1;

        r0[i2] = d0;

        i1 = i1 + 1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }
}
