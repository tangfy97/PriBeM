final class org.apache.lucene.util.packed.PackedWriter extends org.apache.lucene.util.packed.PackedInts$Writer
{
    boolean finished;
    final org.apache.lucene.util.packed.PackedInts$Format format;
    final org.apache.lucene.util.packed.BulkOperation encoder;
    final byte[] nextBlocks;
    final long[] nextValues;
    final int iterations;
    int off;
    int written;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.util.packed.PackedInts$Format, org.apache.lucene.store.DataOutput, int, int, int)
    {
        byte[] $r6;
        org.apache.lucene.store.DataOutput r1;
        long[] $r8;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.lucene.util.packed.PackedInts$Format r2;
        org.apache.lucene.util.packed.PackedWriter r0;
        org.apache.lucene.util.packed.BulkOperation $r3, $r4, $r5, $r7;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        r2 := @parameter0: org.apache.lucene.util.packed.PackedInts$Format;

        r1 := @parameter1: org.apache.lucene.store.DataOutput;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$Writer: void <init>(org.apache.lucene.store.DataOutput,int,int)>(r1, i0, i1);

        r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.PackedInts$Format format> = r2;

        $r3 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>(r2, i1);

        r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.BulkOperation encoder> = $r3;

        $r4 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.BulkOperation encoder>;

        $i3 = virtualinvoke $r4.<org.apache.lucene.util.packed.BulkOperation: int computeIterations(int,int)>(i0, i2);

        r0.<org.apache.lucene.util.packed.PackedWriter: int iterations> = $i3;

        $i4 = r0.<org.apache.lucene.util.packed.PackedWriter: int iterations>;

        $r5 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.BulkOperation encoder>;

        $i5 = virtualinvoke $r5.<org.apache.lucene.util.packed.BulkOperation: int byteBlockCount()>();

        $i6 = $i4 * $i5;

        $r6 = newarray (byte)[$i6];

        r0.<org.apache.lucene.util.packed.PackedWriter: byte[] nextBlocks> = $r6;

        $i7 = r0.<org.apache.lucene.util.packed.PackedWriter: int iterations>;

        $r7 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.BulkOperation encoder>;

        $i8 = virtualinvoke $r7.<org.apache.lucene.util.packed.BulkOperation: int byteValueCount()>();

        $i9 = $i7 * $i8;

        $r8 = newarray (long)[$i9];

        r0.<org.apache.lucene.util.packed.PackedWriter: long[] nextValues> = $r8;

        r0.<org.apache.lucene.util.packed.PackedWriter: int off> = 0;

        r0.<org.apache.lucene.util.packed.PackedWriter: int written> = 0;

        r0.<org.apache.lucene.util.packed.PackedWriter: boolean finished> = 0;

        return;
    }

    protected org.apache.lucene.util.packed.PackedInts$Format getFormat()
    {
        org.apache.lucene.util.packed.PackedWriter r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        $r1 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.PackedInts$Format format>;

        return $r1;
    }

    public void add(long) throws java.io.IOException
    {
        long l3, $l14;
        java.lang.AssertionError $r6, $r7;
        long[] $r1, $r2;
        byte $b11, $b15;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i16, $i17, $i19;
        boolean $z0, $z1, $z2;
        java.io.EOFException $r8;
        org.apache.lucene.util.packed.PackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        l3 := @parameter0: long;

        $z0 = <org.apache.lucene.util.packed.PackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i10 = r0.<org.apache.lucene.util.packed.PackedWriter: int bitsPerValue>;

        if $i10 == 64 goto label2;

        $b11 = l3 cmp 0L;

        $i16 = (int) $b11;

        if $i16 < 0 goto label1;

        $i13 = r0.<org.apache.lucene.util.packed.PackedWriter: int bitsPerValue>;

        $l14 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>($i13);

        $b15 = l3 cmp $l14;

        $i17 = (int) $b15;

        if $i17 <= 0 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        $i12 = r0.<org.apache.lucene.util.packed.PackedWriter: int bitsPerValue>;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>($i12);

        throw $r6;

     label2:
        $z2 = <org.apache.lucene.util.packed.PackedWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z1 = r0.<org.apache.lucene.util.packed.PackedWriter: boolean finished>;

        if $z1 == 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $i0 = r0.<org.apache.lucene.util.packed.PackedWriter: int valueCount>;

        $i19 = (int) -1;

        if $i0 == $i19 goto label4;

        $i9 = r0.<org.apache.lucene.util.packed.PackedWriter: int written>;

        $i8 = r0.<org.apache.lucene.util.packed.PackedWriter: int valueCount>;

        if $i9 < $i8 goto label4;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>(java.lang.String)>("Writing past end of stream");

        throw $r8;

     label4:
        $r1 = r0.<org.apache.lucene.util.packed.PackedWriter: long[] nextValues>;

        $i1 = r0.<org.apache.lucene.util.packed.PackedWriter: int off>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.util.packed.PackedWriter: int off> = $i2;

        $r1[$i1] = l3;

        $i5 = r0.<org.apache.lucene.util.packed.PackedWriter: int off>;

        $r2 = r0.<org.apache.lucene.util.packed.PackedWriter: long[] nextValues>;

        $i4 = lengthof $r2;

        if $i5 != $i4 goto label5;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedWriter: void flush()>();

     label5:
        $i6 = r0.<org.apache.lucene.util.packed.PackedWriter: int written>;

        $i7 = $i6 + 1;

        r0.<org.apache.lucene.util.packed.PackedWriter: int written> = $i7;

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.lang.AssertionError $r2;
        org.apache.lucene.util.packed.PackedWriter r0;
        int $i0, $i1, $i2, $i4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        $z0 = <org.apache.lucene.util.packed.PackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.lucene.util.packed.PackedWriter: boolean finished>;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<org.apache.lucene.util.packed.PackedWriter: int valueCount>;

        $i4 = (int) -1;

        if $i0 == $i4 goto label3;

     label2:
        $i2 = r0.<org.apache.lucene.util.packed.PackedWriter: int written>;

        $i1 = r0.<org.apache.lucene.util.packed.PackedWriter: int valueCount>;

        if $i2 >= $i1 goto label3;

        virtualinvoke r0.<org.apache.lucene.util.packed.PackedWriter: void add(long)>(0L);

        goto label2;

     label3:
        specialinvoke r0.<org.apache.lucene.util.packed.PackedWriter: void flush()>();

        r0.<org.apache.lucene.util.packed.PackedWriter: boolean finished> = 1;

        return;
    }

    private void flush() throws java.io.IOException
    {
        byte[] $r1, $r5;
        org.apache.lucene.util.packed.PackedInts$Format $r4;
        org.apache.lucene.store.DataOutput $r6;
        long $l3;
        org.apache.lucene.util.packed.PackedWriter r0;
        long[] $r2, $r7;
        int $i0, $i1, $i2, i4;
        org.apache.lucene.util.packed.BulkOperation $r3;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        $r3 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.BulkOperation encoder>;

        $r2 = r0.<org.apache.lucene.util.packed.PackedWriter: long[] nextValues>;

        $r1 = r0.<org.apache.lucene.util.packed.PackedWriter: byte[] nextBlocks>;

        $i0 = r0.<org.apache.lucene.util.packed.PackedWriter: int iterations>;

        virtualinvoke $r3.<org.apache.lucene.util.packed.BulkOperation: void encode(long[],int,byte[],int,int)>($r2, 0, $r1, 0, $i0);

        $r4 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i2 = r0.<org.apache.lucene.util.packed.PackedWriter: int off>;

        $i1 = r0.<org.apache.lucene.util.packed.PackedWriter: int bitsPerValue>;

        $l3 = virtualinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(1, $i2, $i1);

        i4 = (int) $l3;

        $r6 = r0.<org.apache.lucene.util.packed.PackedWriter: org.apache.lucene.store.DataOutput out>;

        $r5 = r0.<org.apache.lucene.util.packed.PackedWriter: byte[] nextBlocks>;

        virtualinvoke $r6.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int)>($r5, i4);

        $r7 = r0.<org.apache.lucene.util.packed.PackedWriter: long[] nextValues>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r7, 0L);

        r0.<org.apache.lucene.util.packed.PackedWriter: int off> = 0;

        return;
    }

    public int ord()
    {
        int $i0, $i1;
        org.apache.lucene.util.packed.PackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.PackedWriter;

        $i0 = r0.<org.apache.lucene.util.packed.PackedWriter: int written>;

        $i1 = $i0 - 1;

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
