public class com.ctc.wstx.io.WstxInputData extends java.lang.Object
{
    public static final char CHAR_NULL;
    public static final char INT_NULL;
    public static final char CHAR_SPACE;
    public static final char INT_SPACE;
    public static final int MAX_UNICODE_CHAR;
    private static final int VALID_CHAR_COUNT;
    private static final int FIRST_VALID_FOR_FIRST;
    private static final int FIRST_VALID_FOR_REST;
    private static final byte NAME_CHAR_INVALID_B;
    private static final byte NAME_CHAR_ALL_VALID_B;
    private static final byte NAME_CHAR_VALID_NONFIRST_B;
    private static final int NAME_CHAR_INVALID_I;
    private static final int NAME_CHAR_ALL_VALID_I;
    private static final int NAME_CHAR_VALID_NONFIRST_I;
    private static final byte[] sCharValidity;
    private static final int VALID_PUBID_CHAR_COUNT;
    private static final byte[] sPubidValidity;
    private static final byte PUBID_CHAR_INVALID_B;
    private static final byte PUBID_CHAR_VALID_B;
    protected boolean mXml11;
    protected char[] mInputBuffer;
    protected int mInputPtr;
    protected int mInputLen;
    protected long mCurrInputProcessed;
    protected int mCurrInputRow;
    protected int mCurrInputRowStart;

    protected void <init>()
    {
        com.ctc.wstx.io.WstxInputData r0;

        r0 := @this: com.ctc.wstx.io.WstxInputData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.io.WstxInputData: boolean mXml11> = 0;

        r0.<com.ctc.wstx.io.WstxInputData: int mInputPtr> = 0;

        r0.<com.ctc.wstx.io.WstxInputData: int mInputLen> = 0;

        r0.<com.ctc.wstx.io.WstxInputData: long mCurrInputProcessed> = 0L;

        r0.<com.ctc.wstx.io.WstxInputData: int mCurrInputRow> = 1;

        r0.<com.ctc.wstx.io.WstxInputData: int mCurrInputRowStart> = 0;

        return;
    }

    public void copyBufferStateFrom(com.ctc.wstx.io.WstxInputData)
    {
        com.ctc.wstx.io.WstxInputData r0, r1;
        long $l2;
        int $i0, $i1, $i3, $i4;
        char[] $r2;

        r0 := @this: com.ctc.wstx.io.WstxInputData;

        r1 := @parameter0: com.ctc.wstx.io.WstxInputData;

        $r2 = r1.<com.ctc.wstx.io.WstxInputData: char[] mInputBuffer>;

        r0.<com.ctc.wstx.io.WstxInputData: char[] mInputBuffer> = $r2;

        $i0 = r1.<com.ctc.wstx.io.WstxInputData: int mInputPtr>;

        r0.<com.ctc.wstx.io.WstxInputData: int mInputPtr> = $i0;

        $i1 = r1.<com.ctc.wstx.io.WstxInputData: int mInputLen>;

        r0.<com.ctc.wstx.io.WstxInputData: int mInputLen> = $i1;

        $l2 = r1.<com.ctc.wstx.io.WstxInputData: long mCurrInputProcessed>;

        r0.<com.ctc.wstx.io.WstxInputData: long mCurrInputProcessed> = $l2;

        $i3 = r1.<com.ctc.wstx.io.WstxInputData: int mCurrInputRow>;

        r0.<com.ctc.wstx.io.WstxInputData: int mCurrInputRow> = $i3;

        $i4 = r1.<com.ctc.wstx.io.WstxInputData: int mCurrInputRowStart>;

        r0.<com.ctc.wstx.io.WstxInputData: int mCurrInputRowStart> = $i4;

        return;
    }

    protected final boolean isNameStartChar(char)
    {
        com.ctc.wstx.io.WstxInputData r0;
        char c0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.io.WstxInputData;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 > 122 goto label6;

        $i2 = (int) c0;

        if $i2 < 97 goto label1;

        return 1;

     label1:
        $i3 = (int) c0;

        if $i3 >= 65 goto label2;

        return 0;

     label2:
        $i4 = (int) c0;

        if $i4 <= 90 goto label3;

        $i5 = (int) c0;

        if $i5 != 95 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        $z0 = r0.<com.ctc.wstx.io.WstxInputData: boolean mXml11>;

        if $z0 == 0 goto label7;

        $z2 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameStartChar(char)>(c0);

        goto label8;

     label7:
        $z2 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameStartChar(char)>(c0);

     label8:
        return $z2;
    }

    protected final boolean isNameChar(char)
    {
        com.ctc.wstx.io.WstxInputData r0;
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.ctc.wstx.io.WstxInputData;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 > 122 goto label10;

        $i2 = (int) c0;

        if $i2 < 97 goto label01;

        return 1;

     label01:
        $i3 = (int) c0;

        if $i3 > 90 goto label07;

        $i4 = (int) c0;

        if $i4 < 65 goto label02;

        return 1;

     label02:
        $i5 = (int) c0;

        if $i5 < 48 goto label03;

        $i6 = (int) c0;

        if $i6 <= 57 goto label04;

     label03:
        $i7 = (int) c0;

        if $i7 == 46 goto label04;

        $i8 = (int) c0;

        if $i8 != 45 goto label05;

     label04:
        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $i9 = (int) c0;

        if $i9 != 95 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        return $z2;

     label10:
        $z0 = r0.<com.ctc.wstx.io.WstxInputData: boolean mXml11>;

        if $z0 == 0 goto label11;

        $z3 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameChar(char)>(c0);

        goto label12;

     label11:
        $z3 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameChar(char)>(c0);

     label12:
        return $z3;
    }

    public static final boolean isNameStartChar(char, boolean, boolean)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, $z2, $z3;

        c0 := @parameter0: char;

        z1 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $i1 = (int) c0;

        if $i1 > 122 goto label7;

        $i2 = (int) c0;

        if $i2 < 97 goto label1;

        return 1;

     label1:
        $i3 = (int) c0;

        if $i3 >= 65 goto label3;

        $i4 = (int) c0;

        if $i4 != 58 goto label2;

        if z1 != 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $i5 = (int) c0;

        if $i5 <= 90 goto label4;

        $i6 = (int) c0;

        if $i6 != 95 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        if z0 == 0 goto label8;

        $z3 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameStartChar(char)>(c0);

        goto label9;

     label8:
        $z3 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameStartChar(char)>(c0);

     label9:
        return $z3;
    }

    public static final boolean isNameChar(char, boolean, boolean)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, z1, $z2, $z3, $z4;
        char c0;

        c0 := @parameter0: char;

        z1 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $i1 = (int) c0;

        if $i1 > 122 goto label10;

        $i2 = (int) c0;

        if $i2 < 97 goto label01;

        return 1;

     label01:
        $i3 = (int) c0;

        if $i3 > 90 goto label07;

        $i4 = (int) c0;

        if $i4 < 65 goto label02;

        return 1;

     label02:
        $i5 = (int) c0;

        if $i5 < 48 goto label03;

        $i6 = (int) c0;

        if $i6 <= 57 goto label04;

     label03:
        $i7 = (int) c0;

        if $i7 == 46 goto label04;

        $i8 = (int) c0;

        if $i8 == 45 goto label04;

        $i9 = (int) c0;

        if $i9 != 58 goto label05;

        if z1 != 0 goto label05;

     label04:
        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        return $z2;

     label07:
        $i10 = (int) c0;

        if $i10 != 95 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        return $z3;

     label10:
        if z0 == 0 goto label11;

        $z4 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameChar(char)>(c0);

        goto label12;

     label11:
        $z4 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameChar(char)>(c0);

     label12:
        return $z4;
    }

    public static final int findIllegalNameChar(java.lang.String, boolean, boolean)
    {
        int $i0, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23;
        java.lang.String r0;
        boolean z0, $z1, $z2, $z3, z4, $z5;
        char $c1, $c2;

        r0 := @parameter0: java.lang.String;

        z4 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 1 goto label01;

        $i5 = (int) -1;

        return $i5;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c1;

        if $i6 > 122 goto label04;

        $i7 = (int) $c1;

        if $i7 >= 97 goto label06;

        $i8 = (int) $c1;

        if $i8 >= 65 goto label03;

        $i9 = (int) $c1;

        if $i9 != 58 goto label02;

        if z4 == 0 goto label06;

     label02:
        return 0;

     label03:
        $i10 = (int) $c1;

        if $i10 <= 90 goto label06;

        $i11 = (int) $c1;

        if $i11 == 95 goto label06;

        return 0;

     label04:
        if z0 == 0 goto label05;

        $z5 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameStartChar(char)>($c1);

        if $z5 != 0 goto label06;

        return 0;

     label05:
        $z1 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameStartChar(char)>($c1);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        i3 = 1;

     label07:
        if i3 >= $i0 goto label17;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i12 = (int) $c2;

        if $i12 > 122 goto label13;

        $i13 = (int) $c2;

        if $i13 < 97 goto label08;

        goto label16;

     label08:
        $i14 = (int) $c2;

        if $i14 > 90 goto label12;

        $i15 = (int) $c2;

        if $i15 < 65 goto label09;

        goto label16;

     label09:
        $i16 = (int) $c2;

        if $i16 < 48 goto label10;

        $i17 = (int) $c2;

        if $i17 <= 57 goto label16;

     label10:
        $i18 = (int) $c2;

        if $i18 == 46 goto label16;

        $i19 = (int) $c2;

        if $i19 != 45 goto label11;

        goto label16;

     label11:
        $i20 = (int) $c2;

        if $i20 != 58 goto label15;

        if z4 != 0 goto label15;

        goto label16;

     label12:
        $i21 = (int) $c2;

        if $i21 != 95 goto label15;

        goto label16;

     label13:
        if z0 == 0 goto label14;

        $z3 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameChar(char)>($c2);

        if $z3 == 0 goto label15;

        goto label16;

     label14:
        $z2 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameChar(char)>($c2);

        if $z2 == 0 goto label15;

        goto label16;

     label15:
        return i3;

     label16:
        i3 = i3 + 1;

        goto label07;

     label17:
        $i23 = (int) -1;

        return $i23;
    }

    public static final int findIllegalNmtokenChar(java.lang.String, boolean, boolean)
    {
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String r0;
        boolean z0, $z1, $z2, z3;
        char $c1;

        r0 := @parameter0: java.lang.String;

        z3 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 1;

     label01:
        if i2 >= $i0 goto label11;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 > 122 goto label07;

        $i4 = (int) $c1;

        if $i4 < 97 goto label02;

        goto label10;

     label02:
        $i5 = (int) $c1;

        if $i5 > 90 goto label06;

        $i6 = (int) $c1;

        if $i6 < 65 goto label03;

        goto label10;

     label03:
        $i7 = (int) $c1;

        if $i7 < 48 goto label04;

        $i8 = (int) $c1;

        if $i8 <= 57 goto label10;

     label04:
        $i9 = (int) $c1;

        if $i9 == 46 goto label10;

        $i10 = (int) $c1;

        if $i10 != 45 goto label05;

        goto label10;

     label05:
        $i11 = (int) $c1;

        if $i11 != 58 goto label09;

        if z3 != 0 goto label09;

        goto label10;

     label06:
        $i12 = (int) $c1;

        if $i12 != 95 goto label09;

        goto label10;

     label07:
        if z0 == 0 goto label08;

        $z2 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is11NameChar(char)>($c1);

        if $z2 == 0 goto label09;

        goto label10;

     label08:
        $z1 = staticinvoke <com.ctc.wstx.util.XmlChars: boolean is10NameChar(char)>($c1);

        if $z1 == 0 goto label09;

        goto label10;

     label09:
        return i2;

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        $i14 = (int) -1;

        return $i14;
    }

    public static final boolean isSpaceChar(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 > 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getCharDesc(char)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r18, $r19, $r20, $r22, $r23, $r24;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r13, $r16, $r21;
        boolean $z0;
        char c0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z0 == 0 goto label1;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(CTRL-CHAR, code ");

        $i1 = (int) c0;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r21;

     label1:
        $i2 = (int) c0;

        if $i2 <= 255 goto label2;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (code ");

        $i3 = (int) c0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" / 0x");

        $i4 = (int) c0;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label2:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (code ");

        $i5 = (int) c0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;

        <com.ctc.wstx.io.WstxInputData: byte PUBID_CHAR_VALID_B> = 1;

        <com.ctc.wstx.io.WstxInputData: byte PUBID_CHAR_INVALID_B> = 0;

        <com.ctc.wstx.io.WstxInputData: int VALID_PUBID_CHAR_COUNT> = 128;

        <com.ctc.wstx.io.WstxInputData: int NAME_CHAR_VALID_NONFIRST_I> = -1;

        <com.ctc.wstx.io.WstxInputData: int NAME_CHAR_ALL_VALID_I> = 1;

        <com.ctc.wstx.io.WstxInputData: int NAME_CHAR_INVALID_I> = 0;

        <com.ctc.wstx.io.WstxInputData: byte NAME_CHAR_VALID_NONFIRST_B> = -1;

        <com.ctc.wstx.io.WstxInputData: byte NAME_CHAR_ALL_VALID_B> = 1;

        <com.ctc.wstx.io.WstxInputData: byte NAME_CHAR_INVALID_B> = 0;

        <com.ctc.wstx.io.WstxInputData: int FIRST_VALID_FOR_REST> = 45;

        <com.ctc.wstx.io.WstxInputData: int FIRST_VALID_FOR_FIRST> = 65;

        <com.ctc.wstx.io.WstxInputData: int VALID_CHAR_COUNT> = 256;

        <com.ctc.wstx.io.WstxInputData: int MAX_UNICODE_CHAR> = 1114111;

        <com.ctc.wstx.io.WstxInputData: char INT_SPACE> = 32;

        <com.ctc.wstx.io.WstxInputData: char CHAR_SPACE> = 32;

        <com.ctc.wstx.io.WstxInputData: char INT_NULL> = 0;

        <com.ctc.wstx.io.WstxInputData: char CHAR_NULL> = 0;

        $r0 = newarray (byte)[256];

        <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity> = $r0;

        $r1 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r1[95] = 1;

        i4 = 0;

     label01:
        if i4 > 25 goto label02;

        $r35 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $i2 = 65 + i4;

        $r35[$i2] = 1;

        $r36 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $i3 = 97 + i4;

        $r36[$i3] = 1;

        i4 = i4 + 1;

        goto label01;

     label02:
        i5 = 192;

     label03:
        if i5 >= 256 goto label04;

        $r34 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r34[i5] = 1;

        i5 = i5 + 1;

        goto label03;

     label04:
        $r2 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r2[215] = 0;

        $r3 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r3[247] = 0;

        $r4 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r4[45] = -1;

        $r5 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r5[46] = -1;

        $r6 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r6[183] = -1;

        i6 = 48;

     label05:
        if i6 > 57 goto label06;

        $r33 = <com.ctc.wstx.io.WstxInputData: byte[] sCharValidity>;

        $r33[i6] = -1;

        i6 = i6 + 1;

        goto label05;

     label06:
        $r7 = newarray (byte)[128];

        <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity> = $r7;

        i7 = 0;

     label07:
        if i7 > 25 goto label08;

        $r31 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $i0 = 65 + i7;

        $r31[$i0] = 1;

        $r32 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $i1 = 97 + i7;

        $r32[$i1] = 1;

        i7 = i7 + 1;

        goto label07;

     label08:
        i8 = 48;

     label09:
        if i8 > 57 goto label10;

        $r30 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r30[i8] = 1;

        i8 = i8 + 1;

        goto label09;

     label10:
        $r8 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r8[10] = 1;

        $r9 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r9[13] = 1;

        $r10 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r10[32] = 1;

        $r11 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r11[45] = 1;

        $r12 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r12[39] = 1;

        $r13 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r13[40] = 1;

        $r14 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r14[41] = 1;

        $r15 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r15[43] = 1;

        $r16 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r16[44] = 1;

        $r17 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r17[46] = 1;

        $r18 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r18[47] = 1;

        $r19 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r19[58] = 1;

        $r20 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r20[61] = 1;

        $r21 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r21[63] = 1;

        $r22 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r22[59] = 1;

        $r23 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r23[33] = 1;

        $r24 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r24[42] = 1;

        $r25 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r25[35] = 1;

        $r26 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r26[64] = 1;

        $r27 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r27[36] = 1;

        $r28 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r28[95] = 1;

        $r29 = <com.ctc.wstx.io.WstxInputData: byte[] sPubidValidity>;

        $r29[37] = 1;

        return;
    }
}
