public final class org.apache.lucene.search.FieldComparator$StringOrdValComparator extends org.apache.lucene.search.FieldComparator
{
    private final int[] ords;
    private final java.lang.String[] values;
    private final int[] readerGen;
    private int currentReaderGen;
    private java.lang.String[] lookup;
    private int[] order;
    private final java.lang.String field;
    private int bottomSlot;
    private int bottomOrd;
    private boolean bottomSameReader;
    private java.lang.String bottomValue;
    static final boolean $assertionsDisabled;

    public void <init>(int, java.lang.String, int, boolean)
    {
        java.lang.String[] $r2;
        int[] $r1, $r3;
        int i0, i1, $i3, $i5;
        java.lang.String r4;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator: void <init>()>();

        $i3 = (int) -1;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot> = $i5;

        $r1 = newarray (int)[i0];

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords> = $r1;

        $r2 = newarray (java.lang.String)[i0];

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values> = $r2;

        $r3 = newarray (int)[i0];

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen> = $r3;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String field> = r4;

        return;
    }

    public int compare(int, int)
    {
        java.lang.String[] $r3, $r5;
        int[] $r1, $r2, $r7, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.String r4, r6;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i3 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i2 = $r2[i1];

        if $i3 != $i2 goto label1;

        $r7 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $i6 = $r7[i0];

        $r8 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $i5 = $r8[i1];

        $i7 = $i6 - $i5;

        return $i7;

     label1:
        $r3 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        r4 = $r3[i0];

        $r5 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        r6 = $r5[i1];

        if r4 != null goto label3;

        if r6 != null goto label2;

        return 0;

     label2:
        $i9 = (int) -1;

        return $i9;

     label3:
        if r6 != null goto label4;

        return 1;

     label4:
        $i4 = virtualinvoke r4.<java.lang.String: int compareTo(java.lang.String)>(r6);

        return $i4;
    }

    public int compareBottom(int)
    {
        java.lang.String[] $r2;
        java.lang.AssertionError $r8;
        int[] $r1, $r6;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        java.lang.String r3, $r4, $r5;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i8 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i10 = (int) -1;

        if $i8 != $i10 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean bottomSameReader>;

        if $z1 == 0 goto label2;

        $i6 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd>;

        $r6 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] order>;

        $i5 = $r6[i0];

        $i7 = $i6 - $i5;

        return $i7;

     label2:
        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] order>;

        i1 = $r1[i0];

        $i2 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd>;

        i3 = $i2 - i1;

        if i3 == 0 goto label3;

        return i3;

     label3:
        $r2 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] lookup>;

        r3 = $r2[i1];

        $r4 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String bottomValue>;

        if $r4 != null goto label5;

        if r3 != null goto label4;

        return 0;

     label4:
        $i12 = (int) -1;

        return $i12;

     label5:
        if r3 != null goto label6;

        return 1;

     label6:
        $r5 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String bottomValue>;

        $i4 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>(r3);

        return $i4;
    }

    public void copy(int, int)
    {
        java.lang.String[] $r3, $r5;
        java.lang.AssertionError $r7;
        int[] $r1, $r2, $r6;
        int i0, i1, i2, $i3;
        java.lang.String $r4;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] order>;

        i1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $r2[i2] = i1;

        $z0 = <org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r5 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] lookup>;

        $r4 = $r3[i1];

        $r5[i2] = $r4;

        $r6 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i3 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen>;

        $r6[i2] = $i3;

        return;
    }

    public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException
    {
        java.lang.String[] $r6, $r7;
        java.lang.AssertionError $r9;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r2;
        boolean $z0;
        org.apache.lucene.search.FieldCache $r3;
        org.apache.lucene.search.FieldCache$StringIndex $r4;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r1;

        r1 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        i5 := @parameter1: int;

        $r3 = <org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache DEFAULT>;

        $r2 = r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String field>;

        $r4 = interfaceinvoke $r3.<org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache$StringIndex getStringIndex(org.apache.lucene.index.IndexReader,java.lang.String)>(r0, $r2);

        $i0 = r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen>;

        $i1 = $i0 + 1;

        r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen> = $i1;

        $r5 = $r4.<org.apache.lucene.search.FieldCache$StringIndex: int[] order>;

        r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] order> = $r5;

        $r6 = $r4.<org.apache.lucene.search.FieldCache$StringIndex: java.lang.String[] lookup>;

        r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] lookup> = $r6;

        $z0 = <org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] lookup>;

        $i4 = lengthof $r7;

        if $i4 > 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $i2 = r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i7 = (int) -1;

        if $i2 == $i7 goto label2;

        $i3 = r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        virtualinvoke r1.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: void setBottom(int)>($i3);

     label2:
        return;
    }

    public void setBottom(int)
    {
        java.lang.String[] $r1, $r6;
        int[] $r3, $r7, $r8, $r9, $r10, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r2, $r4, $r5;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot> = i0;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        $i1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $r2 = $r1[$i1];

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String bottomValue> = $r2;

        $i4 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen>;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i2 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i3 = $r3[$i2];

        if $i4 != $i3 goto label1;

        $r11 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $i15 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i16 = $r11[$i15];

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd> = $i16;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean bottomSameReader> = 1;

        goto label4;

     label1:
        $r4 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String bottomValue>;

        if $r4 != null goto label2;

        $r9 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $i12 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $r9[$i12] = 0;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd> = 0;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean bottomSameReader> = 1;

        $r10 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i14 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i13 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen>;

        $r10[$i14] = $i13;

        goto label4;

     label2:
        $r6 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] lookup>;

        $r5 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String bottomValue>;

        $i5 = staticinvoke <org.apache.lucene.search.FieldComparator$StringOrdValComparator: int binarySearch(java.lang.String[],java.lang.String)>($r6, $r5);

        if $i5 >= 0 goto label3;

        $i10 = neg $i5;

        $i11 = $i10 - 2;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd> = $i11;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean bottomSameReader> = 0;

        goto label4;

     label3:
        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd> = $i5;

        r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean bottomSameReader> = 1;

        $r7 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] readerGen>;

        $i7 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i6 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int currentReaderGen>;

        $r7[$i7] = $i6;

        $r8 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int[] ords>;

        $i9 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        $i8 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomOrd>;

        $r8[$i9] = $i8;

     label4:
        return;
    }

    public java.lang.String value(int)
    {
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int compareValues(java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, r1;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r2;

        r2 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        return 0;

     label1:
        $i2 = (int) -1;

        return $i2;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>(r1);

        return $i0;
    }

    public java.lang.String[] getValues()
    {
        java.lang.String[] $r1;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String[] values>;

        return $r1;
    }

    public int getBottomSlot()
    {
        int $i0;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        $i0 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int bottomSlot>;

        return $i0;
    }

    public java.lang.String getField()
    {
        java.lang.String $r1;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String field>;

        return $r1;
    }

    public volatile int compareValues(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: int compareValues(java.lang.String,java.lang.String)>($r4, $r3);

        return $i0;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        java.lang.String $r1;
        org.apache.lucene.search.FieldComparator$StringOrdValComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$StringOrdValComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$StringOrdValComparator: java.lang.String value(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FieldComparator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FieldComparator$StringOrdValComparator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
