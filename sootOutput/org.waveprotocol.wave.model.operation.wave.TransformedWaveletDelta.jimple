public final class org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta extends java.util.AbstractList
{
    private final org.waveprotocol.wave.model.wave.ParticipantId author;
    private final org.waveprotocol.wave.model.version.HashedVersion resultingVersion;
    private final long applicationTimestamp;
    private final java.util.List ops;

    public static org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.version.HashedVersion, long, org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        long l0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r2 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter1: long;

        r0 := @parameter2: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.util.List)>($r1, r2, l0, r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.version.HashedVersion, long, java.util.List)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r8, $r9, $r11, $r12;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r4;
        long l0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        java.util.ArrayList $r0;
        int $i1, $i2, $i3, $i4, $i5, i6;
        org.waveprotocol.wave.model.version.HashedVersion r5;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r6;
        java.util.List r3;
        java.lang.Object $r7, $r10;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter2: long;

        r3 := @parameter3: java.util.List;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>(r2, l0, 1L);

        i6 = 0;

     label1:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i6 >= $i2 goto label2;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r10;

        $r12 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperation cloneOp(org.waveprotocol.wave.model.operation.wave.WaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r11, $r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        i6 = i6 + 1;

        goto label1;

     label2:
        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 <= 0 goto label3;

        $r6 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>(r2, l0, 1L, r5);

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i5);

        $r8 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r7;

        $r9 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperation cloneOp(org.waveprotocol.wave.model.operation.wave.WaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r8, $r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        $r4 = new org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.lang.Iterable)>(r2, r5, l0, $r0);

        return $r4;
    }

    public void <init>(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.version.HashedVersion, long, java.lang.Iterable)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1, $r11, $r13;
        java.lang.Integer $r18, $r20;
        byte $b3, $b12;
        java.lang.Long $r15, $r25, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r10;
        java.util.List $r5, $r6, $r7, $r16, $r19, $r21;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r9;
        java.lang.Object[] $r12, $r14, $r17, $r22, $r24;
        long l0, $l2, $l4, $l11, $l13;
        java.lang.Iterable r3;
        java.util.ArrayList $r4;
        org.waveprotocol.wave.model.version.HashedVersion r2, $r23, $r27;
        int $i1, $i5, $i6, $i7, $i8, $i9, $i10, i14;
        java.lang.Object $r8;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter2: long;

        r3 := @parameter3: java.lang.Iterable;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author> = r1;

        r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion> = r2;

        r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp> = l0;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>(r3);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops> = $r5;

        i14 = 0;

     label01:
        $r6 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i14 >= $i1 goto label13;

        $r7 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i14);

        $r9 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r8;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z0 = virtualinvoke $r11.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r1);

        $r12 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r12[0] = $r13;

        $r12[1] = r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Context creator %s doesn\'t match delta author %s", $r12);

        $l2 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $b3 = $l2 cmp 1L;

        if $b3 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $r14 = newarray (java.lang.Object)[1];

        $l4 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r14[0] = $r15;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "Invalid context version increment %s", $r14);

        $z1 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: boolean hasHashedVersion()>();

        $r16 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i5 = interfaceinvoke $r16.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        if i14 != $i6 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        if $z1 != $z4 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        $r17 = newarray (java.lang.Object)[2];

        $i7 = i14 + 1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r17[0] = $r18;

        $r19 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i8 = interfaceinvoke $r19.<java.util.List: int size()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r17[1] = $r20;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z5, "[Un]expected hashed version on op %s of %s", $r17);

        $r21 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i9 = interfaceinvoke $r21.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        if i14 != $i10 goto label08;

        $r27 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $z2 = virtualinvoke $r27.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label09;

     label08:
        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        $r22 = newarray (java.lang.Object)[2];

        $r23 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r22[0] = $r23;

        $r22[1] = r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z6, "Context hashed version %s doesn\'t match delta hashed version %s", $r22);

        $l11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        $b12 = $l11 cmp l0;

        if $b12 != 0 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        $r24 = newarray (java.lang.Object)[2];

        $l13 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r24[0] = $r25;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r24[1] = $r26;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z7, "Context timestamp %s doesn\'t match delta timestamp %s", $r24);

        i14 = i14 + 1;

        goto label01;

     label13:
        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getAuthor()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author>;

        return $r1;
    }

    public long getAppliedAtVersion()
    {
        java.util.List $r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        int $i1;
        long $l0, $l2, $l3;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l2 = (long) $i1;

        $l3 = $l0 - $l2;

        return $l3;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        return $r1;
    }

    public long getApplicationTimestamp()
    {
        long $l0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $l0 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp>;

        return $l0;
    }

    public int size()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3;
        java.util.List $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r2;

        return $r3;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r7;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        long $l3;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        java.lang.Long $r3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: int hashCode()>();

        i8 = 527 + $i0;

        $i1 = 31 * i8;

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        $i2 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: int hashCode()>();

        i9 = $i1 + $i2;

        $i4 = 31 * i9;

        $l3 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $i5 = virtualinvoke $r3.<java.lang.Long: int hashCode()>();

        i10 = $i4 + $i5;

        $r4 = r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r6;

        $i6 = 31 * i10;

        $i7 = virtualinvoke r7.<java.lang.Object: int hashCode()>();

        i10 = $i6 + $i7;

        goto label1;

     label2:
        return i10;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r1, r2;
        long $l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, $r4;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r7, $r8;
        java.lang.Object r0;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        if $z0 == 0 goto label4;

        r2 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) r0;

        $r4 = r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        $r5 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        $z2 = virtualinvoke $r6.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $l1 = r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp>;

        $l0 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $r8 = r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r7 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r2;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        int $i1, $i2, i3;
        java.lang.String $r15;
        boolean $z0;
        java.util.List $r8, $r9, $r12, $r14, $r17;
        java.lang.StringBuilder $r0, $r1, $r4, $r6, $r7, $r10, $r11, $r16;
        java.lang.Object $r13, $r18;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransformedWaveletDelta(");

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion resultingVersion>;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $l0 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long applicationTimestamp>;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r8 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        goto label4;

     label1:
        $r9 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ops: [");

        $r12 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        i3 = 1;

     label2:
        $r14 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $i2 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i3 >= $i2 goto label3;

        $r16 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r17 = r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.List ops>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i3);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public volatile java.lang.Object get(int)
    {
        int i0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(i0);

        return $r1;
    }
}
