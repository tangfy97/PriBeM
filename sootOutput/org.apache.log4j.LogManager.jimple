public class org.apache.log4j.LogManager extends java.lang.Object
{
    public static final java.lang.String DEFAULT_CONFIGURATION_FILE;
    static final java.lang.String DEFAULT_XML_CONFIGURATION_FILE;
    public static final java.lang.String DEFAULT_CONFIGURATION_KEY;
    public static final java.lang.String CONFIGURATOR_CLASS_KEY;
    public static final java.lang.String DEFAULT_INIT_OVERRIDE_KEY;
    private static java.lang.Object guard;
    private static org.apache.log4j.spi.RepositorySelector repositorySelector;

    public void <init>()
    {
        org.apache.log4j.LogManager r0;

        r0 := @this: org.apache.log4j.LogManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setRepositorySelector(org.apache.log4j.spi.RepositorySelector, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object $r0, r2, $r4;
        org.apache.log4j.spi.RepositorySelector r1;
        java.lang.IllegalArgumentException $r3, $r5;

        r1 := @parameter0: org.apache.log4j.spi.RepositorySelector;

        r2 := @parameter1: java.lang.Object;

        $r0 = <org.apache.log4j.LogManager: java.lang.Object guard>;

        if $r0 == null goto label1;

        $r4 = <org.apache.log4j.LogManager: java.lang.Object guard>;

        if $r4 == r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attempted to reset the LoggerFactory without possessing the guard.");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RepositorySelector must be non-null.");

        throw $r3;

     label2:
        <org.apache.log4j.LogManager: java.lang.Object guard> = r2;

        <org.apache.log4j.LogManager: org.apache.log4j.spi.RepositorySelector repositorySelector> = r1;

        return;
    }

    private static boolean isLikelySafeScenario(java.lang.Exception)
    {
        java.io.PrintWriter $r5;
        java.io.StringWriter $r4;
        int $i0, $i2;
        java.lang.String $r3;
        java.lang.Exception r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Exception;

        $r4 = new java.io.StringWriter;

        specialinvoke $r4.<java.io.StringWriter: void <init>()>();

        $r5 = new java.io.PrintWriter;

        specialinvoke $r5.<java.io.PrintWriter: void <init>(java.io.Writer)>($r4);

        virtualinvoke r1.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r5);

        $r3 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("org.apache.catalina.loader.WebappClassLoader.stop");

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.log4j.spi.LoggerRepository getLoggerRepository()
    {
        java.lang.IllegalStateException $r3;
        org.apache.log4j.spi.DefaultRepositorySelector $r1;
        org.apache.log4j.spi.LoggerRepository $r5;
        org.apache.log4j.spi.RepositorySelector $r0, $r4;
        org.apache.log4j.spi.NOPLoggerRepository $r2;
        boolean $z0;

        $r0 = <org.apache.log4j.LogManager: org.apache.log4j.spi.RepositorySelector repositorySelector>;

        if $r0 != null goto label2;

        $r1 = new org.apache.log4j.spi.DefaultRepositorySelector;

        $r2 = new org.apache.log4j.spi.NOPLoggerRepository;

        specialinvoke $r2.<org.apache.log4j.spi.NOPLoggerRepository: void <init>()>();

        specialinvoke $r1.<org.apache.log4j.spi.DefaultRepositorySelector: void <init>(org.apache.log4j.spi.LoggerRepository)>($r2);

        <org.apache.log4j.LogManager: org.apache.log4j.spi.RepositorySelector repositorySelector> = $r1;

        <org.apache.log4j.LogManager: java.lang.Object guard> = null;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Class invariant violation");

        $z0 = staticinvoke <org.apache.log4j.LogManager: boolean isLikelySafeScenario(java.lang.Exception)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String,java.lang.Throwable)>("log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", $r3);

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", $r3);

     label2:
        $r4 = <org.apache.log4j.LogManager: org.apache.log4j.spi.RepositorySelector repositorySelector>;

        $r5 = interfaceinvoke $r4.<org.apache.log4j.spi.RepositorySelector: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        return $r5;
    }

    public static org.apache.log4j.Logger getRootLogger()
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r1 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        return $r1;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.String)
    {
        org.apache.log4j.Logger $r2;
        org.apache.log4j.spi.LoggerRepository $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r2 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>(r1);

        return $r2;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.Class)
    {
        org.apache.log4j.Logger $r3;
        org.apache.log4j.spi.LoggerRepository $r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r2);

        return $r3;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory)
    {
        org.apache.log4j.Logger $r3;
        org.apache.log4j.spi.LoggerFactory r2;
        org.apache.log4j.spi.LoggerRepository $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.log4j.spi.LoggerFactory;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r3 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r1, r2);

        return $r3;
    }

    public static org.apache.log4j.Logger exists(java.lang.String)
    {
        org.apache.log4j.Logger $r2;
        org.apache.log4j.spi.LoggerRepository $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r2 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger exists(java.lang.String)>(r1);

        return $r2;
    }

    public static java.util.Enumeration getCurrentLoggers()
    {
        org.apache.log4j.spi.LoggerRepository $r0;
        java.util.Enumeration $r1;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $r1 = interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: java.util.Enumeration getCurrentLoggers()>();

        return $r1;
    }

    public static void shutdown()
    {
        org.apache.log4j.spi.LoggerRepository $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: void shutdown()>();

        return;
    }

    public static void resetConfiguration()
    {
        org.apache.log4j.spi.LoggerRepository $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r0.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    static void <clinit>()
    {
        java.net.URL $r7, $r19, r23;
        org.apache.log4j.Hierarchy $r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        org.apache.log4j.Level $r2;
        java.lang.String $r4, $r5, $r6, $r12, $r17, $r20;
        java.lang.NoClassDefFoundError $r21;
        boolean $z0;
        org.apache.log4j.spi.DefaultRepositorySelector $r3;
        org.apache.log4j.spi.RootLogger $r1;
        java.net.MalformedURLException $r22;
        org.apache.log4j.spi.LoggerRepository $r18;

        <org.apache.log4j.LogManager: java.lang.String DEFAULT_INIT_OVERRIDE_KEY> = "log4j.defaultInitOverride";

        <org.apache.log4j.LogManager: java.lang.String CONFIGURATOR_CLASS_KEY> = "log4j.configuratorClass";

        <org.apache.log4j.LogManager: java.lang.String DEFAULT_CONFIGURATION_KEY> = "log4j.configuration";

        <org.apache.log4j.LogManager: java.lang.String DEFAULT_XML_CONFIGURATION_FILE> = "log4j.xml";

        <org.apache.log4j.LogManager: java.lang.String DEFAULT_CONFIGURATION_FILE> = "log4j.properties";

        <org.apache.log4j.LogManager: java.lang.Object guard> = null;

        $r0 = new org.apache.log4j.Hierarchy;

        $r1 = new org.apache.log4j.spi.RootLogger;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        specialinvoke $r1.<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>($r2);

        specialinvoke $r0.<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>($r1);

        $r3 = new org.apache.log4j.spi.DefaultRepositorySelector;

        specialinvoke $r3.<org.apache.log4j.spi.DefaultRepositorySelector: void <init>(org.apache.log4j.spi.LoggerRepository)>($r0);

        <org.apache.log4j.LogManager: org.apache.log4j.spi.RepositorySelector repositorySelector> = $r3;

        $r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("log4j.defaultInitOverride", null);

        if $r4 == null goto label01;

        $r20 = "false";

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label11;

     label01:
        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("log4j.configuration", null);

        $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("log4j.configuratorClass", null);

        if $r5 != null goto label02;

        $r19 = staticinvoke <org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>("log4j.xml");

        r23 = $r19;

        if $r19 != null goto label05;

        r23 = staticinvoke <org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>("log4j.properties");

        goto label05;

     label02:
        $r7 = new java.net.URL;

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r5);

        r23 = $r7;

     label03:
        goto label05;

     label04:
        $r22 := @caughtexception;

        r23 = staticinvoke <org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>($r5);

     label05:
        if r23 == null goto label09;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using URL [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r23);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] for automatic log4j configuration.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17);

     label06:
        $r18 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        staticinvoke <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>(r23, $r6, $r18);

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>("Error during default initialization", $r21);

        goto label10;

     label09:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find resource: [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r12);

     label10:
        goto label12;

     label11:
        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Default initialization of overridden by log4j.defaultInitOverrideproperty.");

     label12:
        return;

        catch java.net.MalformedURLException from label02 to label03 with label04;
        catch java.lang.NoClassDefFoundError from label06 to label07 with label08;
    }
}
