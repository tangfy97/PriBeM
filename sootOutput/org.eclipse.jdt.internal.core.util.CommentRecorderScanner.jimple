public class org.eclipse.jdt.internal.core.util.CommentRecorderScanner extends org.eclipse.jdt.internal.compiler.parser.Scanner
{

    public void <init>(boolean, boolean, boolean, long, char[][], char[][], boolean)
    {
        org.eclipse.jdt.internal.core.util.CommentRecorderScanner r0;
        long l0;
        char[][] r1, r2;
        boolean z0, z1, z2, z3;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderScanner;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        l0 := @parameter3: long;

        r1 := @parameter4: char[][];

        r2 := @parameter5: char[][];

        z3 := @parameter6: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Scanner: void <init>(boolean,boolean,boolean,long,char[][],char[][],boolean)>(z0, z1, z2, l0, r1, r2, z3);

        return;
    }

    public void recordComment(int)
    {
        org.eclipse.jdt.internal.core.util.CommentRecorderScanner r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderScanner;

        i0 := @parameter0: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Scanner: void recordComment(int)>(i0);

        if i0 != 1001 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderScanner: int[] commentStarts>;

        $i4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderScanner: int commentPtr>;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderScanner: int[] commentStarts>;

        $i1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderScanner: int commentPtr>;

        $i2 = $r1[$i1];

        $i3 = neg $i2;

        $r2[$i4] = $i3;

     label1:
        return;
    }
}
