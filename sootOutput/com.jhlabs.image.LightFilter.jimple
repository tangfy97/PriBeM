public class com.jhlabs.image.LightFilter extends com.jhlabs.image.WholeImageFilter implements java.io.Serializable
{
    public static final int COLORS_FROM_IMAGE;
    public static final int COLORS_CONSTANT;
    public static final int BUMPS_FROM_IMAGE;
    public static final int BUMPS_FROM_IMAGE_ALPHA;
    public static final int BUMPS_FROM_MAP;
    public static final int BUMPS_FROM_BEVEL;
    private float bumpHeight;
    private float bumpSoftness;
    private int bumpShape;
    private float viewDistance;
    com.jhlabs.image.LightFilter$Material material;
    private java.util.Vector lights;
    private int colorSource;
    private int bumpSource;
    private com.jhlabs.math.Function2D bumpFunction;
    private java.awt.Image environmentMap;
    private int[] envPixels;
    private int envWidth;
    private int envHeight;
    private com.jhlabs.vecmath.Vector3f l;
    private com.jhlabs.vecmath.Vector3f v;
    private com.jhlabs.vecmath.Vector3f n;
    private com.jhlabs.vecmath.Color4f shadedColor;
    private com.jhlabs.vecmath.Color4f diffuse_color;
    private com.jhlabs.vecmath.Color4f specular_color;
    private com.jhlabs.vecmath.Vector3f tmpv;
    private com.jhlabs.vecmath.Vector3f tmpv2;
    protected static final float r255;
    public static final int AMBIENT;
    public static final int DISTANT;
    public static final int POINT;
    public static final int SPOT;

    public void <init>()
    {
        com.jhlabs.image.LightFilter r0;
        com.jhlabs.image.LightFilter$DistantLight $r2;
        com.jhlabs.image.LightFilter$Material $r3;
        java.util.Vector $r1;
        com.jhlabs.vecmath.Color4f $r7, $r8, $r9;
        com.jhlabs.vecmath.Vector3f $r4, $r5, $r6, $r10, $r11;

        r0 := @this: com.jhlabs.image.LightFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: float viewDistance> = 10000.0F;

        r0.<com.jhlabs.image.LightFilter: int colorSource> = 0;

        r0.<com.jhlabs.image.LightFilter: int bumpSource> = 0;

        r0.<com.jhlabs.image.LightFilter: int envWidth> = 1;

        r0.<com.jhlabs.image.LightFilter: int envHeight> = 1;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: java.util.Vector lights> = $r1;

        $r2 = new com.jhlabs.image.LightFilter$DistantLight;

        specialinvoke $r2.<com.jhlabs.image.LightFilter$DistantLight: void <init>(com.jhlabs.image.LightFilter)>(r0);

        virtualinvoke r0.<com.jhlabs.image.LightFilter: void addLight(com.jhlabs.image.LightFilter$Light)>($r2);

        r0.<com.jhlabs.image.LightFilter: float bumpHeight> = 1.0F;

        r0.<com.jhlabs.image.LightFilter: float bumpSoftness> = 5.0F;

        r0.<com.jhlabs.image.LightFilter: int bumpShape> = 0;

        $r3 = new com.jhlabs.image.LightFilter$Material;

        specialinvoke $r3.<com.jhlabs.image.LightFilter$Material: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material> = $r3;

        $r4 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r4.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l> = $r4;

        $r5 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r5.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v> = $r5;

        $r6 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r6.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n> = $r6;

        $r7 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r7.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor> = $r7;

        $r8 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r8.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color> = $r8;

        $r9 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r9.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color> = $r9;

        $r10 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r10.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv> = $r10;

        $r11 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r11.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv2> = $r11;

        return;
    }

    public void setBumpFunction(com.jhlabs.math.Function2D)
    {
        com.jhlabs.image.LightFilter r0;
        com.jhlabs.math.Function2D r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        r0.<com.jhlabs.image.LightFilter: com.jhlabs.math.Function2D bumpFunction> = r1;

        return;
    }

    public com.jhlabs.math.Function2D getBumpFunction()
    {
        com.jhlabs.image.LightFilter r0;
        com.jhlabs.math.Function2D $r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        $r1 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.math.Function2D bumpFunction>;

        return $r1;
    }

    public void setBumpHeight(float)
    {
        com.jhlabs.image.LightFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter: float bumpHeight> = f0;

        return;
    }

    public float getBumpHeight()
    {
        com.jhlabs.image.LightFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $f0 = r0.<com.jhlabs.image.LightFilter: float bumpHeight>;

        return $f0;
    }

    public void setBumpSoftness(float)
    {
        com.jhlabs.image.LightFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter: float bumpSoftness> = f0;

        return;
    }

    public float getBumpSoftness()
    {
        com.jhlabs.image.LightFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $f0 = r0.<com.jhlabs.image.LightFilter: float bumpSoftness>;

        return $f0;
    }

    public void setBumpShape(int)
    {
        com.jhlabs.image.LightFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.LightFilter: int bumpShape> = i0;

        return;
    }

    public int getBumpShape()
    {
        com.jhlabs.image.LightFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $i0 = r0.<com.jhlabs.image.LightFilter: int bumpShape>;

        return $i0;
    }

    public void setViewDistance(float)
    {
        com.jhlabs.image.LightFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter: float viewDistance> = f0;

        return;
    }

    public float getViewDistance()
    {
        com.jhlabs.image.LightFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $f0 = r0.<com.jhlabs.image.LightFilter: float viewDistance>;

        return $f0;
    }

    public void setEnvironmentMap(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.LightFilter r0;
        java.awt.image.BufferedImage r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.jhlabs.image.LightFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.LightFilter: java.awt.Image environmentMap> = r1;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        r0.<com.jhlabs.image.LightFilter: int envWidth> = $i0;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        r0.<com.jhlabs.image.LightFilter: int envHeight> = $i1;

        $i3 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

        $i2 = r0.<com.jhlabs.image.LightFilter: int envHeight>;

        $r2 = virtualinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r1, 0, 0, $i3, $i2, null);

        r0.<com.jhlabs.image.LightFilter: int[] envPixels> = $r2;

        goto label2;

     label1:
        r0.<com.jhlabs.image.LightFilter: int envHeight> = 1;

        r0.<com.jhlabs.image.LightFilter: int envWidth> = 1;

        r0.<com.jhlabs.image.LightFilter: int[] envPixels> = null;

     label2:
        return;
    }

    public java.awt.Image getEnvironmentMap()
    {
        com.jhlabs.image.LightFilter r0;
        java.awt.Image $r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        $r1 = r0.<com.jhlabs.image.LightFilter: java.awt.Image environmentMap>;

        return $r1;
    }

    public void setColorSource(int)
    {
        com.jhlabs.image.LightFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.LightFilter: int colorSource> = i0;

        return;
    }

    public int getColorSource()
    {
        com.jhlabs.image.LightFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $i0 = r0.<com.jhlabs.image.LightFilter: int colorSource>;

        return $i0;
    }

    public void setBumpSource(int)
    {
        com.jhlabs.image.LightFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.LightFilter: int bumpSource> = i0;

        return;
    }

    public int getBumpSource()
    {
        com.jhlabs.image.LightFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.LightFilter;

        $i0 = r0.<com.jhlabs.image.LightFilter: int bumpSource>;

        return $i0;
    }

    public void setDiffuseColor(int)
    {
        com.jhlabs.image.LightFilter r0;
        int i0;
        com.jhlabs.image.LightFilter$Material $r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        i0 := @parameter0: int;

        $r1 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $r1.<com.jhlabs.image.LightFilter$Material: int diffuseColor> = i0;

        return;
    }

    public int getDiffuseColor()
    {
        com.jhlabs.image.LightFilter r0;
        int $i0;
        com.jhlabs.image.LightFilter$Material $r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        $r1 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $i0 = $r1.<com.jhlabs.image.LightFilter$Material: int diffuseColor>;

        return $i0;
    }

    public void addLight(com.jhlabs.image.LightFilter$Light)
    {
        com.jhlabs.image.LightFilter r0;
        java.util.Vector $r2;
        com.jhlabs.image.LightFilter$Light r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        r1 := @parameter0: com.jhlabs.image.LightFilter$Light;

        $r2 = r0.<com.jhlabs.image.LightFilter: java.util.Vector lights>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public void removeLight(com.jhlabs.image.LightFilter$Light)
    {
        com.jhlabs.image.LightFilter r0;
        java.util.Vector $r2;
        com.jhlabs.image.LightFilter$Light r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        r1 := @parameter0: com.jhlabs.image.LightFilter$Light;

        $r2 = r0.<com.jhlabs.image.LightFilter: java.util.Vector lights>;

        virtualinvoke $r2.<java.util.Vector: boolean removeElement(java.lang.Object)>(r1);

        return;
    }

    public java.util.Vector getLights()
    {
        com.jhlabs.image.LightFilter r0;
        java.util.Vector $r1;

        r0 := @this: com.jhlabs.image.LightFilter;

        $r1 = r0.<com.jhlabs.image.LightFilter: java.util.Vector lights>;

        return $r1;
    }

    protected void setFromRGB(com.jhlabs.vecmath.Color4f, int)
    {
        com.jhlabs.image.LightFilter r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        com.jhlabs.vecmath.Color4f r0;

        r1 := @this: com.jhlabs.image.LightFilter;

        r0 := @parameter0: com.jhlabs.vecmath.Color4f;

        i0 := @parameter1: int;

        $i1 = i0 >> 16;

        $i2 = $i1 & 255;

        $f0 = (float) $i2;

        $f7 = $f0 * 0.003921569F;

        $i3 = i0 >> 8;

        $i4 = $i3 & 255;

        $f1 = (float) $i4;

        $f6 = $f1 * 0.003921569F;

        $i5 = i0 & 255;

        $f2 = (float) $i5;

        $f5 = $f2 * 0.003921569F;

        $i6 = i0 >> 24;

        $i7 = $i6 & 255;

        $f3 = (float) $i7;

        $f4 = $f3 * 0.003921569F;

        virtualinvoke r0.<com.jhlabs.vecmath.Tuple4f: void set(float,float,float,float)>($f7, $f6, $f5, $f4);

        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        java.awt.Color $r65, $r67;
        java.util.Vector $r54, $r56;
        byte $b3, $b11, $b15, $b18, $b19, $b20, $b21, $b33;
        com.jhlabs.vecmath.Vector3f $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r61, $r62, $r63, $r72, $r73, $r74;
        float[] $r12, $r13, $r29, $r30, $r31, $r32, $r33, $r34, $r35, r60;
        com.jhlabs.image.LightFilter$Light $r36;
        com.jhlabs.image.LightFilter r1;
        int[] r0, r15, r45, $r47, $r48;
        com.jhlabs.math.Function2D $r40, $r41, $r42, r44;
        java.awt.Image $r16;
        com.jhlabs.math.ImageFunction2D r46, $r69, $r71;
        com.jhlabs.image.LightFilter$1 $r70;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i16, $i17, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i34, i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, $i43, i44, i45, i46, i47, i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65;
        float[][] r57;
        com.jhlabs.image.LightFilter$Material $r8, $r11, $r14, $r50, $r58;
        java.awt.image.Kernel $r49;
        com.jhlabs.image.LightFilter$Light[] $r55;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, f33, f34, f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, f63, $f64, f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83;
        java.awt.Rectangle r43;
        double $d0, $d1, $d2, $d3;
        com.jhlabs.vecmath.Color4f $r59, $r64, $r66, $r68;

        r1 := @this: com.jhlabs.image.LightFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r15 := @parameter2: int[];

        r43 := @parameter3: java.awt.Rectangle;

        i32 = 0;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        $f0 = r1.<com.jhlabs.image.LightFilter: float bumpHeight>;

        $f1 = 6.0F * $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f3 = r1.<com.jhlabs.image.LightFilter: float bumpHeight>;

        $b3 = $f3 cmpg 0.0F;

        $i60 = (int) $b3;

        if $i60 >= 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        $r61 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r61.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>(0.0F, 0.0F, 0.0F);

        $r62 = new com.jhlabs.vecmath.Vector3f;

        $f4 = (float) i0;

        $f8 = $f4 / 2.0F;

        $f5 = (float) i1;

        $f7 = $f5 / 2.0F;

        $f6 = r1.<com.jhlabs.image.LightFilter: float viewDistance>;

        specialinvoke $r62.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>($f8, $f7, $f6);

        $r63 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r63.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r64 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r64.<com.jhlabs.vecmath.Color4f: void <init>()>();

        $r66 = new com.jhlabs.vecmath.Color4f;

        $r65 = new java.awt.Color;

        $r8 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $i4 = $r8.<com.jhlabs.image.LightFilter$Material: int diffuseColor>;

        specialinvoke $r65.<java.awt.Color: void <init>(int)>($i4);

        specialinvoke $r66.<com.jhlabs.vecmath.Color4f: void <init>(java.awt.Color)>($r65);

        $r68 = new com.jhlabs.vecmath.Color4f;

        $r67 = new java.awt.Color;

        $r11 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $i5 = $r11.<com.jhlabs.image.LightFilter$Material: int specularColor>;

        specialinvoke $r67.<java.awt.Color: void <init>(int)>($i5);

        specialinvoke $r68.<com.jhlabs.vecmath.Color4f: void <init>(java.awt.Color)>($r67);

        $r42 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.math.Function2D bumpFunction>;

        r44 = $r42;

        $i6 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i6 == 0 goto label03;

        $i30 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i30 == 1 goto label03;

        $i31 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i31 == 2 goto label03;

        if $r42 != null goto label11;

     label03:
        $f59 = r1.<com.jhlabs.image.LightFilter: float bumpSoftness>;

        $b33 = $f59 cmpl 0.0F;

        if $b33 == 0 goto label08;

        i34 = i0;

        i35 = i1;

        r45 = r15;

        $i26 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i26 != 2 goto label04;

        $r40 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.math.Function2D bumpFunction>;

        $z5 = $r40 instanceof com.jhlabs.math.ImageFunction2D;

        if $z5 == 0 goto label04;

        $r41 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.math.Function2D bumpFunction>;

        r46 = (com.jhlabs.math.ImageFunction2D) $r41;

        i34 = virtualinvoke r46.<com.jhlabs.math.ImageFunction2D: int getWidth()>();

        i35 = virtualinvoke r46.<com.jhlabs.math.ImageFunction2D: int getHeight()>();

        r45 = virtualinvoke r46.<com.jhlabs.math.ImageFunction2D: int[] getPixels()>();

     label04:
        $i36 = i34 * i35;

        $r47 = newarray (int)[$i36];

        $i37 = i34 * i35;

        $r48 = newarray (int)[$i37];

        $f60 = r1.<com.jhlabs.image.LightFilter: float bumpSoftness>;

        $r49 = staticinvoke <com.jhlabs.image.GaussianFilter: java.awt.image.Kernel makeKernel(float)>($f60);

        $i38 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r49, r45, $r47, i34, i35, 1, $i38);

        $i39 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r49, $r47, $r48, i35, i34, 1, $i39);

        $r69 = new com.jhlabs.math.ImageFunction2D;

        $i28 = i34;

        $i29 = i35;

        $i40 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i40 != 1 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        specialinvoke $r69.<com.jhlabs.math.ImageFunction2D: void <init>(int[],int,int,int,boolean)>($r48, $i28, $i29, 1, $z7);

        r44 = $r69;

        $i27 = r1.<com.jhlabs.image.LightFilter: int bumpShape>;

        if $i27 == 0 goto label07;

        $r70 = new com.jhlabs.image.LightFilter$1;

        specialinvoke $r70.<com.jhlabs.image.LightFilter$1: void <init>(com.jhlabs.image.LightFilter,com.jhlabs.math.Function2D)>(r1, $r69);

        r44 = $r70;

     label07:
        goto label11;

     label08:
        $i7 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i7 == 2 goto label11;

        $r71 = new com.jhlabs.math.ImageFunction2D;

        $i25 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i25 != 1 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        specialinvoke $r71.<com.jhlabs.math.ImageFunction2D: void <init>(int[],int,int,int,boolean)>(r15, i0, i1, 1, $z8);

        r44 = $r71;

     label11:
        $r50 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $f61 = $r50.<com.jhlabs.image.LightFilter$Material: float reflectivity>;

        $f62 = 1.0F - $f61;

        $r72 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r72.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r73 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r73.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r74 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r74.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r54 = r1.<com.jhlabs.image.LightFilter: java.util.Vector lights>;

        $i41 = virtualinvoke $r54.<java.util.Vector: int size()>();

        $r55 = newarray (com.jhlabs.image.LightFilter$Light)[$i41];

        $r56 = r1.<com.jhlabs.image.LightFilter: java.util.Vector lights>;

        virtualinvoke $r56.<java.util.Vector: void copyInto(java.lang.Object[])>($r55);

        i42 = 0;

     label12:
        $i43 = lengthof $r55;

        if i42 >= $i43 goto label13;

        $r36 = $r55[i42];

        virtualinvoke $r36.<com.jhlabs.image.LightFilter$Light: void prepare(int,int)>(i0, i1);

        i42 = i42 + 1;

        goto label12;

     label13:
        r57 = newmultiarray (float)[3][i0];

        i44 = 0;

     label14:
        if i44 >= i0 goto label15;

        $r35 = r57[1];

        $f56 = (float) i44;

        $f57 = interfaceinvoke r44.<com.jhlabs.math.Function2D: float evaluate(float,float)>($f56, 0.0F);

        $f58 = $f2 * $f57;

        $r35[i44] = $f58;

        i44 = i44 + 1;

        goto label14;

     label15:
        i45 = 0;

     label16:
        if i45 >= i1 goto label52;

        if i45 <= 0 goto label17;

        $z9 = 1;

        goto label18;

     label17:
        $z9 = 0;

     label18:
        z1 = $z9;

        $i8 = i1 - 1;

        if i45 >= $i8 goto label19;

        $z10 = 1;

        goto label20;

     label19:
        $z10 = 0;

     label20:
        z2 = $z10;

        $f9 = (float) i45;

        $r61.<com.jhlabs.vecmath.Tuple3f: float y> = $f9;

        i46 = 0;

     label21:
        if i46 >= i0 goto label22;

        $r34 = r57[2];

        $f53 = (float) i46;

        $i24 = i45 + 1;

        $f52 = (float) $i24;

        $f54 = interfaceinvoke r44.<com.jhlabs.math.Function2D: float evaluate(float,float)>($f53, $f52);

        $f55 = $f2 * $f54;

        $r34[i46] = $f55;

        i46 = i46 + 1;

        goto label21;

     label22:
        i47 = 0;

     label23:
        if i47 >= i0 goto label51;

        if i47 <= 0 goto label24;

        $z11 = 1;

        goto label25;

     label24:
        $z11 = 0;

     label25:
        z3 = $z11;

        $i9 = i0 - 1;

        if i47 >= $i9 goto label26;

        $z12 = 1;

        goto label27;

     label26:
        $z12 = 0;

     label27:
        z4 = $z12;

        $i10 = r1.<com.jhlabs.image.LightFilter: int bumpSource>;

        if $i10 == 3 goto label44;

        i48 = 0;

        $r63.<com.jhlabs.vecmath.Tuple3f: float z> = 0.0F;

        $r63.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r63.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r29 = r57[1];

        f63 = $r29[i47];

        if z3 == 0 goto label28;

        $r33 = r57[1];

        $i23 = i47 - 1;

        $f51 = $r33[$i23];

        $f64 = $f51 - f63;

        goto label29;

     label28:
        $f64 = 0.0F;

     label29:
        f65 = $f64;

        if z1 == 0 goto label30;

        $r32 = r57[0];

        $f50 = $r32[i47];

        $f66 = $f50 - f63;

        goto label31;

     label30:
        $f66 = 0.0F;

     label31:
        f33 = $f66;

        if z4 == 0 goto label32;

        $r31 = r57[1];

        $i22 = i47 + 1;

        $f49 = $r31[$i22];

        $f67 = $f49 - f63;

        goto label33;

     label32:
        $f67 = 0.0F;

     label33:
        f34 = $f67;

        if z2 == 0 goto label34;

        $r30 = r57[2];

        $f48 = $r30[i47];

        $f68 = $f48 - f63;

        goto label35;

     label34:
        $f68 = 0.0F;

     label35:
        f35 = $f68;

        if z3 == 0 goto label37;

        if z2 == 0 goto label37;

        $r72.<com.jhlabs.vecmath.Tuple3f: float x> = -1.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float z> = f65;

        $r73.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float y> = 1.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float z> = $f68;

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r72, $r73);

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f45 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d3 = (double) $f45;

        $b21 = $d3 cmpg 0.0;

        $i61 = (int) $b21;

        if $i61 >= 0 goto label36;

        $f46 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f47 = neg $f46;

        $r74.<com.jhlabs.vecmath.Tuple3f: float z> = $f47;

     label36:
        virtualinvoke $r63.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r74);

        i48 = 1;

     label37:
        if z3 == 0 goto label39;

        if z1 == 0 goto label39;

        $r72.<com.jhlabs.vecmath.Tuple3f: float x> = -1.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float z> = f65;

        $r73.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float y> = -1.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float z> = f33;

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r72, $r73);

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f42 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d2 = (double) $f42;

        $b20 = $d2 cmpg 0.0;

        $i62 = (int) $b20;

        if $i62 >= 0 goto label38;

        $f43 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f44 = neg $f43;

        $r74.<com.jhlabs.vecmath.Tuple3f: float z> = $f44;

     label38:
        virtualinvoke $r63.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r74);

        i48 = i48 + 1;

     label39:
        if z1 == 0 goto label41;

        if z4 == 0 goto label41;

        $r72.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float y> = -1.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float z> = f33;

        $r73.<com.jhlabs.vecmath.Tuple3f: float x> = 1.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float z> = f34;

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r72, $r73);

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f39 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d1 = (double) $f39;

        $b19 = $d1 cmpg 0.0;

        $i63 = (int) $b19;

        if $i63 >= 0 goto label40;

        $f40 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f41 = neg $f40;

        $r74.<com.jhlabs.vecmath.Tuple3f: float z> = $f41;

     label40:
        virtualinvoke $r63.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r74);

        i48 = i48 + 1;

     label41:
        if z4 == 0 goto label43;

        if z2 == 0 goto label43;

        $r72.<com.jhlabs.vecmath.Tuple3f: float x> = 1.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r72.<com.jhlabs.vecmath.Tuple3f: float z> = f34;

        $r73.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float y> = 1.0F;

        $r73.<com.jhlabs.vecmath.Tuple3f: float z> = f35;

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r72, $r73);

        virtualinvoke $r74.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f36 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d0 = (double) $f36;

        $b18 = $d0 cmpg 0.0;

        $i64 = (int) $b18;

        if $i64 >= 0 goto label42;

        $f37 = $r74.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f38 = neg $f37;

        $r74.<com.jhlabs.vecmath.Tuple3f: float z> = $f38;

     label42:
        virtualinvoke $r63.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r74);

        i48 = i48 + 1;

     label43:
        $f69 = $r63.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f70 = (float) i48;

        $f71 = $f69 / $f70;

        $r63.<com.jhlabs.vecmath.Tuple3f: float x> = $f71;

        $f72 = $r63.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f73 = (float) i48;

        $f74 = $f72 / $f73;

        $r63.<com.jhlabs.vecmath.Tuple3f: float y> = $f74;

        $f75 = $r63.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f76 = (float) i48;

        $f77 = $f75 / $f76;

        $r63.<com.jhlabs.vecmath.Tuple3f: float z> = $f77;

     label44:
        if z0 == 0 goto label45;

        $f29 = $r63.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f30 = neg $f29;

        $r63.<com.jhlabs.vecmath.Tuple3f: float x> = $f30;

        $f31 = $r63.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f32 = neg $f31;

        $r63.<com.jhlabs.vecmath.Tuple3f: float y> = $f32;

     label45:
        $f10 = (float) i47;

        $r61.<com.jhlabs.vecmath.Tuple3f: float x> = $f10;

        $f11 = $r63.<com.jhlabs.vecmath.Tuple3f: float z>;

        $b11 = $f11 cmpl 0.0F;

        $i65 = (int) $b11;

        if $i65 < 0 goto label49;

        $i13 = r1.<com.jhlabs.image.LightFilter: int colorSource>;

        if $i13 != 0 goto label46;

        $i17 = r15[i32];

        virtualinvoke r1.<com.jhlabs.image.LightFilter: void setFromRGB(com.jhlabs.vecmath.Color4f,int)>($r66, $i17);

        goto label47;

     label46:
        $r14 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $i14 = $r14.<com.jhlabs.image.LightFilter$Material: int diffuseColor>;

        virtualinvoke r1.<com.jhlabs.image.LightFilter: void setFromRGB(com.jhlabs.vecmath.Color4f,int)>($r66, $i14);

     label47:
        $b15 = $f61 cmpl 0.0F;

        if $b15 == 0 goto label48;

        $r16 = r1.<com.jhlabs.image.LightFilter: java.awt.Image environmentMap>;

        if $r16 == null goto label48;

        $r17 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r17.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>($r62);

        $r18 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r18.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>($r61);

        $r19 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r19.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r20 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r20.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>($r63);

        $r21 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r21.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r24 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r23 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r22 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        $f12 = virtualinvoke $r23.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>($r22);

        $f13 = 2.0F * $f12;

        virtualinvoke $r24.<com.jhlabs.vecmath.Tuple3f: void scale(float)>($f13);

        $r26 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r25 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v>;

        virtualinvoke $r26.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>($r25);

        $r27 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r27.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r28 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $i16 = specialinvoke r1.<com.jhlabs.image.LightFilter: int getEnvironmentMap(com.jhlabs.vecmath.Vector3f,int[],int,int)>($r28, r15, i0, i1);

        virtualinvoke r1.<com.jhlabs.image.LightFilter: void setFromRGB(com.jhlabs.vecmath.Color4f,int)>($r64, $i16);

        $f14 = $r64.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f17 = $f61 * $f14;

        $f15 = $r66.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f16 = $f62 * $f15;

        $f18 = $f17 + $f16;

        $r66.<com.jhlabs.vecmath.Tuple4f: float x> = $f18;

        $f19 = $r64.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f22 = $f61 * $f19;

        $f20 = $r66.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f21 = $f62 * $f20;

        $f23 = $f22 + $f21;

        $r66.<com.jhlabs.vecmath.Tuple4f: float y> = $f23;

        $f24 = $r64.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f27 = $f61 * $f24;

        $f25 = $r66.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f26 = $f62 * $f25;

        $f28 = $f27 + $f26;

        $r66.<com.jhlabs.vecmath.Tuple4f: float z> = $f28;

     label48:
        $r58 = r1.<com.jhlabs.image.LightFilter: com.jhlabs.image.LightFilter$Material material>;

        $r59 = virtualinvoke r1.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f phongShade(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Color4f,com.jhlabs.vecmath.Color4f,com.jhlabs.image.LightFilter$Material,com.jhlabs.image.LightFilter$Light[])>($r61, $r62, $r63, $r66, $r68, $r58, $r55);

        $i49 = r15[i32];

        $i50 = $i49 & -16777216;

        $f78 = $r59.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f79 = $f78 * 255.0F;

        $i51 = (int) $f79;

        $i52 = $i51 << 16;

        $f80 = $r59.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f81 = $f80 * 255.0F;

        $i53 = (int) $f81;

        $i54 = $i53 << 8;

        $i55 = $i52 | $i54;

        $f82 = $r59.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f83 = $f82 * 255.0F;

        $i56 = (int) $f83;

        $i57 = $i55 | $i56;

        $i58 = i32;

        i32 = i32 + 1;

        $i59 = $i50 | $i57;

        r0[$i58] = $i59;

        goto label50;

     label49:
        $i12 = i32;

        i32 = i32 + 1;

        r0[$i12] = 0;

     label50:
        i47 = i47 + 1;

        goto label23;

     label51:
        r60 = r57[0];

        $r12 = r57[1];

        r57[0] = $r12;

        $r13 = r57[2];

        r57[1] = $r13;

        r57[2] = r60;

        i45 = i45 + 1;

        goto label16;

     label52:
        return r0;
    }

    public com.jhlabs.vecmath.Color4f phongShade(com.jhlabs.vecmath.Vector3f, com.jhlabs.vecmath.Vector3f, com.jhlabs.vecmath.Vector3f, com.jhlabs.vecmath.Color4f, com.jhlabs.vecmath.Color4f, com.jhlabs.image.LightFilter$Material, com.jhlabs.image.LightFilter$Light[])
    {
        com.jhlabs.image.LightFilter$Material r3;
        byte $b2, $b4, $b6;
        com.jhlabs.vecmath.Vector3f r9, $r10, $r11, $r12, $r13, $r14, $r15, r16, $r17, r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r48, $r49, $r50;
        com.jhlabs.image.LightFilter$Light r8;
        com.jhlabs.image.LightFilter r0;
        com.jhlabs.image.LightFilter$Light[] r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, f42, f43, f44, f45, f46, f47, f48, f49;
        int $i0, $i1, $i3, $i5, i7, $i8, $i9, $i10;
        double $d0, $d1, $d2, $d3, $d4;
        com.jhlabs.vecmath.Color4f r1, $r2, $r4, $r6, $r7, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47;

        r0 := @this: com.jhlabs.image.LightFilter;

        r18 := @parameter0: com.jhlabs.vecmath.Vector3f;

        r16 := @parameter1: com.jhlabs.vecmath.Vector3f;

        r9 := @parameter2: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter3: com.jhlabs.vecmath.Color4f;

        r34 := @parameter4: com.jhlabs.vecmath.Color4f;

        r3 := @parameter5: com.jhlabs.image.LightFilter$Material;

        r5 := @parameter6: com.jhlabs.image.LightFilter$Light[];

        $r2 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor>;

        virtualinvoke $r2.<com.jhlabs.vecmath.Tuple4f: void set(com.jhlabs.vecmath.Tuple4f)>(r1);

        $r4 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor>;

        $f0 = r3.<com.jhlabs.image.LightFilter$Material: float ambientIntensity>;

        virtualinvoke $r4.<com.jhlabs.vecmath.Tuple4f: void scale(float)>($f0);

        i7 = 0;

     label1:
        $i0 = lengthof r5;

        if i7 >= $i0 goto label8;

        r8 = r5[i7];

        $r10 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n>;

        virtualinvoke $r10.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>(r9);

        $r12 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        $r11 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Vector3f position>;

        virtualinvoke $r12.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>($r11);

        $i1 = r8.<com.jhlabs.image.LightFilter$Light: int type>;

        if $i1 == 1 goto label2;

        $r50 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        virtualinvoke $r50.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>(r18);

     label2:
        $r13 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        virtualinvoke $r13.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r15 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n>;

        $r14 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        $f1 = virtualinvoke $r15.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>($r14);

        f42 = $f1;

        $d0 = (double) $f1;

        $b2 = $d0 cmpl 0.0;

        $i8 = (int) $b2;

        if $i8 < 0 goto label7;

        f43 = 0.0F;

        $r17 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v>;

        virtualinvoke $r17.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>(r16);

        $r19 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v>;

        virtualinvoke $r19.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>(r18);

        $r20 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v>;

        virtualinvoke $r20.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $i3 = r8.<com.jhlabs.image.LightFilter$Light: int type>;

        if $i3 != 3 goto label3;

        $r49 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Vector3f direction>;

        $r48 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        $f40 = virtualinvoke $r49.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>($r48);

        f43 = $f40;

        $f41 = r8.<com.jhlabs.image.LightFilter$Light: float cosConeAngle>;

        $b6 = $f40 cmpg $f41;

        $i9 = (int) $b6;

        if $i9 >= 0 goto label3;

        goto label7;

     label3:
        $r21 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n>;

        $f2 = 2.0F * $f1;

        virtualinvoke $r21.<com.jhlabs.vecmath.Tuple3f: void scale(float)>($f2);

        $r23 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n>;

        $r22 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f l>;

        virtualinvoke $r23.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>($r22);

        $r25 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f n>;

        $r24 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Vector3f v>;

        $f3 = virtualinvoke $r25.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>($r24);

        $d1 = (double) $f3;

        $b4 = $d1 cmpg 0.0;

        $i10 = (int) $b4;

        if $i10 >= 0 goto label4;

        f44 = 0.0F;

        goto label5;

     label4:
        $f6 = r3.<com.jhlabs.image.LightFilter$Material: float highlight>;

        $f4 = r3.<com.jhlabs.image.LightFilter$Material: float highlight>;

        $f5 = $f4 * $f3;

        $f7 = $f6 - $f5;

        $f8 = $f7 + $f3;

        f44 = $f3 / $f8;

     label5:
        $i5 = r8.<com.jhlabs.image.LightFilter$Light: int type>;

        if $i5 != 3 goto label6;

        $f35 = r8.<com.jhlabs.image.LightFilter$Light: float cosConeAngle>;

        f45 = $f35 / f43;

        f46 = f45 * f45;

        f47 = f46 * f46;

        f48 = f47 * f47;

        $d3 = (double) f45;

        $f36 = r8.<com.jhlabs.image.LightFilter$Light: float focus>;

        $f37 = $f36 * 10.0F;

        $d2 = (double) $f37;

        $d4 = staticinvoke <java.lang.Math: double pow(double,double)>($d3, $d2);

        $f39 = (float) $d4;

        $f38 = 1.0F - f48;

        f49 = $f39 * $f38;

        f44 = f44 * f49;

        f42 = $f1 * f49;

     label6:
        $r26 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        virtualinvoke $r26.<com.jhlabs.vecmath.Tuple4f: void set(com.jhlabs.vecmath.Tuple4f)>(r1);

        $r27 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        $f9 = r3.<com.jhlabs.image.LightFilter$Material: float diffuseReflectivity>;

        virtualinvoke $r27.<com.jhlabs.vecmath.Tuple4f: void scale(float)>($f9);

        $r28 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        $f12 = $r28.<com.jhlabs.vecmath.Tuple4f: float x>;

        $r29 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f10 = $r29.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f11 = $f10 * f42;

        $f13 = $f12 * $f11;

        $r28.<com.jhlabs.vecmath.Tuple4f: float x> = $f13;

        $r30 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        $f16 = $r30.<com.jhlabs.vecmath.Tuple4f: float y>;

        $r31 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f14 = $r31.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f15 = $f14 * f42;

        $f17 = $f16 * $f15;

        $r30.<com.jhlabs.vecmath.Tuple4f: float y> = $f17;

        $r32 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        $f20 = $r32.<com.jhlabs.vecmath.Tuple4f: float z>;

        $r33 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f18 = $r33.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f19 = $f18 * f42;

        $f21 = $f20 * $f19;

        $r32.<com.jhlabs.vecmath.Tuple4f: float z> = $f21;

        $r35 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        virtualinvoke $r35.<com.jhlabs.vecmath.Tuple4f: void set(com.jhlabs.vecmath.Tuple4f)>(r34);

        $r36 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        $f22 = r3.<com.jhlabs.image.LightFilter$Material: float specularReflectivity>;

        virtualinvoke $r36.<com.jhlabs.vecmath.Tuple4f: void scale(float)>($f22);

        $r37 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        $f25 = $r37.<com.jhlabs.vecmath.Tuple4f: float x>;

        $r38 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f23 = $r38.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f24 = $f23 * f44;

        $f26 = $f25 * $f24;

        $r37.<com.jhlabs.vecmath.Tuple4f: float x> = $f26;

        $r39 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        $f29 = $r39.<com.jhlabs.vecmath.Tuple4f: float y>;

        $r40 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f27 = $r40.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f28 = $f27 * f44;

        $f30 = $f29 * $f28;

        $r39.<com.jhlabs.vecmath.Tuple4f: float y> = $f30;

        $r41 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        $f33 = $r41.<com.jhlabs.vecmath.Tuple4f: float z>;

        $r42 = r8.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f31 = $r42.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f32 = $f31 * f44;

        $f34 = $f33 * $f32;

        $r41.<com.jhlabs.vecmath.Tuple4f: float z> = $f34;

        $r44 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        $r43 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f specular_color>;

        virtualinvoke $r44.<com.jhlabs.vecmath.Tuple4f: void add(com.jhlabs.vecmath.Tuple4f)>($r43);

        $r45 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        virtualinvoke $r45.<com.jhlabs.vecmath.Tuple4f: void clamp(float,float)>(0.0F, 1.0F);

        $r47 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor>;

        $r46 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f diffuse_color>;

        virtualinvoke $r47.<com.jhlabs.vecmath.Tuple4f: void add(com.jhlabs.vecmath.Tuple4f)>($r46);

     label7:
        i7 = i7 + 1;

        goto label1;

     label8:
        $r6 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor>;

        virtualinvoke $r6.<com.jhlabs.vecmath.Tuple4f: void clamp(float,float)>(0.0F, 1.0F);

        $r7 = r0.<com.jhlabs.image.LightFilter: com.jhlabs.vecmath.Color4f shadedColor>;

        return $r7;
    }

    private int getEnvironmentMap(com.jhlabs.vecmath.Vector3f, int[], int, int)
    {
        byte $b0, $b12, $b13, $b14;
        com.jhlabs.vecmath.Vector3f r2;
        com.jhlabs.image.LightFilter r0;
        int[] $r3, $r4, $r5, $r6, r7;
        boolean z0, $z1;
        java.awt.Image $r1;
        float $f0, $f1, f2, $f3, $f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.jhlabs.image.LightFilter;

        r2 := @parameter0: com.jhlabs.vecmath.Vector3f;

        r7 := @parameter1: int[];

        i15 := @parameter2: int;

        i16 := @parameter3: int;

        $r1 = r0.<com.jhlabs.image.LightFilter: java.awt.Image environmentMap>;

        if $r1 == null goto label10;

        $f0 = r2.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f1 = neg $f0;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>($d0);

        f2 = (float) $d1;

        f5 = f2 / 3.1415927F;

        $b0 = f5 cmpl 0.0F;

        if $b0 == 0 goto label01;

        $b12 = f5 cmpl 1.0F;

        if $b12 != 0 goto label02;

     label01:
        f6 = 0.0F;

        goto label05;

     label02:
        $f3 = r2.<com.jhlabs.vecmath.Tuple3f: float x>;

        $d2 = (double) f2;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $f4 = (float) $d3;

        f7 = $f3 / $f4;

        $b13 = f7 cmpl 1.0F;

        $i31 = (int) $b13;

        if $i31 <= 0 goto label03;

        f7 = 1.0F;

        goto label04;

     label03:
        $b14 = f7 cmpg -1.0F;

        $i32 = (int) $b14;

        if $i32 >= 0 goto label04;

        f7 = -1.0F;

     label04:
        $d4 = (double) f7;

        $d5 = staticinvoke <java.lang.Math: double acos(double)>($d4);

        $f8 = (float) $d5;

        f6 = $f8 / 3.1415927F;

     label05:
        $i17 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

        $f9 = (float) $i17;

        $f10 = f6 * $f9;

        $i18 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

        $i19 = $i18 - 1;

        $f11 = (float) $i19;

        $f12 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>($f10, 0.0F, $f11);

        $i20 = r0.<com.jhlabs.image.LightFilter: int envHeight>;

        $f13 = (float) $i20;

        $f14 = f5 * $f13;

        $i21 = r0.<com.jhlabs.image.LightFilter: int envHeight>;

        $i22 = $i21 - 1;

        $f15 = (float) $i22;

        $f16 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>($f14, 0.0F, $f15);

        $i23 = (int) $f12;

        $i24 = (int) $f16;

        $f17 = (float) $i23;

        $f18 = $f12 - $f17;

        $f19 = (float) $i24;

        $f20 = $f16 - $f19;

        $i25 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

        $i26 = $i25 * $i24;

        $i27 = $i26 + $i23;

        $i28 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

        $i29 = $i28 - 1;

        if $i23 != $i29 goto label06;

        $z1 = 0;

        goto label07;

     label06:
        $z1 = 1;

     label07:
        z0 = $z1;

        $i1 = r0.<com.jhlabs.image.LightFilter: int envHeight>;

        $i2 = $i1 - 1;

        if $i24 != $i2 goto label08;

        $i30 = 0;

        goto label09;

     label08:
        $i30 = r0.<com.jhlabs.image.LightFilter: int envWidth>;

     label09:
        $r3 = r0.<com.jhlabs.image.LightFilter: int[] envPixels>;

        $i10 = $r3[$i27];

        $r4 = r0.<com.jhlabs.image.LightFilter: int[] envPixels>;

        $i3 = $i27 + z0;

        $i9 = $r4[$i3];

        $r5 = r0.<com.jhlabs.image.LightFilter: int[] envPixels>;

        $i4 = $i27 + $i30;

        $i8 = $r5[$i4];

        $r6 = r0.<com.jhlabs.image.LightFilter: int[] envPixels>;

        $i5 = $i27 + z0;

        $i6 = $i5 + $i30;

        $i7 = $r6[$i6];

        $i11 = staticinvoke <com.jhlabs.image.ImageMath: int bilinearInterpolate(float,float,int,int,int,int)>($f18, $f20, $i10, $i9, $i8, $i7);

        return $i11;

     label10:
        return 0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.LightFilter r0;

        r0 := @this: com.jhlabs.image.LightFilter;

        return "Stylize/Light Effects...";
    }

    static int access$000(com.jhlabs.image.LightFilter)
    {
        com.jhlabs.image.LightFilter r0;
        int $i0;

        r0 := @parameter0: com.jhlabs.image.LightFilter;

        $i0 = r0.<com.jhlabs.image.LightFilter: int bumpShape>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.LightFilter: int SPOT> = 3;

        <com.jhlabs.image.LightFilter: int POINT> = 2;

        <com.jhlabs.image.LightFilter: int DISTANT> = 1;

        <com.jhlabs.image.LightFilter: int AMBIENT> = 0;

        <com.jhlabs.image.LightFilter: float r255> = 0.003921569F;

        <com.jhlabs.image.LightFilter: int BUMPS_FROM_BEVEL> = 3;

        <com.jhlabs.image.LightFilter: int BUMPS_FROM_MAP> = 2;

        <com.jhlabs.image.LightFilter: int BUMPS_FROM_IMAGE_ALPHA> = 1;

        <com.jhlabs.image.LightFilter: int BUMPS_FROM_IMAGE> = 0;

        <com.jhlabs.image.LightFilter: int COLORS_CONSTANT> = 1;

        <com.jhlabs.image.LightFilter: int COLORS_FROM_IMAGE> = 0;

        return;
    }
}
