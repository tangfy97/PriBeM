public abstract class org.apache.batik.swing.gvt.AbstractJGVTComponent extends javax.swing.JComponent
{
    protected org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener;
    protected org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer;
    protected org.apache.batik.gvt.GraphicsNode gvtRoot;
    protected org.apache.batik.gvt.renderer.ImageRendererFactory rendererFactory;
    protected org.apache.batik.gvt.renderer.ImageRenderer renderer;
    protected java.util.List gvtTreeRendererListeners;
    protected boolean needRender;
    protected boolean progressivePaint;
    protected org.apache.batik.util.HaltingThread progressivePaintThread;
    protected java.awt.image.BufferedImage image;
    protected java.awt.geom.AffineTransform initialTransform;
    protected java.awt.geom.AffineTransform renderingTransform;
    protected java.awt.geom.AffineTransform paintingTransform;
    protected java.util.List interactors;
    protected org.apache.batik.swing.gvt.Interactor interactor;
    protected java.util.List overlays;
    protected java.util.List jgvtListeners;
    protected org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher;
    protected org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager;
    protected boolean doubleBufferedRendering;
    protected boolean eventsEnabled;
    protected boolean selectableText;
    protected boolean useUnixTextSelection;
    protected boolean suspendInteractions;
    protected boolean disableInteractions;

    public void <init>()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void <init>(boolean,boolean)>(0, 0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        java.awt.Color $r8;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener $r9, $r10;
        java.awt.geom.AffineTransform $r4, $r5;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$1 $r11;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.renderer.ConcreteImageRendererFactory $r1;
        java.util.List $r3;
        java.util.LinkedList $r2, $r6, $r7;
        boolean z0, z1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.JComponent: void <init>()>();

        $r1 = new org.apache.batik.gvt.renderer.ConcreteImageRendererFactory;

        specialinvoke $r1.<org.apache.batik.gvt.renderer.ConcreteImageRendererFactory: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRendererFactory rendererFactory> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r2);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List gvtTreeRendererListeners> = $r3;

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r4;

        $r5 = new java.awt.geom.AffineTransform;

        specialinvoke $r5.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List interactors> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List overlays> = $r7;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners> = null;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean useUnixTextSelection> = 1;

        $r8 = <java.awt.Color: java.awt.Color white>;

        virtualinvoke r0.<javax.swing.JComponent: void setBackground(java.awt.Color)>($r8);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean eventsEnabled> = z0;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean selectableText> = z1;

        $r9 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener createListener()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener> = $r9;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void addAWTListeners()>();

        $r10 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void addGVTTreeRendererListener(org.apache.batik.swing.gvt.GVTTreeRendererListener)>($r10);

        $r11 = new org.apache.batik.swing.gvt.AbstractJGVTComponent$1;

        specialinvoke $r11.<org.apache.batik.swing.gvt.AbstractJGVTComponent$1: void <init>(org.apache.batik.swing.gvt.AbstractJGVTComponent)>(r0);

        virtualinvoke r0.<java.awt.Component: void addComponentListener(java.awt.event.ComponentListener)>($r11);

        return;
    }

    protected void addAWTListeners()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener $r1, $r2, $r3;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        virtualinvoke r0.<java.awt.Component: void addKeyListener(java.awt.event.KeyListener)>($r1);

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        virtualinvoke r0.<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>($r2);

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r3);

        return;
    }

    public void setDisableInteractions(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean disableInteractions> = z0;

        return;
    }

    public boolean getDisableInteractions()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean disableInteractions>;

        return $z0;
    }

    public void setUseUnixTextSelection(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean useUnixTextSelection> = z0;

        return;
    }

    public void getUseUnixTextSelection(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean useUnixTextSelection> = z0;

        return;
    }

    public java.util.List getInteractors()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List interactors>;

        return $r1;
    }

    public java.util.List getOverlays()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List overlays>;

        return $r1;
    }

    public java.awt.image.BufferedImage getOffScreen()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image>;

        return $r1;
    }

    public void addJGVTComponentListener(org.apache.batik.swing.gvt.JGVTComponentListener)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r1, $r3;
        org.apache.batik.swing.gvt.JGVTComponentListener r2;
        java.util.LinkedList $r4;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: org.apache.batik.swing.gvt.JGVTComponentListener;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners> = $r4;

     label1:
        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void removeJGVTComponentListener(org.apache.batik.swing.gvt.JGVTComponentListener)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r1, $r3;
        org.apache.batik.swing.gvt.JGVTComponentListener r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: org.apache.batik.swing.gvt.JGVTComponentListener;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

        return;
    }

    public void resetRenderingTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform)>($r1);

        return;
    }

    public void stopProcessing()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.GVTTreeRenderer $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        if $r1 == null goto label1;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean needRender> = 0;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        virtualinvoke $r2.<org.apache.batik.util.HaltingThread: void halt()>();

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void haltProgressivePaintThread()>();

     label1:
        return;
    }

    public org.apache.batik.gvt.GraphicsNode getGraphicsNode()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        return $r1;
    }

    public void setGraphicsNode(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.GraphicsNode r1;
        java.awt.geom.AffineTransform $r2, $r3;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setGraphicsNode(org.apache.batik.gvt.GraphicsNode,boolean)>(r1, 1);

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r2;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean updateRenderingTransform()>();

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r3, 1);

        return;
    }

    protected void setGraphicsNode(org.apache.batik.gvt.GraphicsNode, boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.GraphicsNode r1;
        org.apache.batik.gvt.event.AWTEventDispatcher $r2, $r3;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        z0 := @parameter1: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot> = r1;

        if r1 == null goto label1;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void initializeEventHandling()>();

     label1:
        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        if $r3 == null goto label2;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        virtualinvoke $r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void setRootNode(org.apache.batik.gvt.GraphicsNode)>(r1);

     label2:
        return;
    }

    protected void initializeEventHandling()
    {
        org.apache.batik.gvt.event.AWTEventDispatcher $r1, $r2;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r3, $r5;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$UnixTextSelectionListener $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean eventsEnabled>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.batik.gvt.event.AWTEventDispatcher;

        specialinvoke $r1.<org.apache.batik.gvt.event.AWTEventDispatcher: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher> = $r1;

        $z1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean selectableText>;

        if $z1 == 0 goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        $r3 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager createTextSelectionManager(org.apache.batik.gvt.event.EventDispatcher)>($r2);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager> = $r3;

        $r5 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        $r4 = new org.apache.batik.swing.gvt.AbstractJGVTComponent$UnixTextSelectionListener;

        specialinvoke $r4.<org.apache.batik.swing.gvt.AbstractJGVTComponent$UnixTextSelectionListener: void <init>(org.apache.batik.swing.gvt.AbstractJGVTComponent)>(r0);

        virtualinvoke $r5.<org.apache.batik.swing.gvt.TextSelectionManager: void addSelectionListener(org.apache.batik.gvt.event.SelectionListener)>($r4);

     label1:
        return;
    }

    protected org.apache.batik.swing.gvt.TextSelectionManager createTextSelectionManager(org.apache.batik.gvt.event.EventDispatcher)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r1;
        org.apache.batik.swing.gvt.TextSelectionManager $r0;
        org.apache.batik.gvt.event.EventDispatcher r2;

        r1 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: org.apache.batik.gvt.event.EventDispatcher;

        $r0 = new org.apache.batik.swing.gvt.TextSelectionManager;

        specialinvoke $r0.<org.apache.batik.swing.gvt.TextSelectionManager: void <init>(org.apache.batik.swing.gvt.AbstractJGVTComponent,org.apache.batik.gvt.event.EventDispatcher)>(r1, r2);

        return $r0;
    }

    public org.apache.batik.swing.gvt.TextSelectionManager getTextSelectionManager()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        return $r1;
    }

    public void setSelectionOverlayColor(java.awt.Color)
    {
        java.awt.Color r2;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r3;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: java.awt.Color;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        virtualinvoke $r3.<org.apache.batik.swing.gvt.TextSelectionManager: void setSelectionOverlayColor(java.awt.Color)>(r2);

     label1:
        return;
    }

    public java.awt.Color getSelectionOverlayColor()
    {
        java.awt.Color $r3;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        $r3 = virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: java.awt.Color getSelectionOverlayColor()>();

        return $r3;

     label1:
        return null;
    }

    public void setSelectionOverlayStrokeColor(java.awt.Color)
    {
        java.awt.Color r2;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r3;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: java.awt.Color;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        virtualinvoke $r3.<org.apache.batik.swing.gvt.TextSelectionManager: void setSelectionOverlayStrokeColor(java.awt.Color)>(r2);

     label1:
        return;
    }

    public java.awt.Color getSelectionOverlayStrokeColor()
    {
        java.awt.Color $r3;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        $r3 = virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: java.awt.Color getSelectionOverlayStrokeColor()>();

        return $r3;

     label1:
        return null;
    }

    public void setSelectionOverlayXORMode(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: void setSelectionOverlayXORMode(boolean)>(z0);

     label1:
        return;
    }

    public boolean isSelectionOverlayXORMode()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        $z0 = virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: boolean isSelectionOverlayXORMode()>();

        return $z0;

     label1:
        return 0;
    }

    public void select(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.text.Mark r2, r3;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r4;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: org.apache.batik.gvt.text.Mark;

        r3 := @parameter1: org.apache.batik.gvt.text.Mark;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        virtualinvoke $r4.<org.apache.batik.swing.gvt.TextSelectionManager: void setSelection(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>(r2, r3);

     label1:
        return;
    }

    public void deselectAll()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: void clearSelection()>();

     label1:
        return;
    }

    public void setProgressivePaint(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean progressivePaint>;

        if $z1 == z0 goto label1;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean progressivePaint> = z0;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void haltProgressivePaintThread()>();

     label1:
        return;
    }

    public boolean getProgressivePaint()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean progressivePaint>;

        return $z0;
    }

    public java.awt.Rectangle getRenderRect()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.Rectangle $r2;
        java.awt.Dimension $r1;
        int $i0, $i1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getSize()>();

        $r2 = new java.awt.Rectangle;

        $i1 = $r1.<java.awt.Dimension: int width>;

        $i0 = $r1.<java.awt.Dimension: int height>;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        return $r2;
    }

    public void immediateRepaint()
    {
        java.awt.Rectangle $r2;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$2 $r0;
        java.lang.Exception $r3;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.Rectangle getRenderRect()>();

        $z1 = r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        if $z1 == 0 goto label1;

        $i7 = $r2.<java.awt.Rectangle: int x>;

        $i6 = $r2.<java.awt.Rectangle: int y>;

        $i5 = $r2.<java.awt.Rectangle: int width>;

        $i4 = $r2.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<java.awt.Component: void repaint(int,int,int,int)>($i7, $i6, $i5, $i4);

        goto label2;

     label1:
        $i3 = $r2.<java.awt.Rectangle: int x>;

        $i2 = $r2.<java.awt.Rectangle: int y>;

        $i1 = $r2.<java.awt.Rectangle: int width>;

        $i0 = $r2.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<javax.swing.JComponent: void paintImmediately(int,int,int,int)>($i3, $i2, $i1, $i0);

     label2:
        goto label6;

     label3:
        $r0 = new org.apache.batik.swing.gvt.AbstractJGVTComponent$2;

        specialinvoke $r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent$2: void <init>(org.apache.batik.swing.gvt.AbstractJGVTComponent)>(r1);

        staticinvoke <java.awt.EventQueue: void invokeAndWait(java.lang.Runnable)>($r0);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void paintComponent(java.awt.Graphics)
    {
        java.awt.Color $r5;
        java.awt.Rectangle $r3;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.AlphaComposite $r4;
        org.apache.batik.swing.gvt.Overlay $r14;
        java.awt.Graphics2D r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.util.Iterator $r12;
        java.awt.image.BufferedImage $r6, $r8;
        java.awt.geom.AffineTransform $r7, $r15;
        java.util.List $r11;
        java.awt.Graphics r1;
        java.awt.RenderingHints$Key $r10;
        java.lang.Object $r9, $r13;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: java.awt.Graphics;

        specialinvoke r0.<javax.swing.JComponent: void paintComponent(java.awt.Graphics)>(r1);

        r2 = (java.awt.Graphics2D) r1;

        $r3 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.Rectangle getRenderRect()>();

        $r4 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke r2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r4);

        $r5 = virtualinvoke r0.<java.awt.Component: java.awt.Color getBackground()>();

        virtualinvoke r2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r5);

        $i3 = $r3.<java.awt.Rectangle: int x>;

        $i2 = $r3.<java.awt.Rectangle: int y>;

        $i1 = $r3.<java.awt.Rectangle: int width>;

        $i0 = $r3.<java.awt.Rectangle: int height>;

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        $r6 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image>;

        if $r6 == null goto label4;

        $r7 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform paintingTransform>;

        if $r7 == null goto label1;

        $r15 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform paintingTransform>;

        virtualinvoke r2.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r15);

     label1:
        $r8 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image>;

        virtualinvoke r2.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r8, null);

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r10, $r9);

        $r11 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List overlays>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.apache.batik.swing.gvt.Overlay) $r13;

        interfaceinvoke $r14.<org.apache.batik.swing.gvt.Overlay: void paint(java.awt.Graphics)>(r1);

     label3:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label4:
        return;
    }

    public void setPaintingTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.AffineTransform r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform paintingTransform> = r1;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void immediateRepaint()>();

        return;
    }

    public java.awt.geom.AffineTransform getPaintingTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform paintingTransform>;

        return $r1;
    }

    public void setRenderingTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.AffineTransform r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>(r1, 1);

        return;
    }

    public void setRenderingTransform(java.awt.geom.AffineTransform, boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.NoninvertibleTransformException $r12;
        org.apache.batik.swing.gvt.JGVTComponentListener r8;
        boolean z0, $z1;
        java.util.Iterator $r5;
        org.apache.batik.gvt.event.AWTEventDispatcher $r3, $r10;
        java.awt.geom.AffineTransform $r1, r2, $r9, $r11;
        java.awt.event.ComponentEvent $r6;
        java.util.List $r4, $r13;
        java.lang.Object $r7;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        z0 := @parameter1: boolean;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform> = $r1;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean suspendInteractions> = 1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        if $r3 == null goto label4;

     label1:
        $r10 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        $r9 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        $r11 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        virtualinvoke $r10.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void setBaseTransform(java.awt.geom.AffineTransform)>($r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void handleException(java.lang.Exception)>($r12);

     label4:
        $r13 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        if $r13 == null goto label7;

        $r4 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List jgvtListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r6 = new java.awt.event.ComponentEvent;

        specialinvoke $r6.<java.awt.event.ComponentEvent: void <init>(java.awt.Component,int)>(r0, 1337);

        goto label6;

     label5:
        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.batik.swing.gvt.JGVTComponentListener) $r7;

        interfaceinvoke r8.<org.apache.batik.swing.gvt.JGVTComponentListener: void componentTransformChanged(java.awt.event.ComponentEvent)>($r6);

     label6:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

     label7:
        if z0 == 0 goto label8;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void scheduleGVTRendering()>();

     label8:
        return;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public java.awt.geom.AffineTransform getInitialTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r1;
        java.awt.geom.AffineTransform $r0, $r2;

        r1 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r0 = new java.awt.geom.AffineTransform;

        $r2 = r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);

        return $r0;
    }

    public java.awt.geom.AffineTransform getRenderingTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r1;
        java.awt.geom.AffineTransform $r0, $r2;

        r1 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r0 = new java.awt.geom.AffineTransform;

        $r2 = r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);

        return $r0;
    }

    public void setDoubleBufferedRendering(boolean)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering> = z0;

        return;
    }

    public boolean getDoubleBufferedRendering()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        return $z0;
    }

    public void addGVTTreeRendererListener(org.apache.batik.swing.gvt.GVTTreeRendererListener)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r2;
        org.apache.batik.swing.gvt.GVTTreeRendererListener r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: org.apache.batik.swing.gvt.GVTTreeRendererListener;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List gvtTreeRendererListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeGVTTreeRendererListener(org.apache.batik.swing.gvt.GVTTreeRendererListener)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r2;
        org.apache.batik.swing.gvt.GVTTreeRendererListener r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: org.apache.batik.swing.gvt.GVTTreeRendererListener;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List gvtTreeRendererListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void flush()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.renderer.ImageRenderer $r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r1.<org.apache.batik.gvt.renderer.ImageRenderer: void flush()>();

        return;
    }

    public void flush(java.awt.Rectangle)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.Rectangle r1;
        org.apache.batik.gvt.renderer.ImageRenderer $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: java.awt.Rectangle;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r2.<org.apache.batik.gvt.renderer.ImageRenderer: void flush(java.awt.Rectangle)>(r1);

        return;
    }

    protected org.apache.batik.gvt.renderer.ImageRenderer createImageRenderer()
    {
        org.apache.batik.gvt.renderer.ImageRendererFactory $r1;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.gvt.renderer.ImageRenderer $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRendererFactory rendererFactory>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.renderer.ImageRendererFactory: org.apache.batik.gvt.renderer.ImageRenderer createStaticImageRenderer()>();

        return $r2;
    }

    protected void renderGVTTree()
    {
        java.lang.IllegalStateException $r24;
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.NoninvertibleTransformException $r23;
        boolean $z0, $z1;
        java.awt.Shape $r7;
        org.apache.batik.gvt.GraphicsNode $r2, $r5, $r21, $r22;
        org.apache.batik.gvt.event.AWTEventDispatcher $r17, $r19;
        java.awt.geom.AffineTransform $r9, $r30, $r31;
        java.util.List $r12;
        org.apache.batik.gvt.renderer.ImageRenderer $r3, $r4, $r6, $r10, $r20;
        java.awt.Rectangle $r1;
        org.apache.batik.swing.gvt.GVTTreeRenderer $r8, $r11, $r14, $r18;
        java.lang.StringBuffer $r25, $r26, $r28;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r27, $r29;
        java.util.Iterator $r13;
        java.lang.Object $r15;
        org.apache.batik.swing.gvt.GVTTreeRendererListener $r16;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.Rectangle getRenderRect()>();

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        if $r2 == null goto label01;

        $i0 = $r1.<java.awt.Rectangle: int width>;

        if $i0 <= 0 goto label01;

        $i1 = $r1.<java.awt.Rectangle: int height>;

        if $i1 > 0 goto label02;

     label01:
        return;

     label02:
        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        if $r3 == null goto label03;

        $r20 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        $r21 = interfaceinvoke $r20.<org.apache.batik.gvt.renderer.Renderer: org.apache.batik.gvt.GraphicsNode getTree()>();

        $r22 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        if $r21 == $r22 goto label04;

     label03:
        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer createImageRenderer()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer> = $r4;

        $r6 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        $r5 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        interfaceinvoke $r6.<org.apache.batik.gvt.renderer.Renderer: void setTree(org.apache.batik.gvt.GraphicsNode)>($r5);

     label04:
        $r30 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        $r31 = virtualinvoke $r30.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NoninvertibleTransformEx:");

        $r27 = virtualinvoke $r23.<java.lang.Throwable: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label07:
        $r7 = virtualinvoke $r31.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r8 = new org.apache.batik.swing.gvt.GVTTreeRenderer;

        $r10 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        $r9 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        $i3 = $r1.<java.awt.Rectangle: int width>;

        $i2 = $r1.<java.awt.Rectangle: int height>;

        specialinvoke $r8.<org.apache.batik.swing.gvt.GVTTreeRenderer: void <init>(org.apache.batik.gvt.renderer.ImageRenderer,java.awt.geom.AffineTransform,boolean,java.awt.Shape,int,int)>($r10, $r9, $z0, $r7, $i3, $i2);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer> = $r8;

        $r11 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        virtualinvoke $r11.<java.lang.Thread: void setPriority(int)>(1);

        $r12 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List gvtTreeRendererListeners>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

        goto label09;

     label08:
        $r14 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (org.apache.batik.swing.gvt.GVTTreeRendererListener) $r15;

        virtualinvoke $r14.<org.apache.batik.swing.gvt.GVTTreeRenderer: void addGVTTreeRendererListener(org.apache.batik.swing.gvt.GVTTreeRendererListener)>($r16);

     label09:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label08;

        $r17 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        if $r17 == null goto label10;

        $r19 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        virtualinvoke $r19.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void setEventDispatchEnabled(boolean)>(0);

     label10:
        $r18 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        virtualinvoke $r18.<java.lang.Thread: void start()>();

        return;

        catch java.awt.geom.NoninvertibleTransformException from label04 to label05 with label06;
    }

    protected boolean computeRenderingTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.awt.geom.AffineTransform $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        $z0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r4, 0);

        return 1;

     label1:
        return 0;
    }

    protected boolean updateRenderingTransform()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        return 0;
    }

    protected void handleException(java.lang.Exception)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.lang.Exception r1;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r1 := @parameter0: java.lang.Exception;

        return;
    }

    protected void releaseRenderingReferences()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        java.util.List $r3;
        org.apache.batik.swing.gvt.Overlay $r4;
        org.apache.batik.swing.gvt.TextSelectionManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher> = null;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List overlays>;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager>;

        $r4 = virtualinvoke $r2.<org.apache.batik.swing.gvt.TextSelectionManager: org.apache.batik.swing.gvt.Overlay getSelectionOverlay()>();

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r4);

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.TextSelectionManager textSelectionManager> = null;

     label1:
        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer> = null;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = null;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot> = null;

        return;
    }

    protected void scheduleGVTRendering()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.swing.gvt.GVTTreeRenderer $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        if $r1 == null goto label1;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean needRender> = 1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        virtualinvoke $r2.<org.apache.batik.util.HaltingThread: void halt()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void renderGVTTree()>();

     label2:
        return;
    }

    private void haltProgressivePaintThread()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;
        org.apache.batik.util.HaltingThread $r1, $r2;

        r0 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.util.HaltingThread progressivePaintThread>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.util.HaltingThread progressivePaintThread>;

        virtualinvoke $r2.<org.apache.batik.util.HaltingThread: void halt()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.util.HaltingThread progressivePaintThread> = null;

     label1:
        return;
    }

    protected org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener createListener()
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r1;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener $r0;

        r1 := @this: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        $r0 = new org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener;

        specialinvoke $r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener: void <init>(org.apache.batik.swing.gvt.AbstractJGVTComponent)>(r1);

        return $r0;
    }

    static void access$200(org.apache.batik.swing.gvt.AbstractJGVTComponent)
    {
        org.apache.batik.swing.gvt.AbstractJGVTComponent r0;

        r0 := @parameter0: org.apache.batik.swing.gvt.AbstractJGVTComponent;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void haltProgressivePaintThread()>();

        return;
    }
}
