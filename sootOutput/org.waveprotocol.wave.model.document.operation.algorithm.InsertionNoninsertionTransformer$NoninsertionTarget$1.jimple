class org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1 extends org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache
{
    final org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$1)>(null);

        return;
    }

    void resolve(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget $r4;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1 r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r5;
        int i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget access$300(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)>($r3);

        $r5 = $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        return;
    }
}
