public class org.waveprotocol.box.server.waveserver.WaveServerModule extends com.google.inject.AbstractModule
{
    private static final org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC;
    private static final org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY;
    private final int listenerExecutorThreadCount;
    private final java.util.concurrent.Executor waveletLoadExecutor;
    private final java.util.concurrent.Executor persistExecutor;
    private final java.util.concurrent.Executor storageContinuationExecutor;
    private final boolean enableFederation;

    public void <init>(boolean, int, int, int, int)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r0;
        int i0, i1, i2, i3;
        java.util.concurrent.ExecutorService $r1, $r2, $r3;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerModule;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.google.inject.AbstractModule: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: boolean enableFederation> = z0;

        r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: int listenerExecutorThreadCount> = i0;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i1);

        r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor waveletLoadExecutor> = $r1;

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i2);

        r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor persistExecutor> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i3);

        r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor storageContinuationExecutor> = $r3;

        return;
    }

    protected void configure()
    {
        java.lang.IllegalStateException $r36;
        java.lang.NoSuchMethodException $r35;
        com.google.inject.binder.AnnotatedBindingBuilder $r1, $r3, $r4, $r8, $r10, $r14, $r15, $r16, $r17, $r19, $r21, $r23, $r24, $r26, $r28, $r30, $r34;
        boolean $z0;
        com.google.inject.binder.ScopedBindingBuilder $r2, $r9, $r18, $r20, $r22, $r25, $r27;
        org.waveprotocol.box.server.waveserver.WaveServerModule r0;
        com.google.inject.binder.LinkedBindingBuilder $r32;
        java.lang.reflect.Constructor $r7, $r13;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r29;
        int $i0;
        java.util.concurrent.ExecutorService $r33;
        java.lang.Class[] $r5, $r11;
        java.lang.Class $r6, $r12;
        com.google.inject.name.Named $r31;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerModule;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/TimeSource;");

        $r2 = interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/DefaultTimeSource;");

        interfaceinvoke $r2.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: boolean enableFederation>;

        if $z0 == 0 goto label1;

        $r34 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/SignatureHandler;");

        interfaceinvoke $r34.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/SigningSignatureHandler$SigningSignatureHandlerProvider;");

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/SignatureHandler;");

        interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/NonSigningSignatureHandler$NonSigningSignatureHandlerProvider;");

     label2:
        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/WaveSignatureVerifier;");

        $r6 = class "Lorg/waveprotocol/wave/crypto/WaveSignatureVerifier;";

        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Lorg/waveprotocol/wave/crypto/WaveCertPathValidator;";

        $r5[1] = class "Lorg/waveprotocol/wave/crypto/CertPathStore;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

        interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r7);

        $r8 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/VerifiedCertChainCache;");

        $r9 = interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/DefaultCacheImpl;");

        interfaceinvoke $r9.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r10 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/DefaultCacheImpl;");

        $r12 = class "Lorg/waveprotocol/wave/crypto/DefaultCacheImpl;";

        $r11 = newarray (java.lang.Class)[1];

        $r11[0] = class "Lorg/waveprotocol/wave/crypto/TimeSource;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);

        interfaceinvoke $r10.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r13);

     label3:
        goto label5;

     label4:
        $r35 := @caughtexception;

        $r36 = new java.lang.IllegalStateException;

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r35);

        throw $r36;

     label5:
        $r14 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletNotificationDispatcher;");

        interfaceinvoke $r14.<com.google.inject.binder.AnnotatedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r15 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveBus;");

        interfaceinvoke $r15.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletNotificationDispatcher;");

        $r16 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletNotificationSubscriber;");

        interfaceinvoke $r16.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletNotificationDispatcher;");

        $r17 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/TrustRootsProvider;");

        $r18 = interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/DefaultTrustRootsProvider;");

        interfaceinvoke $r18.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r19 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/CertificateManager;");

        $r20 = interfaceinvoke $r19.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/CertificateManagerImpl;");

        interfaceinvoke $r20.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r21 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/DeltaAndSnapshotStore;");

        $r22 = interfaceinvoke $r21.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/DeltaStoreBasedSnapshotStore;");

        interfaceinvoke $r22.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r23 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveMap;");

        interfaceinvoke $r23.<com.google.inject.binder.AnnotatedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r24 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletProvider;");

        $r25 = interfaceinvoke $r24.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveServerImpl;");

        interfaceinvoke $r25.<com.google.inject.binder.ScopedBindingBuilder: void asEagerSingleton()>();

        $r26 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/ReadableWaveletDataProvider;");

        $r27 = interfaceinvoke $r26.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveServerImpl;");

        interfaceinvoke $r27.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        $r28 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/wave/model/version/HashedVersionFactory;");

        $r29 = <org.waveprotocol.box.server.waveserver.WaveServerModule: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        interfaceinvoke $r28.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r29);

        $r30 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljava/util/concurrent/Executor;");

        $r31 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("listener_executor");

        $r32 = interfaceinvoke $r30.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.'annotation'.Annotation)>($r31);

        $i0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: int listenerExecutorThreadCount>;

        $r33 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>($i0);

        interfaceinvoke $r32.<com.google.inject.binder.LinkedBindingBuilder: void toInstance(java.lang.Object)>($r33);

        return;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory provideLocalWaveletContainerFactory(org.waveprotocol.box.server.waveserver.DeltaStore)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r1;
        org.waveprotocol.box.server.waveserver.DeltaStore r2;
        org.waveprotocol.box.server.waveserver.WaveServerModule$1 $r0;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveServerModule;

        r2 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore;

        $r0 = new org.waveprotocol.box.server.waveserver.WaveServerModule$1;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.WaveServerModule$1: void <init>(org.waveprotocol.box.server.waveserver.WaveServerModule,org.waveprotocol.box.server.waveserver.DeltaStore)>(r1, r2);

        return $r0;
    }

    private org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory provideRemoteWaveletContainerFactory(org.waveprotocol.box.server.waveserver.DeltaStore)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r1;
        org.waveprotocol.box.server.waveserver.DeltaStore r2;
        org.waveprotocol.box.server.waveserver.WaveServerModule$2 $r0;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveServerModule;

        r2 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore;

        $r0 = new org.waveprotocol.box.server.waveserver.WaveServerModule$2;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.WaveServerModule$2: void <init>(org.waveprotocol.box.server.waveserver.WaveServerModule,org.waveprotocol.box.server.waveserver.DeltaStore)>(r1, r2);

        return $r0;
    }

    private org.waveprotocol.wave.crypto.WaveCertPathValidator provideWaveCertPathValidator(boolean, org.waveprotocol.wave.crypto.TimeSource, org.waveprotocol.wave.crypto.VerifiedCertChainCache, org.waveprotocol.wave.crypto.TrustRootsProvider)
    {
        org.waveprotocol.wave.crypto.CachedCertPathValidator $r0;
        org.waveprotocol.wave.crypto.DisabledCertPathValidator $r4;
        org.waveprotocol.box.server.waveserver.WaveServerModule r5;
        org.waveprotocol.wave.crypto.TrustRootsProvider r3;
        org.waveprotocol.wave.crypto.VerifiedCertChainCache r1;
        org.waveprotocol.wave.crypto.TimeSource r2;
        boolean z0;

        r5 := @this: org.waveprotocol.box.server.waveserver.WaveServerModule;

        z0 := @parameter0: boolean;

        r2 := @parameter1: org.waveprotocol.wave.crypto.TimeSource;

        r1 := @parameter2: org.waveprotocol.wave.crypto.VerifiedCertChainCache;

        r3 := @parameter3: org.waveprotocol.wave.crypto.TrustRootsProvider;

        if z0 == 0 goto label1;

        $r4 = new org.waveprotocol.wave.crypto.DisabledCertPathValidator;

        specialinvoke $r4.<org.waveprotocol.wave.crypto.DisabledCertPathValidator: void <init>()>();

        return $r4;

     label1:
        $r0 = new org.waveprotocol.wave.crypto.CachedCertPathValidator;

        specialinvoke $r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: void <init>(org.waveprotocol.wave.crypto.VerifiedCertChainCache,org.waveprotocol.wave.crypto.TimeSource,org.waveprotocol.wave.crypto.TrustRootsProvider)>(r1, r2, r3);

        return $r0;
    }

    static com.google.common.util.concurrent.ListenableFuture loadWaveletState(java.util.concurrent.Executor, org.waveprotocol.box.server.waveserver.DeltaStore, org.waveprotocol.wave.model.id.WaveletName, java.util.concurrent.Executor)
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        com.google.common.util.concurrent.ListenableFutureTask $r0;
        java.util.concurrent.Executor r4, r5;
        org.waveprotocol.box.server.waveserver.WaveServerModule$3 $r1;
        org.waveprotocol.box.server.waveserver.DeltaStore r2;

        r5 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.DeltaStore;

        r3 := @parameter2: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter3: java.util.concurrent.Executor;

        $r0 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r1 = new org.waveprotocol.box.server.waveserver.WaveServerModule$3;

        specialinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveServerModule$3: void <init>(org.waveprotocol.box.server.waveserver.DeltaStore,org.waveprotocol.wave.model.id.WaveletName,java.util.concurrent.Executor)>(r2, r3, r4);

        specialinvoke $r0.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r1);

        interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    static java.util.concurrent.Executor access$000(org.waveprotocol.box.server.waveserver.WaveServerModule)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerModule;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor waveletLoadExecutor>;

        return $r1;
    }

    static java.util.concurrent.Executor access$100(org.waveprotocol.box.server.waveserver.WaveServerModule)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerModule;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor persistExecutor>;

        return $r1;
    }

    static java.util.concurrent.Executor access$200(org.waveprotocol.box.server.waveserver.WaveServerModule)
    {
        org.waveprotocol.box.server.waveserver.WaveServerModule r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerModule;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerModule: java.util.concurrent.Executor storageContinuationExecutor>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec $r1;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r0, $r3;
        org.waveprotocol.wave.model.version.HashedVersionFactoryImpl $r2;

        $r0 = new org.waveprotocol.wave.model.id.IdURIEncoderDecoder;

        $r1 = new org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec;

        specialinvoke $r1.<org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec: void <init>()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: void <init>(org.waveprotocol.wave.model.id.URIEncoderDecoder$PercentEncoderDecoder)>($r1);

        <org.waveprotocol.box.server.waveserver.WaveServerModule: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC> = $r0;

        $r2 = new org.waveprotocol.wave.model.version.HashedVersionFactoryImpl;

        $r3 = <org.waveprotocol.box.server.waveserver.WaveServerModule: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC>;

        specialinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersionFactoryImpl: void <init>(org.waveprotocol.wave.model.id.IdURIEncoderDecoder)>($r3);

        <org.waveprotocol.box.server.waveserver.WaveServerModule: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY> = $r2;

        return;
    }
}
