public class org.apache.xmlbeans.impl.common.XmlEncodingSniffer extends java.lang.Object
{
    private java.lang.String _xmlencoding;
    private java.lang.String _javaencoding;
    private java.io.InputStream _stream;
    private java.io.Reader _reader;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$common$XmlEncodingSniffer;

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException, java.io.UnsupportedEncodingException
    {
        java.lang.AssertionError $r10;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;
        java.lang.String r2, $r3, $r4, $r5, $r8, $r9, $r11, $r12, $r13, $r14;
        boolean $z0;
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream $r6;
        java.io.InputStream r1, $r7;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream> = r1;

        if r2 == null goto label1;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.common.EncodingMap: java.lang.String getJava2IANAMapping(java.lang.String)>(r2);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = $r11;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r3 != null goto label2;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = r2;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r4 != null goto label4;

        $r6 = new org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        $r7 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream>;

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void <init>(java.io.InputStream)>($r7);

        $r8 = virtualinvoke $r6.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String getXmlEncoding()>();

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = $r8;

        $z0 = <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r9 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r9 != null goto label3;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label3:
        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream> = $r6;

     label4:
        $r12 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.common.EncodingMap: java.lang.String getIANA2JavaMapping(java.lang.String)>($r12);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding> = $r13;

        $r14 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding>;

        if $r14 != null goto label5;

        $r5 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding> = $r5;

     label5:
        return;
    }

    public void <init>(java.io.Reader, java.lang.String) throws java.io.IOException, java.io.UnsupportedEncodingException
    {
        org.apache.xmlbeans.impl.common.SniffedXmlReader $r1;
        java.io.Reader r2;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11, $r12;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        r2 := @parameter0: java.io.Reader;

        r11 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r11 != null goto label1;

        r11 = "UTF-8";

     label1:
        $r1 = new org.apache.xmlbeans.impl.common.SniffedXmlReader;

        specialinvoke $r1.<org.apache.xmlbeans.impl.common.SniffedXmlReader: void <init>(java.io.Reader)>(r2);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader> = $r1;

        $r3 = virtualinvoke $r1.<org.apache.xmlbeans.impl.common.SniffedXmlReader: java.lang.String getXmlEncoding()>();

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = $r3;

        $r4 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r4 != null goto label3;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.common.EncodingMap: java.lang.String getJava2IANAMapping(java.lang.String)>(r11);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = $r9;

        $r10 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r10 == null goto label2;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding> = r11;

        goto label3;

     label2:
        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = r11;

     label3:
        $r12 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        if $r12 != null goto label4;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding> = "UTF-8";

     label4:
        $r5 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.EncodingMap: java.lang.String getIANA2JavaMapping(java.lang.String)>($r5);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding> = $r6;

        $r7 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding>;

        if $r7 != null goto label5;

        $r8 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding> = $r8;

     label5:
        return;
    }

    public java.lang.String getXmlEncoding()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        $r1 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _xmlencoding>;

        return $r1;
    }

    public java.lang.String getJavaEncoding()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        $r1 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding>;

        return $r1;
    }

    public java.io.InputStream getStream() throws java.io.UnsupportedEncodingException
    {
        java.io.Reader $r2, $r5;
        org.apache.xmlbeans.impl.common.ReaderInputStream $r3;
        java.lang.String $r4;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;
        java.io.InputStream $r1, r6;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        $r1 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream>;

        if $r1 == null goto label1;

        r6 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream>;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream> = null;

        return r6;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader>;

        if $r2 == null goto label2;

        $r3 = new org.apache.xmlbeans.impl.common.ReaderInputStream;

        $r5 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader>;

        $r4 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding>;

        specialinvoke $r3.<org.apache.xmlbeans.impl.common.ReaderInputStream: void <init>(java.io.Reader,java.lang.String)>($r5, $r4);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader> = null;

        return $r3;

     label2:
        return null;
    }

    public java.io.Reader getReader() throws java.io.UnsupportedEncodingException
    {
        java.io.Reader $r1, r6;
        java.lang.String $r4;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer r0;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        $r1 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader>;

        if $r1 == null goto label1;

        r6 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader>;

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.Reader _reader> = null;

        return r6;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream>;

        if $r2 == null goto label2;

        $r3 = new java.io.InputStreamReader;

        $r5 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream>;

        $r4 = r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String _javaencoding>;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, $r4);

        r0.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.io.InputStream _stream> = null;

        return $r3;

     label2:
        return null;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.Class class$org$apache$xmlbeans$impl$common$XmlEncodingSniffer>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.common.XmlEncodingSniffer");

        <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.Class class$org$apache$xmlbeans$impl$common$XmlEncodingSniffer> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.Class class$org$apache$xmlbeans$impl$common$XmlEncodingSniffer>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.common.XmlEncodingSniffer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
