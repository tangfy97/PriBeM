public class org.apache.james.mime4j.codec.EncoderUtil extends java.lang.Object
{
    private static final byte[] BASE64_TABLE;
    private static final char BASE64_PAD;
    private static final java.util.BitSet Q_REGULAR_CHARS;
    private static final java.util.BitSet Q_RESTRICTED_CHARS;
    private static final int MAX_USED_CHARACTERS;
    private static final java.lang.String ENC_WORD_PREFIX;
    private static final java.lang.String ENC_WORD_SUFFIX;
    private static final int ENCODED_WORD_MAX_LENGTH;
    private static final java.util.BitSet TOKEN_CHARS;
    private static final java.util.BitSet ATEXT_CHARS;

    private static java.util.BitSet initChars(java.lang.String)
    {
        int $i0, $i1, i2, $i4;
        java.lang.String r1;
        java.util.BitSet $r2;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(128);

        i2 = 33;

     label1:
        if i2 >= 127 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(i2);

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        virtualinvoke $r2.<java.util.BitSet: void set(int)>(i2);

     label2:
        $i1 = i2 + 1;

        i2 = (char) $i1;

        goto label1;

     label3:
        return $r2;
    }

    private void <init>()
    {
        org.apache.james.mime4j.codec.EncoderUtil r0;

        r0 := @this: org.apache.james.mime4j.codec.EncoderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encodeAddressDisplayName(java.lang.String)
    {
        java.lang.String r0, $r1, $r3;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isAtomPhrase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>(r0, 0);

        if $z1 == 0 goto label2;

        $r2 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage WORD_ENTITY>;

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r0, $r2);

        return $r3;

     label2:
        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String encodeAddressLocalPart(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isDotAtomText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String encodeHeaderParameter(java.lang.String, java.lang.String)
    {
        java.util.Locale $r0;
        java.lang.String $r1, r2, $r6, $r8, $r13, r14;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r12;

        r14 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke r14.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r0);

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String encodeIfNecessary(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        int i0;
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>(r0, i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)>(r0, r1, i0);

        return $r2;

     label1:
        return r0;
    }

    public static boolean hasToBeEncoded(java.lang.String, int)
    {
        char $c2;
        java.lang.IllegalArgumentException $r3, $r4;
        int i0, $i1, i3, i4, $i5, $i6, $i7, $i8;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label01:
        if i0 < 0 goto label02;

        if i0 <= 50 goto label03;

     label02:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label03:
        i3 = i0;

        i4 = 0;

     label04:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i1 goto label10;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c2;

        if $i5 == 9 goto label05;

        $i6 = (int) $c2;

        if $i6 != 32 goto label06;

     label05:
        i3 = 0;

        goto label09;

     label06:
        i3 = i3 + 1;

        if i3 <= 77 goto label07;

        return 1;

     label07:
        $i7 = (int) $c2;

        if $i7 < 32 goto label08;

        $i8 = (int) $c2;

        if $i8 < 127 goto label09;

     label08:
        return 1;

     label09:
        i4 = i4 + 1;

        goto label04;

     label10:
        return 0;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>(r0, r1, 0, null, null);

        return $r2;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        int i0;
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>(r0, r1, i0, null, null);

        return $r2;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, org.apache.james.mime4j.codec.EncoderUtil$Encoding)
    {
        byte[] $r2;
        java.nio.charset.Charset r20;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding $r3, r21;
        int i0;
        java.lang.String r0, $r6, $r9, $r11, $r14, $r17, $r18;
        java.lang.IllegalArgumentException $r1, $r19;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r12, $r13, $r15, $r16;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r10;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        r20 := @parameter3: java.nio.charset.Charset;

        r21 := @parameter4: org.apache.james.mime4j.codec.EncoderUtil$Encoding;

        if r0 != null goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r19;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 50 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label3:
        if r20 != null goto label4;

        r20 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.nio.charset.Charset determineCharset(java.lang.String)>(r0);

     label4:
        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r0, r20);

        if r21 != null goto label5;

        r21 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>($r2, r10);

     label5:
        $r3 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        if r21 != $r3 goto label6;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r14 = virtualinvoke r20.<java.nio.charset.Charset: java.lang.String name()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?B?");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>($r17, r0, i0, r20, $r2);

        return $r18;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r6 = virtualinvoke r20.<java.nio.charset.Charset: java.lang.String name()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?Q?");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>($r9, r0, r10, i0, r20, $r2);

        return $r11;
    }

    public static java.lang.String encodeB(byte[])
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        byte $b4, $b8, $b12, $b14, $b17, $b23, $b27, $b31, $b33, $b36, $b41, $b46, $b50, $b54, $b57;
        java.lang.StringBuilder $r12;
        short $s5, $s15, $s18, $s34, $s37, $s42, $s63, $s65, $s67, $s69, $s71, $s73;
        java.lang.String $r11;
        int i0, $i1, $i2, $i3, $i6, $i7, $i10, $i11, $i16, $i19, $i20, $i21, $i22, $i25, $i26, $i29, $i30, $i35, $i38, $i39, $i40, $i43, $i44, $i45, $i48, $i49, $i52, $i53, $i56, i59, i60, i61, i62, $i64, $i66, $i68, $i70, $i72, $i74;
        char $c9, $c13, $c24, $c28, $c32, $c47, $c51, $c55, $c58;

        r1 := @parameter0: byte[];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        i59 = 0;

        i0 = lengthof r1;

     label1:
        $i1 = i0 - 2;

        if i59 >= $i1 goto label2;

        $b33 = r1[i59];

        $s63 = (short) $b33;

        $s34 = $s63 & 255;

        $i64 = (int) $s34;

        $i39 = $i64 << 16;

        $i35 = i59 + 1;

        $b36 = r1[$i35];

        $s65 = (short) $b36;

        $s37 = $s65 & 255;

        $i66 = (int) $s37;

        $i38 = $i66 << 8;

        $i43 = $i39 | $i38;

        $i40 = i59 + 2;

        $b41 = r1[$i40];

        $s67 = (short) $b41;

        $s42 = $s67 & 255;

        $i68 = (int) $s42;

        i60 = $i43 | $i68;

        $r7 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i44 = i60 >> 18;

        $i45 = $i44 & 63;

        $b46 = $r7[$i45];

        $c47 = (char) $b46;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c47);

        $r8 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i48 = i60 >> 12;

        $i49 = $i48 & 63;

        $b50 = $r8[$i49];

        $c51 = (char) $b50;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c51);

        $r9 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i52 = i60 >> 6;

        $i53 = $i52 & 63;

        $b54 = $r9[$i53];

        $c55 = (char) $b54;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c55);

        $r10 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i56 = i60 & 63;

        $b57 = $r10[$i56];

        $c58 = (char) $b57;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c58);

        i59 = i59 + 3;

        goto label1;

     label2:
        $i2 = i0 - 2;

        if i59 != $i2 goto label3;

        $b14 = r1[i59];

        $s69 = (short) $b14;

        $s15 = $s69 & 255;

        $i70 = (int) $s15;

        $i20 = $i70 << 16;

        $i16 = i59 + 1;

        $b17 = r1[$i16];

        $s71 = (short) $b17;

        $s18 = $s71 & 255;

        $i72 = (int) $s18;

        $i19 = $i72 << 8;

        i61 = $i20 | $i19;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i21 = i61 >> 18;

        $i22 = $i21 & 63;

        $b23 = $r4[$i22];

        $c24 = (char) $b23;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c24);

        $r5 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i25 = i61 >> 12;

        $i26 = $i25 & 63;

        $b27 = $r5[$i26];

        $c28 = (char) $b27;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c28);

        $r6 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i29 = i61 >> 6;

        $i30 = $i29 & 63;

        $b31 = $r6[$i30];

        $c32 = (char) $b31;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c32);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        goto label4;

     label3:
        $i3 = i0 - 1;

        if i59 != $i3 goto label4;

        $b4 = r1[i59];

        $s73 = (short) $b4;

        $s5 = $s73 & 255;

        $i74 = (int) $s5;

        i62 = $i74 << 16;

        $r2 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i6 = i62 >> 18;

        $i7 = $i6 & 63;

        $b8 = $r2[$i7];

        $c9 = (char) $b8;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i10 = i62 >> 12;

        $i11 = $i10 & 63;

        $b12 = $r3[$i11];

        $c13 = (char) $b12;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

     label4:
        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static java.lang.String encodeQ(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r4;
        short s1, $s5, $s9;
        byte $b0;
        int $i3, $i7, i8, $i10, $i11, $i12, $i13;
        java.lang.String $r5;
        boolean $z0;
        char $c2, $c4, $c6;
        java.lang.StringBuilder $r7;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r0, $r1;
        java.util.BitSet r2, $r6;

        r4 := @parameter0: byte[];

        r0 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r0 != $r1 goto label1;

        $r6 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label2;

     label1:
        $r6 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label2:
        r2 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $i7 = lengthof r4;

        i8 = 0;

     label3:
        if i8 >= $i7 goto label7;

        $b0 = r4[i8];

        $s9 = (short) $b0;

        s1 = $s9 & 255;

        $i10 = (int) s1;

        if $i10 != 32 goto label4;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        goto label6;

     label4:
        $i11 = (int) s1;

        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>($i11);

        if $z0 != 0 goto label5;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i12 = (int) s1;

        $i3 = $i12 >>> 4;

        $c4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>($i3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $s5 = s1 & 15;

        $i13 = (int) $s5;

        $c6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>($i13);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        goto label6;

     label5:
        $c2 = (char) s1;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label6:
        i8 = i8 + 1;

        goto label3;

     label7:
        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static boolean isToken(java.lang.String)
    {
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r0;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS>;

        $i3 = (int) $c1;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($i3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static boolean isAtomPhrase(java.lang.String)
    {
        char $c1;
        int $i0, i2, $i3;
        java.lang.String r0;
        java.util.BitSet $r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.String;

        z2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $i3 = (int) $c1;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($i3);

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return z2;
    }

    private static boolean isDotAtomText(java.lang.String)
    {
        char $c1;
        int $i0, $i2, i3, i4, $i5, $i6;
        java.lang.String r0;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i3 = 46;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i4 = 0;

     label2:
        if i4 >= $i0 goto label6;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c1;

        if $i5 != 46 goto label4;

        if i3 == 46 goto label3;

        $i2 = $i0 - 1;

        if i4 != $i2 goto label5;

     label3:
        return 0;

     label4:
        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $i6 = (int) $c1;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($i6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        i3 = $c1;

        i4 = i4 + 1;

        goto label2;

     label6:
        return 1;
    }

    private static java.lang.String quote(java.lang.String)
    {
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String r0, $r1, $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\\\\\"]", "\\\\$0");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String encodeB(java.lang.String, java.lang.String, int, java.nio.charset.Charset, byte[])
    {
        byte[] r0, $r6, $r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r20;
        java.nio.charset.Charset r5;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r1, $r2, r3, $r4, $r7, $r8, $r10, $r15, $r18, $r21;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        r5 := @parameter3: java.nio.charset.Charset;

        r0 := @parameter4: byte[];

        $i0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int bEncodedLength(byte[])>(r0);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 + $i0;

        $r2 = "?=";

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        i4 = $i2 + $i3;

        $i6 = 75 - i5;

        if i4 > $i6 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(byte[])>(r0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label1:
        $i7 = virtualinvoke r3.<java.lang.String: int length()>();

        $i8 = $i7 / 2;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        $r6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r4, r5);

        $r7 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>(r1, $r4, i5, r5, $r6);

        $i9 = virtualinvoke r3.<java.lang.String: int length()>();

        $i10 = $i9 / 2;

        $r8 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i10);

        $r9 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r8, r5);

        $r10 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>(r1, $r8, 0, r5, $r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private static int bEncodedLength(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 2;

        $i2 = $i1 / 3;

        $i3 = $i2 * 4;

        return $i3;
    }

    private static java.lang.String encodeQ(java.lang.String, java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, byte[])
    {
        byte[] r0, $r7, $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r21;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;
        java.nio.charset.Charset r6;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r2, $r3, r4, $r5, $r8, $r9, $r11, $r16, $r19, $r22;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i5 := @parameter3: int;

        r6 := @parameter4: java.nio.charset.Charset;

        r0 := @parameter5: byte[];

        $i0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int qEncodedLength(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r0, r1);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 + $i0;

        $r3 = "?=";

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        i4 = $i2 + $i3;

        $i6 = 75 - i5;

        if i4 > $i6 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r0, r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label1:
        $i7 = virtualinvoke r4.<java.lang.String: int length()>();

        $i8 = $i7 / 2;

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        $r7 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r5, r6);

        $r8 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>(r2, $r5, r1, i5, r6, $r7);

        $i9 = virtualinvoke r4.<java.lang.String: int length()>();

        $i10 = $i9 / 2;

        $r9 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i10);

        $r10 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r9, r6);

        $r11 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>(r2, $r9, r1, 0, r6, $r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    private static int qEncodedLength(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r3;
        short s1, $s5;
        byte $b0;
        int i2, i3, $i4, $i6, $i7;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r0, $r1;
        java.util.BitSet r2, $r4;
        boolean $z0;

        r3 := @parameter0: byte[];

        r0 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r0 != $r1 goto label1;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label2;

     label1:
        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label2:
        r2 = $r4;

        i2 = 0;

        i3 = 0;

     label3:
        $i4 = lengthof r3;

        if i3 >= $i4 goto label7;

        $b0 = r3[i3];

        $s5 = (short) $b0;

        s1 = $s5 & 255;

        $i6 = (int) s1;

        if $i6 != 32 goto label4;

        i2 = i2 + 1;

        goto label6;

     label4:
        $i7 = (int) s1;

        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>($i7);

        if $z0 != 0 goto label5;

        i2 = i2 + 3;

        goto label6;

     label5:
        i2 = i2 + 1;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return i2;
    }

    private static byte[] encode(java.lang.String, java.nio.charset.Charset)
    {
        byte[] r3;
        java.nio.charset.Charset r0;
        int $i0;
        java.lang.String r1;
        java.nio.ByteBuffer $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.nio.charset.Charset;

        $r2 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>(r1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        r3 = newarray (byte)[$i0];

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        return r3;
    }

    private static java.nio.charset.Charset determineCharset(java.lang.String)
    {
        char $c1;
        java.nio.charset.Charset $r1, $r2;
        int $i0, i2, $i3, $i4;
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 = 1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 <= 255 goto label2;

        $r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset UTF_8>;

        return $r1;

     label2:
        $i4 = (int) $c1;

        if $i4 <= 127 goto label3;

        z0 = 0;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $r2 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;

        goto label6;

     label5:
        $r2 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;

     label6:
        return $r2;
    }

    private static org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r0;
        short s4, $s9;
        byte $b3;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding $r4, $r6;
        int $i0, $i1, $i2, i5, i6, $i7, i8, $i10, $i11;
        boolean $z0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1, $r2;
        java.util.BitSet r3, $r5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

        return $r4;

     label1:
        $r2 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r1 != $r2 goto label2;

        $r5 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label3;

     label2:
        $r5 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label3:
        r3 = $r5;

        i5 = 0;

        i6 = 0;

     label4:
        $i7 = lengthof r0;

        if i6 >= $i7 goto label6;

        $b3 = r0[i6];

        $s9 = (short) $b3;

        s4 = $s9 & 255;

        $i10 = (int) s4;

        if $i10 == 32 goto label5;

        $i11 = (int) s4;

        $z0 = virtualinvoke r3.<java.util.BitSet: boolean get(int)>($i11);

        if $z0 != 0 goto label5;

        i5 = i5 + 1;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        $i2 = i5 * 100;

        $i1 = lengthof r0;

        i8 = $i2 / $i1;

        if i8 <= 30 goto label7;

        $r6 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        goto label8;

     label7:
        $r6 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

     label8:
        return $r6;
    }

    private static char hexDigit(int)
    {
        int i0, $i1, $i2, $i3;
        char $c4;

        i0 := @parameter0: int;

        if i0 >= 10 goto label1;

        $i3 = i0 + 48;

        $c4 = (char) $i3;

        goto label2;

     label1:
        $i1 = i0 - 10;

        $i2 = $i1 + 65;

        $c4 = (char) $i2;

     label2:
        return $c4;
    }

    static void <clinit>()
    {
        byte[] $r0;
        java.util.BitSet $r1, $r2, $r3, $r4;

        <org.apache.james.mime4j.codec.EncoderUtil: int ENCODED_WORD_MAX_LENGTH> = 75;

        <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String ENC_WORD_SUFFIX> = "?=";

        <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String ENC_WORD_PREFIX> = "=?";

        <org.apache.james.mime4j.codec.EncoderUtil: int MAX_USED_CHARACTERS> = 50;

        <org.apache.james.mime4j.codec.EncoderUtil: char BASE64_PAD> = 61;

        $r0 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE> = $r0;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS> = $r1;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?\"#$%&\'(),.:;<>@[\\]^`{|}~");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS> = $r2;

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@,;:\\\"/[]?=");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS> = $r3;

        $r4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@.,;:\\\"[]");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS> = $r4;

        return;
    }
}
