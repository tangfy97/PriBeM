public abstract class org.apache.fontbox.encoding.Encoding extends java.lang.Object
{
    public static final int NUMBER_OF_MAC_GLYPHS;
    public static final java.lang.String[] MAC_GLYPH_NAMES;
    public static java.util.Map MAC_GLYPH_NAMES_INDICES;
    private static final java.lang.String NOTDEF;
    protected java.util.Map codeToName;
    protected java.util.Map nameToCode;
    private static final java.util.Map NAME_TO_CHARACTER;
    private static final java.util.Map CHARACTER_TO_NAME;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        org.apache.fontbox.encoding.Encoding r0;

        r0 := @this: org.apache.fontbox.encoding.Encoding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.encoding.Encoding: java.util.Map codeToName> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.encoding.Encoding: java.util.Map nameToCode> = $r2;

        return;
    }

    protected void addCharacterEncoding(int, java.lang.String)
    {
        java.util.Map $r1, $r4;
        int i0;
        java.lang.String r3;
        org.apache.fontbox.encoding.Encoding r0;
        java.lang.Integer $r2, $r5;

        r0 := @this: org.apache.fontbox.encoding.Encoding;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.fontbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        $r4 = r0.<org.apache.fontbox.encoding.Encoding: java.util.Map nameToCode>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        return;
    }

    public int getCode(java.lang.String) throws java.io.IOException
    {
        java.io.IOException $r5;
        java.lang.Integer r4;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r1, $r10;
        org.apache.fontbox.encoding.Encoding r0;

        r0 := @this: org.apache.fontbox.encoding.Encoding;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.fontbox.encoding.Encoding: java.util.Map nameToCode>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No character code for character name \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.lang.String getName(int) throws java.io.IOException
    {
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.String r4;
        org.apache.fontbox.encoding.Encoding r0;
        java.lang.Integer $r2;

        r0 := @this: org.apache.fontbox.encoding.Encoding;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.fontbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        r4 = ".notdef";

     label1:
        return r4;
    }

    public java.lang.String getNameFromCharacter(char) throws java.io.IOException
    {
        char c0;
        java.io.IOException $r4;
        java.lang.Character $r1;
        java.util.Map $r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r3, $r9;
        org.apache.fontbox.encoding.Encoding r10;

        r10 := @this: org.apache.fontbox.encoding.Encoding;

        c0 := @parameter0: char;

        $r0 = <org.apache.fontbox.encoding.Encoding: java.util.Map CHARACTER_TO_NAME>;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No name for character \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return r3;
    }

    public java.lang.String getCharacter(int) throws java.io.IOException
    {
        int i0;
        java.lang.String $r1, $r2;
        org.apache.fontbox.encoding.Encoding r0;

        r0 := @this: org.apache.fontbox.encoding.Encoding;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.fontbox.encoding.Encoding: java.lang.String getName(int)>(i0);

        $r2 = staticinvoke <org.apache.fontbox.encoding.Encoding: java.lang.String getCharacter(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getCharacter(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0, r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.fontbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        r3 = r0;

     label1:
        return r3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r4;
        java.util.HashMap $r1, $r2, $r3;
        java.lang.Integer $r7;
        java.util.Map $r5;
        int i0;
        java.lang.String $r6;

        <org.apache.fontbox.encoding.Encoding: java.lang.String NOTDEF> = ".notdef";

        <org.apache.fontbox.encoding.Encoding: int NUMBER_OF_MAC_GLYPHS> = 258;

        $r0 = newarray (java.lang.String)[258];

        $r0[0] = ".notdef";

        $r0[1] = ".null";

        $r0[2] = "nonmarkingreturn";

        $r0[3] = "space";

        $r0[4] = "exclam";

        $r0[5] = "quotedbl";

        $r0[6] = "numbersign";

        $r0[7] = "dollar";

        $r0[8] = "percent";

        $r0[9] = "ampersand";

        $r0[10] = "quotesingle";

        $r0[11] = "parenleft";

        $r0[12] = "parenright";

        $r0[13] = "asterisk";

        $r0[14] = "plus";

        $r0[15] = "comma";

        $r0[16] = "hyphen";

        $r0[17] = "period";

        $r0[18] = "slash";

        $r0[19] = "zero";

        $r0[20] = "one";

        $r0[21] = "two";

        $r0[22] = "three";

        $r0[23] = "four";

        $r0[24] = "five";

        $r0[25] = "six";

        $r0[26] = "seven";

        $r0[27] = "eight";

        $r0[28] = "nine";

        $r0[29] = "colon";

        $r0[30] = "semicolon";

        $r0[31] = "less";

        $r0[32] = "equal";

        $r0[33] = "greater";

        $r0[34] = "question";

        $r0[35] = "at";

        $r0[36] = "A";

        $r0[37] = "B";

        $r0[38] = "C";

        $r0[39] = "D";

        $r0[40] = "E";

        $r0[41] = "F";

        $r0[42] = "G";

        $r0[43] = "H";

        $r0[44] = "I";

        $r0[45] = "J";

        $r0[46] = "K";

        $r0[47] = "L";

        $r0[48] = "M";

        $r0[49] = "N";

        $r0[50] = "O";

        $r0[51] = "P";

        $r0[52] = "Q";

        $r0[53] = "R";

        $r0[54] = "S";

        $r0[55] = "T";

        $r0[56] = "U";

        $r0[57] = "V";

        $r0[58] = "W";

        $r0[59] = "X";

        $r0[60] = "Y";

        $r0[61] = "Z";

        $r0[62] = "bracketleft";

        $r0[63] = "backslash";

        $r0[64] = "bracketright";

        $r0[65] = "asciicircum";

        $r0[66] = "underscore";

        $r0[67] = "grave";

        $r0[68] = "a";

        $r0[69] = "b";

        $r0[70] = "c";

        $r0[71] = "d";

        $r0[72] = "e";

        $r0[73] = "f";

        $r0[74] = "g";

        $r0[75] = "h";

        $r0[76] = "i";

        $r0[77] = "j";

        $r0[78] = "k";

        $r0[79] = "l";

        $r0[80] = "m";

        $r0[81] = "n";

        $r0[82] = "o";

        $r0[83] = "p";

        $r0[84] = "q";

        $r0[85] = "r";

        $r0[86] = "s";

        $r0[87] = "t";

        $r0[88] = "u";

        $r0[89] = "v";

        $r0[90] = "w";

        $r0[91] = "x";

        $r0[92] = "y";

        $r0[93] = "z";

        $r0[94] = "braceleft";

        $r0[95] = "bar";

        $r0[96] = "braceright";

        $r0[97] = "asciitilde";

        $r0[98] = "Adieresis";

        $r0[99] = "Aring";

        $r0[100] = "Ccedilla";

        $r0[101] = "Eacute";

        $r0[102] = "Ntilde";

        $r0[103] = "Odieresis";

        $r0[104] = "Udieresis";

        $r0[105] = "aacute";

        $r0[106] = "agrave";

        $r0[107] = "acircumflex";

        $r0[108] = "adieresis";

        $r0[109] = "atilde";

        $r0[110] = "aring";

        $r0[111] = "ccedilla";

        $r0[112] = "eacute";

        $r0[113] = "egrave";

        $r0[114] = "ecircumflex";

        $r0[115] = "edieresis";

        $r0[116] = "iacute";

        $r0[117] = "igrave";

        $r0[118] = "icircumflex";

        $r0[119] = "idieresis";

        $r0[120] = "ntilde";

        $r0[121] = "oacute";

        $r0[122] = "ograve";

        $r0[123] = "ocircumflex";

        $r0[124] = "odieresis";

        $r0[125] = "otilde";

        $r0[126] = "uacute";

        $r0[127] = "ugrave";

        $r0[128] = "ucircumflex";

        $r0[129] = "udieresis";

        $r0[130] = "dagger";

        $r0[131] = "degree";

        $r0[132] = "cent";

        $r0[133] = "sterling";

        $r0[134] = "section";

        $r0[135] = "bullet";

        $r0[136] = "paragraph";

        $r0[137] = "germandbls";

        $r0[138] = "registered";

        $r0[139] = "copyright";

        $r0[140] = "trademark";

        $r0[141] = "acute";

        $r0[142] = "dieresis";

        $r0[143] = "notequal";

        $r0[144] = "AE";

        $r0[145] = "Oslash";

        $r0[146] = "infinity";

        $r0[147] = "plusminus";

        $r0[148] = "lessequal";

        $r0[149] = "greaterequal";

        $r0[150] = "yen";

        $r0[151] = "mu";

        $r0[152] = "partialdiff";

        $r0[153] = "summation";

        $r0[154] = "product";

        $r0[155] = "pi";

        $r0[156] = "integral";

        $r0[157] = "ordfeminine";

        $r0[158] = "ordmasculine";

        $r0[159] = "Omega";

        $r0[160] = "ae";

        $r0[161] = "oslash";

        $r0[162] = "questiondown";

        $r0[163] = "exclamdown";

        $r0[164] = "logicalnot";

        $r0[165] = "radical";

        $r0[166] = "florin";

        $r0[167] = "approxequal";

        $r0[168] = "Delta";

        $r0[169] = "guillemotleft";

        $r0[170] = "guillemotright";

        $r0[171] = "ellipsis";

        $r0[172] = "nonbreakingspace";

        $r0[173] = "Agrave";

        $r0[174] = "Atilde";

        $r0[175] = "Otilde";

        $r0[176] = "OE";

        $r0[177] = "oe";

        $r0[178] = "endash";

        $r0[179] = "emdash";

        $r0[180] = "quotedblleft";

        $r0[181] = "quotedblright";

        $r0[182] = "quoteleft";

        $r0[183] = "quoteright";

        $r0[184] = "divide";

        $r0[185] = "lozenge";

        $r0[186] = "ydieresis";

        $r0[187] = "Ydieresis";

        $r0[188] = "fraction";

        $r0[189] = "currency";

        $r0[190] = "guilsinglleft";

        $r0[191] = "guilsinglright";

        $r0[192] = "fi";

        $r0[193] = "fl";

        $r0[194] = "daggerdbl";

        $r0[195] = "periodcentered";

        $r0[196] = "quotesinglbase";

        $r0[197] = "quotedblbase";

        $r0[198] = "perthousand";

        $r0[199] = "Acircumflex";

        $r0[200] = "Ecircumflex";

        $r0[201] = "Aacute";

        $r0[202] = "Edieresis";

        $r0[203] = "Egrave";

        $r0[204] = "Iacute";

        $r0[205] = "Icircumflex";

        $r0[206] = "Idieresis";

        $r0[207] = "Igrave";

        $r0[208] = "Oacute";

        $r0[209] = "Ocircumflex";

        $r0[210] = "apple";

        $r0[211] = "Ograve";

        $r0[212] = "Uacute";

        $r0[213] = "Ucircumflex";

        $r0[214] = "Ugrave";

        $r0[215] = "dotlessi";

        $r0[216] = "circumflex";

        $r0[217] = "tilde";

        $r0[218] = "macron";

        $r0[219] = "breve";

        $r0[220] = "dotaccent";

        $r0[221] = "ring";

        $r0[222] = "cedilla";

        $r0[223] = "hungarumlaut";

        $r0[224] = "ogonek";

        $r0[225] = "caron";

        $r0[226] = "Lslash";

        $r0[227] = "lslash";

        $r0[228] = "Scaron";

        $r0[229] = "scaron";

        $r0[230] = "Zcaron";

        $r0[231] = "zcaron";

        $r0[232] = "brokenbar";

        $r0[233] = "Eth";

        $r0[234] = "eth";

        $r0[235] = "Yacute";

        $r0[236] = "yacute";

        $r0[237] = "Thorn";

        $r0[238] = "thorn";

        $r0[239] = "minus";

        $r0[240] = "multiply";

        $r0[241] = "onesuperior";

        $r0[242] = "twosuperior";

        $r0[243] = "threesuperior";

        $r0[244] = "onehalf";

        $r0[245] = "onequarter";

        $r0[246] = "threequarters";

        $r0[247] = "franc";

        $r0[248] = "Gbreve";

        $r0[249] = "gbreve";

        $r0[250] = "Idotaccent";

        $r0[251] = "Scedilla";

        $r0[252] = "scedilla";

        $r0[253] = "Cacute";

        $r0[254] = "cacute";

        $r0[255] = "Ccaron";

        $r0[256] = "ccaron";

        $r0[257] = "dcroat";

        <org.apache.fontbox.encoding.Encoding: java.lang.String[] MAC_GLYPH_NAMES> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.fontbox.encoding.Encoding: java.util.Map MAC_GLYPH_NAMES_INDICES> = $r1;

        i0 = 0;

     label1:
        if i0 >= 258 goto label2;

        $r5 = <org.apache.fontbox.encoding.Encoding: java.util.Map MAC_GLYPH_NAMES_INDICES>;

        $r4 = <org.apache.fontbox.encoding.Encoding: java.lang.String[] MAC_GLYPH_NAMES>;

        $r6 = $r4[i0];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.fontbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.fontbox.encoding.Encoding: java.util.Map CHARACTER_TO_NAME> = $r3;

        return;
    }
}
