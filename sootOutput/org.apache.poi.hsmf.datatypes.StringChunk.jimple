public class org.apache.poi.hsmf.datatypes.StringChunk extends org.apache.poi.hsmf.datatypes.Chunk
{
    private static final java.lang.String DEFAULT_ENCODING;
    private java.lang.String encoding7Bit;
    private byte[] rawValue;
    private java.lang.String value;

    public void <init>(java.lang.String, int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        int i0;
        java.lang.String r1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r2;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>(r1, i0, r2);

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit> = "CP1252";

        return;
    }

    public void <init>(int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        int i0;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>(i0, r1);

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit> = "CP1252";

        return;
    }

    public java.lang.String get7BitEncoding()
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit>;

        return $r1;
    }

    public void set7BitEncoding(java.lang.String)
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.String r1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r2, $r3;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit> = r1;

        $r3 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r2 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r3 != $r2 goto label1;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.StringChunk: void parseString()>();

     label1:
        return;
    }

    public void readValue(java.io.InputStream) throws java.io.IOException
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        byte[] $r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.apache.poi.util.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1);

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue> = $r2;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.StringChunk: void parseString()>();

        return;
    }

    private void parseString()
    {
        byte[] $r12, $r15;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1, $r2, $r3, $r4, $r8;
        java.lang.String $r11, $r13, $r14, r16;
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r2 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r1 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r2 != $r1 goto label1;

        $r15 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue>;

        $r14 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit>;

        r16 = staticinvoke <org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String parseAs7BitData(byte[],java.lang.String)>($r15, $r14);

        goto label3;

     label1:
        $r4 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r3 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if $r4 != $r3 goto label2;

        $r12 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue>;

        r16 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String getFromUnicodeLE(byte[])>($r12);

        goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type ");

        $r8 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for String Chunk");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label3:
        $r13 = virtualinvoke r16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\u0000", "");

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value> = $r13;

        return;
    }

    public void writeValue(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.apache.poi.hsmf.datatypes.StringChunk r1;
        byte[] $r2;

        r1 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }

    private void storeString()
    {
        byte[] $r13, $r14, $r18;
        int $i0, $i1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1, $r2, $r3, $r4, $r8;
        java.lang.String $r11, $r12, $r15, $r16, $r17, $r23, $r25;
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.RuntimeException $r20;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r21, $r22, $r24;
        java.io.UnsupportedEncodingException $r19;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r2 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r1 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r2 != $r1 goto label4;

     label1:
        $r17 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value>;

        $r16 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit>;

        $r18 = virtualinvoke $r17.<java.lang.String: byte[] getBytes(java.lang.String)>($r16);

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue> = $r18;

     label2:
        goto label6;

     label3:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding not found - ");

        $r23 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String encoding7Bit>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19);

        throw $r20;

     label4:
        $r4 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r3 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if $r4 != $r3 goto label5;

        $r12 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value>;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        $r13 = newarray (byte)[$i1];

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue> = $r13;

        $r15 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value>;

        $r14 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue>;

        staticinvoke <org.apache.poi.util.StringUtil: void putUnicodeLE(java.lang.String,byte[],int)>($r15, $r14, 0);

        goto label6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type ");

        $r8 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for String Chunk");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String getValue()
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value>;

        return $r1;
    }

    public byte[] getRawValue()
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        byte[] $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: byte[] rawValue>;

        return $r1;
    }

    public void setValue(java.lang.String)
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.String r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value> = r1;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.StringChunk: void storeString()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.StringChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String value>;

        return $r1;
    }

    protected static java.lang.String parseAs7BitData(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String parseAs7BitData(byte[],java.lang.String)>(r0, "CP1252");

        return $r1;
    }

    protected static java.lang.String parseAs7BitData(byte[], java.lang.String)
    {
        byte[] r2;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r0, $r1, $r8, r9;
        java.io.UnsupportedEncodingException $r3;
        boolean $z0;

        r2 := @parameter0: byte[];

        r9 := @parameter1: java.lang.String;

        $r0 = "ansi";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label1;

        r9 = "CP1252";

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, r9);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding not found - ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String DEFAULT_ENCODING> = "CP1252";

        return;
    }
}
