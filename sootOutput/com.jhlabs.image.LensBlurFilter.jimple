public class com.jhlabs.image.LensBlurFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float radius;
    private float bloom;
    private float bloomThreshold;
    private float angle;
    private int sides;

    public void <init>()
    {
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.LensBlurFilter: float radius> = 10.0F;

        r0.<com.jhlabs.image.LensBlurFilter: float bloom> = 2.0F;

        r0.<com.jhlabs.image.LensBlurFilter: float bloomThreshold> = 192.0F;

        r0.<com.jhlabs.image.LensBlurFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.LensBlurFilter: int sides> = 5;

        return;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LensBlurFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        $f0 = r0.<com.jhlabs.image.LensBlurFilter: float radius>;

        return $f0;
    }

    public void setSides(int)
    {
        int i0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.LensBlurFilter: int sides> = i0;

        return;
    }

    public int getSides()
    {
        int $i0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        $i0 = r0.<com.jhlabs.image.LensBlurFilter: int sides>;

        return $i0;
    }

    public void setBloom(float)
    {
        float f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LensBlurFilter: float bloom> = f0;

        return;
    }

    public float getBloom()
    {
        float $f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        $f0 = r0.<com.jhlabs.image.LensBlurFilter: float bloom>;

        return $f0;
    }

    public void setBloomThreshold(float)
    {
        float f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LensBlurFilter: float bloomThreshold> = f0;

        return;
    }

    public float getBloomThreshold()
    {
        float $f0;
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        $f0 = r0.<com.jhlabs.image.LensBlurFilter: float bloomThreshold>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b37, $b38, $b41, $b42, $b44, $b93;
        float[] $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r37, $r38, $r39;
        int[] r3;
        com.jhlabs.math.FFT $r41;
        com.jhlabs.image.LensBlurFilter r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, $i43, $i45, $i46, $i47, $i48, i49, i50, i51, i52, $i53, i54, $i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, $i77, i78, i79, i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, $i113, $i114, $i115, $i116, $i117;
        float[][] r4, r5, r6;
        java.awt.image.BufferedImage r0, r36, $r40;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, f37, $f38, $f39, $f40, $f41, f42, $f43, f44, $f45, f46, $f47, f48, f49, f50, f51, f52, f53;
        double $d0, $d1, $d2, d3, $d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d22, d23, d24, d25, $d26, $d27, $d28;

        r1 := @this: com.jhlabs.image.LensBlurFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r36 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        i49 = 1;

        i50 = 1;

        i51 = 0;

        i52 = 0;

        $f0 = r1.<com.jhlabs.image.LensBlurFilter: float radius>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i2 = (int) $d1;

        if i2 >= 32 goto label01;

        $i47 = 2 * i2;

        $i48 = $i0 + $i47;

        $i53 = staticinvoke <java.lang.Math: int min(int,int)>(128, $i48);

        goto label02;

     label01:
        $i3 = 2 * i2;

        $i4 = $i0 + $i3;

        $i53 = staticinvoke <java.lang.Math: int min(int,int)>(256, $i4);

     label02:
        i54 = $i53;

        if i2 >= 32 goto label03;

        $i45 = 2 * i2;

        $i46 = $i1 + $i45;

        $i55 = staticinvoke <java.lang.Math: int min(int,int)>(128, $i46);

        goto label04;

     label03:
        $i5 = 2 * i2;

        $i6 = $i1 + $i5;

        $i55 = staticinvoke <java.lang.Math: int min(int,int)>(256, $i6);

     label04:
        i56 = $i55;

        if r36 != null goto label05;

        $r40 = new java.awt.image.BufferedImage;

        specialinvoke $r40.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        r36 = $r40;

     label05:
        if i49 >= i56 goto label06;

        i49 = i49 * 2;

        i51 = i51 + 1;

        goto label05;

     label06:
        if i50 >= i54 goto label07;

        i50 = i50 * 2;

        i52 = i52 + 1;

        goto label06;

     label07:
        i7 = i50;

        i8 = i49;

        i57 = i50;

        i58 = i49;

        $r41 = new com.jhlabs.math.FFT;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(i51, i52);

        specialinvoke $r41.<com.jhlabs.math.FFT: void <init>(int)>($i9);

        $i10 = i50 * i49;

        r3 = newarray (int)[$i10];

        $i11 = i50 * i49;

        r4 = newmultiarray (float)[2][$i11];

        $i12 = i50 * i49;

        r5 = newmultiarray (float)[2][$i12];

        $i13 = i50 * i49;

        r6 = newmultiarray (float)[2][$i13];

        $i14 = r1.<com.jhlabs.image.LensBlurFilter: int sides>;

        $d2 = (double) $i14;

        d3 = 3.141592653589793 / $d2;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>(d3);

        d5 = 1.0 / $d4;

        $f2 = r1.<com.jhlabs.image.LensBlurFilter: float radius>;

        $f1 = r1.<com.jhlabs.image.LensBlurFilter: float radius>;

        $f3 = $f2 * $f1;

        d6 = (double) $f3;

        $f4 = r1.<com.jhlabs.image.LensBlurFilter: float angle>;

        $d7 = (double) $f4;

        $d8 = staticinvoke <java.lang.Math: double toRadians(double)>($d7);

        f37 = 0.0F;

        i59 = 0;

        i60 = 0;

     label08:
        if i60 >= i8 goto label18;

        i61 = 0;

     label09:
        if i61 >= i7 goto label17;

        $f30 = (float) i61;

        $f28 = (float) i7;

        $f29 = $f28 / 2.0F;

        $f31 = $f30 - $f29;

        d18 = (double) $f31;

        $f34 = (float) i60;

        $f32 = (float) i8;

        $f33 = $f32 / 2.0F;

        $f35 = $f34 - $f33;

        d19 = (double) $f35;

        $d10 = d18 * d18;

        $d9 = d19 * d19;

        d20 = $d10 + $d9;

        $b41 = d20 cmpg d6;

        $i113 = (int) $b41;

        if $i113 >= 0 goto label10;

        $d28 = 1.0;

        $d27 = 1.0;

        goto label11;

     label10:
        $d28 = 0.0;

        $d27 = 0.0;

     label11:
        d22 = $d27;

        $b42 = $d28 cmpl 0.0;

        if $b42 == 0 goto label16;

        $d11 = staticinvoke <java.lang.Math: double sqrt(double)>(d20);

        $i43 = r1.<com.jhlabs.image.LensBlurFilter: int sides>;

        if $i43 == 0 goto label12;

        $d14 = staticinvoke <java.lang.Math: double atan2(double,double)>(d19, d18);

        d23 = $d14 + $d8;

        $d15 = d3 * 2.0;

        $d16 = staticinvoke <com.jhlabs.image.ImageMath: double mod(double,double)>(d23, $d15);

        d24 = $d16 - d3;

        $d17 = staticinvoke <java.lang.Math: double cos(double)>(d24);

        d25 = $d17 * d5;

        goto label13;

     label12:
        d25 = 1.0;

     label13:
        $d13 = d25 * $d11;

        $f36 = r1.<com.jhlabs.image.LensBlurFilter: float radius>;

        $d12 = (double) $f36;

        $b44 = $d13 cmpg $d12;

        $i114 = (int) $b44;

        if $i114 >= 0 goto label14;

        $d26 = 1.0;

        goto label15;

     label14:
        $d26 = 0.0;

     label15:
        d22 = $d26;

     label16:
        $f38 = (float) d22;

        f37 = f37 + $f38;

        $r37 = r4[0];

        $f39 = (float) d22;

        $r37[i59] = $f39;

        $r38 = r4[1];

        $r38[i59] = 0.0F;

        i59 = i59 + 1;

        i61 = i61 + 1;

        goto label09;

     label17:
        i60 = i60 + 1;

        goto label08;

     label18:
        i62 = 0;

        i63 = 0;

     label19:
        if i63 >= i8 goto label22;

        i64 = 0;

     label20:
        if i64 >= i7 goto label21;

        $r34 = r4[0];

        $f26 = $r34[i62];

        $f27 = $f26 / f37;

        $r34[i62] = $f27;

        i62 = i62 + 1;

        i64 = i64 + 1;

        goto label20;

     label21:
        i63 = i63 + 1;

        goto label19;

     label22:
        $r8 = r4[0];

        $r7 = r4[1];

        virtualinvoke $r41.<com.jhlabs.math.FFT: void transform2D(float[],float[],int,int,boolean)>($r8, $r7, i7, i8, 1);

        i65 = neg i2;

     label23:
        if i65 >= $i1 goto label56;

        i66 = neg i2;

     label24:
        if i66 >= $i0 goto label55;

        i67 = i66;

        i68 = i65;

        i69 = i57;

        i70 = i58;

        i71 = 0;

        i72 = 0;

        if i66 >= 0 goto label25;

        i69 = i57 + i66;

        i71 = 0 - i66;

        i67 = 0;

     label25:
        if i68 >= 0 goto label26;

        i70 = i58 + i68;

        i72 = 0 - i68;

        i68 = 0;

     label26:
        $i17 = i67 + i69;

        if $i17 <= $i0 goto label27;

        i69 = $i0 - i67;

     label27:
        $i18 = i68 + i70;

        if $i18 <= $i1 goto label28;

        i70 = $i1 - i68;

     label28:
        $i19 = i72 * i7;

        $i20 = $i19 + i71;

        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i67, i68, i69, i70, r3, $i20, i7);

        i73 = 0;

        i74 = 0;

     label29:
        if i74 >= i8 goto label41;

        i75 = i74 + i65;

        if i75 >= 0 goto label30;

        i76 = i72;

        goto label32;

     label30:
        if i75 <= $i1 goto label31;

        $i40 = i72 + i70;

        i76 = $i40 - 1;

        goto label32;

     label31:
        i76 = i74;

     label32:
        $i77 = i76 * i7;

        i78 = 0;

     label33:
        if i78 >= i7 goto label40;

        i79 = i78 + i66;

        if i79 >= 0 goto label34;

        i80 = i71;

        goto label36;

     label34:
        if i79 <= $i0 goto label35;

        $i39 = i71 + i69;

        i80 = $i39 - 1;

        goto label36;

     label35:
        i80 = i78;

     label36:
        $i81 = i80 + $i77;

        $r39 = r6[0];

        $i82 = r3[$i81];

        $i83 = $i82 >> 24;

        $i84 = $i83 & 255;

        $f40 = (float) $i84;

        $r39[i73] = $f40;

        $i85 = r3[$i81];

        $i86 = $i85 >> 16;

        $i87 = $i86 & 255;

        $f41 = (float) $i87;

        f42 = $f41;

        $i88 = r3[$i81];

        $i89 = $i88 >> 8;

        $i90 = $i89 & 255;

        $f43 = (float) $i90;

        f44 = $f43;

        $i91 = r3[$i81];

        $i92 = $i91 & 255;

        $f45 = (float) $i92;

        f46 = $f45;

        $f47 = r1.<com.jhlabs.image.LensBlurFilter: float bloomThreshold>;

        $b93 = $f41 cmpl $f47;

        $i115 = (int) $b93;

        if $i115 <= 0 goto label37;

        $f25 = r1.<com.jhlabs.image.LensBlurFilter: float bloom>;

        f42 = $f41 * $f25;

     label37:
        $f21 = r1.<com.jhlabs.image.LensBlurFilter: float bloomThreshold>;

        $b37 = $f43 cmpl $f21;

        $i116 = (int) $b37;

        if $i116 <= 0 goto label38;

        $f24 = r1.<com.jhlabs.image.LensBlurFilter: float bloom>;

        f44 = $f43 * $f24;

     label38:
        $f22 = r1.<com.jhlabs.image.LensBlurFilter: float bloomThreshold>;

        $b38 = $f45 cmpl $f22;

        $i117 = (int) $b38;

        if $i117 <= 0 goto label39;

        $f23 = r1.<com.jhlabs.image.LensBlurFilter: float bloom>;

        f46 = $f45 * $f23;

     label39:
        $r31 = r6[1];

        $r31[i73] = f42;

        $r32 = r5[0];

        $r32[i73] = f44;

        $r33 = r5[1];

        $r33[i73] = f46;

        i73 = i73 + 1;

        i78 = i78 + 1;

        goto label33;

     label40:
        i74 = i74 + 1;

        goto label29;

     label41:
        $r10 = r6[0];

        $r9 = r6[1];

        virtualinvoke $r41.<com.jhlabs.math.FFT: void transform2D(float[],float[],int,int,boolean)>($r10, $r9, i50, i49, 1);

        $r12 = r5[0];

        $r11 = r5[1];

        virtualinvoke $r41.<com.jhlabs.math.FFT: void transform2D(float[],float[],int,int,boolean)>($r12, $r11, i50, i49, 1);

        i94 = 0;

        i95 = 0;

     label42:
        if i95 >= i8 goto label45;

        i96 = 0;

     label43:
        if i96 >= i7 goto label44;

        $r21 = r6[0];

        f48 = $r21[i94];

        $r22 = r6[1];

        f49 = $r22[i94];

        $r23 = r4[0];

        f50 = $r23[i94];

        $r24 = r4[1];

        f51 = $r24[i94];

        $r25 = r6[0];

        $f10 = f48 * f50;

        $f9 = f49 * f51;

        $f11 = $f10 - $f9;

        $r25[i94] = $f11;

        $r26 = r6[1];

        $f13 = f48 * f51;

        $f12 = f49 * f50;

        $f14 = $f13 + $f12;

        $r26[i94] = $f14;

        $r27 = r5[0];

        f52 = $r27[i94];

        $r28 = r5[1];

        f53 = $r28[i94];

        $r29 = r5[0];

        $f16 = f52 * f50;

        $f15 = f53 * f51;

        $f17 = $f16 - $f15;

        $r29[i94] = $f17;

        $r30 = r5[1];

        $f19 = f52 * f51;

        $f18 = f53 * f50;

        $f20 = $f19 + $f18;

        $r30[i94] = $f20;

        i94 = i94 + 1;

        i96 = i96 + 1;

        goto label43;

     label44:
        i95 = i95 + 1;

        goto label42;

     label45:
        $r14 = r6[0];

        $r13 = r6[1];

        virtualinvoke $r41.<com.jhlabs.math.FFT: void transform2D(float[],float[],int,int,boolean)>($r14, $r13, i50, i49, 0);

        $r16 = r5[0];

        $r15 = r5[1];

        virtualinvoke $r41.<com.jhlabs.math.FFT: void transform2D(float[],float[],int,int,boolean)>($r16, $r15, i50, i49, 0);

        i97 = i7 >> 1;

        i98 = i8 >> 1;

        i99 = 0;

        i100 = 0;

     label46:
        if i100 >= i7 goto label52;

        i101 = i100 ^ i97;

        i102 = i101 * i50;

        i103 = 0;

     label47:
        if i103 >= i7 goto label51;

        $i29 = i103 ^ i98;

        i104 = i102 + $i29;

        $r17 = r6[0];

        $f5 = $r17[i104];

        i105 = (int) $f5;

        $r18 = r6[1];

        $f6 = $r18[i104];

        i106 = (int) $f6;

        $r19 = r5[0];

        $f7 = $r19[i104];

        i107 = (int) $f7;

        $r20 = r5[1];

        $f8 = $r20[i104];

        i108 = (int) $f8;

        if i106 <= 255 goto label48;

        i106 = 255;

     label48:
        if i107 <= 255 goto label49;

        i107 = 255;

     label49:
        if i108 <= 255 goto label50;

        i108 = 255;

     label50:
        $i31 = i105 << 24;

        $i30 = i106 << 16;

        $i33 = $i31 | $i30;

        $i32 = i107 << 8;

        $i34 = $i33 | $i32;

        $i36 = $i34 | i108;

        $i35 = i99;

        i99 = i99 + 1;

        r3[$i35] = $i36;

        i103 = i103 + 1;

        goto label47;

     label51:
        i100 = i100 + 1;

        goto label46;

     label52:
        i109 = i66 + i2;

        i110 = i65 + i2;

        $i21 = 2 * i2;

        i111 = i57 - $i21;

        $i22 = 2 * i2;

        i112 = i58 - $i22;

        $i23 = i109 + i111;

        if $i23 <= $i0 goto label53;

        i111 = $i0 - i109;

     label53:
        $i24 = i110 + i112;

        if $i24 <= $i1 goto label54;

        i112 = $i1 - i110;

     label54:
        $i25 = i2 * i7;

        $i26 = $i25 + i2;

        virtualinvoke r36.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(i109, i110, i111, i112, r3, $i26, i7);

        $i27 = 2 * i2;

        $i28 = i57 - $i27;

        i66 = i66 + $i28;

        goto label24;

     label55:
        $i15 = 2 * i2;

        $i16 = i58 - $i15;

        i65 = i65 + $i16;

        goto label23;

     label56:
        return r36;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.LensBlurFilter r0;

        r0 := @this: com.jhlabs.image.LensBlurFilter;

        return "Blur/Lens Blur...";
    }
}
