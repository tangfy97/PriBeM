public class ucar.nc2.Structure extends ucar.nc2.Variable
{
    protected static org.slf4j.Logger log;
    protected static int defaultBufferSize;
    protected java.util.List members;
    protected java.util.HashMap memberHash;
    protected boolean isSubset;

    public void <init>(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, java.lang.String)
    {
        ucar.ma2.DataType $r5;
        java.util.HashMap $r9;
        ucar.nc2.Structure r0, r3;
        ucar.nc2.Group r2;
        java.util.ArrayList $r8;
        int $i1;
        ucar.nc2.NetcdfFile r1;
        java.lang.String r4;

        r0 := @this: ucar.nc2.Structure;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        r2 := @parameter1: ucar.nc2.Group;

        r3 := @parameter2: ucar.nc2.Structure;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r1, r2, r3, r4);

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        r0.<ucar.nc2.Structure: ucar.ma2.DataType dataType> = $r5;

        $i1 = (int) -1;

        r0.<ucar.nc2.Structure: int elementSize> = $i1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Structure: java.util.List members> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.Structure: java.util.HashMap memberHash> = $r9;

        return;
    }

    protected void <init>(ucar.nc2.Structure)
    {
        java.util.List $r3;
        java.util.HashMap $r4, $r5;
        ucar.nc2.Structure r0, r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        r1 := @parameter0: ucar.nc2.Structure;

        specialinvoke r0.<ucar.nc2.Variable: void <init>(ucar.nc2.Variable)>(r1);

        $r2 = new java.util.ArrayList;

        $r3 = r1.<ucar.nc2.Structure: java.util.List members>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<ucar.nc2.Structure: java.util.List members> = $r2;

        $r4 = new java.util.HashMap;

        $r5 = r1.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r5);

        r0.<ucar.nc2.Structure: java.util.HashMap memberHash> = $r4;

        $z0 = virtualinvoke r1.<ucar.nc2.Structure: boolean isSubset()>();

        r0.<ucar.nc2.Structure: boolean isSubset> = $z0;

        return;
    }

    public ucar.nc2.Structure select(java.util.List)
    {
        java.util.Iterator $r5;
        ucar.nc2.Structure r0, r2;
        java.util.ArrayList $r3;
        java.util.List r4;
        ucar.nc2.Variable $r1, $r8;
        java.lang.Object $r6;
        java.lang.String r7;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        r4 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: ucar.nc2.Variable copy()>();

        r2 = (ucar.nc2.Structure) $r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r0.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>(r7);

        if null == $r8 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        virtualinvoke r2.<ucar.nc2.Structure: void setMemberVariables(java.util.List)>($r3);

        r2.<ucar.nc2.Structure: boolean isSubset> = 1;

        return r2;
    }

    public ucar.nc2.Structure select(java.lang.String)
    {
        java.lang.String r1;
        ucar.nc2.Structure r2, $r3;
        java.util.ArrayList $r0;

        r2 := @this: ucar.nc2.Structure;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<ucar.nc2.Structure: ucar.nc2.Structure select(java.util.List)>($r0);

        return $r3;
    }

    public boolean isSubset()
    {
        ucar.nc2.Structure r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        $z0 = r0.<ucar.nc2.Structure: boolean isSubset>;

        return $z0;
    }

    protected ucar.nc2.Variable copy()
    {
        ucar.nc2.Structure $r0, r1;

        r1 := @this: ucar.nc2.Structure;

        $r0 = new ucar.nc2.Structure;

        specialinvoke $r0.<ucar.nc2.Structure: void <init>(ucar.nc2.Structure)>(r1);

        return $r0;
    }

    protected int calcStructureSize()
    {
        java.util.Iterator $r2;
        long $l0, $l1, $l3, $l4, $l5;
        ucar.nc2.Structure r0;
        java.util.List $r1;
        int $i2, i6;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        i6 = 0;

        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $l0 = (long) i6;

        $l1 = virtualinvoke r4.<ucar.nc2.Variable: long getSize()>();

        $i2 = virtualinvoke r4.<ucar.nc2.Variable: int getElementSize()>();

        $l3 = (long) $i2;

        $l4 = $l1 * $l3;

        $l5 = $l0 + $l4;

        i6 = (int) $l5;

        goto label1;

     label2:
        return i6;
    }

    public boolean isCaching()
    {
        ucar.nc2.Structure r0;

        r0 := @this: ucar.nc2.Structure;

        return 0;
    }

    public void setCaching(boolean)
    {
        ucar.nc2.Structure r0;
        ucar.nc2.Variable$Cache $r1, $r2;
        boolean z0;

        r0 := @this: ucar.nc2.Structure;

        z0 := @parameter0: boolean;

        $r1 = r0.<ucar.nc2.Structure: ucar.nc2.Variable$Cache cache>;

        $r1.<ucar.nc2.Variable$Cache: boolean isCaching> = 0;

        $r2 = r0.<ucar.nc2.Structure: ucar.nc2.Variable$Cache cache>;

        $r2.<ucar.nc2.Variable$Cache: boolean cachingSet> = 1;

        return;
    }

    public ucar.nc2.Variable addMemberVariable(ucar.nc2.Variable)
    {
        java.lang.IllegalStateException $r5;
        java.util.List $r2;
        ucar.nc2.Variable r1;
        java.util.HashMap $r3;
        java.lang.String $r4;
        ucar.nc2.Structure r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        r1 := @parameter0: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        $r2 = r0.<ucar.nc2.Structure: java.util.List members>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        $r4 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        virtualinvoke r1.<ucar.nc2.Variable: void setParentStructure(ucar.nc2.Structure)>(r0);

        return r1;
    }

    public void setMemberVariables(java.util.List)
    {
        java.lang.IllegalStateException $r10;
        java.util.Iterator $r4;
        java.util.HashMap $r2, $r8;
        ucar.nc2.Structure r0;
        java.util.ArrayList $r1;
        java.util.List r3, $r7;
        int $i0, $i1;
        java.lang.Object $r5;
        ucar.nc2.Variable r6;
        java.lang.String $r9;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Structure;

        r3 := @parameter0: java.util.List;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r10;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Structure: java.util.List members> = $r1;

        $r2 = new java.util.HashMap;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = 2 * $i0;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1);

        r0.<ucar.nc2.Structure: java.util.HashMap memberHash> = $r2;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Variable) $r5;

        $r7 = r0.<ucar.nc2.Structure: java.util.List members>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r8 = r0.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r6);

        goto label2;

     label3:
        return;
    }

    public boolean removeMemberVariable(ucar.nc2.Variable)
    {
        java.lang.IllegalStateException $r10;
        java.util.Iterator $r3;
        java.util.HashMap $r8;
        ucar.nc2.Structure r0;
        java.util.List $r2;
        ucar.nc2.Variable r1, r5;
        java.lang.Object $r4;
        java.lang.String $r6, $r7, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.Structure;

        r1 := @parameter0: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r10;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Variable) $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r7 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label4;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        $r8 = r0.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        $r9 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    public boolean replaceMemberVariable(ucar.nc2.Variable)
    {
        java.lang.IllegalStateException $r12;
        ucar.nc2.Structure r0;
        int $i0, i1;
        ucar.nc2.Variable r2, r6;
        java.lang.String $r7, $r8, $r9;
        boolean $z0, $z1, z2, z3, z4;
        java.io.PrintStream $r11;
        java.util.List $r1, $r3, $r4, $r10;
        java.lang.Object $r5;

        r0 := @this: ucar.nc2.Structure;

        r2 := @parameter0: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r12;

     label1:
        z2 = 0;

        z4 = 0;

        z3 = 0;

        i1 = 0;

     label2:
        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r4 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (ucar.nc2.Variable) $r5;

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

        if $r7 != null goto label3;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("BAD null short name");

     label3:
        $r8 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r9 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label4;

        $r10 = r0.<ucar.nc2.Structure: java.util.List members>;

        interfaceinvoke $r10.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r2);

        z2 = 1;

        z4 = 1;

        z3 = 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        if z3 != 0 goto label6;

        $r3 = r0.<ucar.nc2.Structure: java.util.List members>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label6:
        return z4;
    }

    public void setParentGroup(ucar.nc2.Group)
    {
        java.lang.IllegalStateException $r6;
        java.util.Iterator $r3;
        ucar.nc2.Structure r0;
        ucar.nc2.Group r1;
        java.util.List $r2;
        java.lang.Object $r4;
        ucar.nc2.Variable r5;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Structure;

        r1 := @parameter0: ucar.nc2.Group;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r6;

     label1:
        specialinvoke r0.<ucar.nc2.Variable: void setParentGroup(ucar.nc2.Group)>(r1);

        $r2 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Variable) $r4;

        virtualinvoke r5.<ucar.nc2.Variable: void setParentGroup(ucar.nc2.Group)>(r1);

        goto label2;

     label3:
        return;
    }

    public ucar.nc2.Variable setImmutable()
    {
        java.util.Iterator $r4;
        ucar.nc2.Structure r0;
        java.util.List $r1, $r2, $r3;
        java.lang.Object $r5;
        ucar.nc2.Variable r6;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        r0.<ucar.nc2.Structure: java.util.List members> = $r2;

        $r3 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Variable) $r5;

        virtualinvoke r6.<ucar.nc2.Variable: ucar.nc2.Variable setImmutable()>();

        goto label1;

     label2:
        specialinvoke r0.<ucar.nc2.Variable: ucar.nc2.Variable setImmutable()>();

        return r0;
    }

    public java.util.List getVariables()
    {
        java.util.List $r1, $r2;
        ucar.nc2.Structure r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: ucar.nc2.Structure;

        $z0 = virtualinvoke r0.<ucar.nc2.Structure: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<ucar.nc2.Structure: java.util.List members>;

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        $r2 = $r3;

        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

     label2:
        return $r2;
    }

    public int getNumberOfMemberVariables()
    {
        int $i0;
        java.util.List $r1;
        ucar.nc2.Structure r0;

        r0 := @this: ucar.nc2.Structure;

        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getVariableNames()
    {
        java.util.Set $r3;
        java.util.HashMap $r2;
        ucar.nc2.Structure r1;
        java.util.ArrayList $r0;

        r1 := @this: ucar.nc2.Structure;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public ucar.nc2.Variable findVariable(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.Object $r3;
        ucar.nc2.Variable $r4;
        java.lang.String r0;
        ucar.nc2.Structure r1;

        r1 := @this: ucar.nc2.Structure;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<ucar.nc2.Structure: java.util.HashMap memberHash>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (ucar.nc2.Variable) $r3;

        return $r4;
    }

    public ucar.ma2.StructureMembers makeStructureMembers()
    {
        ucar.nc2.Structure r1, $r13;
        ucar.ma2.StructureMembers$Member $r12;
        int[] $r11;
        ucar.nc2.Variable r6;
        java.lang.String $r2, $r7, $r8, $r9;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        ucar.ma2.DataType $r10;
        java.util.List $r3;
        ucar.ma2.StructureMembers $r0, $r14;
        java.lang.Object $r5;

        r1 := @this: ucar.nc2.Structure;

        $r0 = new ucar.ma2.StructureMembers;

        $r2 = virtualinvoke r1.<ucar.nc2.Structure: java.lang.String getName()>();

        specialinvoke $r0.<ucar.ma2.StructureMembers: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Variable) $r5;

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r8 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getDescription()>();

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getUnitsString()>();

        $r10 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke r6.<ucar.nc2.Variable: int[] getShape()>();

        $r12 = virtualinvoke $r0.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member addMember(java.lang.String,java.lang.String,java.lang.String,ucar.ma2.DataType,int[])>($r7, $r8, $r9, $r10, $r11);

        $z1 = r6 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label2;

        $r13 = (ucar.nc2.Structure) r6;

        $r14 = virtualinvoke $r13.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setStructureMembers(ucar.ma2.StructureMembers)>($r14);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public int getElementSize()
    {
        int $i0, $i1, $i3;
        ucar.nc2.Structure r0;

        r0 := @this: ucar.nc2.Structure;

        $i0 = r0.<ucar.nc2.Structure: int elementSize>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        virtualinvoke r0.<ucar.nc2.Structure: void calcElementSize()>();

     label1:
        $i1 = r0.<ucar.nc2.Structure: int elementSize>;

        return $i1;
    }

    public void calcElementSize()
    {
        java.util.Iterator $r2;
        long $l0, $l2, $l3, $l4, $l5;
        ucar.nc2.Structure r0;
        java.util.List $r1;
        int $i1, i6;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        boolean $z0;

        r0 := @this: ucar.nc2.Structure;

        i6 = 0;

        $r1 = r0.<ucar.nc2.Structure: java.util.List members>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $l0 = (long) i6;

        $i1 = virtualinvoke r4.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        $l3 = virtualinvoke r4.<ucar.nc2.Variable: long getSize()>();

        $l4 = $l2 * $l3;

        $l5 = $l0 + $l4;

        i6 = (int) $l5;

        goto label1;

     label2:
        r0.<ucar.nc2.Structure: int elementSize> = i6;

        return;
    }

    public ucar.ma2.StructureData readStructure() throws java.io.IOException
    {
        ucar.ma2.StructureData $r3;
        java.lang.UnsupportedOperationException $r4;
        ucar.ma2.ArrayStructure r2;
        int $i0;
        ucar.nc2.Structure r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Structure;

        $i0 = virtualinvoke r0.<ucar.nc2.Structure: int getRank()>();

        if $i0 == 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not a scalar structure");

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.Array read()>();

        r2 = (ucar.ma2.ArrayStructure) $r1;

        $r3 = virtualinvoke r2.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>(0);

        return $r3;
    }

    public ucar.ma2.StructureData readStructure(int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r4, $r5, r6;
        ucar.ma2.ArrayStructure $r8;
        ucar.nc2.Structure r0;
        ucar.ma2.StructureData $r9;
        int[] $r1, $r3;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        ucar.ma2.Array $r7;
        ucar.ma2.Index $r2;

        r0 := @this: ucar.nc2.Structure;

        i2 := @parameter0: int;

        r6 = null;

        $i0 = virtualinvoke r0.<ucar.nc2.Structure: int getRank()>();

        if $i0 != 1 goto label1;

        $r5 = new ucar.ma2.Section;

        specialinvoke $r5.<ucar.ma2.Section: void <init>()>();

        r6 = virtualinvoke $r5.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>(i2, i2);

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<ucar.nc2.Structure: int getRank()>();

        if $i1 <= 1 goto label3;

        $r1 = r0.<ucar.nc2.Structure: int[] shape>;

        $r2 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int[])>($r1);

        virtualinvoke $r2.<ucar.ma2.Index: void setCurrentCounter(int)>(i2);

        $r3 = virtualinvoke $r2.<ucar.ma2.Index: int[] getCurrentCounter()>();

        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>()>();

        r6 = $r4;

        i6 = 0;

     label2:
        $i3 = lengthof $r3;

        if i6 >= $i3 goto label3;

        $i5 = $r3[i6];

        $i4 = $r3[i6];

        virtualinvoke $r4.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>($i5, $i4);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r7 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.Array read(ucar.ma2.Section)>(r6);

        $r8 = (ucar.ma2.ArrayStructure) $r7;

        $r9 = virtualinvoke $r8.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>(0);

        return $r9;
    }

    public ucar.ma2.ArrayStructure readStructure(int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r4;
        ucar.nc2.Structure r0;
        int[] $r1, $r2;
        int $i0, i1, i2;
        java.lang.String $r11;
        boolean $z0;
        java.io.PrintStream $r6;
        java.lang.UnsupportedOperationException $r12;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10;

        r0 := @this: ucar.nc2.Structure;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<ucar.nc2.Structure: int getRank()>();

        if $i0 == 1 goto label1;

        $r12 = new java.lang.UnsupportedOperationException;

        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not a vector structure");

        throw $r12;

     label1:
        $r1 = newarray (int)[1];

        $r1[0] = i1;

        $r2 = newarray (int)[1];

        $r2[0] = i2;

        $z0 = <ucar.nc2.NetcdfFile: boolean debugStructureIterator>;

        if $z0 == 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readStructure ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label2:
        $r3 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.Array read(int[],int[])>($r1, $r2);

        $r4 = (ucar.ma2.ArrayStructure) $r3;

        return $r4;
    }

    public ucar.ma2.StructureDataIterator getStructureIterator() throws java.io.IOException
    {
        int $i0;
        ucar.nc2.Structure r0;
        ucar.ma2.StructureDataIterator $r1;

        r0 := @this: ucar.nc2.Structure;

        $i0 = <ucar.nc2.Structure: int defaultBufferSize>;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.StructureDataIterator getStructureIterator(int)>($i0);

        return $r1;
    }

    public ucar.ma2.StructureDataIterator getStructureIterator(int) throws java.io.IOException
    {
        ucar.nc2.Structure$IteratorRank1 $r2;
        ucar.ma2.StructureDataIterator $r1;
        int $i0, i1;
        ucar.nc2.Structure$Iterator $r3;
        ucar.nc2.Structure r0;

        r0 := @this: ucar.nc2.Structure;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<ucar.nc2.Structure: int getRank()>();

        if $i0 >= 2 goto label1;

        $r2 = new ucar.nc2.Structure$IteratorRank1;

        $r1 = $r2;

        specialinvoke $r2.<ucar.nc2.Structure$IteratorRank1: void <init>(ucar.nc2.Structure,int)>(r0, i1);

        goto label2;

     label1:
        $r3 = new ucar.nc2.Structure$Iterator;

        $r1 = $r3;

        specialinvoke $r3.<ucar.nc2.Structure$Iterator: void <init>(ucar.nc2.Structure,int)>(r0, i1);

     label2:
        return $r1;
    }

    public java.lang.String getNameAndAttributes()
    {
        java.lang.Object[] $r1, $r3, $r9;
        java.util.Iterator $r5;
        ucar.nc2.Structure r2;
        java.util.Formatter $r0;
        java.util.List $r4;
        ucar.nc2.Attribute r8;
        java.lang.Object $r7;
        java.lang.String $r6, $r10, $r11;
        boolean $z0;

        r2 := @this: ucar.nc2.Structure;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Structure ", $r1);

        virtualinvoke r2.<ucar.nc2.Structure: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>($r0, 0, 1);

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r3);

        $r4 = r2.<ucar.nc2.Structure: java.util.List attributes>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.Attribute) $r7;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = virtualinvoke r2.<ucar.nc2.Structure: java.lang.String getShortName()>();

        $r9[0] = $r10;

        $r11 = virtualinvoke r8.<ucar.nc2.Attribute: java.lang.String toString()>();

        $r9[1] = $r11;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %s:%s;\n", $r9);

        goto label1;

     label2:
        $r6 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r6;
    }

    protected void writeCDL(java.util.Formatter, java.lang.String, boolean, boolean)
    {
        java.util.Formatter r0;
        boolean $z0, z1, z2, $z3;
        ucar.ma2.DataType $r4, $r21, $r22, $r24;
        java.util.List $r9, $r14;
        ucar.nc2.Attribute r30;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object[] $r1, $r11, $r12, $r16, $r18, $r19, $r23, $r27, $r31;
        ucar.nc2.Structure r3;
        ucar.nc2.Variable r29;
        java.lang.String r2, $r8, $r13, $r20, $r25, $r26;
        java.util.Iterator $r10, $r15;
        java.lang.Object $r17, $r28;

        r3 := @this: ucar.nc2.Structure;

        r0 := @parameter0: java.util.Formatter;

        r2 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r4 = r3.<ucar.nc2.Structure: ucar.ma2.DataType dataType>;

        $r1[1] = $r4;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n%s%s {\n", $r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = r3.<ucar.nc2.Structure: java.util.List members>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r28 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r29 = (ucar.nc2.Variable) $r28;

        virtualinvoke r29.<ucar.nc2.Variable: void writeCDL(java.util.Formatter,java.lang.String,boolean,boolean)>(r0, $r8, z1, z2);

        goto label1;

     label2:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r2;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s} ", $r11);

        virtualinvoke r3.<ucar.nc2.Structure: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>(r0, z1, z2);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r3.<ucar.nc2.Structure: java.lang.String extraInfo()>();

        $r12[0] = $r13;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(";%s\n", $r12);

        $r14 = virtualinvoke r3.<ucar.nc2.Structure: java.util.List getAttributes()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r30 = (ucar.nc2.Attribute) $r17;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r8;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s  ", $r18);

        if z2 == 0 goto label4;

        $r25 = virtualinvoke r3.<ucar.nc2.Structure: java.lang.String getShortName()>();

        $r26 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r25);

        $r27 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r26, $r27);

     label4:
        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke r30.<ucar.nc2.Attribute: java.lang.String toString(boolean)>(z2);

        $r19[0] = $r20;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(":%s;", $r19);

        if z2 != 0 goto label5;

        $r21 = virtualinvoke r30.<ucar.nc2.Attribute: ucar.ma2.DataType getDataType()>();

        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r21 == $r22 goto label5;

        $r23 = newarray (java.lang.Object)[1];

        $r24 = virtualinvoke r30.<ucar.nc2.Attribute: ucar.ma2.DataType getDataType()>();

        $r23[0] = $r24;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" // %s", $r23);

     label5:
        $r31 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r31);

        goto label3;

     label6:
        $r16 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r16);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/Structure;");

        <ucar.nc2.Structure: org.slf4j.Logger log> = $r0;

        <ucar.nc2.Structure: int defaultBufferSize> = 500000;

        return;
    }
}
