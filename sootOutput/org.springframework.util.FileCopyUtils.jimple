public abstract class org.springframework.util.FileCopyUtils extends java.lang.Object
{
    public static final int BUFFER_SIZE;

    public void <init>()
    {
        org.springframework.util.FileCopyUtils r0;

        r0 := @this: org.springframework.util.FileCopyUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int copy(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.BufferedInputStream $r2;
        int $i0;
        java.io.FileOutputStream $r5;
        java.io.FileInputStream $r3;
        java.io.File r0, r1;
        java.io.BufferedOutputStream $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No input File specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No output File specified");

        $r2 = new java.io.BufferedInputStream;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r3);

        $r4 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

        $i0 = staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r4);

        return $i0;
    }

    public static void copy(byte[], java.io.File) throws java.io.IOException
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r2;
        java.io.FileOutputStream $r4;
        java.io.File r1;
        java.io.BufferedOutputStream $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.File;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No input byte array specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No output File specified");

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r3 = new java.io.BufferedOutputStream;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r4);

        staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r3);

        return;
    }

    public static byte[] copyToByteArray(java.io.File) throws java.io.IOException
    {
        byte[] $r3;
        java.io.BufferedInputStream $r1;
        java.io.FileInputStream $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No input File specified");

        $r1 = new java.io.BufferedInputStream;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2);

        $r3 = staticinvoke <org.springframework.util.FileCopyUtils: byte[] copyToByteArray(java.io.InputStream)>($r1);

        return $r3;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.lang.Throwable $r5;
        byte[] r2;
        java.io.IOException $r3, $r4, $r6, $r7;
        int $i0, i1, i2, $i4;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No InputStream specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No OutputStream specified");

     label01:
        i2 = 0;

        r2 = newarray (byte)[4096];

        goto label03;

     label02:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        i2 = i2 + $i0;

     label03:
        $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        $i4 = (int) -1;

        if $i0 != $i4 goto label02;

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        i1 = i2;

     label04:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

     label07:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        return i1;

     label11:
        $r5 := @caughtexception;

     label12:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r4 := @caughtexception;

     label15:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r3 := @caughtexception;

     label18:
        throw $r5;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label04 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
    }

    public static void copy(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.lang.Throwable $r4;
        byte[] r0;
        java.io.IOException $r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No input byte array specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No OutputStream specified");

     label01:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        goto label07;

     label02:
        $r4 := @caughtexception;

     label03:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r3 := @caughtexception;

     label06:
        throw $r4;

     label07:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r2 := @caughtexception;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public static byte[] copyToByteArray(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.io.IOException $r3, $r4, $r6, $r7;
        java.io.Reader r0;
        java.io.Writer r1;
        int $i0, i1, i2, $i4;
        char[] r2;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No Reader specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No Writer specified");

     label01:
        i2 = 0;

        r2 = newarray (char)[4096];

        goto label03;

     label02:
        virtualinvoke r1.<java.io.Writer: void write(char[],int,int)>(r2, 0, $i0);

        i2 = i2 + $i0;

     label03:
        $i0 = virtualinvoke r0.<java.io.Reader: int read(char[])>(r2);

        $i4 = (int) -1;

        if $i0 != $i4 goto label02;

        virtualinvoke r1.<java.io.Writer: void flush()>();

        i1 = i2;

     label04:
        virtualinvoke r0.<java.io.Reader: void close()>();

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

     label07:
        virtualinvoke r1.<java.io.Writer: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        return i1;

     label11:
        $r5 := @caughtexception;

     label12:
        virtualinvoke r0.<java.io.Reader: void close()>();

     label13:
        goto label15;

     label14:
        $r4 := @caughtexception;

     label15:
        virtualinvoke r1.<java.io.Writer: void close()>();

     label16:
        goto label18;

     label17:
        $r3 := @caughtexception;

     label18:
        throw $r5;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label04 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
    }

    public static void copy(java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.Writer r1;
        java.io.IOException $r2, $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Writer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No input String specified");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "No Writer specified");

     label01:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0);

        goto label07;

     label02:
        $r4 := @caughtexception;

     label03:
        virtualinvoke r1.<java.io.Writer: void close()>();

     label04:
        goto label06;

     label05:
        $r3 := @caughtexception;

     label06:
        throw $r4;

     label07:
        virtualinvoke r1.<java.io.Writer: void close()>();

     label08:
        goto label10;

     label09:
        $r2 := @caughtexception;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public static java.lang.String copyToString(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r1;
        java.lang.String $r2;
        java.io.StringWriter $r0;

        r1 := @parameter0: java.io.Reader;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.springframework.util.FileCopyUtils: int BUFFER_SIZE> = 4096;

        return;
    }
}
