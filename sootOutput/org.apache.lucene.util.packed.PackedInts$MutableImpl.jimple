abstract class org.apache.lucene.util.packed.PackedInts$MutableImpl extends org.apache.lucene.util.packed.PackedInts$ReaderImpl implements org.apache.lucene.util.packed.PackedInts$Mutable
{
    static final boolean $assertionsDisabled;

    protected void <init>(int, int)
    {
        org.apache.lucene.util.packed.PackedInts$MutableImpl r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$MutableImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: void <init>(int,int)>(i0, i1);

        return;
    }

    public int set(int, long[], int, int)
    {
        org.apache.lucene.util.packed.PackedInts$MutableImpl r0;
        long $l5;
        java.lang.AssertionError $r2, $r3, $r4;
        long[] r1;
        int i0, $i1, $i2, $i3, i4, $i6, $i7, $i8, $i9, i10, i11, i12;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$MutableImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i4 := @parameter2: int;

        i10 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i10 > 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $z1 = <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i9 = r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int valueCount>;

        if i0 < $i9 goto label3;

     label2:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $i1 = r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int valueCount>;

        $i2 = $i1 - i0;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i2);

        $z2 = <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i7 = i4 + $i3;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        i11 = i0;

        i12 = i4;

        $i8 = i0 + $i3;

     label5:
        if i11 >= $i8 goto label6;

        $l5 = r1[i12];

        virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void set(int,long)>(i11, $l5);

        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label5;

     label6:
        return $i3;
    }

    public void fill(int, int, long)
    {
        org.apache.lucene.util.packed.PackedInts$MutableImpl r0;
        long l2, $l4;
        java.lang.AssertionError $r3, $r4;
        byte $b5;
        int i0, i1, $i3, i6, $i7;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$MutableImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $z0 = <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int bitsPerValue>;

        $l4 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>($i3);

        $b5 = l2 cmp $l4;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= i1 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        i6 = i0;

     label3:
        if i6 >= i1 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void set(int,long)>(i6, l2);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    protected org.apache.lucene.util.packed.PackedInts$Format getFormat()
    {
        org.apache.lucene.util.packed.PackedInts$MutableImpl r1;
        org.apache.lucene.util.packed.PackedInts$Format $r0;

        r1 := @this: org.apache.lucene.util.packed.PackedInts$MutableImpl;

        $r0 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        return $r0;
    }

    public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.util.packed.PackedInts$MutableImpl r1;
        org.apache.lucene.store.DataOutput r0;
        org.apache.lucene.util.packed.PackedInts$Format $r2;
        long $l3;
        int $i0, $i1, $i2, i4;
        org.apache.lucene.util.packed.PackedInts$Writer $r3;

        r1 := @this: org.apache.lucene.util.packed.PackedInts$MutableImpl;

        r0 := @parameter0: org.apache.lucene.store.DataOutput;

        $r2 = virtualinvoke r1.<org.apache.lucene.util.packed.PackedInts$MutableImpl: org.apache.lucene.util.packed.PackedInts$Format getFormat()>();

        $i1 = r1.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int valueCount>;

        $i0 = r1.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int bitsPerValue>;

        $r3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r0, $r2, $i1, $i0, 1024);

        virtualinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Writer: void writeHeader()>();

        i4 = 0;

     label1:
        $i2 = r1.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int valueCount>;

        if i4 >= $i2 goto label2;

        $l3 = virtualinvoke r1.<org.apache.lucene.util.packed.PackedInts$MutableImpl: long get(int)>(i4);

        virtualinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l3);

        i4 = i4 + 1;

        goto label1;

     label2:
        virtualinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$MutableImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
