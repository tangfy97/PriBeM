public final class org.bouncycastle.util.Arrays extends java.lang.Object
{

    private void <init>()
    {
        org.bouncycastle.util.Arrays r0;

        r0 := @this: org.bouncycastle.util.Arrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean areEqual(boolean[], boolean[])
    {
        boolean[] r0, r1;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r0;

        if i3 == $i2 goto label7;

        $z1 = r0[i3];

        $z0 = r1[i3];

        if $z1 == $z0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static boolean areEqual(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i6, $i7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        i5 = 0;

     label5:
        $i2 = lengthof r0;

        if i5 == $i2 goto label7;

        $b4 = r0[i5];

        $b3 = r1[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label6;

        return 0;

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static boolean constantTimeAreEqual(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b3, $b4, $b5, b6;
        int $i0, $i1, $i2, i7;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        b6 = 0;

        i7 = 0;

     label5:
        $i2 = lengthof r0;

        if i7 == $i2 goto label6;

        $b4 = r0[i7];

        $b3 = r1[i7];

        $b5 = $b4 ^ $b3;

        b6 = b6 | $b5;

        i7 = i7 + 1;

        goto label5;

     label6:
        if b6 != 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    public static boolean areEqual(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        i5 = 0;

     label5:
        $i2 = lengthof r0;

        if i5 == $i2 goto label7;

        $i4 = r0[i5];

        $i3 = r1[i5];

        if $i4 == $i3 goto label6;

        return 0;

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static void fill(byte[], byte)
    {
        byte[] r0;
        byte b1;
        int $i0, i2;

        r0 := @parameter0: byte[];

        b1 := @parameter1: byte;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        r0[i2] = b1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(long[], long)
    {
        long[] r0;
        int $i0, i2;
        long l1;

        r0 := @parameter0: long[];

        l1 := @parameter1: long;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        r0[i2] = l1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(short[], short)
    {
        short s1;
        int $i0, i2;
        short[] r0;

        r0 := @parameter0: short[];

        s1 := @parameter1: short;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        r0[i2] = s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static int hashCode(byte[])
    {
        byte[] r0;
        byte $b0;
        int i1, i2, i3, $i5, $i6;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof r0;

        i2 = i1 + 1;

     label2:
        $i5 = (int) -1;

        i1 = i1 + $i5;

        if i1 < 0 goto label3;

        i3 = i2 * 257;

        $b0 = r0[i1];

        $i6 = (int) $b0;

        i2 = i3 ^ $i6;

        goto label2;

     label3:
        return i2;
    }

    public static byte[] clone(byte[])
    {
        byte[] r0, r1;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    public static int[] clone(int[])
    {
        int[] r0, r1;
        int $i0, $i1;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }
}
