public final class kodkod.engine.fol2sat.Translator extends java.lang.Object
{
    private final kodkod.ast.Formula formula;
    private final kodkod.instance.Bounds bounds;
    private final kodkod.engine.config.Options options;
    private kodkod.engine.fol2sat.TranslationLog log;

    public static kodkod.engine.bool.BooleanMatrix approximate(kodkod.ast.Expression, kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r3;
        kodkod.engine.bool.BooleanMatrix $r6;
        kodkod.instance.Bounds r2;
        kodkod.ast.Expression r0;
        kodkod.engine.fol2sat.Environment $r5;
        kodkod.util.nodes.AnnotatedNode $r1;
        kodkod.engine.fol2sat.LeafInterpreter $r4;

        r0 := @parameter0: kodkod.ast.Expression;

        r2 := @parameter1: kodkod.instance.Bounds;

        r3 := @parameter2: kodkod.engine.config.Options;

        $r1 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r0);

        $r4 = staticinvoke <kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.fol2sat.LeafInterpreter overapproximating(kodkod.instance.Bounds,kodkod.engine.config.Options)>(r2, r3);

        $r5 = <kodkod.engine.fol2sat.Environment: kodkod.engine.fol2sat.Environment EMPTY>;

        $r6 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix approximate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter,kodkod.engine.fol2sat.Environment)>($r1, $r4, $r5);

        return $r6;
    }

    public static kodkod.engine.bool.BooleanConstant evaluate(kodkod.ast.Formula, kodkod.instance.Instance, kodkod.engine.config.Options)
    {
        kodkod.instance.Instance r2;
        kodkod.engine.config.Options r3;
        kodkod.engine.bool.BooleanConstant $r6;
        kodkod.ast.Formula r0;
        java.lang.Object $r5;
        kodkod.util.nodes.AnnotatedNode $r1;
        kodkod.engine.fol2sat.LeafInterpreter $r4;

        r0 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.instance.Instance;

        r3 := @parameter2: kodkod.engine.config.Options;

        $r1 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r0);

        $r4 = staticinvoke <kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.fol2sat.LeafInterpreter exact(kodkod.instance.Instance,kodkod.engine.config.Options)>(r2, r3);

        $r5 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: java.lang.Object translate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter)>($r1, $r4);

        $r6 = (kodkod.engine.bool.BooleanConstant) $r5;

        return $r6;
    }

    public static kodkod.engine.bool.BooleanMatrix evaluate(kodkod.ast.Expression, kodkod.instance.Instance, kodkod.engine.config.Options)
    {
        kodkod.instance.Instance r2;
        kodkod.engine.config.Options r3;
        kodkod.engine.bool.BooleanMatrix $r6;
        kodkod.ast.Expression r0;
        java.lang.Object $r5;
        kodkod.util.nodes.AnnotatedNode $r1;
        kodkod.engine.fol2sat.LeafInterpreter $r4;

        r0 := @parameter0: kodkod.ast.Expression;

        r2 := @parameter1: kodkod.instance.Instance;

        r3 := @parameter2: kodkod.engine.config.Options;

        $r1 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r0);

        $r4 = staticinvoke <kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.fol2sat.LeafInterpreter exact(kodkod.instance.Instance,kodkod.engine.config.Options)>(r2, r3);

        $r5 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: java.lang.Object translate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter)>($r1, $r4);

        $r6 = (kodkod.engine.bool.BooleanMatrix) $r5;

        return $r6;
    }

    public static kodkod.engine.bool.Int evaluate(kodkod.ast.IntExpression, kodkod.instance.Instance, kodkod.engine.config.Options)
    {
        kodkod.instance.Instance r2;
        kodkod.engine.config.Options r3;
        kodkod.ast.IntExpression r0;
        kodkod.engine.bool.Int $r6;
        java.lang.Object $r5;
        kodkod.util.nodes.AnnotatedNode $r1;
        kodkod.engine.fol2sat.LeafInterpreter $r4;

        r0 := @parameter0: kodkod.ast.IntExpression;

        r2 := @parameter1: kodkod.instance.Instance;

        r3 := @parameter2: kodkod.engine.config.Options;

        $r1 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r0);

        $r4 = staticinvoke <kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.fol2sat.LeafInterpreter exact(kodkod.instance.Instance,kodkod.engine.config.Options)>(r2, r3);

        $r5 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: java.lang.Object translate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter)>($r1, $r4);

        $r6 = (kodkod.engine.bool.Int) $r5;

        return $r6;
    }

    public static kodkod.engine.fol2sat.Translation translate(kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.config.Options) throws kodkod.engine.fol2sat.TrivialFormulaException
    {
        kodkod.engine.config.Options r3;
        kodkod.engine.fol2sat.Translator $r0;
        kodkod.instance.Bounds r2;
        kodkod.ast.Formula r1;
        kodkod.engine.fol2sat.Translation $r4;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.instance.Bounds;

        r3 := @parameter2: kodkod.engine.config.Options;

        $r0 = new kodkod.engine.fol2sat.Translator;

        specialinvoke $r0.<kodkod.engine.fol2sat.Translator: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r1, r2, r3);

        $r4 = specialinvoke $r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation translate()>();

        return $r4;
    }

    private void <init>(kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r4;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.instance.Bounds r2, $r3;
        kodkod.ast.Formula r1;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.instance.Bounds;

        r4 := @parameter2: kodkod.engine.config.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.fol2sat.Translator: kodkod.ast.Formula formula> = r1;

        $r3 = virtualinvoke r2.<kodkod.instance.Bounds: kodkod.instance.Bounds clone()>();

        r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds> = $r3;

        r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options> = r4;

        r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.TranslationLog log> = null;

        return;
    }

    private kodkod.engine.fol2sat.Translation translate() throws kodkod.engine.fol2sat.TrivialFormulaException
    {
        kodkod.engine.config.Options $r1;
        kodkod.ast.Formula $r2, $r6;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.engine.fol2sat.SymmetryBreaker $r3;
        kodkod.engine.fol2sat.Translation $r5;
        int $i0;
        kodkod.util.nodes.AnnotatedNode $r4, $r7;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r1.<kodkod.engine.config.Options: int logTranslation()>();

        if $i0 <= 0 goto label1;

        $r6 = r0.<kodkod.engine.fol2sat.Translator: kodkod.ast.Formula formula>;

        $r7 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotateRoots(kodkod.ast.Formula)>($r6);

        goto label2;

     label1:
        $r2 = r0.<kodkod.engine.fol2sat.Translator: kodkod.ast.Formula formula>;

        $r7 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>($r2);

     label2:
        $r3 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.SymmetryBreaker optimizeBounds(kodkod.util.nodes.AnnotatedNode)>($r7);

        $r4 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.util.nodes.AnnotatedNode optimizeFormula(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.SymmetryBreaker)>($r7, $r3);

        $r5 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation toBoolean(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.SymmetryBreaker)>($r4, $r3);

        return $r5;
    }

    private kodkod.engine.fol2sat.SymmetryBreaker optimizeBounds(kodkod.util.nodes.AnnotatedNode)
    {
        kodkod.engine.config.Options $r6;
        kodkod.engine.config.Reporter $r8;
        kodkod.util.ints.IntSet $r10;
        java.util.Set $r2, $r4;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.instance.Bounds $r1, $r7, $r9;
        kodkod.engine.fol2sat.SymmetryBreaker $r5;
        kodkod.util.nodes.AnnotatedNode r3;
        boolean $z0;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r3 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r2 = virtualinvoke $r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r4 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: java.util.Set relations()>();

        interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r4);

        $z0 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: boolean usesInts()>();

        if $z0 != 0 goto label1;

        $r9 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r10 = virtualinvoke $r9.<kodkod.instance.Bounds: kodkod.util.ints.IntSet ints()>();

        interfaceinvoke $r10.<kodkod.util.ints.IntSet: void clear()>();

     label1:
        $r5 = new kodkod.engine.fol2sat.SymmetryBreaker;

        $r7 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r6 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r8 = virtualinvoke $r6.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        specialinvoke $r5.<kodkod.engine.fol2sat.SymmetryBreaker: void <init>(kodkod.instance.Bounds,kodkod.engine.config.Reporter)>($r7, $r8);

        return $r5;
    }

    private kodkod.util.nodes.AnnotatedNode optimizeFormula(kodkod.util.nodes.AnnotatedNode, kodkod.engine.fol2sat.SymmetryBreaker)
    {
        kodkod.engine.config.Options $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r16, $r17;
        kodkod.instance.Bounds $r11, $r18;
        java.util.Map $r12, $r13, $r21, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.util.nodes.AnnotatedNode $r9, $r15, r19, $r20, $r23;
        boolean $z0;
        kodkod.engine.config.Reporter $r2;
        java.util.Set $r14;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.engine.fol2sat.SymmetryBreaker r7;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r19 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r7 := @parameter1: kodkod.engine.fol2sat.SymmetryBreaker;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        interfaceinvoke $r2.<kodkod.engine.config.Reporter: void optimizingBoundsAndFormula()>();

        $r3 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r3.<kodkod.engine.config.Options: int logTranslation()>();

        if $i0 != 0 goto label3;

        $r12 = virtualinvoke r19.<kodkod.util.nodes.AnnotatedNode: java.util.Map predicates()>();

        $r13 = virtualinvoke r7.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Map breakMatrixSymmetries(java.util.Map,boolean)>($r12, 1);

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();

        $r15 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.util.nodes.AnnotatedNode inlinePredicates(kodkod.util.nodes.AnnotatedNode,java.util.Set)>(r19, $r14);

        $r16 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i5 = virtualinvoke $r16.<kodkod.engine.config.Options: int skolemDepth()>();

        if $i5 < 0 goto label1;

        $r18 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r17 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r20 = staticinvoke <kodkod.engine.fol2sat.Skolemizer: kodkod.util.nodes.AnnotatedNode skolemize(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds,kodkod.engine.config.Options)>($r15, $r18, $r17);

        goto label2;

     label1:
        $r20 = $r15;

     label2:
        return $r20;

     label3:
        $r4 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i1 = virtualinvoke $r4.<kodkod.engine.config.Options: int coreGranularity()>();

        if $i1 != 1 goto label4;

        r19 = staticinvoke <kodkod.engine.fol2sat.FormulaFlattener: kodkod.util.nodes.AnnotatedNode flatten(kodkod.util.nodes.AnnotatedNode,boolean)>(r19, 0);

     label4:
        $r5 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i2 = virtualinvoke $r5.<kodkod.engine.config.Options: int skolemDepth()>();

        if $i2 < 0 goto label5;

        $r11 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r10 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        r19 = staticinvoke <kodkod.engine.fol2sat.Skolemizer: kodkod.util.nodes.AnnotatedNode skolemize(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r19, $r11, $r10);

     label5:
        $r6 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i3 = virtualinvoke $r6.<kodkod.engine.config.Options: int coreGranularity()>();

        if $i3 <= 1 goto label8;

        $r9 = r19;

        $r8 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i4 = virtualinvoke $r8.<kodkod.engine.config.Options: int coreGranularity()>();

        if $i4 != 3 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        r19 = staticinvoke <kodkod.engine.fol2sat.FormulaFlattener: kodkod.util.nodes.AnnotatedNode flatten(kodkod.util.nodes.AnnotatedNode,boolean)>($r9, $z0);

     label8:
        $r21 = virtualinvoke r19.<kodkod.util.nodes.AnnotatedNode: java.util.Map predicates()>();

        $r22 = virtualinvoke r7.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Map breakMatrixSymmetries(java.util.Map,boolean)>($r21, 0);

        $r23 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.util.nodes.AnnotatedNode inlinePredicates(kodkod.util.nodes.AnnotatedNode,java.util.Map)>(r19, $r22);

        return $r23;
    }

    private kodkod.util.nodes.AnnotatedNode inlinePredicates(kodkod.util.nodes.AnnotatedNode, java.util.Set)
    {
        kodkod.ast.Formula $r6, $r8;
        java.util.Set $r3, r4;
        kodkod.ast.Node $r5;
        kodkod.engine.fol2sat.Translator r1;
        java.lang.Object $r7;
        kodkod.util.nodes.AnnotatedNode r2, $r9;
        kodkod.engine.fol2sat.Translator$1 $r0;

        r1 := @this: kodkod.engine.fol2sat.Translator;

        r2 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r4 := @parameter1: java.util.Set;

        $r0 = new kodkod.engine.fol2sat.Translator$1;

        $r3 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        specialinvoke $r0.<kodkod.engine.fol2sat.Translator$1: void <init>(kodkod.engine.fol2sat.Translator,java.util.Set,java.util.Set)>(r1, $r3, r4);

        $r5 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r6 = (kodkod.ast.Formula) $r5;

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r0);

        $r8 = (kodkod.ast.Formula) $r7;

        $r9 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>($r8);

        return $r9;
    }

    private kodkod.util.nodes.AnnotatedNode inlinePredicates(kodkod.util.nodes.AnnotatedNode, java.util.Map)
    {
        java.util.IdentityHashMap $r0;
        kodkod.ast.Formula $r7, $r9;
        java.util.Set $r4;
        kodkod.ast.Node $r6;
        kodkod.engine.fol2sat.Translator r2;
        java.util.Map r5;
        java.lang.Object $r8;
        kodkod.util.nodes.AnnotatedNode r3, $r10;
        kodkod.engine.fol2sat.Translator$2 $r1;

        r2 := @this: kodkod.engine.fol2sat.Translator;

        r3 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r5 := @parameter1: java.util.Map;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        $r1 = new kodkod.engine.fol2sat.Translator$2;

        $r4 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        specialinvoke $r1.<kodkod.engine.fol2sat.Translator$2: void <init>(kodkod.engine.fol2sat.Translator,java.util.Set,kodkod.util.nodes.AnnotatedNode,java.util.Map,java.util.Map)>(r2, $r4, r3, $r0, r5);

        $r6 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r7 = (kodkod.ast.Formula) $r6;

        $r8 = virtualinvoke $r7.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r1);

        $r9 = (kodkod.ast.Formula) $r8;

        $r10 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node,java.util.Map)>($r9, $r0);

        return $r10;
    }

    private kodkod.engine.fol2sat.Translation toBoolean(kodkod.util.nodes.AnnotatedNode, kodkod.engine.fol2sat.SymmetryBreaker) throws kodkod.engine.fol2sat.TrivialFormulaException
    {
        kodkod.engine.bool.BooleanConstant $r19, $r32, $r39;
        kodkod.engine.bool.BooleanValue r43;
        kodkod.engine.fol2sat.LeafInterpreter $r9;
        kodkod.instance.Bounds $r5, $r8, $r20, $r23, $r30, $r37, $r41;
        kodkod.engine.fol2sat.Translation $r16, $r26;
        kodkod.util.nodes.AnnotatedNode r3;
        boolean $z0;
        kodkod.engine.fol2sat.TrivialFormulaException $r46, $r47, $r48;
        kodkod.engine.fol2sat.FileLogger $r45;
        kodkod.engine.config.Reporter $r2;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.engine.fol2sat.SymmetryBreaker r14;
        kodkod.engine.fol2sat.MemoryLogger $r44;
        kodkod.engine.config.Options $r1, $r7, $r10, $r22;
        kodkod.engine.bool.Operator$Nary $r31, $r38;
        kodkod.engine.bool.BooleanFormula $r15;
        kodkod.engine.bool.BooleanAccumulator $r24;
        kodkod.engine.fol2sat.TranslationLog $r25, $r33, $r40;
        kodkod.engine.bool.Operator $r12, $r13;
        int $i0, $i1, $i2;
        kodkod.engine.fol2sat.TranslationLogger $r42;
        kodkod.ast.Formula $r6, $r21, $r29, $r36;
        kodkod.ast.Node $r4, $r18, $r28, $r35;
        java.lang.Object $r11;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r3 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r14 := @parameter1: kodkod.engine.fol2sat.SymmetryBreaker;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r4 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r6 = (kodkod.ast.Formula) $r4;

        $r5 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        interfaceinvoke $r2.<kodkod.engine.config.Reporter: void translatingToBoolean(kodkod.ast.Formula,kodkod.instance.Bounds)>($r6, $r5);

        $r8 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r7 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r9 = staticinvoke <kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.fol2sat.LeafInterpreter exact(kodkod.instance.Bounds,kodkod.engine.config.Options)>($r8, $r7);

        $r10 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r10.<kodkod.engine.config.Options: int logTranslation()>();

        if $i0 <= 0 goto label5;

        $r22 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i1 = virtualinvoke $r22.<kodkod.engine.config.Options: int logTranslation()>();

        if $i1 != 1 goto label1;

        $r44 = new kodkod.engine.fol2sat.MemoryLogger;

        $r42 = $r44;

        $r41 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        specialinvoke $r44.<kodkod.engine.fol2sat.MemoryLogger: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds)>(r3, $r41);

        goto label2;

     label1:
        $r45 = new kodkod.engine.fol2sat.FileLogger;

        $r42 = $r45;

        $r23 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        specialinvoke $r45.<kodkod.engine.fol2sat.FileLogger: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds)>(r3, $r23);

     label2:
        $r24 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.bool.BooleanAccumulator translate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter,kodkod.engine.fol2sat.TranslationLogger)>(r3, $r9, $r42);

        $r25 = virtualinvoke $r42.<kodkod.engine.fol2sat.TranslationLogger: kodkod.engine.fol2sat.TranslationLog log()>();

        r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.TranslationLog log> = $r25;

        $z0 = virtualinvoke $r24.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z0 == 0 goto label3;

        $r46 = new kodkod.engine.fol2sat.TrivialFormulaException;

        $r35 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r36 = (kodkod.ast.Formula) $r35;

        $r37 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r38 = virtualinvoke $r24.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op()>();

        $r39 = virtualinvoke $r38.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        $r40 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.TranslationLog log>;

        specialinvoke $r46.<kodkod.engine.fol2sat.TrivialFormulaException: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.bool.BooleanConstant,kodkod.engine.fol2sat.TranslationLog)>($r36, $r37, $r39, $r40);

        throw $r46;

     label3:
        $i2 = virtualinvoke $r24.<kodkod.engine.bool.BooleanAccumulator: int size()>();

        if $i2 != 0 goto label4;

        $r47 = new kodkod.engine.fol2sat.TrivialFormulaException;

        $r28 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r29 = (kodkod.ast.Formula) $r28;

        $r30 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r31 = virtualinvoke $r24.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op()>();

        $r32 = virtualinvoke $r31.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        $r33 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.TranslationLog log>;

        specialinvoke $r47.<kodkod.engine.fol2sat.TrivialFormulaException: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.bool.BooleanConstant,kodkod.engine.fol2sat.TranslationLog)>($r29, $r30, $r32, $r33);

        throw $r47;

     label4:
        $r26 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation generateSBP(kodkod.engine.bool.BooleanAccumulator,kodkod.engine.fol2sat.LeafInterpreter,kodkod.engine.fol2sat.SymmetryBreaker)>($r24, $r9, r14);

        return $r26;

     label5:
        $r11 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: java.lang.Object translate(kodkod.util.nodes.AnnotatedNode,kodkod.engine.fol2sat.LeafInterpreter)>(r3, $r9);

        r43 = (kodkod.engine.bool.BooleanValue) $r11;

        $r12 = virtualinvoke r43.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r13 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST>;

        if $r12 != $r13 goto label6;

        $r48 = new kodkod.engine.fol2sat.TrivialFormulaException;

        $r18 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r21 = (kodkod.ast.Formula) $r18;

        $r20 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r19 = (kodkod.engine.bool.BooleanConstant) r43;

        specialinvoke $r48.<kodkod.engine.fol2sat.TrivialFormulaException: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.bool.BooleanConstant,kodkod.engine.fol2sat.TranslationLog)>($r21, $r20, $r19, null);

        throw $r48;

     label6:
        $r15 = (kodkod.engine.bool.BooleanFormula) r43;

        $r16 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation generateSBP(kodkod.util.nodes.AnnotatedNode,kodkod.engine.bool.BooleanFormula,kodkod.engine.fol2sat.LeafInterpreter,kodkod.engine.fol2sat.SymmetryBreaker)>(r3, $r15, $r9, r14);

        return $r16;
    }

    private kodkod.engine.fol2sat.Translation generateSBP(kodkod.engine.bool.BooleanAccumulator, kodkod.engine.fol2sat.LeafInterpreter, kodkod.engine.fol2sat.SymmetryBreaker)
    {
        kodkod.engine.config.Options $r1, $r7;
        kodkod.engine.bool.BooleanValue $r8, $r9;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.engine.bool.BooleanAccumulator r5;
        kodkod.engine.bool.BooleanFormula $r10;
        kodkod.engine.config.Reporter $r2;
        kodkod.engine.fol2sat.LeafInterpreter r3;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.engine.fol2sat.SymmetryBreaker r6;
        java.util.Map $r11;
        kodkod.engine.fol2sat.Translation $r12;
        int $i0, $i1;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r5 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        r3 := @parameter1: kodkod.engine.fol2sat.LeafInterpreter;

        r6 := @parameter2: kodkod.engine.fol2sat.SymmetryBreaker;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        interfaceinvoke $r2.<kodkod.engine.config.Reporter: void generatingSBP()>();

        $r4 = virtualinvoke r3.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r7 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r7.<kodkod.engine.config.Options: int symmetryBreaking()>();

        $r8 = virtualinvoke r6.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.engine.bool.BooleanValue generateSBP(kodkod.engine.fol2sat.LeafInterpreter,int)>(r3, $i0);

        virtualinvoke r5.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r8);

        $r9 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>(r5);

        $r10 = (kodkod.engine.bool.BooleanFormula) $r9;

        $i1 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: int numberOfVariables()>();

        $r11 = virtualinvoke r3.<kodkod.engine.fol2sat.LeafInterpreter: java.util.Map vars()>();

        $r12 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation toCNF(kodkod.engine.bool.BooleanFormula,int,java.util.Map)>($r10, $i1, $r11);

        return $r12;
    }

    private kodkod.engine.fol2sat.Translation generateSBP(kodkod.util.nodes.AnnotatedNode, kodkod.engine.bool.BooleanFormula, kodkod.engine.fol2sat.LeafInterpreter, kodkod.engine.fol2sat.SymmetryBreaker) throws kodkod.engine.fol2sat.TrivialFormulaException
    {
        kodkod.engine.config.Options $r1, $r6;
        kodkod.engine.bool.BooleanValue $r7, $r10;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.engine.bool.BooleanFormula r9, $r11;
        kodkod.engine.config.Reporter $r2;
        kodkod.engine.fol2sat.LeafInterpreter r3;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.engine.fol2sat.SymmetryBreaker r5;
        kodkod.engine.fol2sat.Translation $r12;
        int $i0;
        kodkod.util.nodes.AnnotatedNode r8;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r8 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r9 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter2: kodkod.engine.fol2sat.LeafInterpreter;

        r5 := @parameter3: kodkod.engine.fol2sat.SymmetryBreaker;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        interfaceinvoke $r2.<kodkod.engine.config.Reporter: void generatingSBP()>();

        $r4 = virtualinvoke r3.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r6 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r6.<kodkod.engine.config.Options: int symmetryBreaking()>();

        $r7 = virtualinvoke r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.engine.bool.BooleanValue generateSBP(kodkod.engine.fol2sat.LeafInterpreter,int)>(r3, $i0);

        $r10 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r9, $r7);

        $r11 = (kodkod.engine.bool.BooleanFormula) $r10;

        $r12 = specialinvoke r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation flatten(kodkod.util.nodes.AnnotatedNode,kodkod.engine.bool.BooleanFormula,kodkod.engine.fol2sat.LeafInterpreter)>(r8, $r11, r3);

        return $r12;
    }

    private kodkod.engine.fol2sat.Translation flatten(kodkod.util.nodes.AnnotatedNode, kodkod.engine.bool.BooleanFormula, kodkod.engine.fol2sat.LeafInterpreter) throws kodkod.engine.fol2sat.TrivialFormulaException
    {
        kodkod.engine.config.Options $r3, $r7;
        kodkod.engine.bool.BooleanValue $r9;
        kodkod.engine.bool.BooleanConstant $r18;
        kodkod.engine.bool.BooleanFormula r4, $r12;
        kodkod.engine.fol2sat.LeafInterpreter r0;
        kodkod.engine.bool.Operator $r10, $r11;
        kodkod.instance.Bounds $r19;
        java.util.Map $r5, $r13;
        kodkod.engine.fol2sat.Translation $r6, $r14;
        int $i0, $i1;
        kodkod.util.nodes.AnnotatedNode r16;
        boolean $z0;
        kodkod.engine.fol2sat.TrivialFormulaException $r15;
        kodkod.engine.bool.BooleanFactory $r1;
        kodkod.engine.config.Reporter $r8;
        kodkod.ast.Formula $r20;
        kodkod.ast.Node $r17;
        kodkod.engine.fol2sat.Translator r2;

        r2 := @this: kodkod.engine.fol2sat.Translator;

        r16 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r4 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r0 := @parameter2: kodkod.engine.fol2sat.LeafInterpreter;

        $r1 = virtualinvoke r0.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r3 = r2.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $z0 = virtualinvoke $r3.<kodkod.engine.config.Options: boolean flatten()>();

        if $z0 == 0 goto label2;

        $r7 = r2.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r8 = virtualinvoke $r7.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        interfaceinvoke $r8.<kodkod.engine.config.Reporter: void flattening(kodkod.engine.bool.BooleanFormula)>(r4);

        $r9 = staticinvoke <kodkod.engine.fol2sat.BooleanFormulaFlattener: kodkod.engine.bool.BooleanValue flatten(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFactory)>(r4, $r1);

        $r10 = virtualinvoke $r9.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r11 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST>;

        if $r10 != $r11 goto label1;

        $r15 = new kodkod.engine.fol2sat.TrivialFormulaException;

        $r17 = virtualinvoke r16.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r20 = (kodkod.ast.Formula) $r17;

        $r19 = r2.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r18 = (kodkod.engine.bool.BooleanConstant) $r9;

        specialinvoke $r15.<kodkod.engine.fol2sat.TrivialFormulaException: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.bool.BooleanConstant,kodkod.engine.fol2sat.TranslationLog)>($r20, $r19, $r18, null);

        throw $r15;

     label1:
        $r12 = (kodkod.engine.bool.BooleanFormula) $r9;

        $i1 = virtualinvoke $r1.<kodkod.engine.bool.BooleanFactory: int numberOfVariables()>();

        $r13 = virtualinvoke r0.<kodkod.engine.fol2sat.LeafInterpreter: java.util.Map vars()>();

        $r14 = specialinvoke r2.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation toCNF(kodkod.engine.bool.BooleanFormula,int,java.util.Map)>($r12, $i1, $r13);

        return $r14;

     label2:
        $i0 = virtualinvoke $r1.<kodkod.engine.bool.BooleanFactory: int numberOfVariables()>();

        $r5 = virtualinvoke r0.<kodkod.engine.fol2sat.LeafInterpreter: java.util.Map vars()>();

        $r6 = specialinvoke r2.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation toCNF(kodkod.engine.bool.BooleanFormula,int,java.util.Map)>(r4, $i0, $r5);

        return $r6;
    }

    private kodkod.engine.fol2sat.Translation toCNF(kodkod.engine.bool.BooleanFormula, int, java.util.Map)
    {
        kodkod.engine.config.Options $r1, $r4;
        kodkod.engine.satlab.SATFactory $r5;
        kodkod.engine.bool.BooleanFormula r3;
        kodkod.engine.config.Reporter $r2;
        kodkod.engine.fol2sat.TranslationLog $r9;
        kodkod.engine.fol2sat.Translator r0;
        kodkod.instance.Bounds $r10;
        kodkod.engine.fol2sat.Translation $r7;
        java.util.Map r8;
        int i0;
        kodkod.engine.satlab.SATSolver $r6;

        r0 := @this: kodkod.engine.fol2sat.Translator;

        r3 := @parameter0: kodkod.engine.bool.BooleanFormula;

        i0 := @parameter1: int;

        r8 := @parameter2: java.util.Map;

        $r1 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        interfaceinvoke $r2.<kodkod.engine.config.Reporter: void translatingToCNF(kodkod.engine.bool.BooleanFormula)>(r3);

        $r4 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.config.Options options>;

        $r5 = virtualinvoke $r4.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $r6 = staticinvoke <kodkod.engine.fol2sat.Bool2CNFTranslator: kodkod.engine.satlab.SATSolver translate(kodkod.engine.bool.BooleanFormula,kodkod.engine.satlab.SATFactory,int)>(r3, $r5, i0);

        $r7 = new kodkod.engine.fol2sat.Translation;

        $r10 = r0.<kodkod.engine.fol2sat.Translator: kodkod.instance.Bounds bounds>;

        $r9 = r0.<kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.TranslationLog log>;

        specialinvoke $r7.<kodkod.engine.fol2sat.Translation: void <init>(kodkod.engine.satlab.SATSolver,kodkod.instance.Bounds,java.util.Map,int,kodkod.engine.fol2sat.TranslationLog)>($r6, $r10, r8, i0, $r9);

        return $r7;
    }
}
