public class org.apache.http.impl.DefaultConnectionReuseStrategy extends java.lang.Object implements org.apache.http.ConnectionReuseStrategy
{

    public void <init>()
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.StatusLine $r2;
        org.apache.http.Header $r4, r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        org.apache.http.Header[] $r11;
        org.apache.http.HeaderIterator $r20, r21;
        org.apache.http.impl.DefaultConnectionReuseStrategy r5;
        org.apache.http.HttpVersion $r6;
        int $i0, $i1;
        java.lang.String $r8, $r9, $r10, $r12, $r13, $r14;
        org.apache.http.ParseException $r17;
        org.apache.http.TokenIterator $r7;
        java.lang.NumberFormatException $r18;
        java.lang.IllegalArgumentException $r15, $r16;
        org.apache.http.ProtocolVersion $r3;
        org.apache.http.protocol.HttpContext r1;
        org.apache.http.HttpResponse r0;

        r5 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r0 := @parameter0: org.apache.http.HttpResponse;

        r1 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null.");

        throw $r16;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null.");

        throw $r15;

     label02:
        $r2 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r4 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        if $r4 == null goto label03;

        $r13 = "chunked";

        $r14 = interfaceinvoke $r4.<org.apache.http.Header: java.lang.String getValue()>();

        $z6 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);

        if $z6 != 0 goto label10;

        return 0;

     label03:
        $z0 = specialinvoke r5.<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean canResponseHaveBody(org.apache.http.HttpResponse)>(r0);

        if $z0 == 0 goto label10;

        $r11 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.Header[] getHeaders(java.lang.String)>("Content-Length");

        $i0 = lengthof $r11;

        if $i0 != 1 goto label09;

        r19 = $r11[0];

     label04:
        $r12 = interfaceinvoke r19.<org.apache.http.Header: java.lang.String getValue()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        if $i1 >= 0 goto label06;

     label05:
        return 0;

     label06:
        goto label08;

     label07:
        $r18 := @caughtexception;

        return 0;

     label08:
        goto label10;

     label09:
        return 0;

     label10:
        $r20 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Connection");

        r21 = $r20;

        $z7 = interfaceinvoke $r20.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z7 != 0 goto label11;

        r21 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Proxy-Connection");

     label11:
        $z1 = interfaceinvoke r21.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

     label12:
        $r7 = virtualinvoke r5.<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>(r21);

        z8 = 0;

     label13:
        $z3 = interfaceinvoke $r7.<org.apache.http.TokenIterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r8 = interfaceinvoke $r7.<org.apache.http.TokenIterator: java.lang.String nextToken()>();

        $r9 = "Close";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z4 == 0 goto label15;

     label14:
        return 0;

     label15:
        $r10 = "Keep-Alive";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z5 == 0 goto label16;

        z8 = 1;

     label16:
        goto label13;

     label17:
        if z8 == 0 goto label19;

     label18:
        return 1;

     label19:
        goto label21;

     label20:
        $r17 := @caughtexception;

        return 0;

     label21:
        $r6 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z2 = virtualinvoke $r3.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r6);

        if $z2 != 0 goto label22;

        $z9 = 1;

        goto label23;

     label22:
        $z9 = 0;

     label23:
        return $z9;

        catch java.lang.NumberFormatException from label04 to label05 with label07;
        catch org.apache.http.ParseException from label12 to label14 with label20;
        catch org.apache.http.ParseException from label15 to label18 with label20;
    }

    protected org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r2;
        org.apache.http.message.BasicTokenIterator $r0;
        org.apache.http.HeaderIterator r1;

        r2 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r1 := @parameter0: org.apache.http.HeaderIterator;

        $r0 = new org.apache.http.message.BasicTokenIterator;

        specialinvoke $r0.<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>(r1);

        return $r0;
    }

    private boolean canResponseHaveBody(org.apache.http.HttpResponse)
    {
        int $i0;
        org.apache.http.HttpResponse r0;
        org.apache.http.impl.DefaultConnectionReuseStrategy r2;
        org.apache.http.StatusLine $r1;
        boolean $z0;

        r2 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r0 := @parameter0: org.apache.http.HttpResponse;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r1.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 < 200 goto label1;

        if $i0 == 204 goto label1;

        if $i0 == 304 goto label1;

        if $i0 == 205 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
