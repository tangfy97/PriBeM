public class org.fife.util.DynamicIntArray extends java.lang.Object implements java.io.Serializable
{
    private int[] data;
    private int size;

    public void <init>()
    {
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void <init>(int)>(10);

        return;
    }

    public void <init>(int)
    {
        org.fife.util.DynamicIntArray r0;
        java.lang.IllegalArgumentException $r2;
        int[] $r1;
        java.lang.StringBuffer $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal initialCapacity: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = newarray (int)[i0];

        r0.<org.fife.util.DynamicIntArray: int[] data> = $r1;

        r0.<org.fife.util.DynamicIntArray: int size> = 0;

        return;
    }

    public void <init>(int[])
    {
        org.fife.util.DynamicIntArray r0;
        long $l2, $l3, $l4, $l5;
        int[] r1, $r2, $r3;
        int $i0, $i1, i6, $i7;

        r0 := @this: org.fife.util.DynamicIntArray;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        r0.<org.fife.util.DynamicIntArray: int size> = $i0;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        $l2 = (long) $i1;

        $l3 = $l2 * 110L;

        $l4 = $l3 / 100L;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, 2147483647L);

        i6 = (int) $l5;

        $r2 = newarray (int)[i6];

        r0.<org.fife.util.DynamicIntArray: int[] data> = $r2;

        $r3 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i7 = r0.<org.fife.util.DynamicIntArray: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i7);

        return;
    }

    public void add(int)
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3, i4;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i4 := @parameter0: int;

        $i0 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i1 = $i0 + 1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void ensureCapacity(int)>($i1);

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i3 = $i2 + 1;

        r0.<org.fife.util.DynamicIntArray: int size> = $i3;

        $r1[$i2] = i4;

        return;
    }

    public void add(int, int[])
    {
        org.fife.util.DynamicIntArray r0;
        int[] r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 <= $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException2(int)>(i0);

     label1:
        $i8 = lengthof r1;

        $i2 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i3 = $i2 + $i8;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void ensureCapacity(int)>($i3);

        $i4 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i9 = $i4 - i0;

        if $i9 <= 0 goto label2;

        $r4 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r3 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i7 = i0 + $i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, $i7, $i9);

     label2:
        $r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, r1, 0, $i9);

        $i5 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i6 = $i5 + $i8;

        r0.<org.fife.util.DynamicIntArray: int size> = $i6;

        return;
    }

    public void add(int, int)
    {
        org.fife.util.DynamicIntArray r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 <= $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException2(int)>(i0);

     label1:
        $i2 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i3 = $i2 + 1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void ensureCapacity(int)>($i3);

        $r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i6 = i0 + 1;

        $i4 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i5 = $i4 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i6, $i5);

        $r3 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r3[i0] = i7;

        $i8 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i9 = $i8 + 1;

        r0.<org.fife.util.DynamicIntArray: int size> = $i9;

        return;
    }

    public void clear()
    {
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        r0.<org.fife.util.DynamicIntArray: int size> = 0;

        return;
    }

    public boolean contains(int)
    {
        int[] $r1;
        int $i0, i1, $i2, i3;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i1 := @parameter0: int;

        i3 = 0;

     label1:
        $i0 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i3 >= $i0 goto label3;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = $r1[i3];

        if $i2 != i1 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void decrement(int, int)
    {
        int[] $r1;
        int i0, i1, $i2, $i3, i4;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = i0;

     label1:
        if i4 >= i1 goto label2;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = $r1[i4];

        $i3 = $i2 - 1;

        $r1[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private final void ensureCapacity(int)
    {
        org.fife.util.DynamicIntArray r0;
        int[] $r1, r2, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: org.fife.util.DynamicIntArray;

        i1 := @parameter0: int;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        i0 = lengthof $r1;

        if i1 <= i0 goto label2;

        r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = i0 * 3;

        $i3 = $i2 / 2;

        i5 = $i3 + 1;

        if i5 >= i1 goto label1;

        i5 = i1;

     label1:
        $r3 = newarray (int)[i5];

        r0.<org.fife.util.DynamicIntArray: int[] data> = $r3;

        $r4 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i4 = r0.<org.fife.util.DynamicIntArray: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i4);

     label2:
        return;
    }

    public void fill(int)
    {
        int i0;
        org.fife.util.DynamicIntArray r0;
        int[] $r1;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, i0);

        return;
    }

    public int get(int)
    {
        int[] $r1;
        int i0, $i1, $i2;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 < $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException(int)>(i0);

     label1:
        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = $r1[i0];

        return $i2;
    }

    public int getUnsafe(int)
    {
        int[] $r1;
        int i0, $i1;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int getSize()
    {
        int $i0;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        $i0 = r0.<org.fife.util.DynamicIntArray: int size>;

        return $i0;
    }

    public void increment(int, int)
    {
        int[] $r1;
        int i0, i1, $i2, $i3, i4;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = i0;

     label1:
        if i4 >= i1 goto label2;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i2 = $r1[i4];

        $i3 = $i2 + 1;

        $r1[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void insertRange(int, int, int)
    {
        int[] $r1, $r2, $r3;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i8 := @parameter2: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 <= $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException2(int)>(i0);

     label1:
        $i3 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i4 = $i3 + i2;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void ensureCapacity(int)>($i4);

        $r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i7 = i0 + i2;

        $i5 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i6 = $i5 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i7, $i6);

        if i8 == 0 goto label2;

        $r3 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i11 = i0 + i2;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r3, i0, $i11, i8);

     label2:
        $i9 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i10 = $i9 + i2;

        r0.<org.fife.util.DynamicIntArray: int size> = $i10;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.fife.util.DynamicIntArray r0;
        boolean $z0;

        r0 := @this: org.fife.util.DynamicIntArray;

        $i0 = r0.<org.fife.util.DynamicIntArray: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void remove(int)
    {
        org.fife.util.DynamicIntArray r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 < $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException(int)>(i0);

     label1:
        $i2 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i3 = $i2 - i0;

        $i7 = $i3 - 1;

        if $i7 <= 0 goto label2;

        $r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $i6 = i0 + 1;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, $r1, i0, $i7);

     label2:
        $i4 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i5 = $i4 - 1;

        r0.<org.fife.util.DynamicIntArray: int size> = $i5;

        return;
    }

    public void removeRange(int, int)
    {
        org.fife.util.DynamicIntArray r0;
        int[] $r1, $r2;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 >= $i1 goto label1;

        $i3 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i2 <= $i3 goto label2;

     label1:
        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException3(int,int)>(i0, i2);

     label2:
        $i4 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i5 = $i4 - i2;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r2 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i2, $r2, i0, $i5);

        $i6 = r0.<org.fife.util.DynamicIntArray: int size>;

        $i7 = i2 - i0;

        $i8 = $i6 - $i7;

        r0.<org.fife.util.DynamicIntArray: int size> = $i8;

        return;
    }

    public void set(int, int)
    {
        int[] $r1;
        int i0, $i1, i2;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.fife.util.DynamicIntArray: int size>;

        if i0 < $i1 goto label1;

        specialinvoke r0.<org.fife.util.DynamicIntArray: void throwException(int)>(i0);

     label1:
        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r1[i0] = i2;

        return;
    }

    public void setUnsafe(int, int)
    {
        int[] $r1;
        int i0, i1;
        org.fife.util.DynamicIntArray r0;

        r0 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.fife.util.DynamicIntArray: int[] data>;

        $r1[i0] = i1;

        return;
    }

    private final void throwException(int) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.fife.util.DynamicIntArray r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r6, $r7;
        int i0, $i1, $i2;
        java.lang.String $r8;

        r5 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in valid range [0-");

        $i1 = r5.<org.fife.util.DynamicIntArray: int size>;

        $i2 = $i1 - 1;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    private final void throwException2(int) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.fife.util.DynamicIntArray r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r6, $r7;
        int i0, $i1;
        java.lang.String $r8;

        r5 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", not in range [0-");

        $i1 = r5.<org.fife.util.DynamicIntArray: int size>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    private final void throwException3(int, int) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.fife.util.DynamicIntArray r7;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        int i0, i1, $i2, $i3;
        java.lang.String $r10;

        r7 := @this: org.fife.util.DynamicIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index range [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] not in valid range [0-");

        $i2 = r7.<org.fife.util.DynamicIntArray: int size>;

        $i3 = $i2 - 1;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r0;
    }
}
