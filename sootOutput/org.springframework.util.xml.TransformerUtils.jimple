public abstract class org.springframework.util.xml.TransformerUtils extends java.lang.Object
{
    public static final int DEFAULT_INDENT_AMOUNT;

    public void <init>()
    {
        org.springframework.util.xml.TransformerUtils r0;

        r0 := @this: org.springframework.util.xml.TransformerUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void enableIndenting(javax.xml.transform.Transformer)
    {
        javax.xml.transform.Transformer r0;

        r0 := @parameter0: javax.xml.transform.Transformer;

        staticinvoke <org.springframework.util.xml.TransformerUtils: void enableIndenting(javax.xml.transform.Transformer,int)>(r0, 2);

        return;
    }

    public static void enableIndenting(javax.xml.transform.Transformer, int)
    {
        javax.xml.transform.Transformer r0;
        java.lang.IllegalArgumentException $r5;
        int i0, $i2;
        java.lang.StringBuilder $r2, $r6;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @parameter0: javax.xml.transform.Transformer;

        i0 := @parameter1: int;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        $i2 = (int) -1;

        if i0 <= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("The indent amount cannot be less than zero : got ");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, $r3);

        virtualinvoke r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

     label3:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", $r4);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public static void disableIndenting(javax.xml.transform.Transformer)
    {
        javax.xml.transform.Transformer r0;

        r0 := @parameter0: javax.xml.transform.Transformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        virtualinvoke r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "no");

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.util.xml.TransformerUtils: int DEFAULT_INDENT_AMOUNT> = 2;

        return;
    }
}
