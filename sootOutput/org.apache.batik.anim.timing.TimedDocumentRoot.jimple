public abstract class org.apache.batik.anim.timing.TimedDocumentRoot extends org.apache.batik.anim.timing.TimeContainer
{
    protected java.util.Calendar documentBeginTime;
    protected boolean useSVG11AccessKeys;
    protected boolean useSVG12AccessKeys;
    protected org.apache.batik.util.DoublyIndexedSet propagationFlags;
    protected java.util.LinkedList listeners;
    protected boolean isSampling;
    protected boolean isHyperlinking;

    public void <init>(boolean, boolean)
    {
        org.apache.batik.util.DoublyIndexedSet $r1;
        java.util.LinkedList $r2;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        boolean z0, z1;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.batik.anim.timing.TimeContainer: void <init>()>();

        $r1 = new org.apache.batik.util.DoublyIndexedSet;

        specialinvoke $r1.<org.apache.batik.util.DoublyIndexedSet: void <init>()>();

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: org.apache.batik.util.DoublyIndexedSet propagationFlags> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.LinkedList listeners> = $r2;

        r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root> = r0;

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean useSVG11AccessKeys> = z0;

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean useSVG12AccessKeys> = z1;

        return;
    }

    protected float getImplicitDur()
    {
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        return #InfinityF;
    }

    public float getDefaultBegin(org.apache.batik.anim.timing.TimedElement)
    {
        org.apache.batik.anim.timing.TimedElement r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r1 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        return 0.0F;
    }

    public float getCurrentTime()
    {
        float $f0;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        $f0 = r0.<org.apache.batik.anim.timing.TimedElement: float lastSampleTime>;

        return $f0;
    }

    public boolean isSampling()
    {
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        boolean $z0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        $z0 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean isSampling>;

        return $z0;
    }

    public boolean isHyperlinking()
    {
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        boolean $z0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        $z0 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean isHyperlinking>;

        return $z0;
    }

    public float seekTo(float, boolean)
    {
        org.apache.batik.anim.timing.TimedElement[] $r2;
        org.apache.batik.anim.timing.TimedDocumentRoot r0, $r6;
        byte $b0, $b1;
        int i2, $i3, i4, $i5, $i6, $i7;
        boolean z0, $z1, z2;
        org.apache.batik.util.DoublyIndexedSet $r1;
        org.apache.batik.anim.timing.TimedElement $r3, $r4, $r5;
        float f0, $f1, $f2, f3;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean isSampling> = 1;

        r0.<org.apache.batik.anim.timing.TimedElement: float lastSampleTime> = f0;

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean isHyperlinking> = z0;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: org.apache.batik.util.DoublyIndexedSet propagationFlags>;

        virtualinvoke $r1.<org.apache.batik.util.DoublyIndexedSet: void clear()>();

        f3 = #InfinityF;

        $r2 = virtualinvoke r0.<org.apache.batik.anim.timing.TimeContainer: org.apache.batik.anim.timing.TimedElement[] getChildren()>();

        i2 = 0;

        goto label3;

     label1:
        $r3 = $r2[i2];

        $f1 = virtualinvoke $r3.<org.apache.batik.anim.timing.TimedElement: float sampleAt(float,boolean)>(f0, z0);

        $b0 = $f1 cmpg f3;

        $i6 = (int) $b0;

        if $i6 >= 0 goto label2;

        f3 = $f1;

     label2:
        i2 = i2 + 1;

     label3:
        $i3 = lengthof $r2;

        if i2 < $i3 goto label1;

     label4:
        z2 = 0;

        i4 = 0;

        goto label7;

     label5:
        $r4 = $r2[i4];

        $z1 = $r4.<org.apache.batik.anim.timing.TimedElement: boolean shouldUpdateCurrentInterval>;

        if $z1 == 0 goto label6;

        z2 = 1;

        $r5 = $r2[i4];

        $f2 = virtualinvoke $r5.<org.apache.batik.anim.timing.TimedElement: float sampleAt(float,boolean)>(f0, z0);

        $b1 = $f2 cmpg f3;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label6;

        f3 = $f2;

     label6:
        i4 = i4 + 1;

     label7:
        $i5 = lengthof $r2;

        if i4 < $i5 goto label5;

        if z2 != 0 goto label4;

        r0.<org.apache.batik.anim.timing.TimedDocumentRoot: boolean isSampling> = 0;

        if z0 == 0 goto label8;

        $r6 = r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke $r6.<org.apache.batik.anim.timing.TimedDocumentRoot: void currentIntervalWillUpdate()>();

     label8:
        return f3;
    }

    public void resetDocument(java.util.Calendar)
    {
        java.util.Calendar r0, $r2;
        org.apache.batik.anim.timing.TimedDocumentRoot r1;

        r1 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r1.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.Calendar documentBeginTime> = $r2;

        goto label2;

     label1:
        r1.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.Calendar documentBeginTime> = r0;

     label2:
        virtualinvoke r1.<org.apache.batik.anim.timing.TimeContainer: void reset(boolean)>(1);

        return;
    }

    public java.util.Calendar getDocumentBeginTime()
    {
        java.util.Calendar $r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.Calendar documentBeginTime>;

        return $r1;
    }

    public float convertEpochTime(long)
    {
        java.util.Date $r2;
        long $l0, l1, $l2;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        java.util.Calendar $r1;
        float $f0, $f1;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        l1 := @parameter0: long;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.Calendar documentBeginTime>;

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $l2 = l1 - $l0;

        $f0 = (float) $l2;

        $f1 = $f0 / 1000.0F;

        return $f1;
    }

    public float convertWallclockTime(java.util.Calendar)
    {
        java.util.Date $r2, $r4;
        long $l0, $l1, $l2;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        java.util.Calendar $r1, r3;
        float $f0, $f1;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r3 := @parameter0: java.util.Calendar;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.Calendar documentBeginTime>;

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l2 = $l1 - $l0;

        $f0 = (float) $l2;

        $f1 = $f0 / 1000.0F;

        return $f1;
    }

    public void addTimegraphListener(org.apache.batik.anim.timing.TimegraphListener)
    {
        java.util.LinkedList $r2;
        org.apache.batik.anim.timing.TimegraphListener r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r1 := @parameter0: org.apache.batik.anim.timing.TimegraphListener;

        $r2 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.LinkedList listeners>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeTimegraphListener(org.apache.batik.anim.timing.TimegraphListener)
    {
        java.util.LinkedList $r2;
        org.apache.batik.anim.timing.TimegraphListener r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r1 := @parameter0: org.apache.batik.anim.timing.TimegraphListener;

        $r2 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.LinkedList listeners>;

        virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    void fireElementAdded(org.apache.batik.anim.timing.TimedElement)
    {
        java.util.Iterator $r2;
        org.apache.batik.anim.timing.TimedElement r4;
        org.apache.batik.anim.timing.TimegraphListener $r5;
        java.lang.Object $r3;
        java.util.LinkedList $r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        boolean $z0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r4 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.LinkedList listeners>;

        $r2 = virtualinvoke $r1.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.batik.anim.timing.TimegraphListener) $r3;

        interfaceinvoke $r5.<org.apache.batik.anim.timing.TimegraphListener: void elementAdded(org.apache.batik.anim.timing.TimedElement)>(r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    void fireElementRemoved(org.apache.batik.anim.timing.TimedElement)
    {
        java.util.Iterator $r2;
        org.apache.batik.anim.timing.TimedElement r4;
        org.apache.batik.anim.timing.TimegraphListener $r5;
        java.lang.Object $r3;
        java.util.LinkedList $r1;
        org.apache.batik.anim.timing.TimedDocumentRoot r0;
        boolean $z0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r4 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        $r1 = r0.<org.apache.batik.anim.timing.TimedDocumentRoot: java.util.LinkedList listeners>;

        $r2 = virtualinvoke $r1.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.batik.anim.timing.TimegraphListener) $r3;

        interfaceinvoke $r5.<org.apache.batik.anim.timing.TimegraphListener: void elementRemoved(org.apache.batik.anim.timing.TimedElement)>(r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    boolean shouldPropagate(org.apache.batik.anim.timing.Interval, org.apache.batik.anim.timing.TimingSpecifier, boolean)
    {
        org.apache.batik.util.DoublyIndexedSet $r3, $r4;
        org.apache.batik.anim.timing.Interval r0;
        org.apache.batik.anim.timing.InstanceTime $r5;
        org.apache.batik.anim.timing.TimedDocumentRoot r1;
        org.apache.batik.anim.timing.TimingSpecifier r2;
        boolean z0, $z1;

        r1 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        r0 := @parameter0: org.apache.batik.anim.timing.Interval;

        r2 := @parameter1: org.apache.batik.anim.timing.TimingSpecifier;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.batik.anim.timing.Interval: org.apache.batik.anim.timing.InstanceTime getBeginInstanceTime()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.batik.anim.timing.Interval: org.apache.batik.anim.timing.InstanceTime getEndInstanceTime()>();

     label2:
        $r3 = r1.<org.apache.batik.anim.timing.TimedDocumentRoot: org.apache.batik.util.DoublyIndexedSet propagationFlags>;

        $z1 = virtualinvoke $r3.<org.apache.batik.util.DoublyIndexedSet: boolean contains(java.lang.Object,java.lang.Object)>($r5, r2);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r4 = r1.<org.apache.batik.anim.timing.TimedDocumentRoot: org.apache.batik.util.DoublyIndexedSet propagationFlags>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedSet: void add(java.lang.Object,java.lang.Object)>($r5, r2);

        return 1;
    }

    protected void currentIntervalWillUpdate()
    {
        org.apache.batik.anim.timing.TimedDocumentRoot r0;

        r0 := @this: org.apache.batik.anim.timing.TimedDocumentRoot;

        return;
    }

    protected abstract java.lang.String getEventNamespaceURI(java.lang.String);

    protected abstract java.lang.String getEventType(java.lang.String);

    protected abstract java.lang.String getRepeatEventName();
}
