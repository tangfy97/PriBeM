final class org.waveprotocol.box.server.frontend.UserManager extends java.lang.Object
{
    private final com.google.common.collect.ListMultimap subscriptions;

    void <init>()
    {
        com.google.common.collect.LinkedListMultimap $r1;
        org.waveprotocol.box.server.frontend.UserManager r0;

        r0 := @this: org.waveprotocol.box.server.frontend.UserManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.LinkedListMultimap: com.google.common.collect.LinkedListMultimap create()>();

        r0.<org.waveprotocol.box.server.frontend.UserManager: com.google.common.collect.ListMultimap subscriptions> = $r1;

        return;
    }

    synchronized java.util.List matchSubscriptions(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.wave.model.id.WaveId $r3;
        java.util.Iterator $r6;
        com.google.common.collect.ListMultimap $r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r8;
        org.waveprotocol.wave.model.id.WaveletId $r9;
        java.util.ArrayList $r0;
        org.waveprotocol.box.server.frontend.UserManager r1;
        java.util.List $r5;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r4 = r1.<org.waveprotocol.box.server.frontend.UserManager: com.google.common.collect.ListMultimap subscriptions>;

        $r3 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r5 = interfaceinvoke $r4.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>($r3);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.box.server.frontend.WaveViewSubscription) $r7;

        $r9 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $z1 = virtualinvoke r8.<org.waveprotocol.box.server.frontend.WaveViewSubscription: boolean includes(org.waveprotocol.wave.model.id.WaveletId)>($r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private synchronized org.waveprotocol.box.server.frontend.WaveViewSubscription findSubscription(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        java.util.Iterator $r5;
        com.google.common.collect.ListMultimap $r3;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r7;
        org.waveprotocol.wave.model.id.WaveletId $r8;
        org.waveprotocol.box.server.frontend.UserManager r0;
        java.util.List $r4;
        java.lang.Object $r6;
        java.lang.String $r9, r10;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r10 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.box.server.frontend.UserManager: com.google.common.collect.ListMultimap subscriptions>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>($r2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.box.server.frontend.WaveViewSubscription) $r6;

        $r8 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $z1 = virtualinvoke r7.<org.waveprotocol.box.server.frontend.WaveViewSubscription: boolean includes(org.waveprotocol.wave.model.id.WaveletId)>($r8);

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r7.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String getChannelId()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public synchronized void onUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        java.util.Iterator $r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r6;
        org.waveprotocol.box.common.DeltaSequence r1;
        org.waveprotocol.box.server.frontend.UserManager r2;
        java.util.List $r3;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = virtualinvoke r1.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.frontend.UserManager: java.util.List matchSubscriptions(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.box.server.frontend.WaveViewSubscription) $r5;

        virtualinvoke r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.common.DeltaSequence)>(r0, r1);

        goto label2;

     label3:
        return;
    }

    public void onCommit(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        java.util.Iterator $r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r6;
        org.waveprotocol.box.server.frontend.UserManager r2;
        java.util.List $r3;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.Object $r5;
        boolean $z0;

        r2 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.frontend.UserManager: java.util.List matchSubscriptions(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.box.server.frontend.WaveViewSubscription) $r5;

        virtualinvoke r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void onCommit(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion)>(r0, r1);

        goto label1;

     label2:
        return;
    }

    public synchronized org.waveprotocol.box.server.frontend.WaveViewSubscription subscribe(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdFilter, java.lang.String, org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        com.google.common.collect.ListMultimap $r6;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription $r0;
        org.waveprotocol.wave.model.id.IdFilter r2;
        java.lang.String r3;
        org.waveprotocol.box.server.frontend.UserManager r5;

        r5 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener;

        $r0 = new org.waveprotocol.box.server.frontend.WaveViewSubscription;

        specialinvoke $r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdFilter,java.lang.String,org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)>(r1, r2, r3, r4);

        $r6 = r5.<org.waveprotocol.box.server.frontend.UserManager: com.google.common.collect.ListMultimap subscriptions>;

        interfaceinvoke $r6.<com.google.common.collect.ListMultimap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public void submitRequest(java.lang.String, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.WaveViewSubscription $r3;
        java.lang.String r2;
        org.waveprotocol.box.server.frontend.UserManager r0;

        r0 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.frontend.UserManager: org.waveprotocol.box.server.frontend.WaveViewSubscription findSubscription(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        virtualinvoke $r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void submitRequest(org.waveprotocol.wave.model.id.WaveletName)>(r1);

     label1:
        return;
    }

    public void submitResponse(java.lang.String, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription $r3;
        java.lang.String r2;
        org.waveprotocol.box.server.frontend.UserManager r0;

        r0 := @this: org.waveprotocol.box.server.frontend.UserManager;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.frontend.UserManager: org.waveprotocol.box.server.frontend.WaveViewSubscription findSubscription(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        virtualinvoke $r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void submitResponse(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r4);

     label1:
        return;
    }
}
