class org.apache.lucene.search.ReqOptSumScorer extends org.apache.lucene.search.Scorer
{
    private org.apache.lucene.search.Scorer reqScorer;
    private org.apache.lucene.search.Scorer optScorer;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)
    {
        org.apache.lucene.search.Scorer r1, r3;
        org.apache.lucene.search.Weight $r2;
        java.lang.AssertionError $r4, $r5;
        org.apache.lucene.search.ReqOptSumScorer r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        r1 := @parameter0: org.apache.lucene.search.Scorer;

        r3 := @parameter1: org.apache.lucene.search.Scorer;

        $r2 = r1.<org.apache.lucene.search.Scorer: org.apache.lucene.search.Weight weight>;

        specialinvoke r0.<org.apache.lucene.search.Scorer: void <init>(org.apache.lucene.search.Weight)>($r2);

        $z0 = <org.apache.lucene.search.ReqOptSumScorer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <org.apache.lucene.search.ReqOptSumScorer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer> = r1;

        r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer> = r3;

        return;
    }

    public int nextDoc() throws java.io.IOException
    {
        int $i0;
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.ReqOptSumScorer r0;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: int nextDoc()>();

        return $i0;
    }

    public int advance(int) throws java.io.IOException
    {
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.ReqOptSumScorer r0;
        int i0, $i1;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: int advance(int)>(i0);

        return $i1;
    }

    public int docID()
    {
        int $i0;
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.ReqOptSumScorer r0;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: int docID()>();

        return $i0;
    }

    public float score() throws java.io.IOException
    {
        org.apache.lucene.search.Scorer $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.lucene.search.ReqOptSumScorer r0;
        int $i0, $i1, $i2, i3;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: int docID()>();

        $r2 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $f0 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: float score()>();

        $r3 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        if $r3 != null goto label1;

        return $f0;

     label1:
        $r4 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        $i1 = virtualinvoke $r4.<org.apache.lucene.search.Scorer: int docID()>();

        i3 = $i1;

        if $i1 >= $i0 goto label2;

        $r6 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        $i2 = virtualinvoke $r6.<org.apache.lucene.search.Scorer: int advance(int)>($i0);

        i3 = $i2;

        if $i2 != 2147483647 goto label2;

        r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer> = null;

        return $f0;

     label2:
        if i3 != $i0 goto label3;

        $r5 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        $f1 = virtualinvoke $r5.<org.apache.lucene.search.Scorer: float score()>();

        $f2 = $f0 + $f1;

        goto label4;

     label3:
        $f2 = $f0;

     label4:
        return $f2;
    }

    public int freq() throws java.io.IOException
    {
        org.apache.lucene.search.Scorer $r1, $r2, $r3;
        byte $b2;
        org.apache.lucene.search.ReqOptSumScorer r0;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        virtualinvoke r0.<org.apache.lucene.search.ReqOptSumScorer: float score()>();

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int docID()>();

        $r3 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.search.Scorer: int docID()>();

        if $i0 != $i1 goto label1;

        $b2 = 2;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;
    }

    public java.util.Collection getChildren()
    {
        org.apache.lucene.search.Scorer$ChildScorer $r1, $r4;
        org.apache.lucene.search.Scorer $r3, $r5;
        org.apache.lucene.search.ReqOptSumScorer r2;
        java.util.ArrayList $r0;

        r2 := @this: org.apache.lucene.search.ReqOptSumScorer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        $r1 = new org.apache.lucene.search.Scorer$ChildScorer;

        $r3 = r2.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        specialinvoke $r1.<org.apache.lucene.search.Scorer$ChildScorer: void <init>(org.apache.lucene.search.Scorer,java.lang.String)>($r3, "MUST");

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r4 = new org.apache.lucene.search.Scorer$ChildScorer;

        $r5 = r2.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer optScorer>;

        specialinvoke $r4.<org.apache.lucene.search.Scorer$ChildScorer: void <init>(org.apache.lucene.search.Scorer,java.lang.String)>($r5, "SHOULD");

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return $r0;
    }

    public long cost()
    {
        long $l0;
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.ReqOptSumScorer r0;

        r0 := @this: org.apache.lucene.search.ReqOptSumScorer;

        $r1 = r0.<org.apache.lucene.search.ReqOptSumScorer: org.apache.lucene.search.Scorer reqScorer>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: long cost()>();

        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/ReqOptSumScorer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.ReqOptSumScorer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
