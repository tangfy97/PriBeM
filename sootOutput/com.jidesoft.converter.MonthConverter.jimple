public class com.jidesoft.converter.MonthConverter extends java.lang.Object implements com.jidesoft.converter.ObjectConverter
{
    public static com.jidesoft.converter.ConverterContext CONTEXT_MONTH;
    private java.text.DateFormat _conciseFormat;
    private java.text.DateFormat _shortFormat;
    private java.text.DateFormat _mediumFormat;
    private java.text.DateFormat _longFormat;
    private java.text.DateFormat _defaultFormat;

    public void <init>()
    {
        com.jidesoft.converter.MonthConverter r0;
        java.text.SimpleDateFormat $r1, $r2, $r3, $r4;
        java.text.DateFormat $r5;

        r0 := @this: com.jidesoft.converter.MonthConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MMyy");

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _conciseFormat> = $r1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/yy");

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _shortFormat> = $r2;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM, yyyy");

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _mediumFormat> = $r3;

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MMMMM, yyyy");

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _longFormat> = $r4;

        $r5 = r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _shortFormat>;

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _defaultFormat> = $r5;

        return;
    }

    public java.lang.String toString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.util.Date $r4;
        com.jidesoft.converter.MonthConverter r1;
        java.util.Calendar $r2;
        com.jidesoft.converter.ConverterContext r6;
        java.lang.Object r0;
        java.lang.String $r5;
        java.text.DateFormat $r3;
        boolean $z0;

        r1 := @this: com.jidesoft.converter.MonthConverter;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: com.jidesoft.converter.ConverterContext;

        if r0 == null goto label1;

        $z0 = r0 instanceof java.util.Calendar;

        if $z0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r3 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _defaultFormat>;

        $r2 = (java.util.Calendar) r0;

        $r4 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $r5 = virtualinvoke $r3.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r4);

        return $r5;
    }

    public boolean supportToString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        com.jidesoft.converter.MonthConverter r0;
        java.lang.Object r1;
        com.jidesoft.converter.ConverterContext r2;

        r0 := @this: com.jidesoft.converter.MonthConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public java.lang.Object fromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        java.util.Date $r4, $r8, $r11, $r14, $r17;
        java.util.Calendar $r0;
        java.lang.String r2;
        java.text.ParseException $r5, $r6, $r9, $r12, $r15;
        java.text.DateFormat $r3, $r7, $r10, $r13, $r16;
        com.jidesoft.converter.MonthConverter r1;
        com.jidesoft.converter.ConverterContext r18;

        r1 := @this: com.jidesoft.converter.MonthConverter;

        r2 := @parameter0: java.lang.String;

        r18 := @parameter1: com.jidesoft.converter.ConverterContext;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label01:
        $r3 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _defaultFormat>;

        $r4 = virtualinvoke $r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r4);

     label02:
        goto label16;

     label03:
        $r15 := @caughtexception;

     label04:
        $r16 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _shortFormat>;

        $r17 = virtualinvoke $r16.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r17);

     label05:
        goto label16;

     label06:
        $r12 := @caughtexception;

     label07:
        $r13 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _mediumFormat>;

        $r14 = virtualinvoke $r13.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r14);

     label08:
        goto label16;

     label09:
        $r9 := @caughtexception;

     label10:
        $r10 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _longFormat>;

        $r11 = virtualinvoke $r10.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r11);

     label11:
        goto label16;

     label12:
        $r6 := @caughtexception;

     label13:
        $r7 = r1.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _conciseFormat>;

        $r8 = virtualinvoke $r7.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r8);

     label14:
        goto label16;

     label15:
        $r5 := @caughtexception;

        return null;

     label16:
        return $r0;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
        catch java.text.ParseException from label13 to label14 with label15;
    }

    public boolean supportFromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        com.jidesoft.converter.MonthConverter r0;
        java.lang.String r1;
        com.jidesoft.converter.ConverterContext r2;

        r0 := @this: com.jidesoft.converter.MonthConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public java.text.DateFormat getDefaultFormat()
    {
        com.jidesoft.converter.MonthConverter r0;
        java.text.DateFormat $r1;

        r0 := @this: com.jidesoft.converter.MonthConverter;

        $r1 = r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _defaultFormat>;

        return $r1;
    }

    public void setDefaultFormat(java.text.DateFormat)
    {
        com.jidesoft.converter.MonthConverter r0;
        java.text.DateFormat r1;

        r0 := @this: com.jidesoft.converter.MonthConverter;

        r1 := @parameter0: java.text.DateFormat;

        r0.<com.jidesoft.converter.MonthConverter: java.text.DateFormat _defaultFormat> = r1;

        return;
    }

    static void <clinit>()
    {
        com.jidesoft.converter.ConverterContext $r0;

        $r0 = new com.jidesoft.converter.ConverterContext;

        specialinvoke $r0.<com.jidesoft.converter.ConverterContext: void <init>(java.lang.String)>("Calendar.Month");

        <com.jidesoft.converter.MonthConverter: com.jidesoft.converter.ConverterContext CONTEXT_MONTH> = $r0;

        return;
    }
}
