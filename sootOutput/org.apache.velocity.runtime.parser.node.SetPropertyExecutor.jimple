public class org.apache.velocity.runtime.parser.node.SetPropertyExecutor extends org.apache.velocity.runtime.parser.node.SetExecutor
{
    private final org.apache.velocity.util.introspection.Introspector introspector;

    public void <init>(org.apache.velocity.runtime.log.Log, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String, java.lang.Object)
    {
        org.apache.velocity.runtime.parser.node.SetPropertyExecutor r0;
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.util.introspection.Introspector r2;
        java.lang.Class r4;
        java.lang.Object r5;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SetPropertyExecutor;

        r1 := @parameter0: org.apache.velocity.runtime.log.Log;

        r2 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r4 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SetExecutor: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.runtime.log.Log log> = r1;

        r0.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector> = r2;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotEmpty(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: void discover(java.lang.Class,java.lang.String,java.lang.Object)>(r4, r3, r5);

     label1:
        return;
    }

    protected org.apache.velocity.util.introspection.Introspector getIntrospector()
    {
        org.apache.velocity.runtime.parser.node.SetPropertyExecutor r0;
        org.apache.velocity.util.introspection.Introspector $r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.SetPropertyExecutor;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        return $r1;
    }

    protected void discover(java.lang.Class, java.lang.String, java.lang.Object)
    {
        org.apache.commons.lang.text.StrBuilder $r2;
        java.lang.Object[] $r0;
        java.lang.StringBuffer $r13, $r14, $r15;
        org.apache.velocity.util.introspection.Introspector $r6, $r9;
        java.lang.String r3, $r7, $r10, $r16;
        org.apache.velocity.exception.VelocityException $r18;
        java.lang.reflect.Method $r8, $r11;
        boolean $z0, $z1;
        org.apache.velocity.runtime.parser.node.SetPropertyExecutor r4;
        char $c0, $c1, $c2;
        java.lang.RuntimeException $r19;
        java.lang.Exception $r12;
        org.apache.velocity.runtime.log.Log $r17;
        java.lang.Object r1;
        java.lang.Class r5;

        r4 := @this: org.apache.velocity.runtime.parser.node.SetPropertyExecutor;

        r5 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

     label1:
        $r2 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r2.<org.apache.commons.lang.text.StrBuilder: void <init>(java.lang.String)>("set");

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r3);

        $r6 = r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        $r7 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r5, $r7, $r0);

        virtualinvoke r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: void setMethod(java.lang.reflect.Method)>($r8);

        $z0 = virtualinvoke r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: boolean isAlive()>();

        if $z0 != 0 goto label4;

        $c0 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: char charAt(int)>(3);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z1 == 0 goto label2;

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder setCharAt(int,char)>(3, $c2);

        goto label3;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder setCharAt(int,char)>(3, $c1);

     label3:
        $r9 = r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        $r10 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r5, $r10, $r0);

        virtualinvoke r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: void setMethod(java.lang.reflect.Method)>($r11);

     label4:
        goto label7;

     label5:
        $r19 := @caughtexception;

        throw $r19;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while looking for property setter for \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = r4.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r17.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r16, $r12);

        $r18 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r18.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r12);

        throw $r18;

     label7:
        return;

        catch java.lang.RuntimeException from label1 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label6;
    }

    public java.lang.Object execute(java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.apache.velocity.runtime.parser.node.SetPropertyExecutor r2;
        java.lang.Object[] $r0;
        java.lang.Object r1, r4, $r5;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r2 := @this: org.apache.velocity.runtime.parser.node.SetPropertyExecutor;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $z0 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.SetPropertyExecutor: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }
}
