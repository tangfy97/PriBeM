public class com.jhlabs.image.QuantizeFilter extends com.jhlabs.image.WholeImageFilter implements java.io.Serializable
{
    protected static final int[] matrix;
    private int sum;
    private boolean dither;
    private int numColors;
    private boolean serpentine;

    public void <init>()
    {
        com.jhlabs.image.QuantizeFilter r0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.QuantizeFilter: int sum> = 16;

        r0.<com.jhlabs.image.QuantizeFilter: int numColors> = 256;

        r0.<com.jhlabs.image.QuantizeFilter: boolean serpentine> = 1;

        return;
    }

    public void setNumColors(int)
    {
        com.jhlabs.image.QuantizeFilter r0;
        int i0, $i1, $i2;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 8);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 256);

        r0.<com.jhlabs.image.QuantizeFilter: int numColors> = $i2;

        return;
    }

    public int getNumColors()
    {
        com.jhlabs.image.QuantizeFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        $i0 = r0.<com.jhlabs.image.QuantizeFilter: int numColors>;

        return $i0;
    }

    public void setDither(boolean)
    {
        com.jhlabs.image.QuantizeFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.QuantizeFilter: boolean dither> = z0;

        return;
    }

    public boolean getDither()
    {
        com.jhlabs.image.QuantizeFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        $z0 = r0.<com.jhlabs.image.QuantizeFilter: boolean dither>;

        return $z0;
    }

    public void setSerpentine(boolean)
    {
        com.jhlabs.image.QuantizeFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.QuantizeFilter: boolean serpentine> = z0;

        return;
    }

    public boolean getSerpentine()
    {
        com.jhlabs.image.QuantizeFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        $z0 = r0.<com.jhlabs.image.QuantizeFilter: boolean serpentine>;

        return $z0;
    }

    public void quantize(int[], int[], int, int, int, boolean, boolean)
    {
        byte b60;
        int[] r1, $r2, r3, $r4, $r6;
        boolean z0, z1, z2, $z4, $z5;
        int i0, i1, i2, i3, $i4, i5, $i6, $i7, $i8, i9, $i10, i11, i12, i13, i14, i15, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, i57, i58, i59, i61, i62, i63, i64, i65, i66, i67, i68, $i69, $i71, $i73;
        com.jhlabs.image.OctTreeQuantizer $r7;
        com.jhlabs.image.QuantizeFilter r5;

        r5 := @this: com.jhlabs.image.QuantizeFilter;

        r1 := @parameter0: int[];

        r3 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i2 = i0 * i1;

        $r7 = new com.jhlabs.image.OctTreeQuantizer;

        specialinvoke $r7.<com.jhlabs.image.OctTreeQuantizer: void <init>()>();

        interfaceinvoke $r7.<com.jhlabs.image.Quantizer: void setup(int)>(i3);

        interfaceinvoke $r7.<com.jhlabs.image.Quantizer: void addPixels(int[],int,int)>(r1, 0, i2);

        $r2 = interfaceinvoke $r7.<com.jhlabs.image.Quantizer: int[] buildColorTable()>();

        if z0 != 0 goto label03;

        i57 = 0;

     label01:
        if i57 >= i2 goto label02;

        $i54 = r1[i57];

        $i55 = interfaceinvoke $r7.<com.jhlabs.image.Quantizer: int getIndexForColor(int)>($i54);

        $i56 = $r2[$i55];

        r3[i57] = $i56;

        i57 = i57 + 1;

        goto label01;

     label02:
        goto label20;

     label03:
        i58 = 0;

     label04:
        if i58 >= i1 goto label20;

        if z1 == 0 goto label05;

        $i53 = i58 & 1;

        if $i53 != 1 goto label05;

        $z5 = 1;

        $z4 = 1;

        goto label06;

     label05:
        $z5 = 0;

        $z4 = 0;

     label06:
        z2 = $z4;

        if $z5 == 0 goto label07;

        $i51 = i58 * i0;

        $i52 = $i51 + i0;

        i59 = $i52 - 1;

        b60 = -1;

        goto label08;

     label07:
        i59 = i58 * i0;

        b60 = 1;

     label08:
        i61 = 0;

     label09:
        if i61 >= i0 goto label19;

        i62 = r1[i59];

        $i4 = interfaceinvoke $r7.<com.jhlabs.image.Quantizer: int getIndexForColor(int)>(i62);

        i5 = $r2[$i4];

        r3[i59] = i5;

        $i6 = i62 >> 16;

        i63 = $i6 & 255;

        $i7 = i62 >> 8;

        i64 = $i7 & 255;

        i65 = i62 & 255;

        $i8 = i5 >> 16;

        i9 = $i8 & 255;

        $i10 = i5 >> 8;

        i11 = $i10 & 255;

        i12 = i5 & 255;

        i13 = i63 - i9;

        i14 = i64 - i11;

        i15 = i65 - i12;

        $i71 = (int) -1;

        i66 = $i71;

     label10:
        if i66 > 1 goto label18;

        i16 = i66 + i58;

        if 0 > i16 goto label17;

        if i16 >= i1 goto label17;

        $i73 = (int) -1;

        i67 = $i73;

     label11:
        if i67 > 1 goto label17;

        i17 = i67 + i61;

        if 0 > i17 goto label16;

        if i17 >= i0 goto label16;

        if z2 == 0 goto label12;

        $r6 = <com.jhlabs.image.QuantizeFilter: int[] matrix>;

        $i47 = i66 + 1;

        $i48 = $i47 * 3;

        $i49 = $i48 - i67;

        $i50 = $i49 + 1;

        i68 = $r6[$i50];

        goto label13;

     label12:
        $r4 = <com.jhlabs.image.QuantizeFilter: int[] matrix>;

        $i18 = i66 + 1;

        $i19 = $i18 * 3;

        $i20 = $i19 + i67;

        $i21 = $i20 + 1;

        i68 = $r4[$i21];

     label13:
        if i68 == 0 goto label16;

        if z2 == 0 goto label14;

        $i69 = i59 - i67;

        goto label15;

     label14:
        $i69 = i59 + i67;

     label15:
        $i40 = r1[$i69];

        $i22 = $i40 >> 16;

        $i41 = $i22 & 255;

        $i23 = $i40 >> 8;

        $i42 = $i23 & 255;

        $i43 = $i40 & 255;

        $i25 = i13 * i68;

        $i24 = r5.<com.jhlabs.image.QuantizeFilter: int sum>;

        $i26 = $i25 / $i24;

        $i44 = $i41 + $i26;

        $i28 = i14 * i68;

        $i27 = r5.<com.jhlabs.image.QuantizeFilter: int sum>;

        $i29 = $i28 / $i27;

        $i45 = $i42 + $i29;

        $i31 = i15 * i68;

        $i30 = r5.<com.jhlabs.image.QuantizeFilter: int sum>;

        $i32 = $i31 / $i30;

        $i46 = $i43 + $i32;

        $i33 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i44);

        $i34 = $i33 << 16;

        $i35 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i45);

        $i36 = $i35 << 8;

        $i37 = $i34 | $i36;

        $i38 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i46);

        $i39 = $i37 | $i38;

        r1[$i69] = $i39;

     label16:
        i67 = i67 + 1;

        goto label11;

     label17:
        i66 = i66 + 1;

        goto label10;

     label18:
        i59 = i59 + b60;

        i61 = i61 + 1;

        goto label09;

     label19:
        i58 = i58 + 1;

        goto label04;

     label20:
        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        java.awt.Rectangle r3;
        com.jhlabs.image.QuantizeFilter r1;
        int[] r0, r2;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;

        r1 := @this: com.jhlabs.image.QuantizeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.awt.Rectangle;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        $i3 = r1.<com.jhlabs.image.QuantizeFilter: int numColors>;

        $z1 = r1.<com.jhlabs.image.QuantizeFilter: boolean dither>;

        $z0 = r1.<com.jhlabs.image.QuantizeFilter: boolean serpentine>;

        virtualinvoke r1.<com.jhlabs.image.QuantizeFilter: void quantize(int[],int[],int,int,int,boolean,boolean)>(r2, r0, i0, i1, $i3, $z1, $z0);

        return r0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.QuantizeFilter r0;

        r0 := @this: com.jhlabs.image.QuantizeFilter;

        return "Colors/Quantize...";
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[9];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 7;

        $r0[6] = 3;

        $r0[7] = 5;

        $r0[8] = 1;

        <com.jhlabs.image.QuantizeFilter: int[] matrix> = $r0;

        return;
    }
}
