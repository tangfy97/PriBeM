public abstract class com.jhlabs.image.PointFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    protected boolean canFilterIndexColorModel;

    public void <init>()
    {
        com.jhlabs.image.PointFilter r0;

        r0 := @this: com.jhlabs.image.PointFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.PointFilter: boolean canFilterIndexColorModel> = 0;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        com.jhlabs.image.PointFilter r3;
        java.awt.image.BufferedImage r0, r5;
        java.awt.image.WritableRaster $r1, $r2;

        r3 := @this: com.jhlabs.image.PointFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        if r5 != null goto label1;

        r5 = virtualinvoke r3.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $r2 = virtualinvoke r5.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke r3.<com.jhlabs.image.PointFilter: void setDimensions(int,int)>($i0, $i1);

        $r4 = newarray (int)[$i0];

        i7 = 0;

     label2:
        if i7 >= $i1 goto label9;

        if $i2 != 2 goto label5;

        virtualinvoke $r1.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(0, i7, $i0, 1, $r4);

        i8 = 0;

     label3:
        if i8 >= $i0 goto label4;

        $i5 = $r4[i8];

        $i6 = virtualinvoke r3.<com.jhlabs.image.PointFilter: int filterRGB(int,int,int)>(i8, i7, $i5);

        $r4[i8] = $i6;

        i8 = i8 + 1;

        goto label3;

     label4:
        virtualinvoke $r2.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(0, i7, $i0, 1, $r4);

        goto label8;

     label5:
        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, i7, $i0, 1, $r4, 0, $i0);

        i9 = 0;

     label6:
        if i9 >= $i0 goto label7;

        $i3 = $r4[i9];

        $i4 = virtualinvoke r3.<com.jhlabs.image.PointFilter: int filterRGB(int,int,int)>(i9, i7, $i3);

        $r4[i9] = $i4;

        i9 = i9 + 1;

        goto label6;

     label7:
        virtualinvoke r5.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, i7, $i0, 1, $r4, 0, $i0);

     label8:
        i7 = i7 + 1;

        goto label2;

     label9:
        return r5;
    }

    public void setDimensions(int, int)
    {
        int i0, i1;
        com.jhlabs.image.PointFilter r0;

        r0 := @this: com.jhlabs.image.PointFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public abstract int filterRGB(int, int, int);
}
