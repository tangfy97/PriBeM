public class org.codehaus.groovy.syntax.Types extends java.lang.Object
{
    public static final int EOF;
    public static final int UNKNOWN;
    public static final int NEWLINE;
    public static final int LEFT_CURLY_BRACE;
    public static final int RIGHT_CURLY_BRACE;
    public static final int LEFT_SQUARE_BRACKET;
    public static final int RIGHT_SQUARE_BRACKET;
    public static final int LEFT_PARENTHESIS;
    public static final int RIGHT_PARENTHESIS;
    public static final int DOT;
    public static final int DOT_DOT;
    public static final int DOT_DOT_DOT;
    public static final int NAVIGATE;
    public static final int FIND_REGEX;
    public static final int MATCH_REGEX;
    public static final int REGEX_PATTERN;
    public static final int EQUAL;
    public static final int EQUALS;
    public static final int ASSIGN;
    public static final int COMPARE_NOT_EQUAL;
    public static final int COMPARE_IDENTICAL;
    public static final int COMPARE_NOT_IDENTICAL;
    public static final int COMPARE_EQUAL;
    public static final int COMPARE_LESS_THAN;
    public static final int COMPARE_LESS_THAN_EQUAL;
    public static final int COMPARE_GREATER_THAN;
    public static final int COMPARE_GREATER_THAN_EQUAL;
    public static final int COMPARE_TO;
    public static final int NOT;
    public static final int LOGICAL_OR;
    public static final int LOGICAL_AND;
    public static final int LOGICAL_OR_EQUAL;
    public static final int LOGICAL_AND_EQUAL;
    public static final int PLUS;
    public static final int MINUS;
    public static final int MULTIPLY;
    public static final int DIVIDE;
    public static final int INTDIV;
    public static final int MOD;
    public static final int STAR_STAR;
    public static final int POWER;
    public static final int PLUS_EQUAL;
    public static final int MINUS_EQUAL;
    public static final int MULTIPLY_EQUAL;
    public static final int DIVIDE_EQUAL;
    public static final int INTDIV_EQUAL;
    public static final int MOD_EQUAL;
    public static final int POWER_EQUAL;
    public static final int PLUS_PLUS;
    public static final int PREFIX_PLUS_PLUS;
    public static final int POSTFIX_PLUS_PLUS;
    public static final int PREFIX_PLUS;
    public static final int MINUS_MINUS;
    public static final int PREFIX_MINUS_MINUS;
    public static final int POSTFIX_MINUS_MINUS;
    public static final int PREFIX_MINUS;
    public static final int LEFT_SHIFT;
    public static final int RIGHT_SHIFT;
    public static final int RIGHT_SHIFT_UNSIGNED;
    public static final int LEFT_SHIFT_EQUAL;
    public static final int RIGHT_SHIFT_EQUAL;
    public static final int RIGHT_SHIFT_UNSIGNED_EQUAL;
    public static final int STAR;
    public static final int COMMA;
    public static final int COLON;
    public static final int SEMICOLON;
    public static final int QUESTION;
    public static final int PIPE;
    public static final int DOUBLE_PIPE;
    public static final int BITWISE_OR;
    public static final int BITWISE_AND;
    public static final int BITWISE_XOR;
    public static final int BITWISE_OR_EQUAL;
    public static final int BITWISE_AND_EQUAL;
    public static final int BITWISE_XOR_EQUAL;
    public static final int BITWISE_NEGATION;
    public static final int STRING;
    public static final int IDENTIFIER;
    public static final int INTEGER_NUMBER;
    public static final int DECIMAL_NUMBER;
    public static final int KEYWORD_PRIVATE;
    public static final int KEYWORD_PROTECTED;
    public static final int KEYWORD_PUBLIC;
    public static final int KEYWORD_ABSTRACT;
    public static final int KEYWORD_FINAL;
    public static final int KEYWORD_NATIVE;
    public static final int KEYWORD_TRANSIENT;
    public static final int KEYWORD_VOLATILE;
    public static final int KEYWORD_SYNCHRONIZED;
    public static final int KEYWORD_STATIC;
    public static final int KEYWORD_DEF;
    public static final int KEYWORD_DEFMACRO;
    public static final int KEYWORD_CLASS;
    public static final int KEYWORD_INTERFACE;
    public static final int KEYWORD_MIXIN;
    public static final int KEYWORD_IMPLEMENTS;
    public static final int KEYWORD_EXTENDS;
    public static final int KEYWORD_THIS;
    public static final int KEYWORD_SUPER;
    public static final int KEYWORD_INSTANCEOF;
    public static final int KEYWORD_PROPERTY;
    public static final int KEYWORD_NEW;
    public static final int KEYWORD_PACKAGE;
    public static final int KEYWORD_IMPORT;
    public static final int KEYWORD_AS;
    public static final int KEYWORD_RETURN;
    public static final int KEYWORD_IF;
    public static final int KEYWORD_ELSE;
    public static final int KEYWORD_DO;
    public static final int KEYWORD_WHILE;
    public static final int KEYWORD_FOR;
    public static final int KEYWORD_IN;
    public static final int KEYWORD_BREAK;
    public static final int KEYWORD_CONTINUE;
    public static final int KEYWORD_SWITCH;
    public static final int KEYWORD_CASE;
    public static final int KEYWORD_DEFAULT;
    public static final int KEYWORD_TRY;
    public static final int KEYWORD_CATCH;
    public static final int KEYWORD_FINALLY;
    public static final int KEYWORD_THROW;
    public static final int KEYWORD_THROWS;
    public static final int KEYWORD_ASSERT;
    public static final int KEYWORD_VOID;
    public static final int KEYWORD_BOOLEAN;
    public static final int KEYWORD_BYTE;
    public static final int KEYWORD_SHORT;
    public static final int KEYWORD_INT;
    public static final int KEYWORD_LONG;
    public static final int KEYWORD_FLOAT;
    public static final int KEYWORD_DOUBLE;
    public static final int KEYWORD_CHAR;
    public static final int KEYWORD_TRUE;
    public static final int KEYWORD_FALSE;
    public static final int KEYWORD_NULL;
    public static final int KEYWORD_CONST;
    public static final int KEYWORD_GOTO;
    public static final int SYNTH_COMPILATION_UNIT;
    public static final int SYNTH_CLASS;
    public static final int SYNTH_INTERFACE;
    public static final int SYNTH_MIXIN;
    public static final int SYNTH_METHOD;
    public static final int SYNTH_PROPERTY;
    public static final int SYNTH_PARAMETER_DECLARATION;
    public static final int SYNTH_LIST;
    public static final int SYNTH_MAP;
    public static final int SYNTH_GSTRING;
    public static final int SYNTH_METHOD_CALL;
    public static final int SYNTH_CAST;
    public static final int SYNTH_BLOCK;
    public static final int SYNTH_CLOSURE;
    public static final int SYNTH_LABEL;
    public static final int SYNTH_TERNARY;
    public static final int SYNTH_TUPLE;
    public static final int SYNTH_VARIABLE_DECLARATION;
    public static final int GSTRING_START;
    public static final int GSTRING_END;
    public static final int GSTRING_EXPRESSION_START;
    public static final int GSTRING_EXPRESSION_END;
    public static final int ANY;
    public static final int NOT_EOF;
    public static final int GENERAL_END_OF_STATEMENT;
    public static final int ANY_END_OF_STATEMENT;
    public static final int ASSIGNMENT_OPERATOR;
    public static final int COMPARISON_OPERATOR;
    public static final int MATH_OPERATOR;
    public static final int LOGICAL_OPERATOR;
    public static final int RANGE_OPERATOR;
    public static final int REGEX_COMPARISON_OPERATOR;
    public static final int DEREFERENCE_OPERATOR;
    public static final int BITWISE_OPERATOR;
    public static final int PREFIX_OPERATOR;
    public static final int POSTFIX_OPERATOR;
    public static final int INFIX_OPERATOR;
    public static final int PREFIX_OR_INFIX_OPERATOR;
    public static final int PURE_PREFIX_OPERATOR;
    public static final int KEYWORD;
    public static final int SYMBOL;
    public static final int LITERAL;
    public static final int NUMBER;
    public static final int SIGN;
    public static final int NAMED_VALUE;
    public static final int TRUTH_VALUE;
    public static final int PRIMITIVE_TYPE;
    public static final int CREATABLE_PRIMITIVE_TYPE;
    public static final int LOOP;
    public static final int RESERVED_KEYWORD;
    public static final int KEYWORD_IDENTIFIER;
    public static final int SYNTHETIC;
    public static final int TYPE_DECLARATION;
    public static final int DECLARATION_MODIFIER;
    public static final int TYPE_NAME;
    public static final int CREATABLE_TYPE_NAME;
    public static final int MATCHED_CONTAINER;
    public static final int LEFT_OF_MATCHED_CONTAINER;
    public static final int RIGHT_OF_MATCHED_CONTAINER;
    public static final int EXPRESSION;
    public static final int OPERATOR_EXPRESSION;
    public static final int SYNTH_EXPRESSION;
    public static final int KEYWORD_EXPRESSION;
    public static final int LITERAL_EXPRESSION;
    public static final int ARRAY_EXPRESSION;
    public static final int SIMPLE_EXPRESSION;
    public static final int COMPLEX_EXPRESSION;
    public static final int PARAMETER_TERMINATORS;
    public static final int ARRAY_ITEM_TERMINATORS;
    public static final int TYPE_LIST_TERMINATORS;
    public static final int OPTIONAL_DATATYPE_FOLLOWERS;
    public static final int SWITCH_BLOCK_TERMINATORS;
    public static final int SWITCH_ENTRIES;
    public static final int METHOD_CALL_STARTERS;
    public static final int UNSAFE_OVER_NEWLINES;
    public static final int PRECLUDES_CAST_OPERATOR;
    private static final java.util.Map TEXTS;
    private static final java.util.Map LOOKUP;
    private static final java.util.Map DESCRIPTIONS;

    public void <init>()
    {
        org.codehaus.groovy.syntax.Types r0;

        r0 := @this: org.codehaus.groovy.syntax.Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean ofType(int, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30;
        int i0, i1;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != i1 goto label001;

        return 1;

     label001:
        lookupswitch(i0)
        {
            case 1000: goto label002;
            case 1001: goto label003;
            case 1002: goto label006;
            case 1003: goto label009;
            case 1100: goto label012;
            case 1101: goto label019;
            case 1102: goto label022;
            case 1103: goto label028;
            case 1104: goto label036;
            case 1105: goto label040;
            case 1106: goto label044;
            case 1107: goto label031;
            case 1200: goto label048;
            case 1210: goto label053;
            case 1220: goto label056;
            case 1230: goto label067;
            case 1235: goto label050;
            case 1300: goto label070;
            case 1301: goto label073;
            case 1310: goto label076;
            case 1320: goto label079;
            case 1325: goto label083;
            case 1330: goto label086;
            case 1331: goto label089;
            case 1340: goto label094;
            case 1341: goto label098;
            case 1350: goto label101;
            case 1360: goto label104;
            case 1361: goto label107;
            case 1370: goto label110;
            case 1400: goto label113;
            case 1410: goto label116;
            case 1420: goto label093;
            case 1430: goto label097;
            case 1500: goto label119;
            case 1501: goto label122;
            case 1502: goto label125;
            case 1900: goto label177;
            case 1901: goto label162;
            case 1902: goto label165;
            case 1903: goto label168;
            case 1904: goto label171;
            case 1905: goto label174;
            case 1910: goto label184;
            case 1911: goto label182;
            case 2000: goto label128;
            case 2001: goto label132;
            case 2002: goto label136;
            case 2003: goto label139;
            case 2004: goto label142;
            case 2005: goto label143;
            case 2006: goto label147;
            case 2007: goto label151;
            case 2008: goto label157;
            default: goto label187;
        };

     label002:
        return 1;

     label003:
        if i1 < 0 goto label004;

        if i1 > 830 goto label004;

        $z2 = 1;

        goto label005;

     label004:
        $z2 = 0;

     label005:
        return $z2;

     label006:
        lookupswitch(i1)
        {
            case -1: goto label007;
            case 5: goto label007;
            case 320: goto label007;
            default: goto label008;
        };

     label007:
        return 1;

     label008:
        goto label187;

     label009:
        lookupswitch(i1)
        {
            case -1: goto label010;
            case 5: goto label010;
            case 20: goto label010;
            case 320: goto label010;
            default: goto label011;
        };

     label010:
        return 1;

     label011:
        goto label187;

     label012:
        if i1 == 100 goto label016;

        if i1 < 210 goto label013;

        if i1 <= 216 goto label016;

     label013:
        if i1 < 166 goto label014;

        if i1 <= 168 goto label016;

     label014:
        if i1 < 285 goto label015;

        if i1 <= 287 goto label016;

     label015:
        if i1 < 350 goto label017;

        if i1 > 352 goto label017;

     label016:
        $z3 = 1;

        goto label018;

     label017:
        $z3 = 0;

     label018:
        return $z3;

     label019:
        if i1 < 120 goto label020;

        if i1 > 128 goto label020;

        $z4 = 1;

        goto label021;

     label020:
        $z4 = 0;

     label021:
        return $z4;

     label022:
        if i1 < 200 goto label023;

        if i1 <= 282 goto label025;

     label023:
        if i1 < 160 goto label024;

        if i1 <= 164 goto label025;

     label024:
        if i1 < 340 goto label026;

        if i1 > 342 goto label026;

     label025:
        $z5 = 1;

        goto label027;

     label026:
        $z5 = 0;

     label027:
        return $z5;

     label028:
        if i1 < 160 goto label029;

        if i1 > 164 goto label029;

        $z6 = 1;

        goto label030;

     label029:
        $z6 = 0;

     label030:
        return $z6;

     label031:
        if i1 < 340 goto label032;

        if i1 <= 342 goto label033;

     label032:
        if i1 != 97 goto label034;

     label033:
        $z7 = 1;

        goto label035;

     label034:
        $z7 = 0;

     label035:
        return $z7;

     label036:
        if i1 == 75 goto label037;

        if i1 != 77 goto label038;

     label037:
        $z8 = 1;

        goto label039;

     label038:
        $z8 = 0;

     label039:
        return $z8;

     label040:
        if i1 == 90 goto label041;

        if i1 != 94 goto label042;

     label041:
        $z9 = 1;

        goto label043;

     label042:
        $z9 = 0;

     label043:
        return $z9;

     label044:
        if i1 == 70 goto label045;

        if i1 != 80 goto label046;

     label045:
        $z10 = 1;

        goto label047;

     label046:
        $z10 = 0;

     label047:
        return $z10;

     label048:
        lookupswitch(i1)
        {
            case 201: goto label049;
            case 250: goto label049;
            case 260: goto label049;
            default: goto label050;
        };

     label049:
        return 1;

     label050:
        lookupswitch(i1)
        {
            case 97: goto label051;
            case 160: goto label051;
            case 251: goto label051;
            case 253: goto label051;
            case 261: goto label051;
            case 263: goto label051;
            case 815: goto label051;
            default: goto label052;
        };

     label051:
        return 1;

     label052:
        goto label187;

     label053:
        lookupswitch(i1)
        {
            case 250: goto label054;
            case 252: goto label054;
            case 260: goto label054;
            case 262: goto label054;
            default: goto label055;
        };

     label054:
        return 1;

     label055:
        goto label187;

     label056:
        lookupswitch(i1)
        {
            case 70: goto label057;
            case 75: goto label057;
            case 77: goto label057;
            case 80: goto label057;
            case 90: goto label057;
            case 94: goto label057;
            case 162: goto label057;
            case 164: goto label057;
            case 280: goto label057;
            case 281: goto label057;
            case 282: goto label057;
            case 340: goto label057;
            case 341: goto label057;
            case 342: goto label057;
            case 544: goto label057;
            default: goto label058;
        };

     label057:
        return 1;

     label058:
        if i1 < 120 goto label059;

        if i1 <= 128 goto label064;

     label059:
        if i1 < 200 goto label060;

        if i1 <= 215 goto label064;

     label060:
        if i1 == 100 goto label064;

        if i1 < 210 goto label061;

        if i1 <= 216 goto label064;

     label061:
        if i1 < 166 goto label062;

        if i1 <= 168 goto label064;

     label062:
        if i1 < 285 goto label063;

        if i1 <= 287 goto label064;

     label063:
        if i1 < 350 goto label065;

        if i1 > 352 goto label065;

     label064:
        $z11 = 1;

        goto label066;

     label065:
        $z11 = 0;

     label066:
        return $z11;

     label067:
        lookupswitch(i1)
        {
            case 200: goto label068;
            case 201: goto label068;
            case 206: goto label068;
            case 253: goto label068;
            case 263: goto label068;
            default: goto label069;
        };

     label068:
        return 1;

     label069:
        goto label187;

     label070:
        if i1 < 500 goto label071;

        if i1 > 701 goto label071;

        $z12 = 1;

        goto label072;

     label071:
        $z12 = 0;

     label072:
        return $z12;

     label073:
        if i1 < 5 goto label074;

        if i1 > 340 goto label074;

        $z13 = 1;

        goto label075;

     label074:
        $z13 = 0;

     label075:
        return $z13;

     label076:
        if i1 < 400 goto label077;

        if i1 > 451 goto label077;

        $z14 = 1;

        goto label078;

     label077:
        $z14 = 0;

     label078:
        return $z14;

     label079:
        if i1 == 450 goto label080;

        if i1 != 451 goto label081;

     label080:
        $z15 = 1;

        goto label082;

     label081:
        $z15 = 0;

     label082:
        return $z15;

     label083:
        lookupswitch(i1)
        {
            case 200: goto label084;
            case 201: goto label084;
            default: goto label085;
        };

     label084:
        return 1;

     label085:
        goto label187;

     label086:
        if i1 < 610 goto label087;

        if i1 > 612 goto label087;

        $z16 = 1;

        goto label088;

     label087:
        $z16 = 0;

     label088:
        return $z16;

     label089:
        if i1 == 610 goto label090;

        if i1 != 611 goto label091;

     label090:
        $z17 = 1;

        goto label092;

     label091:
        $z17 = 0;

     label092:
        return $z17;

     label093:
        if i1 != 440 goto label094;

        return 1;

     label094:
        if i1 < 600 goto label095;

        if i1 > 608 goto label095;

        $z18 = 1;

        goto label096;

     label095:
        $z18 = 0;

     label096:
        return $z18;

     label097:
        if i1 != 440 goto label098;

        return 1;

     label098:
        if i1 < 601 goto label099;

        if i1 > 608 goto label099;

        $z19 = 1;

        goto label100;

     label099:
        $z19 = 0;

     label100:
        return $z19;

     label101:
        tableswitch(i1)
        {
            case 570: goto label102;
            case 571: goto label102;
            case 572: goto label102;
            default: goto label103;
        };

     label102:
        return 1;

     label103:
        goto label187;

     label104:
        if i1 < 700 goto label105;

        if i1 > 701 goto label105;

        $z20 = 1;

        goto label106;

     label105:
        $z20 = 0;

     label106:
        return $z20;

     label107:
        lookupswitch(i1)
        {
            case 530: goto label108;
            case 531: goto label108;
            case 532: goto label108;
            case 533: goto label108;
            case 539: goto label108;
            case 545: goto label108;
            case 573: goto label108;
            default: goto label109;
        };

     label108:
        return 1;

     label109:
        goto label187;

     label110:
        if i1 < 800 goto label111;

        if i1 > 830 goto label111;

        $z21 = 1;

        goto label112;

     label111:
        $z21 = 0;

     label112:
        return $z21;

     label113:
        if i1 < 531 goto label114;

        if i1 > 533 goto label114;

        $z22 = 1;

        goto label115;

     label114:
        $z22 = 0;

     label115:
        return $z22;

     label116:
        if i1 < 500 goto label117;

        if i1 > 521 goto label117;

        $z23 = 1;

        goto label118;

     label117:
        $z23 = 0;

     label118:
        return $z23;

     label119:
        lookupswitch(i1)
        {
            case 10: goto label120;
            case 20: goto label120;
            case 30: goto label120;
            case 40: goto label120;
            case 50: goto label120;
            case 60: goto label120;
            default: goto label121;
        };

     label120:
        return 1;

     label121:
        goto label187;

     label122:
        lookupswitch(i1)
        {
            case 10: goto label123;
            case 30: goto label123;
            case 50: goto label123;
            default: goto label124;
        };

     label123:
        return 1;

     label124:
        goto label187;

     label125:
        lookupswitch(i1)
        {
            case 20: goto label126;
            case 40: goto label126;
            case 60: goto label126;
            default: goto label127;
        };

     label126:
        return 1;

     label127:
        goto label187;

     label128:
        if i1 == 60 goto label129;

        if i1 != 300 goto label130;

     label129:
        $z24 = 1;

        goto label131;

     label130:
        $z24 = 0;

     label131:
        return $z24;

     label132:
        if i1 == 40 goto label133;

        if i1 != 300 goto label134;

     label133:
        $z25 = 1;

        goto label135;

     label134:
        $z25 = 0;

     label135:
        return $z25;

     label136:
        lookupswitch(i1)
        {
            case 10: goto label137;
            case 300: goto label137;
            case 540: goto label137;
            case 584: goto label137;
            default: goto label138;
        };

     label137:
        return 1;

     label138:
        goto label187;

     label139:
        lookupswitch(i1)
        {
            case 30: goto label140;
            case 70: goto label140;
            case 440: goto label140;
            default: goto label141;
        };

     label140:
        return 1;

     label141:
        goto label187;

     label142:
        if i1 != 20 goto label143;

        return 1;

     label143:
        if i1 == 577 goto label144;

        if i1 != 578 goto label145;

     label144:
        $z26 = 1;

        goto label146;

     label145:
        $z26 = 0;

     label146:
        return $z26;

     label147:
        if i1 < 400 goto label148;

        if i1 > 451 goto label148;

        return 1;

     label148:
        lookupswitch(i1)
        {
            case 50: goto label149;
            case 546: goto label149;
            case 812: goto label149;
            case 901: goto label149;
            default: goto label150;
        };

     label149:
        return 1;

     label150:
        goto label187;

     label151:
        $z1 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>(i1, 1301);

        if $z1 == 0 goto label154;

        lookupswitch(i1)
        {
            case 10: goto label152;
            case 30: goto label152;
            case 50: goto label152;
            case 97: goto label152;
            case 160: goto label152;
            case 200: goto label152;
            case 201: goto label152;
            case 250: goto label152;
            case 260: goto label152;
            default: goto label153;
        };

     label152:
        return 1;

     label153:
        return 0;

     label154:
        lookupswitch(i1)
        {
            case 544: goto label155;
            case 902: goto label155;
            case 903: goto label155;
            case 904: goto label155;
            default: goto label156;
        };

     label155:
        return 0;

     label156:
        return 1;

     label157:
        lookupswitch(i1)
        {
            case 50: goto label158;
            case 200: goto label158;
            case 201: goto label158;
            case 251: goto label158;
            case 253: goto label158;
            case 261: goto label158;
            case 263: goto label158;
            default: goto label159;
        };

     label158:
        return 0;

     label159:
        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>(i1, 1911);

        if $z0 != 0 goto label160;

        $z27 = 1;

        goto label161;

     label160:
        $z27 = 0;

     label161:
        return $z27;

     label162:
        if i1 < 70 goto label163;

        if i1 > 282 goto label163;

        $z28 = 1;

        goto label164;

     label163:
        $z28 = 0;

     label164:
        return $z28;

     label165:
        tableswitch(i1)
        {
            case 815: goto label166;
            case 816: goto label167;
            case 817: goto label166;
            case 818: goto label167;
            case 819: goto label166;
            default: goto label167;
        };

     label166:
        return 1;

     label167:
        goto label187;

     label168:
        lookupswitch(i1)
        {
            case 542: goto label169;
            case 543: goto label169;
            case 544: goto label169;
            case 546: goto label169;
            case 610: goto label169;
            case 611: goto label169;
            case 612: goto label169;
            default: goto label170;
        };

     label169:
        return 1;

     label170:
        goto label187;

     label171:
        if i1 < 400 goto label172;

        if i1 > 451 goto label172;

        $z29 = 1;

        goto label173;

     label172:
        $z29 = 0;

     label173:
        return $z29;

     label174:
        if i1 != 30 goto label175;

        $z30 = 1;

        goto label176;

     label175:
        $z30 = 0;

     label176:
        return $z30;

     label177:
        if i1 < 70 goto label178;

        if i1 > 282 goto label178;

        return 1;

     label178:
        if i1 < 400 goto label179;

        if i1 > 451 goto label179;

        return 1;

     label179:
        lookupswitch(i1)
        {
            case 30: goto label180;
            case 542: goto label180;
            case 543: goto label180;
            case 544: goto label180;
            case 546: goto label180;
            case 610: goto label180;
            case 611: goto label180;
            case 612: goto label180;
            case 812: goto label180;
            case 815: goto label180;
            case 817: goto label180;
            case 819: goto label180;
            default: goto label181;
        };

     label180:
        return 1;

     label181:
        goto label187;

     label182:
        lookupswitch(i1)
        {
            case 546: goto label183;
            case 810: goto label183;
            case 811: goto label183;
            case 812: goto label183;
            case 814: goto label183;
            case 817: goto label183;
            case 819: goto label183;
            case 830: goto label183;
            default: goto label184;
        };

     label183:
        return 1;

     label184:
        if i1 < 400 goto label185;

        if i1 > 451 goto label185;

        return 1;

     label185:
        lookupswitch(i1)
        {
            case 542: goto label186;
            case 543: goto label186;
            case 610: goto label186;
            case 611: goto label186;
            case 612: goto label186;
            default: goto label187;
        };

     label186:
        return 1;

     label187:
        return 0;
    }

    public static boolean canMean(int, int)
    {
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label01;

        return 1;

     label01:
        lookupswitch(i1)
        {
            case 440: goto label02;
            case 801: goto label05;
            case 802: goto label05;
            case 803: goto label05;
            case 804: goto label05;
            case 805: goto label05;
            case 806: goto label02;
            case 810: goto label08;
            case 811: goto label08;
            case 815: goto label11;
            case 816: goto label14;
            case 817: goto label14;
            case 818: goto label17;
            case 830: goto label20;
            default: goto label23;
        };

     label02:
        lookupswitch(i0)
        {
            case 440: goto label03;
            case 530: goto label03;
            case 531: goto label03;
            case 532: goto label03;
            case 533: goto label03;
            case 539: goto label03;
            default: goto label04;
        };

     label03:
        return 1;

     label04:
        goto label23;

     label05:
        if i0 != 440 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        return $z0;

     label08:
        if i0 != 30 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        return $z1;

     label11:
        if i0 != 50 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        return $z2;

     label14:
        if i0 != 10 goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        return $z3;

     label17:
        if i0 != 310 goto label18;

        $z4 = 1;

        goto label19;

     label18:
        $z4 = 0;

     label19:
        return $z4;

     label20:
        if i0 != 440 goto label21;

        $z5 = 1;

        goto label22;

     label21:
        $z5 = 0;

     label22:
        return $z5;

     label23:
        return 0;
    }

    public static void makePrefix(org.codehaus.groovy.syntax.CSTNode, boolean)
    {
        org.codehaus.groovy.syntax.CSTNode r0;
        org.codehaus.groovy.GroovyBugError $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.String $r6;
        boolean z0;

        r0 := @parameter0: org.codehaus.groovy.syntax.CSTNode;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        lookupswitch($i0)
        {
            case 200: goto label1;
            case 201: goto label2;
            case 250: goto label3;
            case 260: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(253);

        goto label6;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(263);

        goto label6;

     label3:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(251);

        goto label6;

     label4:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(261);

        goto label6;

     label5:
        if z0 == 0 goto label6;

        $r1 = new org.codehaus.groovy.GroovyBugError;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot convert to prefix for type [");

        $i1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r6);

        throw $r1;

     label6:
        return;
    }

    public static void makePostfix(org.codehaus.groovy.syntax.CSTNode, boolean)
    {
        org.codehaus.groovy.syntax.CSTNode r0;
        org.codehaus.groovy.GroovyBugError $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.String $r6;
        boolean z0;

        r0 := @parameter0: org.codehaus.groovy.syntax.CSTNode;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        lookupswitch($i0)
        {
            case 250: goto label1;
            case 260: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(252);

        goto label4;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(262);

        goto label4;

     label3:
        if z0 == 0 goto label4;

        $r1 = new org.codehaus.groovy.GroovyBugError;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot convert to postfix for type [");

        $i1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r6);

        throw $r1;

     label4:
        return;
    }

    public static int getPrecedence(int, boolean)
    {
        org.codehaus.groovy.GroovyBugError $r1;
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        lookupswitch(i0)
        {
            case 30: goto label18;
            case 50: goto label01;
            case 70: goto label19;
            case 75: goto label09;
            case 77: goto label09;
            case 80: goto label19;
            case 90: goto label08;
            case 94: goto label08;
            case 97: goto label13;
            case 100: goto label02;
            case 120: goto label08;
            case 121: goto label07;
            case 122: goto label07;
            case 123: goto label08;
            case 124: goto label08;
            case 125: goto label08;
            case 126: goto label08;
            case 127: goto label08;
            case 128: goto label08;
            case 160: goto label13;
            case 162: goto label04;
            case 164: goto label05;
            case 166: goto label02;
            case 168: goto label02;
            case 200: goto label11;
            case 201: goto label11;
            case 202: goto label12;
            case 203: goto label12;
            case 204: goto label12;
            case 205: goto label12;
            case 206: goto label17;
            case 210: goto label02;
            case 211: goto label02;
            case 212: goto label02;
            case 213: goto label02;
            case 214: goto label02;
            case 215: goto label02;
            case 216: goto label02;
            case 250: goto label15;
            case 251: goto label15;
            case 252: goto label15;
            case 253: goto label16;
            case 260: goto label15;
            case 261: goto label15;
            case 262: goto label15;
            case 263: goto label16;
            case 280: goto label10;
            case 281: goto label10;
            case 282: goto label10;
            case 285: goto label02;
            case 286: goto label02;
            case 287: goto label02;
            case 330: goto label03;
            case 340: goto label06;
            case 341: goto label06;
            case 342: goto label06;
            case 350: goto label02;
            case 351: goto label02;
            case 352: goto label02;
            case 544: goto label08;
            case 546: goto label20;
            case 804: goto label18;
            case 815: goto label14;
            default: goto label21;
        };

     label01:
        return 0;

     label02:
        return 5;

     label03:
        return 10;

     label04:
        return 15;

     label05:
        return 20;

     label06:
        return 22;

     label07:
        return 24;

     label08:
        return 25;

     label09:
        return 30;

     label10:
        return 35;

     label11:
        return 40;

     label12:
        return 45;

     label13:
        return 50;

     label14:
        return 55;

     label15:
        return 65;

     label16:
        return 70;

     label17:
        return 72;

     label18:
        return 75;

     label19:
        return 80;

     label20:
        return 85;

     label21:
        if z0 == 0 goto label22;

        $r1 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r1.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("precedence requested for non-operator");

        throw $r1;

     label22:
        $i2 = (int) -1;

        return $i2;
    }

    public static int lookup(java.lang.String, int)
    {
        java.lang.Integer $r4;
        java.util.Map $r1, $r2;
        int $i0, i1, i2;
        java.lang.Object $r3;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i2 = 0;

        $r1 = <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i2 = $i0;

        if i1 == 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>($i0, i1);

        if $z1 != 0 goto label1;

        i2 = 0;

     label1:
        return i2;
    }

    public static int lookupKeyword(java.lang.String)
    {
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.codehaus.groovy.syntax.Types: int lookup(java.lang.String,int)>(r0, 1300);

        return $i0;
    }

    public static int lookupSymbol(java.lang.String)
    {
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.codehaus.groovy.syntax.Types: int lookup(java.lang.String,int)>(r0, 1301);

        return $i0;
    }

    public static java.lang.String getText(int)
    {
        java.util.Map $r1, $r2;
        int i0;
        java.lang.Object $r3;
        java.lang.String r4;
        java.lang.Integer $r0;
        boolean $z0;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        r4 = "";

        $r1 = <org.codehaus.groovy.syntax.Types: java.util.Map TEXTS>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <org.codehaus.groovy.syntax.Types: java.util.Map TEXTS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (java.lang.String) $r3;

     label1:
        return r4;
    }

    private static void addTranslation(java.lang.String, int)
    {
        java.util.Map $r2, $r3;
        int i0;
        java.lang.String r1;
        java.lang.Integer $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = <org.codehaus.groovy.syntax.Types: java.util.Map TEXTS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r1);

        $r3 = <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return;
    }

    public static java.lang.String getDescription(int)
    {
        java.util.Map $r1, $r2;
        int i0;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Integer $r0;
        boolean $z0;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r1 = <org.codehaus.groovy.syntax.Types: java.util.Map DESCRIPTIONS>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <org.codehaus.groovy.syntax.Types: java.util.Map DESCRIPTIONS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.lang.String) $r3;

        return $r4;

     label1:
        return "<>";
    }

    private static void addDescription(int, java.lang.String)
    {
        int i0;
        java.lang.String r1;
        java.lang.Integer $r0;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(java.lang.Integer,java.lang.String)>($r0, r1);

        return;
    }

    private static void addDescription(java.lang.Integer, java.lang.String)
    {
        java.lang.Integer r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        java.util.Map $r3, $r8;
        java.lang.String r0, $r7;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Integer;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(">");

        if $z1 == 0 goto label1;

        $r8 = <org.codehaus.groovy.syntax.Types: java.util.Map DESCRIPTIONS>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        goto label2;

     label1:
        $r3 = <org.codehaus.groovy.syntax.Types: java.util.Map DESCRIPTIONS>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.HashMap $r0, $r1, $r2;
        java.lang.Integer r10;
        java.util.Map $r3, $r8;
        java.lang.Object $r6, $r9;
        java.lang.String r7;
        boolean $z0;

        <org.codehaus.groovy.syntax.Types: int PRECLUDES_CAST_OPERATOR> = 2008;

        <org.codehaus.groovy.syntax.Types: int UNSAFE_OVER_NEWLINES> = 2007;

        <org.codehaus.groovy.syntax.Types: int METHOD_CALL_STARTERS> = 2006;

        <org.codehaus.groovy.syntax.Types: int SWITCH_ENTRIES> = 2005;

        <org.codehaus.groovy.syntax.Types: int SWITCH_BLOCK_TERMINATORS> = 2004;

        <org.codehaus.groovy.syntax.Types: int OPTIONAL_DATATYPE_FOLLOWERS> = 2003;

        <org.codehaus.groovy.syntax.Types: int TYPE_LIST_TERMINATORS> = 2002;

        <org.codehaus.groovy.syntax.Types: int ARRAY_ITEM_TERMINATORS> = 2001;

        <org.codehaus.groovy.syntax.Types: int PARAMETER_TERMINATORS> = 2000;

        <org.codehaus.groovy.syntax.Types: int COMPLEX_EXPRESSION> = 1911;

        <org.codehaus.groovy.syntax.Types: int SIMPLE_EXPRESSION> = 1910;

        <org.codehaus.groovy.syntax.Types: int ARRAY_EXPRESSION> = 1905;

        <org.codehaus.groovy.syntax.Types: int LITERAL_EXPRESSION> = 1904;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_EXPRESSION> = 1903;

        <org.codehaus.groovy.syntax.Types: int SYNTH_EXPRESSION> = 1902;

        <org.codehaus.groovy.syntax.Types: int OPERATOR_EXPRESSION> = 1901;

        <org.codehaus.groovy.syntax.Types: int EXPRESSION> = 1900;

        <org.codehaus.groovy.syntax.Types: int RIGHT_OF_MATCHED_CONTAINER> = 1502;

        <org.codehaus.groovy.syntax.Types: int LEFT_OF_MATCHED_CONTAINER> = 1501;

        <org.codehaus.groovy.syntax.Types: int MATCHED_CONTAINER> = 1500;

        <org.codehaus.groovy.syntax.Types: int CREATABLE_TYPE_NAME> = 1430;

        <org.codehaus.groovy.syntax.Types: int TYPE_NAME> = 1420;

        <org.codehaus.groovy.syntax.Types: int DECLARATION_MODIFIER> = 1410;

        <org.codehaus.groovy.syntax.Types: int TYPE_DECLARATION> = 1400;

        <org.codehaus.groovy.syntax.Types: int SYNTHETIC> = 1370;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_IDENTIFIER> = 1361;

        <org.codehaus.groovy.syntax.Types: int RESERVED_KEYWORD> = 1360;

        <org.codehaus.groovy.syntax.Types: int LOOP> = 1350;

        <org.codehaus.groovy.syntax.Types: int CREATABLE_PRIMITIVE_TYPE> = 1341;

        <org.codehaus.groovy.syntax.Types: int PRIMITIVE_TYPE> = 1340;

        <org.codehaus.groovy.syntax.Types: int TRUTH_VALUE> = 1331;

        <org.codehaus.groovy.syntax.Types: int NAMED_VALUE> = 1330;

        <org.codehaus.groovy.syntax.Types: int SIGN> = 1325;

        <org.codehaus.groovy.syntax.Types: int NUMBER> = 1320;

        <org.codehaus.groovy.syntax.Types: int LITERAL> = 1310;

        <org.codehaus.groovy.syntax.Types: int SYMBOL> = 1301;

        <org.codehaus.groovy.syntax.Types: int KEYWORD> = 1300;

        <org.codehaus.groovy.syntax.Types: int PURE_PREFIX_OPERATOR> = 1235;

        <org.codehaus.groovy.syntax.Types: int PREFIX_OR_INFIX_OPERATOR> = 1230;

        <org.codehaus.groovy.syntax.Types: int INFIX_OPERATOR> = 1220;

        <org.codehaus.groovy.syntax.Types: int POSTFIX_OPERATOR> = 1210;

        <org.codehaus.groovy.syntax.Types: int PREFIX_OPERATOR> = 1200;

        <org.codehaus.groovy.syntax.Types: int BITWISE_OPERATOR> = 1107;

        <org.codehaus.groovy.syntax.Types: int DEREFERENCE_OPERATOR> = 1106;

        <org.codehaus.groovy.syntax.Types: int REGEX_COMPARISON_OPERATOR> = 1105;

        <org.codehaus.groovy.syntax.Types: int RANGE_OPERATOR> = 1104;

        <org.codehaus.groovy.syntax.Types: int LOGICAL_OPERATOR> = 1103;

        <org.codehaus.groovy.syntax.Types: int MATH_OPERATOR> = 1102;

        <org.codehaus.groovy.syntax.Types: int COMPARISON_OPERATOR> = 1101;

        <org.codehaus.groovy.syntax.Types: int ASSIGNMENT_OPERATOR> = 1100;

        <org.codehaus.groovy.syntax.Types: int ANY_END_OF_STATEMENT> = 1003;

        <org.codehaus.groovy.syntax.Types: int GENERAL_END_OF_STATEMENT> = 1002;

        <org.codehaus.groovy.syntax.Types: int NOT_EOF> = 1001;

        <org.codehaus.groovy.syntax.Types: int ANY> = 1000;

        <org.codehaus.groovy.syntax.Types: int GSTRING_EXPRESSION_END> = 904;

        <org.codehaus.groovy.syntax.Types: int GSTRING_EXPRESSION_START> = 903;

        <org.codehaus.groovy.syntax.Types: int GSTRING_END> = 902;

        <org.codehaus.groovy.syntax.Types: int GSTRING_START> = 901;

        <org.codehaus.groovy.syntax.Types: int SYNTH_VARIABLE_DECLARATION> = 830;

        <org.codehaus.groovy.syntax.Types: int SYNTH_TUPLE> = 820;

        <org.codehaus.groovy.syntax.Types: int SYNTH_TERNARY> = 819;

        <org.codehaus.groovy.syntax.Types: int SYNTH_LABEL> = 818;

        <org.codehaus.groovy.syntax.Types: int SYNTH_CLOSURE> = 817;

        <org.codehaus.groovy.syntax.Types: int SYNTH_BLOCK> = 816;

        <org.codehaus.groovy.syntax.Types: int SYNTH_CAST> = 815;

        <org.codehaus.groovy.syntax.Types: int SYNTH_METHOD_CALL> = 814;

        <org.codehaus.groovy.syntax.Types: int SYNTH_GSTRING> = 812;

        <org.codehaus.groovy.syntax.Types: int SYNTH_MAP> = 811;

        <org.codehaus.groovy.syntax.Types: int SYNTH_LIST> = 810;

        <org.codehaus.groovy.syntax.Types: int SYNTH_PARAMETER_DECLARATION> = 806;

        <org.codehaus.groovy.syntax.Types: int SYNTH_PROPERTY> = 805;

        <org.codehaus.groovy.syntax.Types: int SYNTH_METHOD> = 804;

        <org.codehaus.groovy.syntax.Types: int SYNTH_MIXIN> = 803;

        <org.codehaus.groovy.syntax.Types: int SYNTH_INTERFACE> = 802;

        <org.codehaus.groovy.syntax.Types: int SYNTH_CLASS> = 801;

        <org.codehaus.groovy.syntax.Types: int SYNTH_COMPILATION_UNIT> = 800;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_GOTO> = 701;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CONST> = 700;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_NULL> = 612;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_FALSE> = 611;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_TRUE> = 610;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CHAR> = 608;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_DOUBLE> = 607;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_FLOAT> = 606;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_LONG> = 605;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_INT> = 604;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_SHORT> = 603;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_BYTE> = 602;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_BOOLEAN> = 601;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_VOID> = 600;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_ASSERT> = 585;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_THROWS> = 584;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_THROW> = 583;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_FINALLY> = 582;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CATCH> = 581;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_TRY> = 580;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_DEFAULT> = 578;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CASE> = 577;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_SWITCH> = 576;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CONTINUE> = 575;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_BREAK> = 574;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_IN> = 573;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_FOR> = 572;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_WHILE> = 571;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_DO> = 570;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_ELSE> = 562;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_IF> = 561;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_RETURN> = 560;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_AS> = 552;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_IMPORT> = 551;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_PACKAGE> = 550;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_NEW> = 546;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_PROPERTY> = 545;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_INSTANCEOF> = 544;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_SUPER> = 543;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_THIS> = 542;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_EXTENDS> = 541;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_IMPLEMENTS> = 540;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_MIXIN> = 533;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_INTERFACE> = 532;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_CLASS> = 531;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_DEFMACRO> = 539;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_DEF> = 530;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_STATIC> = 521;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_SYNCHRONIZED> = 520;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_VOLATILE> = 514;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_TRANSIENT> = 513;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_NATIVE> = 512;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_FINAL> = 511;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_ABSTRACT> = 510;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_PUBLIC> = 502;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_PROTECTED> = 501;

        <org.codehaus.groovy.syntax.Types: int KEYWORD_PRIVATE> = 500;

        <org.codehaus.groovy.syntax.Types: int DECIMAL_NUMBER> = 451;

        <org.codehaus.groovy.syntax.Types: int INTEGER_NUMBER> = 450;

        <org.codehaus.groovy.syntax.Types: int IDENTIFIER> = 440;

        <org.codehaus.groovy.syntax.Types: int STRING> = 400;

        <org.codehaus.groovy.syntax.Types: int BITWISE_NEGATION> = 97;

        <org.codehaus.groovy.syntax.Types: int BITWISE_XOR_EQUAL> = 352;

        <org.codehaus.groovy.syntax.Types: int BITWISE_AND_EQUAL> = 351;

        <org.codehaus.groovy.syntax.Types: int BITWISE_OR_EQUAL> = 350;

        <org.codehaus.groovy.syntax.Types: int BITWISE_XOR> = 342;

        <org.codehaus.groovy.syntax.Types: int BITWISE_AND> = 341;

        <org.codehaus.groovy.syntax.Types: int BITWISE_OR> = 340;

        <org.codehaus.groovy.syntax.Types: int DOUBLE_PIPE> = 162;

        <org.codehaus.groovy.syntax.Types: int PIPE> = 340;

        <org.codehaus.groovy.syntax.Types: int QUESTION> = 330;

        <org.codehaus.groovy.syntax.Types: int SEMICOLON> = 320;

        <org.codehaus.groovy.syntax.Types: int COLON> = 310;

        <org.codehaus.groovy.syntax.Types: int COMMA> = 300;

        <org.codehaus.groovy.syntax.Types: int STAR> = 202;

        <org.codehaus.groovy.syntax.Types: int RIGHT_SHIFT_UNSIGNED_EQUAL> = 287;

        <org.codehaus.groovy.syntax.Types: int RIGHT_SHIFT_EQUAL> = 286;

        <org.codehaus.groovy.syntax.Types: int LEFT_SHIFT_EQUAL> = 285;

        <org.codehaus.groovy.syntax.Types: int RIGHT_SHIFT_UNSIGNED> = 282;

        <org.codehaus.groovy.syntax.Types: int RIGHT_SHIFT> = 281;

        <org.codehaus.groovy.syntax.Types: int LEFT_SHIFT> = 280;

        <org.codehaus.groovy.syntax.Types: int PREFIX_MINUS> = 263;

        <org.codehaus.groovy.syntax.Types: int POSTFIX_MINUS_MINUS> = 262;

        <org.codehaus.groovy.syntax.Types: int PREFIX_MINUS_MINUS> = 261;

        <org.codehaus.groovy.syntax.Types: int MINUS_MINUS> = 260;

        <org.codehaus.groovy.syntax.Types: int PREFIX_PLUS> = 253;

        <org.codehaus.groovy.syntax.Types: int POSTFIX_PLUS_PLUS> = 252;

        <org.codehaus.groovy.syntax.Types: int PREFIX_PLUS_PLUS> = 251;

        <org.codehaus.groovy.syntax.Types: int PLUS_PLUS> = 250;

        <org.codehaus.groovy.syntax.Types: int POWER_EQUAL> = 216;

        <org.codehaus.groovy.syntax.Types: int MOD_EQUAL> = 215;

        <org.codehaus.groovy.syntax.Types: int INTDIV_EQUAL> = 214;

        <org.codehaus.groovy.syntax.Types: int DIVIDE_EQUAL> = 213;

        <org.codehaus.groovy.syntax.Types: int MULTIPLY_EQUAL> = 212;

        <org.codehaus.groovy.syntax.Types: int MINUS_EQUAL> = 211;

        <org.codehaus.groovy.syntax.Types: int PLUS_EQUAL> = 210;

        <org.codehaus.groovy.syntax.Types: int POWER> = 206;

        <org.codehaus.groovy.syntax.Types: int STAR_STAR> = 206;

        <org.codehaus.groovy.syntax.Types: int MOD> = 205;

        <org.codehaus.groovy.syntax.Types: int INTDIV> = 204;

        <org.codehaus.groovy.syntax.Types: int DIVIDE> = 203;

        <org.codehaus.groovy.syntax.Types: int MULTIPLY> = 202;

        <org.codehaus.groovy.syntax.Types: int MINUS> = 201;

        <org.codehaus.groovy.syntax.Types: int PLUS> = 200;

        <org.codehaus.groovy.syntax.Types: int LOGICAL_AND_EQUAL> = 168;

        <org.codehaus.groovy.syntax.Types: int LOGICAL_OR_EQUAL> = 166;

        <org.codehaus.groovy.syntax.Types: int LOGICAL_AND> = 164;

        <org.codehaus.groovy.syntax.Types: int LOGICAL_OR> = 162;

        <org.codehaus.groovy.syntax.Types: int NOT> = 160;

        <org.codehaus.groovy.syntax.Types: int COMPARE_TO> = 128;

        <org.codehaus.groovy.syntax.Types: int COMPARE_GREATER_THAN_EQUAL> = 127;

        <org.codehaus.groovy.syntax.Types: int COMPARE_GREATER_THAN> = 126;

        <org.codehaus.groovy.syntax.Types: int COMPARE_LESS_THAN_EQUAL> = 125;

        <org.codehaus.groovy.syntax.Types: int COMPARE_LESS_THAN> = 124;

        <org.codehaus.groovy.syntax.Types: int COMPARE_EQUAL> = 123;

        <org.codehaus.groovy.syntax.Types: int COMPARE_NOT_IDENTICAL> = 122;

        <org.codehaus.groovy.syntax.Types: int COMPARE_IDENTICAL> = 121;

        <org.codehaus.groovy.syntax.Types: int COMPARE_NOT_EQUAL> = 120;

        <org.codehaus.groovy.syntax.Types: int ASSIGN> = 100;

        <org.codehaus.groovy.syntax.Types: int EQUALS> = 100;

        <org.codehaus.groovy.syntax.Types: int EQUAL> = 100;

        <org.codehaus.groovy.syntax.Types: int REGEX_PATTERN> = 97;

        <org.codehaus.groovy.syntax.Types: int MATCH_REGEX> = 94;

        <org.codehaus.groovy.syntax.Types: int FIND_REGEX> = 90;

        <org.codehaus.groovy.syntax.Types: int NAVIGATE> = 80;

        <org.codehaus.groovy.syntax.Types: int DOT_DOT_DOT> = 77;

        <org.codehaus.groovy.syntax.Types: int DOT_DOT> = 75;

        <org.codehaus.groovy.syntax.Types: int DOT> = 70;

        <org.codehaus.groovy.syntax.Types: int RIGHT_PARENTHESIS> = 60;

        <org.codehaus.groovy.syntax.Types: int LEFT_PARENTHESIS> = 50;

        <org.codehaus.groovy.syntax.Types: int RIGHT_SQUARE_BRACKET> = 40;

        <org.codehaus.groovy.syntax.Types: int LEFT_SQUARE_BRACKET> = 30;

        <org.codehaus.groovy.syntax.Types: int RIGHT_CURLY_BRACE> = 20;

        <org.codehaus.groovy.syntax.Types: int LEFT_CURLY_BRACE> = 10;

        <org.codehaus.groovy.syntax.Types: int NEWLINE> = 5;

        <org.codehaus.groovy.syntax.Types: int UNKNOWN> = 0;

        <org.codehaus.groovy.syntax.Types: int EOF> = -1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.codehaus.groovy.syntax.Types: java.util.Map TEXTS> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP> = $r1;

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("\n", 5);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("{", 10);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("}", 20);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("[", 30);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("]", 40);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("(", 50);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(")", 60);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(".", 70);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("..", 75);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("...", 77);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("->", 80);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("=~", 90);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("==~", 94);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("~", 97);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("=", 100);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("!=", 120);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("===", 121);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("!==", 122);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("==", 123);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("<", 124);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("<=", 125);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">", 126);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">=", 127);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("<=>", 128);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("!", 160);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("||", 162);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("&&", 164);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("||=", 166);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("&&=", 168);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("+", 200);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("-", 201);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("*", 202);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("/", 203);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("\\", 204);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("%", 205);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("**", 206);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("+=", 210);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("-=", 211);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("*=", 212);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("/=", 213);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("\\=", 214);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("%=", 215);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("**=", 216);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("++", 250);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("--", 260);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("<<", 280);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">>", 281);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">>>", 282);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("<<=", 285);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">>=", 286);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(">>>=", 287);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("&", 341);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("^", 342);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("|=", 350);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("&=", 351);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("^=", 352);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(",", 300);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(":", 310);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>(";", 320);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("?", 330);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("|", 340);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("${}", 903);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("abstract", 510);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("as", 552);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("assert", 585);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("break", 574);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("case", 577);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("catch", 581);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("class", 531);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("const", 700);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("continue", 575);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("def", 530);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("defmacro", 530);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("default", 578);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("do", 570);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("else", 562);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("extends", 541);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("final", 511);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("finally", 582);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("for", 572);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("goto", 701);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("if", 561);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("in", 573);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("implements", 540);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("import", 551);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("instanceof", 544);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("interface", 532);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("mixin", 533);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("native", 512);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("new", 546);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("package", 550);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("private", 500);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("property", 545);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("protected", 501);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("public", 502);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("return", 560);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("static", 521);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("super", 543);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("switch", 576);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("synchronized", 520);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("this", 542);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("throw", 583);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("throws", 584);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("transient", 513);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("try", 580);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("volatile", 514);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("while", 571);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("true", 610);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("false", 611);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("null", 612);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("void", 600);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("boolean", 601);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("byte", 602);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("int", 604);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("short", 603);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("long", 605);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("float", 606);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("double", 607);

        staticinvoke <org.codehaus.groovy.syntax.Types: void addTranslation(java.lang.String,int)>("char", 608);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.codehaus.groovy.syntax.Types: java.util.Map DESCRIPTIONS> = $r2;

        $r3 = <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = <org.codehaus.groovy.syntax.Types: java.util.Map LOOKUP>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (java.lang.Integer) $r9;

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(java.lang.Integer,java.lang.String)>(r10, r7);

        goto label1;

     label2:
        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(5, "<newline>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(251, "<prefix ++>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(252, "<postfix ++>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(261, "<prefix -->");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(262, "<postfix -->");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(253, "<positive>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(263, "<negative>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(400, "<string literal>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(440, "<identifier>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(450, "<integer>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(451, "<decimal>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(800, "<compilation unit>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(801, "<class>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(802, "<interface>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(803, "<mixin>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(804, "<method>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(814, "<method call>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(805, "<property>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(806, "<parameter>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(810, "<list>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(811, "<map>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(820, "<tuple>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(812, "<gstring>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(815, "<cast>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(816, "<block>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(817, "<closure>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(819, "<ternary>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(818, "<label>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(830, "<variable declaration>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(901, "<start of gstring tokens>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(902, "<end of gstring tokens>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(903, "<start of gstring expression>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(904, "<end of gstring expression>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1100, "<assignment operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1101, "<comparison operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1102, "<math operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1103, "<logical operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1107, "<bitwise operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1104, "<range operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1105, "<regex comparison operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1106, "<dereference operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1200, "<prefix operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1210, "<postfix operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1220, "<infix operator>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1300, "<keyword>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1310, "<literal>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1320, "<number>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1330, "<named value>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1331, "<truth value>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1340, "<primitive type>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1341, "<creatable primitive type>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1350, "<loop>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1360, "<reserved keyword>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1370, "<synthetic>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1400, "<type declaration>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1410, "<declaration modifier>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1420, "<type name>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1430, "<creatable type name>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1500, "<matched container>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1501, "<left of matched container>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(1502, "<right of matched container>");

        staticinvoke <org.codehaus.groovy.syntax.Types: void addDescription(int,java.lang.String)>(2005, "<valid in a switch body>");

        return;
    }
}
