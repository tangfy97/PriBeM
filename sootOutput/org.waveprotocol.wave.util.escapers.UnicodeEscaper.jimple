public abstract class org.waveprotocol.wave.util.escapers.UnicodeEscaper extends java.lang.Object
{
    private static final int DEST_PAD;

    public void <init>()
    {
        org.waveprotocol.wave.util.escapers.UnicodeEscaper r0;

        r0 := @this: org.waveprotocol.wave.util.escapers.UnicodeEscaper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract char[] escape(int);

    protected int nextEscapeIndex(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        byte $b5;
        int i0, i1, $i2, $i3, i4;
        org.waveprotocol.wave.util.escapers.UnicodeEscaper r1;
        char[] $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.util.escapers.UnicodeEscaper;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i0;

     label1:
        if i4 >= i1 goto label5;

        $i2 = staticinvoke <org.waveprotocol.wave.util.escapers.UnicodeEscaper: int codePointAt(java.lang.CharSequence,int,int)>(r0, i4, i1);

        if $i2 < 0 goto label5;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: char[] escape(int)>($i2);

        if $r2 == null goto label2;

        goto label5;

     label2:
        $i3 = i4;

        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>($i2);

        if $z0 == 0 goto label3;

        $b5 = 2;

        goto label4;

     label3:
        $b5 = 1;

     label4:
        i4 = $i3 + $b5;

        goto label1;

     label5:
        return i4;
    }

    public java.lang.String escape(java.lang.String)
    {
        int $i0, $i1;
        org.waveprotocol.wave.util.escapers.UnicodeEscaper r1;
        java.lang.String r0, $r2;

        r1 := @this: org.waveprotocol.wave.util.escapers.UnicodeEscaper;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)>(r0, 0, $i0);

        if $i1 != $i0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)>(r0, $i1);

     label2:
        return $r2;
    }

    protected final java.lang.String escapeSlow(java.lang.String, int)
    {
        byte $b19;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, i16, i17, i18, i20, i21;
        java.lang.String r0, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        org.waveprotocol.wave.util.escapers.UnicodeEscaper r1;
        char[] $r2, r4;

        r1 := @this: org.waveprotocol.wave.util.escapers.UnicodeEscaper;

        r0 := @parameter0: java.lang.String;

        i16 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r4 = newarray (char)[1024];

        i17 = 0;

        i18 = 0;

     label01:
        if i16 >= $i0 goto label09;

        $i2 = staticinvoke <org.waveprotocol.wave.util.escapers.UnicodeEscaper: int codePointAt(java.lang.CharSequence,int,int)>(r0, i16, $i0);

        if $i2 >= 0 goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trailing high surrogate at end of input");

        throw $r3;

     label02:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: char[] escape(int)>($i2);

        $i14 = i16;

        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>($i2);

        if $z0 == 0 goto label03;

        $b19 = 2;

        goto label04;

     label03:
        $b19 = 1;

     label04:
        $i15 = $i14 + $b19;

        if $r2 == null goto label08;

        i3 = i16 - i18;

        $i5 = i17 + i3;

        $i4 = lengthof $r2;

        i6 = $i5 + $i4;

        $i7 = lengthof r4;

        if $i7 >= i6 goto label05;

        $i11 = $i0 - i16;

        $i12 = i6 + $i11;

        i13 = $i12 + 32;

        r4 = staticinvoke <org.waveprotocol.wave.util.escapers.UnicodeEscaper: char[] growBuffer(char[],int,int)>(r4, i17, i13);

     label05:
        if i3 <= 0 goto label06;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i18, i16, r4, i17);

        i17 = i17 + i3;

     label06:
        $i8 = lengthof $r2;

        if $i8 <= 0 goto label07;

        $i9 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r4, i17, $i9);

        $i10 = lengthof $r2;

        i17 = i17 + $i10;

     label07:
        i18 = $i15;

     label08:
        i16 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)>(r0, $i15, $i0);

        goto label01;

     label09:
        i20 = $i0 - i18;

        if i20 <= 0 goto label11;

        i21 = i17 + i20;

        $i1 = lengthof r4;

        if $i1 >= i21 goto label10;

        r4 = staticinvoke <org.waveprotocol.wave.util.escapers.UnicodeEscaper: char[] growBuffer(char[],int,int)>(r4, i17, i21);

     label10:
        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i18, $i0, r4, i17);

        i17 = i21;

     label11:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>(r4, 0, i17);

        return $r5;
    }

    public java.lang.Appendable escape(java.lang.Appendable)
    {
        org.waveprotocol.wave.util.escapers.UnicodeEscaper$1 $r1;
        org.waveprotocol.wave.util.escapers.UnicodeEscaper r2;
        java.lang.Appendable r0;

        r2 := @this: org.waveprotocol.wave.util.escapers.UnicodeEscaper;

        r0 := @parameter0: java.lang.Appendable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new org.waveprotocol.wave.util.escapers.UnicodeEscaper$1;

        specialinvoke $r1.<org.waveprotocol.wave.util.escapers.UnicodeEscaper$1: void <init>(org.waveprotocol.wave.util.escapers.UnicodeEscaper,java.lang.Appendable)>(r2, r0);

        return $r1;
    }

    protected static final int codePointAt(java.lang.CharSequence, int, int)
    {
        java.lang.IndexOutOfBoundsException $r24;
        boolean $z0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r22;
        int i0, $i2, $i4, $i5, i6, i7, $i8, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i20;
        java.lang.String $r10, $r19;
        char $c1, $c3;
        java.lang.IllegalArgumentException $r21, $r23;

        r1 := @parameter0: java.lang.CharSequence;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        if i6 >= i0 goto label6;

        i7 = i6 + 1;

        $c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i6);

        $i8 = (int) $c1;

        $i10 = (int) 55296;

        if $i8 < $i10 goto label1;

        $i11 = (int) $c1;

        $i13 = (int) 57343;

        if $i11 <= $i13 goto label2;

     label1:
        $i14 = (int) $c1;

        return $i14;

     label2:
        $i15 = (int) $c1;

        $i17 = (int) 56319;

        if $i15 > $i17 goto label5;

        if i7 != i0 goto label3;

        $i18 = (int) $c1;

        $i5 = neg $i18;

        return $i5;

     label3:
        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i7);

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c3);

        if $z0 == 0 goto label4;

        $i4 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>($c1, $c3);

        return $i4;

     label4:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected low surrogate but got char \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value ");

        $i19 = (int) $c3;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r21;

     label5:
        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected low surrogate character \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value ");

        $i20 = (int) $c1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $i2 = i7 - 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r23;

     label6:
        $r24 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r24.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Index exceeds specified range");

        throw $r24;
    }

    private static final char[] growBuffer(char[], int, int)
    {
        int i0, i1;
        char[] r0, r1;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (char)[i0];

        if i1 <= 0 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i1);

     label1:
        return r0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.util.escapers.UnicodeEscaper: int DEST_PAD> = 32;

        return;
    }
}
