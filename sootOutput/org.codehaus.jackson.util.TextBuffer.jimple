public final class org.codehaus.jackson.util.TextBuffer extends java.lang.Object
{
    static final char[] NO_CHARS;
    static final int MAX_SEGMENT_LEN;
    private final org.codehaus.jackson.util.BufferRecycler _allocator;
    private char[] _inputBuffer;
    private int _inputStart;
    private int _inputLen;
    private java.util.ArrayList _segments;
    private boolean _hasSegments;
    private int _segmentSize;
    private char[] _currentSegment;
    private int _currentSize;
    private java.lang.String _resultString;
    private char[] _resultArray;

    public void <init>(org.codehaus.jackson.util.BufferRecycler)
    {
        org.codehaus.jackson.util.BufferRecycler r1;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator> = r1;

        return;
    }

    public void releaseBuffers()
    {
        org.codehaus.jackson.util.BufferRecycler $r1, $r5;
        char[] $r2, r3;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r4;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r2 == null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void resetWithEmpty()>();

        r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = null;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        $r4 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        virtualinvoke $r5.<org.codehaus.jackson.util.BufferRecycler: void releaseCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType,char[])>($r4, r3);

     label1:
        return;
    }

    public void resetWithEmpty()
    {
        int $i1;
        org.codehaus.jackson.util.TextBuffer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        $i1 = (int) -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = $i1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        return;
    }

    public void resetWithShared(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.codehaus.jackson.util.TextBuffer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = r1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = i0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = i1;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        return;
    }

    public void resetWithCopy(char[], int, int)
    {
        int i0, i1, $i3;
        char[] $r1, r2, $r3;
        org.codehaus.jackson.util.TextBuffer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        $i3 = (int) -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = $i3;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

        goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r1 != null goto label2;

        $r3 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(i1);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r3;

     label2:
        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void append(char[],int,int)>(r2, i0, i1);

        return;
    }

    private final char[] findBuffer(int)
    {
        org.codehaus.jackson.util.BufferRecycler $r2;
        int i0;
        char[] $r3;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r1;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        i0 := @parameter0: int;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        $r1 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.util.BufferRecycler: char[] allocCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType,int)>($r1, i0);

        return $r3;
    }

    private final void clearSegments()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 0;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        return;
    }

    public int size()
    {
        int $i0, $i1, $i2, $i3, $i4;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        return $i4;

     label1:
        $i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public int getTextOffset()
    {
        int $i0, $i1;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public char[] getTextBuffer()
    {
        int $i0;
        char[] $r1, $r2, $r3;
        org.codehaus.jackson.util.TextBuffer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        return $r3;

     label1:
        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 != 0 goto label2;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return $r2;

     label2:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] contentsAsArray()>();

        return $r1;
    }

    public java.lang.String contentsAsString()
    {
        java.util.ArrayList $r4, $r7, $r8;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r1, $r6, $r12, $r14, $r16, $r17;
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r2, $r5, r10, $r11, $r13, $r15;
        java.lang.StringBuilder $r3;
        java.lang.Object $r9;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        if $r1 != null goto label9;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if $r2 == null goto label1;

        $r14 = new java.lang.String;

        $r15 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15);

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r14;

        goto label9;

     label1:
        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label3;

        $i7 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        if $i7 >= 1 goto label2;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = "";

        return "";

     label2:
        $r12 = new java.lang.String;

        $r13 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        $i9 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i8 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        specialinvoke $r12.<java.lang.String: void <init>(char[],int,int)>($r13, $i9, $i8);

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r12;

        goto label9;

     label3:
        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        if i1 != 0 goto label6;

        if i2 != 0 goto label4;

        $r16 = "";

        goto label5;

     label4:
        $r16 = new java.lang.String;

        $r11 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>($r11, 0, i2);

     label5:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r16;

        goto label9;

     label6:
        $r3 = new java.lang.StringBuilder;

        $i3 = i1 + i2;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r4 == null goto label8;

        i10 = 0;

        $r7 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $i5 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label7:
        if i10 >= $i5 goto label8;

        $r8 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        r10 = (char[]) $r9;

        $i6 = lengthof r10;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r10, 0, $i6);

        i10 = i10 + 1;

        goto label7;

     label8:
        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r5, 0, $i4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r6;

     label9:
        $r17 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        return $r17;
    }

    public char[] contentsAsArray()
    {
        char[] $r1, r2;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if r2 != null goto label1;

        $r1 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] buildResultArray()>();

        r2 = $r1;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = $r1;

     label1:
        return r2;
    }

    public java.math.BigDecimal contentsAsDecimal() throws java.lang.NumberFormatException
    {
        java.math.BigDecimal $r2, $r4, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r1, $r3, $r5, $r7, $r9;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if $r1 == null goto label1;

        $r8 = new java.math.BigDecimal;

        $r9 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        specialinvoke $r8.<java.math.BigDecimal: void <init>(char[])>($r9);

        return $r8;

     label1:
        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label2;

        $r6 = new java.math.BigDecimal;

        $r7 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        specialinvoke $r6.<java.math.BigDecimal: void <init>(char[],int,int)>($r7, $i4, $i3);

        return $r6;

     label2:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        if $i1 != 0 goto label3;

        $r4 = new java.math.BigDecimal;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(char[],int,int)>($r5, 0, $i2);

        return $r4;

     label3:
        $r2 = new java.math.BigDecimal;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] contentsAsArray()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[])>($r3);

        return $r2;
    }

    public double contentsAsDouble() throws java.lang.NumberFormatException
    {
        java.lang.String $r1;
        org.codehaus.jackson.util.TextBuffer r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        return $d0;
    }

    public void ensureNotShared()
    {
        int $i0;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(16);

     label1:
        return;
    }

    public void append(char)
    {
        char c5;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r1, r2;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        c5 := @parameter0: char;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(16);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        r2 = $r1;

        $i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label2;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(1);

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

     label2:
        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i4;

        r2[$i3] = c5;

        return;
    }

    public void append(char[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        char[] r1, $r2, $r3;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 := @parameter0: char[];

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(i9);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i2 = lengthof $r3;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i7 = $i2 - $i1;

        if $i7 < i9 goto label2;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i8, $r3, $i4, i9);

        $i5 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i6 = $i5 + i9;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i6;

        goto label4;

     label2:
        if $i7 <= 0 goto label3;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i8, $r3, $i3, $i7);

        i8 = i8 + $i7;

        i9 = i9 - $i7;

     label3:
        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(i9);

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i8, $r2, 0, i9);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = i9;

     label4:
        return;
    }

    public void append(java.lang.String, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        java.lang.String r1;
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r2, $r3;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 := @parameter0: java.lang.String;

        i11 := @parameter1: int;

        i12 := @parameter2: int;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(i12);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i2 = lengthof $r3;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i10 = $i2 - $i1;

        if $i10 < i12 goto label2;

        $i7 = i11 + i12;

        $i6 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i11, $i7, $r3, $i6);

        $i8 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i9 = $i8 + i12;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i9;

        goto label4;

     label2:
        if $i10 <= 0 goto label3;

        $i5 = i11 + $i10;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i11, $i5, $r3, $i4);

        i12 = i12 - $i10;

        i11 = i11 + $i10;

     label3:
        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(i12);

        $i3 = i11 + i12;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i11, $i3, $r2, 0);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = i12;

     label4:
        return;
    }

    public char[] getCurrentSegment()
    {
        int $i0, $i1, $i2;
        char[] r1, $r2, $r3;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(1);

        goto label3;

     label1:
        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if r1 != null goto label2;

        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(0);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

        goto label3;

     label2:
        $i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i1 = lengthof r1;

        if $i2 < $i1 goto label3;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(1);

     label3:
        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return $r3;
    }

    public char[] emptyAndGetCurrentSegment()
    {
        char[] $r1, r2;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void resetWithEmpty()>();

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if r2 != null goto label1;

        $r1 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(0);

        r2 = $r1;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r1;

     label1:
        return r2;
    }

    public int getCurrentSegmentSize()
    {
        int $i0;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        return $i0;
    }

    public void setCurrentLength(int)
    {
        int i0;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        i0 := @parameter0: int;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = i0;

        return;
    }

    public char[] finishCurrentSegment()
    {
        java.util.ArrayList $r1, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r2, $r4, $r5;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r1 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments> = $r6;

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 1;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i5 = lengthof $r4;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i1 = $i0 + $i5;

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = $i1;

        $i2 = $i5 >> 1;

        $i3 = $i5 + $i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, 262144);

        $r5 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i4);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r5;

        return $r5;
    }

    public char[] expandCurrentSegment()
    {
        int i0, $i1, $i2, $i3;
        char[] r1, $r2, $r3, $r4;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = lengthof r1;

        if i0 != 262144 goto label1;

        $i3 = 262145;

        goto label2;

     label1:
        $i1 = i0 >> 1;

        $i2 = i0 + $i1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(262144, $i2);

     label2:
        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i3);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return $r4;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r1;
    }

    private void unshare(int)
    {
        int i0, i1, i2, i3, $i4, $i6;
        char[] r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        i2 := @parameter0: int;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i6 = (int) -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = $i6;

        i3 = i0 + i2;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r2 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i4 = lengthof $r5;

        if i3 <= $i4 goto label2;

     label1:
        $r3 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(i3);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r3;

     label2:
        if i0 <= 0 goto label3;

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r4, 0, i0);

     label3:
        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = i0;

        return;
    }

    private void expand(int)
    {
        java.util.ArrayList $r1, $r2, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8;
        char[] $r3, $r5;
        org.codehaus.jackson.util.TextBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        i3 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments> = $r4;

     label1:
        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 1;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i0 = lengthof $r5;

        $i2 = $i1 + $i0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = $i2;

        $i6 = lengthof $r5;

        $i7 = $i6 >> 1;

        i8 = $i7;

        if $i7 >= i3 goto label2;

        i8 = i3;

     label2:
        $i4 = $i6 + i8;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(262144, $i4);

        $r3 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i5);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r3;

        return;
    }

    private char[] buildResultArray()
    {
        java.util.ArrayList $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String $r1, $r14;
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r2, $r4, $r8, r9, $r10, $r11, $r12, $r13, $r15, r16;
        java.lang.Object $r7;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        if $r1 == null goto label1;

        $r14 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        return $r15;

     label1:
        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label3;

        $i5 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        if $i5 >= 1 goto label2;

        $r13 = <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS>;

        return $r13;

     label2:
        $i6 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        $r11 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i6);

        r16 = $r11;

        $r12 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        $i8 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i7 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i8, $r11, 0, $i7);

        goto label7;

     label3:
        $i1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: int size()>();

        if $i1 >= 1 goto label4;

        $r10 = <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS>;

        return $r10;

     label4:
        i9 = 0;

        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i1);

        r16 = $r2;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r3 == null goto label6;

        i10 = 0;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label5:
        if i10 >= $i3 goto label6;

        $r6 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        $r8 = (char[]) $r7;

        r9 = (char[]) $r8;

        i4 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r2, i9, i4);

        i9 = i9 + i4;

        i10 = i10 + 1;

        goto label5;

     label6:
        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, i9, $i2);

     label7:
        return r16;
    }

    private final char[] _charArray(int)
    {
        int i0;
        char[] $r0;
        org.codehaus.jackson.util.TextBuffer r1;

        r1 := @this: org.codehaus.jackson.util.TextBuffer;

        i0 := @parameter0: int;

        $r0 = newarray (char)[i0];

        return $r0;
    }

    static void <clinit>()
    {
        char[] $r0;

        <org.codehaus.jackson.util.TextBuffer: int MAX_SEGMENT_LEN> = 262144;

        $r0 = newarray (char)[0];

        <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS> = $r0;

        return;
    }
}
