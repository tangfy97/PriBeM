public abstract class com.sun.xml.bind.v2.runtime.JaxBeanInfo extends java.lang.Object
{
    protected boolean isNilIncluded;
    protected short flag;
    private static final short FLAG_IS_ELEMENT;
    private static final short FLAG_IS_IMMUTABLE;
    private static final short FLAG_HAS_ELEMENT_ONLY_CONTENTMODEL;
    private static final short FLAG_HAS_BEFORE_UNMARSHAL_METHOD;
    private static final short FLAG_HAS_AFTER_UNMARSHAL_METHOD;
    private static final short FLAG_HAS_BEFORE_MARSHAL_METHOD;
    private static final short FLAG_HAS_AFTER_MARSHAL_METHOD;
    private static final short FLAG_HAS_LIFECYCLE_EVENTS;
    private com.sun.xml.bind.v2.runtime.LifecycleMethods lcm;
    public final java.lang.Class jaxbType;
    private final java.lang.Object typeName;
    private static final java.lang.Class[] unmarshalEventParams;
    private static java.lang.Class[] marshalEventParams;
    private static final java.util.logging.Logger logger;

    protected void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo, java.lang.Class, javax.xml.namespace.QName[], boolean, boolean, boolean)
    {
        javax.xml.namespace.QName[] r4;
        com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo r2;
        java.lang.Class r3;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;
        boolean z0, z1, z2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: javax.xml.namespace.QName[];

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo,java.lang.Class,java.lang.Object,boolean,boolean,boolean)>(r1, r2, r3, r4, z0, z1, z2);

        return;
    }

    protected void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo, java.lang.Class, javax.xml.namespace.QName, boolean, boolean, boolean)
    {
        com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo r2;
        java.lang.Class r3;
        javax.xml.namespace.QName r4;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;
        boolean z0, z1, z2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: javax.xml.namespace.QName;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo,java.lang.Class,java.lang.Object,boolean,boolean,boolean)>(r1, r2, r3, r4, z0, z1, z2);

        return;
    }

    protected void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo, java.lang.Class, boolean, boolean, boolean)
    {
        com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo r2;
        java.lang.Class r3;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;
        boolean z0, z1, z2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo;

        r3 := @parameter2: java.lang.Class;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo,java.lang.Class,java.lang.Object,boolean,boolean,boolean)>(r1, r2, r3, null, z0, z1, z2);

        return;
    }

    private void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo, java.lang.Class, java.lang.Object, boolean, boolean, boolean)
    {
        short $s1, $s2, $s4;
        byte $b0, $b3;
        com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo r2;
        java.util.Map $r3;
        java.lang.Class r4;
        java.lang.Object r5;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;
        boolean z0, z1, z2, $z3;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.Object;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean isNilIncluded> = 0;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm> = null;

        $r3 = r1.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: java.util.Map beanInfos>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class jaxbType> = r4;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName> = r5;

        if z0 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if z1 == 0 goto label3;

        $b3 = 2;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        $b0 = $z3 | $b3;

        if z2 == 0 goto label5;

        $s4 = 128;

        goto label6;

     label5:
        $s4 = 0;

     label6:
        $s1 = $b0 | $s4;

        $s2 = (short) $s1;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag> = $s2;

        return;
    }

    public final boolean hasBeforeUnmarshalMethod()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 8;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean hasAfterUnmarshalMethod()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 16;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean hasBeforeMarshalMethod()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 32;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean hasAfterMarshalMethod()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 64;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isElement()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 1;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isImmutable()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 2;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean hasElementOnlyContentModel()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 4;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void hasElementOnlyContentModel(boolean)
    {
        short $s0, $s1, $s2, $s3, $s4, $s5, $s7;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $s3 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s4 = $s3 | 4;

        $s5 = (short) $s4;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag> = $s5;

        goto label2;

     label1:
        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s7 = (short) -5;

        $s1 = $s0 & $s7;

        $s2 = (short) $s1;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag> = $s2;

     label2:
        return;
    }

    public boolean isNilIncluded()
    {
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $z0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean isNilIncluded>;

        return $z0;
    }

    public boolean lookForLifecycleMethods()
    {
        short $s0, $s1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $s0 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s1 = $s0 & 128;

        if $s1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract java.lang.String getElementNamespaceURI(java.lang.Object);

    public abstract java.lang.String getElementLocalName(java.lang.Object);

    public java.util.Collection getTypeNames()
    {
        java.util.List $r6, $r9, $r10;
        javax.xml.namespace.QName[] $r4, $r5;
        java.lang.Object $r1, $r2, $r3, $r7;
        javax.xml.namespace.QName $r8;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        if $r1 != null goto label1;

        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r10;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $z0 = $r2 instanceof javax.xml.namespace.QName;

        if $z0 == 0 goto label2;

        $r7 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $r8 = (javax.xml.namespace.QName) $r7;

        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8);

        return $r9;

     label2:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $r4 = (javax.xml.namespace.QName[]) $r3;

        $r5 = (javax.xml.namespace.QName[]) $r4;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        return $r6;
    }

    public javax.xml.namespace.QName getTypeName(java.lang.Object)
    {
        javax.xml.namespace.QName[] $r4, $r5;
        java.lang.Object $r1, $r2, $r3, $r7, r9;
        javax.xml.namespace.QName $r6, $r8;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r9 := @parameter0: java.lang.Object;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $z0 = $r2 instanceof javax.xml.namespace.QName;

        if $z0 == 0 goto label2;

        $r7 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $r8 = (javax.xml.namespace.QName) $r7;

        return $r8;

     label2:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Object typeName>;

        $r4 = (javax.xml.namespace.QName[]) $r3;

        $r5 = (javax.xml.namespace.QName[]) $r4;

        $r6 = $r5[0];

        return $r6;
    }

    public abstract java.lang.Object createInstance(com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, org.xml.sax.SAXException;

    public abstract boolean reset(java.lang.Object, com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext) throws org.xml.sax.SAXException;

    public abstract java.lang.String getId(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws org.xml.sax.SAXException;

    public abstract void serializeBody(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws org.xml.sax.SAXException, java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void serializeAttributes(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws org.xml.sax.SAXException, java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void serializeRoot(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws org.xml.sax.SAXException, java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void serializeURIs(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws org.xml.sax.SAXException;

    public abstract com.sun.xml.bind.v2.runtime.unmarshaller.Loader getLoader(com.sun.xml.bind.v2.runtime.JAXBContextImpl, boolean);

    public abstract com.sun.xml.bind.v2.runtime.Transducer getTransducer();

    protected void link(com.sun.xml.bind.v2.runtime.JAXBContextImpl)
    {
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        return;
    }

    public void wrapUp()
    {
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        return;
    }

    protected final void setLifecycleFlags()
    {
        java.lang.reflect.Method[] $r2;
        java.lang.SecurityException $r12;
        java.lang.reflect.Method r3, $r6, $r22, $r24, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.logging.Logger $r15;
        com.sun.xml.bind.v2.runtime.LifecycleMethods $r1, $r5, $r11, $r21, $r23, $r25;
        java.lang.Object[] $r13;
        java.util.logging.Level $r16;
        int i0, i1;
        com.sun.xml.bind.v2.runtime.Messages $r17;
        java.lang.String $r4, $r18, $r19;
        java.lang.Class[] $r7, $r8, $r9, $r10;
        java.lang.Class $r14, r20;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

     label01:
        r20 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class jaxbType>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        if $r1 != null goto label02;

        $r11 = new com.sun.xml.bind.v2.runtime.LifecycleMethods;

        specialinvoke $r11.<com.sun.xml.bind.v2.runtime.LifecycleMethods: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm> = $r11;

     label02:
        if r20 == null goto label09;

        $r2 = virtualinvoke r20.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r2;

        i1 = 0;

     label03:
        if i1 >= i0 goto label08;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r5 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r6 = $r5.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method beforeUnmarshal>;

        if $r6 != null goto label04;

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("beforeUnmarshal");

        if $z6 == 0 goto label04;

        $r10 = <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] unmarshalEventParams>;

        $z7 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean match(java.lang.reflect.Method,java.lang.Class[])>(r3, $r10);

        if $z7 == 0 goto label04;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void cacheLifecycleMethod(java.lang.reflect.Method,short)>(r3, 8);

     label04:
        $r21 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r22 = $r21.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method afterUnmarshal>;

        if $r22 != null goto label05;

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("afterUnmarshal");

        if $z4 == 0 goto label05;

        $r9 = <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] unmarshalEventParams>;

        $z5 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean match(java.lang.reflect.Method,java.lang.Class[])>(r3, $r9);

        if $z5 == 0 goto label05;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void cacheLifecycleMethod(java.lang.reflect.Method,short)>(r3, 16);

     label05:
        $r23 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r24 = $r23.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method beforeMarshal>;

        if $r24 != null goto label06;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("beforeMarshal");

        if $z2 == 0 goto label06;

        $r8 = <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] marshalEventParams>;

        $z3 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean match(java.lang.reflect.Method,java.lang.Class[])>(r3, $r8);

        if $z3 == 0 goto label06;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void cacheLifecycleMethod(java.lang.reflect.Method,short)>(r3, 32);

     label06:
        $r25 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r26 = $r25.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method afterMarshal>;

        if $r26 != null goto label07;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("afterMarshal");

        if $z0 == 0 goto label07;

        $r7 = <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] marshalEventParams>;

        $z1 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: boolean match(java.lang.reflect.Method,java.lang.Class[])>(r3, $r7);

        if $z1 == 0 goto label07;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void cacheLifecycleMethod(java.lang.reflect.Method,short)>(r3, 64);

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        r20 = virtualinvoke r20.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label02;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        $r15 = <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.util.logging.Logger logger>;

        $r16 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r17 = <com.sun.xml.bind.v2.runtime.Messages: com.sun.xml.bind.v2.runtime.Messages UNABLE_TO_DISCOVER_EVENTHANDLER>;

        $r13 = newarray (java.lang.Object)[2];

        $r14 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class jaxbType>;

        $r18 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r13[0] = $r18;

        $r13[1] = $r12;

        $r19 = virtualinvoke $r17.<com.sun.xml.bind.v2.runtime.Messages: java.lang.String format(java.lang.Object[])>($r13);

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r16, $r19);

     label11:
        return;

        catch java.lang.SecurityException from label01 to label09 with label10;
    }

    private boolean match(java.lang.reflect.Method, java.lang.Class[])
    {
        java.lang.Class[] $r1, r2;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r3 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class[];

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r1, r2);

        return $z0;
    }

    private void cacheLifecycleMethod(java.lang.reflect.Method, short)
    {
        com.sun.xml.bind.v2.runtime.LifecycleMethods $r1, $r3, $r4, $r5, $r6, $r8;
        short s0, $s1, $s2, $s3;
        int $i4;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        java.lang.reflect.Method r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r2 := @parameter0: java.lang.reflect.Method;

        s0 := @parameter1: short;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        if $r1 != null goto label1;

        $r8 = new com.sun.xml.bind.v2.runtime.LifecycleMethods;

        specialinvoke $r8.<com.sun.xml.bind.v2.runtime.LifecycleMethods: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm> = $r8;

     label1:
        virtualinvoke r2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $s1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag>;

        $s2 = $s1 | s0;

        $s3 = (short) $s2;

        r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: short flag> = $s3;

        $i4 = (int) s0;

        lookupswitch($i4)
        {
            case 8: goto label2;
            case 16: goto label3;
            case 32: goto label4;
            case 64: goto label5;
            default: goto label6;
        };

     label2:
        $r6 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r6.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method beforeUnmarshal> = r2;

        goto label6;

     label3:
        $r5 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r5.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method afterUnmarshal> = r2;

        goto label6;

     label4:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r4.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method beforeMarshal> = r2;

        goto label6;

     label5:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        $r3.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method afterMarshal> = r2;

     label6:
        return;
    }

    public final com.sun.xml.bind.v2.runtime.LifecycleMethods getLifecycleMethods()
    {
        com.sun.xml.bind.v2.runtime.LifecycleMethods $r1;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods lcm>;

        return $r1;
    }

    public final void invokeBeforeUnmarshalMethod(com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, java.lang.Object, java.lang.Object) throws org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.LifecycleMethods $r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl r4;
        java.lang.Object r3, r5;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        java.lang.reflect.Method r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r4 := @parameter0: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods getLifecycleMethods()>();

        r2 = $r1.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method beforeUnmarshal>;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void invokeUnmarshallCallback(java.lang.reflect.Method,java.lang.Object,com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl,java.lang.Object)>(r2, r3, r4, r5);

        return;
    }

    public final void invokeAfterUnmarshalMethod(com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, java.lang.Object, java.lang.Object) throws org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.LifecycleMethods $r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl r4;
        java.lang.Object r3, r5;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r0;
        java.lang.reflect.Method r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r4 := @parameter0: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: com.sun.xml.bind.v2.runtime.LifecycleMethods getLifecycleMethods()>();

        r2 = $r1.<com.sun.xml.bind.v2.runtime.LifecycleMethods: java.lang.reflect.Method afterUnmarshal>;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void invokeUnmarshallCallback(java.lang.reflect.Method,java.lang.Object,com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl,java.lang.Object)>(r2, r3, r4, r5);

        return;
    }

    private void invokeUnmarshallCallback(java.lang.reflect.Method, java.lang.Object, com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, java.lang.Object) throws org.xml.sax.SAXException
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] $r2;
        java.lang.reflect.InvocationTargetException $r5;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext $r6, $r8;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl r3;
        java.lang.Object r1, r4;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo r9;
        java.lang.reflect.Method r0;

        r9 := @this: com.sun.xml.bind.v2.runtime.JaxBeanInfo;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl;

        r4 := @parameter3: java.lang.Object;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r3;

        $r2[1] = r4;

        virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void handleError(java.lang.Exception,boolean)>($r7, 0);

        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void handleError(java.lang.Exception,boolean)>($r5, 0);

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0, $r1;
        java.util.logging.Logger $r2;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_LIFECYCLE_EVENTS> = 128;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_AFTER_MARSHAL_METHOD> = 64;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_BEFORE_MARSHAL_METHOD> = 32;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_AFTER_UNMARSHAL_METHOD> = 16;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_BEFORE_UNMARSHAL_METHOD> = 8;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_HAS_ELEMENT_ONLY_CONTENTMODEL> = 4;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_IS_IMMUTABLE> = 2;

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: short FLAG_IS_ELEMENT> = 1;

        $r0 = newarray (java.lang.Class)[2];

        $r0[0] = class "Ljavax/xml/bind/Unmarshaller;";

        $r0[1] = class "Ljava/lang/Object;";

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] unmarshalEventParams> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljavax/xml/bind/Marshaller;";

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.Class[] marshalEventParams> = $r1;

        $r2 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.util.logging.Logger logger> = $r2;

        return;
    }
}
