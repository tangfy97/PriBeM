public class org.apache.james.mime4j.codec.DecoderUtil extends java.lang.Object
{
    private static final java.util.regex.Pattern PATTERN_ENCODED_WORD;

    public void <init>()
    {
        org.apache.james.mime4j.codec.DecoderUtil r0;

        r0 := @this: org.apache.james.mime4j.codec.DecoderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] decodeQuotedPrintable(java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        byte[] $r2, $r6;
        java.lang.IllegalStateException $r12;
        java.io.ByteArrayOutputStream $r9;
        java.io.IOException $r7;
        java.io.ByteArrayInputStream $r10;
        org.apache.james.mime4j.codec.QuotedPrintableInputStream $r11;
        int $i0, $i2;
        org.apache.james.mime4j.codec.DecodeMonitor r5;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r11 = new org.apache.james.mime4j.codec.QuotedPrintableInputStream;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        specialinvoke $r11.<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>($r10, r5);

     label2:
        $i0 = virtualinvoke $r11.<org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label2;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r12;

     label5:
        $r6 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private static byte[] decodeBase64(java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        byte[] $r2, $r6;
        java.lang.IllegalStateException $r12;
        java.io.ByteArrayOutputStream $r9;
        java.io.IOException $r7;
        java.io.ByteArrayInputStream $r10;
        int $i0, $i2;
        org.apache.james.mime4j.codec.DecodeMonitor r5;
        java.lang.String r1;
        org.apache.james.mime4j.codec.Base64InputStream $r11;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r11 = new org.apache.james.mime4j.codec.Base64InputStream;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        specialinvoke $r11.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>($r10, r5);

     label2:
        $i0 = virtualinvoke $r11.<org.apache.james.mime4j.codec.Base64InputStream: int read()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label2;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r12;

     label5:
        $r6 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;

        catch java.io.IOException from label1 to label3 with label4;
    }

    static java.lang.String decodeB(java.lang.String, java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2;
        org.apache.james.mime4j.codec.DecodeMonitor r1;
        java.lang.String r0, $r3, r4;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.james.mime4j.codec.DecodeMonitor;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>(r0, r1);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, r4);

        return $r3;
    }

    static java.lang.String decodeQ(java.lang.String, java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2;
        org.apache.james.mime4j.codec.DecodeMonitor r1;
        java.lang.String $r0, $r3, r4, r5;

        r5 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.james.mime4j.codec.DecodeMonitor;

        $r0 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String replaceUnderscores(java.lang.String)>(r5);

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeQuotedPrintable(java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>($r0, r1);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, r4);

        return $r3;
    }

    static java.lang.String decodeEncodedWords(java.lang.String)
    {
        org.apache.james.mime4j.codec.DecodeMonitor $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.james.mime4j.codec.DecodeMonitor: org.apache.james.mime4j.codec.DecodeMonitor SILENT>;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String decodeEncodedWords(java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor) throws java.lang.IllegalArgumentException
    {
        java.util.regex.Matcher $r3;
        int i0;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        boolean $z0, $z1, z2, $z3;
        org.apache.james.mime4j.codec.DecodeMonitor r10;
        java.lang.StringBuilder $r0;
        java.util.regex.Pattern $r2;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        i0 = 0;

        z2 = 0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.apache.james.mime4j.codec.DecoderUtil: java.util.regex.Pattern PATTERN_ENCODED_WORD>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label8;

        $r6 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r7 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r8 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r9 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r11 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String tryDecodeEncodedWord(java.lang.String,java.lang.String,java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>($r7, $r8, $r9, r10);

        if $r11 != null goto label2;

        $r12 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label5;

     label2:
        if z2 == 0 goto label3;

        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(java.lang.String)>($r6);

        if $z1 != 0 goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label5:
        i0 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        if $r11 == null goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        z2 = $z3;

        goto label1;

     label8:
        if i0 != 0 goto label9;

        return r1;

     label9:
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static java.lang.String tryDecodeEncodedWord(java.lang.String, java.lang.String, java.lang.String, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        java.lang.String[] $r5, $r10, $r11, $r13, $r16;
        java.nio.charset.Charset $r1;
        int $i0;
        java.lang.String r0, r2, r3, $r6, $r7, $r8, $r9, $r14, $r17;
        boolean $z0, $z1;
        java.lang.RuntimeException $r12;
        org.apache.james.mime4j.codec.DecodeMonitor r4;
        java.io.UnsupportedEncodingException $r15;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.james.mime4j.codec.DecodeMonitor;

        $r1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset lookup(java.lang.String)>(r0);

        if $r1 != null goto label1;

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "Mime charser \'";

        $r11[1] = r0;

        $r11[2] = "\' doesn\'t have a corresponding Java charset";

        staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: void monitor(org.apache.james.mime4j.codec.DecodeMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r4, r0, r3, r2, "leaving word encoded", $r11);

        return null;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "Missing encoded text in encoded word";

        staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: void monitor(org.apache.james.mime4j.codec.DecodeMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r4, r0, r3, r2, "leaving word encoded", $r10);

        return null;

     label2:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Q");

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        $r9 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>(r2, $r8, r4);

     label3:
        return $r9;

     label4:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("B");

        if $z1 == 0 goto label6;

        $r6 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        $r7 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeB(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.DecodeMonitor)>(r2, $r6, r4);

     label5:
        return $r7;

     label6:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "Warning: Unknown encoding in encoded word";

        staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: void monitor(org.apache.james.mime4j.codec.DecodeMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r4, r0, r3, r2, "leaving word encoded", $r5);

     label7:
        return null;

     label8:
        $r15 := @caughtexception;

        $r16 = newarray (java.lang.String)[3];

        $r16[0] = "Unsupported encoding (";

        $r17 = virtualinvoke $r15.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r16[1] = $r17;

        $r16[2] = ") in encoded word";

        staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: void monitor(org.apache.james.mime4j.codec.DecodeMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r4, r0, r3, r2, "leaving word encoded", $r16);

        return null;

     label9:
        $r12 := @caughtexception;

        $r13 = newarray (java.lang.String)[3];

        $r13[0] = "Could not decode (";

        $r14 = virtualinvoke $r12.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r13[1] = $r14;

        $r13[2] = ") encoded word";

        staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: void monitor(org.apache.james.mime4j.codec.DecodeMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r4, r0, r3, r2, "leaving word encoded", $r13);

        return null;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label8;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label8;
        catch java.io.UnsupportedEncodingException from label6 to label7 with label8;
        catch java.lang.RuntimeException from label2 to label3 with label9;
        catch java.lang.RuntimeException from label4 to label5 with label9;
        catch java.lang.RuntimeException from label6 to label7 with label9;
    }

    private static transient void monitor(org.apache.james.mime4j.codec.DecodeMonitor, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) throws java.lang.IllegalArgumentException
    {
        java.lang.String[] r6;
        int i0, i1;
        java.lang.String r1, r2, r3, $r4, $r7, r8, $r10, r11;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r9;
        org.apache.james.mime4j.codec.DecodeMonitor r0;
        java.lang.StringBuilder $r5;

        r0 := @parameter0: org.apache.james.mime4j.codec.DecodeMonitor;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r8 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String[];

        $z0 = virtualinvoke r0.<org.apache.james.mime4j.codec.DecodeMonitor: boolean isListening()>();

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r11 = r6[i1];

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>($r7, r8);

        if $z1 == 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label3:
        return;
    }

    private static java.lang.String recombine(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String r2, r5, r8, $r11;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static java.lang.String replaceUnderscores(java.lang.String)
    {
        int $i0, i2, $i3;
        char $c1;
        java.lang.StringBuilder $r3;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(128);

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 95 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=20");

        goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(.*?)=\\?(.+?)\\?(\\w)\\?(.+?)\\?=", 32);

        <org.apache.james.mime4j.codec.DecoderUtil: java.util.regex.Pattern PATTERN_ENCODED_WORD> = $r0;

        return;
    }
}
