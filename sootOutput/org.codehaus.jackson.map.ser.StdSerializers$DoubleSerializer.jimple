public final class org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer extends org.codehaus.jackson.map.ser.std.NonTypedScalarSerializerBase
{
    static final org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance;

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.NonTypedScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Double;");

        return;
    }

    public void serialize(java.lang.Double, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer r2;
        java.lang.Double r1;
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        double $d0;

        r2 := @this: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer;

        r1 := @parameter0: java.lang.Double;

        r0 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer r0;
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("number", 1);

        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer r0;
        java.lang.Double $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Double) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: void serialize(java.lang.Double,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance> = $r0;

        return;
    }
}
