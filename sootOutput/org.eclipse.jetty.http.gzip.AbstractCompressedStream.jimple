public abstract class org.eclipse.jetty.http.gzip.AbstractCompressedStream extends javax.servlet.ServletOutputStream
{
    private final java.lang.String _encoding;
    protected final java.lang.String _vary;
    protected final org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper;
    protected final javax.servlet.http.HttpServletResponse _response;
    protected java.io.OutputStream _out;
    protected org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut;
    protected java.util.zip.DeflaterOutputStream _compressedOutputStream;
    protected boolean _closed;
    protected boolean _doNotCompress;

    public void <init>(java.lang.String, javax.servlet.http.HttpServletRequest, org.eclipse.jetty.http.gzip.CompressedResponseWrapper, java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        javax.servlet.http.HttpServletResponse $r4;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper r2, $r6;
        javax.servlet.http.HttpServletRequest r7;
        javax.servlet.ServletResponse $r3;
        int $i0;
        java.lang.String r1, r5;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: javax.servlet.http.HttpServletRequest;

        r2 := @parameter2: org.eclipse.jetty.http.gzip.CompressedResponseWrapper;

        r5 := @parameter3: java.lang.String;

        specialinvoke r0.<javax.servlet.ServletOutputStream: void <init>()>();

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _encoding> = r1;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper> = r2;

        $r3 = virtualinvoke r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r4 = (javax.servlet.http.HttpServletResponse) $r3;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response> = $r4;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _vary> = r5;

        $r6 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i0 = virtualinvoke $r6.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

     label1:
        return;
    }

    public void resetBuffer()
    {
        java.lang.IllegalStateException $r4;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        javax.servlet.http.HttpServletResponse $r1, $r3;
        java.util.zip.DeflaterOutputStream $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $z0 = interfaceinvoke $r1.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Committed");

        throw $r4;

     label1:
        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed> = 0;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out> = null;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut> = null;

        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        if $r2 == null goto label2;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        interfaceinvoke $r3.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-Encoding", null);

     label2:
        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream> = null;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _doNotCompress> = 0;

        return;
    }

    public void setContentLength()
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        javax.servlet.http.HttpServletResponse $r2, $r4;
        long $l0;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r1;
        byte $b1, $b2;
        int $i3, $i4, $i5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $z0 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _doNotCompress>;

        if $z0 == 0 goto label2;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 < 0 goto label2;

        $b2 = $l0 cmp 2147483647L;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label1;

        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $i3 = (int) $l0;

        interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void setContentLength(int)>($i3);

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        interfaceinvoke $r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-Length", $r3);

     label2:
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r5;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        long $l0, $l3;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r2, $r3;
        byte $b1, $b4;
        int $i2, $i5, $i6;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r4;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r1 == null goto label1;

        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r4 == null goto label3;

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l0 = virtualinvoke $r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i2 = virtualinvoke $r3.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        $l3 = (long) $i2;

        $b4 = $l0 cmp $l3;

        $i6 = (int) $b4;

        if $i6 >= 0 goto label2;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

     label3:
        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        virtualinvoke $r5.<java.io.OutputStream: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        long $l0, $l3, l6;
        java.util.zip.DeflaterOutputStream $r7, $r12;
        javax.servlet.http.HttpServletRequest $r2;
        byte $b1, $b4;
        int $i2, $i5, $i7, $i8;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r4, $r10;
        boolean $z0;
        java.io.OutputStream $r5, $r6;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r1, $r8, $r9, $r11;
        java.lang.Object $r3;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $z0 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: javax.servlet.http.HttpServletRequest getRequest()>();

        $r3 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.request_uri");

        if $r3 == null goto label02;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void flush()>();

        goto label10;

     label02:
        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r4 == null goto label06;

        $r8 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l0 = virtualinvoke $r8.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        l6 = $l0;

        $b1 = $l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label03;

        $r10 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $i5 = virtualinvoke $r10.<org.eclipse.jetty.util.ByteArrayOutputStream2: int getCount()>();

        l6 = (long) $i5;

        $r11 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        virtualinvoke $r11.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void setContentLength(long)>(l6);

     label03:
        $r9 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i2 = virtualinvoke $r9.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        $l3 = (long) $i2;

        $b4 = l6 cmp $l3;

        $i8 = (int) $b4;

        if $i8 >= 0 goto label04;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

        goto label05;

     label04:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

     label05:
        goto label07;

     label06:
        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r5 != null goto label07;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

     label07:
        $r12 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        if $r12 == null goto label08;

        $r7 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        virtualinvoke $r7.<java.util.zip.DeflaterOutputStream: void close()>();

        goto label09;

     label08:
        $r6 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

     label09:
        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed> = 1;

     label10:
        return;
    }

    public void finish() throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        long $l0, $l3;
        java.util.zip.DeflaterOutputStream $r3, $r6;
        byte $b1, $b4;
        int $i2, $i5, $i6;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r5;
        boolean $z0, $z1;
        java.io.OutputStream $r1;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r2, $r4;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $z0 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed>;

        if $z0 != 0 goto label4;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r1 == null goto label1;

        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r5 == null goto label3;

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l0 = virtualinvoke $r2.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i2 = virtualinvoke $r4.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        $l3 = (long) $i2;

        $b4 = $l0 cmp $l3;

        $i6 = (int) $b4;

        if $i6 >= 0 goto label2;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

     label3:
        $r6 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        if $r6 == null goto label4;

        $z1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed>;

        if $z1 != 0 goto label4;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed> = 1;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        virtualinvoke $r3.<java.util.zip.DeflaterOutputStream: void close()>();

     label4:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        i0 := @parameter0: int;

        specialinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void checkOut(int)>(1);

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        int $i0;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void checkOut(int)>($i0);

        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        int i0, i1;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void checkOut(int)>(i0);

        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i1, i0);

        return;
    }

    public void doCompress() throws java.io.IOException
    {
        byte[] $r22;
        java.lang.IllegalStateException $r24;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        java.util.zip.DeflaterOutputStream $r1, $r7;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4, $r6, $r11, $r13, $r16, $r19;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r9, $r20, $r23;
        boolean $z0, $z1;
        java.io.OutputStream $r8, $r21;
        javax.servlet.http.HttpServletResponse $r2, $r5;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r10;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r18;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        if $r1 != null goto label5;

        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $z0 = interfaceinvoke $r2.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z0 == 0 goto label1;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>()>();

        throw $r24;

     label1:
        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _encoding>;

        if $r3 == null goto label4;

        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _encoding>;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setHeader(java.lang.String,java.lang.String)>("Content-Encoding", $r4);

        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $z1 = interfaceinvoke $r5.<javax.servlet.http.HttpServletResponse: boolean containsHeader(java.lang.String)>("Content-Encoding");

        if $z1 == 0 goto label4;

        $r6 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _vary>;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void addHeader(java.lang.String,java.lang.String)>("Vary", $r6);

        $r7 = virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream createStream()>();

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream> = $r7;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out> = $r7;

        $r8 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r8 == null goto label4;

        $r9 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r9 == null goto label2;

        $r21 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        $r20 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $r22 = virtualinvoke $r20.<org.eclipse.jetty.util.ByteArrayOutputStream2: byte[] getBuf()>();

        $r23 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $i2 = virtualinvoke $r23.<org.eclipse.jetty.util.ByteArrayOutputStream2: int getCount()>();

        virtualinvoke $r21.<java.io.OutputStream: void write(byte[],int,int)>($r22, 0, $i2);

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut> = null;

     label2:
        $r10 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $r11 = virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String getETag()>();

        if $r11 == null goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r13 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r16 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _encoding>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setHeader(java.lang.String,java.lang.String)>("ETag", $r19);

     label3:
        return;

     label4:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(1);

     label5:
        return;
    }

    public void doNotCompress(boolean) throws java.io.IOException
    {
        byte[] $r10;
        java.lang.IllegalStateException $r16;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        java.util.zip.DeflaterOutputStream $r1;
        javax.servlet.ServletOutputStream $r6;
        int $i0;
        java.lang.String $r4, $r13, $r14;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r7, $r8, $r11, $r15;
        boolean z0;
        java.io.OutputStream $r2, $r9;
        javax.servlet.http.HttpServletResponse $r5;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r3, $r12;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.util.zip.DeflaterOutputStream _compressedOutputStream>;

        if $r1 == null goto label1;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compressed output stream is already assigned.");

        throw $r16;

     label1:
        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r2 == null goto label2;

        $r15 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r15 == null goto label6;

     label2:
        if z0 == 0 goto label3;

        $r14 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.lang.String _vary>;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void addHeader(java.lang.String,java.lang.String)>("Vary", $r14);

     label3:
        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $r4 = virtualinvoke $r3.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String getETag()>();

        if $r4 == null goto label4;

        $r12 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $r13 = virtualinvoke $r12.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: java.lang.String getETag()>();

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setHeader(java.lang.String,java.lang.String)>("ETag", $r13);

     label4:
        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _doNotCompress> = 1;

        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $r6 = interfaceinvoke $r5.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out> = $r6;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void setContentLength()>();

        $r7 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r7 == null goto label5;

        $r9 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        $r8 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $r10 = virtualinvoke $r8.<org.eclipse.jetty.util.ByteArrayOutputStream2: byte[] getBuf()>();

        $r11 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $i0 = virtualinvoke $r11.<org.eclipse.jetty.util.ByteArrayOutputStream2: int getCount()>();

        virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>($r10, 0, $i0);

     label5:
        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut> = null;

     label6:
        return;
    }

    private void checkOut(int) throws java.io.IOException
    {
        byte[] $r6;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        byte $b1, $b8, $b10, $b15;
        boolean $z0, $z1, $z2;
        long $l0, $l7, $l9, $l14;
        int i2, $i3, $i4, $i5, $i6, $i11, $i12, $i13, $i16, $i17, $i18, $i19;
        org.eclipse.jetty.util.ByteArrayOutputStream2 $r2, $r5, $r7, $r17;
        java.io.OutputStream $r1;
        javax.servlet.http.HttpServletResponse $r4, $r10;
        java.io.IOException $r16;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r3, $r8, $r9, $r11, $r13, $r14;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        i2 := @parameter0: int;

        $z0 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed>;

        if $z0 == 0 goto label1;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("CLOSED");

        throw $r16;

     label1:
        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        if $r1 != null goto label6;

        $r9 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l9 = virtualinvoke $r9.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        $r10 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $z2 = interfaceinvoke $r10.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z2 != 0 goto label2;

        $b10 = $l9 cmp 0L;

        $i16 = (int) $b10;

        if $i16 < 0 goto label3;

        $r14 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i13 = virtualinvoke $r14.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        $l14 = (long) $i13;

        $b15 = $l9 cmp $l14;

        $i17 = (int) $b15;

        if $i17 >= 0 goto label3;

     label2:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

        goto label5;

     label3:
        $r11 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i11 = virtualinvoke $r11.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        if i2 <= $i11 goto label4;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

        goto label5;

     label4:
        $r17 = new org.eclipse.jetty.util.ByteArrayOutputStream2;

        $r13 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i12 = virtualinvoke $r13.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getBufferSize()>();

        specialinvoke $r17.<org.eclipse.jetty.util.ByteArrayOutputStream2: void <init>(int)>($i12);

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut> = $r17;

        r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out> = $r17;

     label5:
        goto label9;

     label6:
        $r2 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        if $r2 == null goto label9;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $l0 = virtualinvoke $r3.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: long getContentLength()>();

        $r4 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        $z1 = interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z1 != 0 goto label7;

        $b1 = $l0 cmp 0L;

        $i18 = (int) $b1;

        if $i18 < 0 goto label8;

        $r8 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.http.gzip.CompressedResponseWrapper _wrapper>;

        $i6 = virtualinvoke $r8.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: int getMinCompressSize()>();

        $l7 = (long) $i6;

        $b8 = $l0 cmp $l7;

        $i19 = (int) $b8;

        if $i19 >= 0 goto label8;

     label7:
        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doNotCompress(boolean)>(0);

        goto label9;

     label8:
        $r5 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $r6 = virtualinvoke $r5.<org.eclipse.jetty.util.ByteArrayOutputStream2: byte[] getBuf()>();

        $i3 = lengthof $r6;

        $r7 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: org.eclipse.jetty.util.ByteArrayOutputStream2 _bOut>;

        $i4 = virtualinvoke $r7.<org.eclipse.jetty.util.ByteArrayOutputStream2: int getCount()>();

        $i5 = $i3 - $i4;

        if i2 < $i5 goto label9;

        virtualinvoke r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: void doCompress()>();

     label9:
        return;
    }

    public java.io.OutputStream getOutputStream()
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $r1 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: java.io.OutputStream _out>;

        return $r1;
    }

    public boolean isClosed()
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        $z0 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: boolean _closed>;

        return $z0;
    }

    protected java.io.PrintWriter newWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r2;
        java.io.PrintWriter $r4;
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r3;
        java.io.OutputStreamWriter $r1;
        java.lang.String r0;

        r3 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r2 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        goto label2;

     label1:
        $r4 = new java.io.PrintWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r0);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

     label2:
        return $r4;
    }

    protected void addHeader(java.lang.String, java.lang.String)
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        javax.servlet.http.HttpServletResponse $r3;
        java.lang.String r1, r2;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        interfaceinvoke $r3.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    protected void setHeader(java.lang.String, java.lang.String)
    {
        org.eclipse.jetty.http.gzip.AbstractCompressedStream r0;
        javax.servlet.http.HttpServletResponse $r3;
        java.lang.String r1, r2;

        r0 := @this: org.eclipse.jetty.http.gzip.AbstractCompressedStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.eclipse.jetty.http.gzip.AbstractCompressedStream: javax.servlet.http.HttpServletResponse _response>;

        interfaceinvoke $r3.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    protected abstract java.util.zip.DeflaterOutputStream createStream() throws java.io.IOException;
}
