public class org.codehaus.jackson.impl.Utf8Generator extends org.codehaus.jackson.impl.JsonGeneratorBase
{
    private static final byte BYTE_u;
    private static final byte BYTE_0;
    private static final byte BYTE_LBRACKET;
    private static final byte BYTE_RBRACKET;
    private static final byte BYTE_LCURLY;
    private static final byte BYTE_RCURLY;
    private static final byte BYTE_BACKSLASH;
    private static final byte BYTE_SPACE;
    private static final byte BYTE_COMMA;
    private static final byte BYTE_COLON;
    private static final byte BYTE_QUOTE;
    protected static final int SURR1_FIRST;
    protected static final int SURR1_LAST;
    protected static final int SURR2_FIRST;
    protected static final int SURR2_LAST;
    private static final int MAX_BYTES_TO_BUFFER;
    static final byte[] HEX_CHARS;
    private static final byte[] NULL_BYTES;
    private static final byte[] TRUE_BYTES;
    private static final byte[] FALSE_BYTES;
    protected static final int[] sOutputEscapes;
    protected final org.codehaus.jackson.io.IOContext _ioContext;
    protected final java.io.OutputStream _outputStream;
    protected int[] _outputEscapes;
    protected int _maximumNonEscapedChar;
    protected org.codehaus.jackson.io.CharacterEscapes _characterEscapes;
    protected byte[] _outputBuffer;
    protected int _outputTail;
    protected final int _outputEnd;
    protected final int _outputMaxContiguous;
    protected char[] _charBuffer;
    protected final int _charBufferLength;
    protected byte[] _entityBuffer;
    protected boolean _bufferRecyclable;

    public void <init>(org.codehaus.jackson.io.IOContext, int, org.codehaus.jackson.ObjectCodec, java.io.OutputStream)
    {
        org.codehaus.jackson.io.IOContext r3;
        byte[] $r5, $r6;
        org.codehaus.jackson.JsonGenerator$Feature $r9;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int[] $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.io.OutputStream r4;
        org.codehaus.jackson.ObjectCodec r1;
        char[] $r7, $r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r1 := @parameter2: org.codehaus.jackson.ObjectCodec;

        r4 := @parameter3: java.io.OutputStream;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void <init>(int,org.codehaus.jackson.ObjectCodec)>(i0, r1);

        $r2 = <org.codehaus.jackson.impl.Utf8Generator: int[] sOutputEscapes>;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes> = $r2;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = 0;

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.IOContext _ioContext> = r3;

        r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream> = r4;

        r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _bufferRecyclable> = 1;

        $r5 = virtualinvoke r3.<org.codehaus.jackson.io.IOContext: byte[] allocWriteEncodingBuffer()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer> = $r5;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i1 = lengthof $r6;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd> = $i1;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        $i3 = $i2 >> 3;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous> = $i3;

        $r7 = virtualinvoke r3.<org.codehaus.jackson.io.IOContext: char[] allocConcatBuffer()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer> = $r7;

        $r8 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        $i4 = lengthof $r8;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _charBufferLength> = $i4;

        $r9 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature ESCAPE_NON_ASCII>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r9);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.JsonGenerator setHighestNonEscapedChar(int)>(127);

     label1:
        return;
    }

    public void <init>(org.codehaus.jackson.io.IOContext, int, org.codehaus.jackson.ObjectCodec, java.io.OutputStream, byte[], int, boolean)
    {
        org.codehaus.jackson.io.IOContext r3;
        byte[] r5, $r6;
        org.codehaus.jackson.JsonGenerator$Feature $r9;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int[] $r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1;
        java.io.OutputStream r4;
        org.codehaus.jackson.ObjectCodec r1;
        char[] $r7, $r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r1 := @parameter2: org.codehaus.jackson.ObjectCodec;

        r4 := @parameter3: java.io.OutputStream;

        r5 := @parameter4: byte[];

        i1 := @parameter5: int;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void <init>(int,org.codehaus.jackson.ObjectCodec)>(i0, r1);

        $r2 = <org.codehaus.jackson.impl.Utf8Generator: int[] sOutputEscapes>;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes> = $r2;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = 0;

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.IOContext _ioContext> = r3;

        r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream> = r4;

        r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _bufferRecyclable> = z0;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer> = r5;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = lengthof $r6;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd> = $i2;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        $i4 = $i3 >> 3;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous> = $i4;

        $r7 = virtualinvoke r3.<org.codehaus.jackson.io.IOContext: char[] allocConcatBuffer()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer> = $r7;

        $r8 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        $i5 = lengthof $r8;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _charBufferLength> = $i5;

        $r9 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature ESCAPE_NON_ASCII>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r9);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.JsonGenerator setHighestNonEscapedChar(int)>(127);

     label1:
        return;
    }

    public org.codehaus.jackson.JsonGenerator setHighestNonEscapedChar(int)
    {
        int i0, $i1;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar> = $i1;

        return r0;
    }

    public int getHighestEscapedChar()
    {
        int $i0;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar>;

        return $i0;
    }

    public org.codehaus.jackson.JsonGenerator setCharacterEscapes(org.codehaus.jackson.io.CharacterEscapes)
    {
        org.codehaus.jackson.io.CharacterEscapes r1;
        int[] $r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: org.codehaus.jackson.io.CharacterEscapes;

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.CharacterEscapes _characterEscapes> = r1;

        if r1 != null goto label1;

        $r3 = <org.codehaus.jackson.impl.Utf8Generator: int[] sOutputEscapes>;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes> = $r3;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.io.CharacterEscapes: int[] getEscapeCodesForAscii()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes> = $r2;

     label2:
        return r0;
    }

    public org.codehaus.jackson.io.CharacterEscapes getCharacterEscapes()
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.io.CharacterEscapes $r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

        return $r1;
    }

    public java.lang.Object getOutputTarget()
    {
        java.io.OutputStream $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        return $r1;
    }

    public final void writeStringField(java.lang.String, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeString(java.lang.String)>(r2);

        return;
    }

    public final void writeFieldName(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4;
        org.codehaus.jackson.PrettyPrinter $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>(r1);

        if $i0 != 4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");

     label1:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r3 == null goto label4;

        if $i0 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writePPFieldName(java.lang.String,boolean)>(r1, $z0);

        return;

     label4:
        if $i0 != 1 goto label6;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $r4[$i3] = 44;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeFieldName(java.lang.String)>(r1);

        return;
    }

    public final void writeFieldName(org.codehaus.jackson.io.SerializedString) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r5;
        org.codehaus.jackson.PrettyPrinter $r4;
        org.codehaus.jackson.io.SerializedString r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: org.codehaus.jackson.io.SerializedString;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.io.SerializedString: java.lang.String getValue()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>($r3);

        if $i0 != 4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r4 == null goto label4;

        if $i0 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writePPFieldName(org.codehaus.jackson.SerializableString,boolean)>(r1, $z0);

        return;

     label4:
        if $i0 != 1 goto label6;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $r5[$i3] = 44;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeFieldName(org.codehaus.jackson.SerializableString)>(r1);

        return;
    }

    public final void writeFieldName(org.codehaus.jackson.SerializableString) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r5;
        org.codehaus.jackson.PrettyPrinter $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r2;
        org.codehaus.jackson.SerializableString r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: org.codehaus.jackson.SerializableString;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r3 = interfaceinvoke r1.<org.codehaus.jackson.SerializableString: java.lang.String getValue()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>($r3);

        if $i0 != 4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r4 == null goto label4;

        if $i0 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writePPFieldName(org.codehaus.jackson.SerializableString,boolean)>(r1, $z0);

        return;

     label4:
        if $i0 != 1 goto label6;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $r5[$i3] = 44;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeFieldName(org.codehaus.jackson.SerializableString)>(r1);

        return;
    }

    public final void writeStartArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4;
        org.codehaus.jackson.PrettyPrinter $r3, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("start an array");

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildArrayContext()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r2;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r3 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r5.<org.codehaus.jackson.PrettyPrinter: void writeStartArray(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label3;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r4[$i2] = 91;

     label3:
        return;
    }

    public final void writeEndArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r3;
        org.codehaus.jackson.PrettyPrinter $r2, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9, $r11;
        boolean $z0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r4, $r8, $r12, $r13;
        java.lang.StringBuilder $r6, $r7, $r10;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inArray()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an ARRAY but ");

        $r8 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>($r11);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 == null goto label2;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i4 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r5.<org.codehaus.jackson.PrettyPrinter: void writeEndArray(org.codehaus.jackson.JsonGenerator,int)>(r0, $i4);

        goto label4;

     label2:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label3:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r3[$i2] = 93;

     label4:
        $r12 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r13;

        return;
    }

    public final void writeStartObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4;
        org.codehaus.jackson.PrettyPrinter $r3, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("start an object");

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildObjectContext()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r2;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r3 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r5.<org.codehaus.jackson.PrettyPrinter: void writeStartObject(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label3;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r4[$i2] = 123;

     label3:
        return;
    }

    public final void writeEndObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r3;
        org.codehaus.jackson.PrettyPrinter $r2, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9, $r11;
        boolean $z0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r4, $r8, $r12, $r13;
        java.lang.StringBuilder $r6, $r7, $r10;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inObject()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an object but ");

        $r8 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>($r11);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 == null goto label2;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i4 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r5.<org.codehaus.jackson.PrettyPrinter: void writeEndObject(org.codehaus.jackson.JsonGenerator,int)>(r0, $i4);

        goto label4;

     label2:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label3:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r3[$i2] = 125;

     label4:
        $r12 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r13;

        return;
    }

    protected final void _writeFieldName(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r2, $r4;
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String r3;
        boolean $z0;
        char[] $r5, $r6, $r7;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: java.lang.String;

        $r1 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_FIELD_NAMES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(java.lang.String)>(r3);

        return;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r2[$i2] = 34;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _charBufferLength>;

        if $i4 > $i5 goto label5;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, $r5, 0);

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        if $i4 > $i8 goto label4;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i11 = $i9 + $i4;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i11 <= $i10 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label3:
        $r7 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>($r7, 0, $i4);

        goto label6;

     label4:
        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(char[],int,int)>($r6, 0, $i4);

        goto label6;

     label5:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(java.lang.String)>(r3);

     label6:
        $i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i12 < $i13 goto label7;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label7:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r4[$i6] = 34;

        return;
    }

    protected final void _writeFieldName(org.codehaus.jackson.SerializableString) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r4, $r5, $r6, $r7;
        org.codehaus.jackson.JsonGenerator$Feature $r3;
        org.codehaus.jackson.impl.Utf8Generator r2;
        org.codehaus.jackson.SerializableString r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r0 := @parameter0: org.codehaus.jackson.SerializableString;

        $r1 = interfaceinvoke r0.<org.codehaus.jackson.SerializableString: byte[] asQuotedUTF8()>();

        $r3 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_FIELD_NAMES>;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r3);

        if $z0 != 0 goto label1;

        specialinvoke r2.<org.codehaus.jackson.impl.Utf8Generator: void _writeBytes(byte[])>($r1);

        return;

     label1:
        $i1 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label2;

        virtualinvoke r2.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r2.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r4[$i2] = 34;

        $i17 = lengthof $r1;

        $i4 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i4 + $i17;

        $i7 = $i5 + 1;

        $i6 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i7 >= $i6 goto label3;

        $r6 = r2.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i12 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r6, $i12, $i17);

        $i13 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i14 = $i13 + $i17;

        r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i14;

        $r7 = r2.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i15 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i16 = $i15 + 1;

        r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i16;

        $r7[$i15] = 34;

        goto label5;

     label3:
        specialinvoke r2.<org.codehaus.jackson.impl.Utf8Generator: void _writeBytes(byte[])>($r1);

        $i9 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i8 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i9 < $i8 goto label4;

        virtualinvoke r2.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label4:
        $r5 = r2.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i10 = r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i11 = $i10 + 1;

        r2.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i11;

        $r5[$i10] = 34;

     label5:
        return;
    }

    protected final void _writePPFieldName(java.lang.String, boolean) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4, $r5;
        org.codehaus.jackson.JsonGenerator$Feature $r2;
        org.codehaus.jackson.PrettyPrinter $r1, $r9;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String r3;
        boolean z0, $z1;
        char[] $r6, $r7, $r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        $r9 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r9.<org.codehaus.jackson.PrettyPrinter: void writeObjectEntrySeparator(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label02;

     label01:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r1.<org.codehaus.jackson.PrettyPrinter: void beforeObjectEntries(org.codehaus.jackson.JsonGenerator)>(r0);

     label02:
        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_FIELD_NAMES>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r2);

        if $z1 == 0 goto label09;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label03:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r4[$i2] = 34;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _charBufferLength>;

        if $i4 > $i5 goto label06;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, $r6, 0);

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        if $i4 > $i8 goto label05;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i11 = $i9 + $i4;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i11 <= $i10 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label04:
        $r8 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>($r8, 0, $i4);

        goto label07;

     label05:
        $r7 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(char[],int,int)>($r7, 0, $i4);

        goto label07;

     label06:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(java.lang.String)>(r3);

     label07:
        $i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i12 < $i13 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label08:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r5[$i6] = 34;

        goto label10;

     label09:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(java.lang.String)>(r3);

     label10:
        return;
    }

    protected final void _writePPFieldName(org.codehaus.jackson.SerializableString, boolean) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4, $r5, $r7;
        org.codehaus.jackson.JsonGenerator$Feature $r2;
        org.codehaus.jackson.PrettyPrinter $r1, $r6;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.SerializableString r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: org.codehaus.jackson.SerializableString;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r6.<org.codehaus.jackson.PrettyPrinter: void writeObjectEntrySeparator(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r1.<org.codehaus.jackson.PrettyPrinter: void beforeObjectEntries(org.codehaus.jackson.JsonGenerator)>(r0);

     label2:
        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_FIELD_NAMES>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r2);

        if $z1 == 0 goto label4;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i4 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label3:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r5[$i6] = 34;

     label4:
        $r7 = interfaceinvoke r3.<org.codehaus.jackson.SerializableString: byte[] asQuotedUTF8()>();

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeBytes(byte[])>($r7);

        if $z1 == 0 goto label6;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r4[$i2] = 34;

     label6:
        return;
    }

    public void writeString(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r3, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r1;
        char[] $r2, $r4, $r6;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write text value");

        if r1 != null goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeNull()>();

        return;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _charBufferLength>;

        if $i0 <= $i1 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeLongString(java.lang.String)>(r1);

        return;

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r2, 0);

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        if $i0 <= $i2 goto label3;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeLongString(char[],int,int)>($r6, 0, $i0);

        return;

     label3:
        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i3 + $i0;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i4 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label4:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r3[$i6] = 34;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>($r4, 0, $i0);

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i9 < $i8 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i11;

        $r5[$i10] = 34;

        return;
    }

    private final void _writeLongString(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: java.lang.String;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(java.lang.String)>(r2);

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i4 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r3[$i6] = 34;

        return;
    }

    private final void _writeLongString(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9;
        char[] $r2, r4;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r4 := @parameter0: char[];

        i9 := @parameter1: int;

        i4 := @parameter2: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(char[],int,int)>($r2, 0, i4);

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i6 < $i5 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i8 = $i7 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i8;

        $r3[$i7] = 34;

        return;
    }

    public void writeString(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        char[] r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: char[];

        i6 := @parameter1: int;

        i4 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write text value");

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        if i4 > $i5 goto label3;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i13 = $i11 + i4;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i13 <= $i12 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>(r2, i6, i4);

        goto label4;

     label3:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegments(char[],int,int)>(r2, i6, i4);

     label4:
        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i8 < $i7 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i10;

        $r3[$i9] = 34;

        return;
    }

    public final void writeString(org.codehaus.jackson.SerializableString) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r3, $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.SerializableString r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: org.codehaus.jackson.SerializableString;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write text value");

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.SerializableString: byte[] asQuotedUTF8()>();

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeBytes(byte[])>($r3);

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i4 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r4[$i6] = 34;

        return;
    }

    public void writeRawUTF8String(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: byte[];

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write text value");

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeBytes(byte[],int,int)>(r2, i4, i5);

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i7 < $i6 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i9 = $i8 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i9;

        $r3[$i8] = 34;

        return;
    }

    public void writeUTF8String(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: byte[];

        i6 := @parameter1: int;

        i4 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write text value");

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        if i4 > $i5 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeUTF8Segment(byte[],int,int)>(r2, i6, i4);

        goto label3;

     label2:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeUTF8Segments(byte[],int,int)>(r2, i6, i4);

     label3:
        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i8 < $i7 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label4:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i10;

        $r3[$i9] = 34;

        return;
    }

    public void writeRaw(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r1;
        int i0, $i1, i2, i3, $i4;
        char[] r2;
        java.lang.String r0;

        r1 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i3 <= 0 goto label4;

        r2 = r1.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        i0 = lengthof r2;

        if i3 >= i0 goto label2;

        $i4 = i3;

        goto label3;

     label2:
        $i4 = i0;

     label3:
        $i1 = i2 + $i4;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i2, $i1, r2, 0);

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(char[],int,int)>(r2, 0, $i4);

        i2 = i2 + $i4;

        i3 = i3 - $i4;

        goto label1;

     label4:
        return;
    }

    public void writeRaw(java.lang.String, int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        int i0, $i1, i2, i3, $i4;
        char[] r1;
        java.lang.String r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

     label1:
        if i3 <= 0 goto label4;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        i0 = lengthof r1;

        if i3 >= i0 goto label2;

        $i4 = i3;

        goto label3;

     label2:
        $i4 = i0;

     label3:
        $i1 = i2 + $i4;

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(i2, $i1, r1, 0);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(char[],int,int)>(r1, 0, $i4);

        i2 = i2 + $i4;

        i3 = i3 - $i4;

        goto label1;

     label4:
        return;
    }

    public final void writeRaw(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r2, $r3, $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b6, $b13, $b18;
        short $s17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i19, $i20, i21, i22, i23, $i25, $i26, $i27, $i28;
        char $c7, $c16, c24;
        char[] r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: char[];

        i21 := @parameter1: int;

        i22 := @parameter2: int;

        $i0 = i22 + i22;

        i23 = $i0 + i22;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i1 + i23;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i3 <= $i2 goto label02;

        $i19 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i19 >= i23 goto label01;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeSegmentedRaw(char[],int,int)>(r1, i21, i22);

        return;

     label01:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label02:
        $i20 = i22 + i21;

     label03:
        if i21 >= $i20 goto label10;

     label04:
        $c7 = r1[i21];

        $i25 = (int) $c7;

        if $i25 <= 127 goto label05;

        goto label07;

     label05:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        $b6 = (byte) $c7;

        $r2[$i4] = $b6;

        i21 = i21 + 1;

        if i21 < $i20 goto label06;

        goto label10;

     label06:
        goto label04;

     label07:
        $i8 = i21;

        i21 = i21 + 1;

        c24 = r1[$i8];

        $i26 = (int) c24;

        if $i26 >= 2048 goto label08;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i10;

        $i27 = (int) c24;

        $i11 = $i27 >> 6;

        $i12 = 192 | $i11;

        $b13 = (byte) $i12;

        $r3[$i9] = $b13;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i14 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i15 = $i14 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i15;

        $c16 = c24 & 63;

        $s17 = 128 | $c16;

        $b18 = (byte) $s17;

        $r4[$i14] = $b18;

        goto label09;

     label08:
        $i28 = (int) c24;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputRawMultiByteChar(int,char[],int,int)>($i28, r1, i21, $i20);

     label09:
        goto label03;

     label10:
        return;
    }

    public void writeRaw(char) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        short $s12;
        byte $b8, $b13, $b16;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i14, $i15, $i17, $i18, $i19, $i20;
        char c3, $c11;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        c3 := @parameter0: char;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 3;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i17 = (int) c3;

        if $i17 > 127 goto label2;

        $i14 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i15 = $i14 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i15;

        $b16 = (byte) c3;

        $r1[$i14] = $b16;

        goto label4;

     label2:
        $i18 = (int) c3;

        if $i18 >= 2048 goto label3;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        $i19 = (int) c3;

        $i6 = $i19 >> 6;

        $i7 = 192 | $i6;

        $b8 = (byte) $i7;

        $r1[$i4] = $b8;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i10;

        $c11 = c3 & 63;

        $s12 = 128 | $c11;

        $b13 = (byte) $s12;

        $r1[$i9] = $b13;

        goto label4;

     label3:
        $i20 = (int) c3;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputRawMultiByteChar(int,char[],int,int)>($i20, null, 0, 0);

     label4:
        return;
    }

    private final void _writeSegmentedRaw(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        short $s19;
        byte $b5, $b15, $b20;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, i22, $i23, $i24, $i25, $i26;
        char $c6, $c18, $c21;
        char[] r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: char[];

        i22 := @parameter1: int;

        i1 := @parameter2: int;

        i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

     label01:
        if i22 >= i1 goto label10;

     label02:
        $c6 = r2[i22];

        $i23 = (int) $c6;

        if $i23 < 128 goto label03;

        goto label06;

     label03:
        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        if $i2 < i0 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label04:
        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $b5 = (byte) $c6;

        r1[$i3] = $b5;

        i22 = i22 + 1;

        if i22 < i1 goto label05;

        goto label10;

     label05:
        goto label02;

     label06:
        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i9 = $i7 + 3;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i9 < $i8 goto label07;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label07:
        $i10 = i22;

        i22 = i22 + 1;

        $c21 = r2[$i10];

        $i24 = (int) $c21;

        if $i24 >= 2048 goto label08;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i12 = $i11 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i12;

        $i25 = (int) $c21;

        $i13 = $i25 >> 6;

        $i14 = 192 | $i13;

        $b15 = (byte) $i14;

        r1[$i11] = $b15;

        $i16 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i17 = $i16 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i17;

        $c18 = $c21 & 63;

        $s19 = 128 | $c18;

        $b20 = (byte) $s19;

        r1[$i16] = $b20;

        goto label09;

     label08:
        $i26 = (int) $c21;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputRawMultiByteChar(int,char[],int,int)>($i26, r2, i22, i1);

     label09:
        goto label01;

     label10:
        return;
    }

    public void writeBinary(org.codehaus.jackson.Base64Variant, byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, r3, $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        org.codehaus.jackson.Base64Variant r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: org.codehaus.jackson.Base64Variant;

        r3 := @parameter1: byte[];

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write binary value");

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $i6 = i4 + i5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeBinary(org.codehaus.jackson.Base64Variant,byte[],int,int)>(r2, r3, i4, $i6);

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i8 < $i7 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i10;

        $r4[$i9] = 34;

        return;
    }

    public void writeNumber(int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i3 := @parameter0: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 11;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeQuotedInt(int)>(i3);

        return;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>(i3, $r1, $i4);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        return;
    }

    private final void _writeQuotedInt(int) throws java.io.IOException
    {
        byte[] $r1, $r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i5 := @parameter0: int;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 13;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $r1[$i3] = 34;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>(i5, $r2, $i6);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i9 = $i8 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i9;

        $r3[$i8] = 34;

        return;
    }

    public void writeNumber(long) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        long l3;
        int $i0, $i1, $i2, $i4, $i5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        l3 := @parameter0: long;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeQuotedLong(long)>(l3);

        return;

     label1:
        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 21;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,byte[],int)>(l3, $r1, $i4);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        return;
    }

    private final void _writeQuotedLong(long) throws java.io.IOException
    {
        byte[] $r1, $r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        long l5;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        l5 := @parameter0: long;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 23;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i4;

        $r1[$i3] = 34;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,byte[],int)>(l5, $r2, $i6);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i9 = $i8 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i9;

        $r3[$i8] = 34;

        return;
    }

    public void writeNumber(java.math.BigInteger) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        java.math.BigInteger r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        if r1 != null goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeNull()>();

        goto label3;

     label1:
        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeQuotedRaw(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<java.math.BigInteger: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>($r2);

     label3:
        return;
    }

    public void writeNumber(double) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerator$Feature $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        double d0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        d0 := @parameter0: double;

        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 != 0 goto label1;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z3 == 0 goto label3;

     label1:
        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_NON_NUMERIC_NUMBERS>;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r2);

        if $z2 == 0 goto label3;

     label2:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeString(java.lang.String)>($r1);

        return;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>($r3);

        return;
    }

    public void writeNumber(float) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerator$Feature $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        float f0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        f0 := @parameter0: float;

        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z1 != 0 goto label1;

        $z3 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z3 == 0 goto label3;

     label1:
        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature QUOTE_NON_NUMERIC_NUMBERS>;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r2);

        if $z2 == 0 goto label3;

     label2:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeString(java.lang.String)>($r1);

        return;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>($r3);

        return;
    }

    public void writeNumber(java.math.BigDecimal) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.math.BigDecimal r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.math.BigDecimal;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        if r1 != null goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeNull()>();

        goto label3;

     label1:
        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeQuotedRaw(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<java.math.BigDecimal: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>($r2);

     label3:
        return;
    }

    public void writeNumber(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write number");

        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _cfgNumbersAsStrings>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeQuotedRaw(java.lang.Object)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>(r1);

     label2:
        return;
    }

    private final void _writeQuotedRaw(java.lang.Object) throws java.io.IOException
    {
        byte[] $r1, $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: java.lang.Object;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        $r1[$i2] = 34;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeRaw(java.lang.String)>($r3);

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i4 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $r4[$i6] = 34;

        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write boolean value");

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 5;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        if z0 == 0 goto label2;

        $r2 = <org.codehaus.jackson.impl.Utf8Generator: byte[] TRUE_BYTES>;

        goto label3;

     label2:
        $r2 = <org.codehaus.jackson.impl.Utf8Generator: byte[] FALSE_BYTES>;

     label3:
        $i6 = lengthof $r2;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i6);

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i4 + $i6;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        return;
    }

    public void writeNull() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyValueWrite(java.lang.String)>("write null value");

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeNull()>();

        return;
    }

    protected final void _verifyValueWrite(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r4;
        org.codehaus.jackson.PrettyPrinter $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte b4;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.lang.String r3, $r9;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: int writeValue()>();

        if $i0 != 5 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expecting field name");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>($r9);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 != null goto label8;

        tableswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        b4 = 44;

        goto label6;

     label3:
        b4 = 58;

        goto label6;

     label4:
        b4 = 32;

        goto label6;

     label5:
        return;

     label6:
        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 < $i6 goto label7;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label7:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $r4[$i1] = b4;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i3;

        return;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _verifyPrettyValueWrite(java.lang.String,int)>(r3, $i0);

        return;
    }

    protected final void _verifyPrettyValueWrite(java.lang.String, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.PrettyPrinter $r1, $r2, $r3, $r6, $r7;
        org.codehaus.jackson.impl.Utf8Generator r0;
        org.codehaus.jackson.impl.JsonWriteContext $r4, $r5;
        int i0;
        java.lang.String r8;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label6;
        };

     label1:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r3.<org.codehaus.jackson.PrettyPrinter: void writeArrayValueSeparator(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label7;

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r2.<org.codehaus.jackson.PrettyPrinter: void writeObjectFieldValueSeparator(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label7;

     label3:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r1.<org.codehaus.jackson.PrettyPrinter: void writeRootValueSeparator(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label7;

     label4:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonWriteContext: boolean inArray()>();

        if $z0 == 0 goto label5;

        $r7 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r7.<org.codehaus.jackson.PrettyPrinter: void beforeArrayValues(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label7;

     label5:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z1 = virtualinvoke $r5.<org.codehaus.jackson.impl.JsonWriteContext: boolean inObject()>();

        if $z1 == 0 goto label7;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r6.<org.codehaus.jackson.PrettyPrinter: void beforeObjectEntries(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label7;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _cantHappen()>();

     label7:
        return;
    }

    public final void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3;
        org.codehaus.jackson.JsonGenerator$Feature $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        if $r1 == null goto label1;

        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature FLUSH_PASSED_TO_STREAM>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        byte[] $r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.JsonGenerator$Feature $r4, $r5, $r7;
        org.codehaus.jackson.impl.Utf8Generator r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.OutputStream $r3, $r6, $r9;
        org.codehaus.jackson.impl.JsonWriteContext $r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void close()>();

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        if $r1 == null goto label4;

        $r7 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r7);

        if $z3 == 0 goto label4;

     label1:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.impl.JsonWriteContext getOutputContext()>();

        $z4 = virtualinvoke $r8.<org.codehaus.jackson.JsonStreamContext: boolean inArray()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeEndArray()>();

        goto label3;

     label2:
        $z5 = virtualinvoke $r8.<org.codehaus.jackson.JsonStreamContext: boolean inObject()>();

        if $z5 == 0 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void writeEndObject()>();

     label3:
        goto label1;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        $r9 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        if $r9 == null goto label7;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.IOContext _ioContext>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: boolean isResourceManaged()>();

        if $z0 != 0 goto label5;

        $r4 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature AUTO_CLOSE_TARGET>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r4);

        if $z1 == 0 goto label6;

     label5:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        goto label7;

     label6:
        $r5 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature FLUSH_PASSED_TO_STREAM>;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r5);

        if $z2 == 0 goto label7;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r6.<java.io.OutputStream: void flush()>();

     label7:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _releaseBuffers()>();

        return;
    }

    protected void _releaseBuffers()
    {
        byte[] r1;
        org.codehaus.jackson.io.IOContext $r2, $r3;
        char[] $r4;
        org.codehaus.jackson.impl.Utf8Generator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        if r1 == null goto label1;

        $z0 = r0.<org.codehaus.jackson.impl.Utf8Generator: boolean _bufferRecyclable>;

        if $z0 == 0 goto label1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer> = null;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r3.<org.codehaus.jackson.io.IOContext: void releaseWriteEncodingBuffer(byte[])>(r1);

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

        if $r4 == null goto label2;

        r0.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer> = null;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: void releaseConcatBuffer(char[])>($r4);

     label2:
        return;
    }

    private final void _writeBytes(byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        byte[] r0, $r2;
        org.codehaus.jackson.impl.Utf8Generator r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        $i1 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i1 + i0;

        $i2 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i3 <= $i2 goto label1;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        if i0 <= 512 goto label1;

        $r3 = r1.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i0);

        return;

     label1:
        $r2 = r1.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i4 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, $i4, i0);

        $i5 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i6 = $i5 + i0;

        r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i6;

        return;
    }

    private final void _writeBytes(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        byte[] r1, $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i3 = $i1 + i0;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i3 <= $i2 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        if i0 <= 512 goto label1;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, i4, i0);

        return;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i4, $r2, $i5, i0);

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + i0;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        return;
    }

    private final void _writeStringSegments(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        char[] r2;
        java.lang.String r0;

        r1 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r0 := @parameter0: java.lang.String;

        i6 = virtualinvoke r0.<java.lang.String: int length()>();

        i7 = 0;

        r2 = r1.<org.codehaus.jackson.impl.Utf8Generator: char[] _charBuffer>;

     label1:
        if i6 <= 0 goto label3;

        $i0 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i6);

        $i2 = i7 + $i1;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i7, $i2, r2, 0);

        $i3 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i3 + $i1;

        $i4 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label2;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        specialinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>(r2, 0, $i1);

        i7 = i7 + $i1;

        i6 = i6 - $i1;

        goto label1;

     label3:
        return;
    }

    private final void _writeStringSegments(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        char[] r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: char[];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

     label1:
        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i7);

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i4 = $i2 + $i1;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i4 <= $i3 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment(char[],int,int)>(r1, i6, $i1);

        i6 = i6 + $i1;

        $i5 = i7 - $i1;

        i7 = $i5;

        if $i5 > 0 goto label1;

        return;
    }

    private final void _writeStringSegment(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r1;
        org.codehaus.jackson.io.CharacterEscapes $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b4;
        int[] r2;
        int $i0, $i2, $i3, i5, i6, i7, i8, $i9, $i10;
        char c1;
        char[] r4;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r4 := @parameter0: char[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        i7 = i6 + i5;

        i8 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

     label1:
        if i5 >= i7 goto label3;

        c1 = r4[i5];

        $i9 = (int) c1;

        if $i9 > 127 goto label3;

        $i10 = (int) c1;

        $i2 = r2[$i10];

        if $i2 == 0 goto label2;

        goto label3;

     label2:
        $i3 = i8;

        i8 = i8 + 1;

        $b4 = (byte) c1;

        r1[$i3] = $b4;

        i5 = i5 + 1;

        goto label1;

     label3:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i8;

        if i5 >= i7 goto label6;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

        if $r3 == null goto label4;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeCustomStringSegment2(char[],int,int)>(r4, i5, i7);

        goto label6;

     label4:
        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar>;

        if $i0 != 0 goto label5;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegment2(char[],int,int)>(r4, i5, i7);

        goto label6;

     label5:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeStringSegmentASCII2(char[],int,int)>(r4, i5, i7);

     label6:
        return;
    }

    private final void _writeStringSegment2(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b10, $b13, $b16, $b18;
        int[] $r3;
        short $s12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i14, i15, $i17, i19, i20, i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        char c7, $c11;
        char[] r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: char[];

        i19 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = i0 - i19;

        $i2 = 6 * $i1;

        $i5 = $i3 + $i2;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        i20 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

     label2:
        if i19 >= i0 goto label8;

        $i6 = i19;

        i19 = i19 + 1;

        c7 = r1[$i6];

        $i23 = (int) c7;

        if $i23 > 127 goto label5;

        $i24 = (int) c7;

        $i14 = $r3[$i24];

        if $i14 != 0 goto label3;

        $i17 = i20;

        i20 = i20 + 1;

        $b18 = (byte) c7;

        $r2[$i17] = $b18;

        goto label2;

     label3:
        $i25 = (int) c7;

        i15 = $r3[$i25];

        if i15 <= 0 goto label4;

        i21 = i20 + 1;

        $r2[i20] = 92;

        i20 = i21 + 1;

        $b16 = (byte) i15;

        $r2[i21] = $b16;

        goto label2;

     label4:
        $i26 = (int) c7;

        i20 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i26, i20);

        goto label2;

     label5:
        $i27 = (int) c7;

        if $i27 > 2047 goto label6;

        i22 = i20 + 1;

        $i28 = (int) c7;

        $i8 = $i28 >> 6;

        $i9 = 192 | $i8;

        $b10 = (byte) $i9;

        $r2[i20] = $b10;

        i20 = i22 + 1;

        $c11 = c7 & 63;

        $s12 = 128 | $c11;

        $b13 = (byte) $s12;

        $r2[i22] = $b13;

        goto label7;

     label6:
        $i29 = (int) c7;

        i20 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMultiByteChar(int,int)>($i29, i20);

     label7:
        goto label2;

     label8:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i20;

        return;
    }

    private final void _writeStringSegmentASCII2(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b10, $b13, $b16, $b18;
        int[] $r3;
        short $s12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i14, i15, $i17, $i19, i20, i21, i22, i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        char c7, $c11;
        char[] r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: char[];

        i20 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = i0 - i20;

        $i2 = 6 * $i1;

        $i5 = $i3 + $i2;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        i21 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

        $i19 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar>;

     label2:
        if i20 >= i0 goto label9;

        $i6 = i20;

        i20 = i20 + 1;

        c7 = r1[$i6];

        $i24 = (int) c7;

        if $i24 > 127 goto label5;

        $i25 = (int) c7;

        $i14 = $r3[$i25];

        if $i14 != 0 goto label3;

        $i17 = i21;

        i21 = i21 + 1;

        $b18 = (byte) c7;

        $r2[$i17] = $b18;

        goto label2;

     label3:
        $i26 = (int) c7;

        i15 = $r3[$i26];

        if i15 <= 0 goto label4;

        i22 = i21 + 1;

        $r2[i21] = 92;

        i21 = i22 + 1;

        $b16 = (byte) i15;

        $r2[i22] = $b16;

        goto label2;

     label4:
        $i27 = (int) c7;

        i21 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i27, i21);

        goto label2;

     label5:
        $i28 = (int) c7;

        if $i28 <= $i19 goto label6;

        $i29 = (int) c7;

        i21 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i29, i21);

        goto label2;

     label6:
        $i30 = (int) c7;

        if $i30 > 2047 goto label7;

        i23 = i21 + 1;

        $i31 = (int) c7;

        $i8 = $i31 >> 6;

        $i9 = 192 | $i8;

        $b10 = (byte) $i9;

        $r2[i21] = $b10;

        i21 = i23 + 1;

        $c11 = c7 & 63;

        $s12 = 128 | $c11;

        $b13 = (byte) $s12;

        $r2[i23] = $b13;

        goto label8;

     label7:
        $i32 = (int) c7;

        i21 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMultiByteChar(int,int)>($i32, i21);

     label8:
        goto label2;

     label9:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i21;

        return;
    }

    private final void _writeCustomStringSegment2(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r12;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b12, $b15, $b19, $b21;
        int[] $r13;
        org.codehaus.jackson.JsonGenerationException $r15;
        java.lang.StringBuilder $r6, $r8, $r9, $r14;
        org.codehaus.jackson.io.CharacterEscapes $r11;
        org.codehaus.jackson.SerializableString $r2, $r3;
        short $s14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i10, $i11, $i16, $i17, $i18, $i20, i22, i23, $i24, i25, i26, i27, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;
        java.lang.String $r7, $r10;
        char c9, $c13;
        char[] r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: char[];

        i22 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i1 = i0 - i22;

        $i2 = 6 * $i1;

        $i5 = $i3 + $i2;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label01:
        i23 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $r12 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $r13 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar>;

        if $i6 > 0 goto label02;

        $i29 = (int) 65535;

        $i24 = $i29;

        goto label03;

     label02:
        $i24 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _maximumNonEscapedChar>;

     label03:
        i7 = $i24;

        $r11 = r0.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

     label04:
        if i22 >= i0 goto label14;

        $i8 = i22;

        i22 = i22 + 1;

        c9 = r1[$i8];

        $i30 = (int) c9;

        if $i30 > 127 goto label09;

        $i31 = (int) c9;

        $i17 = $r13[$i31];

        if $i17 != 0 goto label05;

        $i20 = i23;

        i23 = i23 + 1;

        $b21 = (byte) c9;

        $r12[$i20] = $b21;

        goto label04;

     label05:
        $i32 = (int) c9;

        i25 = $r13[$i32];

        if i25 <= 0 goto label06;

        i26 = i23 + 1;

        $r12[i23] = 92;

        i23 = i26 + 1;

        $b19 = (byte) i25;

        $r12[i26] = $b19;

        goto label04;

     label06:
        $i34 = (int) -2;

        if i25 != $i34 goto label08;

        $i35 = (int) c9;

        $r3 = virtualinvoke $r11.<org.codehaus.jackson.io.CharacterEscapes: org.codehaus.jackson.SerializableString getEscapeSequence(int)>($i35);

        if $r3 != null goto label07;

        $r15 = new org.codehaus.jackson.JsonGenerationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid custom escape definitions; custom escape not found for character code 0x");

        $i36 = (int) c9;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i36);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", although was supposed to have one");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.codehaus.jackson.JsonGenerationException: void <init>(java.lang.String)>($r10);

        throw $r15;

     label07:
        $i18 = i0 - i22;

        i23 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeCustomEscape(byte[],int,org.codehaus.jackson.SerializableString,int)>($r12, i23, $r3, $i18);

        goto label04;

     label08:
        $i37 = (int) c9;

        i23 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i37, i23);

        goto label04;

     label09:
        $i38 = (int) c9;

        if $i38 <= i7 goto label10;

        $i39 = (int) c9;

        i23 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i39, i23);

        goto label04;

     label10:
        $i40 = (int) c9;

        $r2 = virtualinvoke $r11.<org.codehaus.jackson.io.CharacterEscapes: org.codehaus.jackson.SerializableString getEscapeSequence(int)>($i40);

        if $r2 == null goto label11;

        $i16 = i0 - i22;

        i23 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeCustomEscape(byte[],int,org.codehaus.jackson.SerializableString,int)>($r12, i23, $r2, $i16);

        goto label04;

     label11:
        $i41 = (int) c9;

        if $i41 > 2047 goto label12;

        i27 = i23 + 1;

        $i42 = (int) c9;

        $i10 = $i42 >> 6;

        $i11 = 192 | $i10;

        $b12 = (byte) $i11;

        $r12[i23] = $b12;

        i23 = i27 + 1;

        $c13 = c9 & 63;

        $s14 = 128 | $c13;

        $b15 = (byte) $s14;

        $r12[i27] = $b15;

        goto label13;

     label12:
        $i43 = (int) c9;

        i23 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMultiByteChar(int,int)>($i43, i23);

     label13:
        goto label04;

     label14:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i23;

        return;
    }

    private int _writeCustomEscape(byte[], int, org.codehaus.jackson.SerializableString, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r1, r2;
        org.codehaus.jackson.impl.Utf8Generator r3;
        org.codehaus.jackson.SerializableString r0;
        int i0, i1, $i2, i3, $i4, $i5;

        r3 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        r0 := @parameter2: org.codehaus.jackson.SerializableString;

        i3 := @parameter3: int;

        $r1 = interfaceinvoke r0.<org.codehaus.jackson.SerializableString: byte[] asUnquotedUTF8()>();

        i0 = lengthof $r1;

        if i0 <= 6 goto label1;

        $i4 = r3.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        $i5 = specialinvoke r3.<org.codehaus.jackson.impl.Utf8Generator: int _handleLongCustomEscape(byte[],int,int,byte[],int)>(r2, i1, $i4, $r1, i3);

        return $i5;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i1, i0);

        $i2 = i1 + i0;

        return $i2;
    }

    private int _handleLongCustomEscape(byte[], int, int, byte[], int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.io.OutputStream $r3;
        byte[] r0, r2;
        org.codehaus.jackson.impl.Utf8Generator r1;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;

        r1 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: byte[];

        i8 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: byte[];

        i3 := @parameter4: int;

        i0 = lengthof r0;

        $i2 = i8 + i0;

        if $i2 <= i1 goto label2;

        r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i8;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        i9 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = lengthof r2;

        if i0 <= $i7 goto label1;

        $r3 = r1.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i0);

        return i9;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, i9, i0);

        i8 = i9 + i0;

     label2:
        $i4 = 6 * i3;

        $i5 = i8 + $i4;

        if $i5 <= i1 goto label3;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        $i6 = r1.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        return $i6;

     label3:
        return i8;
    }

    private final void _writeUTF8Segments(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r1;
        int $i0, $i1, $i2, i3, i4;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

     label1:
        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputMaxContiguous>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i4);

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeUTF8Segment(byte[],int,int)>(r1, i3, $i1);

        i3 = i3 + $i1;

        $i2 = i4 - $i1;

        i4 = $i2;

        if $i2 > 0 goto label1;

        return;
    }

    private final void _writeUTF8Segment(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r2, $r3;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte b10;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, $i13, $i14;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

        i12 = i0;

        i2 = i0 + i1;

     label1:
        if i12 >= i2 goto label3;

        $i9 = i12;

        i12 = i12 + 1;

        b10 = r2[$i9];

        $i13 = (int) b10;

        if $i13 < 0 goto label2;

        $i14 = (int) b10;

        $i11 = r1[$i14];

        if $i11 == 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _writeUTF8Segment2(byte[],int,int)>(r2, i0, i1);

        return;

     label2:
        goto label1;

     label3:
        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i3 + i1;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label4:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r3, $i6, i1);

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i8 = $i7 + i1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i8;

        return;
    }

    private final void _writeUTF8Segment2(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r1, $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte b4, $b8;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, $i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: byte[];

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i0 = i11 * 6;

        $i2 = i12 + $i0;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 <= $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

        i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int[] _outputEscapes>;

        $i9 = i11 + i10;

     label2:
        if i10 >= $i9 goto label7;

        $i3 = i10;

        i10 = i10 + 1;

        b4 = r1[$i3];

        $i14 = (int) b4;

        if $i14 < 0 goto label3;

        $i15 = (int) b4;

        $i6 = $r3[$i15];

        if $i6 != 0 goto label4;

     label3:
        $i5 = i12;

        i12 = i12 + 1;

        $r2[$i5] = b4;

        goto label2;

     label4:
        $i16 = (int) b4;

        i7 = $r3[$i16];

        if i7 <= 0 goto label5;

        i13 = i12 + 1;

        $r2[i12] = 92;

        i12 = i13 + 1;

        $b8 = (byte) i7;

        $r2[i13] = $b8;

        goto label6;

     label5:
        $i17 = (int) b4;

        i12 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _writeGenericEscape(int,int)>($i17, i12);

     label6:
        goto label2;

     label7:
        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = i12;

        return;
    }

    protected void _writeBinary(org.codehaus.jackson.Base64Variant, byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] r2, $r3, $r4, $r5, $r6;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b6, $b9, $b14, $b15, $b17;
        org.codehaus.jackson.Base64Variant r1;
        short $s10, $s16, $s18, $s38, $s40, $s45;
        int i0, i1, $i2, i3, $i4, $i5, $i7, $i8, $i11, $i12, $i13, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, i34, i35, i36, $i37, $i39, $i41, $i43, $i44, $i46;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        r2 := @parameter1: byte[];

        i30 := @parameter2: int;

        i0 := @parameter3: int;

        i1 = i0 - 3;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        i3 = $i2 - 6;

        $i4 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int getMaxLineLength()>();

        i31 = $i4 >> 2;

     label1:
        if i30 > i1 goto label4;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        if $i13 <= i3 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label2:
        i32 = i30 + 1;

        $b14 = r2[i30];

        $i37 = (int) $b14;

        $i27 = $i37 << 8;

        i33 = i32 + 1;

        $b15 = r2[i32];

        $s38 = (short) $b15;

        $s16 = $s38 & 255;

        $i39 = (int) $s16;

        $i28 = $i27 | $i39;

        $i19 = $i28 << 8;

        i30 = i33 + 1;

        $b17 = r2[i33];

        $s40 = (short) $b17;

        $s18 = $s40 & 255;

        $i41 = (int) $s18;

        $i29 = $i19 | $i41;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i20 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i21 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int encodeBase64Chunk(int,byte[],int)>($i29, $r4, $i20);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i21;

        $i43 = (int) -1;

        i31 = i31 + $i43;

        if i31 > 0 goto label3;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i22 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i23 = $i22 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i23;

        $r5[$i22] = 92;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i24 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i25 = $i24 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i25;

        $r6[$i24] = 110;

        $i26 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int getMaxLineLength()>();

        i31 = $i26 >> 2;

     label3:
        goto label1;

     label4:
        i34 = i0 - i30;

        if i34 <= 0 goto label7;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        if $i5 <= i3 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label5:
        i35 = i30 + 1;

        $b6 = r2[i30];

        $i44 = (int) $b6;

        $i12 = $i44 << 16;

        i36 = $i12;

        if i34 != 2 goto label6;

        $b9 = r2[i35];

        $s45 = (short) $b9;

        $s10 = $s45 & 255;

        $i46 = (int) $s10;

        $i11 = $i46 << 8;

        i36 = $i12 | $i11;

     label6:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i8 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int encodeBase64Partial(int,int,byte[],int)>(i36, i34, $r3, $i7);

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i8;

     label7:
        return;
    }

    private final int _outputRawMultiByteChar(int, char[], int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b5, $b11, $b16;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, i17, i18, $i20, $i22, $i24, $i25;
        char $c19;
        char[] r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i0 := @parameter0: int;

        r2 := @parameter1: char[];

        i17 := @parameter2: int;

        i18 := @parameter3: int;

        $i22 = (int) 55296;

        if i0 < $i22 goto label2;

        $i24 = (int) 57343;

        if i0 > $i24 goto label2;

        if i17 < i18 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>("Split surrogate on writeRaw() input (last character)");

     label1:
        $c19 = r2[i17];

        $i25 = (int) $c19;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _outputSurrogates(int,int)>(i0, $i25);

        $i20 = i17 + 1;

        return $i20;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i1 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i2;

        $i3 = i0 >> 12;

        $i4 = 224 | $i3;

        $b5 = (byte) $i4;

        $r1[$i1] = $b5;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $i8 = i0 >> 6;

        $i9 = $i8 & 63;

        $i10 = 128 | $i9;

        $b11 = (byte) $i10;

        $r1[$i6] = $b11;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i13 = $i12 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i13;

        $i14 = i0 & 63;

        $i15 = 128 | $i14;

        $b16 = (byte) $i15;

        $r1[$i12] = $b16;

        return i17;
    }

    protected final void _outputSurrogates(int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b10, $b16, $b22, $b27;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: int _decodeSurrogate(int,int)>(i0, i1);

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i3 + 4;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i5 <= $i4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i7;

        $i8 = $i2 >> 18;

        $i9 = 240 | $i8;

        $b10 = (byte) $i9;

        $r1[$i6] = $b10;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i12 = $i11 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i12;

        $i13 = $i2 >> 12;

        $i14 = $i13 & 63;

        $i15 = 128 | $i14;

        $b16 = (byte) $i15;

        $r1[$i11] = $b16;

        $i17 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i18 = $i17 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i18;

        $i19 = $i2 >> 6;

        $i20 = $i19 & 63;

        $i21 = 128 | $i20;

        $b22 = (byte) $i21;

        $r1[$i17] = $b22;

        $i23 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i24 = $i23 + 1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i24;

        $i25 = $i2 & 63;

        $i26 = 128 | $i25;

        $b27 = (byte) $i26;

        $r1[$i23] = $b27;

        return;
    }

    private final int _outputMultiByteChar(int, int) throws java.io.IOException
    {
        byte[] r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b3, $b7, $b10, $b13, $b16, $b19, $b21;
        int i0, $i1, $i2, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i15, $i17, $i18, $i20, i22, i23, i24, i25, i26, i27, i28, i29, i30, $i32, $i34;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i0 := @parameter0: int;

        i22 := @parameter1: int;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i32 = (int) 55296;

        if i0 < $i32 goto label1;

        $i34 = (int) 57343;

        if i0 > $i34 goto label1;

        i23 = i22 + 1;

        r1[i22] = 92;

        i24 = i23 + 1;

        r1[i23] = 117;

        i25 = i24 + 1;

        $r2 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i11 = i0 >> 12;

        $i12 = $i11 & 15;

        $b13 = $r2[$i12];

        r1[i24] = $b13;

        i26 = i25 + 1;

        $r3 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i14 = i0 >> 8;

        $i15 = $i14 & 15;

        $b16 = $r3[$i15];

        r1[i25] = $b16;

        i27 = i26 + 1;

        $r4 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i17 = i0 >> 4;

        $i18 = $i17 & 15;

        $b19 = $r4[$i18];

        r1[i26] = $b19;

        i28 = i27 + 1;

        $r5 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i20 = i0 & 15;

        $b21 = $r5[$i20];

        r1[i27] = $b21;

        goto label2;

     label1:
        i29 = i22 + 1;

        $i1 = i0 >> 12;

        $i2 = 224 | $i1;

        $b3 = (byte) $i2;

        r1[i22] = $b3;

        i30 = i29 + 1;

        $i4 = i0 >> 6;

        $i5 = $i4 & 63;

        $i6 = 128 | $i5;

        $b7 = (byte) $i6;

        r1[i29] = $b7;

        i28 = i30 + 1;

        $i8 = i0 & 63;

        $i9 = 128 | $i8;

        $b10 = (byte) $i9;

        r1[i30] = $b10;

     label2:
        return i28;
    }

    protected final int _decodeSurrogate(int, int) throws java.io.IOException
    {
        org.codehaus.jackson.impl.Utf8Generator r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        java.lang.String $r2, $r5, $r7;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r9;

        r8 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i8 = (int) 56320;

        if i0 < $i8 goto label1;

        $i10 = (int) 57343;

        if i0 <= $i10 goto label2;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete surrogate pair: first char 0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", second 0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<org.codehaus.jackson.impl.Utf8Generator: void _reportError(java.lang.String)>($r7);

     label2:
        $i12 = (int) 55296;

        $i2 = i1 - $i12;

        $i3 = $i2 << 10;

        $i4 = 65536 + $i3;

        $i14 = (int) 56320;

        $i5 = i0 - $i14;

        $i6 = $i4 + $i5;

        return $i6;
    }

    private final void _writeNull() throws java.io.IOException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i2 = $i0 + 4;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputEnd>;

        if $i2 < $i1 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8Generator: void _flushBuffer()>();

     label1:
        $r2 = <org.codehaus.jackson.impl.Utf8Generator: byte[] NULL_BYTES>;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, 4);

        $i4 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        $i5 = $i4 + 4;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = $i5;

        return;
    }

    private int _writeGenericEscape(int, int) throws java.io.IOException
    {
        byte[] r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.impl.Utf8Generator r0;
        byte $b1, $b3, $b7, $b9;
        int $i0, $i2, $i4, i5, $i6, $i8, i10, i11, i12, i13, i14, i15, i16, i17, i18;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i10 := @parameter0: int;

        i11 := @parameter1: int;

        r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        i12 = i11 + 1;

        r1[i11] = 92;

        i13 = i12 + 1;

        r1[i12] = 117;

        if i10 <= 255 goto label1;

        $i4 = i10 >> 8;

        i5 = $i4 & 255;

        i14 = i13 + 1;

        $r4 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i6 = i5 >> 4;

        $b7 = $r4[$i6];

        r1[i13] = $b7;

        i15 = i14 + 1;

        $r5 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i8 = i5 & 15;

        $b9 = $r5[$i8];

        r1[i14] = $b9;

        i10 = i10 & 255;

        goto label2;

     label1:
        i16 = i13 + 1;

        r1[i13] = 48;

        i15 = i16 + 1;

        r1[i16] = 48;

     label2:
        i17 = i15 + 1;

        $r2 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i0 = i10 >> 4;

        $b1 = $r2[$i0];

        r1[i15] = $b1;

        i18 = i17 + 1;

        $r3 = <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS>;

        $i2 = i10 & 15;

        $b3 = $r3[$i2];

        r1[i17] = $b3;

        return i18;
    }

    protected final void _flushBuffer() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        int i0;
        org.codehaus.jackson.impl.Utf8Generator r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8Generator;

        i0 = r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail>;

        if i0 <= 0 goto label1;

        r0.<org.codehaus.jackson.impl.Utf8Generator: int _outputTail> = 0;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8Generator: java.io.OutputStream _outputStream>;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8Generator: byte[] _outputBuffer>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, i0);

     label1:
        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;
        int[] $r4;

        <org.codehaus.jackson.impl.Utf8Generator: int MAX_BYTES_TO_BUFFER> = 512;

        <org.codehaus.jackson.impl.Utf8Generator: int SURR2_LAST> = 57343;

        <org.codehaus.jackson.impl.Utf8Generator: int SURR2_FIRST> = 56320;

        <org.codehaus.jackson.impl.Utf8Generator: int SURR1_LAST> = 56319;

        <org.codehaus.jackson.impl.Utf8Generator: int SURR1_FIRST> = 55296;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_QUOTE> = 34;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_COLON> = 58;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_COMMA> = 44;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_SPACE> = 32;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_BACKSLASH> = 92;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_RCURLY> = 125;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_LCURLY> = 123;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_RBRACKET> = 93;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_LBRACKET> = 91;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_0> = 48;

        <org.codehaus.jackson.impl.Utf8Generator: byte BYTE_u> = 117;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: byte[] copyHexBytes()>();

        <org.codehaus.jackson.impl.Utf8Generator: byte[] HEX_CHARS> = $r0;

        $r1 = newarray (byte)[4];

        $r1[0] = 110;

        $r1[1] = 117;

        $r1[2] = 108;

        $r1[3] = 108;

        <org.codehaus.jackson.impl.Utf8Generator: byte[] NULL_BYTES> = $r1;

        $r2 = newarray (byte)[4];

        $r2[0] = 116;

        $r2[1] = 114;

        $r2[2] = 117;

        $r2[3] = 101;

        <org.codehaus.jackson.impl.Utf8Generator: byte[] TRUE_BYTES> = $r2;

        $r3 = newarray (byte)[5];

        $r3[0] = 102;

        $r3[1] = 97;

        $r3[2] = 108;

        $r3[3] = 115;

        $r3[4] = 101;

        <org.codehaus.jackson.impl.Utf8Generator: byte[] FALSE_BYTES> = $r3;

        $r4 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] get7BitOutputEscapes()>();

        <org.codehaus.jackson.impl.Utf8Generator: int[] sOutputEscapes> = $r4;

        return;
    }
}
