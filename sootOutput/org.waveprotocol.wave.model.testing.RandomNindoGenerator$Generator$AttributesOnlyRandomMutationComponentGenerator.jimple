abstract class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    abstract org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector);

    abstract void apply(org.waveprotocol.wave.model.document.operation.Attributes);

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r2;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$2 $r4;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$1 $r1;
        org.waveprotocol.wave.model.document.operation.Attributes $r3;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r1 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator)>(r0);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.Attributes generateRandomAttributes(boolean,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker)>(z0, $r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$2;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator$2: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesOnlyRandomMutationComponentGenerator,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, $r3);

        return $r4;
    }
}
