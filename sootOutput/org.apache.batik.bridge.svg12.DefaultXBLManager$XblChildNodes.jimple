public class org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes extends java.lang.Object implements org.w3c.dom.NodeList
{
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record;
    protected java.util.List nodes;
    protected int size;
    private final org.apache.batik.bridge.svg12.DefaultXBLManager this$0;

    public void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager, org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord r2;
        int $i1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        r1 := @parameter0: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0> = r1;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record> = r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes> = $r4;

        $i1 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = $i1;

        return;
    }

    protected void update()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r1, $r6, $r7;
        org.apache.batik.bridge.svg12.DefaultXBLManager $r3, $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;
        org.w3c.dom.Element $r4;
        org.w3c.dom.Node $r2, $r8, r9, $r10, r11;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = 0;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record>;

        $r2 = $r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node node>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>($r2);

        r9 = null;

        if $r4 != null goto label1;

        $r7 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record>;

        $r8 = $r7.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node node>;

        $r10 = interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label2:
        r11 = $r10;

        goto label4;

     label3:
        r9 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.w3c.dom.Node collectXblChildNodes(org.w3c.dom.Node,org.w3c.dom.Node)>(r11, r9);

        r11 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if r11 != null goto label3;

        if r9 == null goto label5;

        $r5 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r9);

        $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node nextSibling> = null;

        $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid> = 1;

     label5:
        return;
    }

    protected org.w3c.dom.Node collectXblChildNodes(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager $r3, $r5, $r9;
        short $s0;
        org.w3c.dom.Node r0, $r13, r14;
        int $i1, $i2, $i3, i4;
        java.lang.String $r7, $r8;
        boolean $z0, $z1, z2;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r4, $r6;
        org.w3c.dom.NodeList $r12;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r1;
        java.util.List $r2;
        org.apache.batik.bridge.svg12.ContentManager $r10;
        org.apache.batik.dom.svg12.XBLOMContentElement $r11;

        r1 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        r0 := @parameter0: org.w3c.dom.Node;

        r14 := @parameter1: org.w3c.dom.Node;

        z2 = 0;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r7 = "http://www.w3.org/2004/xbl";

        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label1;

        z2 = 1;

        goto label6;

     label1:
        $z1 = r0 instanceof org.apache.batik.dom.svg12.XBLOMContentElement;

        if $z1 == 0 goto label6;

        $r9 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.ContentManager getContentManager(org.w3c.dom.Node)>(r0);

        if $r10 == null goto label4;

        $r11 = (org.apache.batik.dom.svg12.XBLOMContentElement) r0;

        $r12 = virtualinvoke $r10.<org.apache.batik.bridge.svg12.ContentManager: org.w3c.dom.NodeList getSelectedContent(org.apache.batik.dom.svg12.XBLOMContentElement)>($r11);

        i4 = 0;

        goto label3;

     label2:
        $r13 = interfaceinvoke $r12.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        r14 = virtualinvoke r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.w3c.dom.Node collectXblChildNodes(org.w3c.dom.Node,org.w3c.dom.Node)>($r13, r14);

        i4 = i4 + 1;

     label3:
        $i3 = interfaceinvoke $r12.<org.w3c.dom.NodeList: int getLength()>();

        if i4 < $i3 goto label2;

     label4:
        goto label6;

     label5:
        z2 = 1;

     label6:
        if z2 == 0 goto label8;

        $r2 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $i1 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i2 = $i1 + 1;

        r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = $i2;

        if r14 == null goto label7;

        $r5 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r14);

        $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node nextSibling> = r0;

        $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid> = 1;

     label7:
        $r3 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r0);

        $r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node previousSibling> = r14;

        $r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid> = 1;

        r14 = r0;

     label8:
        return r14;
    }

    public void invalidate()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;
        java.util.List $r1, $r6;
        org.w3c.dom.Node $r4;
        int $i0, i1, $i3;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.w3c.dom.Node) $r3;

        $r5 = virtualinvoke $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>($r4);

        $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node previousSibling> = null;

        $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node nextSibling> = null;

        $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid> = 0;

        i1 = i1 + 1;

     label2:
        $i0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        if i1 < $i0 goto label1;

        $r6 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $i3 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = $i3;

        return;
    }

    public org.w3c.dom.Node getFirstNode()
    {
        java.util.List $r1;
        org.w3c.dom.Node $r3;
        int $i0, $i1, $i3;
        java.lang.Object $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        $i0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void update()>();

     label1:
        $i1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        if $i1 != 0 goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.w3c.dom.Node) $r2;

     label3:
        return $r3;
    }

    public org.w3c.dom.Node getLastNode()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;
        java.util.List $r1, $r2;
        org.w3c.dom.Node $r4;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        $i0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void update()>();

     label1:
        $i1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        if $i1 != 0 goto label2;

        $r4 = null;

        goto label3;

     label2:
        $r2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = (org.w3c.dom.Node) $r3;

     label3:
        return $r4;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;
        java.util.List $r1;
        org.w3c.dom.Node $r3;
        int $i0, i1, $i2, $i4;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void update()>();

     label1:
        if i1 < 0 goto label2;

        $i2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        if i1 < $i2 goto label3;

     label2:
        return null;

     label3:
        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.w3c.dom.Node) $r2;

        return $r3;
    }

    public int getLength()
    {
        int $i0, $i1, $i3;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes r0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        $i0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void update()>();

     label1:
        $i1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        return $i1;
    }
}
