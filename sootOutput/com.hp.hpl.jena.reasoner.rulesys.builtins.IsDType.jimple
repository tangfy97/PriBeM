public class com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType;

        return "isDType";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType;

        return 2;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        com.hp.hpl.jena.graph.Node[] r2;
        int i0;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType: void checkArgs(int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i0, r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r2, r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(1, r2, r1);

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.builtins.IsDType: boolean isTypeOK(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4);

        return $z0;
    }

    public static boolean isTypeOK(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r5;
        com.hp.hpl.jena.graph.Node r0, r1, $r4;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3, $r7;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r2, $r8;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label5;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r3 == null goto label3;

        $z5 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: boolean isWellFormed()>();

        if $z5 != 0 goto label3;

        return 0;

     label3:
        $r4 = <com.hp.hpl.jena.vocabulary.RDFS$Nodes: com.hp.hpl.jena.graph.Node Literal>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $r5 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r7 = virtualinvoke $r5.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r6);

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z4 = interfaceinvoke $r7.<com.hp.hpl.jena.datatypes.RDFDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r8);

        return $z4;

     label5:
        return 0;
    }
}
