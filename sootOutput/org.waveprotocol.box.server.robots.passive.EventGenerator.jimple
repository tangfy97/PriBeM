public class org.waveprotocol.box.server.robots.passive.EventGenerator extends java.lang.Object
{
    private final com.google.wave.api.robot.RobotName robotName;
    private final org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil;
    private boolean isEventProcessingSuspended;
    private final org.waveprotocol.wave.model.wave.ParticipantId robotId;

    private void addEvent(com.google.wave.api.event.Event, java.util.Map, java.lang.String, com.google.wave.api.impl.EventMessageBundle)
    {
        com.google.wave.api.impl.EventMessageBundle r3;
        org.waveprotocol.box.server.robots.passive.EventGenerator r0;
        com.google.wave.api.event.Event r1;
        com.google.wave.api.event.EventType $r5;
        com.google.wave.api.robot.Capability r7;
        java.util.List r8;
        java.util.Map r4;
        java.lang.Object $r6;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r1 := @parameter0: com.google.wave.api.event.Event;

        r4 := @parameter1: java.util.Map;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.google.wave.api.impl.EventMessageBundle;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: boolean isEventFilteredOut(com.google.wave.api.event.Event)>(r1);

        if $z0 != 0 goto label4;

        $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r2);

        if $z1 != 0 goto label3;

        $r5 = interfaceinvoke r1.<com.google.wave.api.event.Event: com.google.wave.api.event.EventType getType()>();

        $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (com.google.wave.api.robot.Capability) $r6;

        if r7 != null goto label1;

        r8 = <com.google.wave.api.robot.Capability: java.util.List DEFAULT_CONTEXT>;

        goto label2;

     label1:
        r8 = virtualinvoke r7.<com.google.wave.api.robot.Capability: java.util.List getContexts()>();

     label2:
        virtualinvoke r3.<com.google.wave.api.impl.EventMessageBundle: void requireBlip(java.lang.String,java.util.List)>(r2, r8);

     label3:
        virtualinvoke r3.<com.google.wave.api.impl.EventMessageBundle: void addEvent(com.google.wave.api.event.Event)>(r1);

     label4:
        return;
    }

    protected boolean isEventFilteredOut(com.google.wave.api.event.Event)
    {
        org.waveprotocol.box.server.robots.passive.EventGenerator r5;
        com.google.wave.api.event.Event r0;
        com.google.wave.api.event.EventType $r1, $r2, $r3, $r4;
        com.google.wave.api.robot.RobotName $r7;
        java.lang.String $r6, $r8;
        boolean $z0, $z1, $z2, $z3, z4;

        r5 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r0 := @parameter0: com.google.wave.api.event.Event;

        z4 = 0;

        $r1 = interfaceinvoke r0.<com.google.wave.api.event.Event: com.google.wave.api.event.EventType getType()>();

        $r2 = <com.google.wave.api.event.EventType: com.google.wave.api.event.EventType WAVELET_SELF_REMOVED>;

        $z0 = virtualinvoke $r1.<com.google.wave.api.event.EventType: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        r5.<org.waveprotocol.box.server.robots.passive.EventGenerator: boolean isEventProcessingSuspended> = 1;

        z4 = 1;

     label1:
        $r3 = interfaceinvoke r0.<com.google.wave.api.event.Event: com.google.wave.api.event.EventType getType()>();

        $r4 = <com.google.wave.api.event.EventType: com.google.wave.api.event.EventType WAVELET_SELF_ADDED>;

        $z1 = virtualinvoke $r3.<com.google.wave.api.event.EventType: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        r5.<org.waveprotocol.box.server.robots.passive.EventGenerator: boolean isEventProcessingSuspended> = 0;

     label2:
        $z2 = r5.<org.waveprotocol.box.server.robots.passive.EventGenerator: boolean isEventProcessingSuspended>;

        if $z2 == 0 goto label3;

        if z4 == 0 goto label4;

     label3:
        $r6 = interfaceinvoke r0.<com.google.wave.api.event.Event: java.lang.String getModifiedBy()>();

        $r7 = r5.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName>;

        $r8 = virtualinvoke $r7.<com.google.wave.api.robot.RobotName: java.lang.String toParticipantAddress()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public void <init>(com.google.wave.api.robot.RobotName, org.waveprotocol.box.server.robots.util.ConversationUtil)
    {
        com.google.wave.api.robot.RobotName r1;
        org.waveprotocol.box.server.robots.util.ConversationUtil r2;
        org.waveprotocol.box.server.robots.passive.EventGenerator r0;
        java.lang.String $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;

        r0 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r1 := @parameter0: com.google.wave.api.robot.RobotName;

        r2 := @parameter1: org.waveprotocol.box.server.robots.util.ConversationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName> = r1;

        r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil> = r2;

        $r3 = virtualinvoke r1.<com.google.wave.api.robot.RobotName: java.lang.String toParticipantAddress()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r3);

        r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.wave.model.wave.ParticipantId robotId> = $r4;

        return;
    }

    public com.google.wave.api.impl.EventMessageBundle generateEvents(org.waveprotocol.box.server.robots.passive.WaveletAndDeltas, java.util.Map, com.google.wave.api.data.converter.EventDataConverter)
    {
        com.google.wave.api.impl.EventMessageBundle $r0;
        java.lang.IllegalStateException $r45;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r46;
        org.waveprotocol.wave.model.wave.ParticipantId $r8, $r31, $r35;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r16;
        org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingConversationListener $r17;
        java.util.Map r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.waveprotocol.wave.model.id.WaveId $r11;
        org.waveprotocol.box.server.robots.passive.EventGenerator r1;
        java.util.Collection $r24, $r39;
        java.util.Set $r7;
        com.google.wave.api.robot.RobotName $r2, $r9, $r19, $r36;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r13, $r14;
        java.util.List $r26;
        org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler r42, r47;
        java.lang.Throwable $r38;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r34;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r4;
        org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingWaveletListener $r20;
        java.util.HashMap $r21;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r10;
        org.waveprotocol.box.common.DeltaSequence $r22;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r5;
        org.waveprotocol.wave.model.operation.OperationException $r44;
        com.google.wave.api.data.converter.EventDataConverter r27;
        org.waveprotocol.wave.model.wave.ParticipationHelper $r15;
        java.lang.String $r3, $r37;
        org.waveprotocol.wave.model.document.ObservableDocument $r29, $r43;
        java.util.Iterator $r23, $r25, $r32, $r40;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r6;
        org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory $r12;
        java.lang.Object $r28, $r30, $r33, $r41;

        r1 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r4 := @parameter0: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        r18 := @parameter1: java.util.Map;

        r27 := @parameter2: com.google.wave.api.data.converter.EventDataConverter;

        $r0 = new com.google.wave.api.impl.EventMessageBundle;

        $r2 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName>;

        $r3 = virtualinvoke $r2.<com.google.wave.api.robot.RobotName: java.lang.String toEmailAddress()>();

        specialinvoke $r0.<com.google.wave.api.impl.EventMessageBundle: void <init>(java.lang.String,java.lang.String)>($r3, "");

        $r5 = virtualinvoke r4.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshotBeforeDeltas()>();

        $r6 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r5);

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getParticipants()>();

        $r8 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.wave.model.wave.ParticipantId robotId>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 != 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: boolean isEventProcessingSuspended> = $z8;

        $r9 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName>;

        $z1 = virtualinvoke $r9.<com.google.wave.api.robot.RobotName: boolean hasProxyFor()>();

        if $z1 == 0 goto label03;

        $r36 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName>;

        $r37 = virtualinvoke $r36.<com.google.wave.api.robot.RobotName: java.lang.String getProxyFor()>();

        virtualinvoke $r0.<com.google.wave.api.impl.EventMessageBundle: void setProxyingFor(java.lang.String)>($r37);

     label03:
        $r10 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r11 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r12 = new org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory;

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(null);

        $r15 = <org.waveprotocol.wave.model.wave.ParticipationHelper: org.waveprotocol.wave.model.wave.ParticipationHelper DEFAULT>;

        $r14 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        $r13 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        specialinvoke $r10.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>($r11, $r6, $r12, $r15, $r14, $r13);

        $r16 = specialinvoke r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.wave.model.conversation.ObservableConversation getRootConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r10);

        if $r16 != null goto label04;

        return $r0;

     label04:
        $r17 = new org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingConversationListener;

        $r19 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: com.google.wave.api.robot.RobotName robotName>;

        specialinvoke $r17.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingConversationListener: void <init>(org.waveprotocol.box.server.robots.passive.EventGenerator,org.waveprotocol.wave.model.conversation.Conversation,java.util.Map,com.google.wave.api.impl.EventMessageBundle,com.google.wave.api.robot.RobotName)>(r1, $r16, r18, $r0, $r19);

        interfaceinvoke $r16.<org.waveprotocol.wave.model.conversation.ObservableConversation: void addListener(java.lang.Object)>($r17);

        $r20 = new org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingWaveletListener;

        specialinvoke $r20.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingWaveletListener: void <init>(java.util.Map)>(r18);

        virtualinvoke $r10.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void addListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r20);

        $r21 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

     label05:
        $r22 = virtualinvoke r4.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence getDeltas()>();

        $r23 = virtualinvoke $r22.<org.waveprotocol.box.common.DeltaSequence: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r30 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r30;

        $r31 = virtualinvoke r46.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        virtualinvoke $r17.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingConversationListener: void deltaBegin(org.waveprotocol.wave.model.wave.ParticipantId,long)>($r31, 0L);

        $r32 = virtualinvoke r46.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label07:
        $z5 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r33;

        $z6 = r34 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z6 == 0 goto label08;

        $r35 = virtualinvoke r46.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        specialinvoke r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: void attachDocHandler(org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.operation.wave.WaveletOperation,java.util.Map,java.util.Map,com.google.wave.api.impl.EventMessageBundle,org.waveprotocol.wave.model.wave.ParticipantId,long)>($r16, r34, $r21, r18, $r0, $r35, 0L);

     label08:
        virtualinvoke r34.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>($r6);

        goto label07;

     label09:
        virtualinvoke $r17.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingConversationListener: void deltaEnd()>();

        goto label06;

     label10:
        interfaceinvoke $r16.<org.waveprotocol.wave.model.conversation.ObservableConversation: void removeListener(java.lang.Object)>($r17);

        virtualinvoke $r10.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r20);

        $r24 = interfaceinvoke $r21.<java.util.Map: java.util.Collection values()>();

        $r25 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r28 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r47 = (org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler) $r28;

        $r29 = r47.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler: org.waveprotocol.wave.model.document.ObservableDocument doc>;

        interfaceinvoke $r29.<org.waveprotocol.wave.model.document.ObservableDocument: void removeListener(java.lang.Object)>(r47);

        goto label11;

     label12:
        goto label18;

     label13:
        $r44 := @caughtexception;

        $r45 = new java.lang.IllegalStateException;

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Operation failed to apply when generating events", $r44);

        throw $r45;

     label14:
        $r38 := @caughtexception;

     label15:
        interfaceinvoke $r16.<org.waveprotocol.wave.model.conversation.ObservableConversation: void removeListener(java.lang.Object)>($r17);

        virtualinvoke $r10.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r20);

        $r39 = interfaceinvoke $r21.<java.util.Map: java.util.Collection values()>();

        $r40 = interfaceinvoke $r39.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z7 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label17;

        $r41 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r42 = (org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler) $r41;

        $r43 = r42.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler: org.waveprotocol.wave.model.document.ObservableDocument doc>;

        interfaceinvoke $r43.<org.waveprotocol.wave.model.document.ObservableDocument: void removeListener(java.lang.Object)>(r42);

        goto label16;

     label17:
        throw $r38;

     label18:
        $r26 = virtualinvoke $r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List getEvents()>();

        $z4 = interfaceinvoke $r26.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label19;

        return $r0;

     label19:
        staticinvoke <com.google.wave.api.data.converter.ContextResolver: void resolveContext(com.google.wave.api.impl.EventMessageBundle,org.waveprotocol.wave.model.wave.Wavelet,org.waveprotocol.wave.model.conversation.Conversation,com.google.wave.api.data.converter.EventDataConverter)>($r0, $r10, $r16, r27);

        return $r0;

        catch org.waveprotocol.wave.model.operation.OperationException from label05 to label10 with label13;
        catch java.lang.Throwable from label05 to label10 with label14;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    private void attachDocHandler(org.waveprotocol.wave.model.conversation.ObservableConversation, org.waveprotocol.wave.model.operation.wave.WaveletOperation, java.util.Map, java.util.Map, com.google.wave.api.impl.EventMessageBundle, org.waveprotocol.wave.model.wave.ParticipantId, long)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        com.google.wave.api.impl.EventMessageBundle r14;
        long l0;
        org.waveprotocol.wave.model.wave.ParticipantId r8;
        org.waveprotocol.wave.model.conversation.ObservableConversation r3;
        java.lang.Long $r15;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip $r4;
        java.util.Map r6, r13;
        java.lang.String $r2, $r5;
        org.waveprotocol.wave.model.document.ObservableDocument r10;
        org.waveprotocol.box.server.robots.passive.EventGenerator r12;
        org.waveprotocol.wave.model.document.Document $r9;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;
        java.lang.Object $r7;
        org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler $r11, r16;

        r12 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r3 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversation;

        r0 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r6 := @parameter2: java.util.Map;

        r13 := @parameter3: java.util.Map;

        r14 := @parameter4: com.google.wave.api.impl.EventMessageBundle;

        r8 := @parameter5: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter6: long;

        r1 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.conversation.ObservableConversation: org.waveprotocol.wave.model.conversation.ObservableConversationBlip getBlip(java.lang.String)>($r2);

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableConversationBlip: java.lang.String getId()>();

        $r7 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r16 = (org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler) $r7;

        if r16 != null goto label1;

        $r9 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        r10 = (org.waveprotocol.wave.model.document.ObservableDocument) $r9;

        $r11 = new org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r11.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler: void <init>(org.waveprotocol.box.server.robots.passive.EventGenerator,org.waveprotocol.wave.model.document.ObservableDocument,org.waveprotocol.wave.model.conversation.ConversationBlip,java.util.Map,com.google.wave.api.impl.EventMessageBundle,org.waveprotocol.wave.model.wave.ParticipantId,java.lang.Long)>(r12, r10, $r4, r13, r14, r8, $r15);

        interfaceinvoke r10.<org.waveprotocol.wave.model.document.ObservableDocument: void addListener(java.lang.Object)>($r11);

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r11);

        goto label2;

     label1:
        virtualinvoke r16.<org.waveprotocol.box.server.robots.passive.EventGenerator$EventGeneratingDocumentHandler: void setAuthorAndTimeStamp(org.waveprotocol.wave.model.wave.ParticipantId,long)>(r8, l0);

     label2:
        return;
    }

    private org.waveprotocol.wave.model.conversation.ObservableConversation getRootConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.box.server.robots.util.ConversationUtil $r2;
        org.waveprotocol.box.server.robots.passive.EventGenerator r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread $r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r4;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip $r6;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $z0 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean waveletHasConversation(org.waveprotocol.wave.model.wave.Wavelet)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r1.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.conversation.ObservableConversationView buildConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r0);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableConversationView: org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableConversation: org.waveprotocol.wave.model.conversation.ObservableConversationThread getRootThread()>();

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.conversation.ObservableConversationThread: org.waveprotocol.wave.model.conversation.ObservableConversationBlip getFirstBlip()>();

        if $r6 != null goto label2;

        return null;

     label2:
        return $r4;
    }

    static org.waveprotocol.wave.model.wave.ParticipantId access$000(org.waveprotocol.box.server.robots.passive.EventGenerator)
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.box.server.robots.passive.EventGenerator r0;

        r0 := @parameter0: org.waveprotocol.box.server.robots.passive.EventGenerator;

        $r1 = r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: org.waveprotocol.wave.model.wave.ParticipantId robotId>;

        return $r1;
    }

    static void access$100(org.waveprotocol.box.server.robots.passive.EventGenerator, com.google.wave.api.event.Event, java.util.Map, java.lang.String, com.google.wave.api.impl.EventMessageBundle)
    {
        com.google.wave.api.impl.EventMessageBundle r4;
        org.waveprotocol.box.server.robots.passive.EventGenerator r0;
        java.util.Map r2;
        com.google.wave.api.event.Event r1;
        java.lang.String r3;

        r0 := @parameter0: org.waveprotocol.box.server.robots.passive.EventGenerator;

        r1 := @parameter1: com.google.wave.api.event.Event;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.google.wave.api.impl.EventMessageBundle;

        specialinvoke r0.<org.waveprotocol.box.server.robots.passive.EventGenerator: void addEvent(com.google.wave.api.event.Event,java.util.Map,java.lang.String,com.google.wave.api.impl.EventMessageBundle)>(r1, r2, r3, r4);

        return;
    }
}
