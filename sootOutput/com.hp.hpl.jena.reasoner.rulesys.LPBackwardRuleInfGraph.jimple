public class com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph extends com.hp.hpl.jena.reasoner.BaseInfGraph implements com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine;
    protected com.hp.hpl.jena.util.OneToManyMap derivations;
    protected com.hp.hpl.jena.reasoner.FGraph fschema;
    protected com.hp.hpl.jena.reasoner.FGraph fdeductions;
    protected com.hp.hpl.jena.reasoner.Finder dataFind;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache;
    static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r5;
        com.hp.hpl.jena.reasoner.Reasoner r2;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache $r6;
        com.hp.hpl.jena.reasoner.FGraph $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r4;
        com.hp.hpl.jena.graph.Graph r1, r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r5 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter2: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter3: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.Reasoner)>(r1, r2);

        if r3 == null goto label1;

        $r7 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r3);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fschema> = $r7;

     label1:
        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)>(r0, r5);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine> = $r4;

        $r6 = new com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache;

        specialinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache: void <init>(com.hp.hpl.jena.reasoner.InfGraph)>(r0);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache> = $r6;

        return;
    }

    public com.hp.hpl.jena.graph.Graph getSchemaGraph()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fschema>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        return $r2;
    }

    public synchronized void prepare()
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r3, $r4, $r5, $r6, $r9;
        com.hp.hpl.jena.reasoner.Finder $r7, $r8, $r10, $r11;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new com.hp.hpl.jena.reasoner.FGraph;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions> = $r1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void extractAxioms()>();

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r3;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        if $r4 == null goto label2;

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r10, $r9);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r11;

     label2:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fschema>;

        if $r5 == null goto label3;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fschema>;

        $r8 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r7, $r6);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r8;

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setPreparedState(boolean)>(1);

        return;
    }

    public synchronized void rebind(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.FGraph $r2;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r2 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r3);

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata> = $r2;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public synchronized void rebind()
    {
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public synchronized void reset()
    {
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public synchronized com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r4;
        com.hp.hpl.jena.util.iterator.Filter $r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r5, $r8, $r9, r10;
        com.hp.hpl.jena.reasoner.Finder r6;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r6 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void requirePrepared()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $r4 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r4.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r4);

        r10 = $r5;

        if r6 == null goto label1;

        $r9 = interfaceinvoke r6.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        r10 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r9);

     label1:
        $r7 = <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.util.iterator.Filter acceptFilter>;

        $r8 = interfaceinvoke r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterDrop(com.hp.hpl.jena.util.iterator.Filter)>($r7);

        return $r8;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>($r1, null);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, null);

        return $r2;
    }

    public synchronized void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r2;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        com.hp.hpl.jena.graph.Graph $r3;
        com.hp.hpl.jena.graph.Triple r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r4);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public synchronized void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r2;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        com.hp.hpl.jena.graph.Graph $r3;
        com.hp.hpl.jena.graph.Triple r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r4);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public void setTabled(com.hp.hpl.jena.graph.Node)
    {
        org.slf4j.Logger $r4;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void tablePredicate(com.hp.hpl.jena.graph.Node)>(r1);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: boolean isTraceOn()>();

        if $z0 == 0 goto label1;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LP TABLE ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r7);

     label1:
        return;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        com.hp.hpl.jena.util.OneToManyMap $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void setDerivationLogging(boolean)>(z0);

        if z0 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r2.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = $r2;

        goto label2;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = null;

     label2:
        return;
    }

    public java.util.Iterator getDerivation(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r5;
        java.util.Iterator $r4;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.util.OneToManyMap $r1, $r3;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        if $r1 != null goto label1;

        $r5 = new com.hp.hpl.jena.util.iterator.NullIterator;

        specialinvoke $r5.<com.hp.hpl.jena.util.iterator.NullIterator: void <init>()>();

        return $r5;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>(r2);

        return $r4;
    }

    public void setTraceOn(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void setTraceOn(boolean)>(z0);

        return;
    }

    public boolean isTraceOn()
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean isTraceOn()>();

        return $z0;
    }

    public void logDerivation(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.Derivation)
    {
        com.hp.hpl.jena.reasoner.Derivation r2;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.util.OneToManyMap $r3;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Derivation;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        virtualinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.Finder $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        return $r3;
    }

    public boolean processBuiltin(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry, com.hp.hpl.jena.reasoner.rulesys.Rule, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r6;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry r7;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.reasoner.ReasonerException $r0;

        r6 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r7 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r8 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $r0 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error in FBLP rule engine, incorrect invocation of building in rule ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public void silentAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        return;
    }

    public com.hp.hpl.jena.graph.Node getTemp(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache: com.hp.hpl.jena.graph.Node getTemp(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r5;
    }

    protected void extractAxioms()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext $r18, r22;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector $r12;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r9;
        int $i0, $i1, $i2, i3;
        java.lang.String $r17;
        com.hp.hpl.jena.reasoner.ReasonerException $r13;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r11;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r4;
        java.util.Iterator $r6;
        com.hp.hpl.jena.graph.Triple $r21;
        com.hp.hpl.jena.reasoner.FGraph $r1;
        java.util.List $r5;
        com.hp.hpl.jena.reasoner.rulesys.Rule r8;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r10;
        com.hp.hpl.jena.reasoner.TriplePattern $r20;
        java.lang.Object $r7;
        java.lang.StringBuilder $r14, $r15, $r16;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r19;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        r22 = null;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine engine>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore getRuleStore()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.List getAllRules()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r7;

        $i0 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i0 != 0 goto label7;

        i3 = 0;

     label2:
        $i1 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i3 >= $i1 goto label7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i3);

        $z1 = $r9 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z1 == 0 goto label3;

        $r20 = (com.hp.hpl.jena.reasoner.TriplePattern) $r9;

        $r21 = virtualinvoke $r20.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Triple asTriple()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r21);

        goto label6;

     label3:
        $z2 = $r9 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z2 == 0 goto label6;

        if r22 != null goto label4;

        $r18 = new com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext;

        specialinvoke $r18.<com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI)>(r0);

        r22 = $r18;

     label4:
        $r19 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r9;

        $r10 = virtualinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r10 != null goto label5;

        $r13 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to invoke undefined functor: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label5:
        $r11 = virtualinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r12 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        specialinvoke $r12.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(com.hp.hpl.jena.graph.Node[])>($r11);

        virtualinvoke r22.<com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext: void setEnv(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r12);

        virtualinvoke r22.<com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext: void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r8);

        $i2 = lengthof $r11;

        interfaceinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.Builtin: void headAction(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r11, $i2, r22);

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        goto label1;

     label8:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/LPBackwardRuleInfGraph;");

        <com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: org.slf4j.Logger logger> = $r0;

        return;
    }
}
