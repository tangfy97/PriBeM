public final class com.ctc.wstx.dtd.DTDSubsetImpl extends com.ctc.wstx.dtd.DTDSubset
{
    final boolean mIsCachable;
    final boolean mFullyValidating;
    final boolean mHasNsDefaults;
    final java.util.HashMap mGeneralEntities;
    transient volatile java.util.List mGeneralEntityList;
    final java.util.Set mRefdGEs;
    final java.util.HashMap mDefinedPEs;
    final java.util.Set mRefdPEs;
    final java.util.HashMap mNotations;
    transient java.util.List mNotationList;
    final java.util.HashMap mElements;

    private void <init>(boolean, java.util.HashMap, java.util.Set, java.util.HashMap, java.util.Set, java.util.HashMap, java.util.HashMap, boolean)
    {
        java.util.HashMap r1, r3, r5, r6;
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        com.ctc.wstx.dtd.DTDElement r10;
        boolean z0, z1, $z2, $z3, z4;
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Set r2, r4;
        java.lang.Object $r9;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.HashMap;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.HashMap;

        r4 := @parameter4: java.util.Set;

        r5 := @parameter5: java.util.HashMap;

        r6 := @parameter6: java.util.HashMap;

        z1 := @parameter7: boolean;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDSubset: void <init>()>();

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mGeneralEntityList> = null;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mNotationList> = null;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mIsCachable> = z0;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities> = r1;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.Set mRefdGEs> = r2;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mDefinedPEs> = r3;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.Set mRefdPEs> = r4;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations> = r5;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mElements> = r6;

        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mFullyValidating> = z1;

        z4 = 0;

        if r6 == null goto label3;

        $r7 = virtualinvoke r6.<java.util.HashMap: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.ctc.wstx.dtd.DTDElement) $r9;

        $z3 = virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: boolean hasNsDefaults()>();

        if $z3 == 0 goto label2;

        z4 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mHasNsDefaults> = z4;

        return;
    }

    public static com.ctc.wstx.dtd.DTDSubsetImpl constructInstance(boolean, java.util.HashMap, java.util.Set, java.util.HashMap, java.util.Set, java.util.HashMap, java.util.HashMap, boolean)
    {
        java.util.Set r2, r4;
        java.util.HashMap r1, r3, r5, r6;
        com.ctc.wstx.dtd.DTDSubsetImpl $r0;
        boolean z0, z1;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.HashMap;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.HashMap;

        r4 := @parameter4: java.util.Set;

        r5 := @parameter5: java.util.HashMap;

        r6 := @parameter6: java.util.HashMap;

        z1 := @parameter7: boolean;

        $r0 = new com.ctc.wstx.dtd.DTDSubsetImpl;

        specialinvoke $r0.<com.ctc.wstx.dtd.DTDSubsetImpl: void <init>(boolean,java.util.HashMap,java.util.Set,java.util.HashMap,java.util.Set,java.util.HashMap,java.util.HashMap,boolean)>(z0, r1, r2, r3, r4, r5, r6, z1);

        return $r0;
    }

    public com.ctc.wstx.dtd.DTDSubset combineWithExternalSubset(com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.DTDSubset) throws javax.xml.stream.XMLStreamException
    {
        java.util.HashMap $r1, $r3, r5, $r6, r7, $r8, $r9, r10, $r11;
        com.ctc.wstx.dtd.DTDSubsetImpl r0, $r12;
        com.ctc.wstx.dtd.DTDSubset r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.ctc.wstx.sr.InputProblemReporter r4;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r4 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r2 := @parameter1: com.ctc.wstx.dtd.DTDSubset;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getGeneralEntityMap()>();

        r5 = $r1;

        $r3 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDSubset: java.util.HashMap getGeneralEntityMap()>();

        if $r1 == null goto label1;

        $z4 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();

        if $z4 == 0 goto label2;

     label1:
        r5 = $r3;

        goto label3;

     label2:
        if $r3 == null goto label3;

        $z5 = virtualinvoke $r3.<java.util.HashMap: boolean isEmpty()>();

        if $z5 != 0 goto label3;

        staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: void combineMaps(java.util.HashMap,java.util.HashMap)>($r1, $r3);

     label3:
        $r6 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getNotationMap()>();

        r7 = $r6;

        $r8 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDSubset: java.util.HashMap getNotationMap()>();

        if $r6 == null goto label4;

        $z2 = virtualinvoke $r6.<java.util.HashMap: boolean isEmpty()>();

        if $z2 == 0 goto label5;

     label4:
        r7 = $r8;

        goto label6;

     label5:
        if $r8 == null goto label6;

        $z3 = virtualinvoke $r8.<java.util.HashMap: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: void checkNotations(java.util.HashMap,java.util.HashMap)>($r6, $r8);

        staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: void combineMaps(java.util.HashMap,java.util.HashMap)>($r6, $r8);

     label6:
        $r9 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getElementMap()>();

        r10 = $r9;

        $r11 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDSubset: java.util.HashMap getElementMap()>();

        if $r9 == null goto label7;

        $z0 = virtualinvoke $r9.<java.util.HashMap: boolean isEmpty()>();

        if $z0 == 0 goto label8;

     label7:
        r10 = $r11;

        goto label9;

     label8:
        if $r11 == null goto label9;

        $z1 = virtualinvoke $r11.<java.util.HashMap: boolean isEmpty()>();

        if $z1 != 0 goto label9;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: void combineElements(com.ctc.wstx.sr.InputProblemReporter,java.util.HashMap,java.util.HashMap)>(r4, $r9, $r11);

     label9:
        $z6 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mFullyValidating>;

        $r12 = staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: com.ctc.wstx.dtd.DTDSubsetImpl constructInstance(boolean,java.util.HashMap,java.util.Set,java.util.HashMap,java.util.Set,java.util.HashMap,java.util.HashMap,boolean)>(0, r5, null, null, null, r7, r10, $z6);

        return $r12;
    }

    public org.codehaus.stax2.validation.XMLValidator createValidator(org.codehaus.stax2.validation.ValidationContext) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.DTDValidator $r5;
        java.util.HashMap $r3, $r4, $r6, $r7;
        com.ctc.wstx.dtd.DTDTypingNonValidator $r1;
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        boolean $z0, $z1, $z2;
        org.codehaus.stax2.validation.ValidationContext r2;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r2 := @parameter0: org.codehaus.stax2.validation.ValidationContext;

        $z0 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mFullyValidating>;

        if $z0 == 0 goto label1;

        $r5 = new com.ctc.wstx.dtd.DTDValidator;

        $z2 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mHasNsDefaults>;

        $r6 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getElementMap()>();

        $r7 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getGeneralEntityMap()>();

        specialinvoke $r5.<com.ctc.wstx.dtd.DTDValidator: void <init>(com.ctc.wstx.dtd.DTDSubset,org.codehaus.stax2.validation.ValidationContext,boolean,java.util.Map,java.util.Map)>(r0, r2, $z2, $r6, $r7);

        return $r5;

     label1:
        $r1 = new com.ctc.wstx.dtd.DTDTypingNonValidator;

        $z1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mHasNsDefaults>;

        $r3 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getElementMap()>();

        $r4 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap getGeneralEntityMap()>();

        specialinvoke $r1.<com.ctc.wstx.dtd.DTDTypingNonValidator: void <init>(com.ctc.wstx.dtd.DTDSubset,org.codehaus.stax2.validation.ValidationContext,boolean,java.util.Map,java.util.Map)>(r0, r2, $z1, $r3, $r4);

        return $r1;
    }

    public int getEntityCount()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        int $i0;
        java.util.HashMap $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

     label2:
        return $i0;
    }

    public int getNotationCount()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        int $i0;
        java.util.HashMap $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

     label2:
        return $i0;
    }

    public boolean isCachable()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $z0 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mIsCachable>;

        return $z0;
    }

    public java.util.HashMap getGeneralEntityMap()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.HashMap $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        return $r1;
    }

    public java.util.List getGeneralEntityList()
    {
        java.util.Collection $r6;
        java.util.HashMap $r1, $r3, $r5;
        java.util.ArrayList $r4;
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.List r7;
        com.ctc.wstx.compat.JdkImpl $r2;
        int $i0;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r7 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mGeneralEntityList>;

        if r7 != null goto label4;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        if $r1 == null goto label1;

        $r3 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        $i0 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = staticinvoke <com.ctc.wstx.compat.JdkFeatures: com.ctc.wstx.compat.JdkImpl getInstance()>();

        r7 = virtualinvoke $r2.<com.ctc.wstx.compat.JdkImpl: java.util.List getEmptyList()>();

        goto label3;

     label2:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mGeneralEntities>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

     label3:
        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mGeneralEntityList> = r7;

     label4:
        return r7;
    }

    public java.util.HashMap getParameterEntityMap()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.HashMap $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mDefinedPEs>;

        return $r1;
    }

    public java.util.HashMap getNotationMap()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.HashMap $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        return $r1;
    }

    public synchronized java.util.List getNotationList()
    {
        java.util.Collection $r6;
        java.util.HashMap $r1, $r3, $r5;
        java.util.ArrayList $r4;
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.List r7;
        com.ctc.wstx.compat.JdkImpl $r2;
        int $i0;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r7 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mNotationList>;

        if r7 != null goto label4;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        if $r1 == null goto label1;

        $r3 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        $i0 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = staticinvoke <com.ctc.wstx.compat.JdkFeatures: com.ctc.wstx.compat.JdkImpl getInstance()>();

        r7 = virtualinvoke $r2.<com.ctc.wstx.compat.JdkImpl: java.util.List getEmptyList()>();

        goto label3;

     label2:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mNotations>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

     label3:
        r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.List mNotationList> = r7;

     label4:
        return r7;
    }

    public java.util.HashMap getElementMap()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        java.util.HashMap $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.HashMap mElements>;

        return $r1;
    }

    public boolean isReusableWith(com.ctc.wstx.dtd.DTDSubset)
    {
        java.util.Set r1, $r4, $r6, $r7;
        java.util.HashMap $r3, $r5;
        com.ctc.wstx.dtd.DTDSubsetImpl r0;
        com.ctc.wstx.dtd.DTDSubset r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r2 := @parameter0: com.ctc.wstx.dtd.DTDSubset;

        r1 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.Set mRefdPEs>;

        if r1 == null goto label1;

        $i2 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i2 <= 0 goto label1;

        $r5 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDSubset: java.util.HashMap getParameterEntityMap()>();

        if $r5 == null goto label1;

        $i3 = virtualinvoke $r5.<java.util.HashMap: int size()>();

        if $i3 <= 0 goto label1;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        $z1 = staticinvoke <com.ctc.wstx.util.DataUtil: boolean anyValuesInCommon(java.util.Collection,java.util.Collection)>(r1, $r6);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r7 = r0.<com.ctc.wstx.dtd.DTDSubsetImpl: java.util.Set mRefdGEs>;

        if $r7 == null goto label2;

        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDSubset: java.util.HashMap getGeneralEntityMap()>();

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i1 <= 0 goto label2;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        $z0 = staticinvoke <com.ctc.wstx.util.DataUtil: boolean anyValuesInCommon(java.util.Collection,java.util.Collection)>($r7, $r4);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        com.ctc.wstx.dtd.DTDSubsetImpl r1;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String $r2;

        r1 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[DTDSubset: ");

        $i0 = virtualinvoke r1.<com.ctc.wstx.dtd.DTDSubsetImpl: int getEntityCount()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" general entities");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static void throwNotationException(com.ctc.wstx.ent.NotationDecl, com.ctc.wstx.ent.NotationDecl) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object[] $r1;
        com.ctc.wstx.ent.NotationDecl r2, r5;
        com.ctc.wstx.exc.WstxParsingException $r0;
        javax.xml.stream.Location $r6, $r9;
        java.lang.String $r3, $r4, $r7, $r8;

        r5 := @parameter0: com.ctc.wstx.ent.NotationDecl;

        r2 := @parameter1: com.ctc.wstx.ent.NotationDecl;

        $r0 = new com.ctc.wstx.exc.WstxParsingException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_DTD_NOTATION_REDEFD>;

        $r1 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r2.<com.ctc.wstx.ent.NotationDecl: java.lang.String getName()>();

        $r1[0] = $r4;

        $r6 = virtualinvoke r5.<com.ctc.wstx.ent.NotationDecl: javax.xml.stream.Location getLocation()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r1[1] = $r7;

        $r8 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        $r9 = virtualinvoke r2.<com.ctc.wstx.ent.NotationDecl: javax.xml.stream.Location getLocation()>();

        specialinvoke $r0.<com.ctc.wstx.exc.WstxParsingException: void <init>(java.lang.String,javax.xml.stream.Location)>($r8, $r9);

        throw $r0;
    }

    public static void throwElementException(com.ctc.wstx.dtd.DTDElement, javax.xml.stream.Location) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object[] $r1;
        com.ctc.wstx.dtd.DTDElement r2;
        com.ctc.wstx.exc.WstxParsingException $r0;
        javax.xml.stream.Location $r5, r8;
        java.lang.String $r3, $r4, $r6, $r7;

        r2 := @parameter0: com.ctc.wstx.dtd.DTDElement;

        r8 := @parameter1: javax.xml.stream.Location;

        $r0 = new com.ctc.wstx.exc.WstxParsingException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_DTD_ELEM_REDEFD>;

        $r1 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDElement: java.lang.String getDisplayName()>();

        $r1[0] = $r4;

        $r5 = virtualinvoke r2.<com.ctc.wstx.dtd.DTDElement: javax.xml.stream.Location getLocation()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r1[1] = $r6;

        $r7 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        specialinvoke $r0.<com.ctc.wstx.exc.WstxParsingException: void <init>(java.lang.String,javax.xml.stream.Location)>($r7, r8);

        throw $r0;
    }

    private static void combineMaps(java.util.HashMap, java.util.HashMap)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.HashMap r0, r6;
        java.lang.Object $r3, $r5, $r7, $r8;
        boolean $z0;

        r6 := @parameter0: java.util.HashMap;

        r0 := @parameter1: java.util.HashMap;

        $r1 = virtualinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        if $r8 == null goto label2;

        virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

     label2:
        goto label1;

     label3:
        return;
    }

    private void combineElements(com.ctc.wstx.sr.InputProblemReporter, java.util.HashMap, java.util.HashMap) throws javax.xml.stream.XMLStreamException
    {
        java.util.HashMap r0, r7;
        com.ctc.wstx.dtd.DTDSubsetImpl r12;
        com.ctc.wstx.dtd.DTDElement r9, r10;
        java.lang.String $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.ctc.wstx.sr.InputProblemReporter r11;
        javax.xml.stream.Location $r16, $r17;
        java.lang.Object $r3, $r5, $r6, $r8;

        r12 := @this: com.ctc.wstx.dtd.DTDSubsetImpl;

        r11 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r7 := @parameter1: java.util.HashMap;

        r0 := @parameter2: java.util.HashMap;

        $r1 = virtualinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = virtualinvoke r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        if $r8 != null goto label2;

        virtualinvoke r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label1;

     label2:
        r9 = (com.ctc.wstx.dtd.DTDElement) $r6;

        r10 = (com.ctc.wstx.dtd.DTDElement) $r8;

        $z0 = virtualinvoke r9.<com.ctc.wstx.dtd.DTDElement: boolean isDefined()>();

        if $z0 == 0 goto label4;

        $z3 = virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: boolean isDefined()>();

        if $z3 == 0 goto label3;

        $r17 = virtualinvoke r9.<com.ctc.wstx.dtd.DTDElement: javax.xml.stream.Location getLocation()>();

        staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: void throwElementException(com.ctc.wstx.dtd.DTDElement,javax.xml.stream.Location)>(r10, $r17);

        goto label6;

     label3:
        $z4 = r12.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mFullyValidating>;

        virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: void defineFrom(com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.dtd.DTDElement,boolean)>(r11, r9, $z4);

        goto label6;

     label4:
        $z1 = virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: boolean isDefined()>();

        if $z1 != 0 goto label5;

        $r13 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WT_ENT_DECL>;

        $r14 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String W_UNDEFINED_ELEM>;

        $r15 = virtualinvoke r9.<com.ctc.wstx.dtd.DTDElement: java.lang.String getDisplayName()>();

        $r16 = virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: javax.xml.stream.Location getLocation()>();

        interfaceinvoke r11.<com.ctc.wstx.sr.InputProblemReporter: void reportProblem(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,javax.xml.stream.Location)>($r13, $r14, $r15, null, $r16);

        goto label6;

     label5:
        $z2 = r12.<com.ctc.wstx.dtd.DTDSubsetImpl: boolean mFullyValidating>;

        virtualinvoke r10.<com.ctc.wstx.dtd.DTDElement: void mergeMissingAttributesFrom(com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.dtd.DTDElement,boolean)>(r11, r9, $z2);

     label6:
        goto label1;

     label7:
        return;
    }

    private static void checkNotations(java.util.HashMap, java.util.HashMap) throws javax.xml.stream.XMLStreamException
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.HashMap r0, r5;
        com.ctc.wstx.ent.NotationDecl $r9, $r11;
        java.lang.Object $r3, $r6, $r7, $r8, $r10;
        boolean $z0, $z1;

        r5 := @parameter0: java.util.HashMap;

        r0 := @parameter1: java.util.HashMap;

        $r1 = virtualinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (com.ctc.wstx.ent.NotationDecl) $r8;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.ctc.wstx.ent.NotationDecl) $r10;

        staticinvoke <com.ctc.wstx.dtd.DTDSubsetImpl: void throwNotationException(com.ctc.wstx.ent.NotationDecl,com.ctc.wstx.ent.NotationDecl)>($r9, $r11);

     label2:
        goto label1;

     label3:
        return;
    }
}
