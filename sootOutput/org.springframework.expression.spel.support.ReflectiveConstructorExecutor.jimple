class org.springframework.expression.spel.support.ReflectiveConstructorExecutor extends java.lang.Object implements org.springframework.expression.ConstructorExecutor
{
    private final java.lang.reflect.Constructor ctor;
    private final java.lang.Integer varargsPosition;
    private final int[] argsRequiringConversion;

    public void <init>(java.lang.reflect.Constructor, int[])
    {
        org.springframework.expression.spel.support.ReflectiveConstructorExecutor r0;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor r1;
        java.lang.Integer $r4;
        int[] r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveConstructorExecutor;

        r1 := @parameter0: java.lang.reflect.Constructor;

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor> = r1;

        $z0 = virtualinvoke r1.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.Integer varargsPosition> = $r4;

        goto label2;

     label1:
        r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.Integer varargsPosition> = null;

     label2:
        r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: int[] argsRequiringConversion> = r2;

        return;
    }

    public transient org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext, java.lang.Object[]) throws org.springframework.expression.AccessException
    {
        java.lang.Object[] r22;
        java.lang.reflect.Constructor $r2, $r4, $r6, $r9, $r15, $r19, $r23;
        java.lang.Integer $r13;
        int[] $r1, $r14;
        org.springframework.core.convert.TypeDescriptor $r8;
        java.lang.String $r21;
        org.springframework.expression.TypedValue $r3;
        boolean $z0;
        org.springframework.expression.TypeConverter $r12;
        org.springframework.expression.spel.support.ReflectiveConstructorExecutor r0;
        java.lang.Class[] $r10;
        java.lang.Exception $r16;
        org.springframework.expression.AccessException $r17;
        org.springframework.expression.EvaluationContext r11;
        java.lang.Object $r5;
        java.lang.Class $r7;
        java.lang.StringBuilder $r18, $r20;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveConstructorExecutor;

        r11 := @parameter0: org.springframework.expression.EvaluationContext;

        r22 := @parameter1: java.lang.Object[];

     label1:
        $r1 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: int[] argsRequiringConversion>;

        if $r1 == null goto label2;

        if r22 == null goto label2;

        $r12 = interfaceinvoke r11.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r15 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $r14 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: int[] argsRequiringConversion>;

        $r13 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.Integer varargsPosition>;

        staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: void convertArguments(org.springframework.expression.TypeConverter,java.lang.Object[],java.lang.Object,int[],java.lang.Integer)>($r12, r22, $r15, $r14, $r13);

     label2:
        $r23 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $z0 = virtualinvoke $r23.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label3;

        $r9 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        r22 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class[],java.lang.Object[])>($r10, r22);

     label3:
        $r2 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Constructor)>($r2);

        $r3 = new org.springframework.expression.TypedValue;

        $r4 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r22);

        $r6 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r8 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r7);

        specialinvoke $r3.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r5, $r8);

     label4:
        return $r3;

     label5:
        $r16 := @caughtexception;

        $r17 = new org.springframework.expression.AccessException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Problem invoking constructor: ");

        $r19 = r0.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: java.lang.reflect.Constructor ctor>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r21, $r16);

        throw $r17;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
