public class org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder extends org.apache.cxf.transports.http.configuration.HTTPClientPolicy
{
    private java.lang.String parsedElement;
    private org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy;
    private javax.xml.bind.JAXBContext jaxbContext;
    private java.util.Set jaxbClasses;

    public void <init>()
    {
        org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder r0;

        r0 := @this: org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder;

        specialinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void <init>()>();

        return;
    }

    public void init()
    {
        byte[] $r5;
        org.w3c.dom.Document $r6;
        java.util.Set $r9;
        java.lang.Exception $r52;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.lang.ClassLoader $r11;
        long $l0, $l2, $l4;
        org.apache.cxf.transports.http.configuration.ConnectionType $r30;
        java.lang.String $r4, $r15, $r17, $r19, $r25, $r27, $r33, $r35, $r37, $r39, $r42, $r44, $r50;
        java.lang.RuntimeException $r53;
        javax.xml.parsers.DocumentBuilder $r1;
        java.io.ByteArrayInputStream $r2;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.transports.http.configuration.ProxyServerType $r47;
        int $i1, $i3, $i5;
        javax.xml.bind.JAXBContext $r8;
        org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder r3;
        org.w3c.dom.Element $r7;
        java.lang.Class $r10;
        java.lang.Object $r12;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r13, $r14, $r16, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r28, $r29, $r31, $r32, $r34, $r36, $r38, $r40, $r41, $r43, $r45, $r46, $r48, $r49, $r51;

        r3 := @this: org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r2 = new java.io.ByteArrayInputStream;

        $r4 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: java.lang.String parsedElement>;

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r2);

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r8 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: javax.xml.bind.JAXBContext jaxbContext>;

        $r9 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: java.util.Set jaxbClasses>;

        $r10 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r12 = staticinvoke <org.apache.cxf.transport.http.blueprint.HolderUtils: java.lang.Object getJaxbObject(org.w3c.dom.Element,java.lang.Class,javax.xml.bind.JAXBContext,java.util.Set,java.lang.ClassLoader)>($r7, class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;", $r8, $r9, $r11);

        $r13 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r12;

        r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy> = $r13;

        $r14 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r15 = virtualinvoke $r14.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAccept(java.lang.String)>($r15);

        $r16 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r17 = virtualinvoke $r16.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAcceptEncoding(java.lang.String)>($r17);

        $r18 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r19 = virtualinvoke $r18.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAcceptLanguage(java.lang.String)>($r19);

        $r20 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $z0 = virtualinvoke $r20.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAllowChunking(boolean)>($z0);

        $r21 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $l0 = virtualinvoke $r21.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getAsyncExecuteTimeout()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAsyncExecuteTimeout(long)>($l0);

        $r22 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $z1 = virtualinvoke $r22.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAsyncExecuteTimeoutRejection()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAsyncExecuteTimeoutRejection(boolean)>($z1);

        $r23 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $z2 = virtualinvoke $r23.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setAutoRedirect(boolean)>($z2);

        $r24 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r25 = virtualinvoke $r24.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setBrowserType(java.lang.String)>($r25);

        $r26 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r27 = virtualinvoke $r26.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setCacheControl(java.lang.String)>($r27);

        $r28 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $i1 = virtualinvoke $r28.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getChunkingThreshold()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setChunkingThreshold(int)>($i1);

        $r29 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r30 = virtualinvoke $r29.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setConnection(org.apache.cxf.transports.http.configuration.ConnectionType)>($r30);

        $r31 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $l2 = virtualinvoke $r31.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getConnectionTimeout()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setConnectionTimeout(long)>($l2);

        $r32 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r33 = virtualinvoke $r32.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setContentType(java.lang.String)>($r33);

        $r34 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r35 = virtualinvoke $r34.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setCookie(java.lang.String)>($r35);

        $r36 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r37 = virtualinvoke $r36.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setDecoupledEndpoint(java.lang.String)>($r37);

        $r38 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r39 = virtualinvoke $r38.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setHost(java.lang.String)>($r39);

        $r40 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $i3 = virtualinvoke $r40.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getMaxRetransmits()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setMaxRetransmits(int)>($i3);

        $r41 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r42 = virtualinvoke $r41.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getNonProxyHosts()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setNonProxyHosts(java.lang.String)>($r42);

        $r43 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r44 = virtualinvoke $r43.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setProxyServer(java.lang.String)>($r44);

        $r45 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $z3 = virtualinvoke $r45.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z3 == 0 goto label2;

        $r51 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $i5 = virtualinvoke $r51.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setProxyServerPort(int)>($i5);

     label2:
        $r46 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r47 = virtualinvoke $r46.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)>($r47);

        $r48 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $l4 = virtualinvoke $r48.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setReceiveTimeout(long)>($l4);

        $r49 = r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientPolicy>;

        $r50 = virtualinvoke $r49.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        virtualinvoke r3.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: void setReferer(java.lang.String)>($r50);

     label3:
        goto label5;

     label4:
        $r52 := @caughtexception;

        $r53 = new java.lang.RuntimeException;

        specialinvoke $r53.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not process configuration.", $r52);

        throw $r53;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void destroy()
    {
        org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder r0;

        r0 := @this: org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder;

        return;
    }

    public java.lang.String getParsedElement()
    {
        org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder r0;
        java.lang.String $r1;

        r0 := @this: org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder;

        $r1 = r0.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: java.lang.String parsedElement>;

        return $r1;
    }

    public void setParsedElement(java.lang.String)
    {
        org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.transport.http.blueprint.HTTPClientPolicyHolder: java.lang.String parsedElement> = r1;

        return;
    }
}
