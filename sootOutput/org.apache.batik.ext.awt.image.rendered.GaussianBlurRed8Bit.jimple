public class org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    int xinset;
    int yinset;
    double stdDevX;
    double stdDevY;
    java.awt.RenderingHints hints;
    java.awt.image.ConvolveOp[] convOp;
    int dX;
    int dY;
    static final float SQRT2PI;
    static final float DSQRT2PI;
    static final float precision;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, double, java.awt.RenderingHints)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.RenderingHints r2;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        d0 := @parameter1: double;

        r2 := @parameter2: java.awt.RenderingHints;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,double,double,java.awt.RenderingHints)>(r1, d0, d0, r2);

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, double, double, java.awt.RenderingHints)
    {
        java.awt.image.SampleModel $r5, $r18;
        byte $b26, $b30;
        java.awt.image.ConvolveOp $r19, $r20;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.Kernel $r9, $r12;
        java.awt.RenderingHints$Key $r13;
        java.awt.RenderingHints r2, $r6, $r14;
        boolean z0, $z1, $z3, $z4;
        float $f0, $f1;
        java.awt.Rectangle $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, i36, $i37, i38, $i39, $i40, $i41, $i42, $i43;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        java.awt.image.ConvolveOp[] $r1, $r8, $r11;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r0;
        java.awt.image.ColorModel $r17;
        java.lang.Object $r15, $r16;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        r3 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.awt.RenderingHints;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        $r1 = newarray (java.awt.image.ConvolveOp)[2];

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp> = $r1;

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: double stdDevX> = d0;

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: double stdDevY> = d1;

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.RenderingHints hints> = r2;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int surroundPixels(double,java.awt.RenderingHints)>(d0, r2);

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset> = $i0;

        $i1 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int surroundPixels(double,java.awt.RenderingHints)>(d1, r2);

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset> = $i1;

        $r4 = interfaceinvoke r3.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $i3 = $r4.<java.awt.Rectangle: int x>;

        $i2 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i4 = $i3 + $i2;

        $r4.<java.awt.Rectangle: int x> = $i4;

        $i6 = $r4.<java.awt.Rectangle: int y>;

        $i5 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i7 = $i6 + $i5;

        $r4.<java.awt.Rectangle: int y> = $i7;

        $i10 = $r4.<java.awt.Rectangle: int width>;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i9 = 2 * $i8;

        $i11 = $i10 - $i9;

        $r4.<java.awt.Rectangle: int width> = $i11;

        $i14 = $r4.<java.awt.Rectangle: int height>;

        $i12 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i13 = 2 * $i12;

        $i15 = $i14 - $i13;

        $r4.<java.awt.Rectangle: int height> = $i15;

        $i16 = $r4.<java.awt.Rectangle: int width>;

        if $i16 <= 0 goto label01;

        $i34 = $r4.<java.awt.Rectangle: int height>;

        if $i34 > 0 goto label02;

     label01:
        $r4.<java.awt.Rectangle: int width> = 0;

        $r4.<java.awt.Rectangle: int height> = 0;

     label02:
        $r17 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r3);

        $r18 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i35 = virtualinvoke $r18.<java.awt.image.SampleModel: int getWidth()>();

        i36 = $i35;

        $i37 = virtualinvoke $r18.<java.awt.image.SampleModel: int getHeight()>();

        i38 = $i37;

        $i39 = $r4.<java.awt.Rectangle: int width>;

        if $i35 <= $i39 goto label03;

        i36 = $r4.<java.awt.Rectangle: int width>;

     label03:
        $i17 = $r4.<java.awt.Rectangle: int height>;

        if $i37 <= $i17 goto label04;

        i38 = $r4.<java.awt.Rectangle: int height>;

     label04:
        $r5 = virtualinvoke $r17.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i36, i38);

        $i18 = interfaceinvoke r3.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i19 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i20 = $i18 + $i19;

        $i21 = interfaceinvoke r3.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        $i22 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i23 = $i21 + $i22;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r3, $r4, $r17, $r5, $i20, $i23, null);

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.RenderingHints hints>;

        if $r6 == null goto label05;

        $r15 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        $r14 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.RenderingHints hints>;

        $r13 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r16 = virtualinvoke $r14.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r13);

        $z1 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label05;

        $z4 = 1;

        $z3 = 1;

        goto label06;

     label05:
        $z4 = 0;

        $z3 = 0;

     label06:
        z0 = $z3;

        $i40 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        if $i40 == 0 goto label08;

        $b30 = d0 cmpg 2.0;

        $i42 = (int) $b30;

        if $i42 < 0 goto label07;

        if $z4 == 0 goto label08;

     label07:
        $r11 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r19 = new java.awt.image.ConvolveOp;

        $i31 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i32 = $i31 * 2;

        $i33 = $i32 + 1;

        $r12 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.Kernel makeQualityKernelX(int)>($i33);

        specialinvoke $r19.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel)>($r12);

        $r11[0] = $r19;

        goto label09;

     label08:
        $f0 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float DSQRT2PI>;

        $d2 = (double) $f0;

        $d3 = $d2 * d0;

        $d4 = $d3 + 0.5;

        $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4);

        $i24 = (int) $d5;

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX> = $i24;

     label09:
        $i41 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        if $i41 == 0 goto label11;

        $b26 = d1 cmpg 2.0;

        $i43 = (int) $b26;

        if $i43 < 0 goto label10;

        if z0 == 0 goto label11;

     label10:
        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r20 = new java.awt.image.ConvolveOp;

        $i27 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i28 = $i27 * 2;

        $i29 = $i28 + 1;

        $r9 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.Kernel makeQualityKernelY(int)>($i29);

        specialinvoke $r20.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel)>($r9);

        $r8[1] = $r20;

        goto label12;

     label11:
        $f1 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float DSQRT2PI>;

        $d6 = (double) $f1;

        $d7 = $d6 * d1;

        $d8 = $d7 + 0.5;

        $d9 = staticinvoke <java.lang.Math: double floor(double)>($d8);

        $i25 = (int) $d9;

        r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY> = $i25;

     label12:
        return;
    }

    public static int surroundPixels(double)
    {
        int $i0;
        double d0;

        d0 := @parameter0: double;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int surroundPixels(double,java.awt.RenderingHints)>(d0, null);

        return $i0;
    }

    public static int surroundPixels(double, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r0;
        byte $b0, $b10;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, f4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12, $i13, $i14;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        java.awt.RenderingHints$Key $r1;
        java.lang.Object $r2, $r3;

        d0 := @parameter0: double;

        r0 := @parameter1: java.awt.RenderingHints;

        if r0 == null goto label1;

        $r2 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        $r1 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r3 = virtualinvoke r0.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b10 = d0 cmpg 2.0;

        $i13 = (int) $b10;

        if $i13 < 0 goto label3;

        if $z1 == 0 goto label6;

     label3:
        $f0 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float SQRT2PI>;

        $d1 = (double) $f0;

        $d2 = d0 * $d1;

        $d3 = 0.5 / $d2;

        f4 = (float) $d3;

        i11 = 0;

        goto label5;

     label4:
        $i1 = neg i11;

        $i2 = $i1 * i11;

        $d6 = (double) $i2;

        $d4 = 2.0 * d0;

        $d5 = $d4 * d0;

        $d7 = $d6 / $d5;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, $d7);

        $f1 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float SQRT2PI>;

        $d9 = (double) $f1;

        $d10 = d0 * $d9;

        $d11 = $d8 / $d10;

        $f2 = (float) $d11;

        f4 = f4 + $f2;

        i11 = i11 + 1;

     label5:
        $b0 = f4 cmpg 0.499F;

        $i14 = (int) $b0;

        if $i14 < 0 goto label4;

        return i11;

     label6:
        $f3 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float DSQRT2PI>;

        $d12 = (double) $f3;

        $d13 = $d12 * d0;

        $d14 = $d13 + 0.5;

        $d15 = staticinvoke <java.lang.Math: double floor(double)>($d14);

        i12 = (int) $d15;

        $i3 = i12 % 2;

        if $i3 != 0 goto label7;

        $i8 = i12 - 1;

        $i7 = i12 / 2;

        $i9 = $i8 + $i7;

        return $i9;

     label7:
        $i5 = i12 - 2;

        $i4 = i12 / 2;

        $i6 = $i5 + $i4;

        return $i6;
    }

    private float[] computeQualityKernelData(int, double)
    {
        float[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r1;
        float $f0, $f1, $f2, $f3, $f4, f5;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r0 = newarray (float)[i0];

        i1 = i0 / 2;

        f5 = 0.0F;

        i6 = 0;

        goto label2;

     label1:
        $i2 = i6 - i1;

        $i4 = neg $i2;

        $i3 = i6 - i1;

        $i5 = $i4 * $i3;

        $d3 = (double) $i5;

        $d1 = 2.0 * d0;

        $d2 = $d1 * d0;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, $d4);

        $f0 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float SQRT2PI>;

        $d6 = (double) $f0;

        $d7 = $d6 * d0;

        $d8 = $d5 / $d7;

        $f1 = (float) $d8;

        r0[i6] = $f1;

        $f2 = r0[i6];

        f5 = f5 + $f2;

        i6 = i6 + 1;

     label2:
        if i6 < i0 goto label1;

        i7 = 0;

        goto label4;

     label3:
        $f3 = r0[i7];

        $f4 = $f3 / f5;

        r0[i7] = $f4;

        i7 = i7 + 1;

     label4:
        if i7 < i0 goto label3;

        return r0;
    }

    private java.awt.image.Kernel makeQualityKernelX(int)
    {
        java.awt.image.Kernel $r0;
        int i0;
        float[] $r2;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r1;
        double $d0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        i0 := @parameter0: int;

        $r0 = new java.awt.image.Kernel;

        $d0 = r1.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: double stdDevX>;

        $r2 = specialinvoke r1.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float[] computeQualityKernelData(int,double)>(i0, $d0);

        specialinvoke $r0.<java.awt.image.Kernel: void <init>(int,int,float[])>(i0, 1, $r2);

        return $r0;
    }

    private java.awt.image.Kernel makeQualityKernelY(int)
    {
        java.awt.image.Kernel $r0;
        int i0;
        float[] $r2;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r1;
        double $d0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        i0 := @parameter0: int;

        $r0 = new java.awt.image.Kernel;

        $d0 = r1.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: double stdDevY>;

        $r2 = specialinvoke r1.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float[] computeQualityKernelData(int,double)>(i0, $d0);

        specialinvoke $r0.<java.awt.image.Kernel: void <init>(int,int,float[])>(1, i0, $r2);

        return $r0;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.util.Vector $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, i91, $i92, $i93, $i94;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r4, $r7, $r8, $r11, $r12, $r15, $r16, $r17, $r18, $r22, $r23, $r25, $r28, r32, r33, r34, r35, $r36;
        java.awt.image.ConvolveOp $r10, $r14, $r20, $r27, $r30;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.Kernel $r31;
        boolean $z0, $z1;
        java.awt.Rectangle $r5;
        java.awt.image.ConvolveOp[] $r9, $r13, $r19, $r26, $r29;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r0;
        java.awt.image.ColorModel $r6, $r21, $r24;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        r4 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r5 = virtualinvoke r4.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $i1 = $r5.<java.awt.Rectangle: int x>;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i2 = $i1 - $i0;

        $r5.<java.awt.Rectangle: int x> = $i2;

        $i4 = $r5.<java.awt.Rectangle: int y>;

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i5 = $i4 - $i3;

        $r5.<java.awt.Rectangle: int y> = $i5;

        $i8 = $r5.<java.awt.Rectangle: int width>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        $i7 = 2 * $i6;

        $i9 = $i8 + $i7;

        $r5.<java.awt.Rectangle: int width> = $i9;

        $i12 = $r5.<java.awt.Rectangle: int height>;

        $i10 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        $i11 = 2 * $i10;

        $i13 = $i12 + $i11;

        $r5.<java.awt.Rectangle: int height> = $i13;

        $r6 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r32 = null;

        $i15 = $r5.<java.awt.Rectangle: int width>;

        $i14 = $r5.<java.awt.Rectangle: int height>;

        $r7 = virtualinvoke $r6.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i15, $i14);

        r33 = $r7;

        $i17 = $r5.<java.awt.Rectangle: int x>;

        $i16 = $r5.<java.awt.Rectangle: int y>;

        $r8 = virtualinvoke $r7.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i17, $i16);

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r8);

        $z0 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z1 != 0 goto label01;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r7, $r6, 1);

     label01:
        $i90 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int xinset>;

        if $i90 != 0 goto label02;

        i91 = 0;

        goto label05;

     label02:
        $r9 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r10 = $r9[0];

        if $r10 == null goto label03;

        $r24 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $i89 = $r5.<java.awt.Rectangle: int width>;

        $i88 = $r5.<java.awt.Rectangle: int height>;

        $r25 = virtualinvoke $r24.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i89, $i88);

        $r26 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r27 = $r26[0];

        $r28 = virtualinvoke $r27.<java.awt.image.ConvolveOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r7, $r25);

        $r29 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r30 = $r29[0];

        $r31 = virtualinvoke $r30.<java.awt.image.ConvolveOp: java.awt.image.Kernel getKernel()>();

        i91 = virtualinvoke $r31.<java.awt.image.Kernel: int getXOrigin()>();

        r33 = $r28;

        r32 = $r7;

        goto label05;

     label03:
        $i18 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i19 = $i18 & 1;

        if $i19 != 0 goto label04;

        $i71 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i69 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i70 = $i69 / 2;

        $r22 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r7, $r7, 0, 0, $i71, $i70);

        $i72 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i77 = $i72 / 2;

        $i76 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i73 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i74 = $i73 / 2;

        $i75 = $i74 - 1;

        $r23 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r22, $r22, $i77, 0, $i76, $i75);

        $i78 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i83 = $i78 - 1;

        $i79 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i82 = $i79 + 1;

        $i80 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i81 = $i80 / 2;

        r33 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r23, $r23, $i83, 0, $i82, $i81);

        $i84 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i87 = $i84 - 1;

        $i85 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i86 = $i85 / 2;

        i91 = $i87 + $i86;

        goto label05;

     label04:
        $i22 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i20 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i21 = $i20 / 2;

        $r11 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r7, $r7, 0, 0, $i22, $i21);

        $i23 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i27 = $i23 / 2;

        $i26 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i24 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i25 = $i24 / 2;

        $r12 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r11, $r11, $i27, 0, $i26, $i25);

        $i28 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i32 = $i28 - 2;

        $i31 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i29 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i30 = $i29 / 2;

        r33 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r12, $r12, $i32, 0, $i31, $i30);

        $i33 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i36 = $i33 - 2;

        $i34 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dX>;

        $i35 = $i34 / 2;

        i91 = $i36 + $i35;

     label05:
        $i92 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int yinset>;

        if $i92 != 0 goto label06;

        r34 = r33;

        goto label11;

     label06:
        $r13 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r14 = $r13[1];

        if $r14 == null goto label08;

        if r32 != null goto label07;

        $r21 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $i68 = $r5.<java.awt.Rectangle: int width>;

        $i67 = $r5.<java.awt.Rectangle: int height>;

        r32 = virtualinvoke $r21.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i68, $i67);

     label07:
        $r19 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.ConvolveOp[] convOp>;

        $r20 = $r19[1];

        r34 = virtualinvoke $r20.<java.awt.image.ConvolveOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>(r33, r32);

        goto label11;

     label08:
        $i37 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i38 = $i37 & 1;

        if $i38 != 0 goto label09;

        $i54 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i52 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i53 = $i52 / 2;

        $r17 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>(r33, r33, i91, 0, $i54, $i53);

        $i55 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i60 = $i55 / 2;

        $i59 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i56 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i57 = $i56 / 2;

        $i58 = $i57 - 1;

        $r18 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r17, $r17, i91, $i60, $i59, $i58);

        $i61 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i66 = $i61 - 1;

        $i62 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i65 = $i62 + 1;

        $i63 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i64 = $i63 / 2;

        r35 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r18, $r18, i91, $i66, $i65, $i64);

        goto label10;

     label09:
        $i41 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i39 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i40 = $i39 / 2;

        $r15 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>(r33, r33, i91, 0, $i41, $i40);

        $i42 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i46 = $i42 / 2;

        $i45 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i43 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i44 = $i43 / 2;

        $r16 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r15, $r15, i91, $i46, $i45, $i44);

        $i47 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i51 = $i47 - 2;

        $i50 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i48 = r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int dY>;

        $i49 = $i48 / 2;

        r35 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($r16, $r16, i91, $i51, $i50, $i49);

     label10:
        r34 = r35;

     label11:
        $i93 = $r5.<java.awt.Rectangle: int x>;

        $i94 = $r5.<java.awt.Rectangle: int y>;

        $r36 = virtualinvoke r34.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i93, $i94);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.Raster,java.awt.image.WritableRaster)>($r36, r4);

        return r4;
    }

    private java.awt.image.WritableRaster boxFilterH(java.awt.image.Raster, java.awt.image.WritableRaster, int, int, int, int)
    {
        java.awt.image.SampleModel $r1, $r4;
        java.awt.image.DataBufferInt r7, r9;
        java.awt.image.Raster r0;
        java.awt.image.SinglePixelPackedSampleModel r2, r5;
        int[][] $r10, $r12;
        int[] r11, r13, r14;
        java.awt.image.DataBuffer $r6, $r8;
        int $i0, $i1, i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r15;
        java.awt.image.WritableRaster r3;

        r15 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        r0 := @parameter0: java.awt.image.Raster;

        r3 := @parameter1: java.awt.image.WritableRaster;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        i3 := @parameter4: int;

        i42 := @parameter5: int;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i4 = 2 * i2;

        $i5 = $i4 + i3;

        if $i0 >= $i5 goto label01;

        return r3;

     label01:
        $i7 = 2 * i6;

        if $i1 >= $i7 goto label02;

        return r3;

     label02:
        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $r4 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r5 = (java.awt.image.SinglePixelPackedSampleModel) $r4;

        $i8 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $i9 = virtualinvoke r5.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r6 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r7 = (java.awt.image.DataBufferInt) $r6;

        $r8 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r9 = (java.awt.image.DataBufferInt) $r8;

        $i10 = virtualinvoke r7.<java.awt.image.DataBuffer: int getOffset()>();

        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i12 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i13 = $i11 - $i12;

        $i14 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i15 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i16 = $i14 - $i15;

        $i17 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i13, $i16);

        i18 = $i10 + $i17;

        $i19 = virtualinvoke r9.<java.awt.image.DataBuffer: int getOffset()>();

        $i20 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i21 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i22 = $i20 - $i21;

        $i23 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $i24 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i25 = $i23 - $i24;

        $i26 = virtualinvoke r5.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i22, $i25);

        i27 = $i19 + $i26;

        $r10 = virtualinvoke r7.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r11 = $r10[0];

        $r12 = virtualinvoke r9.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r13 = $r12[0];

        r14 = newarray (int)[i3];

        i28 = 16777216 / i3;

        i87 = i6;

        goto label10;

     label03:
        $i30 = i87 * $i8;

        i88 = i18 + $i30;

        $i31 = i87 * $i9;

        i89 = i27 + $i31;

        $i32 = $i0 - i2;

        i33 = i88 + $i32;

        i90 = 0;

        i91 = 0;

        i92 = 0;

        i93 = 0;

        i94 = 0;

        i95 = i88 + i2;

        i34 = i95 + i3;

        goto label05;

     label04:
        $i35 = r11[i95];

        r14[i90] = $i35;

        $i36 = $i35 >>> 24;

        i91 = i91 + $i36;

        $i37 = $i35 >> 16;

        $i38 = $i37 & 255;

        i92 = i92 + $i38;

        $i39 = $i35 >> 8;

        $i40 = $i39 & 255;

        i93 = i93 + $i40;

        $i41 = $i35 & 255;

        i94 = i94 + $i41;

        i90 = i90 + 1;

        i95 = i95 + 1;

     label05:
        if i95 < i34 goto label04;

        $i43 = i2 + i42;

        i96 = i89 + $i43;

        $i44 = i91 * i28;

        $i48 = $i44 & -16777216;

        $i45 = i92 * i28;

        $i46 = $i45 & -16777216;

        $i47 = $i46 >>> 8;

        $i52 = $i48 | $i47;

        $i49 = i93 * i28;

        $i50 = $i49 & -16777216;

        $i51 = $i50 >>> 16;

        $i56 = $i52 | $i51;

        $i53 = i94 * i28;

        $i54 = $i53 & -16777216;

        $i55 = $i54 >>> 24;

        $i57 = $i56 | $i55;

        r13[i96] = $i57;

        i97 = $i57;

        i98 = i96 + 1;

        i99 = 0;

        goto label09;

     label06:
        i100 = r14[i99];

        $i58 = r11[i95];

        if i100 != $i58 goto label07;

        r13[i98] = i97;

        goto label08;

     label07:
        $i59 = i100 >>> 24;

        i101 = i91 - $i59;

        $i60 = i100 >> 16;

        $i61 = $i60 & 255;

        i102 = i92 - $i61;

        $i62 = i100 >> 8;

        $i63 = $i62 & 255;

        i103 = i93 - $i63;

        $i64 = i100 & 255;

        i104 = i94 - $i64;

        $i65 = r11[i95];

        r14[i99] = $i65;

        $i66 = $i65 >>> 24;

        i91 = i101 + $i66;

        $i67 = $i65 >> 16;

        $i68 = $i67 & 255;

        i92 = i102 + $i68;

        $i69 = $i65 >> 8;

        $i70 = $i69 & 255;

        i93 = i103 + $i70;

        $i71 = $i65 & 255;

        i94 = i104 + $i71;

        $i72 = i91 * i28;

        $i76 = $i72 & -16777216;

        $i73 = i92 * i28;

        $i74 = $i73 & -16777216;

        $i75 = $i74 >>> 8;

        $i80 = $i76 | $i75;

        $i77 = i93 * i28;

        $i78 = $i77 & -16777216;

        $i79 = $i78 >>> 16;

        $i84 = $i80 | $i79;

        $i81 = i94 * i28;

        $i82 = $i81 & -16777216;

        $i83 = $i82 >>> 24;

        $i85 = $i84 | $i83;

        r13[i98] = $i85;

        i97 = $i85;

     label08:
        $i86 = i99 + 1;

        i99 = $i86 % i3;

        i95 = i95 + 1;

        i98 = i98 + 1;

     label09:
        if i95 < i33 goto label06;

        i87 = i87 + 1;

     label10:
        $i29 = $i1 - i6;

        if i87 < $i29 goto label03;

        return r3;
    }

    private java.awt.image.WritableRaster boxFilterV(java.awt.image.Raster, java.awt.image.WritableRaster, int, int, int, int)
    {
        java.awt.image.SampleModel $r1, $r4;
        java.awt.image.DataBufferInt r7, r9;
        java.awt.image.Raster r0;
        java.awt.image.SinglePixelPackedSampleModel r2, r5;
        int[][] $r10, $r12;
        int[] r11, r13, r14;
        java.awt.image.DataBuffer $r6, $r8;
        int $i0, $i1, i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, $i29, $i30, $i31, i32, $i33, $i34, i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit r15;
        java.awt.image.WritableRaster r3;

        r15 := @this: org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        r0 := @parameter0: java.awt.image.Raster;

        r3 := @parameter1: java.awt.image.WritableRaster;

        i2 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        i43 := @parameter5: int;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i3 = 2 * i2;

        if $i0 >= $i3 goto label01;

        return r3;

     label01:
        $i6 = 2 * i4;

        $i7 = $i6 + i5;

        if $i1 >= $i7 goto label02;

        return r3;

     label02:
        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $r4 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r5 = (java.awt.image.SinglePixelPackedSampleModel) $r4;

        $i8 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $i9 = virtualinvoke r5.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r6 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r7 = (java.awt.image.DataBufferInt) $r6;

        $r8 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r9 = (java.awt.image.DataBufferInt) $r8;

        $i10 = virtualinvoke r7.<java.awt.image.DataBuffer: int getOffset()>();

        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i12 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i13 = $i11 - $i12;

        $i14 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i15 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i16 = $i14 - $i15;

        $i17 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i13, $i16);

        i18 = $i10 + $i17;

        $i19 = virtualinvoke r9.<java.awt.image.DataBuffer: int getOffset()>();

        $i20 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i21 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i22 = $i20 - $i21;

        $i23 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $i24 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i25 = $i23 - $i24;

        $i26 = virtualinvoke r5.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i22, $i25);

        i27 = $i19 + $i26;

        $r10 = virtualinvoke r7.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r11 = $r10[0];

        $r12 = virtualinvoke r9.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r13 = $r12[0];

        r14 = newarray (int)[i5];

        i28 = 16777216 / i5;

        i89 = i2;

        goto label10;

     label03:
        i90 = i18 + i89;

        i91 = i27 + i89;

        $i30 = $i1 - i4;

        $i31 = $i30 * $i8;

        i32 = i90 + $i31;

        i92 = 0;

        i93 = 0;

        i94 = 0;

        i95 = 0;

        i96 = 0;

        $i33 = i4 * $i8;

        i97 = i90 + $i33;

        $i34 = i5 * $i8;

        i35 = i97 + $i34;

        goto label05;

     label04:
        $i36 = r11[i97];

        r14[i92] = $i36;

        $i37 = $i36 >>> 24;

        i93 = i93 + $i37;

        $i38 = $i36 >> 16;

        $i39 = $i38 & 255;

        i94 = i94 + $i39;

        $i40 = $i36 >> 8;

        $i41 = $i40 & 255;

        i95 = i95 + $i41;

        $i42 = $i36 & 255;

        i96 = i96 + $i42;

        i92 = i92 + 1;

        i97 = i97 + $i8;

     label05:
        if i97 < i35 goto label04;

        $i44 = i4 + i43;

        $i45 = $i44 * $i9;

        i98 = i91 + $i45;

        $i46 = i93 * i28;

        $i50 = $i46 & -16777216;

        $i47 = i94 * i28;

        $i48 = $i47 & -16777216;

        $i49 = $i48 >>> 8;

        $i54 = $i50 | $i49;

        $i51 = i95 * i28;

        $i52 = $i51 & -16777216;

        $i53 = $i52 >>> 16;

        $i58 = $i54 | $i53;

        $i55 = i96 * i28;

        $i56 = $i55 & -16777216;

        $i57 = $i56 >>> 24;

        $i59 = $i58 | $i57;

        r13[i98] = $i59;

        i99 = $i59;

        i100 = i98 + $i9;

        i101 = 0;

        goto label09;

     label06:
        i102 = r14[i101];

        $i60 = r11[i97];

        if i102 != $i60 goto label07;

        r13[i100] = i99;

        goto label08;

     label07:
        $i61 = i102 >>> 24;

        i103 = i93 - $i61;

        $i62 = i102 >> 16;

        $i63 = $i62 & 255;

        i104 = i94 - $i63;

        $i64 = i102 >> 8;

        $i65 = $i64 & 255;

        i105 = i95 - $i65;

        $i66 = i102 & 255;

        i106 = i96 - $i66;

        $i67 = r11[i97];

        r14[i101] = $i67;

        $i68 = $i67 >>> 24;

        i93 = i103 + $i68;

        $i69 = $i67 >> 16;

        $i70 = $i69 & 255;

        i94 = i104 + $i70;

        $i71 = $i67 >> 8;

        $i72 = $i71 & 255;

        i95 = i105 + $i72;

        $i73 = $i67 & 255;

        i96 = i106 + $i73;

        $i74 = i93 * i28;

        $i78 = $i74 & -16777216;

        $i75 = i94 * i28;

        $i76 = $i75 & -16777216;

        $i77 = $i76 >>> 8;

        $i82 = $i78 | $i77;

        $i79 = i95 * i28;

        $i80 = $i79 & -16777216;

        $i81 = $i80 >>> 16;

        $i86 = $i82 | $i81;

        $i83 = i96 * i28;

        $i84 = $i83 & -16777216;

        $i85 = $i84 >>> 24;

        $i87 = $i86 | $i85;

        r13[i100] = $i87;

        i99 = $i87;

     label08:
        $i88 = i101 + 1;

        i101 = $i88 % i5;

        i97 = i97 + $i8;

        i100 = i100 + $i9;

     label09:
        if i97 < i32 goto label06;

        i89 = i89 + 1;

     label10:
        $i29 = $i0 - i2;

        if i89 < $i29 goto label03;

        return r3;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.color.ColorSpace $r5;
        java.awt.image.SampleModel $r2;
        int[] r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        java.awt.image.DirectColorModel $r8;
        java.lang.IllegalArgumentException $r7;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        r3 = newarray (int)[4];

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        r3[0] = 255;

        goto label6;

     label2:
        r3[0] = 255;

        $i7 = (int) 65280;

        r3[3] = $i7;

        goto label6;

     label3:
        r3[0] = 16711680;

        $i9 = (int) 65280;

        r3[1] = $i9;

        r3[2] = 255;

        goto label6;

     label4:
        r3[0] = 16711680;

        $i11 = (int) 65280;

        r3[1] = $i11;

        r3[2] = 255;

        r3[3] = -16777216;

        goto label6;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GaussianBlurRed8Bit only supports one to four band images");

        throw $r7;

     label6:
        $r5 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r8 = new java.awt.image.DirectColorModel;

        $i1 = 8 * $i0;

        $i2 = r3[0];

        $i3 = r3[1];

        $i4 = r3[2];

        $i5 = r3[3];

        specialinvoke $r8.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r5, $i1, $i2, $i3, $i4, $i5, 1, 3);

        return $r8;
    }

    static void <clinit>()
    {
        float $f0, $f1, $f2, $f3;
        double $d0;

        <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float precision> = 0.499F;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(6.283185307179586);

        $f0 = (float) $d0;

        <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float SQRT2PI> = $f0;

        $f1 = <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float SQRT2PI>;

        $f2 = $f1 * 3.0F;

        $f3 = $f2 / 4.0F;

        <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: float DSQRT2PI> = $f3;

        return;
    }
}
