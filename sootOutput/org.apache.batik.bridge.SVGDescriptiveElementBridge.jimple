public abstract class org.apache.batik.bridge.SVGDescriptiveElementBridge extends org.apache.batik.bridge.AbstractSVGBridge implements org.apache.batik.bridge.GenericBridge, org.apache.batik.bridge.BridgeUpdateHandler, org.apache.batik.dom.svg.SVGContext
{
    org.w3c.dom.Element theElt;
    org.w3c.dom.Element parent;
    org.apache.batik.bridge.BridgeContext theCtx;

    public void <init>()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractSVGBridge: void <init>()>();

        return;
    }

    public void handleElement(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.Bridge $r5;
        org.apache.batik.bridge.UserAgent $r1;
        org.w3c.dom.Element r2, $r8;
        org.w3c.dom.Node $r7;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r4, r6;
        java.lang.Boolean $r3;
        org.apache.batik.dom.svg.SVGOMElement $r9;
        boolean $z0;

        r4 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>(r2, $r3);

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r4.<org.apache.batik.bridge.AbstractSVGBridge: org.apache.batik.bridge.Bridge getInstance()>();

        r6 = (org.apache.batik.bridge.SVGDescriptiveElementBridge) $r5;

        r6.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt> = r2;

        $r7 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r8 = (org.w3c.dom.Element) $r7;

        r6.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element parent> = $r8;

        r6.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx> = r0;

        $r9 = (org.apache.batik.dom.svg.SVGOMElement) r2;

        virtualinvoke $r9.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(r6);

     label1:
        return;
    }

    public void dispose()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element $r3, $r5, $r6;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.dom.svg.SVGOMElement $r4;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r3 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $r4 = (org.apache.batik.dom.svg.SVGOMElement) $r3;

        virtualinvoke $r4.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(null);

        $r6 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $r5 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element parent>;

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>($r6, $r5);

        r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt> = null;

        r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element parent> = null;

        return;
    }

    public void handleDOMNodeInsertedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element $r4;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        java.lang.Boolean $r3;
        org.apache.batik.bridge.BridgeContext $r1;
        org.w3c.dom.events.MutationEvent r5;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r5 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r4 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>($r4, $r3);

        return;
    }

    public void handleDOMCharacterDataModified(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element $r4;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        java.lang.Boolean $r3;
        org.apache.batik.bridge.BridgeContext $r1;
        org.w3c.dom.events.MutationEvent r5;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r5 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r4 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>($r4, $r3);

        return;
    }

    public void handleDOMNodeRemovedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.w3c.dom.events.MutationEvent r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r1 := @parameter0: org.w3c.dom.events.MutationEvent;

        virtualinvoke r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: void dispose()>();

        return;
    }

    public void handleDOMAttrModifiedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.w3c.dom.events.MutationEvent r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r1 := @parameter0: org.w3c.dom.events.MutationEvent;

        return;
    }

    public void handleCSSEngineEvent(org.apache.batik.css.engine.CSSEngineEvent)
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.apache.batik.css.engine.CSSEngineEvent r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r1 := @parameter0: org.apache.batik.css.engine.CSSEngineEvent;

        return;
    }

    public void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r1 := @parameter0: org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

        return;
    }

    public void handleOtherAnimationChanged(java.lang.String)
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public float getPixelUnitToMillimeter()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $f0 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getPixelToMM()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        float $f0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public java.awt.geom.Rectangle2D getBBox()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        return null;
    }

    public java.awt.geom.AffineTransform getScreenTransform()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        java.awt.geom.AffineTransform $r3;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: java.awt.geom.AffineTransform getTransform()>();

        return $r3;
    }

    public void setScreenTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        java.awt.geom.AffineTransform r3;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        r3 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void setTransform(java.awt.geom.AffineTransform)>(r3);

        return;
    }

    public java.awt.geom.AffineTransform getCTM()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        return null;
    }

    public java.awt.geom.AffineTransform getGlobalTransform()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        return null;
    }

    public float getViewportWidth()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r2;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $r2 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $f0 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: float getBlockWidth(org.w3c.dom.Element)>($r1);

        return $f0;
    }

    public float getViewportHeight()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r2;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        $r2 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.apache.batik.bridge.BridgeContext theCtx>;

        $r1 = r0.<org.apache.batik.bridge.SVGDescriptiveElementBridge: org.w3c.dom.Element theElt>;

        $f0 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: float getBlockHeight(org.w3c.dom.Element)>($r1);

        return $f0;
    }

    public float getFontSize()
    {
        org.apache.batik.bridge.SVGDescriptiveElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDescriptiveElementBridge;

        return 0.0F;
    }
}
