final class org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue extends org.apache.lucene.search.FieldValueHitQueue
{
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.SortField[], int) throws java.io.IOException
    {
        org.apache.lucene.search.SortField[] r1;
        org.apache.lucene.search.FieldComparator $r5;
        org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue r0;
        byte $b4;
        int[] $r4;
        int i0, i1, $i2, i3;
        org.apache.lucene.search.FieldComparator[] $r2;
        org.apache.lucene.search.SortField r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue;

        r1 := @parameter0: org.apache.lucene.search.SortField[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.search.FieldValueHitQueue: void <init>(org.apache.lucene.search.SortField[],int,org.apache.lucene.search.FieldValueHitQueue$1)>(r1, i0, null);

        $r2 = r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: org.apache.lucene.search.FieldComparator[] comparators>;

        i1 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        r3 = r1[i3];

        $r4 = r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: int[] reverseMul>;

        $i2 = i3;

        $z0 = r3.<org.apache.lucene.search.SortField: boolean reverse>;

        if $z0 == 0 goto label2;

        $b4 = -1;

        goto label3;

     label2:
        $b4 = 1;

     label3:
        $r4[$i2] = $b4;

        $r5 = virtualinvoke r3.<org.apache.lucene.search.SortField: org.apache.lucene.search.FieldComparator getComparator(int,int)>(i0, i3);

        virtualinvoke r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: void setComparator(int,org.apache.lucene.search.FieldComparator)>(i3, $r5);

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    protected boolean lessThan(org.apache.lucene.search.FieldValueHitQueue$Entry, org.apache.lucene.search.FieldValueHitQueue$Entry)
    {
        org.apache.lucene.search.FieldValueHitQueue$Entry r2, r3;
        org.apache.lucene.search.FieldComparator $r6;
        java.lang.AssertionError $r7, $r8;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue r0;
        org.apache.lucene.search.FieldComparator[] $r1, $r5;

        r0 := @this: org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue;

        r2 := @parameter0: org.apache.lucene.search.FieldValueHitQueue$Entry;

        r3 := @parameter1: org.apache.lucene.search.FieldValueHitQueue$Entry;

        $z0 = <org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != r3 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i8 = r2.<org.apache.lucene.search.FieldValueHitQueue$Entry: int slot>;

        $i7 = r3.<org.apache.lucene.search.FieldValueHitQueue$Entry: int slot>;

        if $i8 != $i7 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r1 = r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: org.apache.lucene.search.FieldComparator[] comparators>;

        $i9 = lengthof $r1;

        i10 = 0;

     label3:
        if i10 >= $i9 goto label7;

        $r4 = r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: int[] reverseMul>;

        $i4 = $r4[i10];

        $r5 = r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: org.apache.lucene.search.FieldComparator[] comparators>;

        $r6 = $r5[i10];

        $i3 = r2.<org.apache.lucene.search.FieldValueHitQueue$Entry: int slot>;

        $i2 = r3.<org.apache.lucene.search.FieldValueHitQueue$Entry: int slot>;

        $i5 = virtualinvoke $r6.<org.apache.lucene.search.FieldComparator: int compare(int,int)>($i3, $i2);

        i6 = $i4 * $i5;

        if i6 == 0 goto label6;

        if i6 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        i10 = i10 + 1;

        goto label3;

     label7:
        $i1 = r2.<org.apache.lucene.search.FieldValueHitQueue$Entry: int doc>;

        $i0 = r3.<org.apache.lucene.search.FieldValueHitQueue$Entry: int doc>;

        if $i1 <= $i0 goto label8;

        $z3 = 1;

        goto label9;

     label8:
        $z3 = 0;

     label9:
        return $z3;
    }

    protected volatile boolean lessThan(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.search.FieldValueHitQueue$Entry $r3, $r4;
        org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.search.FieldValueHitQueue$Entry) r1;

        $r3 = (org.apache.lucene.search.FieldValueHitQueue$Entry) r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: boolean lessThan(org.apache.lucene.search.FieldValueHitQueue$Entry,org.apache.lucene.search.FieldValueHitQueue$Entry)>($r4, $r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FieldValueHitQueue;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue: boolean $assertionsDisabled> = $z1;

        return;
    }
}
