public class org.apache.zookeeper.server.ZooKeeperServer extends java.lang.Object implements org.apache.zookeeper.server.SessionTracker$SessionExpirer, org.apache.zookeeper.server.ServerStats$Provider
{
    protected static final org.slf4j.Logger LOG;
    protected org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean;
    protected org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean;
    public static final int DEFAULT_TICK_TIME;
    protected int tickTime;
    protected int minSessionTimeout;
    protected int maxSessionTimeout;
    protected org.apache.zookeeper.server.SessionTracker sessionTracker;
    private org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory;
    private org.apache.zookeeper.server.ZKDatabase zkDb;
    protected long hzxid;
    public static final java.lang.Exception ok;
    protected org.apache.zookeeper.server.RequestProcessor firstProcessor;
    protected volatile boolean running;
    private static final long superSecret;
    int requestsInProcess;
    final java.util.List outstandingChanges;
    final java.util.HashMap outstandingChangesForPath;
    private org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory;
    private final org.apache.zookeeper.server.ServerStats serverStats;

    void removeCnxn(org.apache.zookeeper.server.ServerCnxn)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ServerCnxn r1;
        org.apache.zookeeper.server.ZKDatabase $r2;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: void removeCnxn(org.apache.zookeeper.server.ServerCnxn)>(r1);

        return;
    }

    public void <init>()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ServerStats $r6;
        int $i1, $i3;
        java.util.HashMap $r5;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime> = 3000;

        $i1 = (int) -1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout> = $i1;

        $i3 = (int) -1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout> = $i3;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory> = null;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid> = 0L;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: java.util.List outstandingChanges> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: java.util.HashMap outstandingChangesForPath> = $r5;

        $r6 = new org.apache.zookeeper.server.ServerStats;

        specialinvoke $r6.<org.apache.zookeeper.server.ServerStats: void <init>(org.apache.zookeeper.server.ServerStats$Provider)>(r0);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerStats serverStats> = $r6;

        return;
    }

    public void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, int, int, int, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder, org.apache.zookeeper.server.ZKDatabase)
    {
        org.apache.zookeeper.server.ZKDatabase r5;
        java.util.HashMap $r23;
        java.util.ArrayList $r22;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r4;
        int i0, i1, i2, $i3, $i4, $i6, $i8;
        java.lang.String $r20;
        org.apache.zookeeper.server.ServerStats $r24;
        org.slf4j.Logger $r7;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r21;
        java.io.File $r15, $r18;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r25;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r4 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r21 := @parameter4: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        r5 := @parameter5: org.apache.zookeeper.server.ZKDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime> = 3000;

        $i6 = (int) -1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout> = $i6;

        $i8 = (int) -1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout> = $i8;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory> = null;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid> = 0L;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: java.util.List outstandingChanges> = $r22;

        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.ZooKeeperServer: java.util.HashMap outstandingChangesForPath> = $r23;

        $r24 = new org.apache.zookeeper.server.ServerStats;

        specialinvoke $r24.<org.apache.zookeeper.server.ServerStats: void <init>(org.apache.zookeeper.server.ServerStats$Provider)>(r0);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerStats serverStats> = $r24;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory> = r4;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb> = r5;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime> = i0;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout> = i1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout> = i2;

        $r7 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created server with tickTime ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minSessionTimeout ");

        $i3 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: int getMinSessionTimeout()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxSessionTimeout ");

        $i4 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: int getMaxSessionTimeout()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" datadir ");

        $r15 = virtualinvoke r4.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: java.io.File getDataDir()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" snapdir ");

        $r18 = virtualinvoke r4.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: java.io.File getSnapDir()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r20);

        return;
    }

    public void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, int, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        org.apache.zookeeper.server.ZKDatabase $r4;
        int i0, $i2, $i4;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r2;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        $r4 = new org.apache.zookeeper.server.ZKDatabase;

        specialinvoke $r4.<org.apache.zookeeper.server.ZKDatabase: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>(r1);

        $i2 = (int) -1;

        $i4 = (int) -1;

        specialinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase)>(r1, i0, $i2, $i4, r2, $r4);

        return;
    }

    public org.apache.zookeeper.server.ServerStats serverStats()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ServerStats $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerStats serverStats>;

        return $r1;
    }

    public void dumpConf(java.io.PrintWriter)
    {
        org.apache.zookeeper.server.ZKDatabase $r2, $r6;
        org.apache.zookeeper.server.ServerCnxnFactory $r10;
        long $l5;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5, $r9;
        java.io.PrintWriter r0;
        java.io.File $r4, $r8;
        org.apache.zookeeper.server.ZooKeeperServer r1;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("clientPort=");

        $i0 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: int getClientPort()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("dataDir=");

        $r2 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r3 = $r2.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        $r4 = virtualinvoke $r3.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: java.io.File getSnapDir()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("dataLogDir=");

        $r6 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r7 = $r6.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        $r8 = virtualinvoke $r7.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: java.io.File getDataDir()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("tickTime=");

        $i1 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: int getTickTime()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i1);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("maxClientCnxns=");

        $r10 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        $i2 = virtualinvoke $r10.<org.apache.zookeeper.server.ServerCnxnFactory: int getMaxClientCnxnsPerHost()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("minSessionTimeout=");

        $i3 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: int getMinSessionTimeout()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i3);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("maxSessionTimeout=");

        $i4 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: int getMaxSessionTimeout()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i4);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("serverId=");

        $l5 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: long getServerId()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(long)>($l5);

        return;
    }

    public void <init>(java.io.File, java.io.File, int) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZooKeeperServer$BasicDataTreeBuilder $r4;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;
        int i0;
        java.io.File r2, r3;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        $r1 = new org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        specialinvoke $r1.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void <init>(java.io.File,java.io.File)>(r2, r3);

        $r4 = new org.apache.zookeeper.server.ZooKeeperServer$BasicDataTreeBuilder;

        specialinvoke $r4.<org.apache.zookeeper.server.ZooKeeperServer$BasicDataTreeBuilder: void <init>()>();

        specialinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder)>($r1, i0, $r4);

        return;
    }

    public void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        org.apache.zookeeper.server.ZKDatabase $r4;
        int $i1, $i3;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r2;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        r2 := @parameter1: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        $r4 = new org.apache.zookeeper.server.ZKDatabase;

        specialinvoke $r4.<org.apache.zookeeper.server.ZKDatabase: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>(r1);

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase)>(r1, 3000, $i1, $i3, r2, $r4);

        return;
    }

    public org.apache.zookeeper.server.ZKDatabase getZKDatabase()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZKDatabase $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        return $r1;
    }

    public void setZKDatabase(org.apache.zookeeper.server.ZKDatabase)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZKDatabase r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ZKDatabase;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb> = r1;

        return;
    }

    public void loadData() throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.zookeeper.server.ZKDatabase $r1, $r3, $r6, $r10, $r12;
        long $l0, $l1, $l2;
        java.lang.Long $r9, r15;
        java.util.LinkedList $r2;
        boolean $z0, $z1;
        java.util.Iterator $r5, $r7;
        java.util.Collection $r4;
        java.util.concurrent.ConcurrentHashMap $r13;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.lang.Object $r8, $r11, $r14;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $l0 = virtualinvoke $r1.<org.apache.zookeeper.server.ZKDatabase: long loadDataBase()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void setZxid(long)>($l0);

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r4 = virtualinvoke $r3.<org.apache.zookeeper.server.ZKDatabase: java.util.Collection getSessions()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.Long) $r11;

        $r12 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r13 = virtualinvoke $r12.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        $r14 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r15);

        if $r14 != null goto label2;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r15);

     label2:
        goto label1;

     label3:
        $r6 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r6.<org.apache.zookeeper.server.ZKDatabase: void setDataTreeInit(boolean)>(1);

        $r7 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Long) $r8;

        $l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $r10 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $l2 = virtualinvoke $r10.<org.apache.zookeeper.server.ZKDatabase: long getDataTreeLastProcessedZxid()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void killSession(long,long)>($l1, $l2);

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void takeSnapshot()>();

        return;
    }

    public void takeSnapshot()
    {
        org.slf4j.Logger $r7;
        org.apache.zookeeper.server.ZKDatabase $r1, $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.io.IOException $r6;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r2;
        org.apache.zookeeper.server.DataTree $r3;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

     label1:
        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory>;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r3 = virtualinvoke $r1.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        $r4 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r5 = virtualinvoke $r4.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        virtualinvoke $r2.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void save(org.apache.zookeeper.server.DataTree,java.util.concurrent.ConcurrentHashMap)>($r3, $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Severe unrecoverable error, exiting", $r6);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized long getZxid()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $l0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid>;

        return $l0;
    }

    synchronized long getNextZxid()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long $l0, $l1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $l0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid>;

        $l1 = $l0 + 1L;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid> = $l1;

        return $l1;
    }

    public synchronized void setZxid(long)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long l0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: long hzxid> = l0;

        return;
    }

    long getTime()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    private void close(long)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i2;
        long l0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        $i2 = (int) -11;

        specialinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void submitRequest(org.apache.zookeeper.server.ServerCnxn,long,int,int,java.nio.ByteBuffer,java.util.List)>(null, l0, $i2, 0, null, null);

        return;
    }

    public void closeSession(long)
    {
        org.slf4j.Logger $r1;
        long l0;
        org.apache.zookeeper.server.ZooKeeperServer r6;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String $r3, $r5;

        r6 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        $r1 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing session 0x");

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r5);

        specialinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: void close(long)>(l0);

        return;
    }

    protected void killSession(long, long)
    {
        org.slf4j.Logger $r2, $r6;
        org.apache.zookeeper.server.ZKDatabase $r1;
        long l0, l1;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTracker $r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZKDatabase: void killSession(long,long)>(l0, l1);

        $r2 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZooKeeperServer --- killSession: 0x");

        $r8 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r6, 32L, $r10);

     label1:
        $r3 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        if $r3 == null goto label2;

        $r4 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        interfaceinvoke $r4.<org.apache.zookeeper.server.SessionTracker: void removeSession(long)>(l0);

     label2:
        return;
    }

    public void expire(org.apache.zookeeper.server.SessionTracker$Session)
    {
        org.slf4j.Logger $r2;
        org.apache.zookeeper.server.SessionTracker$Session r0;
        long $l0;
        org.apache.zookeeper.server.ZooKeeperServer r10;
        int $i1;
        java.lang.StringBuilder $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String $r4, $r9;

        r10 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r0 := @parameter0: org.apache.zookeeper.server.SessionTracker$Session;

        $l0 = interfaceinvoke r0.<org.apache.zookeeper.server.SessionTracker$Session: long getSessionId()>();

        $r2 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expiring session 0x");

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeout of ");

        $i1 = interfaceinvoke r0.<org.apache.zookeeper.server.SessionTracker$Session: int getTimeout()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms exceeded");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r9);

        specialinvoke r10.<org.apache.zookeeper.server.ZooKeeperServer: void close(long)>($l0);

        return;
    }

    void touch(org.apache.zookeeper.server.ServerCnxn) throws org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException
    {
        long $l0;
        org.apache.zookeeper.server.ZooKeeperServer r1;
        org.apache.zookeeper.server.SessionTracker $r2;
        int $i1;
        org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException $r3;
        org.apache.zookeeper.server.ServerCnxn r0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r0 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        if r0 != null goto label1;

        return;

     label1:
        $l0 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        $i1 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: int getSessionTimeout()>();

        $r2 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $z0 = interfaceinvoke $r2.<org.apache.zookeeper.server.SessionTracker: boolean touchSession(long,int)>($l0, $i1);

        if $z0 != 0 goto label2;

        $r3 = new org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No session with sessionid 0x");

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists, probably expired and removed");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        return;
    }

    protected void registerJMX()
    {
        org.slf4j.Logger $r11, $r13;
        org.apache.zookeeper.server.ZKDatabase $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2, $r7;
        org.apache.zookeeper.server.DataTreeBean $r4, $r9;
        java.lang.Exception $r10, $r12;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZooKeeperServerBean $r1, $r3, $r8;
        org.apache.zookeeper.server.DataTree $r6;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

     label1:
        $r1 = new org.apache.zookeeper.server.ZooKeeperServerBean;

        specialinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServerBean: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r0);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = $r1;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3, null);

     label2:
        $r4 = new org.apache.zookeeper.server.DataTreeBean;

        $r5 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r6 = virtualinvoke $r5.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        specialinvoke $r4.<org.apache.zookeeper.server.DataTreeBean: void <init>(org.apache.zookeeper.server.DataTree)>($r6);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = $r4;

        $r7 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r9 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        $r8 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r7.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r9, $r8);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r12);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r11 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r10);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void startdata() throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r4;
        org.apache.zookeeper.server.ZKDatabase $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        if $r1 != null goto label1;

        $r3 = new org.apache.zookeeper.server.ZKDatabase;

        $r4 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory>;

        specialinvoke $r3.<org.apache.zookeeper.server.ZKDatabase: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>($r4);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb> = $r3;

     label1:
        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $z0 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: boolean isInitialized()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void loadData()>();

     label2:
        return;
    }

    public void startup()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.lang.Throwable $r2;
        org.apache.zookeeper.server.SessionTracker $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void createSessionTracker()>();

     label1:
        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void startSessionTracker()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void setupRequestProcessors()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void registerJMX()>();

        entermonitor r0;

     label2:
        r0.<org.apache.zookeeper.server.ZooKeeperServer: boolean running> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void setupRequestProcessors()
    {
        org.apache.zookeeper.server.ZooKeeperServer r1;
        org.apache.zookeeper.server.PrepRequestProcessor $r4, $r6;
        org.apache.zookeeper.server.FinalRequestProcessor $r0;
        org.apache.zookeeper.server.SyncRequestProcessor $r2, $r3;
        org.apache.zookeeper.server.RequestProcessor $r5;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r0 = new org.apache.zookeeper.server.FinalRequestProcessor;

        specialinvoke $r0.<org.apache.zookeeper.server.FinalRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r1);

        $r2 = new org.apache.zookeeper.server.SyncRequestProcessor;

        specialinvoke $r2.<org.apache.zookeeper.server.SyncRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r0);

        $r3 = (org.apache.zookeeper.server.SyncRequestProcessor) $r2;

        virtualinvoke $r3.<org.apache.zookeeper.server.SyncRequestProcessor: void start()>();

        $r4 = new org.apache.zookeeper.server.PrepRequestProcessor;

        specialinvoke $r4.<org.apache.zookeeper.server.PrepRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r2);

        r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor> = $r4;

        $r5 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        $r6 = (org.apache.zookeeper.server.PrepRequestProcessor) $r5;

        virtualinvoke $r6.<org.apache.zookeeper.server.PrepRequestProcessor: void start()>();

        return;
    }

    protected void createSessionTracker()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZKDatabase $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        int $i0;
        org.apache.zookeeper.server.SessionTrackerImpl $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = new org.apache.zookeeper.server.SessionTrackerImpl;

        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime>;

        specialinvoke $r1.<org.apache.zookeeper.server.SessionTrackerImpl: void <init>(org.apache.zookeeper.server.SessionTracker$SessionExpirer,java.util.concurrent.ConcurrentHashMap,int,long)>(r0, $r3, $i0, 1L);

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker> = $r1;

        return;
    }

    protected void startSessionTracker()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTrackerImpl $r2;
        org.apache.zookeeper.server.SessionTracker $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $r2 = (org.apache.zookeeper.server.SessionTrackerImpl) $r1;

        virtualinvoke $r2.<org.apache.zookeeper.server.SessionTrackerImpl: void start()>();

        return;
    }

    public boolean isRunning()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $z0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: boolean running>;

        return $z0;
    }

    public void shutdown()
    {
        org.slf4j.Logger $r0;
        org.apache.zookeeper.server.ZKDatabase $r4, $r5;
        org.apache.zookeeper.server.ZooKeeperServer r1;
        org.apache.zookeeper.server.SessionTracker $r2, $r7;
        org.apache.zookeeper.server.RequestProcessor $r3, $r6;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r0 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("shutting down");

        r1.<org.apache.zookeeper.server.ZooKeeperServer: boolean running> = 0;

        $r2 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        if $r2 == null goto label1;

        $r7 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        interfaceinvoke $r7.<org.apache.zookeeper.server.SessionTracker: void shutdown()>();

     label1:
        $r3 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        if $r3 == null goto label2;

        $r6 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        interfaceinvoke $r6.<org.apache.zookeeper.server.RequestProcessor: void shutdown()>();

     label2:
        $r4 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        if $r4 == null goto label3;

        $r5 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r5.<org.apache.zookeeper.server.ZKDatabase: void clear()>();

     label3:
        virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: void unregisterJMX()>();

        return;
    }

    protected void unregisterJMX()
    {
        org.slf4j.Logger $r8, $r10;
        org.apache.zookeeper.jmx.MBeanRegistry $r3, $r5;
        org.apache.zookeeper.server.DataTreeBean $r1, $r6;
        java.lang.Exception $r7, $r9;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ZooKeeperServerBean $r2, $r4;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        if $r1 == null goto label2;

        $r5 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        virtualinvoke $r5.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r6);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r9);

     label4:
        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        if $r2 == null goto label5;

        $r3 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r4 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r3.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r4);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r7);

     label7:
        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public synchronized void incInProcess()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0, $i1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int requestsInProcess>;

        $i1 = $i0 + 1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int requestsInProcess> = $i1;

        return;
    }

    public synchronized void decInProcess()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0, $i1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int requestsInProcess>;

        $i1 = $i0 - 1;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: int requestsInProcess> = $i1;

        return;
    }

    public int getInProcess()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int requestsInProcess>;

        return $i0;
    }

    byte[] generatePasswd(long)
    {
        org.apache.zookeeper.server.ZooKeeperServer r2;
        byte[] r1;
        java.util.Random $r0;
        long l0, $l1;

        r2 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        $r0 = new java.util.Random;

        $l1 = l0 ^ 3007405056L;

        specialinvoke $r0.<java.util.Random: void <init>(long)>($l1);

        r1 = newarray (byte)[16];

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r1);

        return r1;
    }

    protected boolean checkPasswd(long, byte[])
    {
        org.apache.zookeeper.server.ZooKeeperServer r1;
        byte[] r0, $r2;
        byte $b1;
        long l0;
        boolean $z0, $z1;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: byte[] generatePasswd(long)>(l0);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r0, $r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    long createSession(org.apache.zookeeper.server.ServerCnxn, byte[], int)
    {
        byte[] r3;
        long $l1, $l2;
        java.util.Random $r6;
        java.nio.ByteBuffer $r4;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTracker $r1;
        int i0, $i4;
        org.apache.zookeeper.server.ServerCnxn r5;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r5 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        r3 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $l1 = interfaceinvoke $r1.<org.apache.zookeeper.server.SessionTracker: long createSession(int)>(i0);

        $r6 = new java.util.Random;

        $l2 = $l1 ^ 3007405056L;

        specialinvoke $r6.<java.util.Random: void <init>(long)>($l2);

        virtualinvoke $r6.<java.util.Random: void nextBytes(byte[])>(r3);

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void setSessionId(long)>($l1);

        $i4 = (int) -10;

        specialinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void submitRequest(org.apache.zookeeper.server.ServerCnxn,long,int,int,java.nio.ByteBuffer,java.util.List)>(r5, $l1, $i4, 0, $r4, null);

        return $l1;
    }

    public void setOwner(long, java.lang.Object) throws org.apache.zookeeper.KeeperException$SessionExpiredException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTracker $r2;
        long l0;
        java.lang.Object r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        interfaceinvoke $r2.<org.apache.zookeeper.server.SessionTracker: void setOwner(long,java.lang.Object)>(l0, r1);

        return;
    }

    protected void revalidateSession(org.apache.zookeeper.server.ServerCnxn, long, int) throws java.io.IOException
    {
        long l0;
        org.apache.zookeeper.server.SessionTracker $r1;
        int i1;
        org.apache.zookeeper.server.ServerCnxn r3;
        java.lang.String $r7, $r11;
        boolean $z0, $z1;
        org.slf4j.Logger $r2, $r5;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.lang.StringBuilder $r4, $r6, $r8, $r9, $r10;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r3 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $z0 = interfaceinvoke $r1.<org.apache.zookeeper.server.SessionTracker: boolean touchSession(long,int)>(l0, i1);

        $r2 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r5 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session 0x");

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is valid: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r5, 32L, $r11);

     label1:
        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void finishSessionInit(org.apache.zookeeper.server.ServerCnxn,boolean)>(r3, $z0);

        return;
    }

    public void reopenSession(org.apache.zookeeper.server.ServerCnxn, long, byte[], int) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        byte[] r1;
        int i1;
        long l0;
        org.apache.zookeeper.server.ServerCnxn r2;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r2 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        l0 := @parameter1: long;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: boolean checkPasswd(long,byte[])>(l0, r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void finishSessionInit(org.apache.zookeeper.server.ServerCnxn,boolean)>(r2, 0);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void revalidateSession(org.apache.zookeeper.server.ServerCnxn,long,int)>(r2, l0, i1);

     label2:
        return;
    }

    public void finishSessionInit(org.apache.zookeeper.server.ServerCnxn, boolean)
    {
        byte[] $r1, $r33;
        org.apache.jute.BinaryOutputArchive $r35;
        java.nio.ByteBuffer $r2, $r3, $r25;
        org.apache.zookeeper.server.ServerCnxn r0;
        boolean z0, $z1, $z2;
        java.net.InetSocketAddress $r12, $r21;
        java.lang.Exception $r28, $r30;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r13, $r17, $r19, $r20, $r22, $r23, $r38, $r39;
        java.io.ByteArrayOutputStream $r37;
        long $l2, $l4, $l6, $l7;
        org.apache.zookeeper.server.ServerCnxnFactory $r27;
        int $i0, $i1, $i3, $i5, $i9;
        java.lang.String $r7, $r14, $r18, $r24;
        org.slf4j.Logger $r5, $r16, $r29, $r31;
        org.apache.zookeeper.proto.ConnectResponse $r36;
        org.apache.zookeeper.server.ZooKeeperServer r26;

        r26 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r0 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        z0 := @parameter1: boolean;

     label01:
        if z0 == 0 goto label02;

        $r27 = r26.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        virtualinvoke $r27.<org.apache.zookeeper.server.ServerCnxnFactory: void registerConnection(org.apache.zookeeper.server.ServerCnxn)>(r0);

     label02:
        goto label04;

     label03:
        $r30 := @caughtexception;

        $r31 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r30);

     label04:
        $r36 = new org.apache.zookeeper.proto.ConnectResponse;

        if z0 == 0 goto label05;

        $i5 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: int getSessionTimeout()>();

        goto label06;

     label05:
        $i5 = 0;

     label06:
        if z0 == 0 goto label07;

        $l6 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        goto label08;

     label07:
        $l6 = 0L;

     label08:
        if z0 == 0 goto label09;

        $l7 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        $r33 = virtualinvoke r26.<org.apache.zookeeper.server.ZooKeeperServer: byte[] generatePasswd(long)>($l7);

        goto label10;

     label09:
        $r33 = newarray (byte)[16];

     label10:
        specialinvoke $r36.<org.apache.zookeeper.proto.ConnectResponse: void <init>(int,int,long,byte[])>(0, $i5, $l6, $r33);

        $r37 = new java.io.ByteArrayOutputStream;

        specialinvoke $r37.<java.io.ByteArrayOutputStream: void <init>()>();

        $r35 = staticinvoke <org.apache.jute.BinaryOutputArchive: org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)>($r37);

        $i9 = (int) -1;

        virtualinvoke $r35.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i9, "len");

        virtualinvoke $r36.<org.apache.zookeeper.proto.ConnectResponse: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r35, "connect");

        $z2 = r0.<org.apache.zookeeper.server.ServerCnxn: boolean isOldClient>;

        if $z2 != 0 goto label11;

        $z1 = r26 instanceof org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        virtualinvoke $r35.<org.apache.jute.BinaryOutputArchive: void writeBool(boolean,java.lang.String)>($z1, "readOnly");

     label11:
        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void close()>();

        $r1 = virtualinvoke $r37.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $i1 = $i0 - 4;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: void sendBuffer(java.nio.ByteBuffer)>($r2);

        if z0 != 0 goto label12;

        $r16 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid session 0x");

        $l4 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l4);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for client ");

        $r21 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", probably expired");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r24);

        $r25 = <org.apache.zookeeper.server.ServerCnxnFactory: java.nio.ByteBuffer closeConn>;

        virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: void sendBuffer(java.nio.ByteBuffer)>($r25);

        goto label13;

     label12:
        $r5 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Established session 0x");

        $l2 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with negotiated timeout ");

        $i3 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: int getSessionTimeout()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for client ");

        $r12 = virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r14);

     label13:
        virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: void enableRecv()>();

     label14:
        goto label16;

     label15:
        $r28 := @caughtexception;

        $r29 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception while establishing session, closing", $r28);

        virtualinvoke r0.<org.apache.zookeeper.server.ServerCnxn: void close()>();

     label16:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label14 with label15;
    }

    public void closeSession(org.apache.zookeeper.server.ServerCnxn, org.apache.zookeeper.proto.RequestHeader)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.proto.RequestHeader r2;
        org.apache.zookeeper.server.ServerCnxn r1;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        r2 := @parameter1: org.apache.zookeeper.proto.RequestHeader;

        $l0 = virtualinvoke r1.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void closeSession(long)>($l0);

        return;
    }

    public long getServerId()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        return 0L;
    }

    private void submitRequest(org.apache.zookeeper.server.ServerCnxn, long, int, int, java.nio.ByteBuffer, java.util.List)
    {
        long l0;
        java.nio.ByteBuffer r2;
        org.apache.zookeeper.server.Request $r0;
        org.apache.zookeeper.server.ZooKeeperServer r4;
        java.util.List r3;
        int i1, i2;
        org.apache.zookeeper.server.ServerCnxn r1;

        r4 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.nio.ByteBuffer;

        r3 := @parameter5: java.util.List;

        $r0 = new org.apache.zookeeper.server.Request;

        specialinvoke $r0.<org.apache.zookeeper.server.Request: void <init>(org.apache.zookeeper.server.ServerCnxn,long,int,int,java.nio.ByteBuffer,java.util.List)>(r1, l0, i1, i2, r2, r3);

        virtualinvoke r4.<org.apache.zookeeper.server.ZooKeeperServer: void submitRequest(org.apache.zookeeper.server.Request)>($r0);

        return;
    }

    public void submitRequest(org.apache.zookeeper.server.Request)
    {
        org.apache.zookeeper.server.ServerCnxn $r3, $r10;
        org.apache.zookeeper.server.RequestProcessor $r1, $r9, $r11;
        boolean $z0, $z1, $z2;
        org.apache.zookeeper.server.Request r2;
        org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException $r20;
        java.lang.StringBuilder $r4, $r6, $r7, $r14, $r16, $r18, $r22, $r24, $r26;
        java.lang.Throwable $r28;
        int $i0, $i1;
        org.apache.zookeeper.server.RequestProcessor$RequestProcessorException $r13;
        java.lang.String $r8, $r17, $r19, $r25, $r27;
        org.slf4j.Logger $r5, $r15, $r21, $r23, $r30;
        java.lang.RuntimeException $r12;
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.lang.InterruptedException $r29;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r2 := @parameter0: org.apache.zookeeper.server.Request;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        if $r1 != null goto label09;

        entermonitor r0;

     label01:
        $z1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: boolean running>;

        if $z1 != 0 goto label02;

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        goto label01;

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

        $r30 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected interruption", $r29);

     label04:
        $r11 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        if $r11 != null goto label05;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not started");

        throw $r12;

     label05:
        exitmonitor r0;

     label06:
        goto label09;

     label07:
        $r28 := @caughtexception;

        exitmonitor r0;

     label08:
        throw $r28;

     label09:
        $r3 = r2.<org.apache.zookeeper.server.Request: org.apache.zookeeper.server.ServerCnxn cnxn>;

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void touch(org.apache.zookeeper.server.ServerCnxn)>($r3);

        $i0 = r2.<org.apache.zookeeper.server.Request: int type>;

        $z0 = staticinvoke <org.apache.zookeeper.server.Request: boolean isValid(int)>($i0);

        if $z0 == 0 goto label10;

        $r9 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        interfaceinvoke $r9.<org.apache.zookeeper.server.RequestProcessor: void processRequest(org.apache.zookeeper.server.Request)>(r2);

        $r10 = r2.<org.apache.zookeeper.server.Request: org.apache.zookeeper.server.ServerCnxn cnxn>;

        if $r10 == null goto label11;

        virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: void incInProcess()>();

        goto label11;

     label10:
        $r5 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping packet at server of type ");

        $i1 = r2.<org.apache.zookeeper.server.Request: int type>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>($r8);

     label11:
        goto label15;

     label12:
        $r20 := @caughtexception;

        $r21 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $z2 = interfaceinvoke $r21.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label13;

        $r23 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping request: ");

        $r25 = virtualinvoke $r20.<org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

        $r15 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to process request:");

        $r17 = virtualinvoke $r13.<org.apache.zookeeper.server.RequestProcessor$RequestProcessorException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r19, $r13);

     label15:
        return;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch org.apache.zookeeper.server.ZooKeeperServer$MissingSessionException from label09 to label11 with label12;
        catch org.apache.zookeeper.server.RequestProcessor$RequestProcessorException from label09 to label11 with label14;
    }

    public static int getSnapCount()
    {
        int $i0;
        java.lang.String $r0;
        java.lang.Exception $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zookeeper.snapCount");

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        return 100000;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getGlobalOutstandingLimit()
    {
        org.apache.zookeeper.server.ZooKeeperServer r2;
        int i0;
        java.lang.String $r0;
        java.lang.Exception $r1;

        r2 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zookeeper.globalOutstandingLimit");

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        i0 = 1000;

     label4:
        return i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setServerCnxnFactory(org.apache.zookeeper.server.ServerCnxnFactory)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ServerCnxnFactory r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxnFactory;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory> = r1;

        return;
    }

    public org.apache.zookeeper.server.ServerCnxnFactory getServerCnxnFactory()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.ServerCnxnFactory $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        return $r1;
    }

    public long getLastProcessedZxid()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long $l0;
        org.apache.zookeeper.server.ZKDatabase $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $l0 = virtualinvoke $r1.<org.apache.zookeeper.server.ZKDatabase: long getDataTreeLastProcessedZxid()>();

        return $l0;
    }

    public long getOutstandingRequests()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: int getInProcess()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public void truncateLog(long) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        long l0;
        org.apache.zookeeper.server.ZKDatabase $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZKDatabase: boolean truncateLog(long)>(l0);

        return;
    }

    public int getTickTime()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime>;

        return $i0;
    }

    public void setTickTime(int)
    {
        org.apache.zookeeper.server.ZooKeeperServer r5;
        org.slf4j.Logger $r1;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r4;

        r5 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        i0 := @parameter0: int;

        $r1 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tickTime set to ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r4);

        r5.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime> = i0;

        return;
    }

    public int getMinSessionTimeout()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime>;

        $i2 = $i1 * 2;

        goto label2;

     label1:
        $i2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout>;

     label2:
        return $i2;
    }

    public void setMinSessionTimeout(int)
    {
        org.apache.zookeeper.server.ZooKeeperServer r5;
        org.slf4j.Logger $r1;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r4;

        r5 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        i0 := @parameter0: int;

        $r1 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minSessionTimeout set to ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r4);

        r5.<org.apache.zookeeper.server.ZooKeeperServer: int minSessionTimeout> = i0;

        return;
    }

    public int getMaxSessionTimeout()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $i0 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int tickTime>;

        $i2 = $i1 * 20;

        goto label2;

     label1:
        $i2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout>;

     label2:
        return $i2;
    }

    public void setMaxSessionTimeout(int)
    {
        org.apache.zookeeper.server.ZooKeeperServer r5;
        org.slf4j.Logger $r1;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r4;

        r5 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        i0 := @parameter0: int;

        $r1 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxSessionTimeout set to ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r4);

        r5.<org.apache.zookeeper.server.ZooKeeperServer: int maxSessionTimeout> = i0;

        return;
    }

    public int getClientPort()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0, $i2;
        org.apache.zookeeper.server.ServerCnxnFactory $r1, $r2;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        $i0 = virtualinvoke $r2.<org.apache.zookeeper.server.ServerCnxnFactory: int getLocalPort()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public void setTxnLogFactory(org.apache.zookeeper.server.persistence.FileTxnSnapLog)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory> = r1;

        return;
    }

    public org.apache.zookeeper.server.persistence.FileTxnSnapLog getTxnLogFactory()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.persistence.FileTxnSnapLog txnLogFactory>;

        return $r1;
    }

    public java.lang.String getState()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        return "standalone";
    }

    public void dumpEphemerals(java.io.PrintWriter)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        java.io.PrintWriter r1;
        org.apache.zookeeper.server.ZKDatabase $r2;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: void dumpEphemerals(java.io.PrintWriter)>(r1);

        return;
    }

    public int getNumAliveConnections()
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        int $i0;
        org.apache.zookeeper.server.ServerCnxnFactory $r1;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        $i0 = virtualinvoke $r1.<org.apache.zookeeper.server.ServerCnxnFactory: int getNumAliveConnections()>();

        return $i0;
    }

    public void processConnectRequest(org.apache.zookeeper.server.ServerCnxn, java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] $r9;
        byte $b2, $b7;
        org.apache.zookeeper.proto.ConnectRequest $r66;
        org.apache.zookeeper.server.ByteBufferInputStream $r65;
        java.lang.StringBuilder $r12, $r14, $r18, $r20, $r21, $r23, $r27, $r29, $r30, $r32, $r33, $r36, $r37, $r42, $r44, $r50, $r52, $r53, $r55, $r60, $r62, $r63, $r67, $r68, $r69, $r71, $r73, $r74;
        org.apache.zookeeper.server.ZKDatabase $r7, $r34;
        long $l0, $l1, $l6, $l8, $l9, $l10, $l11;
        org.apache.zookeeper.server.ServerCnxnFactory $r25;
        org.apache.zookeeper.server.ServerCnxn$CloseRequestException $r70, $r72;
        java.lang.String $r15, $r19, $r24, $r31, $r35, $r38, $r45, $r54, $r56, $r64;
        java.io.IOException $r57;
        org.apache.zookeeper.server.ZooKeeperServer r6;
        org.apache.zookeeper.server.DataTree $r8;
        java.nio.ByteBuffer r1;
        org.apache.zookeeper.server.ServerCnxn r5;
        boolean $z0, $z1, z2;
        java.net.InetSocketAddress $r13, $r22, $r28, $r43, $r51, $r61;
        int $i3, $i4, $i5, i12, $i13;
        org.slf4j.Logger $r4, $r11, $r17, $r39, $r46, $r49, $r59;
        org.apache.jute.BinaryInputArchive $r2;

        r6 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r5 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        r1 := @parameter1: java.nio.ByteBuffer;

        $r65 = new org.apache.zookeeper.server.ByteBufferInputStream;

        specialinvoke $r65.<org.apache.zookeeper.server.ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r1);

        $r2 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r65);

        $r66 = new org.apache.zookeeper.proto.ConnectRequest;

        specialinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: void <init>()>();

        virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "connect");

        $r4 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r49 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session establishment request from client ");

        $r51 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" client\'s lastZxid is 0x");

        $l11 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: long getLastZxidSeen()>();

        $r54 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l11);

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r49.<org.slf4j.Logger: void debug(java.lang.String)>($r56);

     label01:
        z2 = 0;

     label02:
        z2 = virtualinvoke $r2.<org.apache.jute.BinaryInputArchive: boolean readBool(java.lang.String)>("readOnly");

        r5.<org.apache.zookeeper.server.ServerCnxn: boolean isOldClient> = 0;

     label03:
        goto label05;

     label04:
        $r57 := @caughtexception;

        $r59 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection request from old client ");

        $r61 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; will be dropped if server is in r-o mode");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r59.<org.slf4j.Logger: void warn(java.lang.String)>($r64);

     label05:
        if z2 != 0 goto label06;

        $z1 = r6 instanceof org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        if $z1 == 0 goto label06;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Refusing session request for not-read-only client ");

        $r43 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r46.<org.slf4j.Logger: void info(java.lang.String)>($r45);

        $r70 = new org.apache.zookeeper.server.ServerCnxn$CloseRequestException;

        specialinvoke $r70.<org.apache.zookeeper.server.ServerCnxn$CloseRequestException: void <init>(java.lang.String)>($r45);

        throw $r70;

     label06:
        $l0 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: long getLastZxidSeen()>();

        $r7 = r6.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase zkDb>;

        $r8 = $r7.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $l1 = $r8.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid>;

        $b2 = $l0 cmp $l1;

        $i13 = (int) $b2;

        if $i13 <= 0 goto label07;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Refusing session request for client ");

        $r28 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as it has seen zxid 0x");

        $l9 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: long getLastZxidSeen()>();

        $r31 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l9);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" our last zxid is 0x");

        $r34 = virtualinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $l10 = virtualinvoke $r34.<org.apache.zookeeper.server.ZKDatabase: long getDataTreeLastProcessedZxid()>();

        $r35 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l10);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" client must try another server");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>($r38);

        $r72 = new org.apache.zookeeper.server.ServerCnxn$CloseRequestException;

        specialinvoke $r72.<org.apache.zookeeper.server.ServerCnxn$CloseRequestException: void <init>(java.lang.String)>($r38);

        throw $r72;

     label07:
        $i3 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: int getTimeOut()>();

        i12 = $i3;

        $r9 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: byte[] getPasswd()>();

        $i4 = virtualinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: int getMinSessionTimeout()>();

        if $i3 >= $i4 goto label08;

        i12 = $i4;

     label08:
        $i5 = virtualinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: int getMaxSessionTimeout()>();

        if i12 <= $i5 goto label09;

        i12 = $i5;

     label09:
        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void setSessionTimeout(int)>(i12);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void disableRecv()>();

        $l6 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: long getSessionId()>();

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label10;

        $l8 = virtualinvoke $r66.<org.apache.zookeeper.proto.ConnectRequest: long getSessionId()>();

        $r17 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client attempting to renew session 0x");

        $r19 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l8);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r22 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>($r24);

        $r25 = r6.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ServerCnxnFactory serverCnxnFactory>;

        virtualinvoke $r25.<org.apache.zookeeper.server.ServerCnxnFactory: void closeSession(long)>($l6);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void setSessionId(long)>($l6);

        virtualinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: void reopenSession(org.apache.zookeeper.server.ServerCnxn,long,byte[],int)>(r5, $l6, $r9, i12);

        goto label11;

     label10:
        $r11 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client attempting to establish new session at ");

        $r13 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>($r15);

        virtualinvoke r6.<org.apache.zookeeper.server.ZooKeeperServer: long createSession(org.apache.zookeeper.server.ServerCnxn,byte[],int)>(r5, $r9, i12);

     label11:
        return;

        catch java.io.IOException from label02 to label03 with label04;
    }

    public boolean shouldThrottle(long)
    {
        org.apache.zookeeper.server.ZooKeeperServer r0;
        byte $b3;
        int $i0, $i1, $i4;
        long l2;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        l2 := @parameter0: long;

        $i0 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: int getGlobalOutstandingLimit()>();

        $i1 = virtualinvoke r0.<org.apache.zookeeper.server.ZooKeeperServer: int getInProcess()>();

        if $i0 >= $i1 goto label3;

        $b3 = l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public void processPacket(org.apache.zookeeper.server.ServerCnxn, java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] $r51;
        org.apache.zookeeper.server.auth.AuthenticationProvider $r20;
        org.apache.zookeeper.server.ByteBufferInputStream $r0;
        org.apache.jute.Record $r9;
        java.lang.StringBuilder $r12, $r14, $r16, $r22, $r24, $r26, $r30, $r32, $r33, $r35, $r37, $r38, $r43, $r45, $r46, $r47, $r49, $r53, $r55, $r56, $r57, $r58;
        long $l2;
        java.lang.String $r17, $r19, $r27, $r34, $r39, $r48, $r50, $r59;
        java.lang.RuntimeException $r52;
        org.apache.zookeeper.server.ZooKeeperServer r8;
        java.nio.ByteBuffer $r3, $r42, r60;
        org.apache.zookeeper.server.ServerCnxn r5;
        boolean $z0;
        java.net.InetSocketAddress $r15, $r25;
        org.apache.zookeeper.proto.RequestHeader $r2;
        org.apache.zookeeper.server.Request $r4;
        java.util.List $r6;
        org.apache.zookeeper.proto.ReplyHeader $r10, $r28, $r40;
        org.apache.zookeeper.proto.AuthPacket $r18;
        org.apache.zookeeper.KeeperException$Code $r11, $r29, $r41, r61, $r62;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.slf4j.Logger $r13, $r21, $r23, $r31, $r36, $r44, $r54;
        org.apache.jute.BinaryInputArchive $r1;
        java.lang.Object $r7;

        r8 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r5 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        r60 := @parameter1: java.nio.ByteBuffer;

        $r0 = new org.apache.zookeeper.server.ByteBufferInputStream;

        specialinvoke $r0.<org.apache.zookeeper.server.ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r60);

        $r1 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r0);

        $r2 = new org.apache.zookeeper.proto.RequestHeader;

        specialinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: void <init>()>();

        virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r1, "header");

        $r3 = virtualinvoke r60.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $i0 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getType()>();

        if $i0 != 100 goto label10;

        $r13 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got auth packet ");

        $r15 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r17);

        $r18 = new org.apache.zookeeper.proto.AuthPacket;

        specialinvoke $r18.<org.apache.zookeeper.proto.AuthPacket: void <init>()>();

        staticinvoke <org.apache.zookeeper.server.ByteBufferInputStream: void byteBuffer2Record(java.nio.ByteBuffer,org.apache.jute.Record)>($r3, $r18);

        $r19 = virtualinvoke $r18.<org.apache.zookeeper.proto.AuthPacket: java.lang.String getScheme()>();

        $r20 = staticinvoke <org.apache.zookeeper.server.auth.ProviderRegistry: org.apache.zookeeper.server.auth.AuthenticationProvider getProvider(java.lang.String)>($r19);

        r61 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code AUTHFAILED>;

        if $r20 == null goto label04;

     label01:
        $r51 = virtualinvoke $r18.<org.apache.zookeeper.proto.AuthPacket: byte[] getAuth()>();

        r61 = interfaceinvoke $r20.<org.apache.zookeeper.server.auth.AuthenticationProvider: org.apache.zookeeper.KeeperException$Code handleAuthentication(org.apache.zookeeper.server.ServerCnxn,byte[])>(r5, $r51);

     label02:
        goto label04;

     label03:
        $r52 := @caughtexception;

        $r54 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught runtime exception from AuthenticationProvider: ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<org.slf4j.Logger: void warn(java.lang.String)>($r59);

        r61 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code AUTHFAILED>;

     label04:
        $r62 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code OK>;

        if r61 == $r62 goto label07;

        if $r20 != null goto label05;

        $r44 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No authentication provider for scheme: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has ");

        $r48 = staticinvoke <org.apache.zookeeper.server.auth.ProviderRegistry: java.lang.String listProviders()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String)>($r50);

        goto label06;

     label05:
        $r36 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication failed for scheme: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.slf4j.Logger: void warn(java.lang.String)>($r39);

     label06:
        $r40 = new org.apache.zookeeper.proto.ReplyHeader;

        $i9 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getXid()>();

        $r41 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code AUTHFAILED>;

        $i10 = virtualinvoke $r41.<org.apache.zookeeper.KeeperException$Code: int intValue()>();

        specialinvoke $r40.<org.apache.zookeeper.proto.ReplyHeader: void <init>(int,long,int)>($i9, 0L, $i10);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void sendResponse(org.apache.zookeeper.proto.ReplyHeader,org.apache.jute.Record,java.lang.String)>($r40, null, null);

        $r42 = <org.apache.zookeeper.server.ServerCnxnFactory: java.nio.ByteBuffer closeConn>;

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void sendBuffer(java.nio.ByteBuffer)>($r42);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void disableRecv()>();

        goto label09;

     label07:
        $r21 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r21.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label08;

        $r31 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication succeeded for scheme: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void debug(java.lang.String)>($r34);

     label08:
        $r23 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth success ");

        $r25 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.net.InetSocketAddress getRemoteSocketAddress()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String)>($r27);

        $r28 = new org.apache.zookeeper.proto.ReplyHeader;

        $i7 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getXid()>();

        $r29 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code OK>;

        $i8 = virtualinvoke $r29.<org.apache.zookeeper.KeeperException$Code: int intValue()>();

        specialinvoke $r28.<org.apache.zookeeper.proto.ReplyHeader: void <init>(int,long,int)>($i7, 0L, $i8);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void sendResponse(org.apache.zookeeper.proto.ReplyHeader,org.apache.jute.Record,java.lang.String)>($r28, null, null);

     label09:
        return;

     label10:
        $i1 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getType()>();

        if $i1 != 102 goto label11;

        $r9 = specialinvoke r8.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.jute.Record processSasl(java.nio.ByteBuffer,org.apache.zookeeper.server.ServerCnxn)>($r3, r5);

        $r10 = new org.apache.zookeeper.proto.ReplyHeader;

        $i5 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getXid()>();

        $r11 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code OK>;

        $i6 = virtualinvoke $r11.<org.apache.zookeeper.KeeperException$Code: int intValue()>();

        specialinvoke $r10.<org.apache.zookeeper.proto.ReplyHeader: void <init>(int,long,int)>($i5, 0L, $i6);

        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void sendResponse(org.apache.zookeeper.proto.ReplyHeader,org.apache.jute.Record,java.lang.String)>($r10, $r9, "response");

        goto label12;

     label11:
        $r4 = new org.apache.zookeeper.server.Request;

        $l2 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: long getSessionId()>();

        $i3 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getXid()>();

        $i4 = virtualinvoke $r2.<org.apache.zookeeper.proto.RequestHeader: int getType()>();

        $r6 = virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: java.util.List getAuthInfo()>();

        specialinvoke $r4.<org.apache.zookeeper.server.Request: void <init>(org.apache.zookeeper.server.ServerCnxn,long,int,int,java.nio.ByteBuffer,java.util.List)>(r5, $l2, $i3, $i4, $r3, $r6);

        $r7 = <org.apache.zookeeper.server.ServerCnxn: java.lang.Object me>;

        virtualinvoke $r4.<org.apache.zookeeper.server.Request: void setOwner(java.lang.Object)>($r7);

        virtualinvoke r8.<org.apache.zookeeper.server.ZooKeeperServer: void submitRequest(org.apache.zookeeper.server.Request)>($r4);

     label12:
        virtualinvoke r5.<org.apache.zookeeper.server.ServerCnxn: void incrOutstandingRequests(org.apache.zookeeper.proto.RequestHeader)>($r2);

        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    private org.apache.jute.Record processSasl(java.nio.ByteBuffer, org.apache.zookeeper.server.ServerCnxn) throws java.io.IOException
    {
        byte[] $r3, r36;
        javax.security.sasl.SaslException $r25;
        java.nio.ByteBuffer r2;
        java.lang.NullPointerException $r23;
        org.apache.zookeeper.server.ServerCnxn r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r6, $r7, $r11, $r13, $r14, $r17, $r19, $r20, $r26, $r28, $r29;
        int $i0, $i1;
        java.lang.String $r8, $r15, $r16, $r21, $r30, $r31, $r33;
        org.slf4j.Logger $r0, $r5, $r12, $r18, $r24, $r27, $r32, $r34;
        org.apache.zookeeper.proto.GetSASLRequest $r1;
        org.apache.zookeeper.server.ZooKeeperServer r35;
        org.apache.zookeeper.proto.SetSASLResponse $r10;
        org.apache.zookeeper.server.ZooKeeperSaslServer r37;
        org.apache.zookeeper.data.Id $r22;

        r35 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r2 := @parameter0: java.nio.ByteBuffer;

        r9 := @parameter1: org.apache.zookeeper.server.ServerCnxn;

        $r0 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void debug(java.lang.String)>("Responding to client SASL token.");

        $r1 = new org.apache.zookeeper.proto.GetSASLRequest;

        specialinvoke $r1.<org.apache.zookeeper.proto.GetSASLRequest: void <init>()>();

        staticinvoke <org.apache.zookeeper.server.ByteBufferInputStream: void byteBuffer2Record(java.nio.ByteBuffer,org.apache.jute.Record)>(r2, $r1);

        $r3 = virtualinvoke $r1.<org.apache.zookeeper.proto.GetSASLRequest: byte[] getToken()>();

        $r5 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of client SASL token: ");

        $i0 = lengthof $r3;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

        r36 = null;

     label1:
        r37 = r9.<org.apache.zookeeper.server.ServerCnxn: org.apache.zookeeper.server.ZooKeeperSaslServer zooKeeperSaslServer>;

     label2:
        r36 = virtualinvoke r37.<org.apache.zookeeper.server.ZooKeeperSaslServer: byte[] evaluateResponse(byte[])>($r3);

        $z0 = virtualinvoke r37.<org.apache.zookeeper.server.ZooKeeperSaslServer: boolean isComplete()>();

        if $z0 != 1 goto label3;

        $r16 = virtualinvoke r37.<org.apache.zookeeper.server.ZooKeeperSaslServer: java.lang.String getAuthorizationID()>();

        $r18 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adding SASL authorization for authorizationID: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r21);

        $r22 = new org.apache.zookeeper.data.Id;

        specialinvoke $r22.<org.apache.zookeeper.data.Id: void <init>(java.lang.String,java.lang.String)>("sasl", $r16);

        virtualinvoke r9.<org.apache.zookeeper.server.ServerCnxn: void addAuthInfo(org.apache.zookeeper.data.Id)>($r22);

     label3:
        goto label6;

     label4:
        $r25 := @caughtexception;

        $r27 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client failed to SASL authenticate: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String)>($r30);

        $r31 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zookeeper.allowSaslFailedClients");

        if $r31 == null goto label5;

        $r33 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zookeeper.allowSaslFailedClients");

        $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label5;

        $r34 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r34.<org.slf4j.Logger: void warn(java.lang.String)>("Maintaining client connection despite SASL authentication failure.");

        goto label6;

     label5:
        $r32 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String)>("Closing client connection due to SASL authentication failure.");

        virtualinvoke r9.<org.apache.zookeeper.server.ServerCnxn: void close()>();

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

        $r24 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r24.<org.slf4j.Logger: void error(java.lang.String)>("cnxn.saslServer is null: cnxn object did not initialize its saslServer properly.");

     label8:
        if r36 == null goto label9;

        $r12 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of server SASL response: ");

        $i1 = lengthof r36;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label9:
        $r10 = new org.apache.zookeeper.proto.SetSASLResponse;

        specialinvoke $r10.<org.apache.zookeeper.proto.SetSASLResponse: void <init>(byte[])>(r36);

        return $r10;

        catch javax.security.sasl.SaslException from label2 to label3 with label4;
        catch java.lang.NullPointerException from label1 to label6 with label7;
    }

    public org.apache.zookeeper.server.DataTree$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader, org.apache.jute.Record)
    {
        org.apache.zookeeper.server.ZKDatabase $r2;
        long $l1;
        org.apache.zookeeper.txn.CreateSessionTxn r15;
        org.apache.zookeeper.server.SessionTracker $r5, $r16;
        int $i0, $i2, $i4, $i6;
        java.lang.String $r12, $r14;
        org.apache.zookeeper.server.DataTree$ProcessTxnResult $r4;
        boolean $z0;
        org.slf4j.Logger $r7;
        org.apache.zookeeper.txn.TxnHeader r0;
        org.apache.jute.Record r3;
        org.apache.zookeeper.server.ZooKeeperServer r1;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r17;
        java.lang.Class $r9;

        r1 := @this: org.apache.zookeeper.server.ZooKeeperServer;

        r0 := @parameter0: org.apache.zookeeper.txn.TxnHeader;

        r3 := @parameter1: org.apache.jute.Record;

        $i0 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        $l1 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r2 = virtualinvoke r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r4 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>(r0, r3);

        $i4 = (int) -10;

        if $i0 != $i4 goto label2;

        $z0 = r3 instanceof org.apache.zookeeper.txn.CreateSessionTxn;

        if $z0 == 0 goto label1;

        r15 = (org.apache.zookeeper.txn.CreateSessionTxn) r3;

        $r16 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $i2 = virtualinvoke r15.<org.apache.zookeeper.txn.CreateSessionTxn: int getTimeOut()>();

        interfaceinvoke $r16.<org.apache.zookeeper.server.SessionTracker: void addSession(long,int)>($l1, $i2);

        goto label3;

     label1:
        $r7 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*****>>>>> Got ");

        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r14);

        goto label3;

     label2:
        $i6 = (int) -11;

        if $i0 != $i6 goto label3;

        $r5 = r1.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        interfaceinvoke $r5.<org.apache.zookeeper.server.SessionTracker: void removeSession(long)>($l1);

     label3:
        return $r4;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r1;
        java.lang.Exception $r2;

        <org.apache.zookeeper.server.ZooKeeperServer: long superSecret> = 3007405056L;

        <org.apache.zookeeper.server.ZooKeeperServer: int DEFAULT_TICK_TIME> = 3000;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/ZooKeeperServer;");

        <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG> = $r0;

        $r1 = <org.apache.zookeeper.server.ZooKeeperServer: org.slf4j.Logger LOG>;

        staticinvoke <org.apache.zookeeper.Environment: void logEnv(java.lang.String,org.slf4j.Logger)>("Server environment:", $r1);

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("No prob");

        <org.apache.zookeeper.server.ZooKeeperServer: java.lang.Exception ok> = $r2;

        return;
    }
}
