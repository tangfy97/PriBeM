public final class com.google.gxp.com.google.common.collect.ConcurrentMultiset extends com.google.gxp.com.google.common.collect.AbstractMultiset implements java.io.Serializable
{
    private final transient java.util.concurrent.ConcurrentMap countMap;
    private transient volatile com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet entrySet;
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: void <init>(java.util.concurrent.ConcurrentMap)>($r1);

        return;
    }

    public void <init>(java.util.Collection)
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.Collection r2;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0, $i1;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r2 := @parameter0: java.util.Collection;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>($i0);

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i1);

        specialinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: void <init>(java.util.concurrent.ConcurrentMap)>($r1);

        virtualinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: boolean addAll(java.util.Collection)>(r2);

        return;
    }

    void <init>(java.util.concurrent.ConcurrentMap)
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.concurrent.ConcurrentMap r1;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r1 := @parameter0: java.util.concurrent.ConcurrentMap;

        specialinvoke r0.<com.google.gxp.com.google.common.collect.AbstractMultiset: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap> = r1;

        return;
    }

    public int count(java.lang.Object)
    {
        java.lang.Integer $r4;
        java.lang.ClassCastException $r5;
        java.lang.NullPointerException $r6;
        java.util.concurrent.ConcurrentMap $r2;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        int $i0;
        java.lang.Object r1, $r3;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = staticinvoke <com.google.gxp.com.google.common.collect.ConcurrentMultiset: int unbox(java.lang.Integer)>($r4);

     label2:
        return $i0;

     label3:
        $r6 := @caughtexception;

        return 0;

     label4:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public int size()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        long $l0, $l3, l4;
        java.lang.Integer r5;
        java.util.concurrent.ConcurrentMap $r1;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        int $i1, $i2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        l4 = 0L;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        l4 = l4 + $l3;

        goto label1;

     label2:
        $l0 = staticinvoke <java.lang.Math: long min(long,long)>(l4, 2147483647L);

        $i1 = (int) $l0;

        return $i1;
    }

    public java.lang.Object[] toArray()
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        $r1 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.List snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.List $r1;
        java.lang.Object[] r2, $r3;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r2 := @parameter0: java.lang.Object[];

        $r1 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.List snapshot()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return $r3;
    }

    private java.util.List snapshot()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.ArrayList $r1;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        int $i0, i1, $i3;
        com.google.gxp.com.google.common.collect.Multiset$Entry r5;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        $i0 = virtualinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: int size()>();

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayListWithExpectedSize(int)>($i0);

        $r2 = virtualinvoke r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gxp.com.google.common.collect.Multiset$Entry) $r4;

        $r6 = interfaceinvoke r5.<com.google.gxp.com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        i1 = interfaceinvoke r5.<com.google.gxp.com.google.common.collect.Multiset$Entry: int getCount()>();

     label2:
        if i1 <= 0 goto label3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r1;
    }

    public boolean add(java.lang.Object, int)
    {
        java.lang.Object[] $r0, $r4;
        java.lang.Integer $r1, $r5, $r6, $r8, $r9, $r11;
        java.util.concurrent.ConcurrentMap $r7, $r10;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r2;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.Object r3, $r12;

        r2 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        if i0 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid occurrences: %s", $r0);

     label4:
        $i3 = virtualinvoke r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: int count(java.lang.Object)>(r3);

        if $i3 != 0 goto label5;

        $r10 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r11);

        if $r12 != null goto label8;

        return 1;

     label5:
        $i1 = 2147483647 - $i3;

        if i0 > $i1 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[1] = $r6;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "Overflow adding %s occurrences to a count of %s", $r4);

        $i2 = $i3 + i0;

        $r7 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z0 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r3, $r8, $r9);

        if $z0 == 0 goto label8;

        return 1;

     label8:
        goto label4;
    }

    public int remove(java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r1, $r5, $r6, $r8;
        java.util.concurrent.ConcurrentMap $r4, $r7;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r2;
        int i0, $i1, $i2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;

        r2 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        if i0 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "Invalid occurrences: %s", $r0);

     label4:
        $i2 = virtualinvoke r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: int count(java.lang.Object)>(r3);

        if $i2 != 0 goto label5;

        return 0;

     label5:
        if i0 < $i2 goto label6;

        $r7 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z1 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r3, $r8);

        if $z1 == 0 goto label7;

        return $i2;

     label6:
        $r4 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i1 = $i2 - i0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r3, $r5, $r6);

        if $z0 == 0 goto label7;

        return i0;

     label7:
        goto label4;
    }

    public int removeAllOccurrences(java.lang.Object)
    {
        java.lang.Integer $r4;
        java.lang.ClassCastException $r5;
        java.lang.NullPointerException $r6;
        java.util.concurrent.ConcurrentMap $r2;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        int $i0;
        java.lang.Object r1, $r3;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = staticinvoke <com.google.gxp.com.google.common.collect.ConcurrentMultiset: int unbox(java.lang.Integer)>($r4);

     label2:
        return $i0;

     label3:
        $r6 := @caughtexception;

        return 0;

     label4:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public boolean removeExactly(java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r1, $r5, $r6, $r8;
        java.util.concurrent.ConcurrentMap $r4, $r7;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r2;
        int i0, $i1, $i2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;

        r2 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 1;

     label1:
        if i0 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "Invalid occurrences: %s", $r0);

     label4:
        $i2 = virtualinvoke r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: int count(java.lang.Object)>(r3);

        if i0 <= $i2 goto label5;

        return 0;

     label5:
        if i0 != $i2 goto label6;

        $r7 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r3, $r8);

        if $z1 == 0 goto label7;

        return 1;

     label6:
        $r4 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i1 = $i2 - i0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r3, $r5, $r6);

        if $z0 == 0 goto label7;

        return 1;

     label7:
        goto label4;
    }

    public int setCount(java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r1, $r5, $r7;
        java.util.concurrent.ConcurrentMap $r4;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r2;
        int i0, $i1;
        java.lang.Object r3, $r6;
        boolean $z0;

        r2 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid count: %s", $r0);

        if i0 != 0 goto label3;

        $i1 = virtualinvoke r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: int removeAllOccurrences(java.lang.Object)>(r3);

        goto label4;

     label3:
        $r4 = r2.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        $r7 = (java.lang.Integer) $r6;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.ConcurrentMultiset: int unbox(java.lang.Integer)>($r7);

     label4:
        return $i1;
    }

    public boolean setCount(java.lang.Object, int, int)
    {
        java.lang.Object[] $r0, $r2;
        java.lang.Integer $r1, $r3, $r7, $r8, $r10, $r13;
        java.util.concurrent.ConcurrentMap $r6, $r9, $r12, $r14;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r4;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object r5, $r11;

        r4 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r5 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "Invalid oldCount: %s", $r0);

        if i1 < 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Invalid newCount: %s", $r2);

        if i1 != 0 goto label08;

        if i0 != 0 goto label07;

        $r14 = r4.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $z2 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r5);

        if $z2 != 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        return $z5;

     label07:
        $r12 = r4.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r5, $r13);

        return $z1;

     label08:
        if i0 != 0 goto label11;

        $r9 = r4.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r5, $r10);

        if $r11 != null goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        return $z6;

     label11:
        $r6 = r4.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r5, $r7, $r8);

        return $z0;
    }

    public java.util.Set elementSet()
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.Set $r2;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Set entrySet()
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet $r1, r2;

        r0 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r2 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet entrySet>;

        if r2 != null goto label1;

        $r1 = new com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet;

        specialinvoke $r1.<com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet: void <init>(com.google.gxp.com.google.common.collect.ConcurrentMultiset,com.google.gxp.com.google.common.collect.ConcurrentMultiset$1)>(r0, null);

        r2 = $r1;

        r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: com.google.gxp.com.google.common.collect.ConcurrentMultiset$EntrySet entrySet> = $r1;

     label1:
        return r2;
    }

    private static int unbox(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r1;
        java.io.ObjectOutputStream r0;
        com.google.gxp.com.google.common.collect.HashMultiset $r2;

        r1 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.HashMultiset: com.google.gxp.com.google.common.collect.HashMultiset create(java.lang.Iterable)>(r1);

        staticinvoke <com.google.gxp.com.google.common.collect.Serialization: void writeMultiset(com.google.gxp.com.google.common.collect.Multiset,java.io.ObjectOutputStream)>($r2, r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.NoSuchFieldException
    {
        java.io.ObjectInputStream r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r1;

        r1 := @this: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.concurrent.ConcurrentHashMap newConcurrentHashMap()>();

        staticinvoke <com.google.gxp.com.google.common.collect.Serialization: void setFinalField(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object)>(class "Lcom/google/gxp/com/google/common/collect/ConcurrentMultiset;", r1, "countMap", $r2);

        staticinvoke <com.google.gxp.com.google.common.collect.Serialization: void populateMultiset(com.google.gxp.com.google.common.collect.Multiset,java.io.ObjectInputStream)>(r1, r0);

        return;
    }

    static java.util.concurrent.ConcurrentMap access$100(com.google.gxp.com.google.common.collect.ConcurrentMultiset)
    {
        com.google.gxp.com.google.common.collect.ConcurrentMultiset r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: com.google.gxp.com.google.common.collect.ConcurrentMultiset;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ConcurrentMultiset: java.util.concurrent.ConcurrentMap countMap>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.gxp.com.google.common.collect.ConcurrentMultiset: long serialVersionUID> = 0L;

        return;
    }
}
