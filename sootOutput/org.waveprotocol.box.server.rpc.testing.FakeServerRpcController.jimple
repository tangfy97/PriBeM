public class org.waveprotocol.box.server.rpc.testing.FakeServerRpcController extends java.lang.Object implements org.waveprotocol.box.server.rpc.ServerRpcController
{
    private boolean failed;
    private java.lang.String errorText;

    public void <init>()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: boolean failed> = 0;

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: java.lang.String errorText> = null;

        return;
    }

    public java.lang.String errorText()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        $r1 = r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: java.lang.String errorText>;

        return $r1;
    }

    public boolean failed()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        $z0 = r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: boolean failed>;

        return $z0;
    }

    public boolean isCanceled()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        return 0;
    }

    public void notifyOnCancel(com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;
        com.google.protobuf.RpcCallback r1;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        r1 := @parameter0: com.google.protobuf.RpcCallback;

        return;
    }

    public void reset()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: boolean failed> = 0;

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: java.lang.String errorText> = null;

        return;
    }

    public void setFailed(java.lang.String)
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: boolean failed> = 1;

        r0.<org.waveprotocol.box.server.rpc.testing.FakeServerRpcController: java.lang.String errorText> = r1;

        return;
    }

    public void startCancel()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        r1 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        $r0 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>("user@host.com");

        return $r0;
    }

    public void cancel()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        return;
    }

    public void run()
    {
        org.waveprotocol.box.server.rpc.testing.FakeServerRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.testing.FakeServerRpcController;

        return;
    }
}
