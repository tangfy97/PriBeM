public class org.springframework.instrument.classloading.SimpleLoadTimeWeaver extends java.lang.Object implements org.springframework.instrument.classloading.LoadTimeWeaver
{
    private final org.springframework.instrument.classloading.SimpleInstrumentableClassLoader classLoader;

    public void <init>()
    {
        org.springframework.instrument.classloading.SimpleLoadTimeWeaver r0;
        java.lang.ClassLoader $r2;
        org.springframework.instrument.classloading.SimpleInstrumentableClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.SimpleLoadTimeWeaver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.instrument.classloading.SimpleInstrumentableClassLoader;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        specialinvoke $r1.<org.springframework.instrument.classloading.SimpleInstrumentableClassLoader: void <init>(java.lang.ClassLoader)>($r2);

        r0.<org.springframework.instrument.classloading.SimpleLoadTimeWeaver: org.springframework.instrument.classloading.SimpleInstrumentableClassLoader classLoader> = $r1;

        return;
    }

    public void <init>(org.springframework.instrument.classloading.SimpleInstrumentableClassLoader)
    {
        org.springframework.instrument.classloading.SimpleLoadTimeWeaver r0;
        org.springframework.instrument.classloading.SimpleInstrumentableClassLoader r1;

        r0 := @this: org.springframework.instrument.classloading.SimpleLoadTimeWeaver;

        r1 := @parameter0: org.springframework.instrument.classloading.SimpleInstrumentableClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ClassLoader must not be null");

        r0.<org.springframework.instrument.classloading.SimpleLoadTimeWeaver: org.springframework.instrument.classloading.SimpleInstrumentableClassLoader classLoader> = r1;

        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        org.springframework.instrument.classloading.SimpleLoadTimeWeaver r0;
        java.lang.instrument.ClassFileTransformer r1;
        org.springframework.instrument.classloading.SimpleInstrumentableClassLoader $r2;

        r0 := @this: org.springframework.instrument.classloading.SimpleLoadTimeWeaver;

        r1 := @parameter0: java.lang.instrument.ClassFileTransformer;

        $r2 = r0.<org.springframework.instrument.classloading.SimpleLoadTimeWeaver: org.springframework.instrument.classloading.SimpleInstrumentableClassLoader classLoader>;

        virtualinvoke $r2.<org.springframework.instrument.classloading.SimpleInstrumentableClassLoader: void addTransformer(java.lang.instrument.ClassFileTransformer)>(r1);

        return;
    }

    public java.lang.ClassLoader getInstrumentableClassLoader()
    {
        org.springframework.instrument.classloading.SimpleLoadTimeWeaver r0;
        org.springframework.instrument.classloading.SimpleInstrumentableClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.SimpleLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.SimpleLoadTimeWeaver: org.springframework.instrument.classloading.SimpleInstrumentableClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        org.springframework.instrument.classloading.SimpleLoadTimeWeaver r1;
        org.springframework.instrument.classloading.SimpleThrowawayClassLoader $r0;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.instrument.classloading.SimpleLoadTimeWeaver;

        $r0 = new org.springframework.instrument.classloading.SimpleThrowawayClassLoader;

        $r2 = virtualinvoke r1.<org.springframework.instrument.classloading.SimpleLoadTimeWeaver: java.lang.ClassLoader getInstrumentableClassLoader()>();

        specialinvoke $r0.<org.springframework.instrument.classloading.SimpleThrowawayClassLoader: void <init>(java.lang.ClassLoader)>($r2);

        return $r0;
    }
}
