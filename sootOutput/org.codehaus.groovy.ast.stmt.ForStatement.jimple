public class org.codehaus.groovy.ast.stmt.ForStatement extends org.codehaus.groovy.ast.stmt.Statement
{
    public static final org.codehaus.groovy.ast.Parameter FOR_LOOP_DUMMY;
    private org.codehaus.groovy.ast.Parameter variable;
    private org.codehaus.groovy.ast.expr.Expression collectionExpression;
    private org.codehaus.groovy.ast.stmt.Statement loopBlock;
    private org.codehaus.groovy.ast.VariableScope scope;

    public void <init>(org.codehaus.groovy.ast.Parameter, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r3;
        org.codehaus.groovy.ast.Parameter r1;
        org.codehaus.groovy.ast.expr.Expression r2;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.Parameter;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter2: org.codehaus.groovy.ast.stmt.Statement;

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void <init>()>();

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter variable> = r1;

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression collectionExpression> = r2;

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement loopBlock> = r3;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.stmt.ForStatement r1;

        r1 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getCollectionExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression collectionExpression>;

        return $r1;
    }

    public org.codehaus.groovy.ast.stmt.Statement getLoopBlock()
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement loopBlock>;

        return $r1;
    }

    public org.codehaus.groovy.ast.Parameter getVariable()
    {
        org.codehaus.groovy.ast.Parameter $r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter variable>;

        return $r1;
    }

    public org.codehaus.groovy.ast.ClassNode getVariableType()
    {
        org.codehaus.groovy.ast.Parameter $r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter variable>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r2;
    }

    public void setCollectionExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression collectionExpression> = r1;

        return;
    }

    public void setVariableScope(org.codehaus.groovy.ast.VariableScope)
    {
        org.codehaus.groovy.ast.VariableScope r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.VariableScope scope> = r1;

        return;
    }

    public org.codehaus.groovy.ast.VariableScope getVariableScope()
    {
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.VariableScope scope>;

        return $r1;
    }

    public void setLoopBlock(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.ForStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement loopBlock> = r1;

        return;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.Parameter $r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        $r0 = new org.codehaus.groovy.ast.Parameter;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r0.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r1, "forLoopDummyParameter");

        <org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter FOR_LOOP_DUMMY> = $r0;

        return;
    }
}
