public class org.jdom.Element extends org.jdom.Content implements org.jdom.Parent
{
    private static final java.lang.String CVS_ID;
    private static final int INITIAL_ARRAY_SIZE;
    protected java.lang.String name;
    protected transient org.jdom.Namespace namespace;
    protected transient java.util.List additionalNamespaces;
    org.jdom.AttributeList attributes;
    org.jdom.ContentList content;

    protected void <init>()
    {
        org.jdom.ContentList $r2;
        org.jdom.Element r0;
        org.jdom.AttributeList $r1;

        r0 := @this: org.jdom.Element;

        specialinvoke r0.<org.jdom.Content: void <init>()>();

        $r1 = new org.jdom.AttributeList;

        specialinvoke $r1.<org.jdom.AttributeList: void <init>(org.jdom.Element)>(r0);

        r0.<org.jdom.Element: org.jdom.AttributeList attributes> = $r1;

        $r2 = new org.jdom.ContentList;

        specialinvoke $r2.<org.jdom.ContentList: void <init>(org.jdom.Parent)>(r0);

        r0.<org.jdom.Element: org.jdom.ContentList content> = $r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.jdom.Namespace $r3;
        java.lang.String r1, r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("", r2);

        specialinvoke r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.jdom.Namespace $r4;
        java.lang.String r1, r2, r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r4);

        return;
    }

    public void <init>(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.AttributeList $r1;
        org.jdom.ContentList $r2;
        org.jdom.Namespace r4;
        java.lang.String r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.jdom.Namespace;

        specialinvoke r0.<org.jdom.Content: void <init>()>();

        $r1 = new org.jdom.AttributeList;

        specialinvoke $r1.<org.jdom.AttributeList: void <init>(org.jdom.Element)>(r0);

        r0.<org.jdom.Element: org.jdom.AttributeList attributes> = $r1;

        $r2 = new org.jdom.ContentList;

        specialinvoke $r2.<org.jdom.ContentList: void <init>(org.jdom.Parent)>(r0);

        r0.<org.jdom.Element: org.jdom.ContentList content> = $r2;

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setName(java.lang.String)>(r3);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setNamespace(org.jdom.Namespace)>(r4);

        return;
    }

    public org.jdom.Element addContent(int, java.util.Collection)
    {
        java.util.Collection r1;
        int i0;
        org.jdom.ContentList $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<org.jdom.ContentList: boolean addAll(int,java.util.Collection)>(i0, r1);

        return r0;
    }

    public org.jdom.Element addContent(int, org.jdom.Content)
    {
        int i0;
        org.jdom.ContentList $r2;
        org.jdom.Content r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        r1 := @parameter1: org.jdom.Content;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<org.jdom.ContentList: void add(int,org.jdom.Content)>(i0, r1);

        return r0;
    }

    public org.jdom.Element addContent(java.lang.String)
    {
        org.jdom.Text $r1;
        java.lang.String r2;
        org.jdom.Element r0, $r3;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.jdom.Text;

        specialinvoke $r1.<org.jdom.Text: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r1);

        return $r3;
    }

    public org.jdom.Element addContent(java.util.Collection)
    {
        org.jdom.ContentList $r2;
        org.jdom.Element r0;
        java.util.Collection r1;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<org.jdom.ContentList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public org.jdom.Element addContent(org.jdom.Content)
    {
        org.jdom.ContentList $r2;
        org.jdom.Content r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Content;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<java.util.AbstractList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public void addNamespaceDeclaration(org.jdom.Namespace)
    {
        java.util.List $r3, $r4;
        org.jdom.Namespace r0;
        org.jdom.IllegalAddException $r6;
        java.lang.String $r2;
        org.jdom.Element r1;
        java.util.ArrayList $r5;

        r1 := @this: org.jdom.Element;

        r0 := @parameter0: org.jdom.Namespace;

        $r2 = staticinvoke <org.jdom.Verifier: java.lang.String checkNamespaceCollision(org.jdom.Namespace,org.jdom.Element)>(r0, r1);

        if $r2 == null goto label1;

        $r6 = new org.jdom.IllegalAddException;

        specialinvoke $r6.<org.jdom.IllegalAddException: void <init>(org.jdom.Element,org.jdom.Namespace,java.lang.String)>(r1, r0, $r2);

        throw $r6;

     label1:
        $r3 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r3 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(5);

        r1.<org.jdom.Element: java.util.List additionalNamespaces> = $r5;

     label2:
        $r4 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public java.lang.Object clone()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.jdom.Text $r22, r46;
        org.jdom.Attribute $r39, r43;
        java.util.List $r5, $r7, $r9, $r10, $r31, $r33, $r35;
        org.jdom.Comment $r19, r47;
        java.util.ArrayList $r8, $r32;
        org.jdom.CDATA $r25, r45;
        int $i0, $i1, i2, i3, i4, $i5;
        org.jdom.ProcessingInstruction $r16, r48;
        org.jdom.EntityRef $r13, r49;
        org.jdom.AttributeList $r3, $r4, $r36, $r37, $r41;
        org.jdom.ContentList $r2, $r6, $r11, $r15, $r18, $r21, $r24, $r27, $r30, $r50;
        java.lang.Object $r1, $r12, $r14, $r17, $r20, $r23, $r26, $r29, $r34, $r38, $r40;
        org.jdom.Element r0, $r28, r42, r44;

        r0 := @this: org.jdom.Element;

        $r1 = specialinvoke r0.<org.jdom.Content: java.lang.Object clone()>();

        r42 = (org.jdom.Element) $r1;

        $r2 = new org.jdom.ContentList;

        specialinvoke $r2.<org.jdom.ContentList: void <init>(org.jdom.Parent)>(r42);

        r42.<org.jdom.Element: org.jdom.ContentList content> = $r2;

        $r3 = new org.jdom.AttributeList;

        specialinvoke $r3.<org.jdom.AttributeList: void <init>(org.jdom.Element)>(r42);

        r42.<org.jdom.Element: org.jdom.AttributeList attributes> = $r3;

        $r4 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        if $r4 == null goto label03;

        i2 = 0;

        goto label02;

     label01:
        $r37 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $r38 = virtualinvoke $r37.<org.jdom.AttributeList: java.lang.Object get(int)>(i2);

        $r39 = (org.jdom.Attribute) $r38;

        $r40 = virtualinvoke $r39.<org.jdom.Attribute: java.lang.Object clone()>();

        r43 = (org.jdom.Attribute) $r40;

        $r41 = r42.<org.jdom.Element: org.jdom.AttributeList attributes>;

        virtualinvoke $r41.<org.jdom.AttributeList: boolean add(java.lang.Object)>(r43);

        i2 = i2 + 1;

     label02:
        $r36 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $i1 = virtualinvoke $r36.<org.jdom.AttributeList: int size()>();

        if i2 < $i1 goto label01;

     label03:
        $r5 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r5 == null goto label06;

        $r31 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        $i0 = interfaceinvoke $r31.<java.util.List: int size()>();

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>(int)>($i0);

        r42.<org.jdom.Element: java.util.List additionalNamespaces> = $r32;

        i3 = 0;

        goto label05;

     label04:
        $r33 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(i3);

        $r35 = r42.<org.jdom.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r34);

        i3 = i3 + 1;

     label05:
        if i3 < $i0 goto label04;

     label06:
        $r6 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        if $r6 == null goto label15;

        i4 = 0;

        goto label14;

     label07:
        $r11 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r12 = virtualinvoke $r11.<org.jdom.ContentList: java.lang.Object get(int)>(i4);

        $z0 = $r12 instanceof org.jdom.Element;

        if $z0 == 0 goto label08;

        $r28 = (org.jdom.Element) $r12;

        $r29 = virtualinvoke $r28.<org.jdom.Element: java.lang.Object clone()>();

        r44 = (org.jdom.Element) $r29;

        $r30 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r30.<java.util.AbstractList: boolean add(java.lang.Object)>(r44);

        goto label13;

     label08:
        $z1 = $r12 instanceof org.jdom.CDATA;

        if $z1 == 0 goto label09;

        $r25 = (org.jdom.CDATA) $r12;

        $r26 = virtualinvoke $r25.<org.jdom.Text: java.lang.Object clone()>();

        r45 = (org.jdom.CDATA) $r26;

        $r27 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r27.<java.util.AbstractList: boolean add(java.lang.Object)>(r45);

        goto label13;

     label09:
        $z2 = $r12 instanceof org.jdom.Text;

        if $z2 == 0 goto label10;

        $r22 = (org.jdom.Text) $r12;

        $r23 = virtualinvoke $r22.<org.jdom.Text: java.lang.Object clone()>();

        r46 = (org.jdom.Text) $r23;

        $r24 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r24.<java.util.AbstractList: boolean add(java.lang.Object)>(r46);

        goto label13;

     label10:
        $z3 = $r12 instanceof org.jdom.Comment;

        if $z3 == 0 goto label11;

        $r19 = (org.jdom.Comment) $r12;

        $r20 = virtualinvoke $r19.<org.jdom.Content: java.lang.Object clone()>();

        r47 = (org.jdom.Comment) $r20;

        $r21 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r21.<java.util.AbstractList: boolean add(java.lang.Object)>(r47);

        goto label13;

     label11:
        $z4 = $r12 instanceof org.jdom.ProcessingInstruction;

        if $z4 == 0 goto label12;

        $r16 = (org.jdom.ProcessingInstruction) $r12;

        $r17 = virtualinvoke $r16.<org.jdom.ProcessingInstruction: java.lang.Object clone()>();

        r48 = (org.jdom.ProcessingInstruction) $r17;

        $r18 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r18.<java.util.AbstractList: boolean add(java.lang.Object)>(r48);

        goto label13;

     label12:
        $z5 = $r12 instanceof org.jdom.EntityRef;

        if $z5 == 0 goto label13;

        $r13 = (org.jdom.EntityRef) $r12;

        $r14 = virtualinvoke $r13.<org.jdom.Content: java.lang.Object clone()>();

        r49 = (org.jdom.EntityRef) $r14;

        $r15 = r42.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r15.<java.util.AbstractList: boolean add(java.lang.Object)>(r49);

     label13:
        i4 = i4 + 1;

     label14:
        $r50 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i5 = virtualinvoke $r50.<org.jdom.ContentList: int size()>();

        if i4 < $i5 goto label07;

     label15:
        $r7 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r7 == null goto label16;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r42.<org.jdom.Element: java.util.List additionalNamespaces> = $r8;

        $r10 = r42.<org.jdom.Element: java.util.List additionalNamespaces>;

        $r9 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r9);

     label16:
        return r42;
    }

    public java.util.List cloneContent()
    {
        int $i0, i1;
        java.lang.Object $r3;
        org.jdom.Content $r2;
        org.jdom.Element r0;
        java.util.ArrayList $r1;

        r0 := @this: org.jdom.Element;

        $i0 = virtualinvoke r0.<org.jdom.Element: int getContentSize()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Content getContent(int)>(i1);

        $r3 = virtualinvoke $r2.<org.jdom.Content: java.lang.Object clone()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return $r1;
    }

    public java.util.List getAdditionalNamespaces()
    {
        java.util.List $r1, $r2, $r3, $r4;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r1 != null goto label1;

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r4;

     label1:
        $r2 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public org.jdom.Attribute getAttribute(java.lang.String)
    {
        org.jdom.Namespace $r2;
        org.jdom.Attribute $r3;
        java.lang.String r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Attribute getAttribute(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $r3;
    }

    public org.jdom.Attribute getAttribute(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.AttributeList $r3;
        org.jdom.Namespace r2;
        java.lang.Object $r4;
        org.jdom.Attribute $r5;
        java.lang.String r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $r4 = virtualinvoke $r3.<org.jdom.AttributeList: java.lang.Object get(java.lang.String,org.jdom.Namespace)>(r1, r2);

        $r5 = (org.jdom.Attribute) $r4;

        return $r5;
    }

    public java.lang.String getAttributeValue(java.lang.String)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1, $r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $r3;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.jdom.Namespace $r3;
        java.lang.String r1, r2, $r4;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace,java.lang.String)>(r1, $r3, r2);

        return $r4;
    }

    public java.lang.String getAttributeValue(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Namespace r2;
        java.lang.String r1, $r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public java.lang.String getAttributeValue(java.lang.String, org.jdom.Namespace, java.lang.String)
    {
        org.jdom.Attribute r5;
        org.jdom.AttributeList $r3;
        org.jdom.Namespace r2;
        java.lang.Object $r4;
        java.lang.String r1, r6, $r7;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        r6 := @parameter2: java.lang.String;

        $r3 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $r4 = virtualinvoke $r3.<org.jdom.AttributeList: java.lang.Object get(java.lang.String,org.jdom.Namespace)>(r1, r2);

        r5 = (org.jdom.Attribute) $r4;

        if r5 != null goto label1;

        $r7 = r6;

        goto label2;

     label1:
        $r7 = virtualinvoke r5.<org.jdom.Attribute: java.lang.String getValue()>();

     label2:
        return $r7;
    }

    public java.util.List getAttributes()
    {
        org.jdom.Element r0;
        org.jdom.AttributeList $r1;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        return $r1;
    }

    public org.jdom.Element getChild(java.lang.String)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1;
        org.jdom.Element r0, $r3;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $r3;
    }

    public org.jdom.Element getChild(java.lang.String, org.jdom.Namespace)
    {
        java.util.Iterator $r6;
        org.jdom.filter.ElementFilter $r1;
        java.util.List $r5;
        org.jdom.ContentList $r4;
        org.jdom.Namespace r3;
        java.lang.Object $r7;
        java.lang.String r2;
        org.jdom.Element r0, $r8;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jdom.Namespace;

        $r4 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r1 = new org.jdom.filter.ElementFilter;

        specialinvoke $r1.<org.jdom.filter.ElementFilter: void <init>(java.lang.String,org.jdom.Namespace)>(r2, r3);

        $r5 = virtualinvoke $r4.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>($r1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.jdom.Element) $r7;

        return $r8;

     label1:
        return null;
    }

    public java.lang.String getChildText(java.lang.String)
    {
        java.lang.String r1, $r3;
        org.jdom.Element r0, $r2;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getText()>();

        return $r3;
    }

    public java.lang.String getChildText(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Namespace r2;
        java.lang.String r1, $r4;
        org.jdom.Element r0, $r3;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<org.jdom.Element: java.lang.String getText()>();

        return $r4;
    }

    public java.lang.String getChildTextNormalize(java.lang.String)
    {
        java.lang.String r1, $r3;
        org.jdom.Element r0, $r2;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getTextNormalize()>();

        return $r3;
    }

    public java.lang.String getChildTextNormalize(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Namespace r2;
        java.lang.String r1, $r4;
        org.jdom.Element r0, $r3;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<org.jdom.Element: java.lang.String getTextNormalize()>();

        return $r4;
    }

    public java.lang.String getChildTextTrim(java.lang.String)
    {
        java.lang.String r1, $r3;
        org.jdom.Element r0, $r2;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getTextTrim()>();

        return $r3;
    }

    public java.lang.String getChildTextTrim(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Namespace r2;
        java.lang.String r1, $r4;
        org.jdom.Element r0, $r3;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<org.jdom.Element: java.lang.String getTextTrim()>();

        return $r4;
    }

    public java.util.List getChildren()
    {
        java.util.List $r3;
        org.jdom.filter.ElementFilter $r1;
        org.jdom.ContentList $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r1 = new org.jdom.filter.ElementFilter;

        specialinvoke $r1.<org.jdom.filter.ElementFilter: void <init>()>();

        $r3 = virtualinvoke $r2.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>($r1);

        return $r3;
    }

    public java.util.List getChildren(java.lang.String)
    {
        java.util.List $r3;
        org.jdom.Namespace $r2;
        java.lang.String r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $r3 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $r3;
    }

    public java.util.List getChildren(java.lang.String, org.jdom.Namespace)
    {
        java.util.List $r5;
        org.jdom.filter.ElementFilter $r1;
        org.jdom.ContentList $r4;
        org.jdom.Namespace r3;
        java.lang.String r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jdom.Namespace;

        $r4 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r1 = new org.jdom.filter.ElementFilter;

        specialinvoke $r1.<org.jdom.filter.ElementFilter: void <init>(java.lang.String,org.jdom.Namespace)>(r2, r3);

        $r5 = virtualinvoke $r4.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>($r1);

        return $r5;
    }

    public java.util.List getContent()
    {
        org.jdom.ContentList $r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        return $r1;
    }

    public org.jdom.Content getContent(int)
    {
        int i0;
        org.jdom.ContentList $r1;
        java.lang.Object $r2;
        org.jdom.Content $r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r2 = virtualinvoke $r1.<org.jdom.ContentList: java.lang.Object get(int)>(i0);

        $r3 = (org.jdom.Content) $r2;

        return $r3;
    }

    public java.util.List getContent(org.jdom.filter.Filter)
    {
        org.jdom.filter.Filter r1;
        java.util.List $r3;
        org.jdom.ContentList $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.filter.Filter;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r3 = virtualinvoke $r2.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>(r1);

        return $r3;
    }

    public int getContentSize()
    {
        int $i0;
        org.jdom.ContentList $r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom.ContentList: int size()>();

        return $i0;
    }

    public java.util.Iterator getDescendants()
    {
        org.jdom.Element r1;
        org.jdom.DescendantIterator $r0;

        r1 := @this: org.jdom.Element;

        $r0 = new org.jdom.DescendantIterator;

        specialinvoke $r0.<org.jdom.DescendantIterator: void <init>(org.jdom.Parent)>(r1);

        return $r0;
    }

    public java.util.Iterator getDescendants(org.jdom.filter.Filter)
    {
        org.jdom.filter.Filter r3;
        org.jdom.FilterIterator $r0;
        org.jdom.Element r2;
        org.jdom.DescendantIterator $r1;

        r2 := @this: org.jdom.Element;

        r3 := @parameter0: org.jdom.filter.Filter;

        $r0 = new org.jdom.FilterIterator;

        $r1 = new org.jdom.DescendantIterator;

        specialinvoke $r1.<org.jdom.DescendantIterator: void <init>(org.jdom.Parent)>(r2);

        specialinvoke $r0.<org.jdom.FilterIterator: void <init>(java.util.Iterator,org.jdom.filter.Filter)>($r1, r3);

        return $r0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: java.lang.String name>;

        return $r1;
    }

    public org.jdom.Namespace getNamespace()
    {
        org.jdom.Namespace $r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.Namespace namespace>;

        return $r1;
    }

    public org.jdom.Namespace getNamespace(java.lang.String)
    {
        int $i0, i1;
        org.jdom.Namespace $r7, r11, $r13, $r14;
        java.lang.String r0, $r2, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.jdom.Parent $r4, $r5;
        java.util.List $r3, $r8, $r9;
        java.lang.Object $r10;
        org.jdom.Element r1, $r6;

        r1 := @this: org.jdom.Element;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label2;

        $r14 = <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE>;

        return $r14;

     label2:
        $r2 = virtualinvoke r1.<org.jdom.Element: java.lang.String getNamespacePrefix()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        $r13 = virtualinvoke r1.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        return $r13;

     label3:
        $r3 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r3 == null goto label7;

        i1 = 0;

        goto label6;

     label4:
        $r9 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i1);

        r11 = (org.jdom.Namespace) $r10;

        $r12 = virtualinvoke r11.<org.jdom.Namespace: java.lang.String getPrefix()>();

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label5;

        return r11;

     label5:
        i1 = i1 + 1;

     label6:
        $r8 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i1 < $i0 goto label4;

     label7:
        $r4 = r1.<org.jdom.Content: org.jdom.Parent parent>;

        $z2 = $r4 instanceof org.jdom.Element;

        if $z2 == 0 goto label8;

        $r5 = r1.<org.jdom.Content: org.jdom.Parent parent>;

        $r6 = (org.jdom.Element) $r5;

        $r7 = virtualinvoke $r6.<org.jdom.Element: org.jdom.Namespace getNamespace(java.lang.String)>(r0);

        return $r7;

     label8:
        return null;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.jdom.Namespace $r1;
        java.lang.String $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.jdom.Namespace $r1;
        java.lang.String $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getURI()>();

        return $r2;
    }

    public java.lang.String getQualifiedName()
    {
        java.lang.StringBuffer $r3, $r6, $r8;
        org.jdom.Namespace $r1, $r4;
        java.lang.String $r2, $r5, $r7, $r9, $r10;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r0.<org.jdom.Element: java.lang.String getName()>();

        return $r10;

     label1:
        $r3 = new java.lang.StringBuffer;

        $r4 = r0.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r5 = virtualinvoke $r4.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r7 = r0.<org.jdom.Element: java.lang.String name>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String getText()
    {
        java.lang.StringBuffer $r3;
        int $i0, $i1, i2, $i3;
        java.lang.String $r7, $r8, $r12;
        boolean $z0, $z1, z2;
        org.jdom.Text $r6, $r11;
        org.jdom.ContentList $r1, $r2, $r4, $r9, $r13;
        java.lang.Object $r5, $r10;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom.ContentList: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom.ContentList: int size()>();

        if $i1 != 1 goto label3;

        $r9 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r10 = virtualinvoke $r9.<org.jdom.ContentList: java.lang.Object get(int)>(0);

        $z1 = $r10 instanceof org.jdom.Text;

        if $z1 == 0 goto label2;

        $r11 = (org.jdom.Text) $r10;

        $r12 = virtualinvoke $r11.<org.jdom.Text: java.lang.String getText()>();

        return $r12;

     label2:
        return "";

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        z2 = 0;

        i2 = 0;

        goto label6;

     label4:
        $r4 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r5 = virtualinvoke $r4.<org.jdom.ContentList: java.lang.Object get(int)>(i2);

        $z0 = $r5 instanceof org.jdom.Text;

        if $z0 == 0 goto label5;

        $r6 = (org.jdom.Text) $r5;

        $r7 = virtualinvoke $r6.<org.jdom.Text: java.lang.String getText()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        z2 = 1;

     label5:
        i2 = i2 + 1;

     label6:
        $r13 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i3 = virtualinvoke $r13.<org.jdom.ContentList: int size()>();

        if i2 < $i3 goto label4;

        if z2 != 0 goto label7;

        return "";

     label7:
        $r8 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getTextNormalize()
    {
        java.lang.String $r1, $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r2 = staticinvoke <org.jdom.Text: java.lang.String normalizeString(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getTextTrim()
    {
        java.lang.String $r1, $r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    public java.lang.String getValue()
    {
        java.util.Iterator $r3;
        org.jdom.Content r5;
        java.util.List $r2;
        java.lang.StringBuffer $r0;
        java.lang.Object $r4;
        java.lang.String $r6, $r7;
        org.jdom.Element r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.jdom.Element;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.jdom.Element: java.util.List getContent()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jdom.Content) $r4;

        $z0 = r5 instanceof org.jdom.Element;

        if $z0 != 0 goto label2;

        $z1 = r5 instanceof org.jdom.Text;

        if $z1 == 0 goto label3;

     label2:
        $r6 = virtualinvoke r5.<org.jdom.Content: java.lang.String getValue()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label3:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public int indexOf(org.jdom.Content)
    {
        int $i0;
        org.jdom.ContentList $r2;
        org.jdom.Content r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Content;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $i0 = virtualinvoke $r2.<java.util.AbstractList: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public boolean isAncestor(org.jdom.Element)
    {
        org.jdom.Parent r3;
        org.jdom.Element r0, r1, $r2;
        boolean $z0;

        r1 := @this: org.jdom.Element;

        r0 := @parameter0: org.jdom.Element;

        r3 = virtualinvoke r0.<org.jdom.Content: org.jdom.Parent getParent()>();

        goto label3;

     label1:
        if r3 != r1 goto label2;

        return 1;

     label2:
        $r2 = (org.jdom.Element) r3;

        r3 = virtualinvoke $r2.<org.jdom.Content: org.jdom.Parent getParent()>();

     label3:
        $z0 = r3 instanceof org.jdom.Element;

        if $z0 != 0 goto label1;

        return 0;
    }

    public boolean isRootElement()
    {
        org.jdom.Parent $r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        $r1 = r0.<org.jdom.Content: org.jdom.Parent parent>;

        $z0 = $r1 instanceof org.jdom.Document;

        return $z0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.util.ArrayList $r7;
        int $i0, i1;
        org.jdom.Namespace $r6, $r12;
        java.lang.String $r3, $r5, $r9, $r11;
        java.util.List $r13;
        java.lang.Object $r2, $r4, $r8, $r10;
        org.jdom.Element r1;

        r1 := @this: org.jdom.Element;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>($r3, $r5);

        r1.<org.jdom.Element: org.jdom.Namespace namespace> = $r6;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int read()>();

        if $i0 == 0 goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        r1.<org.jdom.Element: java.util.List additionalNamespaces> = $r7;

        i1 = 0;

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r11 = (java.lang.String) $r10;

        $r12 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>($r9, $r11);

        $r13 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

     label3:
        return;
    }

    public boolean removeAttribute(java.lang.String)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom.Element: boolean removeAttribute(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $z0;
    }

    public boolean removeAttribute(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.AttributeList $r3;
        org.jdom.Namespace r2;
        java.lang.String r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $r3 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $z0 = virtualinvoke $r3.<org.jdom.AttributeList: boolean remove(java.lang.String,org.jdom.Namespace)>(r1, r2);

        return $z0;
    }

    public boolean removeAttribute(org.jdom.Attribute)
    {
        org.jdom.AttributeList $r2;
        org.jdom.Attribute r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Attribute;

        $r2 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        $z0 = virtualinvoke $r2.<java.util.AbstractCollection: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeChild(java.lang.String)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom.Element: boolean removeChild(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $z0;
    }

    public boolean removeChild(java.lang.String, org.jdom.Namespace)
    {
        java.util.Iterator $r6;
        org.jdom.filter.ElementFilter $r1;
        java.util.List $r5;
        org.jdom.ContentList $r4;
        org.jdom.Namespace r3;
        java.lang.String r2;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jdom.Namespace;

        $r4 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r1 = new org.jdom.filter.ElementFilter;

        specialinvoke $r1.<org.jdom.filter.ElementFilter: void <init>(java.lang.String,org.jdom.Namespace)>(r2, r3);

        $r5 = virtualinvoke $r4.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>($r1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        return 1;

     label1:
        return 0;
    }

    public boolean removeChildren(java.lang.String)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom.Element: boolean removeChildren(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        return $z0;
    }

    public boolean removeChildren(java.lang.String, org.jdom.Namespace)
    {
        java.util.Iterator $r6;
        org.jdom.filter.ElementFilter $r1;
        java.util.List $r5;
        org.jdom.ContentList $r4;
        org.jdom.Namespace r3;
        java.lang.String r2;
        org.jdom.Element r0;
        boolean $z0, z1;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jdom.Namespace;

        z1 = 0;

        $r4 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r1 = new org.jdom.filter.ElementFilter;

        specialinvoke $r1.<org.jdom.filter.ElementFilter: void <init>(java.lang.String,org.jdom.Namespace)>(r2, r3);

        $r5 = virtualinvoke $r4.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>($r1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        z1 = 1;

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return z1;
    }

    public java.util.List removeContent()
    {
        org.jdom.ContentList $r2, $r3;
        org.jdom.Element r1;
        java.util.ArrayList $r0;

        r1 := @this: org.jdom.Element;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.jdom.Element: org.jdom.ContentList content>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = r1.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r3.<org.jdom.ContentList: void clear()>();

        return $r0;
    }

    public org.jdom.Content removeContent(int)
    {
        int i0;
        org.jdom.ContentList $r1;
        java.lang.Object $r2;
        org.jdom.Content $r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $r2 = virtualinvoke $r1.<org.jdom.ContentList: java.lang.Object remove(int)>(i0);

        $r3 = (org.jdom.Content) $r2;

        return $r3;
    }

    public boolean removeContent(org.jdom.Content)
    {
        org.jdom.ContentList $r2;
        org.jdom.Content r1;
        org.jdom.Element r0;
        boolean $z0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Content;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        $z0 = virtualinvoke $r2.<java.util.AbstractCollection: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List removeContent(org.jdom.filter.Filter)
    {
        org.jdom.filter.Filter r2;
        java.util.Iterator $r5;
        org.jdom.Content r7;
        java.util.ArrayList $r0;
        java.util.List $r4;
        org.jdom.ContentList $r3;
        java.lang.Object $r6;
        org.jdom.Element r1;
        boolean $z0;

        r1 := @this: org.jdom.Element;

        r2 := @parameter0: org.jdom.filter.Filter;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<org.jdom.Element: org.jdom.ContentList content>;

        $r4 = virtualinvoke $r3.<org.jdom.ContentList: java.util.List getView(org.jdom.filter.Filter)>(r2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom.Content) $r6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public void removeNamespaceDeclaration(org.jdom.Namespace)
    {
        java.util.List $r1, $r3;
        org.jdom.Namespace r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: org.jdom.Namespace;

        $r1 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.jdom.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

        return;
    }

    public org.jdom.Element setAttribute(java.lang.String, java.lang.String)
    {
        org.jdom.Attribute $r1;
        java.lang.String r2, r3;
        org.jdom.Element r0, $r4;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new org.jdom.Attribute;

        specialinvoke $r1.<org.jdom.Attribute: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r4 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(org.jdom.Attribute)>($r1);

        return $r4;
    }

    public org.jdom.Element setAttribute(java.lang.String, java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Attribute $r1;
        org.jdom.Namespace r4;
        java.lang.String r2, r3;
        org.jdom.Element r0, $r5;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.jdom.Namespace;

        $r1 = new org.jdom.Attribute;

        specialinvoke $r1.<org.jdom.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom.Namespace)>(r2, r3, r4);

        $r5 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(org.jdom.Attribute)>($r1);

        return $r5;
    }

    public org.jdom.Element setAttribute(org.jdom.Attribute)
    {
        org.jdom.Attribute r1;
        org.jdom.Element r0;
        org.jdom.AttributeList $r2;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Attribute;

        $r2 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        virtualinvoke $r2.<org.jdom.AttributeList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.jdom.Element setAttributes(java.util.List)
    {
        java.util.List r1;
        org.jdom.Element r0;
        org.jdom.AttributeList $r2;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.jdom.Element: org.jdom.AttributeList attributes>;

        virtualinvoke $r2.<org.jdom.AttributeList: void clearAndSet(java.util.Collection)>(r1);

        return r0;
    }

    public org.jdom.Parent setContent(int, java.util.Collection)
    {
        java.util.Collection r2;
        int i0;
        org.jdom.ContentList $r1, $r3;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Collection;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r1.<org.jdom.ContentList: java.lang.Object remove(int)>(i0);

        $r3 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r3.<org.jdom.ContentList: boolean addAll(int,java.util.Collection)>(i0, r2);

        return r0;
    }

    public org.jdom.Element setContent(int, org.jdom.Content)
    {
        int i0;
        org.jdom.ContentList $r2;
        org.jdom.Content r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        i0 := @parameter0: int;

        r1 := @parameter1: org.jdom.Content;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<org.jdom.ContentList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public org.jdom.Element setContent(java.util.Collection)
    {
        org.jdom.ContentList $r2;
        org.jdom.Element r0;
        java.util.Collection r1;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r2.<org.jdom.ContentList: void clearAndSet(java.util.Collection)>(r1);

        return r0;
    }

    public org.jdom.Element setContent(org.jdom.Content)
    {
        org.jdom.ContentList $r1, $r3;
        org.jdom.Content r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: org.jdom.Content;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r1.<org.jdom.ContentList: void clear()>();

        $r3 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r3.<java.util.AbstractList: boolean add(java.lang.Object)>(r2);

        return r0;
    }

    public org.jdom.Element setName(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.jdom.IllegalNameException $r3;
        org.jdom.Element r2;

        r2 := @this: org.jdom.Element;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom.Verifier: java.lang.String checkElementName(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $r3 = new org.jdom.IllegalNameException;

        specialinvoke $r3.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, "element", $r1);

        throw $r3;

     label1:
        r2.<org.jdom.Element: java.lang.String name> = r0;

        return r2;
    }

    public org.jdom.Element setNamespace(org.jdom.Namespace)
    {
        org.jdom.Namespace r1;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r1 := @parameter0: org.jdom.Namespace;

        if r1 != null goto label1;

        r1 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

     label1:
        r0.<org.jdom.Element: org.jdom.Namespace namespace> = r1;

        return r0;
    }

    public org.jdom.Element setText(java.lang.String)
    {
        org.jdom.Text $r3;
        org.jdom.ContentList $r1;
        java.lang.String r2;
        org.jdom.Element r0;

        r0 := @this: org.jdom.Element;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.jdom.Element: org.jdom.ContentList content>;

        virtualinvoke $r1.<org.jdom.ContentList: void clear()>();

        if r2 == null goto label1;

        $r3 = new org.jdom.Text;

        specialinvoke $r3.<org.jdom.Text: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r3);

     label1:
        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r7, $r8;
        java.lang.String $r3, $r5, $r6;
        org.jdom.Element r2;
        boolean $z0;

        r2 := @this: org.jdom.Element;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[Element: <");

        $r3 = virtualinvoke r2.<org.jdom.Element: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke r2.<org.jdom.Element: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [Namespace: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label1:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/>]");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.List $r6, $r7, $r8;
        int $i0, i1;
        java.io.ObjectOutputStream r0;
        org.jdom.Namespace $r2, $r4, r10;
        java.lang.Object $r9;
        java.lang.String $r3, $r5, $r11, $r12;
        org.jdom.Element r1;

        r1 := @this: org.jdom.Element;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r3 = virtualinvoke $r2.<org.jdom.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r4 = r1.<org.jdom.Element: org.jdom.Namespace namespace>;

        $r5 = virtualinvoke $r4.<org.jdom.Namespace: java.lang.String getURI()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        $r6 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        if $r6 != null goto label1;

        virtualinvoke r0.<java.io.ObjectOutputStream: void write(int)>(0);

        goto label4;

     label1:
        $r7 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void write(int)>($i0);

        i1 = 0;

        goto label3;

     label2:
        $r8 = r1.<org.jdom.Element: java.util.List additionalNamespaces>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (org.jdom.Namespace) $r9;

        $r11 = virtualinvoke r10.<org.jdom.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r11);

        $r12 = virtualinvoke r10.<org.jdom.Namespace: java.lang.String getURI()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r12);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.jdom.Element: int INITIAL_ARRAY_SIZE> = 5;

        <org.jdom.Element: java.lang.String CVS_ID> = "@(#) $RCSfile: Element.java,v $ $Revision: 1.152 $ $Date: 2004/09/03 06:35:39 $ $Name: jdom_1_0 $";

        return;
    }
}
