public class org.apache.batik.dom.svg.SVGOMPoint extends java.lang.Object implements org.w3c.dom.svg.SVGPoint
{
    protected float x;
    protected float y;

    public void <init>()
    {
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(float, float)
    {
        float f0, f1;
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.svg.SVGOMPoint: float x> = f0;

        r0.<org.apache.batik.dom.svg.SVGOMPoint: float y> = f1;

        return;
    }

    public float getX()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        $f0 = r0.<org.apache.batik.dom.svg.SVGOMPoint: float x>;

        return $f0;
    }

    public void setX(float) throws org.w3c.dom.DOMException
    {
        float f0;
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.SVGOMPoint: float x> = f0;

        return;
    }

    public float getY()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        $f0 = r0.<org.apache.batik.dom.svg.SVGOMPoint: float y>;

        return $f0;
    }

    public void setY(float) throws org.w3c.dom.DOMException
    {
        float f0;
        org.apache.batik.dom.svg.SVGOMPoint r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.SVGOMPoint: float y> = f0;

        return;
    }

    public org.w3c.dom.svg.SVGPoint matrixTransform(org.w3c.dom.svg.SVGMatrix)
    {
        org.apache.batik.dom.svg.SVGOMPoint r0;
        org.w3c.dom.svg.SVGPoint $r2;
        org.w3c.dom.svg.SVGMatrix r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMPoint;

        r1 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        $r2 = staticinvoke <org.apache.batik.dom.svg.SVGOMPoint: org.w3c.dom.svg.SVGPoint matrixTransform(org.w3c.dom.svg.SVGPoint,org.w3c.dom.svg.SVGMatrix)>(r0, r1);

        return $r2;
    }

    public static org.w3c.dom.svg.SVGPoint matrixTransform(org.w3c.dom.svg.SVGPoint, org.w3c.dom.svg.SVGMatrix)
    {
        org.w3c.dom.svg.SVGPoint r1;
        org.apache.batik.dom.svg.SVGOMPoint $r2;
        org.w3c.dom.svg.SVGMatrix r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17;

        r1 := @parameter0: org.w3c.dom.svg.SVGPoint;

        r0 := @parameter1: org.w3c.dom.svg.SVGMatrix;

        $f0 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f1 = interfaceinvoke r1.<org.w3c.dom.svg.SVGPoint: float getX()>();

        $f2 = $f0 * $f1;

        $f3 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getC()>();

        $f4 = interfaceinvoke r1.<org.w3c.dom.svg.SVGPoint: float getY()>();

        $f5 = $f3 * $f4;

        $f6 = $f2 + $f5;

        $f7 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        f8 = $f6 + $f7;

        $f9 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getB()>();

        $f10 = interfaceinvoke r1.<org.w3c.dom.svg.SVGPoint: float getX()>();

        $f11 = $f9 * $f10;

        $f12 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f13 = interfaceinvoke r1.<org.w3c.dom.svg.SVGPoint: float getY()>();

        $f14 = $f12 * $f13;

        $f15 = $f11 + $f14;

        $f16 = interfaceinvoke r0.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        f17 = $f15 + $f16;

        $r2 = new org.apache.batik.dom.svg.SVGOMPoint;

        specialinvoke $r2.<org.apache.batik.dom.svg.SVGOMPoint: void <init>(float,float)>(f8, f17);

        return $r2;
    }
}
