public final class org.apache.log4j.pattern.FormattingInfo extends java.lang.Object
{
    private static final char[] SPACES;
    private static final org.apache.log4j.pattern.FormattingInfo DEFAULT;
    private final int minLength;
    private final int maxLength;
    private final boolean leftAlign;

    public void <init>(boolean, int, int)
    {
        org.apache.log4j.pattern.FormattingInfo r0;
        int i0, i1;
        boolean z0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfo;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.pattern.FormattingInfo: boolean leftAlign> = z0;

        r0.<org.apache.log4j.pattern.FormattingInfo: int minLength> = i0;

        r0.<org.apache.log4j.pattern.FormattingInfo: int maxLength> = i1;

        return;
    }

    public static org.apache.log4j.pattern.FormattingInfo getDefault()
    {
        org.apache.log4j.pattern.FormattingInfo $r0;

        $r0 = <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo DEFAULT>;

        return $r0;
    }

    public boolean isLeftAligned()
    {
        org.apache.log4j.pattern.FormattingInfo r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfo;

        $z0 = r0.<org.apache.log4j.pattern.FormattingInfo: boolean leftAlign>;

        return $z0;
    }

    public int getMinLength()
    {
        org.apache.log4j.pattern.FormattingInfo r0;
        int $i0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfo;

        $i0 = r0.<org.apache.log4j.pattern.FormattingInfo: int minLength>;

        return $i0;
    }

    public int getMaxLength()
    {
        org.apache.log4j.pattern.FormattingInfo r0;
        int $i0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfo;

        $i0 = r0.<org.apache.log4j.pattern.FormattingInfo: int maxLength>;

        return $i0;
    }

    public void format(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, $i16;
        boolean $z0;
        org.apache.log4j.pattern.FormattingInfo r1;
        char[] $r2, $r3;

        r1 := @this: org.apache.log4j.pattern.FormattingInfo;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        i2 = $i0 - i1;

        $i3 = r1.<org.apache.log4j.pattern.FormattingInfo: int maxLength>;

        if i2 <= $i3 goto label1;

        $i10 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $i11 = r1.<org.apache.log4j.pattern.FormattingInfo: int maxLength>;

        $i12 = $i10 - $i11;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(i1, $i12);

        goto label7;

     label1:
        $i4 = r1.<org.apache.log4j.pattern.FormattingInfo: int minLength>;

        if i2 >= $i4 goto label7;

        $z0 = r1.<org.apache.log4j.pattern.FormattingInfo: boolean leftAlign>;

        if $z0 == 0 goto label4;

        $i6 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $i7 = r1.<org.apache.log4j.pattern.FormattingInfo: int minLength>;

        $i8 = i1 + $i7;

        virtualinvoke r0.<java.lang.StringBuffer: void setLength(int)>($i8);

        i13 = $i6;

     label2:
        $i9 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        if i13 >= $i9 goto label3;

        virtualinvoke r0.<java.lang.StringBuffer: void setCharAt(int,char)>(i13, 32);

        i13 = i13 + 1;

        goto label2;

     label3:
        goto label7;

     label4:
        $i5 = r1.<org.apache.log4j.pattern.FormattingInfo: int minLength>;

        i14 = $i5 - i2;

     label5:
        if i14 <= 8 goto label6;

        $r3 = <org.apache.log4j.pattern.FormattingInfo: char[] SPACES>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>(i1, $r3);

        $i16 = (int) -8;

        i14 = i14 + $i16;

        goto label5;

     label6:
        $r2 = <org.apache.log4j.pattern.FormattingInfo: char[] SPACES>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>(i1, $r2, 0, i14);

     label7:
        return;
    }

    static void <clinit>()
    {
        org.apache.log4j.pattern.FormattingInfo $r1;
        char[] $r0;

        $r0 = newarray (char)[8];

        $r0[0] = 32;

        $r0[1] = 32;

        $r0[2] = 32;

        $r0[3] = 32;

        $r0[4] = 32;

        $r0[5] = 32;

        $r0[6] = 32;

        $r0[7] = 32;

        <org.apache.log4j.pattern.FormattingInfo: char[] SPACES> = $r0;

        $r1 = new org.apache.log4j.pattern.FormattingInfo;

        specialinvoke $r1.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(0, 0, 2147483647);

        <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo DEFAULT> = $r1;

        return;
    }
}
