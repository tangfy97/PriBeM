final class org.apache.lucene.util.fst.NodeHash extends java.lang.Object
{
    private org.apache.lucene.util.packed.GrowableWriter table;
    private int count;
    private int mask;
    private final org.apache.lucene.util.fst.FST fst;
    private final org.apache.lucene.util.fst.FST$Arc scratchArc;
    private final org.apache.lucene.util.fst.FST$BytesReader in;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.fst.FST, org.apache.lucene.util.fst.FST$BytesReader)
    {
        org.apache.lucene.util.fst.NodeHash r0;
        org.apache.lucene.util.fst.FST$BytesReader r4;
        org.apache.lucene.util.packed.GrowableWriter $r2;
        org.apache.lucene.util.fst.FST r3;
        org.apache.lucene.util.fst.FST$Arc $r1;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        r3 := @parameter0: org.apache.lucene.util.fst.FST;

        r4 := @parameter1: org.apache.lucene.util.fst.FST$BytesReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r1.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc> = $r1;

        $r2 = new org.apache.lucene.util.packed.GrowableWriter;

        specialinvoke $r2.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>(8, 16, 0.0F);

        r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table> = $r2;

        r0.<org.apache.lucene.util.fst.NodeHash: int mask> = 15;

        r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst> = r3;

        r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$BytesReader in> = r4;

        return;
    }

    private boolean nodesEqual(org.apache.lucene.util.fst.Builder$UnCompiledNode, long) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r5;
        org.apache.lucene.util.fst.FST$Arc $r2, $r4, $r8, $r9, $r14, $r15, $r18, $r19, $r21, $r23;
        org.apache.lucene.util.fst.NodeHash r0;
        byte $b6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.fst.FST$BytesReader $r1, $r20;
        long l0, $l4, $l5;
        org.apache.lucene.util.fst.Builder$CompiledNode $r13;
        org.apache.lucene.util.fst.Builder$Arc[] $r6;
        int $i1, $i2, $i3, $i7, $i8, $i9, $i10, i11, $i12;
        org.apache.lucene.util.fst.Builder$Arc r7;
        org.apache.lucene.util.fst.Builder$Node $r12;
        org.apache.lucene.util.fst.FST $r3, $r22;
        java.lang.Object $r10, $r11, $r16, $r17;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        r5 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        l0 := @parameter1: long;

        $r3 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst>;

        $r2 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r1 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$BytesReader in>;

        virtualinvoke $r3.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(l0, $r2, $r1);

        $r4 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $i1 = $r4.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i1 == 0 goto label1;

        $i10 = r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $r23 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $i9 = $r23.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        if $i10 == $i9 goto label1;

        return 0;

     label1:
        i11 = 0;

     label2:
        $i12 = r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i11 >= $i12 goto label7;

        $r6 = r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        r7 = $r6[i11];

        $i3 = r7.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        $r8 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $i2 = $r8.<org.apache.lucene.util.fst.FST$Arc: int label>;

        if $i3 != $i2 goto label3;

        $r11 = r7.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $r9 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r10 = $r9.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $z0 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label3;

        $r12 = r7.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        $r13 = (org.apache.lucene.util.fst.Builder$CompiledNode) $r12;

        $l5 = $r13.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $r14 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $l4 = $r14.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b6 = $l5 cmp $l4;

        if $b6 != 0 goto label3;

        $r17 = r7.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $r15 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r16 = $r15.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $z1 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label3;

        $z2 = r7.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal>;

        $r18 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $z3 = virtualinvoke $r18.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z2 == $z3 goto label4;

     label3:
        return 0;

     label4:
        $r19 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $z4 = virtualinvoke $r19.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z4 == 0 goto label6;

        $i7 = r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i8 = $i7 - 1;

        if i11 != $i8 goto label5;

        return 1;

     label5:
        return 0;

     label6:
        $r22 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst>;

        $r21 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r20 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$BytesReader in>;

        virtualinvoke $r22.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($r21, $r20);

        i11 = i11 + 1;

        goto label2;

     label7:
        return 0;
    }

    private int hash(org.apache.lucene.util.fst.Builder$UnCompiledNode)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        long l4, $l5, $l6;
        org.apache.lucene.util.fst.Builder$CompiledNode $r4;
        org.apache.lucene.util.fst.Builder$Arc[] $r1;
        org.apache.lucene.util.fst.NodeHash r7;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        org.apache.lucene.util.fst.Builder$Arc r2;
        boolean $z0;
        org.apache.lucene.util.fst.Builder$Node $r3;
        java.lang.Object $r5, $r6;

        r7 := @this: org.apache.lucene.util.fst.NodeHash;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i13 = 0;

        i14 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i14 >= $i0 goto label3;

        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        r2 = $r1[i14];

        $i3 = 31 * i13;

        $i2 = r2.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        i15 = $i3 + $i2;

        $r3 = r2.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        $r4 = (org.apache.lucene.util.fst.Builder$CompiledNode) $r3;

        l4 = $r4.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $i8 = 31 * i15;

        $l5 = l4 >> 32;

        $l6 = l4 ^ $l5;

        $i7 = (int) $l6;

        i16 = $i8 + $i7;

        $i9 = 31 * i16;

        $r5 = r2.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $i10 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        i17 = $i9 + $i10;

        $i11 = 31 * i17;

        $r6 = r2.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $i12 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        i13 = $i11 + $i12;

        $z0 = r2.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal>;

        if $z0 == 0 goto label2;

        i13 = i13 + 17;

     label2:
        i14 = i14 + 1;

        goto label1;

     label3:
        $i1 = i13 & 2147483647;

        return $i1;
    }

    private int hash(long) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc $r2, $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r14;
        org.apache.lucene.util.fst.NodeHash r0;
        boolean $z0, $z1;
        org.apache.lucene.util.fst.FST$BytesReader $r1, $r13;
        long l0, $l3, $l4, $l5, $l6;
        int $i1, $i2, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        org.apache.lucene.util.fst.FST $r3, $r15;
        java.lang.Object $r8, $r10;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        l0 := @parameter0: long;

        i18 = 0;

        $r3 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst>;

        $r2 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r1 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$BytesReader in>;

        virtualinvoke $r3.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(l0, $r2, $r1);

     label1:
        $i2 = 31 * i18;

        $r4 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $i1 = $r4.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i13 = $i2 + $i1;

        $i8 = 31 * $i13;

        $r5 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $l5 = $r5.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r6 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $l3 = $r6.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l4 = $l3 >> 32;

        $l6 = $l5 ^ $l4;

        $i7 = (int) $l6;

        $i14 = $i8 + $i7;

        $i9 = 31 * $i14;

        $r7 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r8 = $r7.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $i10 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

        $i15 = $i9 + $i10;

        $i11 = 31 * $i15;

        $r9 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r10 = $r9.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $i12 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();

        $i16 = $i11 + $i12;

        i18 = $i16;

        $r11 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $z0 = virtualinvoke $r11.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z0 == 0 goto label2;

        i18 = $i16 + 17;

     label2:
        $r12 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $z1 = virtualinvoke $r12.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r15 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst>;

        $r14 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$Arc scratchArc>;

        $r13 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST$BytesReader in>;

        virtualinvoke $r15.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($r14, $r13);

        goto label1;

     label4:
        $i17 = i18 & 2147483647;

        return $i17;
    }

    public long add(org.apache.lucene.util.fst.Builder$UnCompiledNode) throws java.io.IOException
    {
        org.apache.lucene.util.packed.GrowableWriter $r2, $r4, $r5;
        org.apache.lucene.util.fst.Builder$UnCompiledNode r1;
        long $l2, $l6;
        java.lang.AssertionError $r6;
        org.apache.lucene.util.fst.NodeHash r0;
        byte $b3;
        int $i0, $i1, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        java.lang.String $r12;
        boolean $z0, $z1;
        org.apache.lucene.util.fst.FST $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        r1 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        $i0 = specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: int hash(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r1);

        $i1 = r0.<org.apache.lucene.util.fst.NodeHash: int mask>;

        i14 = $i0 & $i1;

        i15 = 0;

     label1:
        $r2 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        $l2 = virtualinvoke $r2.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i14);

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label4;

        $r3 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.fst.FST fst>;

        $l6 = virtualinvoke $r3.<org.apache.lucene.util.fst.FST: long addNode(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r1);

        $z1 = <org.apache.lucene.util.fst.NodeHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i12 = specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: int hash(long)>($l6);

        if $i12 == $i0 goto label2;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("frozenHash=");

        $i13 = specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: int hash(long)>($l6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs h=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r6;

     label2:
        $i7 = r0.<org.apache.lucene.util.fst.NodeHash: int count>;

        $i8 = $i7 + 1;

        r0.<org.apache.lucene.util.fst.NodeHash: int count> = $i8;

        $r4 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        virtualinvoke $r4.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>(i14, $l6);

        $r5 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        $i9 = virtualinvoke $r5.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i10 = r0.<org.apache.lucene.util.fst.NodeHash: int count>;

        $i11 = 2 * $i10;

        if $i9 >= $i11 goto label3;

        specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: void rehash()>();

     label3:
        return $l6;

     label4:
        $z0 = specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: boolean nodesEqual(org.apache.lucene.util.fst.Builder$UnCompiledNode,long)>(r1, $l2);

        if $z0 == 0 goto label5;

        return $l2;

     label5:
        i15 = i15 + 1;

        $i5 = i14 + i15;

        $i4 = r0.<org.apache.lucene.util.fst.NodeHash: int mask>;

        i14 = $i5 & $i4;

        goto label1;
    }

    private void addNew(long) throws java.io.IOException
    {
        org.apache.lucene.util.packed.GrowableWriter $r1, $r2;
        long l0, $l3;
        org.apache.lucene.util.fst.NodeHash r0;
        byte $b4;
        int $i1, $i2, $i5, $i6, i7, i8;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        l0 := @parameter0: long;

        $i1 = specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: int hash(long)>(l0);

        $i2 = r0.<org.apache.lucene.util.fst.NodeHash: int mask>;

        i7 = $i1 & $i2;

        i8 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        $l3 = virtualinvoke $r1.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i7);

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $r2 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>(i7, l0);

        goto label3;

     label2:
        i8 = i8 + 1;

        $i6 = i7 + i8;

        $i5 = r0.<org.apache.lucene.util.fst.NodeHash: int mask>;

        i7 = $i6 & $i5;

        goto label1;

     label3:
        return;
    }

    private void rehash() throws java.io.IOException
    {
        java.lang.IllegalStateException $r4;
        org.apache.lucene.util.packed.GrowableWriter r1, $r2, $r3;
        long $l7;
        org.apache.lucene.util.fst.NodeHash r0;
        byte $b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i9;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        r1 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        $i0 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        if $i0 < 1073741823 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("FST too large (> 2.1 GB)");

        throw $r4;

     label1:
        $r2 = new org.apache.lucene.util.packed.GrowableWriter;

        $i1 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int getBitsPerValue()>();

        $i2 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i3 = 2 * $i2;

        specialinvoke $r2.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>($i1, $i3, 0.0F);

        r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table> = $r2;

        $r3 = r0.<org.apache.lucene.util.fst.NodeHash: org.apache.lucene.util.packed.GrowableWriter table>;

        $i4 = virtualinvoke $r3.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i5 = $i4 - 1;

        r0.<org.apache.lucene.util.fst.NodeHash: int mask> = $i5;

        i9 = 0;

     label2:
        $i6 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        if i9 >= $i6 goto label4;

        $l7 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i9);

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label3;

        specialinvoke r0.<org.apache.lucene.util.fst.NodeHash: void addNew(long)>($l7);

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        return;
    }

    public int count()
    {
        int $i0;
        org.apache.lucene.util.fst.NodeHash r0;

        r0 := @this: org.apache.lucene.util.fst.NodeHash;

        $i0 = r0.<org.apache.lucene.util.fst.NodeHash: int count>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/NodeHash;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.NodeHash: boolean $assertionsDisabled> = $z1;

        return;
    }
}
