public class org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl extends java.lang.Object implements org.waveprotocol.wave.model.document.raw.RawDocument
{
    public static final org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory BUILDER;
    public static final org.waveprotocol.wave.model.document.raw.RawDocument$Provider PROVIDER;
    private final org.waveprotocol.wave.model.document.raw.impl.Element documentElement;

    void <init>(java.lang.String, java.util.Map)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.util.Map r2;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element createElement(java.lang.String,java.util.Map)>(r1, r2);

        r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element documentElement> = $r3;

        return;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element getDocumentElement()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element documentElement>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element createElement(java.lang.String, java.util.Map, org.waveprotocol.wave.model.document.raw.impl.Element, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node r5;
        java.util.Map r2;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3, r4;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r4 := @parameter2: org.waveprotocol.wave.model.document.raw.impl.Element;

        r5 := @parameter3: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element createElement(java.lang.String,java.util.Map)>(r1, r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>(r4, $r3, r5);

        return $r3;
    }

    protected org.waveprotocol.wave.model.document.raw.impl.Element createElement(java.lang.String, java.util.Map)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r11;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.waveprotocol.wave.model.document.raw.impl.Element $r0;
        java.util.Map r2;
        java.lang.Object $r5, $r7, $r9;
        java.lang.String r1, $r8, $r10;
        boolean $z0;

        r11 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r0 = new org.waveprotocol.wave.model.document.raw.impl.Element;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.raw.impl.Element: void <init>(java.lang.String)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.raw.impl.Element: void setAttribute(java.lang.String,java.lang.String)>($r8, $r10);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Text createTextNode(java.lang.String, org.waveprotocol.wave.model.document.raw.impl.Element, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Node r4;
        org.waveprotocol.wave.model.document.raw.impl.Text $r0;
        org.waveprotocol.wave.model.document.raw.impl.Element r3;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Element;

        r4 := @parameter2: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r0 = new org.waveprotocol.wave.model.document.raw.impl.Text;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.raw.impl.Text: void <init>(java.lang.String)>(r1);

        virtualinvoke r2.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>(r3, $r0, r4);

        return $r0;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element getParentElement(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        return $r1;
    }

    public short getNodeType(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r1;
        short $s0;

        r1 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $s0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: short getNodeType()>();

        return $s0;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getFirstChild(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getFirstChild()>();

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getLastChild(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getLastChild()>();

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getPreviousSibling(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getPreviousSibling()>();

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling()>();

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element, org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r1, r2, $r3;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r4;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r4 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Node;

        r2 := @parameter2: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>(r1, r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element, org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, r1, $r2, r4, r6;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r5;
        org.waveprotocol.wave.model.document.raw.impl.Element r3;

        r5 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r0 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Node;

        r1 := @parameter2: org.waveprotocol.wave.model.document.raw.impl.Node;

        r4 := @parameter3: org.waveprotocol.wave.model.document.raw.impl.Node;

        r6 = r0;

     label1:
        if r6 == r1 goto label2;

        $r2 = virtualinvoke r6.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling()>();

        virtualinvoke r3.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>(r6, r4);

        r6 = $r2;

        goto label1;

     label2:
        return r0;
    }

    public void removeChild(org.waveprotocol.wave.model.document.raw.impl.Element, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Node;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node removeChild(org.waveprotocol.wave.model.document.raw.impl.Node)>(r1);

        return;
    }

    public boolean isSameNode(org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, r1;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Node;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Map getAttributes(org.waveprotocol.wave.model.document.raw.impl.Element)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.util.Map $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getAttributes()>();

        return $r1;
    }

    public java.lang.String getTagName(org.waveprotocol.wave.model.document.raw.impl.Element)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.lang.String getTagName()>();

        return $r1;
    }

    public java.lang.String getAttribute(org.waveprotocol.wave.model.document.raw.impl.Element, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r3;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String r1, $r2;

        r3 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.lang.String getAttribute(java.lang.String)>(r1);

        return $r2;
    }

    public void setAttribute(org.waveprotocol.wave.model.document.raw.impl.Element, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r3;
        org.waveprotocol.wave.model.document.raw.impl.Element r1;
        java.lang.String r0, r2;

        r3 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null attribute value in setAttribute");

        virtualinvoke r1.<org.waveprotocol.wave.model.document.raw.impl.Element: void setAttribute(java.lang.String,java.lang.String)>(r2, r0);

        return;
    }

    public void removeAttribute(org.waveprotocol.wave.model.document.raw.impl.Element, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Element;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: void removeAttribute(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getData(org.waveprotocol.wave.model.document.raw.impl.Text)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Text r0;
        java.lang.String $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: java.lang.String getData()>();

        return $r1;
    }

    public int getLength(org.waveprotocol.wave.model.document.raw.impl.Text)
    {
        int $i0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r1;
        org.waveprotocol.wave.model.document.raw.impl.Text r0;

        r1 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: int getLength()>();

        return $i0;
    }

    public void appendData(org.waveprotocol.wave.model.document.raw.impl.Text, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.document.raw.impl.Text r0;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: void appendData(java.lang.String)>(r1);

        return;
    }

    public void insertData(org.waveprotocol.wave.model.document.raw.impl.Text, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        int i0;
        org.waveprotocol.wave.model.document.raw.impl.Text r0;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: void insertData(int,java.lang.String)>(i0, r1);

        return;
    }

    public void deleteData(org.waveprotocol.wave.model.document.raw.impl.Text, int, int)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r1;
        int i0, i1;
        org.waveprotocol.wave.model.document.raw.impl.Text r0;

        r1 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: void deleteData(int,int)>(i0, i1);

        return;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Text splitText(org.waveprotocol.wave.model.document.raw.impl.Text, int)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        int i0;
        org.waveprotocol.wave.model.document.raw.impl.Text r0, $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Text: org.waveprotocol.wave.model.document.raw.impl.Text splitText(int)>(i0);

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Text mergeText(org.waveprotocol.wave.model.document.raw.impl.Text)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        org.waveprotocol.wave.model.document.raw.impl.Text r1, $r3;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Text;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node getPreviousSibling(org.waveprotocol.wave.model.document.raw.impl.Node)>(r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Text asText(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.raw.impl.Text: java.lang.String getData()>();

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.raw.impl.Text: void appendData(java.lang.String)>($r4);

        return $r3;

     label1:
        return null;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element asElement(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r2;

        r1 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element asElement()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Text asText(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r1;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2;

        r1 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Text asText()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer()>();

        return $r1;
    }

    public void setIndexingContainer(org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r2;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        r1 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: void setIndexingContainer(org.waveprotocol.wave.model.util.OffsetList$Container)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc outerXml(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String innerXml()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r2;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element documentElement>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createChildren(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        return $r3;
    }

    public volatile void setIndexingContainer(java.lang.Object, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r3;
        org.waveprotocol.wave.model.util.OffsetList$Container r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void setIndexingContainer(org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.util.OffsetList$Container)>($r3, r2);

        return;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile void deleteData(java.lang.Object, int, int)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        int i0, i1;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void deleteData(org.waveprotocol.wave.model.document.raw.impl.Text,int,int)>($r2, i0, i1);

        return;
    }

    public volatile void insertData(java.lang.Object, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        int i0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r3;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void insertData(org.waveprotocol.wave.model.document.raw.impl.Text,int,java.lang.String)>($r3, i0, r2);

        return;
    }

    public volatile void appendData(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r3;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void appendData(org.waveprotocol.wave.model.document.raw.impl.Text,java.lang.String)>($r3, r2);

        return;
    }

    public volatile void removeAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void removeAttribute(org.waveprotocol.wave.model.document.raw.impl.Element,java.lang.String)>($r3, r2);

        return;
    }

    public volatile void setAttribute(java.lang.Object, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r4;
        java.lang.String r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void setAttribute(org.waveprotocol.wave.model.document.raw.impl.Element,java.lang.String,java.lang.String)>($r4, r2, r3);

        return;
    }

    public volatile void removeChild(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r3;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.document.raw.impl.Element $r4;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Node) r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: void removeChild(org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r8;
        org.waveprotocol.wave.model.document.raw.impl.Node $r5, $r6, $r7, $r9;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r7 = (org.waveprotocol.wave.model.document.raw.impl.Node) r2;

        $r6 = (org.waveprotocol.wave.model.document.raw.impl.Node) r3;

        $r5 = (org.waveprotocol.wave.model.document.raw.impl.Node) r4;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>($r8, $r7, $r6, $r5);

        return $r9;
    }

    public volatile java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r6;
        org.waveprotocol.wave.model.document.raw.impl.Node $r4, $r5, $r7;
        java.lang.Object r1, r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r5 = (org.waveprotocol.wave.model.document.raw.impl.Node) r2;

        $r4 = (org.waveprotocol.wave.model.document.raw.impl.Node) r3;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>($r6, $r5, $r4);

        return $r7;
    }

    public volatile java.lang.Object createTextNode(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r4;
        org.waveprotocol.wave.model.document.raw.impl.Text $r6;
        java.lang.Object r2, r3;
        org.waveprotocol.wave.model.document.raw.impl.Element $r5;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.waveprotocol.wave.model.document.raw.impl.Element) r2;

        $r4 = (org.waveprotocol.wave.model.document.raw.impl.Node) r3;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Text createTextNode(java.lang.String,org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node)>(r1, $r5, $r4);

        return $r6;
    }

    public volatile java.lang.Object createElement(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r6, $r7;
        org.waveprotocol.wave.model.document.raw.impl.Node $r5;
        java.util.Map r2;
        java.lang.Object r3, r4;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r6 = (org.waveprotocol.wave.model.document.raw.impl.Element) r3;

        $r5 = (org.waveprotocol.wave.model.document.raw.impl.Node) r4;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element createElement(java.lang.String,java.util.Map,org.waveprotocol.wave.model.document.raw.impl.Element,org.waveprotocol.wave.model.document.raw.impl.Node)>(r1, r2, $r6, $r5);

        return $r7;
    }

    public volatile java.lang.Object asText(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        org.waveprotocol.wave.model.document.raw.impl.Text $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Text asText(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object asElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element asElement(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile int getLength(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        int $i0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: int getLength(org.waveprotocol.wave.model.document.raw.impl.Text)>($r2);

        return $i0;
    }

    public volatile java.lang.String getData(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: java.lang.String getData(org.waveprotocol.wave.model.document.raw.impl.Text)>($r2);

        return $r3;
    }

    public volatile java.util.Map getAttributes(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.util.Map $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: java.util.Map getAttributes(org.waveprotocol.wave.model.document.raw.impl.Element)>($r2);

        return $r3;
    }

    public volatile java.lang.String getAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3;
        java.lang.String r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: java.lang.String getAttribute(org.waveprotocol.wave.model.document.raw.impl.Element,java.lang.String)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.String getTagName(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Element) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: java.lang.String getTagName(org.waveprotocol.wave.model.document.raw.impl.Element)>($r2);

        return $r3;
    }

    public volatile boolean isSameNode(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r3, $r4;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = (org.waveprotocol.wave.model.document.raw.impl.Node) r2;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: boolean isSameNode(org.waveprotocol.wave.model.document.raw.impl.Node,org.waveprotocol.wave.model.document.raw.impl.Node)>($r4, $r3);

        return $z0;
    }

    public volatile java.lang.Object getNextSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getPreviousSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node getPreviousSibling(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getLastChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node getLastChild(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getFirstChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Node getFirstChild(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile short getNodeType(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        short $s0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $s0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: short getNodeType(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $s0;
    }

    public volatile java.lang.Object getParentElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.raw.impl.Element $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getDocumentElement()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Element getDocumentElement()>();

        return $r1;
    }

    public volatile java.lang.Object mergeText(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Text mergeText(org.waveprotocol.wave.model.document.raw.impl.Text)>($r2);

        return $r3;
    }

    public volatile java.lang.Object splitText(java.lang.Object, int)
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl r0;
        int i0;
        org.waveprotocol.wave.model.document.raw.impl.Text $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Text) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.Text splitText(org.waveprotocol.wave.model.document.raw.impl.Text,int)>($r2, i0);

        return $r3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory $r0, $r1;
        org.waveprotocol.wave.model.document.raw.RawDocumentProviderImpl $r2;

        $r0 = new org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory: void <init>()>();

        <org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory BUILDER> = $r0;

        $r1 = <org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory BUILDER>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.raw.RawDocumentProviderImpl: org.waveprotocol.wave.model.document.raw.RawDocumentProviderImpl create(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)>($r1);

        <org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument$Provider PROVIDER> = $r2;

        return;
    }
}
