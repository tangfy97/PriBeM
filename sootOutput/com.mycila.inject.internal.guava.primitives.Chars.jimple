public final class com.mycila.inject.internal.guava.primitives.Chars extends java.lang.Object
{
    public static final int BYTES;

    private void <init>()
    {
        com.mycila.inject.internal.guava.primitives.Chars r0;

        r0 := @this: com.mycila.inject.internal.guava.primitives.Chars;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        return $i1;
    }

    public static char checkedCast(long)
    {
        java.lang.Object[] $r0;
        long l0, $l3;
        char c2;
        byte $b4;
        java.lang.Long $r1;
        int $i1;
        boolean $z0;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        c2 = (char) $i1;

        $l3 = (long) c2;

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Out of range: %s", $r0);

        return c2;
    }

    public static char saturatedCast(long)
    {
        byte $b1, $b2;
        int $i3, $i5, $i6;
        long l0;
        char $c4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 65535L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label1;

        return 65535;

     label1:
        $b2 = l0 cmp 0L;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label2;

        return 0;

     label2:
        $i3 = (int) l0;

        $c4 = (char) $i3;

        return $c4;
    }

    public static int compare(char, char)
    {
        int $i2, $i3, $i4;
        char c0, c1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i3 = (int) c0;

        $i4 = (int) c1;

        $i2 = $i3 - $i4;

        return $i2;
    }

    public static boolean contains(char[], char)
    {
        int i0, i3, $i4, $i5;
        char[] r0;
        char c1, c2;

        r0 := @parameter0: char[];

        c2 := @parameter1: char;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        c1 = r0[i3];

        $i4 = (int) c1;

        $i5 = (int) c2;

        if $i4 != $i5 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(char[], char)
    {
        int $i1, $i2;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: int indexOf(char[],char,int,int)>(r0, c0, 0, $i1);

        return $i2;
    }

    private static int indexOf(char[], char, int, int)
    {
        char c2, $c3;
        int i0, i1, i4, $i5, $i6, $i8;
        char[] r0;

        r0 := @parameter0: char[];

        c2 := @parameter1: char;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i4 = i0;

     label1:
        if i4 >= i1 goto label3;

        $c3 = r0[i4];

        $i5 = (int) $c3;

        $i6 = (int) c2;

        if $i5 != $i6 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $i8 = (int) -1;

        return $i8;
    }

    public static int indexOf(char[], char[])
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i9, i10, $i11, $i12, $i14;
        char $c7, $c8;
        char[] r0, r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i9 = 0;

     label2:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        $i3 = $i2 - $i1;

        $i4 = $i3 + 1;

        if i9 >= $i4 goto label7;

        i10 = 0;

     label3:
        $i5 = lengthof r1;

        if i10 >= $i5 goto label5;

        $i6 = i9 + i10;

        $c8 = r0[$i6];

        $c7 = r1[i10];

        $i11 = (int) $c8;

        $i12 = (int) $c7;

        if $i11 == $i12 goto label4;

        goto label6;

     label4:
        i10 = i10 + 1;

        goto label3;

     label5:
        return i9;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        $i14 = (int) -1;

        return $i14;
    }

    public static int lastIndexOf(char[], char)
    {
        int $i1, $i2;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: int lastIndexOf(char[],char,int,int)>(r0, c0, 0, $i1);

        return $i2;
    }

    private static int lastIndexOf(char[], char, int, int)
    {
        char c2, $c3;
        int i0, i1, i4, $i5, $i6, $i8, $i10;
        char[] r0;

        r0 := @parameter0: char[];

        c2 := @parameter1: char;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i4 = i0 - 1;

     label1:
        if i4 < i1 goto label3;

        $c3 = r0[i4];

        $i5 = (int) $c3;

        $i6 = (int) c2;

        if $i5 != $i6 goto label2;

        return i4;

     label2:
        $i8 = (int) -1;

        i4 = i4 + $i8;

        goto label1;

     label3:
        $i10 = (int) -1;

        return $i10;
    }

    public static transient char min(char[])
    {
        char $c1, c2;
        int $i0, i3, $i4, $i5, $i6;
        char[] r0;
        boolean $z0;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        c2 = r0[0];

        i3 = 1;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $c1 = r0[i3];

        $i5 = (int) $c1;

        $i6 = (int) c2;

        if $i5 >= $i6 goto label4;

        c2 = r0[i3];

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return c2;
    }

    public static transient char max(char[])
    {
        char $c1, c2;
        int $i0, i3, $i4, $i5, $i6;
        char[] r0;
        boolean $z0;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        c2 = r0[0];

        i3 = 1;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $c1 = r0[i3];

        $i5 = (int) $c1;

        $i6 = (int) c2;

        if $i5 <= $i6 goto label4;

        c2 = r0[i3];

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return c2;
    }

    public static transient char[] concat(char[][])
    {
        char[][] r0;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        char[] r1, r2, r3;

        r0 := @parameter0: char[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (char)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label4;

        r1 = r0[i8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, i6, $i0);

        $i1 = lengthof r1;

        i6 = i6 + $i1;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r3;
    }

    public static byte[] toByteArray(char)
    {
        byte[] $r0;
        byte $b2, $b3;
        int $i1, $i4;
        char c0;

        c0 := @parameter0: char;

        $r0 = newarray (byte)[2];

        $i4 = (int) c0;

        $i1 = $i4 >> 8;

        $b2 = (byte) $i1;

        $r0[0] = $b2;

        $b3 = (byte) c0;

        $r0[1] = $b3;

        return $r0;
    }

    public static char fromByteArray(byte[])
    {
        byte[] r0;
        java.lang.Object[] $r1;
        char $c4;
        java.lang.Integer $r2, $r3;
        byte $b2, $b3;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $i1 = lengthof r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[1] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "array too small: %s < %s", $r1);

        $b3 = r0[0];

        $b2 = r0[1];

        $c4 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: char fromBytes(byte,byte)>($b3, $b2);

        return $c4;
    }

    public static char fromBytes(byte, byte)
    {
        char $c5;
        short $s2, $s7;
        byte b0, b1;
        int $i3, $i4, $i6, $i8;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $i6 = (int) b0;

        $i3 = $i6 << 8;

        $s7 = (short) b1;

        $s2 = $s7 & 255;

        $i8 = (int) $s2;

        $i4 = $i3 | $i8;

        $c5 = (char) $i4;

        return $c5;
    }

    public static char[] ensureCapacity(char[], int, int)
    {
        java.lang.Object[] $r0, $r2;
        java.lang.Integer $r1, $r3;
        int i0, i1, $i2, $i3;
        char[] r4, $r5;
        boolean $z0, $z1;

        r4 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r0);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r2);

        $i2 = lengthof r4;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: char[] copyOf(char[],int)>(r4, $i3);

        goto label6;

     label5:
        $r5 = r4;

     label6:
        return $r5;
    }

    private static char[] copyOf(char[], int)
    {
        int i0, $i1, $i2;
        char[] r0, r1;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r0 = newarray (char)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i2);

        return r0;
    }

    public static transient java.lang.String join(java.lang.String, char[])
    {
        char $c5, $c6;
        int i0, $i1, $i2, $i3, $i4, i7;
        char[] r1;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i0 - 1;

        $i3 = $i1 * $i2;

        $i4 = i0 + $i3;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        $c5 = r1[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i7 = 1;

     label2:
        if i7 >= i0 goto label3;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $c6 = r1[i7];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i7 = i7 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.mycila.inject.internal.guava.primitives.Chars$LexicographicalComparator $r0;

        $r0 = <com.mycila.inject.internal.guava.primitives.Chars$LexicographicalComparator: com.mycila.inject.internal.guava.primitives.Chars$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static char[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r1;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList $r6;
        char $c1;
        java.lang.Character $r5;
        int i0, i2;
        char[] r2, $r7;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList;

        if $z0 == 0 goto label1;

        $r6 = (com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList) r0;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList: char[] toCharArray()>();

        return $r7;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r1;

        r2 = newarray (char)[i0];

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r3 = $r1[i2];

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.lang.Character) $r4;

        $c1 = virtualinvoke $r5.<java.lang.Character: char charValue()>();

        r2[i2] = $c1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(char[])
    {
        java.util.List $r2;
        int $i0;
        com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList $r1;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList;

        specialinvoke $r1.<com.mycila.inject.internal.guava.primitives.Chars$CharArrayAsList: void <init>(char[])>(r0);

        return $r1;
    }

    static int access$000(char[], char, int, int)
    {
        int i1, i2, $i3;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: int indexOf(char[],char,int,int)>(r0, c0, i1, i2);

        return $i3;
    }

    static int access$100(char[], char, int, int)
    {
        int i1, i2, $i3;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.mycila.inject.internal.guava.primitives.Chars: int lastIndexOf(char[],char,int,int)>(r0, c0, i1, i2);

        return $i3;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.primitives.Chars: int BYTES> = 2;

        return;
    }
}
