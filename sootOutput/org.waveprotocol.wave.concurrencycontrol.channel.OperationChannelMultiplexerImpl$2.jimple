final class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory
{
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext val$loggers;
    final org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory val$unsavedDataListenerFactory;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext, org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext r1;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext val$loggers> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory val$unsavedDataListenerFactory> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel create(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext $r2, $r7;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListener $r13;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory $r5, $r12;
        org.waveprotocol.wave.model.id.WaveletId r11;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel r8;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4, $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2 r1;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl $r6;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2;

        r8 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel;

        r11 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r9 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext val$loggers>;

        $r4 = $r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle cc>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void <init>(org.waveprotocol.wave.common.logging.LoggerBundle,org.waveprotocol.wave.model.version.HashedVersion)>($r4, r3);

        $r5 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory val$unsavedDataListenerFactory>;

        if $r5 == null goto label1;

        $r12 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory val$unsavedDataListenerFactory>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListener create(org.waveprotocol.wave.model.id.WaveletId)>(r11);

        virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void setUnsavedDataListener(org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListener)>($r13);

     label1:
        $r6 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r7 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext val$loggers>;

        $r10 = $r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle ops>;

        specialinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: void <init>(org.waveprotocol.wave.common.logging.LoggerBundle,org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel,org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)>($r10, r8, $r0, r9);

        return $r6;
    }
}
