public abstract class org.eclipse.jdt.internal.compiler.ast.Statement extends org.eclipse.jdt.internal.compiler.ast.ASTNode
{

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ASTNode: void <init>()>();

        return;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo);

    public void branchChainTo(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement r0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        return;
    }

    public boolean complainIfUnreachable(org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.lookup.BlockScope, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement r1;
        int $i0, $i1, $i2, $i3;
        boolean z0, z1, $z3, $z4;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        z1 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int reachMode()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label4;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i3 = $i2 & 2147483647;

        r1.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits> = $i3;

        $r2 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        if r0 != $r2 goto label1;

        $z4 = 1;

        $z3 = 1;

        goto label2;

     label1:
        $z4 = 0;

        $z3 = 0;

     label2:
        z0 = $z3;

        if z1 != 0 goto label3;

        if $z4 == 0 goto label3;

        $r4 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unreachableCode(org.eclipse.jdt.internal.compiler.ast.Statement)>(r1);

     label3:
        return z0;

     label4:
        return 0;
    }

    public void generateArguments(org.eclipse.jdt.internal.compiler.lookup.MethodBinding, org.eclipse.jdt.internal.compiler.ast.Expression[], org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] r1;
        org.eclipse.jdt.internal.compiler.ast.Statement r17;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5, $r12, $r14, $r15, $r16;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r6, $r8, $r9, $r11, r20;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding r0;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding r10, r19;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, i11, i12;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r13;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] $r7, r18;

        r17 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodBinding;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression[];

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isVarargs()>();

        if $z0 == 0 goto label11;

        r18 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] parameters>;

        i7 = lengthof r18;

        i0 = i7 - 1;

        i8 = 0;

        goto label02;

     label01:
        $r5 = r1[i8];

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 1);

        i8 = i8 + 1;

     label02:
        if i8 < i0 goto label01;

        $r6 = r18[i0];

        r19 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] parameters>;

        $r8 = $r7[i0];

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>();

        r10 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r9;

        $r11 = virtualinvoke r19.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        i1 = $r11.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if r1 != null goto label03;

        $i9 = 0;

        goto label04;

     label03:
        $i9 = lengthof r1;

     label04:
        i2 = $i9;

        if $i9 <= i7 goto label07;

        $i5 = $i9 - i0;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>($i5);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newArray(org.eclipse.jdt.internal.compiler.lookup.ArrayBinding)>(r10);

        i10 = i0;

        goto label06;

     label05:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

        $i6 = i10 - i0;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>($i6);

        $r16 = r1[i10];

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 1);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAtPut(int,boolean)>(i1, 0);

        i10 = i10 + 1;

     label06:
        if i10 < i2 goto label05;

        goto label14;

     label07:
        if $i9 != i7 goto label10;

        $r12 = r1[i0];

        r20 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r13 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if r20 == $r13 goto label08;

        $i3 = virtualinvoke r19.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: int dimensions()>();

        $i4 = virtualinvoke r20.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int dimensions()>();

        if $i3 != $i4 goto label09;

        $z1 = virtualinvoke r20.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r19);

        if $z1 == 0 goto label09;

     label08:
        $r14 = r1[i0];

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 1);

        goto label14;

     label09:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>(1);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newArray(org.eclipse.jdt.internal.compiler.lookup.ArrayBinding)>(r10);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>(0);

        $r15 = r1[i0];

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 1);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAtPut(int,boolean)>(i1, 0);

        goto label14;

     label10:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>(0);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newArray(org.eclipse.jdt.internal.compiler.lookup.ArrayBinding)>(r10);

        goto label14;

     label11:
        if r1 == null goto label14;

        i11 = 0;

        i12 = lengthof r1;

        goto label13;

     label12:
        $r4 = r1[i11];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 1);

        i11 = i11 + 1;

     label13:
        if i11 < i12 goto label12;

     label14:
        return;
    }

    public abstract void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream);

    public boolean isEmptyBlock()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        return 0;
    }

    public boolean isValidJavaStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        return 1;
    }

    public java.lang.StringBuffer print(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement r0;
        java.lang.StringBuffer r1, $r2;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>(i0, r1);

        return $r2;
    }

    public abstract java.lang.StringBuffer printStatement(int, java.lang.StringBuffer);

    public abstract void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope);

    public org.eclipse.jdt.internal.compiler.impl.Constant resolveCase(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.ast.SwitchStatement)
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r3;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Statement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r4 := @parameter2: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        $r2 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        return $r2;
    }
}
