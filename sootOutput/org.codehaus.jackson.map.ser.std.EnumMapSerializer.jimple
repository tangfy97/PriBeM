public class org.codehaus.jackson.map.ser.std.EnumMapSerializer extends org.codehaus.jackson.map.ser.std.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected final boolean _staticTyping;
    protected final org.codehaus.jackson.map.util.EnumValues _keyEnums;
    protected final org.codehaus.jackson.type.JavaType _valueType;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;
    protected final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.util.EnumValues, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.util.EnumValues r2;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.BeanProperty r4;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.util.EnumValues;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r1, z0, r2, r3, r4, null);

        return;
    }

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.util.EnumValues, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer r5;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.util.EnumValues r2;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.type.JavaType r1;
        boolean z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.util.EnumValues;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>(class "Ljava/util/EnumMap;", 0);

        if z0 != 0 goto label1;

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: boolean _staticTyping> = $z2;

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType> = r1;

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums> = r2;

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = r3;

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property> = r4;

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = r5;

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.util.EnumValues $r5;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer $r0, r1;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType $r6;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        $r6 = r1.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: boolean _staticTyping>;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r6, $z0, $r5, r2, $r4, $r3);

        return $r0;
    }

    public void serialize(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r2;
        java.util.EnumMap r1;
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        r0 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $z0 = virtualinvoke r1.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r2.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void serializeContents(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r0, r3);

     label1:
        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    public void serializeWithType(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r3;
        java.util.EnumMap r1;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r4;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        $z0 = virtualinvoke r1.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void serializeContents(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r4);

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    protected void serializeContents(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r13;
        org.codehaus.jackson.map.util.EnumValues r27;
        java.lang.Enum r8, $r23;
        org.codehaus.jackson.JsonGenerator r9;
        org.codehaus.jackson.map.ser.std.EnumSerializer $r19;
        java.lang.String $r24;
        boolean $z0;
        org.codehaus.jackson.map.ser.std.SerializerBase r28;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.EnumMap r2;
        java.util.Set $r3;
        org.codehaus.jackson.io.SerializedString $r10;
        org.codehaus.jackson.map.JsonSerializer $r1, $r15, $r18, $r20, r25, r29;
        org.codehaus.jackson.map.BeanProperty $r14, $r17;
        java.lang.Exception $r21;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        java.lang.Object $r5, $r7, $r11, $r22;
        java.lang.Class $r12, $r16, r26;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r2 := @parameter0: java.util.EnumMap;

        r9 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r13 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r1 == null goto label01;

        $r20 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void serializeContentsUsing(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r2, r9, r13, $r20);

        return;

     label01:
        r25 = null;

        r26 = null;

        r27 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r3 = virtualinvoke r2.<java.util.EnumMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.Enum) $r7;

        if r27 != null goto label03;

        $r16 = virtualinvoke r8.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r17 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r18 = virtualinvoke r13.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r16, $r17);

        r28 = (org.codehaus.jackson.map.ser.std.SerializerBase) $r18;

        $r19 = (org.codehaus.jackson.map.ser.std.EnumSerializer) r28;

        r27 = virtualinvoke $r19.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues getEnumValues()>();

     label03:
        $r10 = virtualinvoke r27.<org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)>(r8);

        virtualinvoke r9.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.io.SerializedString)>($r10);

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r11 != null goto label04;

        virtualinvoke r13.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r9);

        goto label09;

     label04:
        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        if $r12 != r26 goto label05;

        r29 = r25;

        goto label06;

     label05:
        $r14 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r15 = virtualinvoke r13.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r12, $r14);

        r29 = $r15;

        r25 = $r15;

        r26 = $r12;

     label06:
        virtualinvoke r29.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r11, r9, r13);

     label07:
        goto label09;

     label08:
        $r21 := @caughtexception;

        $r22 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.Enum) $r22;

        $r24 = virtualinvoke $r23.<java.lang.Enum: java.lang.String name()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r13, $r21, r2, $r24);

     label09:
        goto label02;

     label10:
        return;

        catch java.lang.Exception from label06 to label07 with label08;
    }

    protected void serializeContentsUsing(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r12;
        org.codehaus.jackson.map.util.EnumValues r21;
        java.lang.Enum r7, $r19;
        org.codehaus.jackson.JsonGenerator r8;
        org.codehaus.jackson.map.ser.std.EnumSerializer $r16;
        java.lang.String $r20;
        boolean $z0;
        org.codehaus.jackson.map.ser.std.SerializerBase r22;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.EnumMap r1;
        java.util.Set $r2;
        org.codehaus.jackson.io.SerializedString $r9;
        org.codehaus.jackson.map.JsonSerializer r11, $r15;
        org.codehaus.jackson.map.BeanProperty $r14;
        java.lang.Exception $r17;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        java.lang.Object $r4, $r6, $r10, $r18;
        java.lang.Class $r13;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        r8 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r12 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r11 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        r21 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.Enum) $r6;

        if r21 != null goto label2;

        $r13 = virtualinvoke r7.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r14 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r15 = virtualinvoke r12.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r13, $r14);

        r22 = (org.codehaus.jackson.map.ser.std.SerializerBase) $r15;

        $r16 = (org.codehaus.jackson.map.ser.std.EnumSerializer) r22;

        r21 = virtualinvoke $r16.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues getEnumValues()>();

     label2:
        $r9 = virtualinvoke r21.<org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)>(r7);

        virtualinvoke r8.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.io.SerializedString)>($r9);

        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 != null goto label3;

        virtualinvoke r12.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r8);

        goto label6;

     label3:
        virtualinvoke r11.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r10, r8, r12);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.Enum) $r18;

        $r20 = virtualinvoke $r19.<java.lang.Enum: java.lang.String name()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r12, $r17, r1, $r20);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.JsonSerializer $r1, $r5;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r1 != null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r4, $r3);

        r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r5;

     label1:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.Object[] $r13;
        org.codehaus.jackson.map.SerializerProvider r5;
        org.codehaus.jackson.map.SerializationConfig $r19;
        org.codehaus.jackson.JsonNode $r23;
        org.codehaus.jackson.schema.SchemaAware $r22;
        java.lang.Enum r15;
        org.codehaus.jackson.node.JsonNodeFactory $r10;
        int $i0, i1, i2;
        org.codehaus.jackson.type.JavaType $r7, $r9;
        java.lang.String $r21;
        org.codehaus.jackson.node.ObjectNode $r1, $r11;
        boolean $z0, $z1;
        org.codehaus.jackson.map.JsonSerializer $r18;
        org.codehaus.jackson.map.BeanProperty $r17;
        org.codehaus.jackson.map.AnnotationIntrospector $r20;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type r2, $r6, $r8;
        java.lang.reflect.Type[] $r4;
        java.lang.Enum[] r14;
        java.lang.Class $r12, $r16;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r5 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        $z0 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label5;

        $r3 = (java.lang.reflect.ParameterizedType) r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r4;

        if $i0 != 2 goto label5;

        $r6 = $r4[0];

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r6);

        $r8 = $r4[1];

        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r8);

        $r10 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $r12 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r14 = (java.lang.Enum[]) $r13;

        i1 = lengthof r14;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r15 = r14[i2];

        $r16 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r17 = r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r18 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r16, $r17);

        $z1 = $r18 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z1 == 0 goto label2;

        $r22 = (org.codehaus.jackson.schema.SchemaAware) $r18;

        $r23 = interfaceinvoke $r22.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>(r5, null);

        goto label3;

     label2:
        $r23 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label3:
        $r19 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.SerializationConfig getConfig()>();

        $r20 = virtualinvoke $r19.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r21 = virtualinvoke $r20.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findEnumValue(java.lang.Enum)>(r15);

        virtualinvoke $r11.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r21, $r23);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r11);

     label5:
        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        java.util.EnumMap $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.EnumMap) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void serialize(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.std.EnumMapSerializer r0;
        java.util.EnumMap $r5;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.util.EnumMap) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void serializeWithType(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r2, r3, r4);

        return;
    }
}
