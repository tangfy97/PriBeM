public abstract class org.apache.batik.dom.AbstractParentNode extends org.apache.batik.dom.AbstractNode
{
    protected org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes;

    public void <init>()
    {
        org.apache.batik.dom.AbstractParentNode r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: void <init>()>();

        return;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r2;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 != null goto label1;

        $r2 = new org.apache.batik.dom.AbstractParentNode$ChildNodes;

        specialinvoke $r2.<org.apache.batik.dom.AbstractParentNode$ChildNodes: void <init>(org.apache.batik.dom.AbstractParentNode)>(r0);

        r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes> = $r2;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

     label2:
        return $r2;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r2;
        org.apache.batik.dom.ExtendedNode $r3;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r3 = $r2.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

     label2:
        return $r3;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r2;
        org.apache.batik.dom.ExtendedNode $r3;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r3 = $r2.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

     label2:
        return $r3;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r11;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r3, $r6, $r10, $r18;
        org.apache.batik.dom.ExtendedNode $r4, $r5, $r7;
        java.lang.Integer $r17;
        short $s0, $s1;
        org.w3c.dom.Node r0, r2, $r9, $r15, r16;
        org.w3c.dom.DOMException $r14;
        int $i2, $i3;
        java.lang.String $r13;
        org.apache.batik.dom.AbstractParentNode r1;

        r1 := @this: org.apache.batik.dom.AbstractParentNode;

        r2 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label2;

        $r10 = r1.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r10 == null goto label1;

        $r15 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r15 == r1 goto label2;

     label1:
        $r11 = newarray (java.lang.Object)[2];

        $r17 = new java.lang.Integer;

        $s1 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s1;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i2);

        $r11[0] = $r17;

        $r13 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r11[1] = $r13;

        $r14 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r11);

        throw $r14;

     label2:
        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: void checkAndRemove(org.w3c.dom.Node,boolean)>(r2, 0);

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        if $i3 != 11 goto label5;

        r16 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label4;

     label3:
        $r9 = interfaceinvoke r16.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r16, r0);

        r16 = $r9;

     label4:
        if r16 != null goto label3;

        return r2;

     label5:
        $r3 = r1.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r3 != null goto label6;

        $r18 = new org.apache.batik.dom.AbstractParentNode$ChildNodes;

        specialinvoke $r18.<org.apache.batik.dom.AbstractParentNode$ChildNodes: void <init>(org.apache.batik.dom.AbstractParentNode)>(r1);

        r1.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes> = $r18;

     label6:
        $r6 = r1.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r5 = (org.apache.batik.dom.ExtendedNode) r2;

        $r4 = (org.apache.batik.dom.ExtendedNode) r0;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode insert(org.apache.batik.dom.ExtendedNode,org.apache.batik.dom.ExtendedNode)>($r5, $r4);

        interfaceinvoke $r7.<org.apache.batik.dom.ExtendedNode: void setParentNode(org.w3c.dom.Node)>(r1);

        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: void nodeAdded(org.w3c.dom.Node)>($r7);

        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: void fireDOMNodeInsertedEvent(org.w3c.dom.Node)>($r7);

        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

        return $r7;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r2;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r11;
        org.apache.batik.dom.ExtendedNode $r10, $r12, r18;
        java.lang.Integer $r19;
        short $s0, $s1;
        org.w3c.dom.Node r4, $r7, r8, $r13, $r14, $r15, r16, r17;
        org.w3c.dom.DOMException $r6;
        int $i2, $i3;
        java.lang.String $r5;
        org.apache.batik.dom.AbstractDocument $r9;
        org.apache.batik.dom.AbstractParentNode r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r8 := @parameter0: org.w3c.dom.Node;

        r4 := @parameter1: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 == null goto label1;

        $r7 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r7 == r0 goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r19 = new java.lang.Integer;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i2);

        $r2[0] = $r19;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r2[1] = $r5;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r2);

        throw $r6;

     label2:
        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void checkAndRemove(org.w3c.dom.Node,boolean)>(r8, 1);

        $s1 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s1;

        if $i3 != 11 goto label6;

        $r13 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r13 != null goto label3;

        return r8;

     label3:
        $r14 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>($r13, r4);

        r16 = $r13;

        r17 = $r14;

        goto label5;

     label4:
        $r15 = interfaceinvoke r17.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r17, r16);

        r16 = r17;

        r17 = $r15;

     label5:
        if r17 != null goto label4;

        return r8;

     label6:
        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMNodeRemovedEvent(org.w3c.dom.Node)>(r4);

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        virtualinvoke $r9.<org.apache.batik.dom.AbstractDocument: void nodeToBeRemoved(org.w3c.dom.Node)>(r4);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void nodeToBeRemoved(org.w3c.dom.Node)>(r4);

        r18 = (org.apache.batik.dom.ExtendedNode) r8;

        $r11 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r10 = (org.apache.batik.dom.ExtendedNode) r4;

        $r12 = virtualinvoke $r11.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode replace(org.apache.batik.dom.ExtendedNode,org.apache.batik.dom.ExtendedNode)>(r18, $r10);

        interfaceinvoke r18.<org.apache.batik.dom.ExtendedNode: void setParentNode(org.w3c.dom.Node)>(r0);

        interfaceinvoke $r12.<org.apache.batik.dom.ExtendedNode: void setParentNode(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void nodeAdded(org.w3c.dom.Node)>(r18);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMNodeInsertedEvent(org.w3c.dom.Node)>(r18);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

        return r18;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r2, $r12;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r10;
        org.apache.batik.dom.ExtendedNode $r9, $r11;
        java.lang.Integer $r16, $r17;
        short $s0, $s1;
        org.w3c.dom.Node r4, $r7;
        org.w3c.dom.DOMException $r6, $r15;
        int $i2, $i3;
        java.lang.String $r5, $r14;
        boolean $z0;
        org.apache.batik.dom.AbstractDocument $r8;
        org.apache.batik.dom.AbstractParentNode r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r4 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 == null goto label1;

        $r7 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r7 == r0 goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r16 = new java.lang.Integer;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>($i2);

        $r2[0] = $r16;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r2[1] = $r5;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r2);

        throw $r6;

     label2:
        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label3;

        $r12 = newarray (java.lang.Object)[2];

        $r17 = new java.lang.Integer;

        $s1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s1;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i3);

        $r12[0] = $r17;

        $r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r12[1] = $r14;

        $r15 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r12);

        throw $r15;

     label3:
        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMNodeRemovedEvent(org.w3c.dom.Node)>(r4);

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void nodeToBeRemoved(org.w3c.dom.Node)>(r4);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void nodeToBeRemoved(org.w3c.dom.Node)>(r4);

        $r10 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r9 = (org.apache.batik.dom.ExtendedNode) r4;

        $r11 = virtualinvoke $r10.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode remove(org.apache.batik.dom.ExtendedNode)>($r9);

        interfaceinvoke $r11.<org.apache.batik.dom.ExtendedNode: void setParentNode(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

        return $r11;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r2, $r4, $r9;
        org.apache.batik.dom.ExtendedNode $r3, $r5;
        org.apache.batik.dom.AbstractParentNode r0;
        short $s0;
        org.w3c.dom.Node r1, $r7, r8;
        int $i1;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void checkAndRemove(org.w3c.dom.Node,boolean)>(r1, 0);

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 11 goto label3;

        r8 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r8);

        r8 = $r7;

     label2:
        if r8 != null goto label1;

        return r1;

     label3:
        $r2 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r2 != null goto label4;

        $r9 = new org.apache.batik.dom.AbstractParentNode$ChildNodes;

        specialinvoke $r9.<org.apache.batik.dom.AbstractParentNode$ChildNodes: void <init>(org.apache.batik.dom.AbstractParentNode)>(r0);

        r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes> = $r9;

     label4:
        $r4 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $r3 = (org.apache.batik.dom.ExtendedNode) r1;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode append(org.apache.batik.dom.ExtendedNode)>($r3);

        interfaceinvoke $r5.<org.apache.batik.dom.ExtendedNode: void setParentNode(org.w3c.dom.Node)>(r0);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void nodeAdded(org.w3c.dom.Node)>($r5);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMNodeInsertedEvent(org.w3c.dom.Node)>($r5);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

        return $r5;
    }

    public boolean hasChildNodes()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        int $i0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $i0 = virtualinvoke $r2.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int getLength()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void normalize()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        short $s0, $s1;
        java.lang.StringBuffer $r4, $r6, $r11;
        org.w3c.dom.Node $r1, r9, r10;
        org.apache.batik.dom.AbstractText r8;
        int $i2, $i3;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        r9 = $r1;

        if $r1 == null goto label4;

        interfaceinvoke $r1.<org.w3c.dom.Node: void normalize()>();

        r10 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        if $i2 != 3 goto label2;

        $s1 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s1;

        if $i3 != 3 goto label2;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = interfaceinvoke r10.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        r8 = (org.apache.batik.dom.AbstractText) r9;

        virtualinvoke r8.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r10);

        r10 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label2:
        interfaceinvoke r10.<org.w3c.dom.Node: void normalize()>();

        r9 = r10;

        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r10 != null goto label1;

     label4:
        return;
    }

    public org.w3c.dom.NodeList getElementsByTagName(java.lang.String)
    {
        org.apache.batik.dom.AbstractParentNode r1;
        org.w3c.dom.NodeList $r5;
        org.apache.batik.dom.AbstractDocument $r2;
        java.lang.String r0;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName $r3, $r4, r6;

        r1 := @this: org.apache.batik.dom.AbstractParentNode;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = <org.apache.batik.dom.AbstractNode: org.w3c.dom.NodeList EMPTY_NODE_LIST>;

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagName getElementsByTagName(org.w3c.dom.Node,java.lang.String)>(r1, r0);

        r6 = $r3;

        if $r3 != null goto label2;

        $r4 = new org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        specialinvoke $r4.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void <init>(org.apache.batik.dom.AbstractParentNode,java.lang.String)>(r1, r0);

        r6 = $r4;

        virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: void putElementsByTagName(org.w3c.dom.Node,java.lang.String,org.apache.batik.dom.AbstractParentNode$ElementsByTagName)>(r1, r0, $r4);

     label2:
        return r6;
    }

    public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String)
    {
        org.w3c.dom.NodeList $r3;
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.dom.AbstractParentNode r1;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS $r2, $r6, r7;
        int $i0;
        java.lang.String r0, r4;

        r1 := @this: org.apache.batik.dom.AbstractParentNode;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r3 = <org.apache.batik.dom.AbstractNode: org.w3c.dom.NodeList EMPTY_NODE_LIST>;

        return $r3;

     label1:
        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r4 = null;

     label2:
        $r5 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r6 = virtualinvoke $r5.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String)>(r1, r4, r0);

        r7 = $r6;

        if $r6 != null goto label3;

        $r2 = new org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS;

        specialinvoke $r2.<org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS: void <init>(org.apache.batik.dom.AbstractParentNode,java.lang.String,java.lang.String)>(r1, r4, r0);

        r7 = $r2;

        virtualinvoke $r5.<org.apache.batik.dom.AbstractDocument: void putElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String,org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS)>(r1, r4, r0, $r2);

     label3:
        return r7;
    }

    public java.lang.String getTextContent()
    {
        org.apache.batik.dom.AbstractParentNode r1;
        short $s0;
        org.apache.batik.dom.AbstractNode $r2;
        java.lang.StringBuffer $r6;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3, $r4;

        r1 := @this: org.apache.batik.dom.AbstractParentNode;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        r5 = virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r5.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 7: goto label2;
            case 8: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r2 = (org.apache.batik.dom.AbstractNode) r5;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractNode: java.lang.String getTextContent()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label4:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r5 != null goto label1;

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void fireDOMNodeInsertedIntoDocumentEvent()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractNode $r2;
        org.w3c.dom.Node r3;
        org.apache.batik.dom.AbstractDocument $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: void fireDOMNodeInsertedIntoDocumentEvent()>();

        r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r2 = (org.apache.batik.dom.AbstractNode) r3;

        virtualinvoke $r2.<org.apache.batik.dom.AbstractNode: void fireDOMNodeInsertedIntoDocumentEvent()>();

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r3 != null goto label1;

     label3:
        return;
    }

    public void fireDOMNodeRemovedFromDocumentEvent()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractNode $r2;
        org.w3c.dom.Node r3;
        org.apache.batik.dom.AbstractDocument $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: void fireDOMNodeRemovedFromDocumentEvent()>();

        r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r2 = (org.apache.batik.dom.AbstractNode) r3;

        virtualinvoke $r2.<org.apache.batik.dom.AbstractNode: void fireDOMNodeRemovedFromDocumentEvent()>();

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r3 != null goto label1;

     label3:
        return;
    }

    protected void nodeAdded(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        return;
    }

    protected void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        return;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractNode $r3;
        org.w3c.dom.Node r1, $r4, $r5, r6;
        org.apache.batik.dom.AbstractDocument r2;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r3 = (org.apache.batik.dom.AbstractNode) r6;

        $r4 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(0);

        $r5 = virtualinvoke $r3.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>($r4, r2);

        interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r6 != null goto label1;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.w3c.dom.Node r1, $r2, r3;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(1);

        interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r3 != null goto label1;

        return r1;
    }

    protected void fireDOMSubtreeModifiedEvent()
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", 1, 0, null, null, null, null, 1);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

     label1:
        return;
    }

    protected void fireDOMNodeInsertedEvent(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractNode r5;
        org.w3c.dom.Node r4;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r4 := @parameter0: org.w3c.dom.Node;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", 1, 0, r0, null, null, null, 2);

        r5 = (org.apache.batik.dom.AbstractNode) r4;

        virtualinvoke r5.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

        virtualinvoke r5.<org.apache.batik.dom.AbstractNode: void fireDOMNodeInsertedIntoDocumentEvent()>();

     label1:
        return;
    }

    protected void fireDOMNodeRemovedEvent(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode r0;
        org.apache.batik.dom.AbstractNode r5;
        org.w3c.dom.Node r4;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r4 := @parameter0: org.w3c.dom.Node;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", 1, 0, r0, null, null, null, 3);

        r5 = (org.apache.batik.dom.AbstractNode) r4;

        virtualinvoke r5.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

        virtualinvoke r5.<org.apache.batik.dom.AbstractNode: void fireDOMNodeRemovedFromDocumentEvent()>();

     label1:
        return;
    }

    protected void checkAndRemove(org.w3c.dom.Node, boolean)
    {
        java.lang.Object[] $r5, $r9, $r12, $r16;
        java.lang.Integer $r21, $r22, $r23;
        short $s0, $s1, $s2;
        org.w3c.dom.Document $r2;
        org.w3c.dom.Node r1, $r4, r20;
        org.w3c.dom.DOMException $r8, $r11, $r15, $r19;
        int $i3, $i4, $i5;
        java.lang.String $r7, $r10, $r14, $r18;
        boolean z0, $z1;
        org.apache.batik.dom.AbstractDocument $r3;
        org.apache.batik.dom.AbstractParentNode r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode;

        r1 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void checkChildType(org.w3c.dom.Node,boolean)>(r1, z0);

        $z1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z1 == 0 goto label1;

        $r16 = newarray (java.lang.Object)[2];

        $r21 = new java.lang.Integer;

        $s2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s2;

        specialinvoke $r21.<java.lang.Integer: void <init>(int)>($i3);

        $r16[0] = $r21;

        $r18 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r16[1] = $r18;

        $r19 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r16);

        throw $r19;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        if $r2 == $r3 goto label2;

        $r12 = newarray (java.lang.Object)[2];

        $r22 = new java.lang.Integer;

        $s1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i4 = (int) $s1;

        specialinvoke $r22.<java.lang.Integer: void <init>(int)>($i4);

        $r12[0] = $r22;

        $r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r12[1] = $r14;

        $r15 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(4, "node.from.wrong.document", $r12);

        throw $r15;

     label2:
        if r0 != r1 goto label3;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r9[0] = $r10;

        $r11 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "add.self", $r9);

        throw $r11;

     label3:
        $r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r4 != null goto label4;

        return;

     label4:
        r20 = r0;

        goto label7;

     label5:
        if r20 != r1 goto label6;

        $r5 = newarray (java.lang.Object)[2];

        $r23 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i5 = (int) $s0;

        specialinvoke $r23.<java.lang.Integer: void <init>(int)>($i5);

        $r5[0] = $r23;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r5[1] = $r7;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "add.ancestor", $r5);

        throw $r8;

     label6:
        r20 = interfaceinvoke r20.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label7:
        if r20 != null goto label5;

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r1);

        return;
    }
}
