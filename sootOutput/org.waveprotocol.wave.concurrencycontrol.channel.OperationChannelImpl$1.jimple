class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.client.ServerConnection
{
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isOpen()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>($r1);

        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CONNECTED>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void send(org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.common.logging.Logger $r3, $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r7;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1$1 $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl $r1, $r4, $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1;

        r7 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>($r8);

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("sending delta: ", r7);

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>($r4);

        $r6 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1$1;

        specialinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1$1: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>(r0, r7);

        interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel: void send(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter)>($r6);

        return;
    }

    public java.lang.String debugGetProfilingInfo()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl $r1;
        java.lang.String $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel: java.lang.String debugGetProfilingInfo()>();

        return $r3;
    }
}
