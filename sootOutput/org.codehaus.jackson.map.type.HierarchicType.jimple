public class org.codehaus.jackson.map.type.HierarchicType extends java.lang.Object
{
    protected final java.lang.reflect.Type _actualType;
    protected final java.lang.Class _rawClass;
    protected final java.lang.reflect.ParameterizedType _genericType;
    protected org.codehaus.jackson.map.type.HierarchicType _superType;
    protected org.codehaus.jackson.map.type.HierarchicType _subType;

    public void <init>(java.lang.reflect.Type)
    {
        java.lang.String $r6, $r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.reflect.ParameterizedType $r10, $r11;
        java.lang.reflect.Type r1, $r12;
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r5, $r13, $r14;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 := @parameter0: java.lang.reflect.Type;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.Type _actualType> = r1;

        $z0 = r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r14 = (java.lang.Class) r1;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass> = $r14;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType> = null;

        goto label3;

     label1:
        $z1 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r10 = (java.lang.reflect.ParameterizedType) r1;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType> = $r10;

        $r11 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        $r12 = interfaceinvoke $r11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r13 = (java.lang.Class) $r12;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass> = $r13;

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be used to construct HierarchicType");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label3:
        return;
    }

    private void <init>(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.ParameterizedType, org.codehaus.jackson.map.type.HierarchicType, org.codehaus.jackson.map.type.HierarchicType)
    {
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type r1;
        org.codehaus.jackson.map.type.HierarchicType r0, r4, r5;
        java.lang.Class r2;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.ParameterizedType;

        r4 := @parameter3: org.codehaus.jackson.map.type.HierarchicType;

        r5 := @parameter4: org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.Type _actualType> = r1;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass> = r2;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType> = r3;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType> = r4;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _subType> = r5;

        return;
    }

    public org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()
    {
        java.lang.reflect.ParameterizedType $r4;
        java.lang.reflect.Type $r6;
        org.codehaus.jackson.map.type.HierarchicType r0, $r1, $r2, $r3, $r7;
        java.lang.Class $r5;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType>;

        if $r1 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType>;

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>();

     label2:
        $r3 = new org.codehaus.jackson.map.type.HierarchicType;

        $r6 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.Type _actualType>;

        $r5 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass>;

        $r4 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.ParameterizedType,org.codehaus.jackson.map.type.HierarchicType,org.codehaus.jackson.map.type.HierarchicType)>($r6, $r5, $r4, $r7, null);

        if $r7 == null goto label3;

        virtualinvoke $r7.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>($r3);

     label3:
        return $r3;
    }

    public void setSuperType(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.HierarchicType r0, r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType> = r1;

        return;
    }

    public final org.codehaus.jackson.map.type.HierarchicType getSuperType()
    {
        org.codehaus.jackson.map.type.HierarchicType r0, $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType>;

        return $r1;
    }

    public void setSubType(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.HierarchicType r0, r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _subType> = r1;

        return;
    }

    public final org.codehaus.jackson.map.type.HierarchicType getSubType()
    {
        org.codehaus.jackson.map.type.HierarchicType r0, $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _subType>;

        return $r1;
    }

    public final boolean isGeneric()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.reflect.ParameterizedType $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.reflect.ParameterizedType asGeneric()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.reflect.ParameterizedType $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        return $r1;
    }

    public final java.lang.Class getRawClass()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.Class $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.ParameterizedType $r1, $r4;
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.Class $r2;
        java.lang.String $r3, $r5;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        if $r1 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r5;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }
}
