public class org.springframework.beans.factory.parsing.FailFastProblemReporter extends java.lang.Object implements org.springframework.beans.factory.parsing.ProblemReporter
{
    private org.apache.commons.logging.Log logger;

    public void <init>()
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.beans.factory.parsing.FailFastProblemReporter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.parsing.FailFastProblemReporter: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void setLogger(org.apache.commons.logging.Log)
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter r0;
        org.apache.commons.logging.Log r1, $r3;
        java.lang.Class $r2;

        r0 := @this: org.springframework.beans.factory.parsing.FailFastProblemReporter;

        r1 := @parameter0: org.apache.commons.logging.Log;

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

     label2:
        r0.<org.springframework.beans.factory.parsing.FailFastProblemReporter: org.apache.commons.logging.Log logger> = $r3;

        return;
    }

    public void fatal(org.springframework.beans.factory.parsing.Problem)
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter r2;
        org.springframework.beans.factory.parsing.BeanDefinitionParsingException $r0;
        org.springframework.beans.factory.parsing.Problem r1;

        r2 := @this: org.springframework.beans.factory.parsing.FailFastProblemReporter;

        r1 := @parameter0: org.springframework.beans.factory.parsing.Problem;

        $r0 = new org.springframework.beans.factory.parsing.BeanDefinitionParsingException;

        specialinvoke $r0.<org.springframework.beans.factory.parsing.BeanDefinitionParsingException: void <init>(org.springframework.beans.factory.parsing.Problem)>(r1);

        throw $r0;
    }

    public void error(org.springframework.beans.factory.parsing.Problem)
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter r2;
        org.springframework.beans.factory.parsing.BeanDefinitionParsingException $r0;
        org.springframework.beans.factory.parsing.Problem r1;

        r2 := @this: org.springframework.beans.factory.parsing.FailFastProblemReporter;

        r1 := @parameter0: org.springframework.beans.factory.parsing.Problem;

        $r0 = new org.springframework.beans.factory.parsing.BeanDefinitionParsingException;

        specialinvoke $r0.<org.springframework.beans.factory.parsing.BeanDefinitionParsingException: void <init>(org.springframework.beans.factory.parsing.Problem)>(r1);

        throw $r0;
    }

    public void warning(org.springframework.beans.factory.parsing.Problem)
    {
        java.lang.Throwable $r3;
        org.springframework.beans.factory.parsing.FailFastProblemReporter r0;
        org.apache.commons.logging.Log $r2;
        org.springframework.beans.factory.parsing.Problem r1;

        r0 := @this: org.springframework.beans.factory.parsing.FailFastProblemReporter;

        r1 := @parameter0: org.springframework.beans.factory.parsing.Problem;

        $r2 = r0.<org.springframework.beans.factory.parsing.FailFastProblemReporter: org.apache.commons.logging.Log logger>;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.parsing.Problem: java.lang.Throwable getRootCause()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>(r1, $r3);

        return;
    }
}
