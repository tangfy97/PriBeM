public class org.apache.tika.server.DetectorResource extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private org.apache.tika.config.TikaConfig config;

    public void <init>(org.apache.tika.config.TikaConfig)
    {
        org.apache.tika.config.TikaConfig r1;
        org.apache.tika.server.DetectorResource r0;

        r0 := @this: org.apache.tika.server.DetectorResource;

        r1 := @parameter0: org.apache.tika.config.TikaConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.server.DetectorResource: org.apache.tika.config.TikaConfig config> = null;

        r0.<org.apache.tika.server.DetectorResource: org.apache.tika.config.TikaConfig config> = r1;

        return;
    }

    public java.lang.String detect(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo)
    {
        org.apache.tika.server.DetectorResource r11;
        org.apache.tika.config.TikaConfig $r12;
        org.apache.tika.mime.MediaType $r14, $r23;
        org.apache.tika.metadata.Metadata $r0;
        org.apache.tika.io.TikaInputStream $r2;
        java.lang.String $r5, $r10, $r15, $r20, $r22, $r24;
        java.io.IOException $r16;
        org.apache.tika.detect.Detector $r13;
        javax.ws.rs.core.MultivaluedMap $r4;
        javax.ws.rs.core.HttpHeaders r3;
        java.lang.StringBuilder $r6, $r8, $r9, $r17, $r19, $r21;
        org.apache.commons.logging.Log $r7, $r18;
        javax.ws.rs.core.UriInfo r25;
        java.io.InputStream r1;

        r11 := @this: org.apache.tika.server.DetectorResource;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r25 := @parameter2: javax.ws.rs.core.UriInfo;

        $r0 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r0.<org.apache.tika.metadata.Metadata: void <init>()>();

        $r2 = staticinvoke <org.apache.tika.io.TikaInputStream: org.apache.tika.io.TikaInputStream get(java.io.InputStream)>(r1);

        $r4 = interfaceinvoke r3.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r5 = staticinvoke <org.apache.tika.server.TikaResource: java.lang.String detectFilename(javax.ws.rs.core.MultivaluedMap)>($r4);

        $r7 = <org.apache.tika.server.DetectorResource: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detecting media type for Filename: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10);

        virtualinvoke $r0.<org.apache.tika.metadata.Metadata: void add(java.lang.String,java.lang.String)>("resourceName", $r5);

     label1:
        $r12 = r11.<org.apache.tika.server.DetectorResource: org.apache.tika.config.TikaConfig config>;

        $r13 = virtualinvoke $r12.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector getDetector()>();

        $r14 = interfaceinvoke $r13.<org.apache.tika.detect.Detector: org.apache.tika.mime.MediaType detect(java.io.InputStream,org.apache.tika.metadata.Metadata)>($r2, $r0);

        $r15 = virtualinvoke $r14.<org.apache.tika.mime.MediaType: java.lang.String toString()>();

     label2:
        return $r15;

     label3:
        $r16 := @caughtexception;

        $r18 = <org.apache.tika.server.DetectorResource: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to detect MIME type for file. Reason: ");

        $r20 = virtualinvoke $r16.<java.io.IOException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r22);

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

        $r23 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        $r24 = virtualinvoke $r23.<org.apache.tika.mime.MediaType: java.lang.String toString()>();

        return $r24;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r2;
        java.lang.String $r1;

        $r0 = class "Lorg/apache/tika/server/DetectorResource;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r1);

        <org.apache.tika.server.DetectorResource: org.apache.commons.logging.Log logger> = $r2;

        return;
    }
}
