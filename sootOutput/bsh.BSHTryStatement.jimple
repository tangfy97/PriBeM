class bsh.BSHTryStatement extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHTryStatement r0;

        r0 := @this: bsh.BSHTryStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        java.util.Vector $r3, $r4;
        boolean $z0, $z1, $z2;
        bsh.TargetError $r31, r40;
        bsh.BlockNameSpace $r13;
        bsh.Interpreter r6;
        bsh.BSHTryStatement r0;
        bsh.InterpreterError $r29;
        bsh.Node $r1, $r25, $r26, r38;
        java.lang.Throwable $r27, r41;
        bsh.NameSpace $r12, $r35;
        bsh.BSHBlock r2, $r23, r39;
        bsh.UtilEvalError $r28, $r30;
        bsh.CallStack r5;
        bsh.BSHFormalParameter r44;
        bsh.Modifiers $r16, $r17;
        java.lang.StringBuffer $r32, $r33, $r34, $r36, $r37;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r18, $r20, r43;
        bsh.EvalError $r24;
        bsh.Primitive $r7;
        java.lang.Object $r8, $r11, $r22, r42;
        java.lang.Class $r9, $r10, $r14, $r15, $r19, $r21;

        r0 := @this: bsh.BSHTryStatement;

        r5 := @parameter0: bsh.CallStack;

        r6 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHTryStatement: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.BSHBlock) $r1;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        $i0 = virtualinvoke r0.<bsh.BSHTryStatement: int jjtGetNumChildren()>();

        r38 = null;

        i4 = 1;

        goto label02;

     label01:
        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r25);

        i4 = i5 + 1;

        $r26 = virtualinvoke r0.<bsh.BSHTryStatement: bsh.Node jjtGetChild(int)>(i5);

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r26);

        r38 = null;

     label02:
        if i4 >= $i0 goto label03;

        i5 = i4 + 1;

        $r25 = virtualinvoke r0.<bsh.BSHTryStatement: bsh.Node jjtGetChild(int)>(i4);

        r38 = $r25;

        $z2 = $r25 instanceof bsh.BSHFormalParameter;

        if $z2 != 0 goto label01;

     label03:
        r39 = null;

        if r38 == null goto label04;

        r39 = (bsh.BSHBlock) r38;

     label04:
        r40 = null;

        r41 = null;

        r42 = null;

        $i1 = virtualinvoke r5.<bsh.CallStack: int depth()>();

     label05:
        r42 = virtualinvoke r2.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

     label06:
        goto label10;

     label07:
        $r31 := @caughtexception;

        r40 = $r31;

        r43 = "Bsh Stack: ";

        goto label09;

     label08:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r43);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        $r35 = virtualinvoke r5.<bsh.CallStack: bsh.NameSpace pop()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        r43 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        $i3 = virtualinvoke r5.<bsh.CallStack: int depth()>();

        if $i3 > $i1 goto label08;

        goto label10;

     label10:
        if r40 == null goto label11;

        r41 = virtualinvoke r40.<bsh.TargetError: java.lang.Throwable getTarget()>();

     label11:
        if r41 == null goto label30;

        $i2 = virtualinvoke $r3.<java.util.Vector: int size()>();

        i6 = 0;

        goto label29;

     label12:
        $r8 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        r44 = (bsh.BSHFormalParameter) $r8;

        virtualinvoke r44.<bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

        $r9 = r44.<bsh.BSHFormalParameter: java.lang.Class type>;

        if $r9 != null goto label13;

        $z1 = virtualinvoke r6.<bsh.Interpreter: boolean getStrictJava()>();

        if $z1 == 0 goto label13;

        $r24 = new bsh.EvalError;

        specialinvoke $r24.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("(Strict Java) Untyped catch block", r0, r5);

        throw $r24;

     label13:
        $r10 = r44.<bsh.BSHFormalParameter: java.lang.Class type>;

        if $r10 == null goto label17;

     label14:
        $r21 = r44.<bsh.BSHFormalParameter: java.lang.Class type>;

        $r22 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>(r41, $r21, 1);

        r41 = (java.lang.Throwable) $r22;

     label15:
        goto label17;

     label16:
        $r30 := @caughtexception;

        goto label28;

     label17:
        $r11 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        $r23 = (bsh.BSHBlock) $r11;

        $r12 = virtualinvoke r5.<bsh.CallStack: bsh.NameSpace top()>();

        $r13 = new bsh.BlockNameSpace;

        specialinvoke $r13.<bsh.BlockNameSpace: void <init>(bsh.NameSpace)>($r12);

     label18:
        $r15 = r44.<bsh.BSHFormalParameter: java.lang.Class type>;

        $r14 = <bsh.BSHFormalParameter: java.lang.Class UNTYPED>;

        if $r15 != $r14 goto label19;

        $r20 = r44.<bsh.BSHFormalParameter: java.lang.String name>;

        virtualinvoke $r13.<bsh.BlockNameSpace: void setBlockVariable(java.lang.String,java.lang.Object)>($r20, r41);

        goto label20;

     label19:
        $r16 = new bsh.Modifiers;

        specialinvoke $r16.<bsh.Modifiers: void <init>()>();

        $r18 = r44.<bsh.BSHFormalParameter: java.lang.String name>;

        $r19 = r44.<bsh.BSHFormalParameter: java.lang.Class type>;

        $r17 = new bsh.Modifiers;

        specialinvoke $r17.<bsh.Modifiers: void <init>()>();

        virtualinvoke $r13.<bsh.BlockNameSpace: void setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>($r18, $r19, r41, $r17);

     label20:
        goto label22;

     label21:
        $r28 := @caughtexception;

        $r29 = new bsh.InterpreterError;

        specialinvoke $r29.<bsh.InterpreterError: void <init>(java.lang.String)>("Unable to set var in catch block namespace.");

        throw $r29;

     label22:
        virtualinvoke r5.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r13);

     label23:
        r42 = virtualinvoke $r23.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

        goto label34;

     label24:
        goto label27;

     label25:
        $r27 := @caughtexception;

        goto label35;

     label26:
        throw $r27;

     label27:
        r40 = null;

        goto label30;

     label28:
        i6 = i6 + 1;

     label29:
        if i6 < $i2 goto label12;

     label30:
        if r39 == null goto label31;

        r42 = virtualinvoke r39.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

     label31:
        if r40 == null goto label32;

        throw r40;

     label32:
        $z0 = r42 instanceof bsh.ReturnControl;

        if $z0 == 0 goto label33;

        return r42;

     label33:
        $r7 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r7;

     label34:
        virtualinvoke r5.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r12);

        goto label24;

     label35:
        virtualinvoke r5.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r12);

        goto label26;

        catch bsh.TargetError from label05 to label06 with label07;
        catch bsh.UtilEvalError from label14 to label15 with label16;
        catch bsh.UtilEvalError from label18 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }
}
