public class org.springframework.beans.support.ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker
{
    private org.springframework.beans.TypeConverter typeConverter;
    private boolean useDefaultConverter;

    public void <init>()
    {
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        specialinvoke r0.<org.springframework.util.MethodInvoker: void <init>()>();

        r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: boolean useDefaultConverter> = 1;

        return;
    }

    public void setTypeConverter(org.springframework.beans.TypeConverter)
    {
        org.springframework.beans.TypeConverter r1;
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        r1 := @parameter0: org.springframework.beans.TypeConverter;

        r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter typeConverter> = r1;

        r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: boolean useDefaultConverter> = 0;

        return;
    }

    public org.springframework.beans.TypeConverter getTypeConverter()
    {
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;
        org.springframework.beans.TypeConverter $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        $r1 = r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter typeConverter>;

        if $r1 != null goto label1;

        $z0 = r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: boolean useDefaultConverter>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter getDefaultTypeConverter()>();

        r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter typeConverter> = $r2;

     label1:
        $r3 = r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter typeConverter>;

        return $r3;
    }

    protected org.springframework.beans.TypeConverter getDefaultTypeConverter()
    {
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r1;
        org.springframework.beans.SimpleTypeConverter $r0;

        r1 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        $r0 = new org.springframework.beans.SimpleTypeConverter;

        specialinvoke $r0.<org.springframework.beans.SimpleTypeConverter: void <init>()>();

        return $r0;
    }

    public void registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)
    {
        java.lang.IllegalStateException $r5;
        java.beans.PropertyEditor r3;
        org.springframework.beans.PropertyEditorRegistry $r4;
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;
        org.springframework.beans.TypeConverter $r1;
        java.lang.Class r2;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.beans.PropertyEditor;

        $r1 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter getTypeConverter()>();

        $z0 = $r1 instanceof org.springframework.beans.PropertyEditorRegistry;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("TypeConverter does not implement PropertyEditorRegistry interface: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        $r4 = (org.springframework.beans.PropertyEditorRegistry) $r1;

        interfaceinvoke $r4.<org.springframework.beans.PropertyEditorRegistry: void registerCustomEditor(java.lang.Class,java.beans.PropertyEditor)>(r2, r3);

        return;
    }

    protected java.lang.reflect.Method findMatchingMethod()
    {
        java.lang.Object[] $r2, $r3, $r4;
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;
        java.lang.reflect.Method $r1, r5;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        $r1 = specialinvoke r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method findMatchingMethod()>();

        r5 = $r1;

        if $r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.Object[] getArguments()>();

        r5 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.reflect.Method doFindMatchingMethod(java.lang.Object[])>($r4);

     label1:
        if r5 != null goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.Object[] getArguments()>();

        $r2[0] = $r3;

        r5 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.reflect.Method doFindMatchingMethod(java.lang.Object[])>($r2);

     label2:
        return r5;
    }

    protected java.lang.reflect.Method doFindMatchingMethod(java.lang.Object[])
    {
        java.lang.Object[] r3, r9, r15;
        java.lang.reflect.Method[] $r5;
        org.springframework.beans.support.ArgumentConvertingMethodInvoker r0;
        int i0, i1, $i2, $i3, i4, i5, i6;
        org.springframework.beans.TypeConverter $r1;
        java.lang.String $r2, $r7;
        java.lang.reflect.Method r6, r14;
        boolean $z0, z1, z2, z3;
        java.lang.Class[] $r8;
        org.springframework.beans.TypeMismatchException $r13;
        java.lang.Class $r4, $r10;
        java.lang.Object $r11, $r12;

        r0 := @this: org.springframework.beans.support.ArgumentConvertingMethodInvoker;

        r3 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: org.springframework.beans.TypeConverter getTypeConverter()>();

        if $r1 == null goto label10;

        $r2 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.String getTargetMethod()>();

        r14 = null;

        i0 = lengthof r3;

        $r4 = virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: java.lang.Class getTargetClass()>();

        $r5 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class)>($r4);

        i4 = 2147483647;

        r15 = (java.lang.Object[]) null;

        i1 = lengthof $r5;

        i5 = 0;

        goto label09;

     label01:
        r6 = $r5[i5];

        $r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label08;

        $r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r8;

        if $i2 != i0 goto label08;

        r9 = newarray (java.lang.Object)[i0];

        z1 = 1;

        z3 = 1;

        z2 = 1;

        i6 = 0;

        goto label06;

     label02:
        $r11 = r3[i6];

        $r10 = $r8[i6];

        $r12 = interfaceinvoke $r1.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>($r11, $r10);

        r9[i6] = $r12;

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        z1 = 0;

        z3 = 0;

        z2 = 0;

     label05:
        i6 = i6 + 1;

     label06:
        if i6 >= i0 goto label07;

        if z2 != 0 goto label02;

     label07:
        if z3 == 0 goto label08;

        $i3 = staticinvoke <org.springframework.beans.support.ArgumentConvertingMethodInvoker: int getTypeDifferenceWeight(java.lang.Class[],java.lang.Object[])>($r8, r9);

        if $i3 >= i4 goto label08;

        i4 = $i3;

        r14 = r6;

        r15 = r9;

     label08:
        i5 = i5 + 1;

     label09:
        if i5 < i1 goto label01;

        if r14 == null goto label10;

        virtualinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: void setArguments(java.lang.Object[])>(r15);

        return r14;

     label10:
        return null;

        catch org.springframework.beans.TypeMismatchException from label02 to label03 with label04;
    }
}
