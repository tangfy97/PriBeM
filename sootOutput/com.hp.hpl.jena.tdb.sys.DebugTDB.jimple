public class com.hp.hpl.jena.tdb.sys.DebugTDB extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.tdb.sys.DebugTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DebugTDB;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.tdb.store.NodeId lookup(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r3;
        com.hp.hpl.jena.tdb.store.NodeId $r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r4;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r4);

        return $r5;
    }

    public static void dumpInternals(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, boolean)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r4, $r8;
        com.hp.hpl.jena.tdb.store.QuadTable $r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.index.TupleTable $r3, $r7;
        int i0, i1, i2, i3;
        java.lang.String $r10, $r12;
        boolean z0;
        java.io.PrintStream $r9, $r11;
        com.hp.hpl.jena.tdb.index.TupleIndex r13, r14;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2, $r6;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        z0 := @parameter1: boolean;

        staticinvoke <com.hp.hpl.jena.tdb.sys.DebugTDB: void dumpNodeTable(java.lang.String,com.hp.hpl.jena.tdb.store.DatasetGraphTDB)>("Nodes", r0);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r13 = $r4[i1];

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = interfaceinvoke r13.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        staticinvoke <com.hp.hpl.jena.tdb.sys.DebugTDB: void dumpIndex(com.hp.hpl.jena.tdb.index.TupleIndex)>(r13);

        i1 = i1 + 1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        return;

     label3:
        i2 = lengthof $r8;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        r14 = $r8[i3];

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = interfaceinvoke r14.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r10);

        staticinvoke <com.hp.hpl.jena.tdb.sys.DebugTDB: void dumpIndex(com.hp.hpl.jena.tdb.index.TupleIndex)>(r14);

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    public static void dumpNodeTable(java.lang.String, com.hp.hpl.jena.tdb.store.DatasetGraphTDB)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        java.lang.String r4;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodeTableLib: void print(java.lang.String,com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r4, $r3);

        return;
    }

    public static void dumpNodeIndex(java.lang.String)
    {
        java.io.PrintStream $r4;
        java.util.Iterator $r3;
        com.hp.hpl.jena.tdb.index.Index $r2;
        com.hp.hpl.jena.tdb.base.file.Location $r6;
        int $i1, $i3;
        java.lang.Object $r5;
        java.lang.String r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r6 = new com.hp.hpl.jena.tdb.base.file.Location;

        specialinvoke $r6.<com.hp.hpl.jena.tdb.base.file.Location: void <init>(java.lang.String)>(r1);

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.sys.SetupTDB: com.hp.hpl.jena.tdb.index.Index makeIndex(com.hp.hpl.jena.tdb.base.file.Location,java.lang.String,int,int,int,int)>($r6, "node2id", 16, 8, $i1, $i3);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.index.Index: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public static com.hp.hpl.jena.tdb.index.TupleIndex getIndex(java.lang.String, com.hp.hpl.jena.tdb.store.DatasetGraphTDB)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r6, $r10;
        com.hp.hpl.jena.tdb.store.QuadTable $r7;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r2;
        com.hp.hpl.jena.tdb.index.TupleTable $r5, $r9;
        int i0, i1, i2, i3;
        java.lang.String r0, $r11, $r12;
        boolean $z0, $z1;
        java.io.PrintStream $r1;
        com.hp.hpl.jena.tdb.index.TupleIndex r13, r14;
        com.hp.hpl.jena.tdb.store.TripleTable $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r4, $r8;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        i0 = lengthof $r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r13 = $r6[i1];

        $r12 = interfaceinvoke r13.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return r13;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = lengthof $r10;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r14 = $r10[i3];

        $r11 = interfaceinvoke r14.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label5;

        return r14;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return null;
    }

    public static void dumpIndex(com.hp.hpl.jena.tdb.index.TupleIndex)
    {
        java.io.PrintStream $r4;
        java.util.Iterator $r1;
        org.apache.jena.atlas.lib.Tuple r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.tdb.index.TupleIndex r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.TupleIndex;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.index.TupleIndex: java.util.Iterator all()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.jena.atlas.lib.Tuple) $r2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>(r3);

        goto label1;

     label2:
        return;
    }
}
