public class org.codehaus.jackson.node.ObjectNode extends org.codehaus.jackson.node.ContainerNode
{
    protected java.util.LinkedHashMap _children;

    public void <init>(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<org.codehaus.jackson.node.ContainerNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r1);

        r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = null;

        return;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.JsonToken $r0;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        return $r0;
    }

    public boolean isObject()
    {
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        return 1;
    }

    public int size()
    {
        java.util.LinkedHashMap $r1, $r2;
        int $i0;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $i0 = virtualinvoke $r2.<java.util.LinkedHashMap: int size()>();

     label2:
        return $i0;
    }

    public java.util.Iterator getElements()
    {
        java.util.LinkedHashMap $r1, $r2;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.codehaus.jackson.node.ContainerNode$NoNodesIterator: org.codehaus.jackson.node.ContainerNode$NoNodesIterator instance()>();

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        return $r4;
    }

    public org.codehaus.jackson.JsonNode get(int)
    {
        int i0;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        i0 := @parameter0: int;

        return null;
    }

    public org.codehaus.jackson.JsonNode get(java.lang.String)
    {
        java.util.LinkedHashMap $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r2;
        org.codehaus.jackson.JsonNode $r5;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        return $r5;

     label1:
        return null;
    }

    public java.util.Iterator getFieldNames()
    {
        java.util.LinkedHashMap $r1, $r2;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.codehaus.jackson.node.ContainerNode$NoStringsIterator: org.codehaus.jackson.node.ContainerNode$NoStringsIterator instance()>();

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        return $r4;
    }

    public org.codehaus.jackson.JsonNode path(int)
    {
        int i0;
        org.codehaus.jackson.node.MissingNode $r0;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r0;
    }

    public org.codehaus.jackson.JsonNode path(java.lang.String)
    {
        java.util.LinkedHashMap $r1, $r4;
        org.codehaus.jackson.node.MissingNode $r2;
        java.lang.Object $r5;
        java.lang.String r3;
        org.codehaus.jackson.JsonNode r6;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (org.codehaus.jackson.JsonNode) $r5;

        if r6 == null goto label1;

        return r6;

     label1:
        $r2 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r2;
    }

    public java.util.Iterator getFields()
    {
        java.util.LinkedHashMap $r1, $r2;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.node.ObjectNode$NoFieldsIterator $r5;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r5 = <org.codehaus.jackson.node.ObjectNode$NoFieldsIterator: org.codehaus.jackson.node.ObjectNode$NoFieldsIterator instance>;

        return $r5;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        return $r4;
    }

    public org.codehaus.jackson.node.ObjectNode 'with'(java.lang.String)
    {
        org.codehaus.jackson.JsonNode r19;
        java.util.LinkedHashMap $r1, $r3, $r6, $r18;
        java.lang.String r2, $r13, $r16;
        org.codehaus.jackson.node.ObjectNode r0, $r5, $r17;
        boolean $z0;
        java.lang.UnsupportedOperationException $r7;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15;
        java.lang.Class $r12;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r18 = new java.util.LinkedHashMap;

        specialinvoke $r18.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = $r18;

        goto label3;

     label1:
        $r3 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r19 = (org.codehaus.jackson.JsonNode) $r4;

        if r19 == null goto label3;

        $z0 = r19 instanceof org.codehaus.jackson.node.ObjectNode;

        if $z0 == 0 goto label2;

        $r17 = (org.codehaus.jackson.node.ObjectNode) r19;

        return $r17;

     label2:
        $r7 = new java.lang.UnsupportedOperationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has value that is not of type ObjectNode (but ");

        $r12 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label3:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $r6 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

        return $r5;
    }

    public org.codehaus.jackson.JsonNode findValue(java.lang.String)
    {
        org.codehaus.jackson.JsonNode $r10, $r11, $r13;
        java.util.LinkedHashMap $r1, $r2;
        java.lang.String r7;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Object $r5, $r8, $r9, $r12;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label4;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.codehaus.jackson.JsonNode) $r12;

        return $r13;

     label2:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.JsonNode) $r9;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findValue(java.lang.String)>(r7);

        if $r11 == null goto label3;

        return $r11;

     label3:
        goto label1;

     label4:
        return null;
    }

    public java.util.List findValues(java.lang.String, java.util.List)
    {
        org.codehaus.jackson.JsonNode $r10;
        java.util.ArrayList $r12;
        java.util.LinkedHashMap $r1, $r2;
        java.lang.String r7;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.List r13;
        java.lang.Object $r5, $r8, $r9, $r11;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.lang.String;

        r13 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label5;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        if r13 != null goto label2;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r13 = $r12;

     label2:
        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label4;

     label3:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.JsonNode) $r9;

        r13 = virtualinvoke $r10.<org.codehaus.jackson.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>(r7, r13);

     label4:
        goto label1;

     label5:
        return r13;
    }

    public java.util.List findValuesAsText(java.lang.String, java.util.List)
    {
        org.codehaus.jackson.JsonNode $r10, $r12;
        java.util.ArrayList $r14;
        java.util.LinkedHashMap $r1, $r2;
        java.lang.String r7, $r13;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.List r15;
        java.lang.Object $r5, $r8, $r9, $r11;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.lang.String;

        r15 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label5;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        if r15 != null goto label2;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r15 = $r14;

     label2:
        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.codehaus.jackson.JsonNode) $r11;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.JsonNode: java.lang.String asText()>();

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label4;

     label3:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.JsonNode) $r9;

        r15 = virtualinvoke $r10.<org.codehaus.jackson.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>(r7, r15);

     label4:
        goto label1;

     label5:
        return r15;
    }

    public org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.JsonNode $r10, $r11;
        java.util.LinkedHashMap $r1, $r2;
        java.lang.Object $r5, $r8, $r9;
        java.lang.String r7;
        org.codehaus.jackson.node.ObjectNode r0, $r12;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label4;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.JsonNode) $r9;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findParent(java.lang.String)>(r7);

        if $r11 == null goto label3;

        $r12 = (org.codehaus.jackson.node.ObjectNode) $r11;

        return $r12;

     label3:
        goto label1;

     label4:
        return null;
    }

    public java.util.List findParents(java.lang.String, java.util.List)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.JsonNode $r10;
        java.util.ArrayList $r11;
        java.util.LinkedHashMap $r1, $r2;
        java.util.List r12;
        java.lang.Object $r5, $r8, $r9;
        java.lang.String r7;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.lang.String;

        r12 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label5;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        if r12 != null goto label2;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r12 = $r11;

     label2:
        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label4;

     label3:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.JsonNode) $r9;

        r12 = virtualinvoke $r10.<org.codehaus.jackson.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>(r7, r12);

     label4:
        goto label1;

     label5:
        return r12;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.codehaus.jackson.node.BaseJsonNode $r12;
        java.util.Set $r4;
        org.codehaus.jackson.map.SerializerProvider r11;
        java.util.LinkedHashMap $r2, $r3;
        org.codehaus.jackson.JsonGenerator r0;
        java.lang.Object $r6, $r8, $r10;
        java.lang.String $r9;
        org.codehaus.jackson.node.ObjectNode r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r0 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r11 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $r2 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r2 == null goto label2;

        $r3 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r9);

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.codehaus.jackson.node.BaseJsonNode) $r10;

        virtualinvoke $r12.<org.codehaus.jackson.node.BaseJsonNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r0, r11);

        goto label1;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        org.codehaus.jackson.node.BaseJsonNode $r13;
        java.util.Set $r5;
        org.codehaus.jackson.map.SerializerProvider r12;
        java.util.LinkedHashMap $r3, $r4;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        java.lang.Object $r7, $r9, $r11;
        java.lang.String $r10;
        org.codehaus.jackson.node.ObjectNode r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r12 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        $r3 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r3 == null goto label2;

        $r4 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r10);

        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.codehaus.jackson.node.BaseJsonNode) $r11;

        virtualinvoke $r13.<org.codehaus.jackson.node.BaseJsonNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r12);

        goto label1;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.JsonNode put(java.lang.String, org.codehaus.jackson.JsonNode)
    {
        java.lang.String r1;
        org.codehaus.jackson.JsonNode $r2, r3;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.codehaus.jackson.JsonNode;

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        $r2 = specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, r3);

        return $r2;
    }

    public org.codehaus.jackson.JsonNode remove(java.lang.String)
    {
        java.util.LinkedHashMap $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r2;
        org.codehaus.jackson.JsonNode $r5;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        return $r5;

     label1:
        return null;
    }

    public org.codehaus.jackson.node.ObjectNode remove(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r2;
        java.util.LinkedHashMap $r1, $r6;
        java.lang.Object $r4;
        java.lang.String r5;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.util.Collection;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label2;

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r5);

        goto label1;

     label2:
        return r0;
    }

    public org.codehaus.jackson.node.ObjectNode removeAll()
    {
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = null;

        return r0;
    }

    public org.codehaus.jackson.JsonNode putAll(java.util.Map)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.JsonNode r11;
        java.util.LinkedHashMap $r1, $r8, $r10;
        java.util.Map r2;
        java.lang.Object $r5, $r7, $r9;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.util.Map;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r10 = new java.util.LinkedHashMap;

        specialinvoke $r10.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r2);

        r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = $r10;

        goto label4;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (org.codehaus.jackson.JsonNode) $r7;

        if r11 != null goto label3;

        r11 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label3:
        $r8 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r11);

        goto label2;

     label4:
        return r0;
    }

    public org.codehaus.jackson.JsonNode putAll(org.codehaus.jackson.node.ObjectNode)
    {
        java.util.LinkedHashMap $r2, $r3, $r4;
        int $i0;
        org.codehaus.jackson.node.ObjectNode r0, r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r0 := @parameter0: org.codehaus.jackson.node.ObjectNode;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r2 != null goto label1;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int)>($i0);

        r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = $r4;

     label1:
        $r3 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: void putContentsTo(java.util.Map)>($r3);

     label2:
        return r1;
    }

    public org.codehaus.jackson.node.ObjectNode retain(java.util.Collection)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Collection r7;
        java.util.Set $r3;
        java.util.LinkedHashMap $r1, $r2;
        java.lang.Object $r5, $r8;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.util.Collection;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke r7.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return r0;
    }

    public transient org.codehaus.jackson.node.ObjectNode retain(java.lang.String[])
    {
        java.util.List $r2;
        java.lang.String[] r1;
        org.codehaus.jackson.node.ObjectNode r0, $r3;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode retain(java.util.Collection)>($r2);

        return $r3;
    }

    public org.codehaus.jackson.node.ArrayNode putArray(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode $r1;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r1);

        return $r1;
    }

    public org.codehaus.jackson.node.ObjectNode putObject(java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r0, $r1;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r1);

        return $r1;
    }

    public void putPOJO(java.lang.String, java.lang.Object)
    {
        org.codehaus.jackson.node.POJONode $r3;
        java.lang.Object r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>(r2);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r3);

        return;
    }

    public void putNull(java.lang.String)
    {
        org.codehaus.jackson.node.NullNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, int)
    {
        int i0;
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(int)>(i0);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.Integer)
    {
        org.codehaus.jackson.node.NullNode $r4;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r3;
        java.lang.String r2;
        java.lang.Integer r0;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Integer;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(int)>($i0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, long)
    {
        long l0;
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(long)>(l0);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.Long)
    {
        org.codehaus.jackson.node.NullNode $r4;
        java.lang.Long r0;
        long $l0;
        org.codehaus.jackson.node.NumericNode $r3;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Long;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(long)>($l0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, float)
    {
        float f0;
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(float)>(f0);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.Float)
    {
        org.codehaus.jackson.node.NullNode $r4;
        java.lang.Float r0;
        float $f0;
        org.codehaus.jackson.node.NumericNode $r3;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Float;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, double)
    {
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;
        double d0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(double)>(d0);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.Double)
    {
        org.codehaus.jackson.node.NullNode $r4;
        java.lang.Double r0;
        org.codehaus.jackson.node.NumericNode $r3;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Double;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        org.codehaus.jackson.node.NumericNode $r3;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.math.BigDecimal;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: void putNull(java.lang.String)>(r2);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.codehaus.jackson.node.TextNode $r3;
        java.lang.String r0, r2;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: void putNull(java.lang.String)>(r2);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, boolean)
    {
        org.codehaus.jackson.node.BooleanNode $r2;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(z0);

        specialinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.Boolean)
    {
        org.codehaus.jackson.node.NullNode $r4;
        org.codehaus.jackson.node.BooleanNode $r3;
        java.lang.Boolean r0;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Boolean;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    public void put(java.lang.String, byte[])
    {
        org.codehaus.jackson.node.NullNode $r4;
        byte[] r0;
        org.codehaus.jackson.node.BinaryNode $r3;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r1;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: byte[];

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r4);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode _put(java.lang.String,org.codehaus.jackson.JsonNode)>(r2, $r3);

     label2:
        return;
    }

    protected void putContentsTo(java.util.Map)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.LinkedHashMap $r1, $r2;
        java.util.Map r7;
        java.lang.Object $r5, $r8, $r9;
        org.codehaus.jackson.node.ObjectNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r7 := @parameter0: java.util.Map;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.JsonNode r14, $r15;
        java.util.LinkedHashMap $r5, $r6;
        int $i0, $i1;
        java.lang.String r12;
        org.codehaus.jackson.node.ObjectNode r1, r4;
        boolean $z0, $z1;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Object r0, $r9, $r11, $r13;
        java.lang.Class $r2, $r3;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.jackson.node.ObjectNode) r0;

        $i0 = virtualinvoke r4.<org.codehaus.jackson.node.ObjectNode: int size()>();

        $i1 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: int size()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $r5 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r5 == null goto label8;

        $r6 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (org.codehaus.jackson.JsonNode) $r13;

        $r15 = virtualinvoke r4.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode get(java.lang.String)>(r12);

        if $r15 == null goto label6;

        $z1 = virtualinvoke $r15.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(r14);

        if $z1 != 0 goto label7;

     label6:
        return 0;

     label7:
        goto label5;

     label8:
        return 1;
    }

    public int hashCode()
    {
        java.util.LinkedHashMap $r1, $r2;
        int $i0, $i2;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $i0 = virtualinvoke $r2.<java.util.LinkedHashMap: int hashCode()>();

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.JsonNode $r12;
        java.util.LinkedHashMap $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3, $r10, $r13;
        org.codehaus.jackson.node.ObjectNode r1;
        boolean $z0;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.lang.StringBuilder $r0;
        java.lang.Object $r7, $r9, $r11;

        r1 := @this: org.codehaus.jackson.node.ObjectNode;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<org.codehaus.jackson.node.ObjectNode: int size()>();

        $i1 = $i0 << 4;

        $i2 = 32 + $i1;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r2 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r2 == null goto label3;

        i3 = 0;

        $r4 = r1.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        if i3 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        i3 = i3 + 1;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        staticinvoke <org.codehaus.jackson.node.TextNode: void appendQuoted(java.lang.StringBuilder,java.lang.String)>($r0, $r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.codehaus.jackson.JsonNode) $r11;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.JsonNode: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private final org.codehaus.jackson.JsonNode _put(java.lang.String, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.JsonNode r3, $r6;
        java.util.LinkedHashMap $r1, $r4, $r7;
        java.lang.Object $r5;
        java.lang.String r2;
        org.codehaus.jackson.node.ObjectNode r0;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.codehaus.jackson.JsonNode;

        $r1 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        if $r1 != null goto label1;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children> = $r7;

     label1:
        $r4 = r0.<org.codehaus.jackson.node.ObjectNode: java.util.LinkedHashMap _children>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        $r6 = (org.codehaus.jackson.JsonNode) $r5;

        return $r6;
    }

    public volatile org.codehaus.jackson.node.ContainerNode removeAll()
    {
        org.codehaus.jackson.node.ObjectNode r0, $r1;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode removeAll()>();

        return $r1;
    }

    public volatile org.codehaus.jackson.JsonNode 'with'(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0, $r2;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode 'with'(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.JsonNode findParent(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode r0, $r2;

        r0 := @this: org.codehaus.jackson.node.ObjectNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)>(r1);

        return $r2;
    }
}
