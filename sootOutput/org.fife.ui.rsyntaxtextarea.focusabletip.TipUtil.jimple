public class org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil extends java.lang.Object
{

    private void <init>()
    {
        org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final java.lang.String getHexString(java.awt.Color)
    {
        java.awt.Color r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("#");

        $i0 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        if $i0 >= 16 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label2:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        if $i1 >= 16 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i2 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        if $i2 >= 16 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label4:
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.awt.Rectangle getScreenBoundsForPoint(int, int)
    {
        java.awt.Rectangle $r2, $r6;
        java.awt.GraphicsConfiguration $r5;
        java.awt.GraphicsDevice $r3;
        java.awt.GraphicsConfiguration[] $r4;
        java.awt.GraphicsEnvironment $r0;
        java.awt.GraphicsDevice[] $r1;
        int $i0, $i1, i2, i3, i4, i5;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice[] getScreenDevices()>();

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label5;

        $r3 = $r1[i4];

        $r4 = virtualinvoke $r3.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration[] getConfigurations()>();

        i5 = 0;

     label2:
        $i1 = lengthof $r4;

        if i5 >= $i1 goto label4;

        $r5 = $r4[i5];

        $r6 = virtualinvoke $r5.<java.awt.GraphicsConfiguration: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r6.<java.awt.Rectangle: boolean contains(int,int)>(i2, i3);

        if $z0 == 0 goto label3;

        return $r6;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.Rectangle getMaximumWindowBounds()>();

        return $r2;
    }

    public static java.awt.Color getToolTipBackground()
    {
        java.awt.Color $r0, $r1, $r2, r3;
        int $i0;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("ToolTip.background");

        r3 = $r0;

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: boolean isNimbusLookAndFeel()>();

        if $r0 == null goto label1;

        if $z0 == 0 goto label3;

     label1:
        $r1 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("info");

        r3 = $r1;

        if $r1 == null goto label2;

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: boolean isDerivedColor(java.awt.Color)>($r1);

        if $z1 == 0 goto label3;

     label2:
        r3 = <java.awt.SystemColor: java.awt.SystemColor info>;

     label3:
        $z2 = r3 instanceof javax.swing.plaf.ColorUIResource;

        if $z2 == 0 goto label4;

        $r2 = new java.awt.Color;

        $i0 = virtualinvoke r3.<java.awt.Color: int getRGB()>();

        specialinvoke $r2.<java.awt.Color: void <init>(int)>($i0);

        r3 = $r2;

     label4:
        return r3;
    }

    public static javax.swing.border.Border getToolTipBorder()
    {
        java.awt.SystemColor $r2;
        javax.swing.border.Border $r0, $r1, r3;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.border.Border getBorder(java.lang.Object)>("ToolTip.border");

        r3 = $r0;

        if $r0 == null goto label1;

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: boolean isNimbusLookAndFeel()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = staticinvoke <javax.swing.UIManager: javax.swing.border.Border getBorder(java.lang.Object)>("nimbusBorder");

        r3 = $r1;

        if $r1 != null goto label2;

        $r2 = <java.awt.SystemColor: java.awt.SystemColor controlDkShadow>;

        r3 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r2);

     label2:
        return r3;
    }

    private static final boolean isDerivedColor(java.awt.Color)
    {
        java.awt.Color r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Color;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".DerivedColor");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static final boolean isNimbusLookAndFeel()
    {
        javax.swing.LookAndFeel $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $r1 = virtualinvoke $r0.<javax.swing.LookAndFeel: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Nimbus");

        return $z0;
    }

    public static void tweakTipEditorPane(javax.swing.JEditorPane)
    {
        java.awt.Color $r3, $r20, $r21, r23, $r24;
        javax.swing.text.html.StyleSheet $r5;
        javax.swing.border.Border $r1;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16;
        javax.swing.JEditorPane r0;
        int $i0;
        javax.swing.plaf.basic.BasicEditorPaneUI $r22;
        java.lang.String $r8, $r14, $r17;
        boolean $z0, $z1;
        java.awt.Font $r18, $r25, r26;
        javax.swing.text.Caret $r2;
        javax.swing.text.html.HTMLDocument $r19;
        javax.swing.text.Document $r4;

        r0 := @parameter0: javax.swing.JEditorPane;

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: boolean isNimbusLookAndFeel()>();

        if $z0 == 0 goto label1;

        $r20 = virtualinvoke r0.<javax.swing.JEditorPane: java.awt.Color getSelectionColor()>();

        $r21 = virtualinvoke r0.<javax.swing.JEditorPane: java.awt.Color getSelectedTextColor()>();

        $r22 = new javax.swing.plaf.basic.BasicEditorPaneUI;

        specialinvoke $r22.<javax.swing.plaf.basic.BasicEditorPaneUI: void <init>()>();

        virtualinvoke r0.<javax.swing.JEditorPane: void setUI(javax.swing.plaf.TextUI)>($r22);

        virtualinvoke r0.<javax.swing.JEditorPane: void setSelectedTextColor(java.awt.Color)>($r21);

        virtualinvoke r0.<javax.swing.JEditorPane: void setSelectionColor(java.awt.Color)>($r20);

     label1:
        virtualinvoke r0.<javax.swing.JEditorPane: void setEditable(boolean)>(0);

        $r1 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(5, 5, 5, 5);

        virtualinvoke r0.<javax.swing.JEditorPane: void setBorder(javax.swing.border.Border)>($r1);

        $r2 = virtualinvoke r0.<javax.swing.JEditorPane: javax.swing.text.Caret getCaret()>();

        interfaceinvoke $r2.<javax.swing.text.Caret: void setSelectionVisible(boolean)>(1);

        $r3 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("Label.foreground");

        r23 = $r3;

        if $r3 == null goto label2;

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: boolean isDerivedColor(java.awt.Color)>($r3);

        if $z1 == 0 goto label3;

     label2:
        r23 = <java.awt.SystemColor: java.awt.SystemColor textText>;

     label3:
        virtualinvoke r0.<javax.swing.JEditorPane: void setForeground(java.awt.Color)>(r23);

        $r24 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: java.awt.Color getToolTipBackground()>();

        virtualinvoke r0.<javax.swing.JEditorPane: void setBackground(java.awt.Color)>($r24);

        $r25 = staticinvoke <javax.swing.UIManager: java.awt.Font getFont(java.lang.Object)>("Label.font");

        r26 = $r25;

        if $r25 != null goto label4;

        $r18 = new java.awt.Font;

        specialinvoke $r18.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 12);

        r26 = $r18;

     label4:
        $r4 = virtualinvoke r0.<javax.swing.JEditorPane: javax.swing.text.Document getDocument()>();

        $r19 = (javax.swing.text.html.HTMLDocument) $r4;

        $r5 = virtualinvoke $r19.<javax.swing.text.html.HTMLDocument: javax.swing.text.html.StyleSheet getStyleSheet()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("body { font-family: ");

        $r8 = virtualinvoke r26.<java.awt.Font: java.lang.String getFamily()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; font-size: ");

        $i0 = virtualinvoke r26.<java.awt.Font: int getSize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pt");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; color: ");

        $r14 = staticinvoke <org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil: java.lang.String getHexString(java.awt.Color)>(r23);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; }");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<javax.swing.text.html.StyleSheet: void addRule(java.lang.String)>($r17);

        return;
    }
}
