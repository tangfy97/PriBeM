public abstract class org.apache.commons.cli.Parser extends java.lang.Object implements org.apache.commons.cli.CommandLineParser
{
    protected org.apache.commons.cli.CommandLine cmd;
    private org.apache.commons.cli.Options options;
    private java.util.List requiredOptions;

    public void <init>()
    {
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void setOptions(org.apache.commons.cli.Options)
    {
        java.util.List $r3;
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.Parser r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 := @parameter0: org.apache.commons.cli.Options;

        r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options options> = r1;

        $r2 = new java.util.ArrayList;

        $r3 = virtualinvoke r1.<org.apache.commons.cli.Options: java.util.List getRequiredOptions()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.apache.commons.cli.Parser: java.util.List requiredOptions> = $r2;

        return;
    }

    protected org.apache.commons.cli.Options getOptions()
    {
        org.apache.commons.cli.Options $r1;
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options options>;

        return $r1;
    }

    protected java.util.List getRequiredOptions()
    {
        java.util.List $r1;
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 = r0.<org.apache.commons.cli.Parser: java.util.List requiredOptions>;

        return $r1;
    }

    protected abstract java.lang.String[] flatten(org.apache.commons.cli.Options, java.lang.String[], boolean);

    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[]) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.CommandLine $r3;
        java.lang.String[] r2;
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 := @parameter0: org.apache.commons.cli.Options;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>(r1, r2, null, 0);

        return $r3;
    }

    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties) throws org.apache.commons.cli.ParseException
    {
        java.util.Properties r3;
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.CommandLine $r4;
        java.lang.String[] r2;
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 := @parameter0: org.apache.commons.cli.Options;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.util.Properties;

        $r4 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], boolean) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.CommandLine $r3;
        java.lang.String[] r2;
        org.apache.commons.cli.Parser r0;
        boolean z0;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 := @parameter0: org.apache.commons.cli.Options;

        r2 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean) throws org.apache.commons.cli.ParseException
    {
        java.util.ListIterator $r8;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        org.apache.commons.cli.Parser r3;
        java.util.List $r1, $r7;
        org.apache.commons.cli.Options r0, $r5, $r20;
        java.lang.String[] $r6, r24;
        org.apache.commons.cli.CommandLine $r4, $r10, $r15, $r19, $r21, $r22;
        java.lang.String r12, $r13, $r14, r17, $r18;
        org.apache.commons.cli.Option r25;
        java.util.Properties r9;
        java.util.Iterator $r2;
        java.lang.Object $r11, $r16, $r23;

        r3 := @this: org.apache.commons.cli.Parser;

        r0 := @parameter0: org.apache.commons.cli.Options;

        r24 := @parameter1: java.lang.String[];

        r9 := @parameter2: java.util.Properties;

        z1 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Options: java.util.List helpOptions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r23 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.commons.cli.Option) $r23;

        virtualinvoke r25.<org.apache.commons.cli.Option: void clearValues()>();

        goto label01;

     label02:
        virtualinvoke r3.<org.apache.commons.cli.Parser: void setOptions(org.apache.commons.cli.Options)>(r0);

        $r4 = new org.apache.commons.cli.CommandLine;

        specialinvoke $r4.<org.apache.commons.cli.CommandLine: void <init>()>();

        r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd> = $r4;

        z8 = 0;

        if r24 != null goto label03;

        r24 = newarray (java.lang.String)[0];

     label03:
        $r5 = virtualinvoke r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r6 = virtualinvoke r3.<org.apache.commons.cli.Parser: java.lang.String[] flatten(org.apache.commons.cli.Options,java.lang.String[],boolean)>($r5, r24, z1);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator()>();

     label04:
        $z9 = interfaceinvoke $r8.<java.util.ListIterator: boolean hasNext()>();

        if $z9 == 0 goto label14;

        $r11 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = "--";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z2 == 0 goto label05;

        z8 = 1;

        goto label10;

     label05:
        $r14 = "-";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z3 == 0 goto label07;

        if z1 == 0 goto label06;

        z8 = 1;

        goto label10;

     label06:
        $r22 = r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r22.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r12);

        goto label10;

     label07:
        $z4 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z4 == 0 goto label09;

        if z1 == 0 goto label08;

        $r20 = virtualinvoke r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z7 = virtualinvoke $r20.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r12);

        if $z7 != 0 goto label08;

        z8 = 1;

        $r21 = r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r21.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r12);

        goto label10;

     label08:
        virtualinvoke r3.<org.apache.commons.cli.Parser: void processOption(java.lang.String,java.util.ListIterator)>(r12, $r8);

        goto label10;

     label09:
        $r15 = r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r15.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r12);

        if z1 == 0 goto label10;

        z8 = 1;

     label10:
        if z8 == 0 goto label13;

     label11:
        $z5 = interfaceinvoke $r8.<java.util.ListIterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r16 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r18 = "--";

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z6 != 0 goto label12;

        $r19 = r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r19.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r17);

     label12:
        goto label11;

     label13:
        goto label04;

     label14:
        virtualinvoke r3.<org.apache.commons.cli.Parser: void processProperties(java.util.Properties)>(r9);

        virtualinvoke r3.<org.apache.commons.cli.Parser: void checkRequiredOptions()>();

        $r10 = r3.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        return $r10;
    }

    protected void processProperties(java.util.Properties)
    {
        java.util.Enumeration $r1;
        org.apache.commons.cli.Options $r6;
        java.lang.String[] $r12, $r13;
        int $i0;
        org.apache.commons.cli.CommandLine $r5, $r15;
        java.lang.String $r3, $r8, $r9, $r10, $r11;
        org.apache.commons.cli.Option $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Properties r0;
        org.apache.commons.cli.Parser r4;
        java.lang.RuntimeException $r14;
        java.lang.Object $r2;

        r4 := @this: org.apache.commons.cli.Parser;

        r0 := @parameter0: java.util.Properties;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label9;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = r4.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        $z1 = virtualinvoke $r5.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>($r3);

        if $z1 != 0 goto label8;

        $r6 = virtualinvoke r4.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($r3);

        $r8 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r3);

        $z2 = virtualinvoke $r7.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z2 == 0 goto label6;

        $r12 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        if $r12 == null goto label3;

        $r13 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        $i0 = lengthof $r13;

        if $i0 != 0 goto label7;

     label3:
        virtualinvoke $r7.<org.apache.commons.cli.Option: void addValueForProcessing(java.lang.String)>($r8);

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        goto label7;

     label6:
        $r9 = "yes";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z3 != 0 goto label7;

        $r10 = "true";

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z4 != 0 goto label7;

        $r11 = "1";

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z5 != 0 goto label7;

        goto label9;

     label7:
        $r15 = r4.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r15.<org.apache.commons.cli.CommandLine: void addOption(org.apache.commons.cli.Option)>($r7);

     label8:
        goto label2;

     label9:
        return;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    protected void checkRequiredOptions() throws org.apache.commons.cli.MissingOptionException
    {
        java.util.List $r1, $r3;
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.MissingOptionException $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.cli.MissingOptionException;

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        specialinvoke $r2.<org.apache.commons.cli.MissingOptionException: void <init>(java.util.List)>($r3);

        throw $r2;

     label1:
        return;
    }

    public void processArgs(org.apache.commons.cli.Option, java.util.ListIterator) throws org.apache.commons.cli.ParseException
    {
        java.util.ListIterator r0;
        org.apache.commons.cli.Options $r6;
        java.lang.String[] $r9;
        org.apache.commons.cli.Parser r5;
        java.lang.RuntimeException $r8;
        java.lang.Object $r3;
        java.lang.String r4, $r7;
        org.apache.commons.cli.Option r1;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.cli.MissingArgumentException $r2;

        r5 := @this: org.apache.commons.cli.Parser;

        r1 := @parameter0: org.apache.commons.cli.Option;

        r0 := @parameter1: java.util.ListIterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r0.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r6 = virtualinvoke r5.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z2 = virtualinvoke $r6.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r4);

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z3 == 0 goto label2;

        interfaceinvoke r0.<java.util.ListIterator: java.lang.Object previous()>();

        goto label6;

     label2:
        $r7 = staticinvoke <org.apache.commons.cli.Util: java.lang.String stripLeadingAndTrailingQuotes(java.lang.String)>(r4);

        virtualinvoke r1.<org.apache.commons.cli.Option: void addValueForProcessing(java.lang.String)>($r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        interfaceinvoke r0.<java.util.ListIterator: java.lang.Object previous()>();

        goto label6;

     label5:
        goto label1;

     label6:
        $r9 = virtualinvoke r1.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        if $r9 != null goto label7;

        $z1 = virtualinvoke r1.<org.apache.commons.cli.Option: boolean hasOptionalArg()>();

        if $z1 != 0 goto label7;

        $r2 = new org.apache.commons.cli.MissingArgumentException;

        specialinvoke $r2.<org.apache.commons.cli.MissingArgumentException: void <init>(org.apache.commons.cli.Option)>(r1);

        throw $r2;

     label7:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    protected void processOption(java.lang.String, java.util.ListIterator) throws org.apache.commons.cli.ParseException
    {
        java.util.ListIterator r10;
        org.apache.commons.cli.Options $r1, $r3, $r7, $r11;
        java.lang.StringBuffer $r17, $r18, $r19;
        org.apache.commons.cli.CommandLine $r9;
        java.lang.String r2, $r15, $r20;
        org.apache.commons.cli.Option $r4, r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.cli.UnrecognizedOptionException $r16;
        org.apache.commons.cli.Parser r0;
        java.util.List $r13, $r14;
        org.apache.commons.cli.OptionGroup $r8, $r12;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.cli.Parser;

        r2 := @parameter0: java.lang.String;

        r10 := @parameter1: java.util.ListIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r16 = new org.apache.commons.cli.UnrecognizedOptionException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.commons.cli.UnrecognizedOptionException: void <init>(java.lang.String,java.lang.String)>($r20, r2);

        throw $r16;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<org.apache.commons.cli.Option: java.lang.Object clone()>();

        r6 = (org.apache.commons.cli.Option) $r5;

        $z1 = virtualinvoke r6.<org.apache.commons.cli.Option: boolean isRequired()>();

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        $r15 = virtualinvoke r6.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        interfaceinvoke $r14.<java.util.List: boolean remove(java.lang.Object)>($r15);

     label2:
        $r7 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>(r6);

        if $r8 == null goto label4;

        $r11 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>(r6);

        $z2 = virtualinvoke $r12.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z2 == 0 goto label3;

        $r13 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        interfaceinvoke $r13.<java.util.List: boolean remove(java.lang.Object)>($r12);

     label3:
        virtualinvoke $r12.<org.apache.commons.cli.OptionGroup: void setSelected(org.apache.commons.cli.Option)>(r6);

     label4:
        $z3 = virtualinvoke r6.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z3 == 0 goto label5;

        virtualinvoke r0.<org.apache.commons.cli.Parser: void processArgs(org.apache.commons.cli.Option,java.util.ListIterator)>(r6, r10);

     label5:
        $r9 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r9.<org.apache.commons.cli.CommandLine: void addOption(org.apache.commons.cli.Option)>(r6);

        return;
    }
}
