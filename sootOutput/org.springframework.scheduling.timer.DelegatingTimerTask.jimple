public class org.springframework.scheduling.timer.DelegatingTimerTask extends java.util.TimerTask
{
    private static final org.apache.commons.logging.Log logger;
    private final java.lang.Runnable delegate;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/scheduling/timer/DelegatingTimerTask;");

        <org.springframework.scheduling.timer.DelegatingTimerTask: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(java.lang.Runnable)
    {
        org.springframework.scheduling.timer.DelegatingTimerTask r0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.timer.DelegatingTimerTask;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<java.util.TimerTask: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Delegate must not be null");

        r0.<org.springframework.scheduling.timer.DelegatingTimerTask: java.lang.Runnable delegate> = r1;

        return;
    }

    public final java.lang.Runnable getDelegate()
    {
        org.springframework.scheduling.timer.DelegatingTimerTask r0;
        java.lang.Runnable $r1;

        r0 := @this: org.springframework.scheduling.timer.DelegatingTimerTask;

        $r1 = r0.<org.springframework.scheduling.timer.DelegatingTimerTask: java.lang.Runnable delegate>;

        return $r1;
    }

    public void run()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.timer.DelegatingTimerTask r0;
        java.lang.Runnable $r1, $r5;
        java.lang.StringBuilder $r3, $r6;
        org.apache.commons.logging.Log $r4;
        java.lang.String $r7;

        r0 := @this: org.springframework.scheduling.timer.DelegatingTimerTask;

     label1:
        $r1 = r0.<org.springframework.scheduling.timer.DelegatingTimerTask: java.lang.Runnable delegate>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = <org.springframework.scheduling.timer.DelegatingTimerTask: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected exception thrown from Runnable: ");

        $r5 = r0.<org.springframework.scheduling.timer.DelegatingTimerTask: java.lang.Runnable delegate>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r7, $r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
