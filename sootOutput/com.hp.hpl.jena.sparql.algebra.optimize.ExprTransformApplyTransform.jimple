public class com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform extends com.hp.hpl.jena.sparql.expr.ExprTransformCopy
{
    private final com.hp.hpl.jena.sparql.algebra.Transform transform;
    private com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor;
    private com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: void <init>(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, null, null);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r2, r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.Transform transform> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor> = r3;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists $r12;
        com.hp.hpl.jena.sparql.expr.Expr $r15;
        com.hp.hpl.jena.sparql.expr.ExprList r14;
        java.lang.String $r11;
        com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2, $r3;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r6;
        com.hp.hpl.jena.sparql.expr.E_Exists $r13;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r7;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform;

        r6 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r14 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor>;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r4, r1, $r3, $r2);

        if $r5 != r1 goto label1;

        $r15 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r6, r14, r1);

        return $r15;

     label1:
        $z0 = r6 instanceof com.hp.hpl.jena.sparql.expr.E_Exists;

        if $z0 == 0 goto label2;

        $r13 = new com.hp.hpl.jena.sparql.expr.E_Exists;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.expr.E_Exists: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>($r5);

        return $r13;

     label2:
        $z1 = r6 instanceof com.hp.hpl.jena.sparql.expr.E_NotExists;

        if $z1 == 0 goto label3;

        $r12 = new com.hp.hpl.jena.sparql.expr.E_NotExists;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>($r5);

        return $r12;

     label3:
        $r7 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized ExprFunctionOp: \n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }
}
