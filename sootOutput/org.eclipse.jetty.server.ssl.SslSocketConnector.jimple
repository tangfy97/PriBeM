public class org.eclipse.jetty.server.ssl.SslSocketConnector extends org.eclipse.jetty.server.bio.SocketConnector implements org.eclipse.jetty.server.ssl.SslConnector
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory;
    private int _handshakeTimeout;

    public void <init>()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = new org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYSTORE_PATH>;

        specialinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void <init>(java.lang.String)>($r2);

        specialinvoke r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: void <init>(org.eclipse.jetty.util.ssl.SslContextFactory)>($r1);

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: void setSoLingerTime(int)>(30000);

        return;
    }

    public void <init>(org.eclipse.jetty.util.ssl.SslContextFactory)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: org.eclipse.jetty.util.ssl.SslContextFactory;

        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void <init>()>();

        r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: int _handshakeTimeout> = 0;

        r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory> = r1;

        return;
    }

    public boolean isAllowRenegotiate()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isAllowRenegotiate()>();

        return $z0;
    }

    public void setAllowRenegotiate(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setAllowRenegotiate(boolean)>(z0);

        return;
    }

    public void accept(int) throws java.io.IOException, java.lang.InterruptedException
    {
        java.net.ServerSocket $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint $r3;
        java.net.Socket $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        int i0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: java.net.ServerSocket _serverSocket>;

        $r2 = virtualinvoke $r1.<java.net.ServerSocket: java.net.Socket accept()>();

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: void configure(java.net.Socket)>($r2);

        $r3 = new org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint;

        specialinvoke $r3.<org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint: void <init>(org.eclipse.jetty.server.ssl.SslSocketConnector,java.net.Socket)>(r0, $r2);

        virtualinvoke $r3.<org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint: void dispatch()>();

        return;
    }

    protected void configure(java.net.Socket) throws java.io.IOException
    {
        java.net.Socket r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.net.Socket;

        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void configure(java.net.Socket)>(r1);

        return;
    }

    public void customize(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r2;
        javax.net.ssl.SSLSession $r6;
        org.eclipse.jetty.io.EndPoint r1;
        org.eclipse.jetty.io.bio.SocketEndPoint r3;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        javax.net.ssl.SSLSocket r5;
        java.lang.Object $r4;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r2 := @parameter1: org.eclipse.jetty.server.Request;

        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>(r1, r2);

        virtualinvoke r2.<org.eclipse.jetty.server.Request: void setScheme(java.lang.String)>("https");

        r3 = (org.eclipse.jetty.io.bio.SocketEndPoint) r1;

        $r4 = virtualinvoke r3.<org.eclipse.jetty.io.bio.SocketEndPoint: java.lang.Object getTransport()>();

        r5 = (javax.net.ssl.SSLSocket) $r4;

        $r6 = virtualinvoke r5.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <org.eclipse.jetty.server.ssl.SslCertificates: void customize(javax.net.ssl.SSLSession,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>($r6, r1, r2);

        return;
    }

    public java.lang.String[] getExcludeCipherSuites()
    {
        java.lang.String[] $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] getExcludeCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getIncludeCipherSuites()
    {
        java.lang.String[] $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] getIncludeCipherSuites()>();

        return $r2;
    }

    public java.lang.String getKeystore()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getKeyStorePath()>();

        return $r2;
    }

    public java.lang.String getKeystoreType()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getKeyStoreType()>();

        return $r2;
    }

    public boolean getNeedClientAuth()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        return $z0;
    }

    public java.lang.String getProtocol()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getProtocol()>();

        return $r2;
    }

    public java.lang.String getProvider()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getProvider()>();

        return $r2;
    }

    public java.lang.String getSecureRandomAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getSecureRandomAlgorithm()>();

        return $r2;
    }

    public java.lang.String getSslKeyManagerFactoryAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getSslKeyManagerFactoryAlgorithm()>();

        return $r2;
    }

    public java.lang.String getSslTrustManagerFactoryAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustManagerFactoryAlgorithm()>();

        return $r2;
    }

    public java.lang.String getTruststore()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustStore()>();

        return $r2;
    }

    public org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        return $r1;
    }

    public java.lang.String getTruststoreType()
    {
        java.lang.String $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustStoreType()>();

        return $r2;
    }

    public boolean getWantClientAuth()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean isConfidential(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: int getConfidentialPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isIntegral(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: int getIntegralPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void open() throws java.io.IOException
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1, $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        org.eclipse.jetty.io.RuntimeIOException $r4;
        java.lang.Exception $r3;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

     label1:
        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void start()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.eclipse.jetty.io.RuntimeIOException;

        specialinvoke $r4.<org.eclipse.jetty.io.RuntimeIOException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void open()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void doStart() throws java.lang.Exception
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1, $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void start()>();

        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void doStart()>();

        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void stop()>();

        specialinvoke r0.<org.eclipse.jetty.server.bio.SocketConnector: void doStop()>();

        return;
    }

    protected java.net.ServerSocket newServerSocket(java.lang.String, int, int) throws java.io.IOException
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        javax.net.ssl.SSLServerSocket $r3;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLServerSocket newSslServerSocket(java.lang.String,int,int)>(r1, i0, i1);

        return $r3;
    }

    public void setExcludeCipherSuites(java.lang.String[])
    {
        java.lang.String[] r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setExcludeCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setIncludeCipherSuites(java.lang.String[])
    {
        java.lang.String[] r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setIncludeCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setKeyPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyManagerPassword(java.lang.String)>(r1);

        return;
    }

    public void setKeystore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStorePath(java.lang.String)>(r1);

        return;
    }

    public void setKeystoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStoreType(java.lang.String)>(r1);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStorePassword(java.lang.String)>(r1);

        return;
    }

    public void setTrustPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStorePassword(java.lang.String)>(r1);

        return;
    }

    public void setProtocol(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setProtocol(java.lang.String)>(r1);

        return;
    }

    public void setProvider(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setProvider(java.lang.String)>(r1);

        return;
    }

    public void setSecureRandomAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSecureRandomAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setSslKeyManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSslKeyManagerFactoryAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setSslTrustManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustManagerFactoryAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setTruststore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStore(java.lang.String)>(r1);

        return;
    }

    public void setTruststoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStoreType(java.lang.String)>(r1);

        return;
    }

    public void setSslContext(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSslContext(javax.net.ssl.SSLContext)>(r1);

        return;
    }

    public javax.net.ssl.SSLContext getSslContext()
    {
        javax.net.ssl.SSLContext $r2;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext getSslContext()>();

        return $r2;
    }

    public void setWantClientAuth(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public void setHandshakeTimeout(int)
    {
        int i0;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: int _handshakeTimeout> = i0;

        return;
    }

    public int getHandshakeTimeout()
    {
        int $i0;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $i0 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: int _handshakeTimeout>;

        return $i0;
    }

    public java.lang.String getAlgorithm()
    {
        java.lang.UnsupportedOperationException $r0;
        org.eclipse.jetty.server.ssl.SslSocketConnector r1;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setAlgorithm(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.eclipse.jetty.server.ssl.SslSocketConnector r1;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSocketConnector;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    static org.eclipse.jetty.util.ssl.SslContextFactory access$000(org.eclipse.jetty.server.ssl.SslSocketConnector)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        org.eclipse.jetty.server.ssl.SslSocketConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.ssl.SslSocketConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        return $r1;
    }

    static org.eclipse.jetty.util.log.Logger access$100()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/server/ssl/SslSocketConnector;");

        <org.eclipse.jetty.server.ssl.SslSocketConnector: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
