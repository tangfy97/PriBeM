public class org.apache.http.impl.client.BasicCredentialsProvider extends java.lang.Object implements org.apache.http.client.CredentialsProvider
{
    private final java.util.concurrent.ConcurrentHashMap credMap;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.http.impl.client.BasicCredentialsProvider r0;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.concurrent.ConcurrentHashMap credMap> = $r1;

        return;
    }

    public void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials)
    {
        org.apache.http.impl.client.BasicCredentialsProvider r1;
        org.apache.http.auth.AuthScope r0;
        org.apache.http.auth.Credentials r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        r0 := @parameter0: org.apache.http.auth.AuthScope;

        r2 := @parameter1: org.apache.http.auth.Credentials;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw $r4;

     label1:
        $r3 = r1.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.concurrent.ConcurrentHashMap credMap>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    private static org.apache.http.auth.Credentials matchCredentials(java.util.Map, org.apache.http.auth.AuthScope)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.http.auth.AuthScope r1, r7, r9;
        org.apache.http.auth.Credentials r8;
        java.util.Map r0;
        int $i0, i1, $i3;
        java.lang.Object $r2, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.http.auth.AuthScope;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (org.apache.http.auth.Credentials) $r2;

        if r8 != null goto label4;

        $i3 = (int) -1;

        i1 = $i3;

        r9 = null;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.http.auth.AuthScope) $r6;

        $i0 = virtualinvoke r1.<org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)>(r7);

        if $i0 <= i1 goto label2;

        i1 = $i0;

        r9 = r7;

     label2:
        goto label1;

     label3:
        if r9 == null goto label4;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r8 = (org.apache.http.auth.Credentials) $r5;

     label4:
        return r8;
    }

    public org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)
    {
        org.apache.http.impl.client.BasicCredentialsProvider r1;
        org.apache.http.auth.AuthScope r0;
        org.apache.http.auth.Credentials $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        r0 := @parameter0: org.apache.http.auth.AuthScope;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.concurrent.ConcurrentHashMap credMap>;

        $r3 = staticinvoke <org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials matchCredentials(java.util.Map,org.apache.http.auth.AuthScope)>($r2, r0);

        return $r3;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.http.impl.client.BasicCredentialsProvider r0;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r1 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.concurrent.ConcurrentHashMap credMap>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        java.lang.String $r2;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r1 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.concurrent.ConcurrentHashMap credMap>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        return $r2;
    }
}
