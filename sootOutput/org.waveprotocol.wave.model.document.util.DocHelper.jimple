public class org.waveprotocol.wave.model.document.util.DocHelper extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.document.util.DocPredicate ROOT_PREDICATE;
    static final boolean $assertionsDisabled;

    public static void noteCodeThatWillBreakWithMultipleRoots()
    {
        return;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.DocHelper r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean textPrecedes(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.indexed.LocationMapper, int)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        org.waveprotocol.wave.model.document.util.Point$El $r3;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        int i0, $i1;
        java.lang.Object $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.document.util.Point $r1;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter2: int;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i1 > 0 goto label1;

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r6);

        $r8 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r7);

        if $r8 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r2, $r3);

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r4);

        if $r5 == null goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public static boolean textFollows(org.waveprotocol.wave.model.document.indexed.LocationMapper, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        org.waveprotocol.wave.model.document.util.Point $r1;
        org.waveprotocol.wave.model.document.util.Point$Tx $r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.Object)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, r5;
        java.lang.String $r3, r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r1, r1, 1);

     label1:
        if r5 == null goto label3;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r5);

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r5, r1, 1);

        goto label1;

     label3:
        return null;
    }

    public static java.lang.Object getLastElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getLastElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.Object)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object getLastElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, r5;
        java.lang.String $r3, r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r1, r1, 1);

     label1:
        if r5 == null goto label3;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r5);

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r5, r1, 1);

        goto label1;

     label3:
        return null;
    }

    public static java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,java.lang.Object)>(r0, r0, r1);

        return $r2;
    }

    public static java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.indexed.LocationMapper, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        org.waveprotocol.wave.model.document.util.Point$El $r3, $r4;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        int $i0, $i1;
        java.lang.Object r2;
        java.lang.String $r5;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r3);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r2);

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r4);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int)>(r1, r0, $i0, $i1);

        return $r5;
    }

    public static java.lang.String getTextForElement(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getTextForElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,java.lang.String)>(r0, r0, r1);

        return $r2;
    }

    public static java.lang.String getTextForElement(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.indexed.LocationMapper, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r2;
        java.lang.String r1, $r4;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String)>(r0, r1);

        if $r2 == null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,java.lang.Object)>(r0, r3, $r2);

        return $r4;

     label1:
        return null;
    }

    public static java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument, int, int)
    {
        int i0, i1;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int)>(r0, r0, i0, i1);

        return $r1;
    }

    public static java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.indexed.LocationMapper, int, int)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        int i0, i1, $i2;
        java.lang.String $r4;
        org.waveprotocol.wave.model.document.util.Point $r1, $r2;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r3, $r1, $r2);

        return $r4;
    }

    public static java.lang.String getText(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset $r0;
        int i0, i1;
        java.lang.String $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17;
        org.waveprotocol.wave.model.document.util.Point r2, r4;
        boolean $z0;
        java.lang.Object r3, r5, $r6, $r8, $r12, r18;
        java.lang.StringBuilder $r7;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r4 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: void <init>(org.waveprotocol.wave.model.document.util.DocHelper$1)>(null);

        staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: void getNodeAfterOutwards(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset)>(r1, r2, $r0);

        r3 = $r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: java.lang.Object node>;

        i0 = $r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: int offset>;

        staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: void getNodeAfterOutwards(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset)>(r1, r4, $r0);

        r5 = $r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: java.lang.Object node>;

        i1 = $r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: int offset>;

        if r3 != null goto label1;

        return "";

     label1:
        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r3);

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r3, r5);

        if $z0 == 0 goto label4;

        if $r6 != null goto label2;

        $r17 = "";

        goto label3;

     label2:
        $r16 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r6);

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label3:
        return $r17;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        if $r6 == null goto label5;

        $r14 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r6);

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label5:
        r18 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r1, r3, null, 1);

     label6:
        if r18 == r5 goto label8;

        $r12 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r18);

        if $r12 == null goto label7;

        $r13 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r12);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label7:
        r18 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r1, r18, null, 1);

        goto label6;

     label8:
        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r18);

        if $r8 == null goto label9;

        $r10 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r8);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label9:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static void getNodeAfterOutwards(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset r2;
        int i0;
        java.lang.Object $r1, $r4, r5, r6;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        goto label5;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r5 = $r1;

        if $r1 != null goto label4;

        r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

     label2:
        if r6 == null goto label4;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r6);

        r5 = $r4;

        if $r4 == null goto label3;

        goto label4;

     label3:
        r6 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r6);

        goto label2;

     label4:
        i0 = 0;

     label5:
        r2.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: java.lang.Object node> = r5;

        r2.<org.waveprotocol.wave.model.document.util.DocHelper$NodeOffset: int offset> = i0;

        return;
    }

    public static java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, r2, $r3;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r0, r1, r2, z0, 1);

        return $r3;
    }

    public static java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, r2, $r3;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r0, r1, r2, z0, 0);

        return $r3;
    }

    public static java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r1, r2, r3, $r4, $r5;
        boolean z0, $z1, z2, $z3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        if r3 != null goto label1;

        r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

     label1:
        if z0 == 0 goto label4;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r2);

        if $r1 == null goto label4;

        if z2 == 0 goto label2;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r1);

        goto label3;

     label2:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>($r1);

     label3:
        if $r4 == null goto label4;

        return $r4;

     label4:
        if r2 == null goto label9;

        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z1 != 0 goto label9;

        if z2 == 0 goto label5;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r2);

        goto label6;

     label5:
        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r2);

     label6:
        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r5, r3);

        if $z3 == 0 goto label7;

        return null;

     label7:
        if $r5 == null goto label8;

        return $r5;

     label8:
        r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        goto label4;

     label9:
        return null;
    }

    public static int getFilteredLocation(org.waveprotocol.wave.model.document.indexed.LocationMapper, org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r1;
        int $i0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        org.waveprotocol.wave.model.document.util.Point r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>(r1, r2);

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r3);

        return $i0;
    }

    public static org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r0;
        org.waveprotocol.wave.model.document.util.Point$El $r12, $r13;
        java.lang.Object $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11;
        org.waveprotocol.wave.model.document.util.Point r1, $r4, $r6;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: void onBeforeFilter(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNode(java.lang.Object)>($r7);

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r8 != $r9 goto label1;

        return r1;

     label1:
        $r10 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, $r10, $r8, 0);

        if $r11 != null goto label2;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r8, null);

        return $r13;

     label2:
        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r11);

        return $r12;

     label3:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r2 != null goto label4;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getLocationOfNodeEnd(org.waveprotocol.wave.model.document.util.ReadableDocumentView,java.lang.Object)>(r0, $r5);

        return $r6;

     label4:
        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getLocationOfBeforeNode(org.waveprotocol.wave.model.document.util.ReadableDocumentView,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    private static org.waveprotocol.wave.model.document.util.Point getLocationOfNodeEnd(org.waveprotocol.wave.model.document.util.ReadableDocumentView, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r0;
        java.lang.AssertionError $r7, $r8;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r5, $r6;
        java.lang.Object r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Node is null");

        throw $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNode(java.lang.Object)>(r1);

        $z1 = <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $r2 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Parent is null");

        throw $r7;

     label2:
        if $r2 != r1 goto label3;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

        return $r6;

     label3:
        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r1, $r2, 0);

        if $r3 != null goto label4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r2);

        return $r5;

     label4:
        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    private static org.waveprotocol.wave.model.document.util.Point getLocationOfBeforeNode(org.waveprotocol.wave.model.document.util.ReadableDocumentView, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r0;
        java.lang.AssertionError $r6, $r9;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r5, $r7;
        java.lang.Object r1, $r2, $r3, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getDocumentElement()>();

        if r1 != $r8 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot get location outside of root element");

        throw $r9;

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNode(java.lang.Object)>(r1);

        if $r2 != r1 goto label2;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        return $r7;

     label2:
        $z1 = <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $r2 != null goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r0, r1, $r2, 1);

        if $r3 != null goto label4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r2);

        return $r5;

     label4:
        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    public static int getItemSize(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Point$El $r5;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.Object r1, $r2, $r3, $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLength(java.lang.Object)>($r2);

        return $i3;

     label1:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        if $r3 != null goto label2;

        staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: void noteCodeThatWillBreakWithMultipleRoots()>();

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        return $i2;

     label2:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        if $r4 == null goto label3;

        $i4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r4);

        goto label4;

     label3:
        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r3);

        $i4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r5);

     label4:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>(r1);

        $i1 = $i4 - $i0;

        return $i1;
    }

    public static org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3, $r4, r6, $r7;
        org.waveprotocol.wave.model.document.util.Point r5;
        boolean $z0;

        r5 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r0 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r6 = null;

        $z0 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r0, $r2);

        $r3 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r3);

        if $r4 == null goto label1;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r4, 0);

     label1:
        goto label3;

     label2:
        $i0 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i0 != 0 goto label3;

        $r1 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r1);

     label3:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r6);

        if r6 == null goto label4;

        if $r7 == null goto label4;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>($r7);

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r6, $i1);

     label4:
        return r5;
    }

    public static org.waveprotocol.wave.model.document.util.Point leftAlign(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.ReadableDocumentView)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r4;
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.util.Point r0, $r7, $r8;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.Point$El $r14;
        java.lang.Object $r1, $r2, $r5, $r6, r9, r10, $r11, $r12, r13;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter2: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label02;

     label01:
        return r0;

     label02:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r9 = $r1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r2 != null goto label03;

        r10 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>($r1);

        goto label04;

     label03:
        r10 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r2);

     label04:
        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNode(java.lang.Object)>($r1);

        if r10 != null goto label06;

        if $r1 != $r5 goto label05;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point textOrElementStart(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r1);

        return $r8;

     label05:
        r10 = $r1;

     label06:
        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNodeLast(java.lang.Object)>(r10);

        if $r6 != null goto label07;

        $r11 = r10;

        goto label08;

     label07:
        $r11 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object nearestCommonAncestor(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r3, $r6, r10);

     label08:
        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: boolean isAncestor(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r3, $r11, $r5, 0);

        if $z1 == 0 goto label09;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point textOrElementStart(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r5);

        return $r7;

     label09:
        if $r6 != null goto label10;

        $r12 = null;

        goto label11;

     label10:
        $r12 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getNextSibling(java.lang.Object)>($r6);

     label11:
        r13 = $r12;

        if $r12 == null goto label12;

        r9 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r12);

        goto label13;

     label12:
        if $r6 == null goto label13;

        r9 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r6);

     label13:
        if r13 != null goto label14;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r9);

        goto label15;

     label14:
        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r13);

     label15:
        return $r14;
    }

    public static java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextElementInclusive(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r0, $r2, 1);

        return $r3;
    }

    public static java.lang.Object getLastChildElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextElementInclusive(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r0, $r2, 0);

        return $r3;
    }

    public static java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextElementInclusive(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r0, $r2, 1);

        return $r3;
    }

    public static java.lang.Object getPreviousSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r0, $r2, $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Previous element for null element is undefined");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Previous element for null document is undefined");

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextElementInclusive(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r1, $r2, 0);

        return $r3;
    }

    public static java.lang.Object getNextElementInclusive(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, r2, $r3;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

     label1:
        if r1 == null goto label4;

        if r2 != null goto label4;

        if z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r1);

     label3:
        r1 = $r3;

        r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r3);

        goto label1;

     label4:
        return r2;
    }

    public static void traverse(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, org.waveprotocol.wave.model.document.util.DocHelper$NodeAction)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object $r2, r3;
        org.waveprotocol.wave.model.document.util.DocHelper$NodeAction r0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: java.lang.Object;

        r0 := @parameter2: org.waveprotocol.wave.model.document.util.DocHelper$NodeAction;

     label1:
        if r3 == null goto label2;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocHelper$NodeAction: void apply(java.lang.Object)>(r3);

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r3);

        staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: void traverse(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.DocHelper$NodeAction)>(r1, $r2, r0);

        r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r3);

        goto label1;

     label2:
        return;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.raw.TextNodeOrganiser)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r10, $r12;
        org.waveprotocol.wave.model.document.util.Point$Tx $r1;
        int $i0;
        java.lang.Object $r4, $r5, $r7, $r8, $r9, $r11;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser r6;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r6 := @parameter2: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        if $r1 == null goto label2;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.document.raw.TextNodeOrganiser: java.lang.Object splitText(java.lang.Object,int)>($r5, $i0);

        if $r7 == null goto label1;

        $r11 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r7);

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r11, $r7);

        return $r12;

     label1:
        $r8 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r5);

        $r9 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r5);

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r8, $r9);

        return $r10;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        return $r2;
    }

    public static java.lang.Object ensureNodeBoundaryReturnNextNode(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.raw.TextNodeOrganiser)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.util.Point$Tx $r1;
        int $i0;
        java.lang.Object $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser r9;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r9 := @parameter2: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        if $r1 == null goto label2;

        $r7 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r8 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r7);

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $r10 = interfaceinvoke r9.<org.waveprotocol.wave.model.document.raw.TextNodeOrganiser: java.lang.Object splitText(java.lang.Object,int)>($r8, $i0);

        if $r10 == null goto label1;

        return $r10;

     label1:
        $r11 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r3, $r8, null, 0);

        return $r11;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r2 == null goto label3;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        return $r6;

     label3:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>(r3, $r4, null, 0);

        return $r5;
    }

    public static org.waveprotocol.wave.model.document.util.Point transparentSlice(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.DocumentContext)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r2;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r1, $r4;
        int $i0;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser $r23;
        org.waveprotocol.wave.model.document.util.Point r3, $r5, r24;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.LocalDocument $r8, $r12, $r20;
        org.waveprotocol.wave.model.document.MutableDocument $r15, $r18, $r22;
        org.waveprotocol.wave.model.document.util.Point$El $r14;
        java.lang.Object $r6, $r7, $r9, $r10, $r11, $r13, $r16, $r17, $r19, $r21;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.DocumentContext;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.indexed.LocationMapper locationMapper()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView()>();

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getFilteredLocation(org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r1, $r2, r3);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.indexed.LocationMapper locationMapper()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        r24 = $r5;

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r16 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r17 = interfaceinvoke $r15.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asText(java.lang.Object)>($r16);

        $r18 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getParentElement(java.lang.Object)>($r17);

        $r20 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>($r17);

        if $r19 != $r21 goto label1;

        return $r5;

     label1:
        $r22 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r23 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser()>();

        r24 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point$El ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.raw.TextNodeOrganiser)>($r5, $r22, $r23);

     label2:
        $r6 = virtualinvoke r24.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r6 == null goto label4;

        $r7 = virtualinvoke r24.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>($r7);

        $r10 = virtualinvoke r24.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r9 == $r10 goto label3;

        $r11 = virtualinvoke r24.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentSlice(java.lang.Object)>($r7);

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r11, $r13);

        return $r14;

     label3:
        return r24;

     label4:
        return r24;
    }

    public static int countChildren(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.raw.impl.Element)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r4;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        int i0;
        org.waveprotocol.wave.model.document.raw.impl.Element r1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Element;

        i0 = 0;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.document.raw.impl.Node) $r2;

     label1:
        if r4 == null goto label2;

        i0 = i0 + 1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r4);

        r4 = (org.waveprotocol.wave.model.document.raw.impl.Node) $r3;

        goto label1;

     label2:
        return i0;
    }

    public static java.lang.Object findElementById(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r3;
        java.lang.String r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.String,java.lang.String)>(r0, r1, "id", r2);

        return $r3;
    }

    public static java.lang.Object findElementById(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.String)>(r0, "id", r1);

        return $r2;
    }

    public static java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.Iterable $r4;
        java.lang.Object r3, $r6;
        java.lang.String r0, r1, $r7;
        boolean $z0, $z1;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "name must not be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "value must not be null");

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deepElements(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r2, r3, r3);

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>($r6, r0);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        return $r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r1, $r4;
        java.lang.String r2, r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.String,java.lang.String)>(r0, $r1, r2, r3);

        return $r4;
    }

    public static int findLocationById(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int findLocationByAttr(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.String,java.lang.String)>(r0, "id", r1);

        return $i0;
    }

    public static int findLocationByAttr(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.Object $r3;
        java.lang.String r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object findElementByAttr(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.String)>(r0, r1, r2);

        if $r3 == null goto label1;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r3);

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public static boolean isMatchingElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        java.lang.String $r3, r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.waveprotocol.wave.model.document.util.Point jumpOut(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.DocPredicate)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.document.util.Point r0, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.util.DocPredicate r2;
        java.lang.Object $r1, $r4, $r5, $r7, $r8, $r9, r10, r11;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.DocPredicate;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r7);

        r10 = $r8;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r11 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r9);

        $z3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocPredicate: boolean apply(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r8);

        if $z3 == 0 goto label3;

        return r0;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r4);

        if $r5 != null goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        r10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r11 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label3:
        if r10 == null goto label4;

        $z2 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocPredicate: boolean apply(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r10);

        if $z2 != 0 goto label4;

        r11 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r10);

        r10 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r10);

        goto label3;

     label4:
        if r10 != null goto label5;

        return null;

     label5:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if r10 != $r1 goto label6;

        $r12 = r0;

        goto label7;

     label6:
        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r10, r11);

     label7:
        return $r12;
    }

    private static java.lang.Object getOrCreateFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument, java.lang.String, org.waveprotocol.wave.model.document.util.DocHelper$Expectation)
    {
        java.lang.String $r7, r8, $r13, $r18, $r26;
        org.waveprotocol.wave.model.document.util.Point $r1;
        boolean $z0;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.RuntimeException $r9;
        java.lang.IllegalArgumentException $r14, $r22, $r27;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r20;
        java.lang.Object $r2, $r6, $r19, $r21;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r17, $r23, $r24, $r25;
        org.waveprotocol.wave.model.document.util.DocHelper$Expectation r3, $r4, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r8 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.document.util.DocHelper$Expectation;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r4 = <org.waveprotocol.wave.model.document.util.DocHelper$Expectation: org.waveprotocol.wave.model.document.util.DocHelper$Expectation PRESENT>;

        if r3 != $r4 goto label1;

        if $r2 != null goto label1;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Document has no top-level element");

        throw $r27;

     label1:
        $r5 = <org.waveprotocol.wave.model.document.util.DocHelper$Expectation: org.waveprotocol.wave.model.document.util.DocHelper$Expectation ABSENT>;

        if r3 != $r5 goto label2;

        if $r2 == null goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document already has top-level node: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label2:
        if $r2 != null goto label3;

        $r19 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r20 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r21 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>($r19, r8, $r20);

        return $r21;

     label3:
        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>($r2);

        if $r6 != null goto label4;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First node is not an element: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label4:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getTagName(java.lang.Object)>($r6);

        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document already has non-matching top-level element: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label5:
        return $r6;
    }

    public static java.lang.Object getOrCreateFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument, java.lang.String)
    {
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.DocHelper$Expectation $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.util.DocHelper$Expectation: org.waveprotocol.wave.model.document.util.DocHelper$Expectation NONE>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getOrCreateFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String,org.waveprotocol.wave.model.document.util.DocHelper$Expectation)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object expectAndGetFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument, java.lang.String)
    {
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.DocHelper$Expectation $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.util.DocHelper$Expectation: org.waveprotocol.wave.model.document.util.DocHelper$Expectation PRESENT>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getOrCreateFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String,org.waveprotocol.wave.model.document.util.DocHelper$Expectation)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object createFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument, java.lang.String)
    {
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.DocHelper$Expectation $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.util.DocHelper$Expectation: org.waveprotocol.wave.model.document.util.DocHelper$Expectation ABSENT>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getOrCreateFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String,org.waveprotocol.wave.model.document.util.DocHelper$Expectation)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object nearestCommonAncestor(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object r3, r4, r5;
        boolean $z0, $z1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        if r3 != r4 goto label1;

        return r3;

     label1:
        r5 = null;

     label2:
        if r3 != null goto label3;

        if r4 == null goto label7;

     label3:
        if r3 == null goto label5;

        $z1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>(r3);

        if $z1 == 0 goto label4;

        r5 = r3;

        goto label7;

     label4:
        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r3, r3);

        r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r3);

     label5:
        if r4 == null goto label2;

        $z0 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>(r4);

        if $z0 == 0 goto label6;

        r5 = r4;

        goto label7;

     label6:
        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r4, r4);

        r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r4);

        goto label2;

     label7:
        if r5 != null goto label8;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nearestCommonAncestor: Given nodes are not in the same document");

        throw $r2;

     label8:
        return r5;
    }

    public static boolean isAncestor(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r0, r2;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Shouldn\'t check ancestry of a null node");

     label1:
        if r2 == null goto label3;

        if r0 != r2 goto label2;

        return z0;

     label2:
        z0 = 1;

        r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.model.document.util.DocHelper$1 $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/DocHelper;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.DocHelper: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.util.DocHelper$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.DocHelper$1: void <init>()>();

        <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.DocPredicate ROOT_PREDICATE> = $r1;

        return;
    }
}
