class org.waveprotocol.wave.model.util.EvaluableOffsetList$1 extends java.lang.Object implements java.util.Iterator
{
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer;
    final org.waveprotocol.wave.model.util.EvaluableOffsetList this$0;

    void <init>(org.waveprotocol.wave.model.util.EvaluableOffsetList)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList r1, $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$800(org.waveprotocol.wave.model.util.EvaluableOffsetList)>($r2);

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$300(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r3);

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r4;

        return;
    }

    public boolean hasNext()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r2, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$800(org.waveprotocol.wave.model.util.EvaluableOffsetList)>($r1);

        if $r2 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object access$900(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$300(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r3);

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r4;

        return $r2;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 r1;

        r1 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
