public class org.apache.http.entity.InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity
{
    private static final int BUFFER_SIZE;
    private final java.io.InputStream content;
    private final long length;

    public void <init>(java.io.InputStream, long)
    {
        org.apache.http.entity.InputStreamEntity r0;
        long l0;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long,org.apache.http.entity.ContentType)>(r1, l0, null);

        return;
    }

    public void <init>(java.io.InputStream, long, org.apache.http.entity.ContentType)
    {
        org.apache.http.entity.ContentType r2;
        org.apache.http.entity.InputStreamEntity r0;
        long l0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        r2 := @parameter2: org.apache.http.entity.ContentType;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source input stream may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content> = r1;

        r0.<org.apache.http.entity.InputStreamEntity: long length> = l0;

        if r2 == null goto label2;

        $r3 = virtualinvoke r2.<org.apache.http.entity.ContentType: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.http.entity.InputStreamEntity: void setContentType(java.lang.String)>($r3);

     label2:
        return;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.InputStreamEntity r0;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        return 0;
    }

    public long getContentLength()
    {
        org.apache.http.entity.InputStreamEntity r0;
        long $l0;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $l0 = r0.<org.apache.http.entity.InputStreamEntity: long length>;

        return $l0;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $r1 = r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

        return $r1;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        byte[] r3;
        long $l0, $l3, $l6, l8;
        byte $b1, $b2;
        int $i4, $i5, $i7, $i9, $i11, $i12, $i14;
        java.io.OutputStream r0;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.entity.InputStreamEntity r1;
        java.io.InputStream r2;

        r1 := @this: org.apache.http.entity.InputStreamEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r6;

     label01:
        r2 = r1.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

     label02:
        r3 = newarray (byte)[2048];

        $l0 = r1.<org.apache.http.entity.InputStreamEntity: long length>;

        $b1 = $l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 >= 0 goto label04;

     label03:
        $i7 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r3);

        $i11 = (int) -1;

        if $i7 == $i11 goto label07;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i7);

        goto label03;

     label04:
        l8 = r1.<org.apache.http.entity.InputStreamEntity: long length>;

     label05:
        $b2 = l8 cmp 0L;

        $i12 = (int) $b2;

        if $i12 <= 0 goto label07;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, l8);

        $i4 = (int) $l3;

        $i5 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, $i4);

        $i14 = (int) -1;

        if $i5 != $i14 goto label06;

        goto label07;

     label06:
        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i5);

        $l6 = (long) $i5;

        l8 = l8 - $l6;

        goto label05;

     label07:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        goto label10;

     label08:
        $r5 := @caughtexception;

     label09:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        throw $r5;

     label10:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.InputStreamEntity r0;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        return 1;
    }

    public void consumeContent() throws java.io.IOException
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $r1 = r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.http.entity.InputStreamEntity: int BUFFER_SIZE> = 2048;

        return;
    }
}
