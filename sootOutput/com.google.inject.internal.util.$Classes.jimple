public final class com.google.inject.internal.util.$Classes extends java.lang.Object
{

    public void <init>()
    {
        com.google.inject.internal.util.$Classes r0;

        r0 := @this: com.google.inject.internal.util.$Classes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isInnerClass(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isConcrete(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static java.lang.String toString(java.lang.reflect.Member)
    {
        java.lang.AssertionError $r2;
        java.lang.String $r5, $r8, $r11, $r14, $r16, $r19, $r22, $r25;
        java.lang.reflect.Member r0;
        java.lang.Class $r1, $r4, $r10, $r18;
        java.lang.StringBuilder $r3, $r6, $r7, $r9, $r12, $r13, $r15, $r17, $r20, $r21, $r23, $r24;

        r0 := @parameter0: java.lang.reflect.Member;

        $r1 = staticinvoke <com.google.inject.internal.util.$Classes: java.lang.Class memberType(java.lang.reflect.Member)>(r0);

        if $r1 != class "Ljava/lang/reflect/Method;" goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r22 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;

     label1:
        if $r1 != class "Ljava/lang/reflect/Field;" goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        if $r1 != class "Ljava/lang/reflect/Constructor;" goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<init>()");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public static java.lang.Class memberType(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Class $r4;
        java.lang.String $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Member;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "member");

        $z0 = r0 instanceof java.lang.reflect.Field;

        if $z0 == 0 goto label1;

        return class "Ljava/lang/reflect/Field;";

     label1:
        $z1 = r0 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label2;

        return class "Ljava/lang/reflect/Method;";

     label2:
        $z2 = r0 instanceof java.lang.reflect.Constructor;

        if $z2 == 0 goto label3;

        return class "Ljava/lang/reflect/Constructor;";

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported implementation class for Member, ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }
}
