public class com.hp.hpl.jena.datatypes.xsd.AbstractDateTime extends java.lang.Object implements java.lang.Comparable
{
    protected int[] data;
    protected double fractionalSeconds;
    protected static final int CY;
    protected static final int M;
    protected static final int D;
    protected static final int h;
    protected static final int m;
    protected static final int s;
    protected static final int ms;
    protected static final int utc;
    protected static final int msscale;
    protected static final int hh;
    protected static final int mm;
    protected static final int TOTAL_SIZE;
    protected static final int COMPARABLE_SUBSET;
    public static final short LESS_THAN;
    public static final short EQUAL;
    public static final short GREATER_THAN;
    public static final short INDETERMINATE;

    public void <init>(java.lang.Object)
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0;
        int[] $r2, $r3;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (int[]) r1;

        $r3 = (int[]) $r2;

        r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data> = $r3;

        virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void extractFractionalSeconds()>();

        return;
    }

    public int compare(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)
    {
        short $s0;
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0, r1;
        int[] $r2, $r3;
        int $i1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r1 := @parameter0: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        $r3 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $r2 = r1.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $s0 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareDates(int[],int[],boolean)>($r3, $r2, 1);

        $i1 = (int) $s0;

        return $i1;
    }

    public int compareTo(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0, r1;
        int $i0, $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r1 := @parameter0: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int compare(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)>(r1);

        tableswitch($i0)
        {
            case -1: goto label2;
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label1;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        $i2 = (int) -1;

        return $i2;

     label3:
        return 1;

     label4:
        return 0;
    }

    protected void extractFractionalSeconds()
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0;
        int[] $r1, $r2, $r3;
        int $i0, i1, $i2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i0 = $r1[6];

        if $i0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        i1 = $r2[6];

        $d1 = (double) i1;

        $r3 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i2 = $r3[8];

        $d0 = (double) $i2;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        $d3 = $d1 / $d2;

        r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: double fractionalSeconds> = $d3;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r1, r2;
        int[] $r3, $r4, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        if $z0 == 0 goto label4;

        r1 = (com.hp.hpl.jena.datatypes.xsd.AbstractDateTime) r0;

        i3 = 0;

     label1:
        $r3 = r2.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label3;

        $r4 = r2.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i2 = $r4[i3];

        $r5 = r1.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i1 = $r5[i3];

        if $i2 == $i1 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        i3 = 0;

        i4 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label2;

        $i2 = i3 << 1;

        $r2 = r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int[] data>;

        $i1 = $r2[i4];

        i3 = $i2 ^ $i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    protected short compareDates(int[], int[], boolean)
    {
        short $s4, $s5, $s6, $s7, $s8;
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r4;
        int[] r0, r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i9, $i11, $i12, $i14;
        boolean z0;

        r4 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $i1 = r0[7];

        $i0 = r1[7];

        if $i1 != $i0 goto label1;

        $s8 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareOrder(int[],int[])>(r0, r1);

        return $s8;

     label1:
        r2 = newarray (int)[9];

        r3 = newarray (int)[2];

        $i2 = r0[7];

        if $i2 != 90 goto label4;

        specialinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void cloneDate(int[],int[])>(r1, r2);

        r3[0] = 14;

        r3[1] = 0;

        r2[7] = 43;

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void normalize(int[],int[])>(r2, r3);

        $s6 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareOrder(int[],int[])>(r0, r2);

        $i9 = (int) $s6;

        $i11 = (int) -1;

        if $i9 != $i11 goto label2;

        return $s6;

     label2:
        specialinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void cloneDate(int[],int[])>(r1, r2);

        r3[0] = 14;

        r3[1] = 0;

        r2[7] = 45;

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void normalize(int[],int[])>(r2, r3);

        $s7 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareOrder(int[],int[])>(r0, r2);

        if $s7 != 1 goto label3;

        return $s7;

     label3:
        return 2;

     label4:
        $i3 = r1[7];

        if $i3 != 90 goto label7;

        specialinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void cloneDate(int[],int[])>(r0, r2);

        r3[0] = 14;

        r3[1] = 0;

        r2[7] = 45;

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void normalize(int[],int[])>(r2, r3);

        $s4 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareOrder(int[],int[])>(r2, r1);

        $i12 = (int) $s4;

        $i14 = (int) -1;

        if $i12 != $i14 goto label5;

        return $s4;

     label5:
        specialinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void cloneDate(int[],int[])>(r0, r2);

        r3[0] = 14;

        r3[1] = 0;

        r2[7] = 43;

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void normalize(int[],int[])>(r2, r3);

        $s5 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short compareOrder(int[],int[])>(r2, r1);

        if $s5 != 1 goto label6;

        return $s5;

     label6:
        return 2;

     label7:
        return 2;
    }

    protected short compareOrder(int[], int[])
    {
        short $s15, $s17;
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r2;
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;

        r2 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i13 = 0;

     label1:
        if i13 >= 6 goto label4;

        $i10 = r0[i13];

        $i9 = r1[i13];

        if $i10 >= $i9 goto label2;

        $s15 = (short) -1;

        return $s15;

     label2:
        $i12 = r0[i13];

        $i11 = r1[i13];

        if $i12 <= $i11 goto label3;

        return 1;

     label3:
        i13 = i13 + 1;

        goto label1;

     label4:
        $i1 = r0[8];

        $i0 = r1[8];

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i4 = r0[6];

        $i3 = r0[8];

        $i5 = specialinvoke r2.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int scale(int,int,int)>($i4, $i3, $i2);

        $i7 = r1[6];

        $i6 = r1[8];

        $i8 = specialinvoke r2.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int scale(int,int,int)>($i7, $i6, $i2);

        if $i5 >= $i8 goto label5;

        $s17 = (short) -1;

        return $s17;

     label5:
        if $i5 <= $i8 goto label6;

        return 1;

     label6:
        return 0;
    }

    private int scale(int, int, int)
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0;
        int i0, i1, i2, i3;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        i2 = i2 * 10;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public static void normalize(int[], int[])
    {
        byte b31, b36, b37, b38;
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        b31 = 1;

        b38 = 1;

        b37 = 1;

        $i0 = r0[7];

        if $i0 != 43 goto label1;

        b31 = -1;

        b38 = -1;

        b37 = -1;

     label1:
        $i3 = r0[4];

        $i1 = r1[1];

        $i2 = b38 * $i1;

        $i29 = $i3 + $i2;

        $i4 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int fQuotient(int,int)>($i29, 60);

        $i5 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int mod(int,int,int)>($i29, 60, $i4);

        r0[4] = $i5;

        $i8 = r0[3];

        $i6 = r1[0];

        $i7 = b37 * $i6;

        $i9 = $i8 + $i7;

        $i30 = $i9 + $i4;

        $i10 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int fQuotient(int,int)>($i30, 24);

        $i11 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int mod(int,int,int)>($i30, 24, $i10);

        r0[3] = $i11;

        $i12 = r0[2];

        $i13 = $i12 + $i10;

        r0[2] = $i13;

     label2:
        $i32 = r0[0];

        $i33 = r0[1];

        $i34 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int maxDayInMonthFor(int,int)>($i32, $i33);

        $i35 = r0[2];

        if $i35 >= 1 goto label3;

        $i25 = r0[2];

        $i24 = r0[0];

        $i22 = r0[1];

        $i23 = $i22 - 1;

        $i26 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int maxDayInMonthFor(int,int)>($i24, $i23);

        $i27 = $i25 + $i26;

        r0[2] = $i27;

        b36 = -1;

        goto label4;

     label3:
        $i14 = r0[2];

        if $i14 <= $i34 goto label5;

        $i15 = r0[2];

        $i16 = $i15 - $i34;

        r0[2] = $i16;

        b36 = 1;

     label4:
        $i17 = r0[1];

        $i28 = $i17 + b36;

        $i18 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int modulo(int,int,int)>($i28, 1, 13);

        r0[1] = $i18;

        $i19 = r0[0];

        $i20 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int fQuotient(int,int,int)>($i28, 1, 13);

        $i21 = $i19 + $i20;

        r0[0] = $i21;

        goto label2;

     label5:
        r0[7] = 90;

        return;
    }

    protected void resetDateObj(int[])
    {
        int i0;
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r1;
        int[] r0;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r0 := @parameter0: int[];

        i0 = 0;

     label1:
        if i0 >= 9 goto label2;

        r0[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    protected static int maxDayInMonthFor(int, int)
    {
        int i0, i1;
        boolean $z0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 == 4 goto label1;

        if i0 == 6 goto label1;

        if i0 == 9 goto label1;

        if i0 != 11 goto label2;

     label1:
        return 30;

     label2:
        if i0 != 2 goto label4;

        $z0 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: boolean isLeapYear(int)>(i1);

        if $z0 == 0 goto label3;

        return 29;

     label3:
        return 28;

     label4:
        return 31;
    }

    private static boolean isLeapYear(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 % 4;

        if $i1 != 0 goto label2;

        $i2 = i0 % 100;

        if $i2 != 0 goto label1;

        $i3 = i0 % 400;

        if $i3 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected static int mod(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i1 * i2;

        $i4 = i0 - $i3;

        return $i4;
    }

    protected static int fQuotient(int, int)
    {
        int i0, i1, $i2;
        float $f0, $f1, $f2;
        double $d0, $d1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i2 = (int) $d1;

        return $i2;
    }

    protected static int modulo(int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 = i0 - i1;

        i4 = i3 - i1;

        $i5 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int fQuotient(int,int)>(i2, i4);

        $i6 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int mod(int,int,int)>(i2, i4, $i5);

        $i7 = $i6 + i1;

        return $i7;
    }

    protected static int fQuotient(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = i0 - i1;

        $i3 = i2 - i1;

        $i5 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int fQuotient(int,int)>($i4, $i3);

        return $i5;
    }

    private void cloneDate(int[], int[])
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r2;
        int[] r0, r1;

        r2 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, 9);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.hp.hpl.jena.datatypes.xsd.AbstractDateTime r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.AbstractDateTime;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.datatypes.xsd.AbstractDateTime) r1;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int compareTo(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short INDETERMINATE> = 2;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short GREATER_THAN> = 1;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short EQUAL> = 0;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: short LESS_THAN> = -1;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int COMPARABLE_SUBSET> = 6;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int TOTAL_SIZE> = 9;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int mm> = 1;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int hh> = 0;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int msscale> = 8;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int utc> = 7;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int ms> = 6;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int s> = 5;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int m> = 4;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int h> = 3;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int D> = 2;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int M> = 1;

        <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: int CY> = 0;

        return;
    }
}
