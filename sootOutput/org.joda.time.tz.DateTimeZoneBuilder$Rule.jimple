final class org.joda.time.tz.DateTimeZoneBuilder$Rule extends java.lang.Object
{
    final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence;
    final int iFromYear;
    final int iToYear;

    void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int i0, i1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> = r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> = i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> = i1;

        return;
    }

    public int getFromYear()
    {
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        return $i0;
    }

    public int getToYear()
    {
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        return $i0;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r2;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>();

        return $r2;
    }

    public java.lang.String getNameKey()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        java.lang.String $r2;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        return $r2;
    }

    public int getSaveMillis()
    {
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        return $i0;
    }

    public long next(long, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r3;
        long l3, $l5, $l6, $l8, $l10, $l11, $l15, $l16, l17, l19, l20;
        byte $b4, $b9;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r2;
        int i0, i1, i2, $i7, $i12, $i13, $i14, i18, $i21;
        org.joda.time.DateTimeField $r1, $r4, $r5;
        org.joda.time.chrono.ISOChronology $r0;

        r2 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        l3 := @parameter0: long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        i2 = i0 + i1;

        l17 = l3;

        $b4 = l3 cmp -9223372036854775808L;

        if $b4 != 0 goto label1;

        i18 = -2147483648;

        goto label2;

     label1:
        $r1 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l5 = (long) i2;

        $l6 = l3 + $l5;

        i18 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l6);

     label2:
        $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        if i18 >= $i7 goto label3;

        $r5 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i14 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        $l15 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i14);

        $l16 = (long) i2;

        l19 = $l15 - $l16;

        l17 = l19 - 1L;

     label3:
        $r3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $l8 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l17, i0, i1);

        l20 = $l8;

        $b9 = $l8 cmp l3;

        $i21 = (int) $b9;

        if $i21 <= 0 goto label4;

        $r4 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l10 = (long) i2;

        $l11 = $l8 + $l10;

        $i12 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l11);

        $i13 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        if $i12 <= $i13 goto label4;

        l20 = l3;

     label4:
        return l20;
    }
}
