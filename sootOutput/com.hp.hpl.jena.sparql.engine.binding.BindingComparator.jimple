public class com.hp.hpl.jena.sparql.engine.binding.BindingComparator extends java.lang.Object implements java.util.Comparator
{
    private static java.util.Comparator varComparator;
    private java.util.List conditions;
    private com.hp.hpl.jena.sparql.function.FunctionEnv env;

    public void <init>(java.util.List, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingComparator;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.List conditions> = r1;

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: com.hp.hpl.jena.sparql.function.FunctionEnv env> = r2;

        return;
    }

    public void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.function.FunctionEnvBase $r2;
        java.util.List r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingComparator;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.List conditions> = r1;

        $r2 = new com.hp.hpl.jena.sparql.function.FunctionEnvBase;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.function.FunctionEnvBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: com.hp.hpl.jena.sparql.function.FunctionEnv env> = $r2;

        return;
    }

    public java.util.List getConditions()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingComparator;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.List conditions>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public int compare(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r17, r18;
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator r0;
        com.hp.hpl.jena.sparql.expr.Expr $r7, $r9, $r19;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r11, $r14;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.query.QueryExecException $r10;
        java.lang.String $r12, $r15;
        boolean $z0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.query.SortCondition r6;
        com.hp.hpl.jena.sparql.expr.VariableNotBoundException $r13, $r16;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3, r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.function.FunctionEnv $r8, $r20;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingComparator;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.List conditions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.query.SortCondition) $r5;

        $r7 = r6.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr expression>;

        if $r7 != null goto label02;

        $r10 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r10.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("Broken sort condition");

        throw $r10;

     label02:
        r17 = null;

        r18 = null;

     label03:
        $r9 = r6.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr expression>;

        $r8 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: com.hp.hpl.jena.sparql.function.FunctionEnv env>;

        r17 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r3, $r8);

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        goto label07;

     label06:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.sparql.expr.ExprEvalException: java.lang.String getMessage()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r15);

     label07:
        $r19 = r6.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr expression>;

        $r20 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: com.hp.hpl.jena.sparql.function.FunctionEnv env>;

        r18 = interfaceinvoke $r19.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r4, $r20);

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        goto label11;

     label10:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: java.lang.String getMessage()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r12);

     label11:
        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node toNode(com.hp.hpl.jena.sparql.expr.NodeValue)>(r17);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node toNode(com.hp.hpl.jena.sparql.expr.NodeValue)>(r18);

        $i1 = r6.<com.hp.hpl.jena.query.SortCondition: int direction>;

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingComparator: int compareNodes(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,int)>(r17, r18, $i1);

        if $i2 == 0 goto label12;

        return $i2;

     label12:
        goto label01;

     label13:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingComparator: int compareBindingsSyntactic(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r3, r4);

        return $i0;

        catch com.hp.hpl.jena.sparql.expr.VariableNotBoundException from label03 to label04 with label05;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label03 to label04 with label06;
        catch com.hp.hpl.jena.sparql.expr.VariableNotBoundException from label07 to label08 with label09;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label07 to label08 with label10;
    }

    private static int compareNodes(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, int)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        int $i0, i1, i2, $i4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        i1 := @parameter2: int;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingComparator: int compareNodesRaw(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        i2 = $i0;

        $i4 = (int) -1;

        if i1 != $i4 goto label1;

        i2 = neg $i0;

     label1:
        return i2;
    }

    public static int compareNodesRaw(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        byte $b1;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;

     label3:
        if r1 != null goto label4;

        return 1;

     label4:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: int compareAlways(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        return $i0;
    }

    public static int compareBindingsSyntactic(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.lang.Object[] $r5;
        com.hp.hpl.jena.graph.Node $r8, $r9;
        java.util.ArrayList $r0;
        int $i0, i1, $i2, i3, i4;
        com.hp.hpl.jena.sparql.core.Var[] r12, r13;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r4;
        com.hp.hpl.jena.sparql.core.Var r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1, r3;
        java.lang.Object $r10, $r11;
        java.util.Comparator $r6;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        i3 = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label3;

     label4:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r12 = newarray (com.hp.hpl.jena.sparql.core.Var)[$i0];

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r12);

        r13 = (com.hp.hpl.jena.sparql.core.Var[]) $r5;

        $r6 = <com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.Comparator varComparator>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r13, $r6);

        i1 = lengthof r13;

        i4 = 0;

     label5:
        if i4 >= i1 goto label7;

        r7 = r13[i4];

        $r8 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r7);

        $r9 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r7);

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareRDFTerms(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r9);

        i3 = $i2;

        if $i2 == 0 goto label6;

        return $i2;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        return i3;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.sparql.engine.binding.Binding) r1;

        $r3 = (com.hp.hpl.jena.sparql.engine.binding.Binding) r2;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator: int compare(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingComparator$1 $r0;

        $r0 = new com.hp.hpl.jena.sparql.engine.binding.BindingComparator$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingComparator$1: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.binding.BindingComparator: java.util.Comparator varComparator> = $r0;

        return;
    }
}
