public abstract class org.apache.log4j.lf5.util.StreamUtils extends java.lang.Object
{
    public static final int DEFAULT_BUFFER_SIZE;

    public void <init>()
    {
        org.apache.log4j.lf5.util.StreamUtils r0;

        r0 := @this: org.apache.log4j.lf5.util.StreamUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, 2048);

        return;
    }

    public static void copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int i0, i1, $i3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

     label1:
        $i3 = (int) -1;

        if i1 == $i3 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i1);

        i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        goto label1;

     label2:
        virtualinvoke r2.<java.io.OutputStream: void flush()>();

        return;
    }

    public static void copyThenClose(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        virtualinvoke r0.<java.io.InputStream: void close()>();

        virtualinvoke r1.<java.io.OutputStream: void close()>();

        return;
    }

    public static byte[] getBytes(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.lf5.util.StreamUtils: int DEFAULT_BUFFER_SIZE> = 2048;

        return;
    }
}
