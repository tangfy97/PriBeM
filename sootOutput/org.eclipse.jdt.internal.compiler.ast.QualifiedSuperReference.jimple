public class org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference extends org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference
{

    public void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference, int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r1;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,int)>(r1, i0, i1);

        return;
    }

    public boolean isSuper()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        return 1;
    }

    public boolean isThis()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        return 0;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r1, $r3, $r4;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.ast.TypeReference qualification>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".super");

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r2, $r3, $r4, $r5;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6, $r7;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: int bits>;

        $i1 = $i0 & 534773760;

        if $i1 == 0 goto label1;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidParenthesizedExpression(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        return null;

     label1:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding currentCompatibleType>;

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding currentCompatibleType>;

        $i2 = $r3.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: int id>;

        if $i2 != 1 goto label3;

        $r6 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotUseSuperInJavaLangObject(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        return null;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding currentCompatibleType>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r5;

        return $r5;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.ast.TypeReference qualification>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: org.eclipse.jdt.internal.compiler.ast.TypeReference qualification>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
