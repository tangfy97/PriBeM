class org.apache.lucene.util.packed.Packed32 extends org.apache.lucene.util.packed.PackedInts$ReaderImpl implements org.apache.lucene.util.packed.PackedInts$Mutable
{
    static final int BLOCK_SIZE;
    static final int BLOCK_BITS;
    static final int MOD_MASK;
    private static final int ENTRY_SIZE;
    private static final int FAC_BITPOS;
    private static final int[][] SHIFTS;
    private static final int[][] MASKS;
    private static final int[][] WRITE_MASKS;
    private int[] blocks;
    private int maxPos;
    private int[] shifts;
    private int[] readMasks;
    private int[] writeMasks;

    public void <init>(int, int)
    {
        long $l2, $l3, $l4, $l5, $l6;
        int[] $r1;
        int i0, i1, $i7;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l3 = (long) i0;

        $l2 = (long) i1;

        $l4 = $l3 * $l2;

        $l5 = $l4 / 32L;

        $l6 = $l5 + 2L;

        $i7 = (int) $l6;

        $r1 = newarray (int)[$i7];

        specialinvoke r0.<org.apache.lucene.util.packed.Packed32: void <init>(int[],int,int)>($r1, i0, i1);

        return;
    }

    public void <init>(org.apache.lucene.store.DataInput, int, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r2;
        int[] $r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        r2 := @parameter0: org.apache.lucene.store.DataInput;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: void <init>(int,int)>(i0, i1);

        $i2 = staticinvoke <org.apache.lucene.util.packed.Packed32: int size(int,int)>(i1, i0);

        $i3 = $i2 + 1;

        $r1 = newarray (int)[$i3];

        r0.<org.apache.lucene.util.packed.Packed32: int[] blocks> = $r1;

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $r3 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i5 = virtualinvoke r2.<org.apache.lucene.store.DataInput: int readInt()>();

        $r3[i6] = $i5;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i4 = $i2 % 2;

        if $i4 != 1 goto label3;

        virtualinvoke r2.<org.apache.lucene.store.DataInput: int readInt()>();

     label3:
        specialinvoke r0.<org.apache.lucene.util.packed.Packed32: void updateCached()>();

        return;
    }

    private static int size(int, int)
    {
        long $l2, $l3, l4, $l5, $l7, $l8, $l9;
        byte $b6;
        int i0, i1, $i10;
        boolean $z0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $l3 = (long) i0;

        $l2 = (long) i1;

        l4 = $l3 * $l2;

        $l8 = l4 / 32L;

        $l5 = l4 % 32L;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = 1;

     label2:
        $l7 = (long) $z0;

        $l9 = $l8 + $l7;

        $i10 = (int) $l9;

        return $i10;
    }

    public void <init>(int[], int, int)
    {
        java.lang.Object[] $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.Integer $r4;
        int[] r1;
        int i0, i1;
        java.lang.String $r5;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: void <init>(int,int)>(i0, i1);

        if i1 <= 31 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("This array only supports values of 31 bits or less. The required number of bits was %d. The Packed64 implementation allows values with more than 31 bits", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r0.<org.apache.lucene.util.packed.Packed32: int[] blocks> = r1;

        specialinvoke r0.<org.apache.lucene.util.packed.Packed32: void updateCached()>();

        return;
    }

    private void updateCached()
    {
        int[][] $r1, $r4, $r6;
        long $l2, $l4, $l5, $l6, $l7;
        int[] $r2, $r3, $r5, $r7;
        int $i0, $i1, $i3, $i8, $i9, $i10;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        $r1 = <org.apache.lucene.util.packed.Packed32: int[][] MASKS>;

        $i0 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $r2 = $r1[$i0];

        r0.<org.apache.lucene.util.packed.Packed32: int[] readMasks> = $r2;

        $r3 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i1 = lengthof $r3;

        $l2 = (long) $i1;

        $l5 = $l2 * 32L;

        $i3 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $l4 = (long) $i3;

        $l6 = $l5 / $l4;

        $l7 = $l6 - 2L;

        $i8 = (int) $l7;

        r0.<org.apache.lucene.util.packed.Packed32: int maxPos> = $i8;

        $r4 = <org.apache.lucene.util.packed.Packed32: int[][] SHIFTS>;

        $i9 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $r5 = $r4[$i9];

        r0.<org.apache.lucene.util.packed.Packed32: int[] shifts> = $r5;

        $r6 = <org.apache.lucene.util.packed.Packed32: int[][] WRITE_MASKS>;

        $i10 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $r7 = $r6[$i10];

        r0.<org.apache.lucene.util.packed.Packed32: int[] writeMasks> = $r7;

        return;
    }

    public long get(int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        long $l2, $l3, l4, $l5, $l7, $l24;
        int i0, $i1, i6, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        i0 := @parameter0: int;

        $l3 = (long) i0;

        $i1 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $l2 = (long) $i1;

        l4 = $l3 * $l2;

        $l5 = l4 >>> 5;

        i6 = (int) $l5;

        $l7 = l4 & 31L;

        i8 = (int) $l7;

        i9 = i8 * 3;

        $r1 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i11 = $r1[i6];

        $r2 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i10 = $r2[i9];

        $i14 = $i11 << $i10;

        $r3 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i12 = i9 + 1;

        $i13 = $r3[$i12];

        $i22 = $i14 >>> $i13;

        $r4 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i15 = i6 + 1;

        $i18 = $r4[$i15];

        $r5 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i16 = i9 + 2;

        $i17 = $r5[$i16];

        $i20 = $i18 >>> $i17;

        $r6 = r0.<org.apache.lucene.util.packed.Packed32: int[] readMasks>;

        $i19 = $r6[i8];

        $i21 = $i20 & $i19;

        $i23 = $i22 | $i21;

        $l24 = (long) $i23;

        return $l24;
    }

    public void set(int, long)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        long l0, $l4, $l5, l6, $l7, $l9;
        int i1, i2, $i3, i8, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        i2 := @parameter0: int;

        l0 := @parameter1: long;

        i1 = (int) l0;

        $l5 = (long) i2;

        $i3 = r0.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $l4 = (long) $i3;

        l6 = $l5 * $l4;

        $l7 = l6 >>> 5;

        i8 = (int) $l7;

        $l9 = l6 & 31L;

        i10 = (int) $l9;

        i11 = i10 * 3;

        $r5 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $r1 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i13 = $r1[i8];

        $r2 = r0.<org.apache.lucene.util.packed.Packed32: int[] writeMasks>;

        $i12 = $r2[i11];

        $i19 = $i13 & $i12;

        $r3 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i14 = i11 + 1;

        $i15 = $r3[$i14];

        $i17 = i1 << $i15;

        $r4 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i16 = $r4[i11];

        $i18 = $i17 >>> $i16;

        $i20 = $i19 | $i18;

        $r5[i8] = $i20;

        $r10 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i33 = i8 + 1;

        $r6 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i21 = i8 + 1;

        $i24 = $r6[$i21];

        $r7 = r0.<org.apache.lucene.util.packed.Packed32: int[] writeMasks>;

        $i22 = i11 + 1;

        $i23 = $r7[$i22];

        $i31 = $i24 & $i23;

        $r8 = r0.<org.apache.lucene.util.packed.Packed32: int[] shifts>;

        $i25 = i11 + 2;

        $i26 = $r8[$i25];

        $i29 = i1 << $i26;

        $r9 = r0.<org.apache.lucene.util.packed.Packed32: int[] writeMasks>;

        $i27 = i11 + 2;

        $i28 = $r9[$i27];

        $i30 = $i29 & $i28;

        $i32 = $i31 | $i30;

        $r10[$i33] = $i32;

        return;
    }

    public void clear()
    {
        org.apache.lucene.util.packed.Packed32 r0;
        int[] $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        $r1 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

        return;
    }

    public java.lang.String toString()
    {
        int[] $r7;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String $r10;
        org.apache.lucene.util.packed.Packed32 r2;

        r2 := @this: org.apache.lucene.util.packed.Packed32;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Packed32(bitsPerValue=");

        $i0 = r2.<org.apache.lucene.util.packed.Packed32: int bitsPerValue>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxPos=");

        $i1 = r2.<org.apache.lucene.util.packed.Packed32: int maxPos>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", elements.length=");

        $r7 = r2.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i2 = lengthof $r7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public long ramBytesUsed()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        long $l4;
        org.apache.lucene.util.packed.Packed32 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed32;

        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $r1 = r0.<org.apache.lucene.util.packed.Packed32: int[] blocks>;

        $i0 = lengthof $r1;

        $i1 = $i0 * 4;

        $i3 = $i2 + $i1;

        $l4 = (long) $i3;

        return $l4;
    }

    static void <clinit>()
    {
        int[][] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        byte $b35;
        int[] $r7, $r9, r10, r11, r12;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, i34, $i37, $i39, $i41, $i43, $i45, $i47, $i49;

        <org.apache.lucene.util.packed.Packed32: int FAC_BITPOS> = 3;

        <org.apache.lucene.util.packed.Packed32: int ENTRY_SIZE> = 33;

        <org.apache.lucene.util.packed.Packed32: int MOD_MASK> = 31;

        <org.apache.lucene.util.packed.Packed32: int BLOCK_BITS> = 5;

        <org.apache.lucene.util.packed.Packed32: int BLOCK_SIZE> = 32;

        $r0 = newmultiarray (int)[33][99];

        <org.apache.lucene.util.packed.Packed32: int[][] SHIFTS> = $r0;

        $r1 = newmultiarray (int)[33][33];

        <org.apache.lucene.util.packed.Packed32: int[][] MASKS> = $r1;

        i28 = 1;

     label01:
        if i28 > 32 goto label06;

        i29 = 0;

     label02:
        if i29 >= 32 goto label05;

        $r5 = <org.apache.lucene.util.packed.Packed32: int[][] SHIFTS>;

        r10 = $r5[i28];

        i30 = i29 * 3;

        r10[i30] = i29;

        $i20 = i30 + 1;

        $i19 = 32 - i28;

        r10[$i20] = $i19;

        $i21 = 32 - i28;

        if i29 > $i21 goto label03;

        $i27 = i30 + 2;

        r10[$i27] = 0;

        $r8 = <org.apache.lucene.util.packed.Packed32: int[][] MASKS>;

        $r9 = $r8[i28];

        $r9[i29] = 0;

        goto label04;

     label03:
        $i22 = 32 - i29;

        i31 = i28 - $i22;

        $i24 = i30 + 2;

        $i23 = 32 - i31;

        r10[$i24] = $i23;

        $r6 = <org.apache.lucene.util.packed.Packed32: int[][] MASKS>;

        $r7 = $r6[i28];

        $i37 = (int) -1;

        $i25 = $i37 << i31;

        $i39 = (int) -1;

        $i26 = $i25 ^ $i39;

        $r7[i29] = $i26;

     label04:
        i29 = i29 + 1;

        goto label02;

     label05:
        i28 = i28 + 1;

        goto label01;

     label06:
        $r2 = newmultiarray (int)[33][99];

        <org.apache.lucene.util.packed.Packed32: int[][] WRITE_MASKS> = $r2;

        i32 = 1;

     label07:
        if i32 > 32 goto label14;

        $i41 = (int) -1;

        $i0 = $i41 << i32;

        $i43 = (int) -1;

        i33 = $i0 ^ $i43;

        $r3 = <org.apache.lucene.util.packed.Packed32: int[][] SHIFTS>;

        r11 = $r3[i32];

        $r4 = <org.apache.lucene.util.packed.Packed32: int[][] WRITE_MASKS>;

        r12 = $r4[i32];

        i34 = 0;

     label08:
        if i34 >= 32 goto label13;

        i1 = i34 * 3;

        $i2 = i1 + 1;

        $i3 = r11[$i2];

        $i5 = i33 << $i3;

        $i4 = r11[i1];

        $i6 = $i5 >>> $i4;

        $i45 = (int) -1;

        $i7 = $i6 ^ $i45;

        r12[i1] = $i7;

        $i8 = 32 - i32;

        if i34 > $i8 goto label09;

        $i17 = i1 + 1;

        $i47 = (int) -1;

        r12[$i17] = $i47;

        $i18 = i1 + 2;

        r12[$i18] = 0;

        goto label12;

     label09:
        $i13 = i1 + 1;

        $i9 = i1 + 2;

        $i10 = r11[$i9];

        $i11 = i33 << $i10;

        $i49 = (int) -1;

        $i12 = $i11 ^ $i49;

        r12[$i13] = $i12;

        $i16 = i1 + 2;

        $i14 = i1 + 2;

        $i15 = r11[$i14];

        if $i15 != 0 goto label10;

        $b35 = 0;

        goto label11;

     label10:
        $b35 = -1;

     label11:
        r12[$i16] = $b35;

     label12:
        i34 = i34 + 1;

        goto label08;

     label13:
        i32 = i32 + 1;

        goto label07;

     label14:
        return;
    }
}
