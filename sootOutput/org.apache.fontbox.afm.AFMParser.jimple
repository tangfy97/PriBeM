public class org.apache.fontbox.afm.AFMParser extends java.lang.Object
{
    public static final java.lang.String COMMENT;
    public static final java.lang.String START_FONT_METRICS;
    public static final java.lang.String END_FONT_METRICS;
    public static final java.lang.String FONT_NAME;
    public static final java.lang.String FULL_NAME;
    public static final java.lang.String FAMILY_NAME;
    public static final java.lang.String WEIGHT;
    public static final java.lang.String FONT_BBOX;
    public static final java.lang.String VERSION;
    public static final java.lang.String NOTICE;
    public static final java.lang.String ENCODING_SCHEME;
    public static final java.lang.String MAPPING_SCHEME;
    public static final java.lang.String ESC_CHAR;
    public static final java.lang.String CHARACTER_SET;
    public static final java.lang.String CHARACTERS;
    public static final java.lang.String IS_BASE_FONT;
    public static final java.lang.String V_VECTOR;
    public static final java.lang.String IS_FIXED_V;
    public static final java.lang.String CAP_HEIGHT;
    public static final java.lang.String X_HEIGHT;
    public static final java.lang.String ASCENDER;
    public static final java.lang.String DESCENDER;
    public static final java.lang.String UNDERLINE_POSITION;
    public static final java.lang.String UNDERLINE_THICKNESS;
    public static final java.lang.String ITALIC_ANGLE;
    public static final java.lang.String CHAR_WIDTH;
    public static final java.lang.String IS_FIXED_PITCH;
    public static final java.lang.String START_CHAR_METRICS;
    public static final java.lang.String END_CHAR_METRICS;
    public static final java.lang.String CHARMETRICS_C;
    public static final java.lang.String CHARMETRICS_CH;
    public static final java.lang.String CHARMETRICS_WX;
    public static final java.lang.String CHARMETRICS_W0X;
    public static final java.lang.String CHARMETRICS_W1X;
    public static final java.lang.String CHARMETRICS_WY;
    public static final java.lang.String CHARMETRICS_W0Y;
    public static final java.lang.String CHARMETRICS_W1Y;
    public static final java.lang.String CHARMETRICS_W;
    public static final java.lang.String CHARMETRICS_W0;
    public static final java.lang.String CHARMETRICS_W1;
    public static final java.lang.String CHARMETRICS_VV;
    public static final java.lang.String CHARMETRICS_N;
    public static final java.lang.String CHARMETRICS_B;
    public static final java.lang.String CHARMETRICS_L;
    public static final java.lang.String STD_HW;
    public static final java.lang.String STD_VW;
    public static final java.lang.String START_TRACK_KERN;
    public static final java.lang.String END_TRACK_KERN;
    public static final java.lang.String START_KERN_DATA;
    public static final java.lang.String END_KERN_DATA;
    public static final java.lang.String START_KERN_PAIRS;
    public static final java.lang.String END_KERN_PAIRS;
    public static final java.lang.String START_KERN_PAIRS0;
    public static final java.lang.String START_KERN_PAIRS1;
    public static final java.lang.String START_COMPOSITES;
    public static final java.lang.String END_COMPOSITES;
    public static final java.lang.String CC;
    public static final java.lang.String PCC;
    public static final java.lang.String KERN_PAIR_KP;
    public static final java.lang.String KERN_PAIR_KPH;
    public static final java.lang.String KERN_PAIR_KPX;
    public static final java.lang.String KERN_PAIR_KPY;
    private static final int BITS_IN_HEX;
    private java.io.InputStream input;
    private org.apache.fontbox.afm.FontMetric result;

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        long $l1, $l2, $l3;
        java.lang.String[] r17;
        int $i0, i4;
        org.apache.fontbox.afm.AFMParser $r7;
        java.lang.String $r3, $r4, $r12, $r16;
        boolean $z0;
        java.io.PrintStream $r9;
        java.io.FileInputStream $r5;
        java.io.File $r0, $r2, $r6, $r11;
        java.lang.StringBuilder $r8, $r10, $r13, $r14, $r15;
        java.io.File[] $r1;

        r17 := @parameter0: java.lang.String[];

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("Resources/afm");

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label3;

        $r2 = $r1[i4];

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".AFM");

        if $z0 == 0 goto label2;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = new java.io.FileInputStream;

        $r6 = $r1[i4];

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r6);

        $r7 = new org.apache.fontbox.afm.AFMParser;

        specialinvoke $r7.<org.apache.fontbox.afm.AFMParser: void <init>(java.io.InputStream)>($r5);

        virtualinvoke $r7.<org.apache.fontbox.afm.AFMParser: void parse()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing:");

        $r11 = $r1[i4];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getPath()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l3 = $l2 - $l1;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    public void <init>(java.io.InputStream)
    {
        org.apache.fontbox.afm.AFMParser r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input> = r1;

        return;
    }

    public void parse() throws java.io.IOException
    {
        org.apache.fontbox.afm.AFMParser r0;
        org.apache.fontbox.afm.FontMetric $r1;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        $r1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric parseFontMetric()>();

        r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric result> = $r1;

        return;
    }

    public org.apache.fontbox.afm.FontMetric getResult()
    {
        org.apache.fontbox.afm.AFMParser r0;
        org.apache.fontbox.afm.FontMetric $r1;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        $r1 = r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric result>;

        return $r1;
    }

    private org.apache.fontbox.afm.FontMetric parseFontMetric() throws java.io.IOException
    {
        org.apache.fontbox.afm.FontMetric $r0;
        java.lang.StringBuilder $r35, $r36, $r37, $r38, $r42, $r43, $r44, $r45, $r50, $r51, $r52, $r53, $r67, $r68, $r69, $r70;
        org.apache.fontbox.util.BoundingBox $r61;
        float[] r74, r75;
        org.apache.fontbox.afm.AFMParser r1;
        java.io.IOException $r34, $r41, $r49, $r66;
        org.apache.fontbox.afm.Composite $r47;
        org.apache.fontbox.afm.CharMetric $r55;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r39, $r40, $r46, $r48, $r54, $r56, $r57, $r58, $r59, $r60, $r62, $r63, $r64, $r65, $r71, $r72, $r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new org.apache.fontbox.afm.FontMetric;

        specialinvoke $r0.<org.apache.fontbox.afm.FontMetric: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r3 = "StartFontMetrics";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label01;

        $r66 = new java.io.IOException;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: The AFM file should start with StartFontMetrics and not \'");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<java.io.IOException: void <init>(java.lang.String)>($r71);

        throw $r66;

     label01:
        $f0 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setAFMVersion(float)>($f0);

     label02:
        $r72 = "EndFontMetrics";

        $r73 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z36 = virtualinvoke $r72.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z36 != 0 goto label39;

        $r4 = "FontName";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z1 == 0 goto label03;

        $r65 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFontName(java.lang.String)>($r65);

        goto label02;

     label03:
        $r5 = "FullName";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z2 == 0 goto label04;

        $r64 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFullName(java.lang.String)>($r64);

        goto label02;

     label04:
        $r6 = "FamilyName";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z3 == 0 goto label05;

        $r63 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFamilyName(java.lang.String)>($r63);

        goto label02;

     label05:
        $r7 = "Weight";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z4 == 0 goto label06;

        $r62 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setWeight(java.lang.String)>($r62);

        goto label02;

     label06:
        $r8 = "FontBBox";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z5 == 0 goto label07;

        $r61 = new org.apache.fontbox.util.BoundingBox;

        specialinvoke $r61.<org.apache.fontbox.util.BoundingBox: void <init>()>();

        $f14 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r61.<org.apache.fontbox.util.BoundingBox: void setLowerLeftX(float)>($f14);

        $f15 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r61.<org.apache.fontbox.util.BoundingBox: void setLowerLeftY(float)>($f15);

        $f16 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r61.<org.apache.fontbox.util.BoundingBox: void setUpperRightX(float)>($f16);

        $f17 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r61.<org.apache.fontbox.util.BoundingBox: void setUpperRightY(float)>($f17);

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFontBBox(org.apache.fontbox.util.BoundingBox)>($r61);

        goto label02;

     label07:
        $r9 = "Version";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z6 == 0 goto label08;

        $r60 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFontVersion(java.lang.String)>($r60);

        goto label02;

     label08:
        $r10 = "Notice";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z7 == 0 goto label09;

        $r59 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setNotice(java.lang.String)>($r59);

        goto label02;

     label09:
        $r11 = "EncodingScheme";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z8 == 0 goto label10;

        $r58 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setEncodingScheme(java.lang.String)>($r58);

        goto label02;

     label10:
        $r12 = "MappingScheme";

        $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z9 == 0 goto label11;

        $i4 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setMappingScheme(int)>($i4);

        goto label02;

     label11:
        $r13 = "EscChar";

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z10 == 0 goto label12;

        $i3 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setEscChar(int)>($i3);

        goto label02;

     label12:
        $r14 = "CharacterSet";

        $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z11 == 0 goto label13;

        $r57 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setCharacterSet(java.lang.String)>($r57);

        goto label02;

     label13:
        $r15 = "Characters";

        $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z12 == 0 goto label14;

        $i2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setCharacters(int)>($i2);

        goto label02;

     label14:
        $r16 = "IsBaseFont";

        $z13 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z13 == 0 goto label15;

        $z35 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean readBoolean()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setIsBaseFont(boolean)>($z35);

        goto label02;

     label15:
        $r17 = "VVector";

        $z14 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z14 == 0 goto label16;

        r74 = newarray (float)[2];

        $f12 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        r74[0] = $f12;

        $f13 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        r74[1] = $f13;

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setVVector(float[])>(r74);

        goto label02;

     label16:
        $r18 = "IsFixedV";

        $z15 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z15 == 0 goto label17;

        $z34 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean readBoolean()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setIsFixedV(boolean)>($z34);

        goto label02;

     label17:
        $r19 = "CapHeight";

        $z16 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z16 == 0 goto label18;

        $f11 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setCapHeight(float)>($f11);

        goto label02;

     label18:
        $r20 = "XHeight";

        $z17 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z17 == 0 goto label19;

        $f10 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setXHeight(float)>($f10);

        goto label02;

     label19:
        $r21 = "Ascender";

        $z18 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z18 == 0 goto label20;

        $f9 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setAscender(float)>($f9);

        goto label02;

     label20:
        $r22 = "Descender";

        $z19 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z19 == 0 goto label21;

        $f8 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setDescender(float)>($f8);

        goto label02;

     label21:
        $r23 = "StdHW";

        $z20 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z20 == 0 goto label22;

        $f7 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setStandardHorizontalWidth(float)>($f7);

        goto label02;

     label22:
        $r24 = "StdVW";

        $z21 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z21 == 0 goto label23;

        $f6 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setStandardVerticalWidth(float)>($f6);

        goto label02;

     label23:
        $r25 = "Comment";

        $z22 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z22 == 0 goto label24;

        $r56 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void addComment(java.lang.String)>($r56);

        goto label02;

     label24:
        $r26 = "UnderlinePosition";

        $z23 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z23 == 0 goto label25;

        $f5 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setUnderlinePosition(float)>($f5);

        goto label02;

     label25:
        $r27 = "UnderlineThickness";

        $z24 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z24 == 0 goto label26;

        $f4 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setUnderlineThickness(float)>($f4);

        goto label02;

     label26:
        $r28 = "ItalicAngle";

        $z25 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z25 == 0 goto label27;

        $f3 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setItalicAngle(float)>($f3);

        goto label02;

     label27:
        $r29 = "CharWidth";

        $z26 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z26 == 0 goto label28;

        r75 = newarray (float)[2];

        $f1 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        r75[0] = $f1;

        $f2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        r75[1] = $f2;

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setCharWidth(float[])>(r75);

        goto label02;

     label28:
        $r30 = "IsFixedPitch";

        $z27 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z27 == 0 goto label29;

        $z33 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean readBoolean()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void setFixedPitch(boolean)>($z33);

        goto label02;

     label29:
        $r31 = "StartCharMetrics";

        $z28 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z28 == 0 goto label33;

        $i1 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i5 = 0;

     label30:
        if i5 >= $i1 goto label31;

        $r55 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.CharMetric parseCharMetric()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void addCharMetric(org.apache.fontbox.afm.CharMetric)>($r55);

        i5 = i5 + 1;

        goto label30;

     label31:
        $r48 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z32 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("EndCharMetrics");

        if $z32 != 0 goto label32;

        $r49 = new java.io.IOException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndCharMetrics\' actual \'");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.io.IOException: void <init>(java.lang.String)>($r54);

        throw $r49;

     label32:
        goto label02;

     label33:
        $r32 = "StartComposites";

        $z29 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z29 == 0 goto label37;

        $i0 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i6 = 0;

     label34:
        if i6 >= $i0 goto label35;

        $r47 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.Composite parseComposite()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.FontMetric: void addComposite(org.apache.fontbox.afm.Composite)>($r47);

        i6 = i6 + 1;

        goto label34;

     label35:
        $r40 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z31 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>("EndComposites");

        if $z31 != 0 goto label36;

        $r41 = new java.io.IOException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndComposites\' actual \'");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>($r46);

        throw $r41;

     label36:
        goto label02;

     label37:
        $r33 = "StartKernData";

        $z30 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r73);

        if $z30 == 0 goto label38;

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void parseKernData(org.apache.fontbox.afm.FontMetric)>($r0);

        goto label02;

     label38:
        $r34 = new java.io.IOException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown AFM key \'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r34;

     label39:
        return $r0;
    }

    private void parseKernData(org.apache.fontbox.afm.FontMetric) throws java.io.IOException
    {
        org.apache.fontbox.afm.FontMetric r19;
        org.apache.fontbox.afm.KernPair $r18, $r27, $r35;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r22, $r23, $r24, $r25, $r30, $r31, $r32, $r33, $r38, $r39, $r40, $r41;
        org.apache.fontbox.afm.AFMParser r0;
        java.lang.String $r1, $r2, $r3, $r4, $r10, $r11, $r17, $r20, $r26, $r28, $r34, $r36, $r42, $r44;
        java.io.IOException $r5, $r12, $r21, $r29, $r37;
        org.apache.fontbox.afm.TrackKern $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        r19 := @parameter0: org.apache.fontbox.afm.FontMetric;

     label01:
        $r44 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z8 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>("EndKernData");

        if $z8 != 0 goto label18;

        $r1 = "StartTrackKern";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z0 == 0 goto label05;

        $i3 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i5 = 0;

     label02:
        if i5 >= $i3 goto label03;

        $r43 = new org.apache.fontbox.afm.TrackKern;

        specialinvoke $r43.<org.apache.fontbox.afm.TrackKern: void <init>()>();

        $i4 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        virtualinvoke $r43.<org.apache.fontbox.afm.TrackKern: void setDegree(int)>($i4);

        $f0 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r43.<org.apache.fontbox.afm.TrackKern: void setMinPointSize(float)>($f0);

        $f1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r43.<org.apache.fontbox.afm.TrackKern: void setMinKern(float)>($f1);

        $f2 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r43.<org.apache.fontbox.afm.TrackKern: void setMaxPointSize(float)>($f2);

        $f3 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r43.<org.apache.fontbox.afm.TrackKern: void setMaxKern(float)>($f3);

        virtualinvoke r19.<org.apache.fontbox.afm.FontMetric: void addTrackKern(org.apache.fontbox.afm.TrackKern)>($r43);

        i5 = i5 + 1;

        goto label02;

     label03:
        $r36 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z7 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>("EndTrackKern");

        if $z7 != 0 goto label04;

        $r37 = new java.io.IOException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndTrackKern\' actual \'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r42);

        throw $r37;

     label04:
        goto label01;

     label05:
        $r2 = "StartKernPairs";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z1 == 0 goto label09;

        $i2 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i6 = 0;

     label06:
        if i6 >= $i2 goto label07;

        $r35 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.KernPair parseKernPair()>();

        virtualinvoke r19.<org.apache.fontbox.afm.FontMetric: void addKernPair(org.apache.fontbox.afm.KernPair)>($r35);

        i6 = i6 + 1;

        goto label06;

     label07:
        $r28 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("EndKernPairs");

        if $z6 != 0 goto label08;

        $r29 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndKernPairs\' actual \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label08:
        goto label01;

     label09:
        $r3 = "StartKernPairs0";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z2 == 0 goto label13;

        $i1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i7 = 0;

     label10:
        if i7 >= $i1 goto label11;

        $r27 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.KernPair parseKernPair()>();

        virtualinvoke r19.<org.apache.fontbox.afm.FontMetric: void addKernPair0(org.apache.fontbox.afm.KernPair)>($r27);

        i7 = i7 + 1;

        goto label10;

     label11:
        $r20 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("EndKernPairs");

        if $z5 != 0 goto label12;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndKernPairs\' actual \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label12:
        goto label01;

     label13:
        $r4 = "StartKernPairs1";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z3 == 0 goto label17;

        $i0 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: int readInt()>();

        i8 = 0;

     label14:
        if i8 >= $i0 goto label15;

        $r18 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.KernPair parseKernPair()>();

        virtualinvoke r19.<org.apache.fontbox.afm.FontMetric: void addKernPair1(org.apache.fontbox.afm.KernPair)>($r18);

        i8 = i8 + 1;

        goto label14;

     label15:
        $r11 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("EndKernPairs");

        if $z4 != 0 goto label16;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected \'EndKernPairs\' actual \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label16:
        goto label01;

     label17:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown kerning data type \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label18:
        return;
    }

    private org.apache.fontbox.afm.KernPair parseKernPair() throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.fontbox.afm.KernPair $r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        org.apache.fontbox.afm.AFMParser r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.io.IOException $r7;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new org.apache.fontbox.afm.KernPair;

        specialinvoke $r0.<org.apache.fontbox.afm.KernPair: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r3 = "KP";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r21 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r22 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $f4 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        $f5 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setFirstKernCharacter(java.lang.String)>($r21);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setSecondKernCharacter(java.lang.String)>($r22);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setX(float)>($f4);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setY(float)>($f5);

        goto label5;

     label1:
        $r4 = "KPH";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r17 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r18 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String hexToString(java.lang.String)>($r17);

        $r19 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r20 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String hexToString(java.lang.String)>($r19);

        $f2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        $f3 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setFirstKernCharacter(java.lang.String)>($r18);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setSecondKernCharacter(java.lang.String)>($r20);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setX(float)>($f2);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setY(float)>($f3);

        goto label5;

     label2:
        $r5 = "KPX";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label3;

        $r15 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r16 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $f1 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setFirstKernCharacter(java.lang.String)>($r15);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setSecondKernCharacter(java.lang.String)>($r16);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setX(float)>($f1);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setY(float)>(0.0F);

        goto label5;

     label3:
        $r6 = "KPY";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label4;

        $r13 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r14 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $f0 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: float readFloat()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setFirstKernCharacter(java.lang.String)>($r13);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setSecondKernCharacter(java.lang.String)>($r14);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setX(float)>(0.0F);

        virtualinvoke $r0.<org.apache.fontbox.afm.KernPair: void setY(float)>($f0);

        goto label5;

     label4:
        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error expected kern pair command actual=\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label5:
        return $r0;
    }

    private java.lang.String hexToString(java.lang.String) throws java.io.IOException
    {
        byte[] r7;
        byte $b15;
        java.lang.StringBuilder $r2, $r3, $r4, $r10, $r11, $r12, $r16, $r17, $r22, $r23, $r27, $r29, $r31, $r32;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i14, i16, $i17, $i18;
        org.apache.fontbox.afm.AFMParser r25;
        java.lang.String $r5, $r6, $r13, $r18, $r24, r26, $r34;
        char $c1, $c4, $c10, $c12;
        java.lang.NumberFormatException $r19;
        java.io.IOException $r28, $r30, $r33;

        r25 := @this: org.apache.fontbox.afm.AFMParser;

        r26 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i0 >= 2 goto label1;

        $r28 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected hex string of length >= 2 not=\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r28;

     label1:
        $c1 = virtualinvoke r26.<java.lang.String: char charAt(int)>(0);

        $i17 = (int) $c1;

        if $i17 != 60 goto label2;

        $i2 = virtualinvoke r26.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke r26.<java.lang.String: char charAt(int)>($i3);

        $i18 = (int) $c4;

        if $i18 == 62 goto label3;

     label2:
        $r30 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String should be enclosed by angle brackets \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r30;

     label3:
        $i5 = virtualinvoke r26.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $r6 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int,int)>(1, $i6);

        $i7 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i8 = $i7 / 2;

        r7 = newarray (byte)[$i8];

        i16 = 0;

     label4:
        $i9 = virtualinvoke $r6.<java.lang.String: int length()>();

        if i16 >= $i9 goto label9;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c10 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(i16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);

        $i11 = i16 + 1;

        $c12 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i11);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c12);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $i13 = i16 / 2;

        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r13, 16);

        $b15 = (byte) $i14;

        r7[$i13] = $b15;

     label6:
        goto label8;

     label7:
        $r19 := @caughtexception;

        $r33 = new java.io.IOException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing AFM file:");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r33;

     label8:
        i16 = i16 + 2;

        goto label4;

     label9:
        $r34 = new java.lang.String;

        specialinvoke $r34.<java.lang.String: void <init>(byte[],java.lang.String)>(r7, "ISO-8859-1");

        return $r34;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    private org.apache.fontbox.afm.Composite parseComposite() throws java.io.IOException
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r32, $r33, $r34;
        org.apache.fontbox.afm.CompositePart $r7;
        java.util.StringTokenizer $r3;
        int $i0, $i1, $i2, i3;
        org.apache.fontbox.afm.AFMParser r1;
        java.lang.String $r2, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r17, $r23, $r29, $r35;
        java.io.IOException $r12, $r18, $r25, $r31;
        java.lang.NumberFormatException $r24, $r30;
        org.apache.fontbox.afm.Composite $r0;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new org.apache.fontbox.afm.Composite;

        specialinvoke $r0.<org.apache.fontbox.afm.Composite: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r2, " ;");

        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("CC");

        if $z0 != 0 goto label01;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'CC\' actual=\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label01:
        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.Composite: void setName(java.lang.String)>($r5);

     label02:
        $r6 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label03:
        goto label05;

     label04:
        $r30 := @caughtexception;

        $r31 = new java.io.IOException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing AFM document:");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label05:
        i3 = 0;

     label06:
        if i3 >= $i0 goto label12;

        $r7 = new org.apache.fontbox.afm.CompositePart;

        specialinvoke $r7.<org.apache.fontbox.afm.CompositePart: void <init>()>();

        $r8 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("PCC");

        if $z1 != 0 goto label07;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'PCC\' actual=\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label07:
        $r9 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label08:
        $r10 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r11 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        virtualinvoke $r7.<org.apache.fontbox.afm.CompositePart: void setName(java.lang.String)>($r9);

        virtualinvoke $r7.<org.apache.fontbox.afm.CompositePart: void setXDisplacement(int)>($i1);

        virtualinvoke $r7.<org.apache.fontbox.afm.CompositePart: void setYDisplacement(int)>($i2);

        virtualinvoke $r0.<org.apache.fontbox.afm.Composite: void addPart(org.apache.fontbox.afm.CompositePart)>($r7);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        $r25 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing AFM document:");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label11:
        i3 = i3 + 1;

        goto label06;

     label12:
        return $r0;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    private org.apache.fontbox.afm.CharMetric parseCharMetric() throws java.io.IOException
    {
        org.apache.fontbox.afm.Ligature $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r38, $r39, $r40;
        org.apache.fontbox.util.BoundingBox $r18;
        float[] r42, r43, r44, r45;
        java.util.StringTokenizer $r3;
        org.apache.fontbox.afm.AFMParser r1;
        java.lang.String $r2, $r4, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r41;
        java.io.IOException $r5, $r37;
        java.lang.NumberFormatException $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.apache.fontbox.afm.CharMetric $r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        int $i0, $i1;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new org.apache.fontbox.afm.CharMetric;

        specialinvoke $r0.<org.apache.fontbox.afm.CharMetric: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: java.lang.String readLine()>();

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>($r2);

     label01:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label18;

        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("C");

        if $z1 == 0 goto label02;

        $r35 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r35);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setCharacterCode(int)>($i1);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label02:
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("CH");

        if $z2 == 0 goto label03;

        $r34 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r34, 16);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setCharacterCode(int)>($i0);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label03:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("WX");

        if $z3 == 0 goto label04;

        $r33 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f17 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r33);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setWx(float)>($f17);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label04:
        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W0X");

        if $z4 == 0 goto label05;

        $r32 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f16 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r32);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW0x(float)>($f16);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label05:
        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W1X");

        if $z5 == 0 goto label06;

        $r31 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f15 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r31);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW0x(float)>($f15);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label06:
        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("WY");

        if $z6 == 0 goto label07;

        $r30 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f14 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r30);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setWy(float)>($f14);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label07:
        $z7 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W0Y");

        if $z7 == 0 goto label08;

        $r29 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f13 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r29);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW0y(float)>($f13);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label08:
        $z8 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W1Y");

        if $z8 == 0 goto label09;

        $r28 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f12 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r28);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW0y(float)>($f12);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label09:
        $z9 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W");

        if $z9 == 0 goto label10;

        $r26 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r27 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r42 = newarray (float)[2];

        $f10 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r26);

        r42[0] = $f10;

        $f11 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r27);

        r42[1] = $f11;

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW(float[])>(r42);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label10:
        $z10 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W0");

        if $z10 == 0 goto label11;

        $r24 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r25 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r43 = newarray (float)[2];

        $f8 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r24);

        r43[0] = $f8;

        $f9 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r25);

        r43[1] = $f9;

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW0(float[])>(r43);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label11:
        $z11 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("W1");

        if $z11 == 0 goto label12;

        $r22 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r23 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r44 = newarray (float)[2];

        $f6 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r22);

        r44[0] = $f6;

        $f7 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r23);

        r44[1] = $f7;

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setW1(float[])>(r44);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label12:
        $z12 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("VV");

        if $z12 == 0 goto label13;

        $r20 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r21 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r45 = newarray (float)[2];

        $f4 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r20);

        r45[0] = $f4;

        $f5 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r21);

        r45[1] = $f5;

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setVv(float[])>(r45);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label13:
        $z13 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("N");

        if $z13 == 0 goto label14;

        $r19 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setName(java.lang.String)>($r19);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label14:
        $z14 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("B");

        if $z14 == 0 goto label15;

        $r14 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r15 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r16 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r17 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r18 = new org.apache.fontbox.util.BoundingBox;

        specialinvoke $r18.<org.apache.fontbox.util.BoundingBox: void <init>()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r14);

        virtualinvoke $r18.<org.apache.fontbox.util.BoundingBox: void setLowerLeftX(float)>($f0);

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r15);

        virtualinvoke $r18.<org.apache.fontbox.util.BoundingBox: void setLowerLeftY(float)>($f1);

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r16);

        virtualinvoke $r18.<org.apache.fontbox.util.BoundingBox: void setUpperRightX(float)>($f2);

        $f3 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r17);

        virtualinvoke $r18.<org.apache.fontbox.util.BoundingBox: void setUpperRightY(float)>($f3);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void setBoundingBox(org.apache.fontbox.util.BoundingBox)>($r18);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label15:
        $z15 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("L");

        if $z15 == 0 goto label16;

        $r11 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r12 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r13 = new org.apache.fontbox.afm.Ligature;

        specialinvoke $r13.<org.apache.fontbox.afm.Ligature: void <init>()>();

        virtualinvoke $r13.<org.apache.fontbox.afm.Ligature: void setSuccessor(java.lang.String)>($r11);

        virtualinvoke $r13.<org.apache.fontbox.afm.Ligature: void setLigature(java.lang.String)>($r12);

        virtualinvoke $r0.<org.apache.fontbox.afm.CharMetric: void addLigature(org.apache.fontbox.afm.Ligature)>($r13);

        specialinvoke r1.<org.apache.fontbox.afm.AFMParser: void verifySemicolon(java.util.StringTokenizer)>($r3);

        goto label17;

     label16:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown CharMetrics command \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label17:
        goto label01;

     label18:
        goto label20;

     label19:
        $r36 := @caughtexception;

        $r37 = new java.io.IOException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Corrupt AFM document:");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r41);

        throw $r37;

     label20:
        return $r0;

        catch java.lang.NumberFormatException from label01 to label18 with label19;
    }

    private void verifySemicolon(java.util.StringTokenizer) throws java.io.IOException
    {
        java.io.IOException $r1, $r3;
        java.util.StringTokenizer r0;
        org.apache.fontbox.afm.AFMParser r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r2, $r8;
        boolean $z0, $z1;

        r9 := @this: org.apache.fontbox.afm.AFMParser;

        r0 := @parameter0: java.util.StringTokenizer;

        $z0 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(";");

        if $z1 != 0 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected semicolon in stream actual=\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        goto label3;

     label2:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("CharMetrics is missing a semicolon after a command");

        throw $r1;

     label3:
        return;
    }

    private boolean readBoolean() throws java.io.IOException
    {
        org.apache.fontbox.afm.AFMParser r0;
        java.lang.Boolean $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        $r1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private int readInt() throws java.io.IOException
    {
        java.lang.NumberFormatException $r2;
        java.io.IOException $r3;
        int $i0;
        org.apache.fontbox.afm.AFMParser r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r1, $r7;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        $r1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing AFM document:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private float readFloat() throws java.io.IOException
    {
        org.apache.fontbox.afm.AFMParser r0;
        float $f0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        $r1 = specialinvoke r0.<org.apache.fontbox.afm.AFMParser: java.lang.String readString()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

        return $f0;
    }

    private java.lang.String readLine() throws java.io.IOException
    {
        char $c0, $c2;
        java.lang.StringBuffer $r0;
        int $i1, i3;
        org.apache.fontbox.afm.AFMParser r1;
        java.lang.String $r4;
        java.io.InputStream $r2, $r3, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        i3 = virtualinvoke $r2.<java.io.InputStream: int read()>();

     label1:
        $z0 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean isWhitespace(int)>(i3);

        if $z0 == 0 goto label2;

        $r5 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        i3 = virtualinvoke $r5.<java.io.InputStream: int read()>();

        goto label1;

     label2:
        $c0 = (char) i3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label3:
        $r3 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read()>();

        $z1 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean isEOL(int)>($i1);

        if $z1 != 0 goto label4;

        $c2 = (char) $i1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label3;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private java.lang.String readString() throws java.io.IOException
    {
        char $c0, $c2;
        java.lang.StringBuffer $r0;
        int $i1, i3;
        org.apache.fontbox.afm.AFMParser r1;
        java.lang.String $r4;
        java.io.InputStream $r2, $r3, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.fontbox.afm.AFMParser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        i3 = virtualinvoke $r2.<java.io.InputStream: int read()>();

     label1:
        $z0 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean isWhitespace(int)>(i3);

        if $z0 == 0 goto label2;

        $r5 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        i3 = virtualinvoke $r5.<java.io.InputStream: int read()>();

        goto label1;

     label2:
        $c0 = (char) i3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label3:
        $r3 = r1.<org.apache.fontbox.afm.AFMParser: java.io.InputStream input>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read()>();

        $z1 = specialinvoke r1.<org.apache.fontbox.afm.AFMParser: boolean isWhitespace(int)>($i1);

        if $z1 != 0 goto label4;

        $c2 = (char) $i1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label3;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private boolean isEOL(int)
    {
        int i0;
        org.apache.fontbox.afm.AFMParser r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        i0 := @parameter0: int;

        if i0 == 13 goto label1;

        if i0 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isWhitespace(int)
    {
        int i0;
        org.apache.fontbox.afm.AFMParser r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.AFMParser;

        i0 := @parameter0: int;

        if i0 == 32 goto label1;

        if i0 == 9 goto label1;

        if i0 == 13 goto label1;

        if i0 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.fontbox.afm.AFMParser: int BITS_IN_HEX> = 16;

        <org.apache.fontbox.afm.AFMParser: java.lang.String KERN_PAIR_KPY> = "KPY";

        <org.apache.fontbox.afm.AFMParser: java.lang.String KERN_PAIR_KPX> = "KPX";

        <org.apache.fontbox.afm.AFMParser: java.lang.String KERN_PAIR_KPH> = "KPH";

        <org.apache.fontbox.afm.AFMParser: java.lang.String KERN_PAIR_KP> = "KP";

        <org.apache.fontbox.afm.AFMParser: java.lang.String PCC> = "PCC";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CC> = "CC";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_COMPOSITES> = "EndComposites";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_COMPOSITES> = "StartComposites";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_KERN_PAIRS1> = "StartKernPairs1";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_KERN_PAIRS0> = "StartKernPairs0";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_KERN_PAIRS> = "EndKernPairs";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_KERN_PAIRS> = "StartKernPairs";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_KERN_DATA> = "EndKernData";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_KERN_DATA> = "StartKernData";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_TRACK_KERN> = "EndTrackKern";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_TRACK_KERN> = "StartTrackKern";

        <org.apache.fontbox.afm.AFMParser: java.lang.String STD_VW> = "StdVW";

        <org.apache.fontbox.afm.AFMParser: java.lang.String STD_HW> = "StdHW";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_L> = "L";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_B> = "B";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_N> = "N";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_VV> = "VV";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W1> = "W1";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W0> = "W0";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W> = "W";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W1Y> = "W1Y";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W0Y> = "W0Y";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_WY> = "WY";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W1X> = "W1X";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_W0X> = "W0X";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_WX> = "WX";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_CH> = "CH";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARMETRICS_C> = "C";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_CHAR_METRICS> = "EndCharMetrics";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_CHAR_METRICS> = "StartCharMetrics";

        <org.apache.fontbox.afm.AFMParser: java.lang.String IS_FIXED_PITCH> = "IsFixedPitch";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHAR_WIDTH> = "CharWidth";

        <org.apache.fontbox.afm.AFMParser: java.lang.String ITALIC_ANGLE> = "ItalicAngle";

        <org.apache.fontbox.afm.AFMParser: java.lang.String UNDERLINE_THICKNESS> = "UnderlineThickness";

        <org.apache.fontbox.afm.AFMParser: java.lang.String UNDERLINE_POSITION> = "UnderlinePosition";

        <org.apache.fontbox.afm.AFMParser: java.lang.String DESCENDER> = "Descender";

        <org.apache.fontbox.afm.AFMParser: java.lang.String ASCENDER> = "Ascender";

        <org.apache.fontbox.afm.AFMParser: java.lang.String X_HEIGHT> = "XHeight";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CAP_HEIGHT> = "CapHeight";

        <org.apache.fontbox.afm.AFMParser: java.lang.String IS_FIXED_V> = "IsFixedV";

        <org.apache.fontbox.afm.AFMParser: java.lang.String V_VECTOR> = "VVector";

        <org.apache.fontbox.afm.AFMParser: java.lang.String IS_BASE_FONT> = "IsBaseFont";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARACTERS> = "Characters";

        <org.apache.fontbox.afm.AFMParser: java.lang.String CHARACTER_SET> = "CharacterSet";

        <org.apache.fontbox.afm.AFMParser: java.lang.String ESC_CHAR> = "EscChar";

        <org.apache.fontbox.afm.AFMParser: java.lang.String MAPPING_SCHEME> = "MappingScheme";

        <org.apache.fontbox.afm.AFMParser: java.lang.String ENCODING_SCHEME> = "EncodingScheme";

        <org.apache.fontbox.afm.AFMParser: java.lang.String NOTICE> = "Notice";

        <org.apache.fontbox.afm.AFMParser: java.lang.String VERSION> = "Version";

        <org.apache.fontbox.afm.AFMParser: java.lang.String FONT_BBOX> = "FontBBox";

        <org.apache.fontbox.afm.AFMParser: java.lang.String WEIGHT> = "Weight";

        <org.apache.fontbox.afm.AFMParser: java.lang.String FAMILY_NAME> = "FamilyName";

        <org.apache.fontbox.afm.AFMParser: java.lang.String FULL_NAME> = "FullName";

        <org.apache.fontbox.afm.AFMParser: java.lang.String FONT_NAME> = "FontName";

        <org.apache.fontbox.afm.AFMParser: java.lang.String END_FONT_METRICS> = "EndFontMetrics";

        <org.apache.fontbox.afm.AFMParser: java.lang.String START_FONT_METRICS> = "StartFontMetrics";

        <org.apache.fontbox.afm.AFMParser: java.lang.String COMMENT> = "Comment";

        return;
    }
}
