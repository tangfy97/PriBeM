class org.apache.http.impl.conn.HttpConnPool extends org.apache.http.pool.AbstractConnPool
{
    private static java.util.concurrent.atomic.AtomicLong COUNTER;
    private final org.apache.commons.logging.Log log;
    private final long timeToLive;
    private final java.util.concurrent.TimeUnit tunit;

    public void <init>(org.apache.commons.logging.Log, int, int, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r3;
        org.apache.http.impl.conn.HttpConnPool r0;
        org.apache.http.impl.conn.HttpConnPool$InternalConnFactory $r1;
        int i0, i1;
        org.apache.commons.logging.Log r2;
        long l2;

        r0 := @this: org.apache.http.impl.conn.HttpConnPool;

        r2 := @parameter0: org.apache.commons.logging.Log;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r3 := @parameter4: java.util.concurrent.TimeUnit;

        $r1 = new org.apache.http.impl.conn.HttpConnPool$InternalConnFactory;

        specialinvoke $r1.<org.apache.http.impl.conn.HttpConnPool$InternalConnFactory: void <init>()>();

        specialinvoke r0.<org.apache.http.pool.AbstractConnPool: void <init>(org.apache.http.pool.ConnFactory,int,int)>($r1, i0, i1);

        r0.<org.apache.http.impl.conn.HttpConnPool: org.apache.commons.logging.Log log> = r2;

        r0.<org.apache.http.impl.conn.HttpConnPool: long timeToLive> = l2;

        r0.<org.apache.http.impl.conn.HttpConnPool: java.util.concurrent.TimeUnit tunit> = r3;

        return;
    }

    protected org.apache.http.impl.conn.HttpPoolEntry createEntry(org.apache.http.conn.routing.HttpRoute, org.apache.http.conn.OperatedClientConnection)
    {
        org.apache.http.impl.conn.HttpConnPool r3;
        long $l0, $l1;
        org.apache.http.conn.routing.HttpRoute r4;
        org.apache.http.conn.OperatedClientConnection r5;
        java.util.concurrent.TimeUnit $r6;
        java.util.concurrent.atomic.AtomicLong $r0;
        org.apache.http.impl.conn.HttpPoolEntry $r2;
        org.apache.commons.logging.Log $r7;
        java.lang.String $r1;

        r3 := @this: org.apache.http.impl.conn.HttpConnPool;

        r4 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r5 := @parameter1: org.apache.http.conn.OperatedClientConnection;

        $r0 = <org.apache.http.impl.conn.HttpConnPool: java.util.concurrent.atomic.AtomicLong COUNTER>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r2 = new org.apache.http.impl.conn.HttpPoolEntry;

        $r7 = r3.<org.apache.http.impl.conn.HttpConnPool: org.apache.commons.logging.Log log>;

        $l1 = r3.<org.apache.http.impl.conn.HttpConnPool: long timeToLive>;

        $r6 = r3.<org.apache.http.impl.conn.HttpConnPool: java.util.concurrent.TimeUnit tunit>;

        specialinvoke $r2.<org.apache.http.impl.conn.HttpPoolEntry: void <init>(org.apache.commons.logging.Log,java.lang.String,org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.OperatedClientConnection,long,java.util.concurrent.TimeUnit)>($r7, $r1, r4, r5, $l1, $r6);

        return $r2;
    }

    protected volatile org.apache.http.pool.PoolEntry createEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.http.conn.OperatedClientConnection $r3;
        org.apache.http.impl.conn.HttpConnPool r0;
        org.apache.http.impl.conn.HttpPoolEntry $r5;
        java.lang.Object r1, r2;
        org.apache.http.conn.routing.HttpRoute $r4;

        r0 := @this: org.apache.http.impl.conn.HttpConnPool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.http.conn.routing.HttpRoute) r1;

        $r3 = (org.apache.http.conn.OperatedClientConnection) r2;

        $r5 = virtualinvoke r0.<org.apache.http.impl.conn.HttpConnPool: org.apache.http.impl.conn.HttpPoolEntry createEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.OperatedClientConnection)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <org.apache.http.impl.conn.HttpConnPool: java.util.concurrent.atomic.AtomicLong COUNTER> = $r0;

        return;
    }
}
