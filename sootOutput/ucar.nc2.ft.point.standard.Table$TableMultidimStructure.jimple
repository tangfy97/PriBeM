public class ucar.nc2.ft.point.standard.Table$TableMultidimStructure extends ucar.nc2.ft.point.standard.Table$TableStructure
{

    void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig)
    {
        ucar.nc2.ft.point.standard.TableConfig r2;
        ucar.nc2.ft.point.standard.Table$TableMultidimStructure r0;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.ft.point.standard.Table$TableMultidimStructure;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        specialinvoke r0.<ucar.nc2.ft.point.standard.Table$TableStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r1, r2);

        return;
    }

    public ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        java.lang.IllegalStateException $r10;
        ucar.ma2.Section $r1, $r2;
        ucar.ma2.ArrayStructure r7;
        ucar.ma2.StructureDataIterator $r8;
        ucar.nc2.ft.point.standard.Table$TableMultidimStructure r3;
        int $i0, $i1, $i2, i3, i4;
        ucar.ma2.Array $r6;
        ucar.ma2.InvalidRangeException $r9;
        ucar.nc2.dataset.StructureDS $r4, $r5;
        ucar.nc2.ft.point.standard.Cursor r0;

        r3 := @this: ucar.nc2.ft.point.standard.Table$TableMultidimStructure;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Cursor: int getParentRecnum()>();

     label1:
        $r1 = new ucar.ma2.Section;

        specialinvoke $r1.<ucar.ma2.Section: void <init>()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>($i0, $i0);

        i4 = 1;

     label2:
        $i1 = i4;

        i4 = i4 + 1;

        $r4 = r3.<ucar.nc2.ft.point.standard.Table$TableMultidimStructure: ucar.nc2.dataset.StructureDS struct>;

        $i2 = virtualinvoke $r4.<ucar.nc2.dataset.StructureDS: int getRank()>();

        if $i1 >= $i2 goto label3;

        virtualinvoke $r2.<ucar.ma2.Section: ucar.ma2.Section appendRange(ucar.ma2.Range)>(null);

        goto label2;

     label3:
        $r5 = r3.<ucar.nc2.ft.point.standard.Table$TableMultidimStructure: ucar.nc2.dataset.StructureDS struct>;

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.StructureDS: ucar.ma2.Array read(ucar.ma2.Section)>($r2);

        r7 = (ucar.ma2.ArrayStructure) $r6;

        $r8 = virtualinvoke r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureDataIterator getStructureDataIterator()>();

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch ucar.ma2.InvalidRangeException from label1 to label4 with label5;
    }

    public java.lang.String getName()
    {
        ucar.nc2.ft.point.standard.Table$TableMultidimStructure r2;
        ucar.nc2.dataset.StructureDS $r3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: ucar.nc2.ft.point.standard.Table$TableMultidimStructure;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MultidimStructure(");

        $r3 = r2.<ucar.nc2.ft.point.standard.Table$TableMultidimStructure: ucar.nc2.dataset.StructureDS struct>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.StructureDS: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
