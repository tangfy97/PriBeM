public class org.apache.batik.ext.awt.image.spi.ImageWriterRegistry extends java.lang.Object
{
    private static volatile org.apache.batik.ext.awt.image.spi.ImageWriterRegistry instance;
    private final java.util.Map imageWriterMap;
    static java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriterRegistry;
    static java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriter;

    private void <init>()
    {
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.util.Map imageWriterMap> = $r1;

        specialinvoke r0.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: void setup()>();

        return;
    }

    public static org.apache.batik.ext.awt.image.spi.ImageWriterRegistry getInstance()
    {
        java.lang.Throwable $r6;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry $r0, $r1, $r4, $r5;
        java.lang.Class $r2, r3, $r7;

        $r0 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry instance>;

        if $r0 != null goto label6;

        $r2 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriterRegistry>;

        if $r2 != null goto label1;

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$(java.lang.String)>("org.apache.batik.ext.awt.image.spi.ImageWriterRegistry");

        <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriterRegistry> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriterRegistry>;

     label2:
        r3 = $r7;

        entermonitor $r7;

     label3:
        $r4 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry instance>;

        if $r4 != null goto label4;

        $r5 = new org.apache.batik.ext.awt.image.spi.ImageWriterRegistry;

        specialinvoke $r5.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: void <init>()>();

        <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry instance> = $r5;

     label4:
        exitmonitor r3;

        goto label6;

     label5:
        $r6 := @caughtexception;

        exitmonitor r3;

        throw $r6;

     label6:
        $r1 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry instance>;

        return $r1;

        catch java.lang.Throwable from label3 to label5 with label5;
    }

    private void setup()
    {
        org.apache.batik.ext.awt.image.spi.ImageWriter r3;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry r4;
        java.util.Iterator $r1;
        java.lang.Class $r0, $r5;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry;

        $r0 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriter>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$(java.lang.String)>("org.apache.batik.ext.awt.image.spi.ImageWriter");

        <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriter> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$ImageWriter>;

     label2:
        $r1 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r5);

        goto label4;

     label3:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.batik.ext.awt.image.spi.ImageWriter) $r2;

        virtualinvoke r4.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: void register(org.apache.batik.ext.awt.image.spi.ImageWriter)>(r3);

     label4:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;
    }

    public void register(org.apache.batik.ext.awt.image.spi.ImageWriter)
    {
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry r0;
        org.apache.batik.ext.awt.image.spi.ImageWriter r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry;

        r1 := @parameter0: org.apache.batik.ext.awt.image.spi.ImageWriter;

        $r2 = r0.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.util.Map imageWriterMap>;

        $r3 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.spi.ImageWriter: java.lang.String getMIMEType()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public org.apache.batik.ext.awt.image.spi.ImageWriter getWriterFor(java.lang.String)
    {
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry r0;
        org.apache.batik.ext.awt.image.spi.ImageWriter $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: java.util.Map imageWriterMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.batik.ext.awt.image.spi.ImageWriter) $r3;

        return $r4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
