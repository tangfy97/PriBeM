public class com.drew.lang.StringUtil extends java.lang.Object
{

    public void <init>()
    {
        com.drew.lang.StringUtil r0;

        r0 := @this: com.drew.lang.StringUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String join(java.lang.Iterable, java.lang.String)
    {
        java.lang.Iterable r1;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r4;
        java.lang.CharSequence $r7, $r9, $r11;
        java.lang.StringBuilder $r3;
        java.lang.Object $r6, $r8, $r10;

        r1 := @parameter0: java.lang.Iterable;

        r0 := @parameter1: java.lang.String;

        i3 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.CharSequence) $r10;

        $i1 = interfaceinvoke $r11.<java.lang.CharSequence: int length()>();

        $i2 = $i1 + $i0;

        i3 = 0 + $i2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i3);

        $r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.CharSequence) $r6;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r7);

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.CharSequence) $r8;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r9);

        goto label2;

     label3:
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String join(java.lang.CharSequence[], java.lang.String)
    {
        java.lang.CharSequence r4, r5;
        java.lang.CharSequence[] r1;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7;
        java.lang.StringBuilder $r2;
        java.lang.String r0, $r3;
        boolean z0;

        r1 := @parameter0: java.lang.CharSequence[];

        r0 := @parameter1: java.lang.String;

        i3 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r5 = r1[i5];

        $i1 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

        $i2 = $i1 + $i0;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(i3);

        z0 = 1;

        i6 = lengthof r1;

        i7 = 0;

     label3:
        if i7 >= i6 goto label6;

        r4 = r1[i7];

        if z0 != 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        goto label5;

     label4:
        z0 = 0;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r4);

        i7 = i7 + 1;

        goto label3;

     label6:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
