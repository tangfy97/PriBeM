public abstract class org.apache.lucene.index.FilteredTermsEnum extends org.apache.lucene.index.TermsEnum
{
    private org.apache.lucene.util.BytesRef initialSeekTerm;
    private boolean doSeek;
    private org.apache.lucene.util.BytesRef actualTerm;
    private final org.apache.lucene.index.TermsEnum tenum;
    static final boolean $assertionsDisabled;

    protected abstract org.apache.lucene.index.FilteredTermsEnum$AcceptStatus accept(org.apache.lucene.util.BytesRef) throws java.io.IOException;

    public void <init>(org.apache.lucene.index.TermsEnum)
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.index.TermsEnum r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r1 := @parameter0: org.apache.lucene.index.TermsEnum;

        specialinvoke r0.<org.apache.lucene.index.FilteredTermsEnum: void <init>(org.apache.lucene.index.TermsEnum,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.apache.lucene.index.TermsEnum, boolean)
    {
        org.apache.lucene.index.TermsEnum r1;
        org.apache.lucene.index.FilteredTermsEnum r0;
        java.lang.AssertionError $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r1 := @parameter0: org.apache.lucene.index.TermsEnum;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.lucene.index.TermsEnum: void <init>()>();

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef initialSeekTerm> = null;

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm> = null;

        $z0 = <org.apache.lucene.index.FilteredTermsEnum: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum> = r1;

        r0.<org.apache.lucene.index.FilteredTermsEnum: boolean doSeek> = z1;

        return;
    }

    protected final void setInitialSeekTerm(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.util.BytesRef r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef initialSeekTerm> = r1;

        return;
    }

    protected org.apache.lucene.util.BytesRef nextSeekTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.util.BytesRef r1, r2;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r2 := @parameter0: org.apache.lucene.util.BytesRef;

        r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef initialSeekTerm>;

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef initialSeekTerm> = null;

        return r1;
    }

    public org.apache.lucene.util.AttributeSource attributes()
    {
        org.apache.lucene.util.AttributeSource $r2;
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.index.TermsEnum $r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.AttributeSource attributes()>();

        return $r2;
    }

    public org.apache.lucene.util.BytesRef term() throws java.io.IOException
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.index.TermsEnum $r1;
        org.apache.lucene.util.BytesRef $r2;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        return $r2;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        java.util.Comparator $r2;
        org.apache.lucene.index.TermsEnum $r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        return $r2;
    }

    public int docFreq() throws java.io.IOException
    {
        int $i0;
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.index.TermsEnum $r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: int docFreq()>();

        return $i0;
    }

    public long totalTermFreq() throws java.io.IOException
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        long $l0;
        org.apache.lucene.index.TermsEnum $r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: long totalTermFreq()>();

        return $l0;
    }

    public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.util.BytesRef r8;
        java.lang.StringBuilder $r1, $r5, $r6;
        org.apache.lucene.index.FilteredTermsEnum r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        boolean z0;

        r2 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r8 := @parameter0: org.apache.lucene.util.BytesRef;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support seeking");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.util.BytesRef r8;
        java.lang.StringBuilder $r1, $r5, $r6;
        org.apache.lucene.index.FilteredTermsEnum r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        boolean z0;

        r2 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r8 := @parameter0: org.apache.lucene.util.BytesRef;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support seeking");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void seekExact(long) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        long l0;
        java.lang.StringBuilder $r1, $r5, $r6;
        org.apache.lucene.index.FilteredTermsEnum r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: org.apache.lucene.index.FilteredTermsEnum;

        l0 := @parameter0: long;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support seeking");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public long ord() throws java.io.IOException
    {
        org.apache.lucene.index.FilteredTermsEnum r0;
        long $l0;
        org.apache.lucene.index.TermsEnum $r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: long ord()>();

        return $l0;
    }

    public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException
    {
        org.apache.lucene.index.TermsEnum $r3;
        int i0;
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.index.DocsEnum r2, $r4;
        org.apache.lucene.util.Bits r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r1 := @parameter0: org.apache.lucene.util.Bits;

        r2 := @parameter1: org.apache.lucene.index.DocsEnum;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum,int)>(r1, r2, i0);

        return $r4;
    }

    public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException
    {
        org.apache.lucene.index.DocsAndPositionsEnum r2, $r4;
        org.apache.lucene.index.TermsEnum $r3;
        int i0;
        org.apache.lucene.index.FilteredTermsEnum r0;
        org.apache.lucene.util.Bits r1;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r1 := @parameter0: org.apache.lucene.util.Bits;

        r2 := @parameter1: org.apache.lucene.index.DocsAndPositionsEnum;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum,int)>(r1, r2, i0);

        return $r4;
    }

    public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.index.TermState r9;
        org.apache.lucene.util.BytesRef r8;
        java.lang.StringBuilder $r1, $r5, $r6;
        org.apache.lucene.index.FilteredTermsEnum r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: org.apache.lucene.index.FilteredTermsEnum;

        r8 := @parameter0: org.apache.lucene.util.BytesRef;

        r9 := @parameter1: org.apache.lucene.index.TermState;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support seeking");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public org.apache.lucene.index.TermState termState() throws java.io.IOException
    {
        org.apache.lucene.index.TermState $r2;
        org.apache.lucene.index.TermsEnum $r1, $r3;
        org.apache.lucene.index.FilteredTermsEnum r0;
        java.lang.AssertionError $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

        $z0 = <org.apache.lucene.index.FilteredTermsEnum: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        if $r3 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermState termState()>();

        return $r2;
    }

    public org.apache.lucene.util.BytesRef next() throws java.io.IOException
    {
        org.apache.lucene.index.FilteredTermsEnum$AcceptStatus $r6;
        java.lang.AssertionError $r18;
        int[] $r5;
        org.apache.lucene.index.TermsEnum $r1, $r10, $r13;
        int $i0, $i1, $i2;
        java.lang.String $r25;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef $r2, $r3, $r4, $r7, $r8, $r9, $r14, $r15, $r17, $r21;
        org.apache.lucene.index.TermsEnum$SeekStatus $r11, $r12;
        org.apache.lucene.index.FilteredTermsEnum r0;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r24;
        java.util.Comparator $r16;

        r0 := @this: org.apache.lucene.index.FilteredTermsEnum;

     label01:
        $z0 = r0.<org.apache.lucene.index.FilteredTermsEnum: boolean doSeek>;

        if $z0 == 0 goto label05;

        r0.<org.apache.lucene.index.FilteredTermsEnum: boolean doSeek> = 0;

        $r8 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        $r9 = virtualinvoke r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef nextSeekTerm(org.apache.lucene.util.BytesRef)>($r8);

        $z1 = <org.apache.lucene.index.FilteredTermsEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r15 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        if $r15 == null goto label02;

        if $r9 == null goto label02;

        $r16 = virtualinvoke r0.<org.apache.lucene.index.FilteredTermsEnum: java.util.Comparator getComparator()>();

        $r17 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        $i2 = interfaceinvoke $r16.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r17);

        if $i2 > 0 goto label02;

        $r18 = new java.lang.AssertionError;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("curTerm=");

        $r21 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seekTerm=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r18;

     label02:
        if $r9 == null goto label03;

        $r10 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef,boolean)>($r9, 0);

        $r12 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus END>;

        if $r11 != $r12 goto label04;

     label03:
        return null;

     label04:
        $r13 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm> = $r14;

        goto label06;

     label05:
        $r1 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.TermsEnum tenum>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm> = $r2;

        $r3 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        if $r3 != null goto label06;

        return null;

     label06:
        $r5 = <org.apache.lucene.index.FilteredTermsEnum$1: int[] $SwitchMap$org$apache$lucene$index$FilteredTermsEnum$AcceptStatus>;

        $r4 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        $r6 = virtualinvoke r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.index.FilteredTermsEnum$AcceptStatus accept(org.apache.lucene.util.BytesRef)>($r4);

        $i0 = virtualinvoke $r6.<org.apache.lucene.index.FilteredTermsEnum$AcceptStatus: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label07:
        r0.<org.apache.lucene.index.FilteredTermsEnum: boolean doSeek> = 1;

     label08:
        $r7 = r0.<org.apache.lucene.index.FilteredTermsEnum: org.apache.lucene.util.BytesRef actualTerm>;

        return $r7;

     label09:
        r0.<org.apache.lucene.index.FilteredTermsEnum: boolean doSeek> = 1;

        goto label11;

     label10:
        return null;

     label11:
        goto label01;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FilteredTermsEnum;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FilteredTermsEnum: boolean $assertionsDisabled> = $z1;

        return;
    }
}
