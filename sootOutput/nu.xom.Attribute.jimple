public class nu.xom.Attribute extends nu.xom.Node
{
    private java.lang.String localName;
    private java.lang.String prefix;
    private java.lang.String URI;
    private java.lang.String value;
    private nu.xom.Attribute$Type type;

    public void <init>(java.lang.String, java.lang.String)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type $r3;
        java.lang.String r1, r2;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type UNDECLARED>;

        specialinvoke r0.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,nu.xom.Attribute$Type)>(r1, "", r2, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, nu.xom.Attribute$Type)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type r3;
        java.lang.String r1, r2;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: nu.xom.Attribute$Type;

        specialinvoke r0.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,nu.xom.Attribute$Type)>(r1, "", r2, r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type $r4;
        java.lang.String r1, r2, r3;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type UNDECLARED>;

        specialinvoke r0.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,nu.xom.Attribute$Type)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, nu.xom.Attribute$Type)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type r5, $r6;
        int $i0, $i1;
        java.lang.String r1, r2, $r3, r4, $r7, r9;
        boolean $z0;
        nu.xom.IllegalNameException $r8;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: nu.xom.Attribute$Type;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.Attribute: java.lang.String value> = "";

        r0.<nu.xom.Attribute: java.lang.String prefix> = "";

        r9 = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label1;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r0.<nu.xom.Attribute: java.lang.String prefix> = $r7;

        $i1 = $i0 + 1;

        r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        specialinvoke r0.<nu.xom.Attribute: void _setLocalName(java.lang.String)>(r9);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<nu.xom.IllegalNameException: void setData(java.lang.String)>(r1);

        throw $r8;

     label4:
        $r3 = r0.<nu.xom.Attribute: java.lang.String prefix>;

        specialinvoke r0.<nu.xom.Attribute: void _setNamespace(java.lang.String,java.lang.String)>($r3, r2);

        specialinvoke r0.<nu.xom.Attribute: void _setValue(java.lang.String)>(r4);

        $z0 = specialinvoke r0.<nu.xom.Attribute: boolean isXMLID()>();

        if $z0 == 0 goto label5;

        $r6 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        specialinvoke r0.<nu.xom.Attribute: void _setType(nu.xom.Attribute$Type)>($r6);

        goto label6;

     label5:
        specialinvoke r0.<nu.xom.Attribute: void _setType(nu.xom.Attribute$Type)>(r5);

     label6:
        return;

        catch nu.xom.IllegalNameException from label1 to label2 with label3;
    }

    public void <init>(nu.xom.Attribute)
    {
        nu.xom.Attribute r0, r1;
        nu.xom.Attribute$Type $r6;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: nu.xom.Attribute;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.Attribute: java.lang.String value> = "";

        $r2 = r1.<nu.xom.Attribute: java.lang.String localName>;

        r0.<nu.xom.Attribute: java.lang.String localName> = $r2;

        $r3 = r1.<nu.xom.Attribute: java.lang.String prefix>;

        r0.<nu.xom.Attribute: java.lang.String prefix> = $r3;

        $r4 = r1.<nu.xom.Attribute: java.lang.String URI>;

        r0.<nu.xom.Attribute: java.lang.String URI> = $r4;

        $r5 = r1.<nu.xom.Attribute: java.lang.String value>;

        r0.<nu.xom.Attribute: java.lang.String value> = $r5;

        $r6 = r1.<nu.xom.Attribute: nu.xom.Attribute$Type type>;

        r0.<nu.xom.Attribute: nu.xom.Attribute$Type type> = $r6;

        return;
    }

    private void <init>()
    {
        nu.xom.Attribute r0;

        r0 := @this: nu.xom.Attribute;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.Attribute: java.lang.String value> = "";

        return;
    }

    static nu.xom.Attribute build(java.lang.String, java.lang.String, java.lang.String, nu.xom.Attribute$Type, java.lang.String)
    {
        nu.xom.Attribute $r0;
        nu.xom.Attribute$Type r6;
        int $i0;
        java.lang.String r1, r2, r3, $r4, r5, r7;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: nu.xom.Attribute$Type;

        r2 := @parameter4: java.lang.String;

        $r0 = new nu.xom.Attribute;

        specialinvoke $r0.<nu.xom.Attribute: void <init>()>();

        r7 = "";

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = "xml:id";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r6 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        r5 = staticinvoke <nu.xom.Attribute: java.lang.String normalize(java.lang.String)>(r5);

     label1:
        $r0.<nu.xom.Attribute: java.lang.String localName> = r2;

        $r0.<nu.xom.Attribute: java.lang.String prefix> = r7;

        $r0.<nu.xom.Attribute: nu.xom.Attribute$Type type> = r6;

        $r0.<nu.xom.Attribute: java.lang.String URI> = r3;

        $r0.<nu.xom.Attribute: java.lang.String value> = r5;

        return $r0;
    }

    private static java.lang.String normalize(java.lang.String)
    {
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i2, $i3, i7, i8, i9, $i10, $i11, $i13, $i14;
        java.lang.String $r0, $r1, $r3, r4;
        boolean z0;
        char $c4, $c5, $c6;

        r4 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        i7 = 0;

     label1:
        if i7 >= $i0 goto label2;

        $c6 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c6;

        if $i10 != 32 goto label2;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(i7);

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        i8 = $i1 - 1;

     label3:
        if i8 <= 0 goto label4;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i8);

        $i11 = (int) $c5;

        if $i11 != 32 goto label4;

        $i13 = (int) -1;

        i8 = i8 + $i13;

        goto label3;

     label4:
        $i2 = i8 + 1;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i3);

        z0 = 0;

        i9 = 0;

     label5:
        if i9 >= $i3 goto label9;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i9);

        $i14 = (int) $c4;

        if $i14 != 32 goto label7;

        if z0 == 0 goto label6;

        goto label8;

     label6:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        z0 = 1;

        goto label8;

     label7:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        z0 = 0;

     label8:
        i9 = i9 + 1;

        goto label5;

     label9:
        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public final nu.xom.Attribute$Type getType()
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type $r1;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: nu.xom.Attribute$Type type>;

        return $r1;
    }

    public void setType(nu.xom.Attribute$Type)
    {
        nu.xom.IllegalDataException $r3;
        java.lang.NullPointerException $r8;
        nu.xom.Attribute r1;
        nu.xom.Attribute$Type r0, $r2;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0, $z1;

        r1 := @this: nu.xom.Attribute;

        r0 := @parameter0: nu.xom.Attribute$Type;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null attribute type");

        throw $r8;

     label1:
        $z0 = specialinvoke r1.<nu.xom.Attribute: boolean isXMLID()>();

        if $z0 == 0 goto label2;

        $r2 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        $z1 = virtualinvoke $r2.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r3 = new nu.xom.IllegalDataException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t change type of xml:id attribute to ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<nu.xom.IllegalDataException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        specialinvoke r1.<nu.xom.Attribute: void _setType(nu.xom.Attribute$Type)>(r0);

        return;
    }

    private boolean isXMLID()
    {
        nu.xom.Attribute r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: nu.xom.Attribute;

        $r2 = "xml";

        $r1 = r0.<nu.xom.Attribute: java.lang.String prefix>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = "id";

        $r3 = r0.<nu.xom.Attribute: java.lang.String localName>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void _setType(nu.xom.Attribute$Type)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type r1;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: nu.xom.Attribute$Type;

        r0.<nu.xom.Attribute: nu.xom.Attribute$Type type> = r1;

        return;
    }

    public final java.lang.String getValue()
    {
        nu.xom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: java.lang.String value>;

        return $r1;
    }

    public void setValue(java.lang.String)
    {
        nu.xom.Attribute r0;
        java.lang.String r1;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Attribute: void _setValue(java.lang.String)>(r1);

        return;
    }

    private void _setValue(java.lang.String)
    {
        nu.xom.Attribute r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkPCDATA(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<nu.xom.Attribute: boolean isXMLID()>();

        if $z0 == 0 goto label1;

        r1 = staticinvoke <nu.xom.Attribute: java.lang.String normalize(java.lang.String)>(r1);

     label1:
        r0.<nu.xom.Attribute: java.lang.String value> = r1;

        return;
    }

    public final java.lang.String getLocalName()
    {
        nu.xom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: java.lang.String localName>;

        return $r1;
    }

    public void setLocalName(java.lang.String)
    {
        nu.xom.Attribute r2;
        nu.xom.Attribute$Type $r3;
        java.lang.String r0, $r1, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: nu.xom.Attribute;

        r0 := @parameter0: java.lang.String;

        $r1 = "id";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r5 = "http://www.w3.org/XML/1998/namespace";

        $r4 = r2.<nu.xom.Attribute: java.lang.String URI>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $r6 = r2.<nu.xom.Attribute: java.lang.String value>;

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>($r6);

     label1:
        specialinvoke r2.<nu.xom.Attribute: void _setLocalName(java.lang.String)>(r0);

        $z2 = specialinvoke r2.<nu.xom.Attribute: boolean isXMLID()>();

        if $z2 == 0 goto label2;

        $r3 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        virtualinvoke r2.<nu.xom.Attribute: void setType(nu.xom.Attribute$Type)>($r3);

     label2:
        return;
    }

    private void _setLocalName(java.lang.String)
    {
        nu.xom.Attribute r1;
        java.lang.String r0;
        boolean $z0;
        nu.xom.IllegalNameException $r2;

        r1 := @this: nu.xom.Attribute;

        r0 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r0);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label1;

        $r2 = new nu.xom.IllegalNameException;

        specialinvoke $r2.<nu.xom.IllegalNameException: void <init>(java.lang.String)>("The Attribute class is not used for namespace declaration attributes.");

        throw $r2;

     label1:
        r1.<nu.xom.Attribute: java.lang.String localName> = r0;

        return;
    }

    public final java.lang.String getQualifiedName()
    {
        nu.xom.Attribute r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        int $i0;
        java.lang.String $r1, $r3, $r6, $r8, $r9;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: java.lang.String prefix>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r9 = r0.<nu.xom.Attribute: java.lang.String localName>;

        return $r9;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<nu.xom.Attribute: java.lang.String prefix>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = r0.<nu.xom.Attribute: java.lang.String localName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public final java.lang.String getNamespaceURI()
    {
        nu.xom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: java.lang.String URI>;

        return $r1;
    }

    public final java.lang.String getNamespacePrefix()
    {
        nu.xom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Attribute: java.lang.String prefix>;

        return $r1;
    }

    public void setNamespace(java.lang.String, java.lang.String)
    {
        nu.xom.Attribute r0;
        nu.xom.Attribute$Type $r3;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: nu.xom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<nu.xom.Attribute: void _setNamespace(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = specialinvoke r0.<nu.xom.Attribute: boolean isXMLID()>();

        if $z0 == 0 goto label1;

        $r3 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        virtualinvoke r0.<nu.xom.Attribute: void setType(nu.xom.Attribute$Type)>($r3);

     label1:
        return;
    }

    private void _setNamespace(java.lang.String, java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        nu.xom.Element r2;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r12, $r13, $r15, $r16, $r17, $r20, $r21, $r22, $r25, $r26, $r27;
        int $i0, $i1, $i2;
        nu.xom.ParentNode $r1;
        java.lang.String $r3, $r9, $r14, $r18, $r23, $r28, r30, r31;
        nu.xom.Attribute r0;
        nu.xom.NamespaceConflictException $r4, $r10, $r11, $r19, $r24;
        nu.xom.IllegalNameException $r29;

        r0 := @this: nu.xom.Attribute;

        r30 := @parameter0: java.lang.String;

        r31 := @parameter1: java.lang.String;

        if r31 != null goto label1;

        r31 = "";

     label1:
        if r30 != null goto label2;

        r30 = "";

     label2:
        $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label3;

        $r29 = new nu.xom.IllegalNameException;

        specialinvoke $r29.<nu.xom.IllegalNameException: void <init>(java.lang.String)>("Attribute objects are not used to represent  namespace declarations");

        throw $r29;

     label3:
        $z1 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z1 == 0 goto label4;

        $z5 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z5 != 0 goto label4;

        $r24 = new nu.xom.NamespaceConflictException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong namespace URI for xml prefix: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r31);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label4:
        $z2 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label5;

        $z4 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z4 != 0 goto label5;

        $r19 = new nu.xom.NamespaceConflictException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong prefix for the XML namespace: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label5:
        $i0 = virtualinvoke r30.<java.lang.String: int length()>();

        if $i0 != 0 goto label7;

        $i2 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

        r0.<nu.xom.Attribute: java.lang.String prefix> = "";

        r0.<nu.xom.Attribute: java.lang.String URI> = "";

        return;

     label6:
        $r11 = new nu.xom.NamespaceConflictException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unprefixed attribute ");

        $r14 = r0.<nu.xom.Attribute: java.lang.String localName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be in default namespace ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r31);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r18);

        throw $r11;

     label7:
        $i1 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i1 != 0 goto label8;

        $r10 = new nu.xom.NamespaceConflictException;

        specialinvoke $r10.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>("Attribute prefixes must be declared.");

        throw $r10;

     label8:
        $r1 = virtualinvoke r0.<nu.xom.Attribute: nu.xom.ParentNode getParent()>();

        if $r1 == null goto label9;

        r2 = (nu.xom.Element) $r1;

        $r3 = virtualinvoke r2.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r30);

        if $r3 == null goto label9;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r31);

        if $z3 != 0 goto label9;

        $r4 = new nu.xom.NamespaceConflictException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("New prefix ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("conflicts with existing namespace declaration");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label9:
        staticinvoke <nu.xom.Verifier: void checkAbsoluteURIReference(java.lang.String)>(r31);

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r30);

        r0.<nu.xom.Attribute: java.lang.String URI> = r31;

        r0.<nu.xom.Attribute: java.lang.String prefix> = r30;

        return;
    }

    public final nu.xom.Node getChild(int)
    {
        nu.xom.Attribute r1;
        int i0;
        java.lang.IndexOutOfBoundsException $r0;

        r1 := @this: nu.xom.Attribute;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Attributes do not have children");

        throw $r0;
    }

    public final int getChildCount()
    {
        nu.xom.Attribute r0;

        r0 := @this: nu.xom.Attribute;

        return 0;
    }

    public nu.xom.Node copy()
    {
        nu.xom.Attribute $r0, r1;

        r1 := @this: nu.xom.Attribute;

        $r0 = new nu.xom.Attribute;

        specialinvoke $r0.<nu.xom.Attribute: void <init>(nu.xom.Attribute)>(r1);

        return $r0;
    }

    public final java.lang.String toXML()
    {
        nu.xom.Attribute r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r5, $r6, $r9;

        r1 := @this: nu.xom.Attribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r5 = r1.<nu.xom.Attribute: java.lang.String value>;

        $r6 = staticinvoke <nu.xom.Attribute: java.lang.String escapeText(java.lang.String)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public final java.lang.String toString()
    {
        nu.xom.Attribute r2;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r8, $r9, $r12, $r13;
        java.lang.Class $r3;
        java.lang.String $r4, $r7, $r10, $r11, $r14;

        r2 := @this: nu.xom.Attribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = virtualinvoke r2.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r10 = virtualinvoke r2.<nu.xom.Attribute: java.lang.String getValue()>();

        $r11 = staticinvoke <nu.xom.Text: java.lang.String escapeLineBreaksAndTruncate(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    private static java.lang.String escapeText(java.lang.String)
    {
        char $c2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, i3, $i4;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuffer;

        $i1 = $i0 + 12;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i1);

        i3 = 0;

     label01:
        if i3 >= $i0 goto label58;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        tableswitch($i4)
        {
            case 9: goto label02;
            case 10: goto label03;
            case 11: goto label04;
            case 12: goto label05;
            case 13: goto label06;
            case 14: goto label07;
            case 15: goto label08;
            case 16: goto label09;
            case 17: goto label10;
            case 18: goto label11;
            case 19: goto label12;
            case 20: goto label13;
            case 21: goto label14;
            case 22: goto label15;
            case 23: goto label16;
            case 24: goto label17;
            case 25: goto label18;
            case 26: goto label19;
            case 27: goto label20;
            case 28: goto label21;
            case 29: goto label22;
            case 30: goto label23;
            case 31: goto label24;
            case 32: goto label25;
            case 33: goto label26;
            case 34: goto label27;
            case 35: goto label28;
            case 36: goto label29;
            case 37: goto label30;
            case 38: goto label31;
            case 39: goto label32;
            case 40: goto label33;
            case 41: goto label34;
            case 42: goto label35;
            case 43: goto label36;
            case 44: goto label37;
            case 45: goto label38;
            case 46: goto label39;
            case 47: goto label40;
            case 48: goto label41;
            case 49: goto label42;
            case 50: goto label43;
            case 51: goto label44;
            case 52: goto label45;
            case 53: goto label46;
            case 54: goto label47;
            case 55: goto label48;
            case 56: goto label49;
            case 57: goto label50;
            case 58: goto label51;
            case 59: goto label52;
            case 60: goto label53;
            case 61: goto label54;
            case 62: goto label55;
            default: goto label56;
        };

     label02:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x09;");

        goto label57;

     label03:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x0A;");

        goto label57;

     label04:
        goto label57;

     label05:
        goto label57;

     label06:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x0D;");

        goto label57;

     label07:
        goto label57;

     label08:
        goto label57;

     label09:
        goto label57;

     label10:
        goto label57;

     label11:
        goto label57;

     label12:
        goto label57;

     label13:
        goto label57;

     label14:
        goto label57;

     label15:
        goto label57;

     label16:
        goto label57;

     label17:
        goto label57;

     label18:
        goto label57;

     label19:
        goto label57;

     label20:
        goto label57;

     label21:
        goto label57;

     label22:
        goto label57;

     label23:
        goto label57;

     label24:
        goto label57;

     label25:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label57;

     label26:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

        goto label57;

     label27:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label57;

     label28:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        goto label57;

     label29:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        goto label57;

     label30:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);

        goto label57;

     label31:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label57;

     label32:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label57;

     label33:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        goto label57;

     label34:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label57;

     label35:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(42);

        goto label57;

     label36:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        goto label57;

     label37:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        goto label57;

     label38:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        goto label57;

     label39:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label57;

     label40:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        goto label57;

     label41:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label57;

     label42:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        goto label57;

     label43:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(50);

        goto label57;

     label44:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(51);

        goto label57;

     label45:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(52);

        goto label57;

     label46:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(53);

        goto label57;

     label47:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(54);

        goto label57;

     label48:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(55);

        goto label57;

     label49:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(56);

        goto label57;

     label50:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(57);

        goto label57;

     label51:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        goto label57;

     label52:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        goto label57;

     label53:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label57;

     label54:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        goto label57;

     label55:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label57;

     label56:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label57:
        i3 = i3 + 1;

        goto label01;

     label58:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    boolean isAttribute()
    {
        nu.xom.Attribute r0;

        r0 := @this: nu.xom.Attribute;

        return 1;
    }
}
