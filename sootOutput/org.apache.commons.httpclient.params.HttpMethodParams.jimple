public class org.apache.commons.httpclient.params.HttpMethodParams extends org.apache.commons.httpclient.params.DefaultHttpParams
{
    private static final org.apache.commons.logging.Log LOG;
    public static final java.lang.String USER_AGENT;
    public static final java.lang.String PROTOCOL_VERSION;
    public static final java.lang.String UNAMBIGUOUS_STATUS_LINE;
    public static final java.lang.String SINGLE_COOKIE_HEADER;
    public static final java.lang.String STRICT_TRANSFER_ENCODING;
    public static final java.lang.String REJECT_HEAD_BODY;
    public static final java.lang.String HEAD_BODY_CHECK_TIMEOUT;
    public static final java.lang.String USE_EXPECT_CONTINUE;
    public static final java.lang.String CREDENTIAL_CHARSET;
    public static final java.lang.String HTTP_ELEMENT_CHARSET;
    public static final java.lang.String HTTP_URI_CHARSET;
    public static final java.lang.String HTTP_CONTENT_CHARSET;
    public static final java.lang.String COOKIE_POLICY;
    public static final java.lang.String WARN_EXTRA_INPUT;
    public static final java.lang.String STATUS_LINE_GARBAGE_LIMIT;
    public static final java.lang.String SO_TIMEOUT;
    public static final java.lang.String DATE_PATTERNS;
    public static final java.lang.String RETRY_HANDLER;
    public static final java.lang.String BUFFER_WARN_TRIGGER_LIMIT;
    public static final java.lang.String VIRTUAL_HOST;
    public static final java.lang.String MULTIPART_BOUNDARY;
    private static final java.lang.String[] PROTOCOL_STRICTNESS_PARAMETERS;
    static java.lang.Class class$org$apache$commons$httpclient$params$HttpMethodParams;

    public void <init>()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        org.apache.commons.httpclient.params.HttpParams $r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = staticinvoke <org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>();

        specialinvoke r0.<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>($r1);

        return;
    }

    public void <init>(org.apache.commons.httpclient.params.HttpParams)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        org.apache.commons.httpclient.params.HttpParams r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: org.apache.commons.httpclient.params.HttpParams;

        specialinvoke r0.<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>(r1);

        return;
    }

    public java.lang.String getHttpElementCharset()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.element-charset");

        r3 = (java.lang.String) $r1;

        if r3 != null goto label1;

        $r2 = <org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("HTTP element charset not configured, using US-ASCII");

        r3 = "US-ASCII";

     label1:
        return r3;
    }

    public void setHttpElementCharset(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.element-charset", r1);

        return;
    }

    public java.lang.String getContentCharset()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.content-charset");

        r3 = (java.lang.String) $r1;

        if r3 != null goto label1;

        $r2 = <org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Default content charset not configured, using ISO-8859-1");

        r3 = "ISO-8859-1";

     label1:
        return r3;
    }

    public void setUriCharset(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.uri-charset", r1);

        return;
    }

    public java.lang.String getUriCharset()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.uri-charset");

        r2 = (java.lang.String) $r1;

        if r2 != null goto label1;

        r2 = "UTF-8";

     label1:
        return r2;
    }

    public void setContentCharset(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.content-charset", r1);

        return;
    }

    public java.lang.String getCredentialCharset()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.credential-charset");

        r3 = (java.lang.String) $r1;

        if r3 != null goto label1;

        $r2 = <org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credential charset not configured, using HTTP element charset");

        r3 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

     label1:
        return r3;
    }

    public void setCredentialCharset(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.credential-charset", r1);

        return;
    }

    public org.apache.commons.httpclient.HttpVersion getVersion()
    {
        org.apache.commons.httpclient.HttpVersion $r2, $r3;
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.version");

        if $r1 != null goto label1;

        $r3 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        return $r3;

     label1:
        $r2 = (org.apache.commons.httpclient.HttpVersion) $r1;

        return $r2;
    }

    public void setVersion(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        org.apache.commons.httpclient.HttpVersion r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.version", r1);

        return;
    }

    public java.lang.String getCookiePolicy()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.protocol.cookie-policy");

        if $r1 != null goto label1;

        return "default";

     label1:
        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public void setCookiePolicy(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.protocol.cookie-policy", r1);

        return;
    }

    public int getSoTimeout()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.socket.timeout", 0);

        return $i0;
    }

    public void setSoTimeout(int)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setIntParameter(java.lang.String,int)>("http.socket.timeout", i0);

        return;
    }

    public void setVirtualHost(java.lang.String)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameter(java.lang.String,java.lang.Object)>("http.virtual-host", r1);

        return;
    }

    public java.lang.String getVirtualHost()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.virtual-host");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public void makeStrict()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Boolean $r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r2 = <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String[] PROTOCOL_STRICTNESS_PARAMETERS>;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameters(java.lang.String[],java.lang.Object)>($r2, $r1);

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setIntParameter(java.lang.String,int)>("http.protocol.status-line-garbage-limit", 0);

        return;
    }

    public void makeLenient()
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.Boolean $r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.httpclient.params.HttpMethodParams;

        $r2 = <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String[] PROTOCOL_STRICTNESS_PARAMETERS>;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setParameters(java.lang.String[],java.lang.Object)>($r2, $r1);

        virtualinvoke r0.<org.apache.commons.httpclient.params.HttpMethodParams: void setIntParameter(java.lang.String,int)>("http.protocol.status-line-garbage-limit", 2147483647);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r3;
        org.apache.commons.logging.Log $r1;
        java.lang.String[] $r2;

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String MULTIPART_BOUNDARY> = "http.method.multipart.boundary";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String VIRTUAL_HOST> = "http.virtual-host";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String BUFFER_WARN_TRIGGER_LIMIT> = "http.method.response.buffer.warnlimit";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String RETRY_HANDLER> = "http.method.retry-handler";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String DATE_PATTERNS> = "http.dateparser.patterns";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String SO_TIMEOUT> = "http.socket.timeout";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String STATUS_LINE_GARBAGE_LIMIT> = "http.protocol.status-line-garbage-limit";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String WARN_EXTRA_INPUT> = "http.protocol.warn-extra-input";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String COOKIE_POLICY> = "http.protocol.cookie-policy";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String HTTP_CONTENT_CHARSET> = "http.protocol.content-charset";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String HTTP_URI_CHARSET> = "http.protocol.uri-charset";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String HTTP_ELEMENT_CHARSET> = "http.protocol.element-charset";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String CREDENTIAL_CHARSET> = "http.protocol.credential-charset";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String USE_EXPECT_CONTINUE> = "http.protocol.expect-continue";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String HEAD_BODY_CHECK_TIMEOUT> = "http.protocol.head-body-timeout";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String REJECT_HEAD_BODY> = "http.protocol.reject-head-body";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String STRICT_TRANSFER_ENCODING> = "http.protocol.strict-transfer-encoding";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String SINGLE_COOKIE_HEADER> = "http.protocol.single-cookie-header";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String UNAMBIGUOUS_STATUS_LINE> = "http.protocol.unambiguous-statusline";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String PROTOCOL_VERSION> = "http.protocol.version";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String USER_AGENT> = "http.useragent";

        $r0 = <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$org$apache$commons$httpclient$params$HttpMethodParams>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.params.HttpMethodParams");

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$org$apache$commons$httpclient$params$HttpMethodParams> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$org$apache$commons$httpclient$params$HttpMethodParams>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        <org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.logging.Log LOG> = $r1;

        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "http.protocol.unambiguous-statusline";

        $r2[1] = "http.protocol.single-cookie-header";

        $r2[2] = "http.protocol.strict-transfer-encoding";

        $r2[3] = "http.protocol.reject-head-body";

        $r2[4] = "http.protocol.warn-extra-input";

        <org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String[] PROTOCOL_STRICTNESS_PARAMETERS> = $r2;

        return;
    }
}
