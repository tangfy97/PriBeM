public final class org.waveprotocol.wave.model.document.util.DocOpScrub extends java.lang.Object
{
    private static boolean shouldScrubByDefault;
    static final int CHARS_TO_LEAVE;
    static final char PSI;
    static final char JIA;
    static final char ARMENIAN;
    static final char WO;
    private static final org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber attrNameScrubber;
    private static final org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber annotationKeyScrubber;
    static final boolean $assertionsDisabled;

    public static void setShouldScrubByDefault(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault> = z0;

        return;
    }

    public static boolean shouldScrubByDefault()
    {
        boolean $z0;

        $z0 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault>;

        return $z0;
    }

    public static org.waveprotocol.wave.model.document.operation.DocOp scrub(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r0;
        org.waveprotocol.wave.model.document.operation.DocOpCursor $r2;
        org.waveprotocol.wave.model.document.operation.DocOp r1, $r3, $r11;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r5, $r10;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.operation.DocOpCursor createScrubber(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r2);

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: org.waveprotocol.wave.model.document.operation.DocOp finishUnchecked()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scrub exploded: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder characters(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        return $r11;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static org.waveprotocol.wave.model.document.operation.DocInitialization scrub(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.document.operation.DocInitialization r0, $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.operation.DocOp scrub(org.waveprotocol.wave.model.document.operation.DocOp)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: org.waveprotocol.wave.model.document.operation.DocInitialization asInitialization(org.waveprotocol.wave.model.document.operation.DocOp)>($r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.operation.DocOp maybeScrub(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r0, $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.operation.DocOp scrub(org.waveprotocol.wave.model.document.operation.DocOp)>(r0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static org.waveprotocol.wave.model.document.operation.DocInitialization maybeScrub(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization r0, $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $z0 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.operation.DocInitialization scrub(org.waveprotocol.wave.model.document.operation.DocInitialization)>(r0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static org.waveprotocol.wave.model.document.operation.DocOpCursor createScrubber(org.waveprotocol.wave.model.document.operation.DocOpCursor)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache $r0, $r2;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r5;
        org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber $r1, $r3;
        org.waveprotocol.wave.model.document.util.DocOpScrub$3 $r4;

        r5 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        $r0 = new org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        $r1 = <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber attrNameScrubber>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: void <init>(org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber)>($r1);

        $r2 = new org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        $r3 = <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber annotationKeyScrubber>;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: void <init>(org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber)>($r3);

        $r4 = new org.waveprotocol.wave.model.document.util.DocOpScrub$3;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.DocOpScrub$3: void <init>(org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache,org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache)>(r5, $r0, $r2);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap scrubAnnotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap, org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache r4;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r0;
        java.lang.String[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        r1 = newarray (java.lang.String)[$i0];

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        $i2 = $i1 * 3;

        r2 = newarray (java.lang.String)[$i2];

        i10 = 0;

     label1:
        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i10 >= $i3 goto label2;

        $r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i10);

        $r12 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: java.lang.String scrubUniquely(java.lang.String)>($r11);

        r1[i10] = $r12;

        i10 = i10 + 1;

        goto label1;

     label2:
        i11 = 0;

     label3:
        $i4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i11 >= $i4 goto label4;

        $i5 = i11 * 3;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i11);

        $r6 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: java.lang.String scrubUniquely(java.lang.String)>($r5);

        r2[$i5] = $r6;

        $i6 = i11 * 3;

        $i7 = $i6 + 1;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i11);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r7);

        r2[$i7] = $r8;

        $i8 = i11 * 3;

        $i9 = $i8 + 2;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i11);

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r9);

        r2[$i9] = $r10;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r3 = new org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary: void <init>(java.lang.String[],java.lang.String[])>(r2, r1);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.Attributes scrubAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache r8;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r7;
        java.util.ArrayList $r0;
        java.lang.String $r10, $r11, $r13, $r14;
        boolean $z0;
        java.util.Map$Entry r6;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.document.operation.Attributes r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r4;
        java.lang.Object $r5, $r9, $r12;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r8 := @parameter1: org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke r8.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: java.lang.String scrubUniquely(java.lang.String)>($r10);

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r12;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r13);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>($r11, $r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributesUnchecked(java.util.List)>($r0);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.operation.AttributesUpdate scrubAttributesUpdate(org.waveprotocol.wave.model.document.operation.AttributesUpdate, org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache r4;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r3;
        java.util.ArrayList $r0;
        int $i0, i1;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i1 >= $i0 goto label2;

        $r3 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i1);

        $r6 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: java.lang.String scrubUniquely(java.lang.String)>($r5);

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getOldValue(int)>(i1);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r7);

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i1);

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r9);

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r6, $r8, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromUnsortedUpdatesUnchecked(java.util.List)>($r0);

        return $r2;
    }

    public static java.lang.String scrubMostAnnotationKey(java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, i1, $i3;
        java.lang.StringBuilder $r6;
        java.lang.String r0, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $i3 = (int) -1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", $i3);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r4 = $r1[i1];

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubMostString(java.lang.String)>($r4);

        $r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.lang.String join(char,java.lang.String[])>(47, $r1);

        return $r3;
    }

    public static java.lang.String scrubMostString(java.lang.String)
    {
        java.lang.String[] $r9;
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r2, $r3, $r5, $r6, $r8, $r11, $r12, $r15, $r16, $r18;
        java.lang.StringBuilder $r4, $r7, $r13, $r14, $r17, $r19, $r20;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        $i4 = (int) -1;

        if $i0 == $i4 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(64);

        if $i2 != $i0 goto label2;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("@", 2);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r11 = $r9[0];

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubString(java.lang.String)>($r11);

        $r13 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r15 = $r9[1];

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubString(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 < 3 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubString(java.lang.String,boolean)>($r2, 0);

        $r4 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(3);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubString(java.lang.String,boolean)>($r5, 1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        return r0;
    }

    public static java.lang.String scrubString(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: java.lang.String scrubString(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    static java.lang.String scrubString(java.lang.String, boolean)
    {
        char $c2, $c3;
        int $i0, $i1, i4;
        char[] r1;
        java.lang.String r0, $r2;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[$i0];

        i4 = 0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i1 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $c3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: char scrubChar(char,boolean)>($c2, z0);

        r1[i4] = $c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    static char scrubChar(char, boolean)
    {
        org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult $r1;
        java.lang.AssertionError $r4, $r5;
        int[] $r0;
        int $i1, $i2, $i4, $i5;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        char c0, $c3;

        c0 := @parameter0: char;

        z2 := @parameter1: boolean;

        $z0 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i4 = (int) c0;

        $z6 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isCodePoint(int)>($i4);

        if $z6 != 0 goto label01;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("isCodePoint() should always be true for char");

        throw $r4;

     label01:
        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isSurrogate(char)>(c0);

        if $z1 == 0 goto label04;

        $z3 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isHighSurrogate(char)>(c0);

        if $z3 == 0 goto label02;

        return 60;

     label02:
        $z4 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean $assertionsDisabled>;

        if $z4 != 0 goto label03;

        $z5 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isLowSurrogate(char)>(c0);

        if $z5 != 0 goto label03;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label03:
        return 62;

     label04:
        $r0 = <org.waveprotocol.wave.model.document.util.DocOpScrub$4: int[] $SwitchMap$org$waveprotocol$wave$model$util$Utf16Util$BlipCodePointResult>;

        $i5 = (int) c0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult isCodePointGoodForBlip(int)>($i5);

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult: int ordinal()>();

        $i2 = $r0[$i1];

        tableswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label05:
        if z2 == 0 goto label06;

        $c3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: char scrubValidChar(char)>(c0);

        goto label07;

     label06:
        $c3 = c0;

     label07:
        return $c3;

     label08:
        return 124;

     label09:
        return 94;

     label10:
        return 33;

     label11:
        return 35;
    }

    private static char scrubValidChar(char)
    {
        boolean $z0;
        java.lang.AssertionError $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39;
        char c0;

        c0 := @parameter0: char;

        $z0 = <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i1 = (int) c0;

        if $i1 >= 32 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $i2 = (int) c0;

        if $i2 > 127 goto label02;

        return 97;

     label02:
        $i3 = (int) c0;

        if $i3 > 255 goto label03;

        return 98;

     label03:
        $i4 = (int) c0;

        if $i4 > 383 goto label04;

        return 99;

     label04:
        $i5 = (int) c0;

        if $i5 > 591 goto label05;

        return 100;

     label05:
        $i6 = (int) c0;

        if 11360 > $i6 goto label06;

        $i7 = (int) c0;

        if $i7 > 11391 goto label06;

        return 101;

     label06:
        $i9 = (int) 42784;

        $i10 = (int) c0;

        if $i9 > $i10 goto label07;

        $i11 = (int) c0;

        $i13 = (int) 43007;

        if $i11 > $i13 goto label07;

        return 102;

     label07:
        $i14 = (int) c0;

        if $i14 > 687 goto label08;

        return 73;

     label08:
        $i15 = (int) c0;

        if $i15 > 767 goto label09;

        return 83;

     label09:
        $i16 = (int) c0;

        if $i16 > 879 goto label10;

        return 58;

     label10:
        $i17 = (int) c0;

        if $i17 > 1023 goto label11;

        return 968;

     label11:
        $i18 = (int) c0;

        if $i18 > 1327 goto label12;

        return 1071;

     label12:
        $i19 = (int) c0;

        if $i19 > 1423 goto label13;

        return 1364;

     label13:
        $i20 = (int) c0;

        if $i20 > 1535 goto label14;

        return 72;

     label14:
        $i21 = (int) c0;

        if $i21 > 1791 goto label15;

        return 65;

     label15:
        $i22 = (int) c0;

        if 2304 > $i22 goto label16;

        $i23 = (int) c0;

        if $i23 > 2431 goto label16;

        return 68;

     label16:
        $i24 = (int) c0;

        if 3584 > $i24 goto label17;

        $i25 = (int) c0;

        if $i25 > 3711 goto label17;

        return 84;

     label17:
        $i26 = (int) c0;

        if 4352 > $i26 goto label18;

        $i27 = (int) c0;

        if $i27 > 4607 goto label18;

        return 75;

     label18:
        $i28 = (int) c0;

        if 8352 > $i28 goto label19;

        $i29 = (int) c0;

        if $i29 > 11263 goto label19;

        return 37;

     label19:
        $i30 = (int) c0;

        if 11904 > $i30 goto label20;

        $i31 = (int) c0;

        if $i31 <= 12031 goto label22;

     label20:
        $i32 = (int) c0;

        if 12288 > $i32 goto label21;

        $i33 = (int) c0;

        if $i33 <= 12351 goto label22;

     label21:
        $i34 = (int) c0;

        if 12800 > $i34 goto label23;

        $i35 = (int) c0;

        $i37 = (int) 40959;

        if $i35 > $i37 goto label23;

     label22:
        return 25105;

     label23:
        $i38 = (int) c0;

        if 12352 > $i38 goto label24;

        $i39 = (int) c0;

        if $i39 > 12543 goto label24;

        return 74;

     label24:
        return 63;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.model.document.util.DocOpScrub$1 $r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$2 $r2;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: char WO> = 25105;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: char ARMENIAN> = 1364;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: char JIA> = 1071;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: char PSI> = 968;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: int CHARS_TO_LEAVE> = 3;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/DocOpScrub;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean $assertionsDisabled> = $z1;

        <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault> = 1;

        $r1 = new org.waveprotocol.wave.model.document.util.DocOpScrub$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.DocOpScrub$1: void <init>()>();

        <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber attrNameScrubber> = $r1;

        $r2 = new org.waveprotocol.wave.model.document.util.DocOpScrub$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.DocOpScrub$2: void <init>()>();

        <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber annotationKeyScrubber> = $r2;

        return;
    }
}
