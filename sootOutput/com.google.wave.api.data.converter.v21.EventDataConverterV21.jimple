public class com.google.wave.api.data.converter.v21.EventDataConverterV21 extends java.lang.Object implements com.google.wave.api.data.converter.EventDataConverter
{

    public void <init>()
    {
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r0;

        r0 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.wave.api.impl.WaveletData toWaveletData(org.waveprotocol.wave.model.wave.Wavelet, org.waveprotocol.wave.model.conversation.Conversation, com.google.wave.api.impl.EventMessageBundle)
    {
        com.google.wave.api.impl.EventMessageBundle r38;
        org.waveprotocol.wave.model.wave.ParticipantId $r2, r40;
        org.waveprotocol.wave.model.conversation.Conversation r13;
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveId $r5;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r35;
        java.util.Set $r11, $r18, $r23;
        java.util.List $r12;
        org.waveprotocol.wave.model.account.DocumentBasedRoles $r22;
        org.waveprotocol.wave.model.conversation.TagsDocument $r29;
        long $l0, $l1, $l2;
        org.waveprotocol.wave.model.id.WaveletId $r8;
        java.lang.String[] $r33;
        com.google.wave.api.impl.WaveletData $r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r15;
        com.google.wave.api.data.converter.v21.EventDataConverterV21$1 $r31;
        int $i3;
        java.lang.String $r3, $r6, $r9, $r16, $r17, $r26, $r28, $r36, $r37, r39;
        org.waveprotocol.wave.model.id.IdSerialiser $r4, $r7;
        org.waveprotocol.wave.model.document.ObservableDocument $r20, $r21, $r30, $r34;
        java.util.Iterator $r19, $r24;
        org.waveprotocol.wave.model.conversation.ConversationThread $r14;
        org.waveprotocol.wave.model.account.Role $r27;
        org.waveprotocol.wave.model.wave.Wavelet r1;
        java.lang.Object $r25, $r32;

        r10 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        r13 := @parameter1: org.waveprotocol.wave.model.conversation.Conversation;

        r38 := @parameter2: com.google.wave.api.impl.EventMessageBundle;

        $r0 = new com.google.wave.api.impl.WaveletData;

        specialinvoke $r0.<com.google.wave.api.impl.WaveletData: void <init>()>();

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getCreationTime()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setCreationTime(long)>($l0);

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.wave.ParticipantId getCreatorId()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setCreator(java.lang.String)>($r3);

        $r4 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.id.IdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>($r5);

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setWaveId(java.lang.String)>($r6);

        $r7 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.id.IdSerialiser: java.lang.String serialiseWaveletId(org.waveprotocol.wave.model.id.WaveletId)>($r8);

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setWaveletId(java.lang.String)>($r9);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getLastModifiedTime()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setLastModifiedTime(long)>($l1);

        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: java.util.Set getParticipantIds()>();

        $r12 = virtualinvoke r10.<com.google.wave.api.data.converter.v21.EventDataConverterV21: java.util.List idsToParticipantIdList(java.util.Collection)>($r11);

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setParticipants(java.util.List)>($r12);

        $r14 = interfaceinvoke r13.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()>();

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setRootBlipId(java.lang.String)>($r16);

        $r17 = staticinvoke <com.google.wave.api.data.converter.v21.EventDataConverterV21: java.lang.String getTitle(org.waveprotocol.wave.model.wave.Wavelet,org.waveprotocol.wave.model.conversation.Conversation)>(r1, r13);

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setTitle(java.lang.String)>($r17);

        $l2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setVersion(long)>($l2);

        $r18 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: java.util.Set getDocumentIds()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r32 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r39 = (java.lang.String) $r32;

        $z2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isRobotDocId(java.lang.String)>(r39);

        if $z2 == 0 goto label2;

        $r33 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String[] split(java.lang.String)>(r39);

        $i3 = lengthof $r33;

        if $i3 != 2 goto label2;

        $r34 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>(r39);

        $r35 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r34);

        $r36 = virtualinvoke $r35.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String getXmlString()>();

        $r37 = $r33[1];

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setDataDocument(java.lang.String,java.lang.String)>($r37, $r36);

     label2:
        goto label1;

     label3:
        $r20 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("tags");

        if $r20 == null goto label4;

        $r29 = new org.waveprotocol.wave.model.conversation.TagsDocument;

        $r30 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("tags");

        specialinvoke $r29.<org.waveprotocol.wave.model.conversation.TagsDocument: void <init>(org.waveprotocol.wave.model.document.MutableDocument)>($r30);

        $r31 = new com.google.wave.api.data.converter.v21.EventDataConverterV21$1;

        specialinvoke $r31.<com.google.wave.api.data.converter.v21.EventDataConverterV21$1: void <init>(com.google.wave.api.data.converter.v21.EventDataConverterV21,com.google.wave.api.impl.WaveletData)>(r10, $r0);

        virtualinvoke $r29.<org.waveprotocol.wave.model.conversation.TagsDocument: void addListener(org.waveprotocol.wave.model.conversation.TagsDocument$Listener)>($r31);

        virtualinvoke $r29.<org.waveprotocol.wave.model.conversation.TagsDocument: void processInitialState()>();

     label4:
        $r21 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("roles");

        if $r21 == null goto label6;

        $r22 = staticinvoke <org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.DocumentBasedRoles create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r21);

        $r23 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: java.util.Set getParticipantIds()>();

        $r24 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.waveprotocol.wave.model.wave.ParticipantId) $r25;

        $r26 = virtualinvoke r40.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r27 = virtualinvoke $r22.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)>(r40);

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.model.account.Role: java.lang.String name()>();

        virtualinvoke $r0.<com.google.wave.api.impl.WaveletData: void setParticipantRole(java.lang.String,java.lang.String)>($r26, $r28);

        goto label5;

     label6:
        return $r0;
    }

    public com.google.wave.api.BlipData toBlipData(org.waveprotocol.wave.model.conversation.ConversationBlip, org.waveprotocol.wave.model.wave.Wavelet, com.google.wave.api.impl.EventMessageBundle)
    {
        com.google.wave.api.impl.EventMessageBundle r25;
        long $l0, $l1;
        org.waveprotocol.wave.model.id.WaveletId $r14;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1, $r2;
        com.google.wave.api.data.ApiView $r18;
        java.util.Map $r24;
        java.lang.String $r5, $r8, $r12, $r15, $r20, $r26;
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r0;
        org.waveprotocol.wave.model.id.IdSerialiser $r9, $r13;
        org.waveprotocol.wave.model.id.WaveId $r11;
        java.util.Set $r6;
        org.waveprotocol.wave.model.document.Document $r19, $r21, $r23;
        java.util.List $r7, $r16, $r17, $r22;
        org.waveprotocol.wave.model.wave.Wavelet r10;
        com.google.wave.api.BlipData $r3;

        r0 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        r10 := @parameter1: org.waveprotocol.wave.model.wave.Wavelet;

        r25 := @parameter2: com.google.wave.api.impl.EventMessageBundle;

        $r2 = virtualinvoke r0.<com.google.wave.api.data.converter.v21.EventDataConverterV21: org.waveprotocol.wave.model.conversation.ConversationBlip findBlipParent(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        $r3 = new com.google.wave.api.BlipData;

        specialinvoke $r3.<com.google.wave.api.BlipData: void <init>()>();

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.wave.ParticipantId getAuthorId()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setCreator(java.lang.String)>($r5);

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.util.Set getContributorIds()>();

        $r7 = virtualinvoke r0.<com.google.wave.api.data.converter.v21.EventDataConverterV21: java.util.List idsToParticipantIdList(java.util.Collection)>($r6);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setContributors(java.util.List)>($r7);

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setBlipId(java.lang.String)>($r8);

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: long getLastModifiedTime()>();

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setLastModifiedTime(long)>($l0);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: long getLastModifiedVersion()>();

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setVersion(long)>($l1);

        if $r2 != null goto label1;

        $r26 = null;

        goto label2;

     label1:
        $r26 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

     label2:
        virtualinvoke $r3.<com.google.wave.api.BlipData: void setParentBlipId(java.lang.String)>($r26);

        $r9 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r11 = interfaceinvoke r10.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r12 = interfaceinvoke $r9.<org.waveprotocol.wave.model.id.IdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>($r11);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setWaveId(java.lang.String)>($r12);

        $r13 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r14 = interfaceinvoke r10.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r15 = interfaceinvoke $r13.<org.waveprotocol.wave.model.id.IdSerialiser: java.lang.String serialiseWaveletId(org.waveprotocol.wave.model.id.WaveletId)>($r14);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setWaveletId(java.lang.String)>($r15);

        $r16 = virtualinvoke r0.<com.google.wave.api.data.converter.v21.EventDataConverterV21: java.util.List findBlipChildren(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        $r17 = staticinvoke <com.google.wave.api.data.converter.v21.EventDataConverterV21: java.util.List toBlipIdList(java.util.List)>($r16);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setChildBlipIds(java.util.List)>($r17);

        $r18 = new com.google.wave.api.data.ApiView;

        $r19 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        specialinvoke $r18.<com.google.wave.api.data.ApiView: void <init>(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.wave.Wavelet)>($r19, r10);

        $r20 = virtualinvoke $r18.<com.google.wave.api.data.ApiView: java.lang.String apiContents()>();

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setContent(java.lang.String)>($r20);

        $r21 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r22 = staticinvoke <com.google.wave.api.data.converter.v21.EventDataConverterV21: java.util.List extractAnnotations(org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView)>($r21, $r18);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setAnnotations(java.util.List)>($r22);

        $r23 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r24 = staticinvoke <com.google.wave.api.data.ElementSerializer: java.util.Map serialize(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.wave.Wavelet)>($r23, r10);

        virtualinvoke $r3.<com.google.wave.api.BlipData: void setElements(java.util.Map)>($r24);

        return $r3;
    }

    public java.util.List findBlipChildren(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.conversation.ConversationThread r6;
        java.lang.Iterable $r3;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1, $r2, $r7, $r8;
        java.lang.Object $r5;
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r9;
        boolean $z0;

        r9 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = staticinvoke <com.google.wave.api.data.converter.v21.EventDataConverterV21: org.waveprotocol.wave.model.conversation.ConversationBlip findNextSibling(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.ConversationThread) $r5;

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        if $r7 == null goto label3;

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label3:
        goto label2;

     label4:
        return $r0;
    }

    public org.waveprotocol.wave.model.conversation.ConversationBlip findBlipParent(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.ConversationThread $r1, $r5;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0, $r2, $r3, $r6;
        org.waveprotocol.wave.model.conversation.Conversation $r4;
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r7;

        r7 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread getThread()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        if $r2 != r0 goto label1;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()>();

        if $r1 == $r5 goto label1;

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getParentBlip()>();

        return $r6;

     label1:
        $r3 = staticinvoke <com.google.wave.api.data.converter.v21.EventDataConverterV21: org.waveprotocol.wave.model.conversation.ConversationBlip findPreviousSibling(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0);

        return $r3;
    }

    public java.util.List idsToParticipantIdList(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r5;
        com.google.wave.api.data.converter.v21.EventDataConverterV21 r6;
        boolean $z0;

        r6 := @this: com.google.wave.api.data.converter.v21.EventDataConverterV21;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.ParticipantId) $r3;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r1;
    }

    static org.waveprotocol.wave.model.conversation.ConversationBlip findPreviousSibling(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.conversation.ConversationThread $r1;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0, r5, r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread getThread()>();

        r6 = null;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.Iterable getBlips()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r4;

        if r5 != r0 goto label2;

        goto label3;

     label2:
        r6 = r5;

        goto label1;

     label3:
        return r6;
    }

    static org.waveprotocol.wave.model.conversation.ConversationBlip findNextSibling(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.conversation.ConversationThread $r1;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0, $r6;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1, z2;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread getThread()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.Iterable getBlips()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        z2 = 0;

     label1:
        if z2 != 0 goto label2;

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r5 != r0 goto label1;

        z2 = 1;

        goto label1;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r4;

        goto label4;

     label3:
        $r6 = null;

     label4:
        return $r6;
    }

    private static java.lang.String getTitle(org.waveprotocol.wave.model.wave.Wavelet, org.waveprotocol.wave.model.conversation.Conversation)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip $r2;
        org.waveprotocol.wave.model.wave.Wavelet r5;
        org.waveprotocol.wave.model.conversation.Conversation r0;
        org.waveprotocol.wave.model.conversation.ConversationThread $r1;
        org.waveprotocol.wave.model.document.Document $r3;
        java.lang.String $r4;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        r0 := @parameter1: org.waveprotocol.wave.model.conversation.Conversation;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()>();

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        if $r2 != null goto label2;

        return "";

     label2:
        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String extractTitle(org.waveprotocol.wave.model.document.ReadableWDocument)>($r3);

        return $r4;
    }

    private static java.util.List toBlipIdList(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r1;
        java.util.List r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r4;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r3;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r1;
    }

    private static java.util.List extractAnnotations(org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView)
    {
        java.lang.Iterable $r2;
        java.util.ArrayList $r0;
        com.google.wave.api.data.ApiView r8;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.wave.api.Annotation $r9;
        java.lang.String $r6, $r10, $r13;
        boolean $z0;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.Document r1;
        org.waveprotocol.wave.model.document.RangedAnnotation r5;
        com.google.wave.api.Range $r12;
        java.lang.Object $r4, $r7, $r11;

        r1 := @parameter0: org.waveprotocol.wave.model.document.Document;

        r8 := @parameter1: com.google.wave.api.data.ApiView;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.Document: int size()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.Document: java.lang.Iterable rangedAnnotations(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(0, $i0, null);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.document.RangedAnnotation) $r4;

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        if $r6 == null goto label2;

        $r7 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.Object value()>();

        if $r7 == null goto label2;

        $i1 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: int start()>();

        $i2 = virtualinvoke r8.<com.google.wave.api.data.ApiView: int transformToTextOffset(int)>($i1);

        $i3 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: int end()>();

        $i4 = virtualinvoke r8.<com.google.wave.api.data.ApiView: int transformToTextOffset(int)>($i3);

        $r9 = new com.google.wave.api.Annotation;

        $r10 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        $r11 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.Object value()>();

        $r13 = (java.lang.String) $r11;

        $r12 = new com.google.wave.api.Range;

        specialinvoke $r12.<com.google.wave.api.Range: void <init>(int,int)>($i2, $i4);

        specialinvoke $r9.<com.google.wave.api.Annotation: void <init>(java.lang.String,java.lang.String,com.google.wave.api.Range)>($r10, $r13, $r12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return $r0;
    }
}
