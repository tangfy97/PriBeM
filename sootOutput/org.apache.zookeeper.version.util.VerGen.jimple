public class org.apache.zookeeper.version.util.VerGen extends java.lang.Object
{
    private static final java.lang.String PACKAGE_NAME;
    private static final java.lang.String TYPE_NAME;

    public void <init>()
    {
        org.apache.zookeeper.version.util.VerGen r0;

        r0 := @this: org.apache.zookeeper.version.util.VerGen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void printUsage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("Usage:\tjava  -cp <classpath> org.apache.zookeeper.version.util.VerGen maj.min.micro[-qualifier] rev buildDate");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public static void generateFile(java.io.File, org.apache.zookeeper.version.util.VerGen$Version, int, java.lang.String)
    {
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r27, $r28, $r30, $r32, $r33, $r35, $r37, $r38, $r41, $r43, $r45, $r49, $r51, $r53, $r56, $r58, $r60, $r63, $r65, $r67, $r72, $r73, $r74, $r75, $r77, $r78, $r79, $r80, $r82, $r83, $r84, $r85, $r87;
        java.lang.Throwable $r47;
        java.lang.String $r0, $r1, $r8, $r13, $r18, r21, $r24, $r29, $r34, $r39, $r44, $r46, $r52, $r54, $r59, $r61, $r66, $r68, $r76, $r81, $r86, $r88, $r89;
        java.io.IOException $r40, $r48, $r55, $r62;
        java.io.File $r2, r3, $r69;
        boolean $z0, $z1, $z2;
        org.apache.zookeeper.version.util.VerGen$Version r4;
        int i0, $i1, $i2, $i3;
        java.io.PrintStream $r26, $r31, $r36, $r42, $r50, $r57, $r64;
        java.io.FileWriter r70, $r71;

        r3 := @parameter0: java.io.File;

        r4 := @parameter1: org.apache.zookeeper.version.util.VerGen$Version;

        i0 := @parameter2: int;

        r21 := @parameter3: java.lang.String;

        $r0 = "org.apache.zookeeper.version";

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label02;

        $z2 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label01;

        $r36 = <java.lang.System: java.io.PrintStream out>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannnot create directory: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r39);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label01:
        goto label03;

     label02:
        $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label03;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r34);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label03:
        $r69 = new java.io.File;

        specialinvoke $r69.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "Info.java");

        r70 = null;

     label04:
        $r71 = new java.io.FileWriter;

        specialinvoke $r71.<java.io.FileWriter: void <init>(java.io.File)>($r69);

        r70 = $r71;

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("// Do not edit!\n// File generated by org.apache.zookeeper.version.util.VerGen.\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("/**\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* Licensed to the Apache Software Foundation (ASF) under one\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* or more contributor license agreements.  See the NOTICE file\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* distributed with this work for additional information\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* regarding copyright ownership.  The ASF licenses this file\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* to you under the Apache License, Version 2.0 (the\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* \"License\"); you may not use this file except in compliance\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* with the License.  You may obtain a copy of the License at\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("*     http://www.apache.org/licenses/LICENSE-2.0\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* Unless required by applicable law or agreed to in writing, software\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* See the License for the specific language governing permissions and\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("* limitations under the License.\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("*/\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("package org.apache.zookeeper.version;\n\n");

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("public interface Info {\n");

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final int MAJOR=");

        $i1 = r4.<org.apache.zookeeper.version.util.VerGen$Version: int maj>;

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final int MINOR=");

        $i2 = r4.<org.apache.zookeeper.version.util.VerGen$Version: int min>;

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r81);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final int MICRO=");

        $i3 = r4.<org.apache.zookeeper.version.util.VerGen$Version: int micro>;

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r86);

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final String QUALIFIER=");

        $r88 = r4.<org.apache.zookeeper.version.util.VerGen$Version: java.lang.String qualifier>;

        if $r88 != null goto label05;

        $r89 = null;

        goto label06;

     label05:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = r4.<org.apache.zookeeper.version.util.VerGen$Version: java.lang.String qualifier>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r89 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r13);

        if i0 >= 0 goto label07;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown REVISION number, using ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r29);

     label07:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final int REVISION=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    public static final String BUILD_DATE=\"");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";\n");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>($r24);

        virtualinvoke $r71.<java.io.FileWriter: void write(java.lang.String)>("}\n");

     label08:
        if $r71 == null goto label23;

     label09:
        virtualinvoke $r71.<java.io.FileWriter: void close()>();

     label10:
        goto label23;

     label11:
        $r62 := @caughtexception;

        $r64 = <java.lang.System: java.io.PrintStream out>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close file writer");

        $r66 = virtualinvoke $r62.<java.io.IOException: java.lang.String getMessage()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r64.<java.io.PrintStream: void println(java.lang.String)>($r68);

        goto label23;

     label12:
        $r55 := @caughtexception;

        $r57 = <java.lang.System: java.io.PrintStream out>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to generate version.Info file: ");

        $r59 = virtualinvoke $r55.<java.io.IOException: java.lang.String getMessage()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r61);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label13:
        if r70 == null goto label23;

     label14:
        virtualinvoke r70.<java.io.FileWriter: void close()>();

     label15:
        goto label23;

     label16:
        $r48 := @caughtexception;

        $r50 = <java.lang.System: java.io.PrintStream out>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close file writer");

        $r52 = virtualinvoke $r48.<java.io.IOException: java.lang.String getMessage()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r54);

        goto label23;

     label17:
        $r47 := @caughtexception;

     label18:
        if r70 == null goto label22;

     label19:
        virtualinvoke r70.<java.io.FileWriter: void close()>();

     label20:
        goto label22;

     label21:
        $r40 := @caughtexception;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close file writer");

        $r44 = virtualinvoke $r40.<java.io.IOException: java.lang.String getMessage()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r46);

     label22:
        throw $r47;

     label23:
        return;

        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label04 to label08 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label04 to label08 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public static org.apache.zookeeper.version.util.VerGen$Version parseVersionString(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        org.apache.zookeeper.version.util.VerGen$Version $r0;
        int $i0, $i1, $i2, $i3;
        java.util.regex.Pattern $r1;
        java.lang.String r2, $r4, $r5, $r6, $r7;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.zookeeper.version.util.VerGen$Version;

        specialinvoke $r0.<org.apache.zookeeper.version.util.VerGen$Version: void <init>()>();

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d+).(\\d+).(\\d+)(-(.+))?$");

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r0.<org.apache.zookeeper.version.util.VerGen$Version: int maj> = $i0;

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r0.<org.apache.zookeeper.version.util.VerGen$Version: int min> = $i1;

        $r6 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r0.<org.apache.zookeeper.version.util.VerGen$Version: int micro> = $i2;

        $i3 = virtualinvoke $r3.<java.util.regex.Matcher: int groupCount()>();

        if $i3 != 5 goto label2;

        $r7 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        $r0.<org.apache.zookeeper.version.util.VerGen$Version: java.lang.String qualifier> = $r7;

        goto label3;

     label2:
        $r0.<org.apache.zookeeper.version.util.VerGen$Version: java.lang.String qualifier> = null;

     label3:
        return $r0;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r6, $r8;
        java.lang.String[] r0;
        java.lang.NumberFormatException $r7, $r9;
        java.io.File $r10;
        org.apache.zookeeper.version.util.VerGen$Version $r2;
        int $i0, i1, $i3;
        java.lang.String $r1, $r3, $r5;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        staticinvoke <org.apache.zookeeper.version.util.VerGen: void printUsage()>();

     label1:
        $r1 = r0[0];

        $r2 = staticinvoke <org.apache.zookeeper.version.util.VerGen: org.apache.zookeeper.version.util.VerGen$Version parseVersionString(java.lang.String)>($r1);

        if $r2 != null goto label2;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Invalid version number format, must be \"x.y.z(-.*)?\"");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label2:
        $r3 = r0[1];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $i3 = (int) -1;

        i1 = $i3;

     label5:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(".");

        $r5 = r0[2];

        staticinvoke <org.apache.zookeeper.version.util.VerGen: void generateFile(java.io.File,org.apache.zookeeper.version.util.VerGen$Version,int,java.lang.String)>($r10, $r2, i1, $r5);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("All version-related parameters must be valid integers!");

        throw $r7;

     label8:
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
        catch java.lang.NumberFormatException from label1 to label6 with label7;
    }

    public static void <clinit>()
    {
        <org.apache.zookeeper.version.util.VerGen: java.lang.String TYPE_NAME> = "Info";

        <org.apache.zookeeper.version.util.VerGen: java.lang.String PACKAGE_NAME> = "org.apache.zookeeper.version";

        return;
    }
}
