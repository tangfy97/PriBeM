final class org.apache.poi.ss.util.MutableFPNumber extends java.lang.Object
{
    private static final java.math.BigInteger BI_MIN_BASE;
    private static final java.math.BigInteger BI_MAX_BASE;
    private static final int C_64;
    private static final int MIN_PRECISION;
    private java.math.BigInteger _significand;
    private int _binaryExponent;

    public void <init>(java.math.BigInteger, int)
    {
        org.apache.poi.ss.util.MutableFPNumber r0;
        int i0;
        java.math.BigInteger r1;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        r1 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = r1;

        r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent> = i0;

        return;
    }

    public org.apache.poi.ss.util.MutableFPNumber copy()
    {
        org.apache.poi.ss.util.MutableFPNumber $r0, r1;
        int $i0;
        java.math.BigInteger $r2;

        r1 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $r0 = new org.apache.poi.ss.util.MutableFPNumber;

        $r2 = r1.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i0 = r1.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        specialinvoke $r0.<org.apache.poi.ss.util.MutableFPNumber: void <init>(java.math.BigInteger,int)>($r2, $i0);

        return $r0;
    }

    public void normalise64bit()
    {
        java.lang.IllegalStateException $r7, $r10;
        org.apache.poi.ss.util.MutableFPNumber r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $r1 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i8 = $i0;

        i9 = $i0 - 64;

        if i9 != 0 goto label1;

        return;

     label1:
        if i9 >= 0 goto label2;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not enough precision");

        throw $r10;

     label2:
        $i1 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $i2 = $i1 + i9;

        r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent> = $i2;

        if i9 <= 32 goto label3;

        $i6 = i9 - 1;

        i7 = $i6 & 16777184;

        $r8 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i7);

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = $r9;

        i9 = i9 - i7;

        i8 = $i0 - i7;

     label3:
        if i9 >= 1 goto label4;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label4:
        $r2 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r3 = staticinvoke <org.apache.poi.ss.util.MutableFPNumber$Rounder: java.math.BigInteger round(java.math.BigInteger,int)>($r2, i9);

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = $r3;

        $r4 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i3 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        if $i3 <= i8 goto label5;

        i9 = i9 + 1;

        $i4 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $i5 = $i4 + 1;

        r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent> = $i5;

     label5:
        $r5 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i9);

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = $r6;

        return;
    }

    public int get64BitNormalisedExponent()
    {
        org.apache.poi.ss.util.MutableFPNumber r0;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $i0 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $r1 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i2 = $i0 + $i1;

        $i3 = $i2 - 64;

        return $i3;
    }

    public boolean isBelowMaxRep()
    {
        org.apache.poi.ss.util.MutableFPNumber r0;
        int $i0, i1, $i2;
        java.math.BigInteger $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $r1 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i1 = $i0 - 64;

        $r3 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r2 = <org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger BI_MAX_BASE>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        $i2 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAboveMinRep()
    {
        org.apache.poi.ss.util.MutableFPNumber r0;
        int $i0, i1, $i2;
        java.math.BigInteger $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $r1 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i1 = $i0 - 64;

        $r3 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r2 = <org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger BI_MIN_BASE>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        $i2 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.poi.ss.util.NormalisedDecimal createNormalisedDecimal(int)
    {
        org.apache.poi.ss.util.NormalisedDecimal $r4;
        long $l8;
        org.apache.poi.ss.util.MutableFPNumber r0;
        int $i0, i1, $i2, $i3, i4, $i5, $i6, $i7, i9;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        i9 := @parameter0: int;

        $i0 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        i1 = $i0 - 39;

        $r1 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i2 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i3 = $i2 << i1;

        i4 = $i3 & 16777088;

        $r2 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i5 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $i6 = 64 - $i5;

        $i7 = $i6 - 1;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i7);

        $l8 = virtualinvoke $r3.<java.math.BigInteger: long longValue()>();

        $r4 = new org.apache.poi.ss.util.NormalisedDecimal;

        specialinvoke $r4.<org.apache.poi.ss.util.NormalisedDecimal: void <init>(long,int,int)>($l8, i4, i9);

        return $r4;
    }

    public void multiplyByPowerOfTen(int)
    {
        org.apache.poi.ss.util.MutableFPNumber$TenPower $r0;
        int i0, $i1, $i2, $i3;
        org.apache.poi.ss.util.MutableFPNumber r1;
        java.math.BigInteger $r2, $r3;

        r1 := @this: org.apache.poi.ss.util.MutableFPNumber;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $r0 = staticinvoke <org.apache.poi.ss.util.MutableFPNumber$TenPower: org.apache.poi.ss.util.MutableFPNumber$TenPower getInstance(int)>($i1);

        if i0 >= 0 goto label1;

        $r3 = $r0.<org.apache.poi.ss.util.MutableFPNumber$TenPower: java.math.BigInteger _divisor>;

        $i3 = $r0.<org.apache.poi.ss.util.MutableFPNumber$TenPower: int _divisorShift>;

        specialinvoke r1.<org.apache.poi.ss.util.MutableFPNumber: void mulShift(java.math.BigInteger,int)>($r3, $i3);

        goto label2;

     label1:
        $r2 = $r0.<org.apache.poi.ss.util.MutableFPNumber$TenPower: java.math.BigInteger _multiplicand>;

        $i2 = $r0.<org.apache.poi.ss.util.MutableFPNumber$TenPower: int _multiplierShift>;

        specialinvoke r1.<org.apache.poi.ss.util.MutableFPNumber: void mulShift(java.math.BigInteger,int)>($r2, $i2);

     label2:
        return;
    }

    private void mulShift(java.math.BigInteger, int)
    {
        org.apache.poi.ss.util.MutableFPNumber r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i9;
        java.math.BigInteger r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.poi.ss.util.MutableFPNumber;

        r1 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = $r3;

        $i1 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $i2 = $i1 + i0;

        r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent> = $i2;

        $r4 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i3 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        $i4 = $i3 - 72;

        $i9 = (int) -32;

        i5 = $i4 & $i9;

        if i5 <= 0 goto label1;

        $r5 = r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i5);

        r0.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand> = $r6;

        $i6 = r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        $i7 = $i6 + i5;

        r0.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent> = $i7;

     label1:
        return;
    }

    public org.apache.poi.ss.util.ExpandedDouble createExpandedDouble()
    {
        org.apache.poi.ss.util.ExpandedDouble $r0;
        org.apache.poi.ss.util.MutableFPNumber r1;
        int $i0;
        java.math.BigInteger $r2;

        r1 := @this: org.apache.poi.ss.util.MutableFPNumber;

        $r0 = new org.apache.poi.ss.util.ExpandedDouble;

        $r2 = r1.<org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger _significand>;

        $i0 = r1.<org.apache.poi.ss.util.MutableFPNumber: int _binaryExponent>;

        specialinvoke $r0.<org.apache.poi.ss.util.ExpandedDouble: void <init>(java.math.BigInteger,int)>($r2, $i0);

        return $r0;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        <org.apache.poi.ss.util.MutableFPNumber: int MIN_PRECISION> = 72;

        <org.apache.poi.ss.util.MutableFPNumber: int C_64> = 64;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("0B5E620F47FFFE666", 16);

        <org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger BI_MIN_BASE> = $r0;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String,int)>("0E35FA9319FFFE000", 16);

        <org.apache.poi.ss.util.MutableFPNumber: java.math.BigInteger BI_MAX_BASE> = $r1;

        return;
    }
}
