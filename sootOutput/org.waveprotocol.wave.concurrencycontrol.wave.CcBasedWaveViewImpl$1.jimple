final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler
{
    final org.waveprotocol.wave.common.logging.LoggerBundle val$logger;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler;
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe;

    void <init>(org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler r2;
        org.waveprotocol.wave.common.logging.LoggerBundle r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LoggerBundle;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler;

        r3 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.common.logging.LoggerBundle val$logger> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onWaveletFailed(org.waveprotocol.wave.model.operation.OperationException)
    {
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer $r6;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1 r0;
        org.waveprotocol.wave.model.operation.OperationException r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler $r5;
        org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.OperationException;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.common.logging.LoggerBundle val$logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("CcBasedWavelet failed permanently", r3);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler>;

        $r4 = new org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail;

        $z0 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.OperationException: boolean isSchemaViolation()>();

        if $z0 == 0 goto label1;

        $r7 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode SCHEMA_VIOLATION>;

        goto label2;

     label1:
        $r7 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INVALID_OPERATION>;

     label2:
        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable)>($r7, "CcBasedWavelet failed", r3);

        interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler: void onWaveDisconnected(org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail)>($r4);

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe>;

        interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer: void close()>();

        return;
    }
}
