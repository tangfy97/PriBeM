final class com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier extends com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier
{
    private final int expectedCount;
    private final int setCount;
    final com.mycila.inject.internal.guava.collect.SortedTreeMultiset this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset, int, int)
    {
        int i0, i1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: com.mycila.inject.internal.guava.collect.SortedTreeMultiset this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)>(r1, null);

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 & $z1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: int expectedCount> = i1;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: int setCount> = i0;

        return;
    }

    int newCount(int)
    {
        int i0, $i1, $i2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier;

        i0 := @parameter0: int;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: int expectedCount>;

        if i0 != $i1 goto label1;

        $i2 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: int setCount>;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset, int, int, com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)
    {
        int i0, i1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1 r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,int,int)>(r1, i0, i1);

        return;
    }
}
