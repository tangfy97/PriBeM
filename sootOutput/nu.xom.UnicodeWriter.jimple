final class nu.xom.UnicodeWriter extends nu.xom.TextWriter
{

    void <init>(java.io.Writer, java.lang.String)
    {
        java.io.Writer r1;
        java.lang.String r2;
        nu.xom.UnicodeWriter r0;

        r0 := @this: nu.xom.UnicodeWriter;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<nu.xom.TextWriter: void <init>(java.io.Writer,java.lang.String)>(r1, r2);

        return;
    }

    boolean needsEscaping(char)
    {
        char c0;
        nu.xom.UnicodeWriter r0;

        r0 := @this: nu.xom.UnicodeWriter;

        c0 := @parameter0: char;

        return 0;
    }

    void writeMarkup(java.lang.String) throws java.io.IOException
    {
        nu.xom.UnicodeWriter r0;
        char $c2;
        int $i0, $i1, $i3, $i4, i5;
        java.io.Writer $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: nu.xom.UnicodeWriter;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<nu.xom.UnicodeWriter: boolean normalize>;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<nu.xom.UnicodeWriter: java.lang.String normalize(java.lang.String)>(r2);

     label1:
        $i0 = staticinvoke <nu.xom.UnicodeWriter: int getUnicodeLengthForMarkup(java.lang.String)>(r2);

        if $i0 < 0 goto label2;

        $r1 = r0.<nu.xom.UnicodeWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(r2);

        if $i0 <= 0 goto label4;

        $i3 = r0.<nu.xom.UnicodeWriter: int column>;

        $i4 = $i3 + $i0;

        r0.<nu.xom.UnicodeWriter: int column> = $i4;

        r0.<nu.xom.UnicodeWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.UnicodeWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.UnicodeWriter: boolean justBroke> = 0;

        goto label4;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = 0;

     label3:
        if i5 >= $i1 goto label4;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r0.<nu.xom.UnicodeWriter: void writeMarkup(char)>($c2);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    void writeName(java.lang.String) throws java.io.IOException
    {
        nu.xom.UnicodeWriter r0;
        int $i0, $i1, $i2;
        java.io.Writer $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: nu.xom.UnicodeWriter;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<nu.xom.UnicodeWriter: boolean normalize>;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<nu.xom.UnicodeWriter: java.lang.String normalize(java.lang.String)>(r2);

     label1:
        $i0 = staticinvoke <nu.xom.UnicodeWriter: int getUnicodeLengthForName(java.lang.String)>(r2);

        $r1 = r0.<nu.xom.UnicodeWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(r2);

        $i1 = r0.<nu.xom.UnicodeWriter: int column>;

        $i2 = $i1 + $i0;

        r0.<nu.xom.UnicodeWriter: int column> = $i2;

        r0.<nu.xom.UnicodeWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.UnicodeWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.UnicodeWriter: boolean justBroke> = 0;

        return;
    }

    private static int getUnicodeLengthForMarkup(java.lang.String)
    {
        char $c1;
        int $i0, i2, i3, $i4, $i6, $i7, $i9, $i10, $i12;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 > 32 goto label2;

        $i6 = (int) -1;

        return $i6;

     label2:
        $i7 = (int) $c1;

        $i9 = (int) 55296;

        if $i7 < $i9 goto label3;

        $i10 = (int) $c1;

        $i12 = (int) 56319;

        if $i10 <= $i12 goto label4;

     label3:
        i2 = i2 + 1;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return i2;
    }

    private static int getUnicodeLengthForName(java.lang.String)
    {
        char $c1;
        int $i0, i2, i3, $i4, $i6, $i7, $i9;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        $i6 = (int) 55296;

        if $i4 < $i6 goto label2;

        $i7 = (int) $c1;

        $i9 = (int) 56319;

        if $i7 <= $i9 goto label3;

     label2:
        i2 = i2 + 1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    void writeAttributeValue(java.lang.String) throws java.io.IOException
    {
        nu.xom.UnicodeWriter r0;
        char $c2;
        int $i0, $i1, $i3, $i4, i5;
        java.io.Writer $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: nu.xom.UnicodeWriter;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<nu.xom.UnicodeWriter: boolean normalize>;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<nu.xom.UnicodeWriter: java.lang.String normalize(java.lang.String)>(r2);

     label1:
        $i0 = staticinvoke <nu.xom.UnicodeWriter: int getUnicodeLengthForAttributeValue(java.lang.String)>(r2);

        if $i0 < 0 goto label2;

        $r1 = r0.<nu.xom.UnicodeWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(r2);

        if $i0 <= 0 goto label4;

        $i3 = r0.<nu.xom.UnicodeWriter: int column>;

        $i4 = $i3 + $i0;

        r0.<nu.xom.UnicodeWriter: int column> = $i4;

        r0.<nu.xom.UnicodeWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.UnicodeWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.UnicodeWriter: boolean justBroke> = 0;

        goto label4;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = 0;

     label3:
        if i5 >= $i1 goto label4;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r0.<nu.xom.UnicodeWriter: void writeAttributeValue(char)>($c2);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    private static int getUnicodeLengthForAttributeValue(java.lang.String)
    {
        int $i0, i2, i3, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i21, $i23, $i24, $i26;
        java.lang.String r0;
        char $c1;
        nu.xom.XMLException $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label41;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        tableswitch($i4)
        {
            case 9: goto label02;
            case 10: goto label03;
            case 11: goto label04;
            case 12: goto label04;
            case 13: goto label05;
            case 14: goto label06;
            case 15: goto label06;
            case 16: goto label06;
            case 17: goto label06;
            case 18: goto label06;
            case 19: goto label06;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label06;
            case 23: goto label06;
            case 24: goto label06;
            case 25: goto label06;
            case 26: goto label06;
            case 27: goto label06;
            case 28: goto label06;
            case 29: goto label06;
            case 30: goto label06;
            case 31: goto label06;
            case 32: goto label07;
            case 33: goto label08;
            case 34: goto label09;
            case 35: goto label10;
            case 36: goto label11;
            case 37: goto label12;
            case 38: goto label13;
            case 39: goto label14;
            case 40: goto label15;
            case 41: goto label16;
            case 42: goto label17;
            case 43: goto label18;
            case 44: goto label19;
            case 45: goto label20;
            case 46: goto label21;
            case 47: goto label22;
            case 48: goto label23;
            case 49: goto label24;
            case 50: goto label25;
            case 51: goto label26;
            case 52: goto label27;
            case 53: goto label28;
            case 54: goto label29;
            case 55: goto label30;
            case 56: goto label31;
            case 57: goto label32;
            case 58: goto label33;
            case 59: goto label34;
            case 60: goto label35;
            case 61: goto label36;
            case 62: goto label37;
            default: goto label38;
        };

     label02:
        $i6 = (int) -1;

        return $i6;

     label03:
        $i8 = (int) -1;

        return $i8;

     label04:
        $r3 = new nu.xom.XMLException;

        specialinvoke $r3.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r3;

     label05:
        $i10 = (int) -1;

        return $i10;

     label06:
        $r4 = new nu.xom.XMLException;

        specialinvoke $r4.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r4;

     label07:
        $i12 = (int) -1;

        return $i12;

     label08:
        i2 = i2 + 1;

        goto label40;

     label09:
        $i14 = (int) -1;

        return $i14;

     label10:
        i2 = i2 + 1;

        goto label40;

     label11:
        i2 = i2 + 1;

        goto label40;

     label12:
        i2 = i2 + 1;

        goto label40;

     label13:
        $i16 = (int) -1;

        return $i16;

     label14:
        i2 = i2 + 1;

        goto label40;

     label15:
        i2 = i2 + 1;

        goto label40;

     label16:
        i2 = i2 + 1;

        goto label40;

     label17:
        i2 = i2 + 1;

        goto label40;

     label18:
        i2 = i2 + 1;

        goto label40;

     label19:
        i2 = i2 + 1;

        goto label40;

     label20:
        i2 = i2 + 1;

        goto label40;

     label21:
        i2 = i2 + 1;

        goto label40;

     label22:
        i2 = i2 + 1;

        goto label40;

     label23:
        i2 = i2 + 1;

        goto label40;

     label24:
        i2 = i2 + 1;

        goto label40;

     label25:
        i2 = i2 + 1;

        goto label40;

     label26:
        i2 = i2 + 1;

        goto label40;

     label27:
        i2 = i2 + 1;

        goto label40;

     label28:
        i2 = i2 + 1;

        goto label40;

     label29:
        i2 = i2 + 1;

        goto label40;

     label30:
        i2 = i2 + 1;

        goto label40;

     label31:
        i2 = i2 + 1;

        goto label40;

     label32:
        i2 = i2 + 1;

        goto label40;

     label33:
        i2 = i2 + 1;

        goto label40;

     label34:
        i2 = i2 + 1;

        goto label40;

     label35:
        $i18 = (int) -1;

        return $i18;

     label36:
        i2 = i2 + 1;

        goto label40;

     label37:
        $i20 = (int) -1;

        return $i20;

     label38:
        $i21 = (int) $c1;

        $i23 = (int) 55296;

        if $i21 < $i23 goto label39;

        $i24 = (int) $c1;

        $i26 = (int) 56319;

        if $i24 <= $i26 goto label40;

     label39:
        i2 = i2 + 1;

     label40:
        i3 = i3 + 1;

        goto label01;

     label41:
        return i2;
    }

    void writePCDATA(java.lang.String) throws java.io.IOException
    {
        nu.xom.UnicodeWriter r0;
        char $c2;
        int $i0, $i1, $i3, $i4, i5;
        java.io.Writer $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: nu.xom.UnicodeWriter;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<nu.xom.UnicodeWriter: boolean normalize>;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<nu.xom.UnicodeWriter: java.lang.String normalize(java.lang.String)>(r2);

     label1:
        $i0 = staticinvoke <nu.xom.UnicodeWriter: int getUnicodeLengthForPCDATA(java.lang.String)>(r2);

        if $i0 < 0 goto label2;

        $r1 = r0.<nu.xom.UnicodeWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(r2);

        if $i0 <= 0 goto label4;

        $i3 = r0.<nu.xom.UnicodeWriter: int column>;

        $i4 = $i3 + $i0;

        r0.<nu.xom.UnicodeWriter: int column> = $i4;

        r0.<nu.xom.UnicodeWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.UnicodeWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.UnicodeWriter: boolean justBroke> = 0;

        goto label4;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = 0;

     label3:
        if i5 >= $i1 goto label4;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r0.<nu.xom.UnicodeWriter: void writePCDATA(char)>($c2);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    private static int getUnicodeLengthForPCDATA(java.lang.String)
    {
        int $i0, i2, i3, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i19, $i21, $i22, $i24;
        java.lang.String r0;
        char $c1;
        nu.xom.XMLException $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label41;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        tableswitch($i4)
        {
            case 9: goto label02;
            case 10: goto label03;
            case 11: goto label04;
            case 12: goto label04;
            case 13: goto label05;
            case 14: goto label06;
            case 15: goto label06;
            case 16: goto label06;
            case 17: goto label06;
            case 18: goto label06;
            case 19: goto label06;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label06;
            case 23: goto label06;
            case 24: goto label06;
            case 25: goto label06;
            case 26: goto label06;
            case 27: goto label06;
            case 28: goto label06;
            case 29: goto label06;
            case 30: goto label06;
            case 31: goto label06;
            case 32: goto label07;
            case 33: goto label08;
            case 34: goto label09;
            case 35: goto label10;
            case 36: goto label11;
            case 37: goto label12;
            case 38: goto label13;
            case 39: goto label14;
            case 40: goto label15;
            case 41: goto label16;
            case 42: goto label17;
            case 43: goto label18;
            case 44: goto label19;
            case 45: goto label20;
            case 46: goto label21;
            case 47: goto label22;
            case 48: goto label23;
            case 49: goto label24;
            case 50: goto label25;
            case 51: goto label26;
            case 52: goto label27;
            case 53: goto label28;
            case 54: goto label29;
            case 55: goto label30;
            case 56: goto label31;
            case 57: goto label32;
            case 58: goto label33;
            case 59: goto label34;
            case 60: goto label35;
            case 61: goto label36;
            case 62: goto label37;
            default: goto label38;
        };

     label02:
        $i6 = (int) -1;

        return $i6;

     label03:
        $i8 = (int) -1;

        return $i8;

     label04:
        $r3 = new nu.xom.XMLException;

        specialinvoke $r3.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r3;

     label05:
        $i10 = (int) -1;

        return $i10;

     label06:
        $r4 = new nu.xom.XMLException;

        specialinvoke $r4.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r4;

     label07:
        $i12 = (int) -1;

        return $i12;

     label08:
        i2 = i2 + 1;

        goto label40;

     label09:
        i2 = i2 + 1;

        goto label40;

     label10:
        i2 = i2 + 1;

        goto label40;

     label11:
        i2 = i2 + 1;

        goto label40;

     label12:
        i2 = i2 + 1;

        goto label40;

     label13:
        $i14 = (int) -1;

        return $i14;

     label14:
        i2 = i2 + 1;

        goto label40;

     label15:
        i2 = i2 + 1;

        goto label40;

     label16:
        i2 = i2 + 1;

        goto label40;

     label17:
        i2 = i2 + 1;

        goto label40;

     label18:
        i2 = i2 + 1;

        goto label40;

     label19:
        i2 = i2 + 1;

        goto label40;

     label20:
        i2 = i2 + 1;

        goto label40;

     label21:
        i2 = i2 + 1;

        goto label40;

     label22:
        i2 = i2 + 1;

        goto label40;

     label23:
        i2 = i2 + 1;

        goto label40;

     label24:
        i2 = i2 + 1;

        goto label40;

     label25:
        i2 = i2 + 1;

        goto label40;

     label26:
        i2 = i2 + 1;

        goto label40;

     label27:
        i2 = i2 + 1;

        goto label40;

     label28:
        i2 = i2 + 1;

        goto label40;

     label29:
        i2 = i2 + 1;

        goto label40;

     label30:
        i2 = i2 + 1;

        goto label40;

     label31:
        i2 = i2 + 1;

        goto label40;

     label32:
        i2 = i2 + 1;

        goto label40;

     label33:
        i2 = i2 + 1;

        goto label40;

     label34:
        i2 = i2 + 1;

        goto label40;

     label35:
        $i16 = (int) -1;

        return $i16;

     label36:
        i2 = i2 + 1;

        goto label40;

     label37:
        $i18 = (int) -1;

        return $i18;

     label38:
        $i19 = (int) $c1;

        $i21 = (int) 55296;

        if $i19 < $i21 goto label39;

        $i22 = (int) $c1;

        $i24 = (int) 56319;

        if $i22 <= $i24 goto label40;

     label39:
        i2 = i2 + 1;

     label40:
        i3 = i3 + 1;

        goto label01;

     label41:
        return i2;
    }
}
