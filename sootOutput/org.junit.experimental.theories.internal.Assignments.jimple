public class org.junit.experimental.theories.internal.Assignments extends java.lang.Object
{
    private java.util.List fAssigned;
    private final java.util.List fUnassigned;
    private final org.junit.runners.model.TestClass fClass;

    private void <init>(java.util.List, java.util.List, org.junit.runners.model.TestClass)
    {
        java.util.List r1, r2;
        org.junit.runners.model.TestClass r3;
        org.junit.experimental.theories.internal.Assignments r0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r2 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r3 := @parameter2: org.junit.runners.model.TestClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fUnassigned> = r1;

        r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned> = r2;

        r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass fClass> = r3;

        return;
    }

    public static org.junit.experimental.theories.internal.Assignments allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass) throws java.lang.Exception
    {
        java.util.List $r2;
        org.junit.runners.model.TestClass r0;
        org.junit.experimental.theories.internal.Assignments $r5;
        java.lang.reflect.Constructor $r1;
        java.lang.reflect.Method r3;
        java.util.ArrayList $r4, $r6;

        r3 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: org.junit.runners.model.TestClass;

        $r1 = virtualinvoke r0.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r2 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.List signatures(java.lang.reflect.Constructor)>($r1);

        $r4 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.reflect.Method)>(r3);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = new org.junit.experimental.theories.internal.Assignments;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        specialinvoke $r5.<org.junit.experimental.theories.internal.Assignments: void <init>(java.util.List,java.util.List,org.junit.runners.model.TestClass)>($r6, $r2, r0);

        return $r5;
    }

    public boolean isComplete()
    {
        java.util.List $r1;
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fUnassigned>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.junit.experimental.theories.ParameterSignature nextUnassigned()
    {
        java.util.List $r1;
        org.junit.experimental.theories.internal.Assignments r0;
        java.lang.Object $r2;
        org.junit.experimental.theories.ParameterSignature $r3;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fUnassigned>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.junit.experimental.theories.ParameterSignature) $r2;

        return $r3;
    }

    public org.junit.experimental.theories.internal.Assignments assignNext(org.junit.experimental.theories.PotentialAssignment)
    {
        java.util.ArrayList $r0;
        java.util.List $r2, $r5, $r6, $r7;
        org.junit.runners.model.TestClass $r8;
        org.junit.experimental.theories.internal.Assignments r1, $r4;
        org.junit.experimental.theories.PotentialAssignment r3;
        int $i0;

        r1 := @this: org.junit.experimental.theories.internal.Assignments;

        r3 := @parameter0: org.junit.experimental.theories.PotentialAssignment;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r4 = new org.junit.experimental.theories.internal.Assignments;

        $r6 = r1.<org.junit.experimental.theories.internal.Assignments: java.util.List fUnassigned>;

        $r5 = r1.<org.junit.experimental.theories.internal.Assignments: java.util.List fUnassigned>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        $r8 = r1.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass fClass>;

        specialinvoke $r4.<org.junit.experimental.theories.internal.Assignments: void <init>(java.util.List,java.util.List,org.junit.runners.model.TestClass)>($r0, $r7, $r8);

        return $r4;
    }

    public java.lang.Object[] getActualValues(int, int, boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        java.lang.Object[] r0;
        org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException $r6;
        java.util.List $r2;
        org.junit.experimental.theories.internal.Assignments r1;
        org.junit.experimental.theories.PotentialAssignment $r4;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object $r3, $r5;
        boolean z0;

        r1 := @this: org.junit.experimental.theories.internal.Assignments;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = i0 - i1;

        r0 = newarray (java.lang.Object)[$i2];

        i4 = i1;

     label1:
        if i4 >= i0 goto label3;

        $r2 = r1.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (org.junit.experimental.theories.PotentialAssignment) $r3;

        $r5 = virtualinvoke $r4.<org.junit.experimental.theories.PotentialAssignment: java.lang.Object getValue()>();

        if $r5 != null goto label2;

        if z0 != 0 goto label2;

        $r6 = new org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException;

        specialinvoke $r6.<org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException: void <init>()>();

        throw $r6;

     label2:
        $i3 = i4 - i1;

        r0[$i3] = $r5;

        i4 = i4 + 1;

        goto label1;

     label3:
        return r0;
    }

    public java.util.List potentialsForNextUnassigned() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.util.List $r3;
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.experimental.theories.ParameterSignature $r1;
        org.junit.experimental.theories.ParameterSupplier $r2;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSignature nextUnassigned()>();

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSupplier getSupplier(org.junit.experimental.theories.ParameterSignature)>($r1);

        $r3 = virtualinvoke $r2.<org.junit.experimental.theories.ParameterSupplier: java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature)>($r1);

        return $r3;
    }

    public org.junit.experimental.theories.ParameterSupplier getSupplier(org.junit.experimental.theories.ParameterSignature) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        org.junit.runners.model.TestClass $r4;
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.experimental.theories.internal.AllMembersSupplier $r3;
        org.junit.experimental.theories.ParameterSignature r1;
        org.junit.experimental.theories.ParameterSupplier $r2;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSupplier getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new org.junit.experimental.theories.internal.AllMembersSupplier;

        $r4 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass fClass>;

        specialinvoke $r3.<org.junit.experimental.theories.internal.AllMembersSupplier: void <init>(org.junit.runners.model.TestClass)>($r4);

        return $r3;
    }

    public org.junit.experimental.theories.ParameterSupplier getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        org.junit.experimental.theories.internal.Assignments r6;
        java.lang.'annotation'.Annotation $r1;
        org.junit.experimental.theories.ParametersSuppliedBy r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        org.junit.experimental.theories.ParameterSignature r0;
        org.junit.experimental.theories.ParameterSupplier $r5;

        r6 := @this: org.junit.experimental.theories.internal.Assignments;

        r0 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/ParametersSuppliedBy;");

        r2 = (org.junit.experimental.theories.ParametersSuppliedBy) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<org.junit.experimental.theories.ParametersSuppliedBy: java.lang.Class value()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (org.junit.experimental.theories.ParameterSupplier) $r4;

        return $r5;
    }

    public java.lang.Object[] getConstructorArguments(boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        java.lang.Object[] $r1;
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: int getConstructorParameterCount()>();

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int,boolean)>(0, $i0, z0);

        return $r1;
    }

    public java.lang.Object[] getMethodArguments(boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        java.util.List $r1;
        java.lang.Object[] $r2;
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: int getConstructorParameterCount()>();

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int,boolean)>($i0, $i1, z0);

        return $r2;
    }

    public java.lang.Object[] getAllArguments(boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        java.util.List $r1;
        java.lang.Object[] $r2;
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int,boolean)>(0, $i0, z0);

        return $r2;
    }

    private int getConstructorParameterCount()
    {
        java.util.List $r3;
        org.junit.runners.model.TestClass $r1;
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0;
        java.lang.reflect.Constructor $r2;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass fClass>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.List signatures(java.lang.reflect.Constructor)>($r2);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.Object[] getArgumentStrings(boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        java.lang.Object[] r2;
        java.util.List $r1, $r3;
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.experimental.theories.PotentialAssignment $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List fAssigned>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.junit.experimental.theories.PotentialAssignment) $r4;

        $r6 = virtualinvoke $r5.<org.junit.experimental.theories.PotentialAssignment: java.lang.String getDescription()>();

        r2[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }
}
