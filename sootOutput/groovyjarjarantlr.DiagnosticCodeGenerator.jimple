public class groovyjarjarantlr.DiagnosticCodeGenerator extends groovyjarjarantlr.CodeGenerator
{
    protected int syntacticPredLevel;
    protected boolean doingLexRules;

    public void <init>()
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.JavaCharFormatter $r1;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void <init>()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel> = 0;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules> = 0;

        $r1 = new groovyjarjarantlr.JavaCharFormatter;

        specialinvoke $r1.<groovyjarjarantlr.JavaCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter> = $r1;

        return;
    }

    public void gen()
    {
        java.util.Enumeration $r3, $r6;
        groovyjarjarantlr.LLkGrammarAnalyzer $r10, $r11;
        groovyjarjarantlr.Grammar r16;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Tool $r12, $r13, $r15;
        groovyjarjarantlr.TokenManager r8;
        java.util.Hashtable $r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r14;
        java.lang.Object $r7, $r9;
        groovyjarjarantlr.DefineGrammarSymbols $r1, $r4;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r2 = $r1.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z2 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label3;

        $r9 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r16 = (groovyjarjarantlr.Grammar) $r9;

        $r10 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        virtualinvoke r16.<groovyjarjarantlr.Grammar: void setGrammarAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)>($r10);

        virtualinvoke r16.<groovyjarjarantlr.Grammar: void setCodeGenerator(groovyjarjarantlr.CodeGenerator)>(r0);

        $r11 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        interfaceinvoke $r11.<groovyjarjarantlr.LLkGrammarAnalyzer: void setGrammar(groovyjarjarantlr.Grammar)>(r16);

        virtualinvoke r16.<groovyjarjarantlr.Grammar: void generate()>();

        $r12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z1 = virtualinvoke $r12.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z1 == 0 goto label2;

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Exiting due to errors.");

        goto label2;

     label3:
        $r4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r5 = $r4.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration elements()>();

     label4:
        $z3 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (groovyjarjarantlr.TokenManager) $r7;

        $z0 = interfaceinvoke r8.<groovyjarjarantlr.TokenManager: boolean isReadOnly()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genTokenTypes(groovyjarjarantlr.TokenManager)>(r8);

        goto label4;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        $r15 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r15.<groovyjarjarantlr.Tool: void reportException(java.lang.Exception,java.lang.String)>($r14, null);

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public void gen(groovyjarjarantlr.ActionElement)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r1;
        groovyjarjarantlr.ActionElement r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ActionElement;

        $z0 = r0.<groovyjarjarantlr.ActionElement: boolean isSemPred>;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("ACTION: ");

        $r2 = r0.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        virtualinvoke r1.<groovyjarjarantlr.DiagnosticCodeGenerator: void _printAction(java.lang.String)>($r2);

     label2:
        return;
    }

    public void gen(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r1;
        groovyjarjarantlr.LLkGrammarAnalyzer $r3;
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Start of alternative block.");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $z0 = interfaceinvoke $r3.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Warning: This alternative block is non-deterministic");

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        return;
    }

    public void gen(groovyjarjarantlr.BlockEndElement)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.BlockEndElement r1;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.BlockEndElement;

        return;
    }

    public void gen(groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.CharLiteralElement r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.String $r2, $r3, $r6, $r8;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.CharLiteralElement;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("Match character ");

        $z0 = r1.<groovyjarjarantlr.CharLiteralElement: boolean not>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>("NOT ");

     label1:
        $r2 = r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r2);

        $r3 = r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String label>;

        if $r3 == null goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label=");

        $r6 = r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String label>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r8);

     label2:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.CharRangeElement)
    {
        groovyjarjarantlr.CharRangeElement r3;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r11, $r12, $r14;
        java.lang.String $r4, $r7, $r9, $r10, $r13, $r15;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.CharRangeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Match character range: ");

        $r4 = r3.<groovyjarjarantlr.CharRangeElement: java.lang.String beginText>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r7 = r3.<groovyjarjarantlr.CharRangeElement: java.lang.String endText>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>($r9);

        $r10 = r3.<groovyjarjarantlr.CharRangeElement: java.lang.String label>;

        if $r10 == null goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label = ");

        $r13 = r3.<groovyjarjarantlr.CharRangeElement: java.lang.String label>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r15);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r38, $r41;
        groovyjarjarantlr.collections.impl.Vector $r40;
        java.io.PrintWriter $r19, $r42;
        groovyjarjarantlr.GrammarSymbol r53;
        groovyjarjarantlr.Tool $r3, $r12;
        java.lang.StringBuffer $r2, $r4, $r7, $r9, $r11, $r15, $r17, $r23, $r24, $r27, $r28, $r31, $r32, $r47, $r49, $r50, $r51;
        java.lang.String $r6, $r8, $r10, $r14, $r16, $r18, $r22, $r26, $r30, $r33, $r36, $r44, $r48, $r52;
        groovyjarjarantlr.RuleSymbol r54;
        groovyjarjarantlr.StringLiteralSymbol r46;
        groovyjarjarantlr.Grammar $r5, $r13, $r20, $r25, $r29, $r34, $r37, $r39;
        groovyjarjarantlr.Token $r21, $r35;
        boolean $z0, $z1, $z2, $z3;
        groovyjarjarantlr.LexerGrammar r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Object $r43, $r45;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.LexerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r10);

        $r12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = virtualinvoke $r12.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r18);

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = $r19;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = 0;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules> = 1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Lexer Preamble Action.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This action will appear before the declaration of your lexer class:");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r20 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r20.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r22);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of Lexer Preamble Action");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Your lexer class is called \'");

        $r25 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' and is a subclass of \'");

        $r29 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = virtualinvoke $r29.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r33);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** User-defined lexer  class members:");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("These are the member declarations that you defined for your class:");

        $i4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i5;

        $r34 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = $r34.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r36);

        $i6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of user-defined lexer class members");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** String literals used in the parser");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The following string literals were used in the parser.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("An actual code generator would arrange to place these literals");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("into a table in the generated lexer, so that actions in the");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("generated lexer could match token text against the literals.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("String literals used in the lexer are not listed here, as they");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("are incorporated into the mainstream lexer processing.");

        $i8 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i9;

        $r37 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r38 = virtualinvoke $r37.<groovyjarjarantlr.Grammar: java.util.Enumeration getSymbols()>();

     label1:
        $z2 = interfaceinvoke $r38.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label2;

        $r45 = interfaceinvoke $r38.<java.util.Enumeration: java.lang.Object nextElement()>();

        r53 = (groovyjarjarantlr.GrammarSymbol) $r45;

        $z1 = r53 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z1 == 0 goto label1;

        r46 = (groovyjarjarantlr.StringLiteralSymbol) r53;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke r46.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getId()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $i16 = virtualinvoke r46.<groovyjarjarantlr.StringLiteralSymbol: int getTokenType()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r52);

        goto label1;

     label2:
        $i10 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of string literals used by the parser");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genNextToken()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** User-defined Lexer rules:");

        $i12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i13 = $i12 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i13;

        $r39 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r40 = $r39.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label3:
        $z3 = interfaceinvoke $r41.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label4;

        $r43 = interfaceinvoke $r41.<java.util.Enumeration: java.lang.Object nextElement()>();

        r54 = (groovyjarjarantlr.RuleSymbol) $r43;

        $r44 = r54.<groovyjarjarantlr.RuleSymbol: java.lang.String id>;

        $z0 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z0 != 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>(r54);

        goto label3;

     label4:
        $i14 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i15 = $i14 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i15;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End User-defined Lexer rules:");

        $r42 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r42.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = null;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules> = 0;

        return;
    }

    public void gen(groovyjarjarantlr.OneOrMoreBlock)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r3;
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3;
        groovyjarjarantlr.OneOrMoreBlock r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Start ONE-OR-MORE (...)+ block:");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $z0 = interfaceinvoke $r3.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.OneOrMoreBlock)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Warning: This one-or-more block is non-deterministic");

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("End ONE-OR-MORE block.");

        return;
    }

    public void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r39;
        groovyjarjarantlr.Grammar $r5, $r13, $r20, $r25, $r29, $r34, $r37;
        groovyjarjarantlr.Token $r21, $r35;
        groovyjarjarantlr.collections.impl.Vector $r38;
        boolean $z0, $z1;
        java.io.PrintWriter $r19, $r40;
        groovyjarjarantlr.GrammarSymbol r42;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Tool $r3, $r12;
        java.lang.StringBuffer $r2, $r4, $r7, $r9, $r11, $r15, $r17, $r23, $r24, $r27, $r28, $r31, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r6, $r8, $r10, $r14, $r16, $r18, $r22, $r26, $r30, $r33, $r36;
        groovyjarjarantlr.RuleSymbol $r43;
        groovyjarjarantlr.ParserGrammar r1;
        java.lang.Object $r41;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ParserGrammar;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r10);

        $r12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = virtualinvoke $r12.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r18);

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = $r19;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Parser Preamble Action.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This action will appear before the declaration of your parser class:");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r20 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r20.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r22);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of Parser Preamble Action");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Your parser class is called \'");

        $r25 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' and is a subclass of \'");

        $r29 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = virtualinvoke $r29.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r33);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** User-defined parser class members:");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("These are the member declarations that you defined for your class:");

        $i4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i5;

        $r34 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = $r34.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r36);

        $i6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of user-defined parser class members");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Parser rules:");

        $i8 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i9;

        $r37 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r38 = $r37.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r39 = virtualinvoke $r38.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label1:
        $z1 = interfaceinvoke $r39.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r41 = interfaceinvoke $r39.<java.util.Enumeration: java.lang.Object nextElement()>();

        r42 = (groovyjarjarantlr.GrammarSymbol) $r41;

        $z0 = r42 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 == 0 goto label1;

        $r43 = (groovyjarjarantlr.RuleSymbol) r42;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>($r43);

        goto label1;

     label2:
        $i10 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of parser rules");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of parser");

        $r40 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r40.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r21, $r29, $r37;
        groovyjarjarantlr.GrammarSymbol $r4;
        java.lang.StringBuffer $r6, $r7, $r9, $r13, $r14, $r16, $r17, $r23, $r24, $r26, $r27, $r31, $r32, $r34, $r35, $r39, $r40, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r52, $r54, $r56, $r57, $r59, $r60;
        java.lang.String $r2, $r8, $r10, $r11, $r12, $r15, $r18, $r19, $r22, $r25, $r28, $r30, $r33, $r36, $r38, $r41, $r44, $r47, $r50, $r53, $r55, $r58, $r61, $r62;
        groovyjarjarantlr.RuleSymbol r5;
        groovyjarjarantlr.Grammar $r3, $r20;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        r5 = (groovyjarjarantlr.RuleSymbol) $r4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule Reference: ");

        $r8 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>($r10);

        $r11 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        if $r11 == null goto label1;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", assigned to \'");

        $r58 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r61);

     label1:
        $r12 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r12 == null goto label2;

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", arguments = ");

        $r53 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r55);

     label2:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        if r5 == null goto label3;

        $z0 = virtualinvoke r5.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z0 != 0 goto label4;

     label3:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r15 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is referenced, but that rule is not defined.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r18);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("\tPerhaps the rule is misspelled, or you forgot to define it.");

        return;

     label4:
        $z1 = r5 instanceof groovyjarjarantlr.RuleSymbol;

        if $z1 != 0 goto label5;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r47 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is referenced, but that is not a grammar rule.");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r50);

        return;

     label5:
        $r19 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        if $r19 == null goto label6;

        $r37 = r5.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r38 = $r37.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r38 != null goto label7;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error: You assigned from Rule \'");

        $r41 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', but that rule has no return type.");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r44);

        goto label7;

     label6:
        $r20 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r20 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 != 0 goto label7;

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label7;

        $r29 = r5.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r30 = $r29.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r30 == null goto label7;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: Rule \'");

        $r33 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' returns a value");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r36);

     label7:
        $r62 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r62 == null goto label8;

        $r21 = r5.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r22 = $r21.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r22 != null goto label8;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error: Rule \'");

        $r25 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' accepts no arguments.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r28);

     label8:
        return;
    }

    public void gen(groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.StringLiteralElement r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.String $r2, $r3, $r6, $r8;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.StringLiteralElement;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("Match string literal ");

        $r2 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r2);

        $r3 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String label>;

        if $r3 == null goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label=");

        $r6 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String label>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r8);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.TokenRangeElement r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r11, $r12, $r14;
        java.lang.String $r4, $r7, $r9, $r10, $r13, $r15;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.TokenRangeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Match token range: ");

        $r4 = r3.<groovyjarjarantlr.TokenRangeElement: java.lang.String beginText>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r7 = r3.<groovyjarjarantlr.TokenRangeElement: java.lang.String endText>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>($r9);

        $r10 = r3.<groovyjarjarantlr.TokenRangeElement: java.lang.String label>;

        if $r10 == null goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label = ");

        $r13 = r3.<groovyjarjarantlr.TokenRangeElement: java.lang.String label>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r15);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.TokenRefElement)
    {
        groovyjarjarantlr.TokenRefElement r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.String $r2, $r3, $r6, $r8;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenRefElement;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("Match token ");

        $z0 = r1.<groovyjarjarantlr.TokenRefElement: boolean not>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>("NOT ");

     label1:
        $r2 = r1.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r2);

        $r3 = r1.<groovyjarjarantlr.TokenRefElement: java.lang.String label>;

        if $r3 == null goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label=");

        $r6 = r1.<groovyjarjarantlr.TokenRefElement: java.lang.String label>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r8);

     label2:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.TreeElement)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        groovyjarjarantlr.TreeElement r3;
        java.lang.String $r5;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.TreeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tree reference: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>($r5);

        return;
    }

    public void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r39;
        groovyjarjarantlr.Grammar $r5, $r13, $r20, $r25, $r29, $r34, $r37;
        groovyjarjarantlr.Token $r21, $r35;
        groovyjarjarantlr.collections.impl.Vector $r38;
        boolean $z0, $z1;
        java.io.PrintWriter $r19, $r40;
        groovyjarjarantlr.GrammarSymbol r42;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Tool $r3, $r12;
        java.lang.StringBuffer $r2, $r4, $r7, $r9, $r11, $r15, $r17, $r23, $r24, $r27, $r28, $r31, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r6, $r8, $r10, $r14, $r16, $r18, $r22, $r26, $r30, $r33, $r36;
        groovyjarjarantlr.RuleSymbol $r43;
        groovyjarjarantlr.TreeWalkerGrammar r1;
        java.lang.Object $r41;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r10);

        $r12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = virtualinvoke $r12.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r18);

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = $r19;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Tree-walker Preamble Action.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This action will appear before the declaration of your tree-walker class:");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r20 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r20.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r22);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of tree-walker Preamble Action");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Your tree-walker class is called \'");

        $r25 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' and is a subclass of \'");

        $r29 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = virtualinvoke $r29.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r33);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** User-defined tree-walker class members:");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("These are the member declarations that you defined for your class:");

        $i4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i5;

        $r34 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = $r34.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r36);

        $i6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of user-defined tree-walker class members");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** tree-walker rules:");

        $i8 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i9;

        $r37 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r38 = $r37.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r39 = virtualinvoke $r38.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label1:
        $z1 = interfaceinvoke $r39.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r41 = interfaceinvoke $r39.<java.util.Enumeration: java.lang.Object nextElement()>();

        r42 = (groovyjarjarantlr.GrammarSymbol) $r41;

        $z0 = r42 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 == 0 goto label1;

        $r43 = (groovyjarjarantlr.RuleSymbol) r42;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>($r43);

        goto label1;

     label2:
        $i10 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of tree-walker rules");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of tree-walker");

        $r40 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r40.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.WildcardElement r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        java.lang.StringBuffer $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.WildcardElement;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("Match wildcard");

        $r2 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        if $r2 == null goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", label = ");

        $r5 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r7);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        return;
    }

    public void gen(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r3;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Start ZERO-OR-MORE (...)+ block:");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $z0 = interfaceinvoke $r3.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.ZeroOrMoreBlock)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Warning: This zero-or-more block is non-deterministic");

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("End ZERO-OR-MORE block.");

        return;
    }

    protected void genAlt(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.DiagnosticCodeGenerator r2;
        java.lang.StringBuffer $r3, $r4, $r7;
        java.lang.String $r6, $r8;
        groovyjarjarantlr.Token $r1, $r5;
        boolean $z0;
        groovyjarjarantlr.AlternativeElement r9;

        r2 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        r9 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label1:
        $z0 = r9 instanceof groovyjarjarantlr.BlockEndElement;

        if $z0 != 0 goto label2;

        virtualinvoke r9.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r9 = r9.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Token getTreeSpecifier()>();

        if $r1 == null goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST will be built as: ");

        $r5 = virtualinvoke r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Token getTreeSpecifier()>();

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r8);

     label3:
        return;
    }

    protected void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.DiagnosticCodeGenerator r2;
        java.lang.StringBuffer $r3, $r4, $r6;
        java.lang.String $r1, $r5, $r7;

        r2 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        if $r1 == null goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Init action: ");

        $r5 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r7);

     label1:
        return;
    }

    public void genCommonBlock(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.collections.impl.Vector $r1, $r18;
        boolean z0, $z2, $z3;
        groovyjarjarantlr.Alternative $r3, $r16;
        groovyjarjarantlr.SynPredBlock $r12, $r14, $r15, $r17, $r19;
        groovyjarjarantlr.AlternativeElement r4;
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.DiagnosticCodeGenerator r2;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, $i25;
        java.lang.String $r9, $r10, $r11, $r13;

        r2 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 1 goto label01;

        $z3 = 1;

        $z2 = 1;

        goto label02;

     label01:
        $z3 = 0;

        $z2 = 0;

     label02:
        z0 = $z2;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Start of an alternative block.");

        $i1 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i2;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The lookahead set for this block is:");

        $i3 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i4;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void genLookaheadSetForBlock(groovyjarjarantlr.AlternativeBlock)>(r0);

        $i5 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i6;

        if $z3 == 0 goto label03;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This block has a single alternative");

        $r16 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r17 = $r16.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r17 == null goto label04;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Warning: you specified a syntactic predicate for this alternative,");

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("and it is the only alternative of a block and will be ignored.");

        goto label04;

     label03:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This block has multiple alternatives:");

        $i7 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i8;

     label04:
        i24 = 0;

     label05:
        $r18 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i25 = virtualinvoke $r18.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i24 >= $i25 goto label14;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i24);

        r4 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        if i24 == 0 goto label06;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("Otherwise, ");

        goto label07;

     label06:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("");

     label07:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Alternate(");

        $i13 = i24 + 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") will be taken IF:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>($r9);

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The lookahead set: ");

        $i14 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i15 = $i14 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i15;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void genLookaheadSetForAlt(groovyjarjarantlr.Alternative)>($r3);

        $i16 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i17 = $i16 - 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i17;

        $r10 = $r3.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r10 != null goto label08;

        $r15 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r15 == null goto label09;

     label08:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("is matched, AND ");

        goto label10;

     label09:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("is matched.");

     label10:
        $r11 = $r3.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r11 == null goto label12;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("the semantic predicate:");

        $i22 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i23 = $i22 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i23;

        $r13 = $r3.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r13);

        $r14 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r14 == null goto label11;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("is true, AND ");

        goto label12;

     label11:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("is true.");

     label12:
        $r19 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r19 == null goto label13;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("the syntactic predicate:");

        $i18 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i19 = $i18 + 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i19;

        $r12 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock)>($r12);

        $i20 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i21 = $i20 - 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i21;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("is matched.");

     label13:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void genAlt(groovyjarjarantlr.Alternative)>($r3);

        i24 = i24 + 1;

        goto label05;

     label14:
        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("OTHERWISE, a NoViableAlt exception will be thrown");

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        if z0 != 0 goto label15;

        $i11 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i12 = $i11 - 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i12;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("End of alternatives");

     label15:
        $i9 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r2.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i10;

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("End of alternative block.");

        return;
    }

    public void genFollowSetForRuleBlock(groovyjarjarantlr.RuleBlock)
    {
        groovyjarjarantlr.RuleBlock r2;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r1, $r6;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.RuleEndElement $r3;
        groovyjarjarantlr.Lookahead $r5;
        int $i0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(1, $r3);

        $r6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i0 = $r6.<groovyjarjarantlr.Grammar: int maxk>;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>($i0, 1, $r5);

        return;
    }

    protected void genHeader()
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Tool $r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r11;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r6, $r9, $r12, $r14;
        groovyjarjarantlr.DefineGrammarSymbols $r13;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ANTLR-generated file resulting from grammar ");

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = $r3.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r6);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Diagnostic output");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Terence Parr, MageLang Institute");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("with John Lilley, Empathy Software");

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ANTLR Version ");

        $r9 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; 1989-2005");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r12);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Header Action.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This action will appear at the top of all generated files.");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r14);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of Header Action");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        return;
    }

    protected void genLookaheadSetForAlt(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Lookahead[] $r2, $r5;
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.Alternative r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Lookahead r3, $r6;
        int $i0, i1, i2;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        $z0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z0 == 0 goto label1;

        $r5 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r6 = $r5[1];

        $z1 = virtualinvoke $r6.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("MATCHES ALL");

        return;

     label1:
        $i0 = r1.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        i1 = $i0;

        if $i0 != 2147483647 goto label2;

        $r4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i1 = $r4.<groovyjarjarantlr.Grammar: int maxk>;

     label2:
        i2 = 1;

     label3:
        if i2 > i1 goto label4;

        $r2 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r3 = $r2[i2];

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>(i1, i2, r3);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void genLookaheadSetForBlock(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r3, $r7;
        groovyjarjarantlr.Alternative $r6;
        groovyjarjarantlr.DiagnosticCodeGenerator r2;
        groovyjarjarantlr.Lookahead $r5;
        int $i0, $i1, $i2, i3, i4, i5;
        groovyjarjarantlr.collections.impl.Vector $r1;

        r2 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        i3 = 0;

        i4 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i4 >= $i0 goto label4;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i4);

        $i1 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if $i1 != 2147483647 goto label2;

        $r7 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i3 = $r7.<groovyjarjarantlr.Grammar: int maxk>;

        goto label4;

     label2:
        $i2 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i3 >= $i2 goto label3;

        i3 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        i5 = 1;

     label5:
        if i5 > i3 goto label6;

        $r3 = r2.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i5, r0);

        virtualinvoke r2.<groovyjarjarantlr.DiagnosticCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>(i3, i5, $r5);

        i5 = i5 + 1;

        goto label5;

     label6:
        return;
    }

    public void genNextToken()
    {
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.LLkGrammarAnalyzer $r8;
        groovyjarjarantlr.Grammar $r1, $r3, $r6, $r7;
        groovyjarjarantlr.RuleSymbol $r5;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.collections.impl.Vector $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Lexer nextToken rule:");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The lexer nextToken rule is synthesized from all of the user-defined");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("lexer rules.  It logically consists of one big alternative block with");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("each user-defined rule being an alternative.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $r3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r1 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r4 = staticinvoke <groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar,groovyjarjarantlr.collections.impl.Vector,java.lang.String)>($r3, $r2, "nextToken");

        $r5 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r5.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>("mnextToken");

        virtualinvoke $r5.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        virtualinvoke $r5.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r4);

        $r5.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = "private";

        $r6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r6.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r5);

        $r7 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $z0 = interfaceinvoke $r8.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r4);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The grammar analyzer has determined that the synthesized");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("nextToken rule is non-deterministic (i.e., it has ambiguities)");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This means that there is some overlap of the character");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("lookahead for two or more of your lexer rules.");

     label1:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>($r4);

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of nextToken lexer rule.");

        return;
    }

    public void genRule(groovyjarjarantlr.RuleSymbol)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r14;
        groovyjarjarantlr.collections.impl.Vector $r23, $r24;
        groovyjarjarantlr.RuleBlock $r11;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r16, $r17, $r18, $r19, $r21, $r26, $r27, $r28, $r29, $r32, $r33, $r38, $r39, $r41, $r43, $r44, $r46, $r48, $r49, $r51, $r53, $r54, $r55, $r56, $r58;
        java.lang.String r1, $r7, $r9, $r10, $r12, $r20, $r22, $r31, $r34, $r36, $r40, $r42, $r45, $r47, $r50, $r52, $r57, $r59, $r61, $r62, $r63, $r64;
        groovyjarjarantlr.RuleSymbol r6;
        groovyjarjarantlr.ExceptionHandler $r37;
        groovyjarjarantlr.Grammar $r13;
        groovyjarjarantlr.Token $r30, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.ExceptionSpec $r15;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.Object $r25;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r6 := @parameter0: groovyjarjarantlr.RuleSymbol;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        $z0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z0 == 0 goto label01;

        $r64 = "Lexer";

        $r63 = "Lexer";

        $r62 = "Lexer";

        goto label02;

     label01:
        $r64 = "Parser";

        $r63 = "Parser";

        $r62 = "Parser";

     label02:
        r1 = $r63;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Rule: ");

        $r7 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r9);

        $z1 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label03;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This rule is undefined.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This means that the rule was referenced somewhere in the grammar,");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("but a definition for the rule was not encountered.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("It is also possible that syntax errors during the parse of");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("your grammar file prevented correct processing of the rule.");

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** End ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r64);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Rule: ");

        $r57 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r59);

        return;

     label03:
        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r10 = r6.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i2 == 0 goto label04;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Access: ");

        $r50 = r6.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r52);

     label04:
        $r11 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r12 = $r11.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r12 == null goto label05;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Return value(s): ");

        $r45 = $r11.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r47);

        $z5 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z5 == 0 goto label07;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Error: you specified return value(s) for a lexical rule.");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("\tLexical rules have an implicit return type of \'int\'.");

        goto label07;

     label05:
        $z2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z2 == 0 goto label06;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Return value: lexical rule returns an implicit token type");

        goto label07;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Return value: none");

     label07:
        $r61 = $r11.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r61 == null goto label08;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Arguments: ");

        $r40 = $r11.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r42);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>($r11);

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = $r13.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $z3 = interfaceinvoke $r14.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r11);

        if $z3 != 0 goto label09;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Error: This rule is non-deterministic");

     label09:
        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>($r11);

        $r15 = virtualinvoke $r11.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>("");

        if $r15 == null goto label13;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("You specified error-handler(s) for this rule:");

        $i9 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i10;

        i15 = 0;

     label10:
        $r23 = $r15.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $i11 = virtualinvoke $r23.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i15 >= $i11 goto label12;

        if i15 == 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

     label11:
        $r24 = $r15.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $r25 = virtualinvoke $r24.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i15);

        $r37 = (groovyjarjarantlr.ExceptionHandler) $r25;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error-handler(");

        $i14 = i15 + 1;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") catches [");

        $r30 = $r37.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $r31 = virtualinvoke $r30.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] and executes:");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r34);

        $r35 = $r37.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void printAction(java.lang.String)>($r36);

        i15 = i15 + 1;

        goto label10;

     label12:
        $i12 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i13;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("End error-handlers.");

        goto label14;

     label13:
        $z4 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z4 != 0 goto label14;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("Default error-handling will be generated, which catches all");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("parser exceptions and consumes tokens until the follow-set is seen.");

     label14:
        $z6 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z6 != 0 goto label15;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("The follow set for this rule is:");

        $i5 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genFollowSetForRuleBlock(groovyjarjarantlr.RuleBlock)>($r11);

        $i7 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i8;

     label15:
        $i3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i4;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** End ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Rule: ");

        $r20 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r22);

        return;
    }

    protected void genSynPred(groovyjarjarantlr.SynPredBlock)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        int $i0, $i1, $i2, $i3;
        groovyjarjarantlr.SynPredBlock r1;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.SynPredBlock;

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int syntacticPredLevel> = $i3;

        return;
    }

    protected void genTokenTypes(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.TokenManager r4;
        groovyjarjarantlr.collections.impl.Vector $r22;
        java.io.PrintWriter $r21, $r23;
        groovyjarjarantlr.DiagnosticCodeGenerator r0;
        groovyjarjarantlr.Tool $r2, $r13;
        java.lang.StringBuffer $r1, $r3, $r6, $r8, $r10, $r12, $r15, $r17, $r19, $r26, $r27, $r28, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r5, $r7, $r9, $r11, $r14, $r16, $r18, $r20, r25, $r30;
        java.lang.Object $r24;

        r0 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.TokenManager;

        $r2 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r11);

        $r13 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = <groovyjarjarantlr.DiagnosticCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = virtualinvoke $r13.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r20);

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = $r21;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** Tokens used by the parser");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("This is a list of the token numeric values and the corresponding");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("token identifiers.  Some tokens are literals, and because of that");

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("they have no identifiers.  Literals are double-quoted.");

        $i0 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i1;

        $r22 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i5 = 4;

     label1:
        $i2 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i5 >= $i2 goto label3;

        $r24 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i5);

        r25 = (java.lang.String) $r24;

        if r25 == null goto label2;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>($r30);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i3 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.DiagnosticCodeGenerator: void println(java.lang.String)>("*** End of tokens used by the parser");

        $r23 = r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r23.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.DiagnosticCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r5;
        java.lang.StringBuffer $r0, $r1, $r3;
        java.lang.String $r2, $r4;
        groovyjarjarantlr.collections.impl.Vector r6;

        r5 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r6 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("***Create an AST from a vector here***");

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String)
    {
        groovyjarjarantlr.GrammarAtom r7;
        groovyjarjarantlr.DiagnosticCodeGenerator r6;
        java.lang.StringBuffer $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r6 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r7 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    protected java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r1;
        groovyjarjarantlr.RuleBlock r2;
        int i0;
        java.lang.String r0;
        groovyjarjarantlr.ActionTransInfo r3;

        r1 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: groovyjarjarantlr.RuleBlock;

        r3 := @parameter3: groovyjarjarantlr.ActionTransInfo;

        return r0;
    }

    public java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.DiagnosticCodeGenerator r1;
        java.lang.String r0;
        groovyjarjarantlr.ActionTransInfo r2;

        r1 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.ActionTransInfo;

        return r0;
    }

    public void printSet(int, int, groovyjarjarantlr.Lookahead)
    {
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.CharFormatter $r9;
        int[] $r2;
        groovyjarjarantlr.TokenManager $r5;
        groovyjarjarantlr.collections.impl.Vector $r6;
        boolean $z0;
        groovyjarjarantlr.collections.impl.BitSet $r1;
        groovyjarjarantlr.DiagnosticCodeGenerator r3;
        java.lang.StringBuffer $r11, $r12, $r13, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14;
        java.lang.String $r8, $r10, $r15;
        groovyjarjarantlr.Lookahead r0;
        java.lang.Object $r7;

        r3 := @this: groovyjarjarantlr.DiagnosticCodeGenerator;

        i0 := @parameter0: int;

        i11 := @parameter1: int;

        r0 := @parameter2: groovyjarjarantlr.Lookahead;

        $r1 = r0.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        if i0 == 1 goto label01;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("k==");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": {");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>($r15);

        goto label02;

     label01:
        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("{ ");

     label02:
        $i1 = lengthof $r2;

        if $i1 <= 5 goto label03;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        $i9 = r3.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r3.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i10;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("");

     label03:
        i12 = 0;

        i13 = 0;

     label04:
        $i14 = lengthof $r2;

        if i13 >= $i14 goto label09;

        i12 = i12 + 1;

        if i12 <= 5 goto label05;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("");

        i12 = 0;

     label05:
        $z0 = r3.<groovyjarjarantlr.DiagnosticCodeGenerator: boolean doingLexRules>;

        if $z0 == 0 goto label06;

        $r9 = r3.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $i8 = $r2[i13];

        $r10 = interfaceinvoke $r9.<groovyjarjarantlr.CharFormatter: java.lang.String literalChar(int)>($i8);

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r10);

        goto label07;

     label06:
        $r4 = r3.<groovyjarjarantlr.DiagnosticCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r6 = interfaceinvoke $r5.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        $i5 = $r2[i13];

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>($i5);

        $r8 = (java.lang.String) $r7;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>($r8);

     label07:
        $i6 = lengthof $r2;

        $i7 = $i6 - 1;

        if i13 == $i7 goto label08;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _print(java.lang.String)>(", ");

     label08:
        i13 = i13 + 1;

        goto label04;

     label09:
        $i2 = lengthof $r2;

        if $i2 <= 5 goto label10;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>("");

        $i3 = r3.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r3.<groovyjarjarantlr.DiagnosticCodeGenerator: int tabs> = $i4;

        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void print(java.lang.String)>("");

     label10:
        virtualinvoke r3.<groovyjarjarantlr.DiagnosticCodeGenerator: void _println(java.lang.String)>(" }");

        return;
    }
}
