public final class org.joda.time.LocalDateTime extends org.joda.time.base.BaseLocal implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int YEAR;
    private static final int MONTH_OF_YEAR;
    private static final int DAY_OF_MONTH;
    private static final int MILLIS_OF_DAY;
    private long iLocalMillis;
    private org.joda.time.Chronology iChronology;

    public static org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)
    {
        org.joda.time.LocalDateTime $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Calendar r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalDateTime;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        $i2 = $i1 + 1;

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        $i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i6 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i7 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        specialinvoke $r1.<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>($i0, $i2, $i3, $i4, $i5, $i6, $i7);

        return $r1;
    }

    public static org.joda.time.LocalDateTime fromDateFields(java.util.Date)
    {
        java.util.Date r0;
        long $l8, $l9;
        org.joda.time.LocalDateTime $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalDateTime;

        $i0 = virtualinvoke r0.<java.util.Date: int getYear()>();

        $i1 = $i0 + 1900;

        $i2 = virtualinvoke r0.<java.util.Date: int getMonth()>();

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r0.<java.util.Date: int getDate()>();

        $i5 = virtualinvoke r0.<java.util.Date: int getHours()>();

        $i6 = virtualinvoke r0.<java.util.Date: int getMinutes()>();

        $i7 = virtualinvoke r0.<java.util.Date: int getSeconds()>();

        $l8 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l9 = $l8 % 1000L;

        $i10 = (int) $l9;

        specialinvoke $r1.<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>($i1, $i3, $i4, $i5, $i6, $i7, $i10);

        return $r1;
    }

    public void <init>()
    {
        org.joda.time.chrono.ISOChronology $r1;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.chrono.ISOChronology $r1;
        long l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

        return;
    }

    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;
        long l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.Chronology $r1, $r4, r5;
        long l0, $l1;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        l0 := @parameter0: long;

        r5 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r5);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r3, l0);

        r0.<org.joda.time.LocalDateTime: long iLocalMillis> = $l1;

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> = $r4;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r4;
        long $l4;
        org.joda.time.convert.PartialConverter $r3;
        int[] $r9;
        int $i0, $i1, $i2, $i3;
        org.joda.time.format.DateTimeFormatter $r8;
        org.joda.time.Chronology $r5, $r6, $r7, $r10;
        org.joda.time.LocalDateTime r0;
        org.joda.time.convert.ConverterManager $r1;
        java.lang.Object r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r2 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r3 = virtualinvoke $r1.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>(r2);

        $r5 = interfaceinvoke $r3.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>(r2, r4);

        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r5);

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> = $r7;

        $r8 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>();

        $r9 = interfaceinvoke $r3.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, r2, $r6, $r8);

        $r10 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $i3 = $r9[0];

        $i2 = $r9[1];

        $i1 = $r9[2];

        $i0 = $r9[3];

        $l4 = virtualinvoke $r10.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i3, $i2, $i1, $i0);

        r0.<org.joda.time.LocalDateTime: long iLocalMillis> = $l4;

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        long $l4;
        org.joda.time.convert.PartialConverter $r3;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        org.joda.time.format.DateTimeFormatter $r7;
        org.joda.time.Chronology $r4, $r5, $r6, $r9, r10;
        org.joda.time.LocalDateTime r0;
        org.joda.time.convert.ConverterManager $r1;
        java.lang.Object r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r2 := @parameter0: java.lang.Object;

        r10 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r3 = virtualinvoke $r1.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>(r2);

        $r4 = interfaceinvoke $r3.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r2, r10);

        $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r4);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> = $r6;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>();

        $r8 = interfaceinvoke $r3.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, r2, $r5, $r7);

        $r9 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $i3 = $r8[0];

        $i2 = $r8[1];

        $i1 = $r8[2];

        $i0 = $r8[3];

        $l4 = virtualinvoke $r9.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i3, $i2, $i1, $i0);

        r0.<org.joda.time.LocalDateTime: long iLocalMillis> = $l4;

        return;
    }

    public void <init>(int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, 0, 0, $r1);

        return;
    }

    public void <init>(int, int, int, int, int, int)
    {
        org.joda.time.LocalDateTime r0;
        int i0, i1, i2, i3, i4, i5;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, i5, 0, $r1);

        return;
    }

    public void <init>(int, int, int, int, int, int, int)
    {
        org.joda.time.LocalDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, i5, i6, $r1);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r1, $r2, r3;
        long $l7;
        org.joda.time.LocalDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r3 := @parameter7: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l7 = virtualinvoke $r2.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> = $r2;

        r0.<org.joda.time.LocalDateTime: long iLocalMillis> = $l7;

        return;
    }

    public int size()
    {
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        return 4;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        java.lang.IndexOutOfBoundsException $r5;
        org.joda.time.Chronology r0;
        org.joda.time.LocalDateTime r10;
        java.lang.StringBuffer $r6, $r7, $r8;
        int i0;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4;
        java.lang.String $r9;

        r10 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        r0 := @parameter1: org.joda.time.Chronology;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        return $r4;

     label2:
        $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r3;

     label3:
        $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        return $r1;

     label5:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid index: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public int getValue(int)
    {
        java.lang.IndexOutOfBoundsException $r9;
        long $l1, $l3, $l5, $l7;
        java.lang.StringBuffer $r10, $r11, $r12;
        int i0, $i2, $i4, $i6, $i8;
        org.joda.time.DateTimeField $r2, $r4, $r6, $r8;
        java.lang.String $r13;
        org.joda.time.Chronology $r1, $r3, $r5, $r7;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r7 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l7 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i8 = virtualinvoke $r8.<org.joda.time.DateTimeField: int get(long)>($l7);

        return $i8;

     label2:
        $r5 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l5 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i6 = virtualinvoke $r6.<org.joda.time.DateTimeField: int get(long)>($l5);

        return $i6;

     label3:
        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l3 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i4 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l3);

        return $i4;

     label4:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l1);

        return $i2;

     label5:
        $r9 = new java.lang.IndexOutOfBoundsException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid index: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r3;
        long $l0;
        org.joda.time.LocalDateTime r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;
        boolean $z0;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isSupported()>();

        return $z0;
    }

    public boolean isSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.DurationField $r3;
        org.joda.time.DurationFieldType r0;
        org.joda.time.Chronology $r2;
        org.joda.time.LocalDateTime r1;
        boolean $z0;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DurationFieldType;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $z0 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isSupported()>();

        return $z0;
    }

    protected long getLocalMillis()
    {
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>;

        return $l0;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.Chronology $r1;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.Chronology $r3, $r4;
        long $l0, $l1;
        org.joda.time.LocalDateTime r0, r2;
        byte $b2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.LocalDateTime;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.LocalDateTime) r1;

        $r4 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $r3 = r2.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label4;

        $l1 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $l0 = r2.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        $z1 = specialinvoke r0.<org.joda.time.base.BaseLocal: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int compareTo(java.lang.Object)
    {
        long $l1, $l2, $l4, $l5;
        byte $b3, $b6, $b7;
        int $i0, $i8;
        boolean $z0, $z1;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.LocalDateTime r0, r2;
        java.lang.Object r1;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof org.joda.time.LocalDateTime;

        if $z0 == 0 goto label5;

        r2 = (org.joda.time.LocalDateTime) r1;

        $r4 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $r3 = r2.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $l2 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $l1 = r2.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $b3 = $l2 cmp $l1;

        $i8 = (int) $b3;

        if $i8 >= 0 goto label2;

        $b7 = -1;

        goto label4;

     label2:
        $l5 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $l4 = r2.<org.joda.time.LocalDateTime: long iLocalMillis>;

        $b6 = $l5 cmp $l4;

        if $b6 != 0 goto label3;

        $b7 = 0;

        goto label4;

     label3:
        $b7 = 1;

     label4:
        return $b7;

     label5:
        $i0 = specialinvoke r0.<org.joda.time.base.BaseLocal: int compareTo(java.lang.Object)>(r1);

        return $i0;
    }

    public org.joda.time.DateTime toDateTime()
    {
        org.joda.time.DateTime $r1;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0, r5;
        org.joda.time.Chronology $r2, $r3;
        org.joda.time.DateTime $r4;
        org.joda.time.LocalDateTime r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: org.joda.time.LocalDateTime;

        r5 := @parameter0: org.joda.time.DateTimeZone;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r5);

        $r2 = r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r0);

        $r4 = new org.joda.time.DateTime;

        $i0 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getYear()>();

        $i1 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getMonthOfYear()>();

        $i2 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getDayOfMonth()>();

        $i3 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getHourOfDay()>();

        $i4 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getMinuteOfHour()>();

        $i5 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getSecondOfMinute()>();

        $i6 = virtualinvoke r1.<org.joda.time.LocalDateTime: int getMillisOfSecond()>();

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r3);

        return $r4;
    }

    public org.joda.time.LocalDate toLocalDate()
    {
        org.joda.time.LocalDate $r0;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDate;

        $l0 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r0;
    }

    public org.joda.time.LocalTime toLocalTime()
    {
        org.joda.time.LocalTime $r0;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalTime;

        $l0 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r0;
    }

    org.joda.time.LocalDateTime withLocalMillis(long)
    {
        byte $b2;
        org.joda.time.Chronology $r1;
        long l0, $l1;
        org.joda.time.LocalDateTime r0, $r2;

        r0 := @this: org.joda.time.LocalDateTime;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = new org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

     label2:
        return $r2;
    }

    public org.joda.time.LocalDateTime withDate(int, int, int)
    {
        org.joda.time.Chronology $r1;
        long $l0, $l2, $l4, $l6;
        org.joda.time.LocalDateTime r0, $r5;
        int i1, i3, i5;
        org.joda.time.DateTimeField $r2, $r3, $r4;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        i3 := @parameter1: int;

        i5 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l2, i3);

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l6 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l4, i5);

        $r5 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l6);

        return $r5;
    }

    public org.joda.time.LocalDateTime withTime(int, int, int, int)
    {
        long $l0, $l2, $l4, $l6, $l8;
        int i1, i3, i5, i7;
        org.joda.time.DateTimeField $r2, $r3, $r4, $r5;
        org.joda.time.Chronology $r1;
        org.joda.time.LocalDateTime r0, $r6;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        i3 := @parameter1: int;

        i5 := @parameter2: int;

        i7 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l2, i3);

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l6 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l4, i5);

        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l8 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>($l6, i7);

        $r6 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l8);

        return $r6;
    }

    public org.joda.time.LocalDateTime withFields(org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial r0;
        org.joda.time.Chronology $r2;
        long $l0, $l1;
        org.joda.time.LocalDateTime r1, $r3;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r3 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l1);

        return $r3;
    }

    public org.joda.time.LocalDateTime withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Chronology $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r1, $r4;
        java.lang.IllegalArgumentException $r5;
        int i1;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r4 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r4;
    }

    public org.joda.time.LocalDateTime withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationField $r3;
        org.joda.time.Chronology $r2;
        long $l1, $l2;
        org.joda.time.LocalDateTime r1, $r4;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.DurationFieldType r0;
        int i0;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        return r1;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $l1 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r4 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r4;
    }

    public org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration, int)
    {
        org.joda.time.ReadableDuration r0;
        org.joda.time.Chronology $r2;
        long $l1, $l2, $l3;
        org.joda.time.LocalDateTime r1, $r3;
        int i0;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>();

        $l3 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l1, $l2, i0);

        $r3 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l3);

        return $r3;
    }

    public org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod r0;
        int i0;
        org.joda.time.Chronology $r2;
        long $l1, $l2;
        org.joda.time.LocalDateTime r1, $r3;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke r1.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l1, i0);

        $r3 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r1;
        org.joda.time.LocalDateTime r0, $r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.LocalDateTime plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        org.joda.time.LocalDateTime r0, $r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.LocalDateTime plusYears(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusMonths(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusWeeks(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusDays(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusHours(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusMinutes(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusSeconds(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime plusMillis(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r1;
        int $i1;
        org.joda.time.LocalDateTime r0, $r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.LocalDateTime minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        int $i1;
        org.joda.time.LocalDateTime r0, $r2;

        r0 := @this: org.joda.time.LocalDateTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.LocalDateTime minusYears(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusMonths(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusWeeks(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusDays(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusHours(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusMinutes(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusSeconds(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime minusMillis(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Chronology $r3;
        org.joda.time.LocalDateTime r1;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        org.joda.time.LocalDateTime$Property $r2;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r4;
        java.lang.String $r10;
        boolean $z0;

        r1 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r11;

     label1:
        $z0 = virtualinvoke r1.<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r0);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r2 = new org.joda.time.LocalDateTime$Property;

        $r3 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        specialinvoke $r2.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r4);

        return $r2;
    }

    public int getEra()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getCenturyOfEra()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYearOfEra()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYearOfCentury()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYear()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getWeekyear()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMonthOfYear()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getWeekOfWeekyear()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfYear()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfMonth()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfWeek()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getHourOfDay()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMinuteOfHour()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getSecondOfMinute()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfSecond()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfDay()
    {
        org.joda.time.Chronology $r1;
        int $i1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        org.joda.time.LocalDateTime r0;

        r0 := @this: org.joda.time.LocalDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public org.joda.time.LocalDateTime withEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withCenturyOfEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withYearOfEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withYearOfCentury(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withWeekyear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withMonthOfYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withWeekOfWeekyear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withDayOfYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withDayOfMonth(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withDayOfWeek(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withHourOfDay(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withMinuteOfHour(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withSecondOfMinute(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withMillisOfSecond(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime withMillisOfDay(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.LocalDateTime r0, $r3;

        r0 := @this: org.joda.time.LocalDateTime;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalDateTime$Property era()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property centuryOfEra()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property yearOfCentury()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property yearOfEra()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property year()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property weekyear()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property monthOfYear()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property weekOfWeekyear()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property dayOfYear()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property dayOfMonth()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property dayOfWeek()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property hourOfDay()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property minuteOfHour()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property secondOfMinute()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property millisOfSecond()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.LocalDateTime$Property millisOfDay()
    {
        org.joda.time.LocalDateTime$Property $r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.LocalDateTime r1;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = new org.joda.time.LocalDateTime$Property;

        $r2 = virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        specialinvoke $r0.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.joda.time.LocalDateTime r1;
        java.lang.String $r2;
        org.joda.time.format.DateTimeFormatter $r0;

        r1 := @this: org.joda.time.LocalDateTime;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        $r2 = virtualinvoke $r0.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r1);

        return $r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String r0, $r3, $r4;
        org.joda.time.LocalDateTime r2;

        r2 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = virtualinvoke r2.<org.joda.time.LocalDateTime: java.lang.String toString()>();

        return $r4;

     label1:
        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r2);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.format.DateTimeFormatter $r1, $r3;
        java.util.Locale r2;
        java.lang.String r0, $r5, $r6;
        org.joda.time.LocalDateTime r4;

        r4 := @this: org.joda.time.LocalDateTime;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        $r6 = virtualinvoke r4.<org.joda.time.LocalDateTime: java.lang.String toString()>();

        return $r6;

     label1:
        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r4);

        return $r5;
    }

    public static void <clinit>()
    {
        <org.joda.time.LocalDateTime: int MILLIS_OF_DAY> = 3;

        <org.joda.time.LocalDateTime: int DAY_OF_MONTH> = 2;

        <org.joda.time.LocalDateTime: int MONTH_OF_YEAR> = 1;

        <org.joda.time.LocalDateTime: int YEAR> = 0;

        <org.joda.time.LocalDateTime: long serialVersionUID> = -268716875315837168L;

        return;
    }
}
