public class org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc extends org.waveprotocol.wave.model.document.util.XmlStringBuilder
{
    private final java.lang.StringBuilder builder;
    private int length;
    private final org.waveprotocol.wave.model.document.ReadableDocument view;
    private final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedChars;

    private void <init>(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.StringBuilder $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder> = $r1;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = 0;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view> = r2;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedChars> = r3;

        return;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r0 = new org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters ANY>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r1, $r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmptyWithCharConstraints(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r2;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r0 = new org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r1, r2);

        return $r0;
    }

    public void clear()
    {
        java.lang.StringBuilder $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = 0;

        return;
    }

    public int getLength()
    {
        int $i0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        return $i0;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r1, $r4;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2, r5, $r6;
        java.lang.String $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $z0 = r0 instanceof org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        if $z0 == 0 goto label1;

        $r4 = (org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc) r0;

        r5 = $r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r6 = r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r5);

        goto label2;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $i0 = r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: int getLength()>();

        $i2 = $i0 + $i1;

        r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i2;

        return r1;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc wrap(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r1, $r7, $r13;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: void checkValidTagName(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r7);

        $r9 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $i0 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $i1 = $i0 + 2;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i1;

        return r0;
    }

    public transient org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc wrap(java.lang.String, java.lang.String[])
    {
        boolean $z0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r26, $r27;
        java.lang.String[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String r1, $r9, $r16, $r17, r18, $r24, $r25, r28;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: void checkValidTagName(java.lang.String)>(r1);

        $i0 = lengthof r2;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Attribs must come in string pairs");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r28 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i6 = 0;

     label3:
        $i7 = lengthof r2;

        if i6 >= $i7 goto label5;

        $i4 = i6 + 1;

        $r17 = r2[$i4];

        if $r17 == null goto label4;

        r18 = r2[i6];

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: void checkValidAttributeName(java.lang.String)>(r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $i5 = i6 + 1;

        $r24 = r2[$i5];

        $r25 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String attrEscape(java.lang.String)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        i6 = i6 + 2;

        goto label3;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r9);

        $r12 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $i2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $i3 = $i2 + 2;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i3;

        return r0;
    }

    private void checkValidTagName(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tag name: \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r5);

     label1:
        return;
    }

    private void checkValidAttributeName(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid attribute name: \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r5);

     label1:
        return;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r1, $r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        int $i0, $i1, $i2;
        java.lang.String r2, $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: java.lang.String coerceString(java.lang.String)>(r2);

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addText(java.lang.String)>($r3);

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i2;

        return r0;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendNode(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        int $i0, $i1, $i2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addNode(java.lang.Object)>(r1);

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i2;

        return r0;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendChildXmlFragment(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        int $i0, $i1, $i2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addChildXmlFragment(java.lang.Object)>(r1);

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length> = $i2;

        return r0;
    }

    public java.lang.String startTag(java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r2;
        org.waveprotocol.wave.model.document.ReadableDocument $r4;
        java.lang.StringBuilder $r0, $r1, $r6, $r8, $r9;
        java.lang.Object r3;
        java.lang.String $r5, $r7, $r10, $r11;
        boolean z0;

        r2 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r3 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r4 = r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = specialinvoke r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String getAttributesString(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        if z0 == 0 goto label1;

        $r11 = "/>";

        goto label2;

     label1:
        $r11 = ">";

     label2:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String endTag(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r2;
        org.waveprotocol.wave.model.document.ReadableDocument $r4;
        java.lang.StringBuilder $r0, $r1, $r6, $r7;
        java.lang.Object r3;
        java.lang.String $r5, $r8;

        r2 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r3 := @parameter0: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r4 = r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private boolean isSelfClosing(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        org.waveprotocol.wave.model.document.ReadableDocument $r2;
        java.lang.Object r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("br");

        return $z0;
    }

    private int addNode(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r4, $r5, $r12;
        int $i0, $i1, i2;
        java.lang.String $r7, $r9, $r11, $r15;
        boolean $z0, $z2, $z3;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        java.lang.Object r1, $r3, $r6, $r13;
        java.lang.StringBuilder $r10, $r14;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r8;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r3 == null goto label4;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: boolean isSelfClosing(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r12 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r3);

        if $r13 != null goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        $r14 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r15 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String startTag(java.lang.Object,boolean)>($r3, $z2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i2 = 2;

        if $z3 != 0 goto label3;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addChildXmlFragment(java.lang.Object)>($r3);

        i2 = 2 + $i1;

        $r10 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String endTag(java.lang.Object)>($r3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label3:
        return i2;

     label4:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r1);

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r6);

        $r8 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedChars>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: java.lang.String coerceString(java.lang.String)>($r7);

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addText(java.lang.String)>($r9);

        return $i0;
    }

    private int addText(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String xmlEscape(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        return $i0;
    }

    private int addChildXmlFragment(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r3;
        int $i0, i1;
        java.lang.Object r1, r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

     label1:
        if r4 == null goto label2;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int addNode(java.lang.Object)>(r4);

        i1 = i1 + $i0;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r4);

        goto label1;

     label2:
        return i1;
    }

    private java.lang.String getAttributesString(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2;
        java.util.Map $r3;
        java.lang.String r7, $r14, $r15, r18;
        boolean $z0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;
        java.util.Set $r4;
        java.lang.Object r1, $r6, $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r16, $r17;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.ReadableDocument view>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        r18 = "";

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r13 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r14 = (java.lang.String) $r13;

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String attrEscape(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r18;
    }

    public static java.lang.String xmlEscape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        return $r3;
    }

    public static java.lang.String attrEscape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String xmlEscape(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r1, $r4, $r7;
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r3, $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        if $z0 == 0 goto label4;

        $r2 = r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = (org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc) r0;

        $r5 = $r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $i1 = r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        $r7 = (org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc) r0;

        $i0 = $r7.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: int length>;

        if $i1 != $i0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String getXmlString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.StringBuilder builder>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String getXmlString()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r1, r2);

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String, java.lang.String[])
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r3;
        java.lang.String[] r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc wrap(java.lang.String,java.lang.String[])>(r1, r2);

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc wrap(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r1);

        return $r2;
    }
}
