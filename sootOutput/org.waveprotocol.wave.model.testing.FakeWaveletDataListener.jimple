public class org.waveprotocol.wave.model.testing.FakeWaveletDataListener extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.WaveletDataListener
{
    private org.waveprotocol.wave.model.wave.ParticipantId participantAdded;
    private org.waveprotocol.wave.model.wave.ParticipantId participantRemoved;
    private org.waveprotocol.wave.model.wave.data.BlipData blipDataAdded;
    private java.lang.String oldTitle;
    private java.lang.String newTitle;
    private org.waveprotocol.wave.model.wave.data.BlipData blipModified;
    private long oldLastModifiedTime;
    private long newLastModifiedTime;
    private org.waveprotocol.wave.model.wave.ParticipantId blipContributorAdded;
    private org.waveprotocol.wave.model.wave.ParticipantId blipContributorRemoved;
    private long blipOldTimestamp;
    private long blipNewTimestamp;
    private long blipOldVersion;
    private long blipNewVersion;
    private long oldVersion;
    private long newVersion;
    private org.waveprotocol.wave.model.version.HashedVersion oldHashedVersion;
    private org.waveprotocol.wave.model.version.HashedVersion newHashedVersion;

    public void <init>()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId participantAdded> = r1;

        return;
    }

    public void onParticipantRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId participantRemoved> = r1;

        return;
    }

    public void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long oldLastModifiedTime> = l0;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long newLastModifiedTime> = l1;

        return;
    }

    public void onVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long oldVersion> = l0;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long newVersion> = l1;

        return;
    }

    public void onHashedVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.version.HashedVersion r1, r2;
        org.waveprotocol.wave.model.wave.data.WaveletData r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r2 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.version.HashedVersion oldHashedVersion> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.version.HashedVersion newHashedVersion> = r2;

        return;
    }

    public void onBlipDataAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipDataAdded> = r1;

        return;
    }

    public void onBlipDataContributorAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.WaveletData r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId blipContributorAdded> = r2;

        return;
    }

    public void onBlipDataContributorRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.WaveletData r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId blipContributorRemoved> = r2;

        return;
    }

    public void onBlipDataTimestampModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipOldTimestamp> = l0;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipNewTimestamp> = l1;

        return;
    }

    public void onBlipDataVersionModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipOldVersion> = l0;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipNewVersion> = l1;

        return;
    }

    public void onRemoteBlipDataContentModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        return;
    }

    public void onBlipDataSubmitted(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified> = r1;

        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getParticipantAdded()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId participantAdded>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getParticipantRemoved()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId participantRemoved>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.data.BlipData getBlipDataAdded()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipDataAdded>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.data.BlipData getBlipModified()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.data.BlipData $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.data.BlipData blipModified>;

        return $r1;
    }

    public java.lang.String getNewTitle()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: java.lang.String newTitle>;

        return $r1;
    }

    public java.lang.String getOldTitle()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: java.lang.String oldTitle>;

        return $r1;
    }

    public long getOldLastModifiedTime()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long oldLastModifiedTime>;

        return $l0;
    }

    public long getNewLastModifiedTime()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long newLastModifiedTime>;

        return $l0;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getBlipContributorAdded()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId blipContributorAdded>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getBlipContributorRemoved()
    {
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.wave.ParticipantId blipContributorRemoved>;

        return $r1;
    }

    public long getBlipOldTimestamp()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipOldTimestamp>;

        return $l0;
    }

    public long getBlipNewTimestamp()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipNewTimestamp>;

        return $l0;
    }

    public long getBlipOldVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipOldVersion>;

        return $l0;
    }

    public long getBlipNewVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long blipNewVersion>;

        return $l0;
    }

    public long getNewVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long newVersion>;

        return $l0;
    }

    public long getOldVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $l0 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: long oldVersion>;

        return $l0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getNewHashedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.version.HashedVersion newHashedVersion>;

        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getOldHashedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.model.testing.FakeWaveletDataListener r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveletDataListener;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveletDataListener: org.waveprotocol.wave.model.version.HashedVersion oldHashedVersion>;

        return $r1;
    }
}
