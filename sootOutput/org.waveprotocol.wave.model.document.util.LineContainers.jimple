public final class org.waveprotocol.wave.model.document.util.LineContainers extends java.lang.Object
{
    public static final boolean USE_LINE_CONTAINERS_BY_DEFAULT;
    public static final java.lang.String LINE_TAGNAME;
    public static final java.lang.String PARAGRAPH_NS;
    public static final java.lang.String PARAGRAPH_TAGNAME;
    public static final java.lang.String PARAGRAPH_FULL_TAGNAME;
    private static java.lang.String topLevelContainerTagname;
    private static final java.util.Set lineContainerTagnames;
    public static final org.waveprotocol.wave.model.document.util.DocPredicate LINE_CONTAINER_PREDICATE;
    static final boolean $assertionsDisabled;

    public static void setTopLevelContainerTagname(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Top level tag name must not be null");

        <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname> = r0;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void registerLineContainerTagname(java.lang.String)>(r0);

        return;
    }

    public static java.lang.String topLevelContainerTagname()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Top level line container tag name not set!");

        $r1 = <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname>;

        return $r1;
    }

    public static void registerLineContainerTagname(java.lang.String)
    {
        java.util.Set $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.document.util.LineContainers: java.util.Set lineContainerTagnames>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.LineContainers$Rounding, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        java.lang.AssertionError $r13;
        int[] $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding r1;
        org.waveprotocol.wave.model.document.util.Point r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r12;
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection r0, $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r8, $r10, $r18;
        java.lang.Object $r6, $r9, $r11, $r14, r15, $r16, r17;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.LineContainers$Rounding;

        r4 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        r0 := @parameter3: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Rounding direction cannot be null.");

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers$3: int[] $SwitchMap$org$waveprotocol$wave$model$document$util$LineContainers$Rounding>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.LineContainers$Rounding: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label03;
            default: goto label16;
        };

     label01:
        return r4;

     label02:
        $r12 = new java.lang.UnsupportedOperationException;

        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented");

        throw $r12;

     label03:
        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point jumpOutToContainer(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r3, r4);

        if $r5 != null goto label04;

        return null;

     label04:
        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r3, $r5);

        $r7 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection RIGHT>;

        if r0 != $r7 goto label09;

        $z2 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z2 == 0 goto label05;

        $r11 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r14 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r11);

        goto label06;

     label05:
        $r14 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label06:
        r15 = $r14;

     label07:
        if r15 == null goto label08;

        $z3 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r15);

        if $z3 != 0 goto label08;

        r15 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r15);

        goto label07;

     label08:
        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, r15);

        return $r10;

     label09:
        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label10;

        $r9 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r16 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r9);

        goto label11;

     label10:
        $r8 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r3, $r8);

     label11:
        r17 = $r16;

     label12:
        if r17 == null goto label13;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r17);

        if $z1 != 0 goto label13;

        r17 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r17);

        goto label12;

     label13:
        if r17 != null goto label14;

        $r18 = null;

        goto label15;

     label14:
        $r18 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r17);

     label15:
        return $r18;

     label16:
        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("Missing rounding implementations");

        throw $r13;
    }

    public static org.waveprotocol.wave.model.document.util.Point jumpOutToContainer(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.DocPredicate $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.Point r1, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.DocPredicate LINE_CONTAINER_PREDICATE>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point jumpOut(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.DocPredicate)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object getRelatedLineElement(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection $r2;
        java.lang.Object $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding $r3;
        org.waveprotocol.wave.model.document.util.Point r1, $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r3 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding LINE>;

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection LEFT>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)>(r0, $r3, r1, $r2);

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r5 != null goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        return $r7;
    }

    public static boolean isAtLineEnd(org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding $r3;
        org.waveprotocol.wave.model.document.util.Point r1, $r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r3 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding LINE>;

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection RIGHT>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)>(r0, $r3, r1, $r2);

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r4);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAtLineStart(org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r1, r0);

     label2:
        if $r2 == null goto label3;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, $r2);

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isAtEmptyLine(org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isAtLineStart(org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.util.Point)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isAtLineEnd(org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.util.Point)>(r0, r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static java.lang.Object insertInto(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r5;
        java.lang.Iterable $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding $r6;
        org.waveprotocol.wave.model.document.util.Point r4;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.Object $r1, $r7, $r8, $r9, r10, r11;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r5 := @parameter2: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        r10 = null;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deepElementsReverse(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r0, $r1, null);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r9);

        if $z2 == 0 goto label2;

        r10 = $r9;

        goto label3;

     label2:
        goto label1;

     label3:
        if r10 == null goto label6;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r4);

        r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r10);

     label4:
        if r11 == null goto label6;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r11);

        if $z1 == 0 goto label5;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(java.lang.Object)>(r11);

        if $i1 >= $i0 goto label5;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r4, r5);

        return $r8;

     label5:
        r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r10);

        goto label4;

     label6:
        $r6 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding NONE>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object insertContentOnNewLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, $r6, r4, r5);

        return $r7;
    }

    public static void deleteLine(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object)
    {
        java.lang.String $r12, $r16;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding $r4;
        org.waveprotocol.wave.model.document.util.Point $r7;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection $r6;
        org.waveprotocol.wave.model.document.util.Point$El $r5, r17;
        java.lang.Object r1, $r2, $r3, $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r15;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a line element: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r16);

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r2);

        if $z1 != 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a line container: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r12);

     label2:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r2);

        if $r3 != r1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $r4 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding LINE>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $r6 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection RIGHT>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)>(r0, $r4, $r5, $r6);

        if $z3 == 0 goto label5;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r8);

        if $z2 == 0 goto label6;

     label5:
        r17 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        goto label7;

     label6:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: void emptyElement(java.lang.Object)>(r1);

        r17 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

     label7:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r17, $r7);

        return;
    }

    public static java.util.List getLineRanges(org.waveprotocol.wave.model.document.MutableDocument)
    {
        java.util.ArrayList $r10;
        int $i0, $i1, i2, $i4;
        org.waveprotocol.wave.model.document.util.Range $r11, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r5, $r6;
        java.lang.Object $r2, r8, r9;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r2);

     label1:
        if r8 == null goto label7;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r8);

        if $z0 == 0 goto label6;

        $i4 = (int) -1;

        i2 = $i4;

        r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r8);

     label2:
        if r9 == null goto label5;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r9);

        if $z1 == 0 goto label4;

        if i2 <= 0 goto label3;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r9);

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r6);

        $r11 = new org.waveprotocol.wave.model.document.util.Range;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>(i2, $i1);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r9);

        i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r5);

     label4:
        r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r9);

        goto label2;

     label5:
        if i2 <= 0 goto label6;

        $r12 = new org.waveprotocol.wave.model.document.util.Range;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r8);

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r4);

        specialinvoke $r12.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>(i2, $i0);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r12);

     label6:
        r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r8);

        goto label1;

     label7:
        return $r10;
    }

    public static java.lang.Object insertLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.LineContainers$Rounding, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding r1;
        org.waveprotocol.wave.model.document.util.Point r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.LineContainers$Rounding;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        $r3 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object insertLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r1, r2, $r3);

        return $r4;
    }

    public static java.lang.Object insertLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.LineContainers$Rounding, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.MutableDocument r1;
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection $r2;
        org.waveprotocol.wave.model.document.operation.Attributes r5;
        java.lang.Object $r6;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding r0, $r4;
        org.waveprotocol.wave.model.document.util.Point $r3, r7, r8;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.LineContainers$Rounding;

        r7 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        r5 := @parameter3: org.waveprotocol.wave.model.document.operation.Attributes;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "rounding must not be null");

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection RIGHT>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)>(r1, r0, r7, $r2);

        r8 = $r3;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "location is not a valid place to insert a line");

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        $r4 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding LINE>;

        if r0 == $r4 goto label3;

        r8 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point jumpOutToContainer(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r1, $r3);

     label3:
        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>(r8, "line", r5);

        return $r6;
    }

    public static java.lang.Object insertContentOnNewLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.LineContainers$Rounding, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4;
        java.lang.Object $r3, $r5;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding r1;
        org.waveprotocol.wave.model.document.util.Point r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.LineContainers$Rounding;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        r4 := @parameter3: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object insertLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point)>(r0, r1, r2);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object insertContentIntoLineStart(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, $r3, r4);

        return $r5;
    }

    public static java.lang.Object appendContentOnNewLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r2;
        java.lang.Object $r1, $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, null);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object insertContentIntoLineStart(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, $r1, r2);

        return $r3;
    }

    public static java.lang.Object insertContentIntoLineEnd(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r6;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection $r4;
        java.lang.AssertionError $r8;
        org.waveprotocol.wave.model.document.util.Point$El $r3;
        java.lang.Object r1, $r7;
        org.waveprotocol.wave.model.document.util.LineContainers$Rounding $r2;
        org.waveprotocol.wave.model.document.util.Point $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers$Rounding: org.waveprotocol.wave.model.document.util.LineContainers$Rounding LINE>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $r4 = <org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection: org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection RIGHT>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.Point roundLocation(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.LineContainers$Rounding,org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.LineContainers$RoundDirection)>(r0, $r2, $r3, $r4);

        if $r5 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not a valid line location.");

        throw $r8;

     label1:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r5, r6);

        return $r7;
    }

    public static java.lang.Object insertContentIntoLineStart(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r3;
        java.lang.Object r1, $r4;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r2, r3);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        return $r4;
    }

    public static void properAppendLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r2;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$2 $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r1 = new org.waveprotocol.wave.model.document.util.LineContainers$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.LineContainers$2: void <init>(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)>($r1);

        return;
    }

    public static java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r2 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.XmlStringBuilder, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4, $r7, $r8, $r10;
        java.lang.AssertionError $r12;
        java.lang.Iterable $r2;
        int $i0;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r13;
        org.waveprotocol.wave.model.document.operation.Attributes r5;
        java.lang.Object $r1, $r6, $r11, $r14, r15, $r16, $r17;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r5 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        r15 = null;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deepElementsReverse(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r0, $r1, null);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r14);

        if $z1 == 0 goto label2;

        r15 = $r14;

        goto label3;

     label2:
        goto label1;

     label3:
        if r15 != null goto label7;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)>("line");

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname()>();

        $r10 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)>($r9);

        $r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object appendXml(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r10);

        if r4 == null goto label4;

        $i0 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: int getLength()>();

        if $i0 <= 0 goto label4;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r11);

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r13, r4);

     label4:
        $r16 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r11);

        $r17 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>($r16);

        $z2 = <org.waveprotocol.wave.model.document.util.LineContainers: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        if $r17 != null goto label5;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label5:
        if r5 == null goto label6;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: void setElementAttributes(java.lang.Object,org.waveprotocol.wave.model.document.operation.Attributes)>($r17, r5);

     label6:
        return $r17;

     label7:
        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r15, r4, r5);

        return $r6;
    }

    public static java.lang.Object appendToLastLine(org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r7;
        java.lang.Iterable $r2;
        java.lang.Object $r1, $r5, $r6, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deepElementsReverse(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r0, $r1, null);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r6);

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, null);

        if $r7 == null goto label2;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r7, r4);

        return $r8;

     label2:
        goto label1;

     label3:
        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, r4);

        return $r5;
    }

    public static java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r2;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        java.lang.Object r1, $r4;
        org.waveprotocol.wave.model.document.MutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r3 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r1, r2, $r3);

        return $r4;
    }

    public static java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object, org.waveprotocol.wave.model.document.util.XmlStringBuilder, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4;
        int $i0;
        java.lang.Object r1, $r3;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$El $r5;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r2 := @parameter3: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>(r1, "line", r2);

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: int getLength()>();

        if $i0 <= 0 goto label1;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r5, r4);

     label1:
        return $r3;
    }

    public static boolean isLineContainerTagname(java.lang.String)
    {
        java.util.Set $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.document.util.LineContainers: java.util.Set lineContainerTagnames>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    private static boolean isUnsupportedParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r1, $r2, $r3, r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r3);

     label2:
        if r4 == null goto label4;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isUnsupportedParagraphElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r4);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r4);

        goto label2;

     label4:
        return 0;
    }

    public static void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isUnsupportedParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Paragraph docs no longer supported");

        return;
    }

    public static boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r2);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainerTagname(java.lang.String)>($r3);

        return $z0;

     label1:
        return 0;
    }

    public static boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: boolean isMatchingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.String)>(r0, r1, "line");

        return $z0;
    }

    public static boolean isFirstLine(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "not a line element");

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getPreviousSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isUnsupportedParagraphElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: boolean isMatchingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.String)>(r0, r1, "p");

        return $z0;
    }

    public static transient java.lang.String debugLineWrap(java.lang.String[])
    {
        java.lang.String[] r1;
        int i0, i1;
        java.lang.StringBuilder $r0, $r4, $r5, $r6;
        java.lang.String $r2, r3, $r7;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<line></line>");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static transient java.lang.String debugContainerWrap(java.lang.String[])
    {
        java.lang.String[] r5;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r7, $r8, $r10, $r11;
        java.lang.String $r2, $r6, $r9, $r12;

        r5 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r2 = <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String debugLineWrap(java.lang.String[])>(r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r9 = <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String topLevelContainerTagname>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.LineContainers r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.LineContainers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashSet $r1;
        org.waveprotocol.wave.model.document.util.LineContainers$1 $r2;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String PARAGRAPH_FULL_TAGNAME> = "l:p";

        <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String PARAGRAPH_TAGNAME> = "p";

        <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String PARAGRAPH_NS> = "l";

        <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String LINE_TAGNAME> = "line";

        <org.waveprotocol.wave.model.document.util.LineContainers: boolean USE_LINE_CONTAINERS_BY_DEFAULT> = 1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/LineContainers;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.LineContainers: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.waveprotocol.wave.model.document.util.LineContainers: java.util.Set lineContainerTagnames> = $r1;

        $r2 = new org.waveprotocol.wave.model.document.util.LineContainers$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.LineContainers$1: void <init>()>();

        <org.waveprotocol.wave.model.document.util.LineContainers: org.waveprotocol.wave.model.document.util.DocPredicate LINE_CONTAINER_PREDICATE> = $r2;

        return;
    }
}
