public class org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser extends org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser
{
    private static final java.lang.String HTTP_NS;
    private static final java.lang.String SECURITY_NS;

    public void <init>()
    {
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r0;

        r0 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        specialinvoke r0.<org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser: void <init>()>();

        return;
    }

    public void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r1;
        org.w3c.dom.Element r2;
        org.springframework.beans.factory.support.BeanDefinitionBuilder r0;
        org.springframework.beans.factory.xml.ParserContext r6;
        javax.xml.namespace.QName $r3, $r4, $r5;

        r1 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        r2 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r0 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        virtualinvoke r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder setAbstract(boolean)>(1);

        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http/configuration", "client");

        virtualinvoke r1.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,javax.xml.namespace.QName,java.lang.String,java.lang.Class)>(r2, r0, $r3, "client", class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        $r4 = new javax.xml.namespace.QName;

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http/configuration", "proxyAuthorization");

        virtualinvoke r1.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,javax.xml.namespace.QName,java.lang.String,java.lang.Class)>(r2, r0, $r4, "proxyAuthorization", class "Lorg/apache/cxf/configuration/security/ProxyAuthorizationPolicy;");

        $r5 = new javax.xml.namespace.QName;

        specialinvoke $r5.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http/configuration", "authorization");

        virtualinvoke r1.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,javax.xml.namespace.QName,java.lang.String,java.lang.Class)>(r2, r0, $r5, "authorization", class "Lorg/apache/cxf/configuration/security/AuthorizationPolicy;");

        specialinvoke r1.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapSpecificElements(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder)>(r2, r0);

        return;
    }

    private void mapSpecificElements(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r9;
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r8;
        short $s0;
        org.w3c.dom.Node r14;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.w3c.dom.Element r0, $r10, $r11, $r12, $r13;

        r8 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r9 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        r14 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r14 == null goto label8;

        $s0 = interfaceinvoke r14.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s0 goto label2;

        $r1 = "http://cxf.apache.org/transports/http/configuration";

        $r2 = interfaceinvoke r14.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

     label2:
        r14 = interfaceinvoke r14.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label3:
        $r3 = interfaceinvoke r14.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r4 = "trustDecider";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r13 = (org.w3c.dom.Element) r14;

        virtualinvoke r8.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapBeanOrClassElement(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.Class)>($r13, r9, class "Lorg/apache/cxf/transport/http/MessageTrustDecider;");

        goto label7;

     label4:
        $r5 = "authSupplier";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label5;

        $r12 = (org.w3c.dom.Element) r14;

        virtualinvoke r8.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapBeanOrClassElement(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.Class)>($r12, r9, class "Lorg/apache/cxf/transport/http/auth/HttpAuthSupplier;");

        goto label7;

     label5:
        $r6 = "basicAuthSupplier";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label6;

        $r11 = (org.w3c.dom.Element) r14;

        virtualinvoke r8.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapBeanOrClassElement(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.Class)>($r11, r9, class "Lorg/apache/cxf/transport/http/auth/HttpAuthSupplier;");

        goto label7;

     label6:
        $r7 = "tlsClientParameters";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z4 == 0 goto label7;

        $r10 = (org.w3c.dom.Element) r14;

        virtualinvoke r8.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapTLSClientParameters(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder)>($r10, r9);

     label7:
        r14 = interfaceinvoke r14.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label8:
        return;
    }

    public void mapTLSClientParameters(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition $r4, $r5, $r7;
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.springframework.beans.factory.support.BeanDefinitionBuilder $r0, $r3, r6;
        org.w3c.dom.Attr r37;
        short $s1;
        org.w3c.dom.Node $r28, r39;
        int $i0, $i2, $i3, i4;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38;
        org.w3c.dom.Element r1, $r11, $r22, $r23, $r24, $r25, $r26, $r27;

        r21 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r0 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class)>(class "Lorg/apache/cxf/configuration/jsse/TLSClientParametersConfig$TLSClientParametersTypeInternal;");

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i4 = 0;

     label01:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i4 >= $i0 goto label04;

        $r28 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i4);

        r37 = (org.w3c.dom.Attr) $r28;

        $r29 = interfaceinvoke r37.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        if $r29 != null goto label03;

        $r30 = interfaceinvoke r37.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        $r31 = "useHttpsURLConnectionDefaultSslSocketFactory";

        $z8 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z8 != 0 goto label02;

        $r32 = "useHttpsURLConnectionDefaultHostnameVerifier";

        $z9 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z9 != 0 goto label02;

        $r33 = "disableCNCheck";

        $z10 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z10 != 0 goto label02;

        $r34 = "jsseProvider";

        $z11 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z11 != 0 goto label02;

        $r35 = "secureSocketProtocol";

        $z12 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z12 != 0 goto label02;

        $r36 = "sslCacheTimeout";

        $z13 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z13 == 0 goto label03;

     label02:
        $r38 = interfaceinvoke r37.<org.w3c.dom.Attr: java.lang.String getValue()>();

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>($r30, $r38);

     label03:
        i4 = i4 + 1;

        goto label01;

     label04:
        r39 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label05:
        if r39 == null goto label17;

        $s1 = interfaceinvoke r39.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s1 goto label06;

        $r8 = "http://cxf.apache.org/configuration/security";

        $r9 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label07;

     label06:
        r39 = interfaceinvoke r39.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label05;

     label07:
        $r10 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r11 = (org.w3c.dom.Element) r39;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r13 = "keyManagers";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label09;

        if $r12 == null goto label08;

        $i3 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i3 <= 0 goto label08;

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>("keyManagersRef", $r12);

        goto label16;

     label08:
        $r27 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r27, $r0, $r10, class "Lorg/apache/cxf/configuration/security/KeyManagersType;");

        goto label16;

     label09:
        $r14 = "trustManagers";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label11;

        if $r12 == null goto label10;

        $i2 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i2 <= 0 goto label10;

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>("trustManagersRef", $r12);

        goto label16;

     label10:
        $r26 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r26, $r0, $r10, class "Lorg/apache/cxf/configuration/security/TrustManagersType;");

        goto label16;

     label11:
        $r15 = "cipherSuites";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label12;

        $r25 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r25, $r0, $r10, class "Lorg/apache/cxf/configuration/security/CipherSuites;");

        goto label16;

     label12:
        $r16 = "cipherSuitesFilter";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label13;

        $r24 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r24, $r0, $r10, class "Lorg/apache/cxf/configuration/security/FiltersType;");

        goto label16;

     label13:
        $r17 = "secureRandomParameters";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z5 == 0 goto label14;

        $r23 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r23, $r0, $r10, class "Lorg/apache/cxf/configuration/security/SecureRandomParameters;");

        goto label16;

     label14:
        $r18 = "certConstraints";

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label15;

        $r22 = (org.w3c.dom.Element) r39;

        virtualinvoke r21.<org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: void mapElementToJaxbProperty(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder,java.lang.String,java.lang.Class)>($r22, $r0, $r10, class "Lorg/apache/cxf/configuration/security/CertificateConstraintsType;");

        goto label16;

     label15:
        $r19 = "certAlias";

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z7 == 0 goto label16;

        $r20 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getTextContent()>();

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>($r10, $r20);

     label16:
        r39 = interfaceinvoke r39.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label05;

     label17:
        $r3 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class)>(class "Lorg/apache/cxf/configuration/jsse/TLSClientParametersConfig;");

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        virtualinvoke $r4.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setFactoryMethodName(java.lang.String)>("createTLSClientParametersFromType");

        $r5 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArg(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        virtualinvoke r6.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("tlsClientParameters", $r7);

        return;
    }

    protected void mapBeanOrClassElement(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder, java.lang.Class)
    {
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16, $r24, $r25, $r26, $r27, $r29, $r30, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r54, $r55, $r56, $r57, $r58, $r59, $r60;
        org.springframework.beans.factory.support.BeanDefinitionBuilder r10;
        java.lang.String $r1, $r2, $r9, $r17, $r28, $r31, $r41, $r51, $r61, $r62;
        java.lang.ClassNotFoundException $r42;
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r18;
        java.lang.InstantiationException $r32;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalAccessException $r52;
        java.lang.IllegalArgumentException $r3, $r11, $r23, $r33, $r43, $r53;
        org.w3c.dom.Element r0;
        java.lang.Class $r19, $r20, r22;
        java.lang.Object $r21;

        r18 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r10 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        r22 := @parameter2: java.lang.Class;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        if $r2 == null goto label07;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 != 0 goto label07;

     label01:
        $r19 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r2, $r19);

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.Object newInstance()>();

        $z4 = virtualinvoke r22.<java.lang.Class: boolean isInstance(java.lang.Object)>($r21);

        if $z4 != 0 goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be of type ");

        $r28 = virtualinvoke r22.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r23;

     label02:
        virtualinvoke r10.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>($r1, $r21);

     label03:
        goto label07;

     label04:
        $r52 := @caughtexception;

        $r53 = new java.lang.IllegalArgumentException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not load ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r61);

        throw $r53;

     label05:
        $r42 := @caughtexception;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not load ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw $r43;

     label06:
        $r32 := @caughtexception;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not load ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r41);

        throw $r33;

     label07:
        $r62 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("bean");

        if $r62 == null goto label09;

        $z1 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label09;

        if $r2 == null goto label08;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label08;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot have both ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"bean\" and \"class\" attributes.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label08:
        virtualinvoke r10.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>($r1, $r62);

        goto label11;

     label09:
        if $r2 == null goto label10;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label11;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' requires at least one of the ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"bean\" or \"class\" attributes.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label11:
        return;

        catch java.lang.IllegalAccessException from label01 to label03 with label04;
        catch java.lang.ClassNotFoundException from label01 to label03 with label05;
        catch java.lang.InstantiationException from label01 to label03 with label06;
    }

    protected java.lang.Class getBeanClass(org.w3c.dom.Element)
    {
        org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return class "Lorg/apache/cxf/transport/http/HTTPConduit;";
    }

    public static void <clinit>()
    {
        <org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: java.lang.String SECURITY_NS> = "http://cxf.apache.org/configuration/security";

        <org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser: java.lang.String HTTP_NS> = "http://cxf.apache.org/transports/http/configuration";

        return;
    }
}
