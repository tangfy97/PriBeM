public class ucar.ma2.ArrayShort extends ucar.ma2.Array
{
    protected short[] storage;

    static ucar.ma2.ArrayShort factory(ucar.ma2.Index)
    {
        ucar.ma2.Index r0;
        ucar.ma2.ArrayShort $r1;

        r0 := @parameter0: ucar.ma2.Index;

        $r1 = staticinvoke <ucar.ma2.ArrayShort: ucar.ma2.ArrayShort factory(ucar.ma2.Index,short[])>(r0, null);

        return $r1;
    }

    static ucar.ma2.ArrayShort factory(ucar.ma2.Index, short[])
    {
        ucar.ma2.ArrayShort$D0 $r9;
        ucar.ma2.ArrayShort$D1 $r8;
        ucar.ma2.ArrayShort $r10;
        ucar.ma2.Index r0;
        int $i0;
        ucar.ma2.ArrayShort$D6 $r3;
        ucar.ma2.ArrayShort$D7 $r1;
        short[] r2;
        ucar.ma2.ArrayShort$D4 $r5;
        ucar.ma2.ArrayShort$D5 $r4;
        ucar.ma2.ArrayShort$D2 $r7;
        ucar.ma2.ArrayShort$D3 $r6;

        r0 := @parameter0: ucar.ma2.Index;

        r2 := @parameter1: short[];

        $i0 = virtualinvoke r0.<ucar.ma2.Index: int getRank()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            default: goto label9;
        };

     label1:
        $r9 = new ucar.ma2.ArrayShort$D0;

        specialinvoke $r9.<ucar.ma2.ArrayShort$D0: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r9;

     label2:
        $r8 = new ucar.ma2.ArrayShort$D1;

        specialinvoke $r8.<ucar.ma2.ArrayShort$D1: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r8;

     label3:
        $r7 = new ucar.ma2.ArrayShort$D2;

        specialinvoke $r7.<ucar.ma2.ArrayShort$D2: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r7;

     label4:
        $r6 = new ucar.ma2.ArrayShort$D3;

        specialinvoke $r6.<ucar.ma2.ArrayShort$D3: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r6;

     label5:
        $r5 = new ucar.ma2.ArrayShort$D4;

        specialinvoke $r5.<ucar.ma2.ArrayShort$D4: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r5;

     label6:
        $r4 = new ucar.ma2.ArrayShort$D5;

        specialinvoke $r4.<ucar.ma2.ArrayShort$D5: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r4;

     label7:
        $r3 = new ucar.ma2.ArrayShort$D6;

        specialinvoke $r3.<ucar.ma2.ArrayShort$D6: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r3;

     label8:
        $r1 = new ucar.ma2.ArrayShort$D7;

        specialinvoke $r1.<ucar.ma2.ArrayShort$D7: void <init>(ucar.ma2.Index,short[],ucar.ma2.ArrayShort$1)>(r0, r2, null);

        return $r1;

     label9:
        $r10 = new ucar.ma2.ArrayShort;

        specialinvoke $r10.<ucar.ma2.ArrayShort: void <init>(ucar.ma2.Index,short[])>(r0, r2);

        return $r10;
    }

    public void <init>(int[])
    {
        int[] r1;
        ucar.ma2.Index $r2;
        ucar.ma2.ArrayShort r0;
        int $i1;
        long $l0;
        short[] $r3;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: int[];

        specialinvoke r0.<ucar.ma2.Array: void <init>(int[])>(r1);

        $r2 = r0.<ucar.ma2.ArrayShort: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r2.<ucar.ma2.Index: long getSize()>();

        $i1 = (int) $l0;

        $r3 = newarray (short)[$i1];

        r0.<ucar.ma2.ArrayShort: short[] storage> = $r3;

        return;
    }

    void <init>(ucar.ma2.Index, short[])
    {
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i1;
        long $l0;
        short[] r2, $r3;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        r2 := @parameter1: short[];

        specialinvoke r0.<ucar.ma2.Array: void <init>(ucar.ma2.Index)>(r1);

        if r2 == null goto label1;

        r0.<ucar.ma2.ArrayShort: short[] storage> = r2;

        goto label2;

     label1:
        $l0 = virtualinvoke r1.<ucar.ma2.Index: long getSize()>();

        $i1 = (int) $l0;

        $r3 = newarray (short)[$i1];

        r0.<ucar.ma2.ArrayShort: short[] storage> = $r3;

     label2:
        return;
    }

    ucar.ma2.Array createView(ucar.ma2.Index)
    {
        ucar.ma2.Index r0;
        ucar.ma2.ArrayShort r1, $r3;
        short[] $r2;
        boolean $z0;

        r1 := @this: ucar.ma2.ArrayShort;

        r0 := @parameter0: ucar.ma2.Index;

        $r2 = r1.<ucar.ma2.ArrayShort: short[] storage>;

        $r3 = staticinvoke <ucar.ma2.ArrayShort: ucar.ma2.ArrayShort factory(ucar.ma2.Index,short[])>(r0, $r2);

        $z0 = virtualinvoke r1.<ucar.ma2.ArrayShort: boolean isUnsigned()>();

        virtualinvoke $r3.<ucar.ma2.Array: void setUnsigned(boolean)>($z0);

        return $r3;
    }

    public java.lang.Object getStorage()
    {
        short[] $r1;
        ucar.ma2.ArrayShort r0;

        r0 := @this: ucar.ma2.ArrayShort;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        return $r1;
    }

    void copyFrom1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object)
    {
        ucar.ma2.IndexIterator r3;
        ucar.ma2.ArrayShort r4;
        short $s1;
        int $i0, i2;
        java.lang.Object r0;
        short[] $r1, r2;

        r4 := @this: ucar.ma2.ArrayShort;

        r3 := @parameter0: ucar.ma2.IndexIterator;

        r0 := @parameter1: java.lang.Object;

        $r1 = (short[]) r0;

        r2 = (short[]) $r1;

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label2;

        $s1 = r2[i2];

        interfaceinvoke r3.<ucar.ma2.IndexIterator: void setShortNext(short)>($s1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void copyTo1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object)
    {
        ucar.ma2.IndexIterator r3;
        ucar.ma2.ArrayShort r4;
        short $s1;
        int $i0, i2;
        java.lang.Object r0;
        short[] $r1, r2;

        r4 := @this: ucar.ma2.ArrayShort;

        r3 := @parameter0: ucar.ma2.IndexIterator;

        r0 := @parameter1: java.lang.Object;

        $r1 = (short[]) r0;

        r2 = (short[]) $r1;

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label2;

        $s1 = interfaceinvoke r3.<ucar.ma2.IndexIterator: short getShortNext()>();

        r2[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.nio.ByteBuffer getDataAsByteBuffer()
    {
        ucar.ma2.ArrayShort r0;
        java.nio.ShortBuffer $r2;
        long $l0, $l1;
        java.nio.ByteBuffer $r1;
        int $i2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        short[] $r5, $r6;

        r0 := @this: ucar.ma2.ArrayShort;

        $l0 = virtualinvoke r0.<ucar.ma2.ArrayShort: long getSize()>();

        $l1 = 2L * $l0;

        $i2 = (int) $l1;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        $r4 = virtualinvoke r0.<ucar.ma2.ArrayShort: java.lang.Object get1DJavaArray(java.lang.Class)>($r3);

        $r5 = (short[]) $r4;

        $r6 = (short[]) $r5;

        virtualinvoke $r2.<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>($r6);

        return $r1;
    }

    public java.lang.Class getElementType()
    {
        java.lang.Class $r0;
        ucar.ma2.ArrayShort r1;

        r1 := @this: ucar.ma2.ArrayShort;

        $r0 = <java.lang.Short: java.lang.Class TYPE>;

        return $r0;
    }

    public short get(ucar.ma2.Index)
    {
        short $s1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s1 = $r2[$i0];

        return $s1;
    }

    public void set(ucar.ma2.Index, short)
    {
        short s1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        s1 := @parameter1: short;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $r2[$i0] = s1;

        return;
    }

    public double getDouble(ucar.ma2.Index)
    {
        ucar.ma2.ArrayShort r0;
        short s1;
        ucar.ma2.Index r1;
        int $i0, $i2;
        short[] $r2;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        s1 = $r2[$i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $d1 = (double) $i2;

        return $d1;

     label1:
        $d0 = (double) s1;

        return $d0;
    }

    public void setDouble(ucar.ma2.Index, double)
    {
        short $s2;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0, $i1;
        short[] $r2;
        double d0;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        d0 := @parameter1: double;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $i1 = (int) d0;

        $s2 = (short) $i1;

        $r2[$i0] = $s2;

        return;
    }

    public float getFloat(ucar.ma2.Index)
    {
        ucar.ma2.ArrayShort r0;
        short s1;
        ucar.ma2.Index r1;
        int $i0, $i2;
        float $f0, $f1;
        short[] $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        s1 = $r2[$i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $f1 = (float) $i2;

        return $f1;

     label1:
        $f0 = (float) s1;

        return $f0;
    }

    public void setFloat(ucar.ma2.Index, float)
    {
        short $s2;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0, $i1;
        float f0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        f0 := @parameter1: float;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $i1 = (int) f0;

        $s2 = (short) $i1;

        $r2[$i0] = $s2;

        return;
    }

    public long getLong(ucar.ma2.Index)
    {
        ucar.ma2.ArrayShort r0;
        long $l2, $l3;
        short s1;
        ucar.ma2.Index r1;
        int $i0, $i4;
        short[] $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        s1 = $r2[$i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i4 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $l3 = (long) $i4;

        return $l3;

     label1:
        $l2 = (long) s1;

        return $l2;
    }

    public void setLong(ucar.ma2.Index, long)
    {
        short $s3;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0, $i2;
        long l1;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        l1 := @parameter1: long;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $i2 = (int) l1;

        $s3 = (short) $i2;

        $r2[$i0] = $s3;

        return;
    }

    public int getInt(ucar.ma2.Index)
    {
        ucar.ma2.ArrayShort r0;
        short s1;
        ucar.ma2.Index r1;
        int $i0, $i2, $i3;
        short[] $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        s1 = $r2[$i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        goto label2;

     label1:
        $i3 = (int) s1;

        $i2 = $i3;

     label2:
        return $i2;
    }

    public void setInt(ucar.ma2.Index, int)
    {
        short $s2;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0, i1;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        i1 := @parameter1: int;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s2 = (short) i1;

        $r2[$i0] = $s2;

        return;
    }

    public short getShort(ucar.ma2.Index)
    {
        short $s1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s1 = $r2[$i0];

        return $s1;
    }

    public void setShort(ucar.ma2.Index, short)
    {
        short s1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        s1 := @parameter1: short;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $r2[$i0] = s1;

        return;
    }

    public byte getByte(ucar.ma2.Index)
    {
        short $s1;
        byte $b2;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s1 = $r2[$i0];

        $b2 = (byte) $s1;

        return $b2;
    }

    public void setByte(ucar.ma2.Index, byte)
    {
        short $s2;
        byte b1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        b1 := @parameter1: byte;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s2 = (short) b1;

        $r2[$i0] = $s2;

        return;
    }

    public char getChar(ucar.ma2.Index)
    {
        ucar.ma2.ArrayShort r0;
        char $c2, $c3;
        short s1;
        ucar.ma2.Index r1;
        int $i0, $i4;
        short[] $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        s1 = $r2[$i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i4 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $c3 = (char) $i4;

        return $c3;

     label1:
        $c2 = (char) s1;

        return $c2;
    }

    public void setChar(ucar.ma2.Index, char)
    {
        short $s2;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        char c1;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        c1 := @parameter1: char;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s2 = (short) c1;

        $r2[$i0] = $s2;

        return;
    }

    public boolean getBoolean(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.Index r2;
        ucar.ma2.ArrayShort r1;

        r1 := @this: ucar.ma2.ArrayShort;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setBoolean(ucar.ma2.Index, boolean)
    {
        ucar.ma2.Index r2;
        ucar.ma2.ArrayShort r1;
        ucar.ma2.ForbiddenConversionException $r0;
        boolean z0;

        r1 := @this: ucar.ma2.ArrayShort;

        r2 := @parameter0: ucar.ma2.Index;

        z0 := @parameter1: boolean;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object getObject(ucar.ma2.Index)
    {
        short $s1;
        ucar.ma2.Index r1;
        java.lang.Short $r3;
        ucar.ma2.ArrayShort r0;
        int $i0;
        short[] $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $s1 = $r2[$i0];

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        return $r3;
    }

    public void setObject(ucar.ma2.Index, java.lang.Object)
    {
        short $s1;
        ucar.ma2.Index r1;
        ucar.ma2.ArrayShort r0;
        int $i0;
        java.lang.Object r3;
        short[] $r2;
        java.lang.Number $r4;

        r0 := @this: ucar.ma2.ArrayShort;

        r1 := @parameter0: ucar.ma2.Index;

        r3 := @parameter1: java.lang.Object;

        $r2 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $r4 = (java.lang.Number) r3;

        $s1 = virtualinvoke $r4.<java.lang.Number: short shortValue()>();

        $r2[$i0] = $s1;

        return;
    }

    public double getDouble(int)
    {
        ucar.ma2.ArrayShort r0;
        short s1;
        int i0, $i2;
        short[] $r1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        s1 = $r1[i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $d1 = (double) $i2;

        return $d1;

     label1:
        $d0 = (double) s1;

        return $d0;
    }

    public void setDouble(int, double)
    {
        short $s2;
        ucar.ma2.ArrayShort r0;
        int i0, $i1;
        short[] $r1;
        double d0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i1 = (int) d0;

        $s2 = (short) $i1;

        $r1[i0] = $s2;

        return;
    }

    public float getFloat(int)
    {
        ucar.ma2.ArrayShort r0;
        short s1;
        int i0, $i2;
        float $f0, $f1;
        short[] $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        s1 = $r1[i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $f1 = (float) $i2;

        return $f1;

     label1:
        $f0 = (float) s1;

        return $f0;
    }

    public void setFloat(int, float)
    {
        short $s2;
        ucar.ma2.ArrayShort r0;
        int i0, $i1;
        float f0;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i1 = (int) f0;

        $s2 = (short) $i1;

        $r1[i0] = $s2;

        return;
    }

    public long getLong(int)
    {
        ucar.ma2.ArrayShort r0;
        long $l2, $l3;
        short s1;
        int i0, $i4;
        short[] $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        s1 = $r1[i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i4 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $l3 = (long) $i4;

        return $l3;

     label1:
        $l2 = (long) s1;

        return $l2;
    }

    public void setLong(int, long)
    {
        short $s3;
        ucar.ma2.ArrayShort r0;
        int i0, $i2;
        long l1;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $i2 = (int) l1;

        $s3 = (short) $i2;

        $r1[i0] = $s3;

        return;
    }

    public int getInt(int)
    {
        short s1;
        ucar.ma2.ArrayShort r0;
        int i0, $i2, $i3;
        short[] $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        s1 = $r1[i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        goto label2;

     label1:
        $i3 = (int) s1;

        $i2 = $i3;

     label2:
        return $i2;
    }

    public void setInt(int, int)
    {
        short $s2;
        ucar.ma2.ArrayShort r0;
        int i0, i1;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $s2 = (short) i1;

        $r1[i0] = $s2;

        return;
    }

    public short getShort(int)
    {
        short $s1;
        ucar.ma2.ArrayShort r0;
        int i0;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $s1 = $r1[i0];

        return $s1;
    }

    public void setShort(int, short)
    {
        short s1;
        ucar.ma2.ArrayShort r0;
        int i0;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $r1[i0] = s1;

        return;
    }

    public byte getByte(int)
    {
        short $s1;
        byte $b2;
        ucar.ma2.ArrayShort r0;
        int i0;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $s1 = $r1[i0];

        $b2 = (byte) $s1;

        return $b2;
    }

    public void setByte(int, byte)
    {
        short $s2;
        byte b1;
        ucar.ma2.ArrayShort r0;
        int i0;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $s2 = (short) b1;

        $r1[i0] = $s2;

        return;
    }

    public char getChar(int)
    {
        ucar.ma2.ArrayShort r0;
        char $c2, $c3;
        short s1;
        int i0, $i4;
        short[] $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        s1 = $r1[i0];

        $z0 = r0.<ucar.ma2.ArrayShort: boolean unsigned>;

        if $z0 == 0 goto label1;

        $i4 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>(s1);

        $c3 = (char) $i4;

        return $c3;

     label1:
        $c2 = (char) s1;

        return $c2;
    }

    public void setChar(int, char)
    {
        short $s2;
        ucar.ma2.ArrayShort r0;
        int i0;
        char c1;
        short[] $r1;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $r1 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $s2 = (short) c1;

        $r1[i0] = $s2;

        return;
    }

    public boolean getBoolean(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayShort r1;

        r1 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setBoolean(int, boolean)
    {
        ucar.ma2.ArrayShort r1;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        boolean z0;

        r1 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object getObject(int)
    {
        short $s1;
        java.lang.Short $r1;
        ucar.ma2.ArrayShort r0;
        int i0;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<ucar.ma2.ArrayShort: short getShort(int)>(i0);

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        return $r1;
    }

    public void setObject(int, java.lang.Object)
    {
        short $s1;
        ucar.ma2.ArrayShort r0;
        int i0;
        java.lang.Object r1;
        short[] $r3;
        java.lang.Number $r2;

        r0 := @this: ucar.ma2.ArrayShort;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r3 = r0.<ucar.ma2.ArrayShort: short[] storage>;

        $r2 = (java.lang.Number) r1;

        $s1 = virtualinvoke $r2.<java.lang.Number: short shortValue()>();

        $r3[i0] = $s1;

        return;
    }
}
