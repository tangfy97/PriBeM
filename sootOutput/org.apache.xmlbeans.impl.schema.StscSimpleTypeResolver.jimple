public class org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver extends java.lang.Object
{
    private static final org.apache.xmlbeans.impl.regex.RegularExpression[] EMPTY_REGEX_ARRAY;
    private static org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] facetCodes;
    private static final java.util.Map facetCodeMap;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$StscSimpleTypeResolver;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void resolveSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List $r8, $r17;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleType r2;
        org.apache.xmlbeans.impl.schema.StscState $r11, $r12;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union $r4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, z18;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r3;
        org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction $r5, $r6;
        java.util.List r15;
        java.lang.AssertionError $r13;
        java.util.ArrayList $r16;
        int $i0, $i1;
        org.apache.xmlbeans.XmlObject $r1;
        java.lang.String $r9, $r10;
        org.apache.xmlbeans.SchemaType$Ref[] $r18;
        java.lang.Object r14;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        r2 = (org.apache.xmlbeans.impl.xb.xsdschema.SimpleType) $r1;

        $z0 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z11 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z11 != 0 goto label01;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label01:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema(org.apache.xmlbeans.XmlObject)>(r2);

        $z1 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: boolean isSetList()>();

        if $z1 == 0 goto label02;

        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        $z2 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: boolean isSetUnion()>();

        if $z2 == 0 goto label04;

        $z13 = 1;

        goto label05;

     label04:
        $z13 = 0;

     label05:
        $i0 = $z12 + $z13;

        $z14 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: boolean isSetRestriction()>();

        if $z14 == 0 goto label06;

        $z15 = 1;

        goto label07;

     label06:
        $z15 = 0;

     label07:
        $i1 = $i0 + $z15;

        if $i1 <= 1 goto label08;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r12.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A simple type must define either a list, a union, or a restriction: more than one found.", 52, r2);

        goto label09;

     label08:
        if $i1 >= 1 goto label09;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A simple type must define either a list, a union, or a restriction: none was found.", 52, r2);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        return;

     label09:
        z16 = 0;

        z17 = 0;

        z18 = 0;

        r14 = null;

        $z3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: boolean isSetFinal()>();

        if $z3 == 0 goto label10;

        r14 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: java.lang.Object getFinal()>();

        goto label11;

     label10:
        if $r3 == null goto label11;

        $z10 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: boolean isSetFinalDefault()>();

        if $z10 == 0 goto label11;

        r14 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.Object getFinalDefault()>();

     label11:
        if r14 == null goto label15;

        $z4 = r14 instanceof java.lang.String;

        if $z4 == 0 goto label12;

        $r10 = "#all";

        $r9 = (java.lang.String) r14;

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z9 == 0 goto label15;

        z18 = 1;

        z17 = 1;

        z16 = 1;

        goto label15;

     label12:
        $z5 = r14 instanceof java.util.List;

        if $z5 == 0 goto label15;

        r15 = (java.util.List) r14;

        $z6 = interfaceinvoke r15.<java.util.List: boolean contains(java.lang.Object)>("restriction");

        if $z6 == 0 goto label13;

        z16 = 1;

     label13:
        $z7 = interfaceinvoke r15.<java.util.List: boolean contains(java.lang.Object)>("list");

        if $z7 == 0 goto label14;

        z17 = 1;

     label14:
        $z8 = interfaceinvoke r15.<java.util.List: boolean contains(java.lang.Object)>("union");

        if $z8 == 0 goto label15;

        z18 = 1;

     label15:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleFinal(boolean,boolean,boolean)>(z16, z17, z18);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List getList()>();

        if $r17 == null goto label16;

        $r8 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List getList()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveListType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List,java.util.List)>(r0, $r8, $r16);

        goto label18;

     label16:
        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union getUnion()>();

        if $r4 == null goto label17;

        $r7 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union getUnion()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveUnionType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union,java.util.List)>(r0, $r7, $r16);

        goto label18;

     label17:
        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction getRestriction()>();

        if $r5 == null goto label18;

        $r6 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleType: org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction getRestriction()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveSimpleRestrictionType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction,java.util.List)>(r0, $r6, $r16);

     label18:
        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r16);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r18);

        return;
    }

    private static org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        org.apache.xmlbeans.SchemaType$Ref $r5;
        int $i0, i1;
        org.apache.xmlbeans.SchemaType$Ref[] r1;
        java.lang.Object $r3;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (org.apache.xmlbeans.SchemaType$Ref)[$i0];

        i1 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.xmlbeans.SchemaType) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    static void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaType$Ref $r2, $r5;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1, $r3, $r4;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>(1);

        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r2);

        $r3 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $i0 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        $r4 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPrimitiveTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r5);

        return;
    }

    static void resolveListType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List, java.util.List)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List r4;
        org.apache.xmlbeans.XmlQName $r20;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r26;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r1, $r3, $r13, $r19, r22, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List r11;
        javax.xml.namespace.QName $r5;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType $r6, $r16, r23;
        java.lang.Object[] $r21;
        java.lang.AssertionError $r15;
        org.apache.xmlbeans.SchemaType$Ref $r2, $r12, $r14;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7, $r8, $r9, $r10, $r17, $r18;
        org.apache.xmlbeans.XmlObject r25;
        boolean[] $r27;

        r22 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r4 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List;

        r11 := @parameter2: java.util.List;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>(3);

        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r2);

        $r3 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $i0 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        $z0 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z0 == 0 goto label01;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "list";

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5a", $r21, r4);

     label01:
        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List: javax.xml.namespace.QName getItemType()>();

        $r6 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType getSimpleType()>();

        r23 = $r6;

        if $r5 == null goto label02;

        if $r6 == null goto label02;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-simple-type.3a", null, r4);

        r23 = null;

     label02:
        if $r5 == null goto label03;

        $r17 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r18 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r19 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r5, $r17, $r18);

        r24 = $r19;

        r25 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List: org.apache.xmlbeans.XmlQName xgetItemType()>();

        if $r19 != null goto label07;

        $r20 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ListDocument$List: org.apache.xmlbeans.XmlQName xgetItemType()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r5, 0, $r20, 1);

        r24 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label07;

     label03:
        if r23 == null goto label06;

        $r16 = r23;

        $r7 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r8 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r8 == null goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $r9 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r10 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        r24 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaTypeImpl translateAnonymousSimpleType(org.apache.xmlbeans.impl.xb.xsdschema.SimpleType,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r16, $r7, $z4, $r9, $r10, r11, r22);

        r25 = r23;

        goto label07;

     label06:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-simple-type.3b", null, r4);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r22);

        return;

     label07:
        $z5 = virtualinvoke r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean finalList()>();

        if $z5 == 0 goto label08;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("st-props-correct.4.2.1", null, r4);

     label08:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r24);

        $z1 = virtualinvoke r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z1 != 0 goto label09;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-st-restricts.2.1a", null, r25);

        r22 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label09:
        $i2 = virtualinvoke r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        tableswitch($i2)
        {
            case 1: goto label12;
            case 2: goto label11;
            case 3: goto label10;
            default: goto label13;
        };

     label10:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-st-restricts.2.1b", null, r25);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r22);

        return;

     label11:
        $z2 = virtualinvoke r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isUnionOfLists()>();

        if $z2 == 0 goto label12;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-st-restricts.2.1c", null, r25);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r22);

        return;

     label12:
        $r12 = virtualinvoke r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r12);

        $i3 = virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        if $i3 != 8 goto label15;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation", null, r25);

        goto label15;

     label13:
        $z3 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean $assertionsDisabled>;

        if $z3 != 0 goto label14;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label14:
        $r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $r14 = virtualinvoke $r13.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r14);

     label15:
        $r26 = <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.XmlValueRef[] FACETS_LIST>;

        $r27 = <org.apache.xmlbeans.impl.schema.StscState: boolean[] FIXED_FACETS_LIST>;

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBasicFacets(org.apache.xmlbeans.impl.schema.XmlValueRef[],boolean[])>($r26, $r27);

        virtualinvoke r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWhiteSpaceRule(int)>(3);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r22);

        return;
    }

    static void resolveUnionType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union, java.util.List)
    {
        org.apache.xmlbeans.SchemaType $r16, $r22, $r24;
        javax.xml.namespace.QName $r18, $r26, r45;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType $r31;
        java.lang.Object[] $r30, $r44, $r52;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType[] $r7;
        java.util.ArrayList $r8;
        java.lang.StringBuffer $r17, $r20, $r21, $r25, $r28, $r29;
        java.lang.String $r19, $r27, $r32, $r33, $r34, $r35, $r40, $r41, r47, r50;
        boolean[] $r12;
        org.apache.xmlbeans.SchemaType$Ref[] $r11;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r13;
        org.apache.xmlbeans.impl.schema.StscState $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1, $r3, $r37, $r42, r46, r49, r53;
        org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11;
        java.util.List $r6, r36;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10;
        org.apache.xmlbeans.XmlObject r48, r51;
        java.util.Iterator $r9, $r10, $r38;
        org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union$MemberTypes $r43;
        java.lang.Object $r14, $r15, $r23, $r39;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r5 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union;

        r36 := @parameter2: java.util.List;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>(2);

        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r2);

        $r3 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        $i0 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z0 == 0 goto label01;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = "union";

        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5a", $r44, r5);

     label01:
        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union: java.util.List getMemberTypes()>();

        $r7 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType[] getSimpleTypeArray()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $i2 = lengthof $r7;

        if $i2 != 0 goto label03;

        if $r6 == null goto label02;

        $i7 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i7 != 0 goto label03;

     label02:
        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-union-memberTypes-or-simpleTypes", null, r5);

     label03:
        if $r6 == null goto label07;

        $r38 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r45 = (javax.xml.namespace.QName) $r39;

        $r40 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r41 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r42 = virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>(r45, $r40, $r41);

        if $r42 != null goto label05;

        $r43 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union$MemberTypes xgetMemberTypes()>();

        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>(r45, 0, $r43, 1);

        goto label06;

     label05:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r42);

     label06:
        goto label04;

     label07:
        i8 = 0;

     label08:
        $i9 = lengthof $r7;

        if i8 >= $i9 goto label11;

        $r31 = $r7[i8];

        $r32 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r33 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r33 == null goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        $r34 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r35 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        $r37 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaTypeImpl translateAnonymousSimpleType(org.apache.xmlbeans.impl.xb.xsdschema.SimpleType,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r31, $r32, $z8, $r34, $r35, r36, r0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r37);

        $i6 = i8 + 1;

        virtualinvoke $r37.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousUnionMemberOrdinal(int)>($i6);

        i8 = i8 + 1;

        goto label08;

     label11:
        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z9 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label16;

        $r23 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r23;

        $z5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r46);

        if $z5 != 0 goto label15;

        r47 = "";

        $r24 = virtualinvoke r46.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $z6 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z6 == 0 goto label13;

        r48 = virtualinvoke r46.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        goto label14;

     label13:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke r46.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r27 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        r47 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        r48 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union$MemberTypes xgetMemberTypes()>();

     label14:
        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = r47;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-simple-type.4", $r30, r48);

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        goto label12;

     label15:
        goto label12;

     label16:
        z10 = 0;

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z11 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label23;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r15;

        $z2 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z2 != 0 goto label20;

        r50 = "";

        $r16 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r16 == null goto label18;

        $r22 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $z4 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label18;

        r51 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        goto label19;

     label18:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r19 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        r50 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        r51 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union: org.apache.xmlbeans.impl.xb.xsdschema.UnionDocument$Union$MemberTypes xgetMemberTypes()>();

     label19:
        $r52 = newarray (java.lang.Object)[1];

        $r52[0] = r50;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-st-restricts.3.1", $r52, r51);

        interfaceinvoke $r10.<java.util.Iterator: void remove()>();

        goto label17;

     label20:
        $i4 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        if $i4 == 3 goto label21;

        $i5 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        if $i5 != 2 goto label22;

        $z3 = virtualinvoke r49.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isUnionOfLists()>();

        if $z3 == 0 goto label22;

     label21:
        z10 = 1;

     label22:
        goto label17;

     label23:
        i10 = 0;

     label24:
        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i10 >= $i3 goto label26;

        $r14 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i10);

        r53 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r14;

        $z1 = virtualinvoke r53.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean finalUnion()>();

        if $z1 == 0 goto label25;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("st-props-correct.4.2.2", null, r5);

     label25:
        i10 = i10 + 1;

        goto label24;

     label26:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionOfLists(boolean)>(z10);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r8);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionMemberTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r11);

        $r13 = <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.XmlValueRef[] FACETS_UNION>;

        $r12 = <org.apache.xmlbeans.impl.schema.StscState: boolean[] FIXED_FACETS_UNION>;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBasicFacets(org.apache.xmlbeans.impl.schema.XmlValueRef[],boolean[])>($r13, $r12);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        return;
    }

    static void resolveSimpleRestrictionType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction, java.util.List)
    {
        org.apache.xmlbeans.SchemaType[] $r8;
        org.apache.xmlbeans.XmlQName $r13, $r24;
        org.apache.xmlbeans.impl.schema.StscState $r3, $r20;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r4, $r27, r35;
        org.apache.xmlbeans.SchemaType $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction r0;
        java.util.List $r9, r18;
        javax.xml.namespace.QName $r1, $r25, $r28, $r29, $r32;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType $r2, $r19, r34;
        java.lang.Object[] $r21, $r30;
        org.apache.xmlbeans.SchemaType$Ref $r5, $r7, $r12;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r14, $r15, $r16, $r17, $r22, $r23, $r26, $r31, $r33;
        org.apache.xmlbeans.SchemaType$Ref[] $r10;

        r4 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction;

        r18 := @parameter2: java.util.List;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: javax.xml.namespace.QName getBase()>();

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType getSimpleType()>();

        r34 = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        if $r1 == null goto label01;

        if $r2 == null goto label01;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-simple-type.2a", null, r0);

        r34 = null;

     label01:
        if $r1 == null goto label04;

        $z4 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z4 == 0 goto label02;

        $r25 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: javax.xml.namespace.QName getBase()>();

        $r26 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r27 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findRedefinedGlobalType(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r25, $r26, r4);

        r35 = $r27;

        if $r27 == null goto label03;

        $r28 = virtualinvoke $r27.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r29 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $z5 = virtualinvoke $r28.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r29);

        if $z5 != 0 goto label03;

        $r30 = newarray (java.lang.Object)[3];

        $r30[0] = "<simpleType>";

        $r31 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r1);

        $r30[1] = $r31;

        $r32 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r33 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r32);

        $r30[2] = $r33;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5b", $r30, r0);

        goto label03;

     label02:
        $r22 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r23 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        r35 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r1, $r22, $r23);

     label03:
        if r35 != null goto label09;

        $r24 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r1, 0, $r24, 1);

        r35 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label09;

     label04:
        if r34 == null goto label08;

        $z3 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z3 == 0 goto label05;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "<simpleType>";

        virtualinvoke $r20.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5a", $r21, r34);

     label05:
        $r19 = r34;

        $r14 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r15 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r15 == null goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        $r16 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r17 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        r35 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaTypeImpl translateAnonymousSimpleType(org.apache.xmlbeans.impl.xb.xsdschema.SimpleType,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r19, $r14, $z6, $r16, $r17, r18, r4);

        goto label09;

     label08:
        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-simple-type.2b", null, r0);

        r35 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label09:
        $z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r35);

        if $z7 != 0 goto label10;

        r35 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label10:
        $z0 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean finalRestriction()>();

        if $z0 == 0 goto label11;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("st-props-correct.3", null, r0);

     label11:
        $r5 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r5);

        $i0 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        $z1 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z1 != 0 goto label12;

        $r13 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-st-restricts.1.1", null, $r13);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveErrorSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r4);

        return;

     label12:
        $i2 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>($i2);

        $i3 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        tableswitch($i3)
        {
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            default: goto label16;
        };

     label13:
        $r11 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r12 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPrimitiveTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r12);

        goto label16;

     label14:
        $z2 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isUnionOfLists()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionOfLists(boolean)>($z2);

        $r8 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r9);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionMemberTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r10);

        goto label16;

     label15:
        $r6 = virtualinvoke r35.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getListItemType()>();

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r7);

     label16:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r4, r0, r35);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r4);

        return;
    }

    static int translateWhitespaceCode(org.apache.xmlbeans.XmlAnySimpleType)
    {
        org.apache.xmlbeans.XmlAnySimpleType r0;
        org.apache.xmlbeans.impl.schema.StscState $r2;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        java.lang.String $r1, $r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.xmlbeans.XmlAnySimpleType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("collapse");

        if $z0 == 0 goto label1;

        return 3;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("replace");

        if $z2 == 0 goto label3;

        return 2;

     label3:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized whitespace value \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r7, 20, r0);

        return 0;
    }

    static boolean isMultipleFacet(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 11 goto label1;

        if i0 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean facetAppliesToType(int, org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        int $i0, i1, $i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.AssertionError $r2;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0;

        i1 := @parameter0: int;

        r0 := @parameter1: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        lookupswitch($i0)
        {
            case 2: goto label04;
            case 3: goto label01;
            default: goto label07;
        };

     label01:
        tableswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label03;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label02;
            case 10: goto label02;
            case 11: goto label02;
            default: goto label03;
        };

     label02:
        return 1;

     label03:
        return 0;

     label04:
        lookupswitch(i1)
        {
            case 10: goto label05;
            case 11: goto label05;
            default: goto label06;
        };

     label05:
        return 1;

     label06:
        return 0;

     label07:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i2)
        {
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label18;
            case 5: goto label18;
            case 6: goto label18;
            case 7: goto label18;
            case 8: goto label18;
            case 9: goto label12;
            case 10: goto label12;
            case 11: goto label15;
            case 12: goto label18;
            case 13: goto label12;
            case 14: goto label12;
            case 15: goto label12;
            case 16: goto label12;
            case 17: goto label12;
            case 18: goto label12;
            case 19: goto label12;
            case 20: goto label12;
            case 21: goto label12;
            default: goto label21;
        };

     label08:
        return 0;

     label09:
        lookupswitch(i1)
        {
            case 9: goto label10;
            case 10: goto label10;
            default: goto label11;
        };

     label10:
        return 1;

     label11:
        return 0;

     label12:
        tableswitch(i1)
        {
            case 3: goto label13;
            case 4: goto label13;
            case 5: goto label13;
            case 6: goto label13;
            case 7: goto label14;
            case 8: goto label14;
            case 9: goto label13;
            case 10: goto label13;
            case 11: goto label13;
            default: goto label14;
        };

     label13:
        return 1;

     label14:
        return 0;

     label15:
        tableswitch(i1)
        {
            case 3: goto label16;
            case 4: goto label16;
            case 5: goto label16;
            case 6: goto label16;
            case 7: goto label16;
            case 8: goto label16;
            case 9: goto label16;
            case 10: goto label16;
            case 11: goto label16;
            default: goto label17;
        };

     label16:
        return 1;

     label17:
        return 0;

     label18:
        tableswitch(i1)
        {
            case 0: goto label19;
            case 1: goto label19;
            case 2: goto label19;
            case 3: goto label20;
            case 4: goto label20;
            case 5: goto label20;
            case 6: goto label20;
            case 7: goto label20;
            case 8: goto label20;
            case 9: goto label19;
            case 10: goto label19;
            case 11: goto label19;
            default: goto label20;
        };

     label19:
        return 1;

     label20:
        return 0;

     label21:
        $z0 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label22;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label22:
        return 0;
    }

    private static int other_similar_limit(int)
    {
        java.lang.IllegalStateException $r0;
        int i0;
        java.lang.AssertionError $r1;
        boolean $z0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            default: goto label5;
        };

     label1:
        return 4;

     label2:
        return 3;

     label3:
        return 6;

     label4:
        return 5;

     label5:
        $z0 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label6:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    static void resolveFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.XmlObject, org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        byte $b22;
        org.apache.xmlbeans.SchemaType $r17, $r18, $r19, $r20, $r21, $r22, $r54, $r55, $r80, r113;
        org.apache.xmlbeans.XmlNonNegativeInteger $r39, $r60, $r71;
        java.lang.Object[] $r10, $r13, $r44, $r50, $r58, $r69, $r79, $r81, $r85, $r90, $r95, $r97, $r99, $r101, $r105;
        org.apache.xmlbeans.XmlCursor $r23;
        boolean[] r1, $r4;
        org.apache.xmlbeans.impl.schema.XmlValueRef $r36;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r2, r6;
        org.apache.xmlbeans.impl.regex.ParseException $r84;
        org.apache.xmlbeans.SchemaType$Ref $r114;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i24;
        org.apache.xmlbeans.XmlObject r5, $r26;
        org.apache.xmlbeans.XmlPositiveInteger $r46;
        javax.xml.namespace.QName $r24, $r82, $r106;
        java.util.ArrayList r103, r104, $r116, $r118;
        java.lang.String $r25, $r33, $r83, $r87, $r88, $r92, $r93, $r96, $r98, $r100, $r102, $r107, $r112;
        org.apache.xmlbeans.impl.xb.xsdschema.Facet r27;
        org.apache.xmlbeans.impl.regex.RegularExpression[] $r9, $r11, r115;
        org.apache.xmlbeans.impl.regex.RegularExpression $r117;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r7, $r16;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z21, $z22, $z23, $z24, $z25, $z26;
        org.apache.xmlbeans.XmlAnySimpleType $r28, $r29, $r32, $r35, $r37, $r38, $r40, $r41, $r42, $r43, $r45, $r47, $r48, $r49, $r51, $r52, $r53, $r56, $r57, $r59, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r70, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r86, $r91, $r108, $r109, r110, $r111;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r89, $r94;
        org.apache.xmlbeans.XmlAnySimpleType[] $r3, $r8, $r12, $r14, $r15;

        r6 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r5 := @parameter1: org.apache.xmlbeans.XmlObject;

        r2 := @parameter2: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        r1 = newarray (boolean)[12];

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType[] getBasicFacets()>();

        $r4 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean[] getFixedFacets()>();

        i20 = 0;

        r103 = null;

        r104 = null;

        if r5 == null goto label72;

        $r23 = interfaceinvoke r5.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        z21 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlCursor: boolean toFirstChild()>();

     label01:
        if z21 == 0 goto label72;

        $r24 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $r25 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $i3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int translateFacetCode(javax.xml.namespace.QName)>($r24);

        $i24 = (int) -1;

        if $i3 != $i24 goto label02;

        goto label71;

     label02:
        $r26 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r27 = (org.apache.xmlbeans.impl.xb.xsdschema.Facet) $r26;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean facetAppliesToType(int,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($i3, r2);

        if $z2 != 0 goto label03;

        $r81 = newarray (java.lang.Object)[2];

        $r81[0] = $r25;

        $r82 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r83 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r82);

        $r81[1] = $r83;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-applicable-facets", $r81, r27);

        goto label71;

     label03:
        $i4 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        if $i4 != 1 goto label05;

        $r80 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i19 = interfaceinvoke $r80.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i19 != 8 goto label05;

        if $i3 == 0 goto label04;

        if $i3 == 1 goto label04;

        if $i3 != 2 goto label05;

     label04:
        $r105 = newarray (java.lang.Object)[2];

        $r105[0] = $r25;

        $r106 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r107 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r106);

        $r105[1] = $r107;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("notation-facets", $r105, r27);

     label05:
        $z22 = r1[$i3];

        if $z22 == 0 goto label06;

        $z20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean isMultipleFacet(int)>($i3);

        if $z20 != 0 goto label06;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-single-facet-value", null, r27);

        goto label71;

     label06:
        r1[$i3] = 1;

        tableswitch($i3)
        {
            case 0: goto label07;
            case 1: goto label14;
            case 2: goto label14;
            case 3: goto label31;
            case 4: goto label31;
            case 5: goto label31;
            case 6: goto label31;
            case 7: goto label22;
            case 8: goto label26;
            case 9: goto label58;
            case 10: goto label65;
            case 11: goto label60;
            default: goto label70;
        };

     label07:
        $r70 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r71 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.XmlNonNegativeInteger buildNnInteger(org.apache.xmlbeans.XmlAnySimpleType)>($r70);

        if $r71 != null goto label08;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a nonnegative integer", 20, r27);

        goto label71;

     label08:
        $z16 = $r4[$i3];

        if $z16 == 0 goto label09;

        $r78 = $r3[$i3];

        $z19 = interfaceinvoke $r78.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r71);

        if $z19 != 0 goto label09;

        $r79 = newarray (java.lang.Object)[1];

        $r79[0] = $r25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("facet-fixed", $r79, r27);

        goto label71;

     label09:
        $r72 = $r3[1];

        if $r72 == null goto label11;

        $r76 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(1);

        if $r76 == null goto label10;

        $r77 = $r3[1];

        $z18 = interfaceinvoke $r76.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r77);

        if $z18 == 0 goto label10;

        $i18 = interfaceinvoke $r76.<org.apache.xmlbeans.XmlAnySimpleType: int compareValue(org.apache.xmlbeans.XmlObject)>($r71);

        if $i18 <= 0 goto label11;

     label10:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("length-minLength-maxLength", null, r27);

        goto label71;

     label11:
        $r73 = $r3[2];

        if $r73 == null goto label13;

        $r74 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        if $r74 == null goto label12;

        $r75 = $r3[2];

        $z17 = interfaceinvoke $r74.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r75);

        if $z17 == 0 goto label12;

        $i17 = interfaceinvoke $r74.<org.apache.xmlbeans.XmlAnySimpleType: int compareValue(org.apache.xmlbeans.XmlObject)>($r71);

        if $i17 >= 0 goto label13;

     label12:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("length-minLength-maxLength", null, r27);

        goto label71;

     label13:
        $r3[$i3] = $r71;

        goto label70;

     label14:
        $r59 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r60 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.XmlNonNegativeInteger buildNnInteger(org.apache.xmlbeans.XmlAnySimpleType)>($r59);

        if $r60 != null goto label15;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a nonnegative integer", 20, r27);

        goto label71;

     label15:
        $z13 = $r4[$i3];

        if $z13 == 0 goto label16;

        $r68 = $r3[$i3];

        $z15 = interfaceinvoke $r68.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r60);

        if $z15 != 0 goto label16;

        $r69 = newarray (java.lang.Object)[1];

        $r69[0] = $r25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("facet-fixed", $r69, r27);

        goto label71;

     label16:
        $r61 = $r3[0];

        if $r61 == null goto label19;

        $r65 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>($i3);

        if $r65 == null goto label18;

        $z14 = interfaceinvoke $r65.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r60);

        if $z14 == 0 goto label18;

        if $i3 != 1 goto label17;

        $r67 = $r3[0];

        $i16 = interfaceinvoke $r65.<org.apache.xmlbeans.XmlAnySimpleType: int compareTo(java.lang.Object)>($r67);

        if $i16 > 0 goto label18;

        goto label19;

     label17:
        $r66 = $r3[0];

        $i15 = interfaceinvoke $r65.<org.apache.xmlbeans.XmlAnySimpleType: int compareTo(java.lang.Object)>($r66);

        if $i15 >= 0 goto label19;

     label18:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("length-minLength-maxLength", null, r27);

        goto label71;

     label19:
        $r108 = $r3[2];

        if $r108 == null goto label20;

        $r64 = $r3[2];

        $i14 = interfaceinvoke $r60.<org.apache.xmlbeans.XmlInteger: int compareValue(org.apache.xmlbeans.XmlObject)>($r64);

        if $i14 <= 0 goto label20;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("maxLength-valid-restriction", null, r27);

        goto label71;

     label20:
        $r62 = $r3[1];

        if $r62 == null goto label21;

        $r63 = $r3[1];

        $i13 = interfaceinvoke $r60.<org.apache.xmlbeans.XmlInteger: int compareValue(org.apache.xmlbeans.XmlObject)>($r63);

        if $i13 >= 0 goto label21;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("minLength-valid-restriction", null, r27);

        goto label71;

     label21:
        $r3[$i3] = $r60;

        goto label70;

     label22:
        $r45 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r46 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.XmlPositiveInteger buildPosInteger(org.apache.xmlbeans.XmlAnySimpleType)>($r45);

        if $r46 != null goto label23;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a positive integer", 20, r27);

        goto label70;

     label23:
        $z5 = $r4[$i3];

        if $z5 == 0 goto label24;

        $r49 = $r3[$i3];

        $z6 = interfaceinvoke $r49.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r46);

        if $z6 != 0 goto label24;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = $r25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("facet-fixed", $r50, r27);

        goto label71;

     label24:
        $r47 = $r3[7];

        if $r47 == null goto label25;

        $r48 = $r3[7];

        $i9 = interfaceinvoke $r46.<org.apache.xmlbeans.XmlPositiveInteger: int compareValue(org.apache.xmlbeans.XmlObject)>($r48);

        if $i9 <= 0 goto label25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("totalDigits-valid-restriction", null, r27);

     label25:
        $r3[$i3] = $r46;

        goto label70;

     label26:
        $r38 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r39 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.XmlNonNegativeInteger buildNnInteger(org.apache.xmlbeans.XmlAnySimpleType)>($r38);

        if $r39 != null goto label27;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a nonnegative integer", 20, r27);

        goto label70;

     label27:
        $z3 = $r4[$i3];

        if $z3 == 0 goto label28;

        $r43 = $r3[$i3];

        $z4 = interfaceinvoke $r43.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r39);

        if $z4 != 0 goto label28;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = $r25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("facet-fixed", $r44, r27);

        goto label71;

     label28:
        $r40 = $r3[8];

        if $r40 == null goto label29;

        $r42 = $r3[8];

        $i8 = interfaceinvoke $r39.<org.apache.xmlbeans.XmlNonNegativeInteger: int compareValue(org.apache.xmlbeans.XmlObject)>($r42);

        if $i8 <= 0 goto label29;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("fractionDigits-valid-restriction", null, r27);

     label29:
        $r109 = $r3[7];

        if $r109 == null goto label30;

        $r41 = $r3[7];

        $i7 = interfaceinvoke $r39.<org.apache.xmlbeans.XmlNonNegativeInteger: int compareValue(org.apache.xmlbeans.XmlObject)>($r41);

        if $i7 <= 0 goto label30;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("fractionDigits-totalDigits", null, r27);

     label30:
        $r3[$i3] = $r39;

        goto label70;

     label31:
        $i10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int other_similar_limit(int)>($i3);

        $z7 = r1[$i10];

        if $z7 == 0 goto label32;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Cannot define both inclusive and exclusive limit in the same restriciton", 19, r27);

        goto label71;

     label32:
        if $i3 == 3 goto label33;

        if $i3 != 4 goto label34;

     label33:
        $z23 = 1;

        goto label35;

     label34:
        $z23 = 0;

     label35:
        z8 = $z23;

        if $i3 == 3 goto label36;

        if $i3 != 6 goto label37;

     label36:
        $z24 = 1;

        goto label38;

     label37:
        $z24 = 0;

     label38:
        z9 = $z24;

     label39:
        $r51 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r52 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object,boolean)>($r51, 1);

        r110 = $r52;

     label40:
        goto label47;

     label41:
        $r94 := @caughtexception;

        tableswitch($i3)
        {
            case 3: goto label42;
            case 4: goto label43;
            case 5: goto label44;
            case 6: goto label45;
            default: goto label46;
        };

     label42:
        $r101 = newarray (java.lang.Object)[1];

        $r102 = virtualinvoke $r94.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        $r101[0] = $r102;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("minExclusive-valid-restriction", $r101, r27);

        goto label46;

     label43:
        $r99 = newarray (java.lang.Object)[1];

        $r100 = virtualinvoke $r94.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        $r99[0] = $r100;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("minInclusive-valid-restriction", $r99, r27);

        goto label46;

     label44:
        $r97 = newarray (java.lang.Object)[1];

        $r98 = virtualinvoke $r94.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        $r97[0] = $r98;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("maxInclusive-valid-restriction", $r97, r27);

        goto label46;

     label45:
        $r95 = newarray (java.lang.Object)[1];

        $r96 = virtualinvoke $r94.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        $r95[0] = $r96;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("maxExclusive-valid-restriction", $r95, r27);

     label46:
        goto label71;

     label47:
        $z10 = $r4[$i3];

        if $z10 == 0 goto label48;

        $r57 = $r3[$i3];

        $z12 = interfaceinvoke $r57.<org.apache.xmlbeans.XmlAnySimpleType: boolean valueEquals(org.apache.xmlbeans.XmlObject)>($r52);

        if $z12 != 0 goto label48;

        $r58 = newarray (java.lang.Object)[1];

        $r58[0] = $r25;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("facet-fixed", $r58, r27);

        goto label71;

     label48:
        $r53 = $r3[$i3];

        if $r53 == null goto label57;

        $r54 = interfaceinvoke $r52.<org.apache.xmlbeans.XmlAnySimpleType: org.apache.xmlbeans.SchemaType schemaType()>();

        if $r54 == null goto label49;

        $z11 = interfaceinvoke $r54.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z11 != 0 goto label49;

        $i12 = interfaceinvoke $r54.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i12 != 2 goto label49;

        $r55 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        $r56 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        r110 = interfaceinvoke $r55.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r56);

     label49:
        $r111 = $r3[$i3];

        $i21 = interfaceinvoke r110.<org.apache.xmlbeans.XmlAnySimpleType: int compareValue(org.apache.xmlbeans.XmlObject)>($r111);

        if $i21 == 2 goto label52;

        if z8 == 0 goto label50;

        $b22 = -1;

        goto label51;

     label50:
        $b22 = 1;

     label51:
        if $i21 != $b22 goto label57;

     label52:
        if z8 == 0 goto label54;

        if z9 == 0 goto label53;

        $r112 = "Must be greater than or equal to previous minExclusive";

        goto label56;

     label53:
        $r112 = "Must be greater than or equal to previous minInclusive";

        goto label56;

     label54:
        if z9 == 0 goto label55;

        $r112 = "Must be less than or equal to previous maxExclusive";

        goto label56;

     label55:
        $r112 = "Must be less than or equal to previous maxInclusive";

     label56:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r112, 20, r27);

        goto label71;

     label57:
        $r3[$i3] = r110;

        $i11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int other_similar_limit(int)>($i3);

        $r3[$i11] = null;

        goto label70;

     label58:
        $r35 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $i5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int translateWhitespaceCode(org.apache.xmlbeans.XmlAnySimpleType)>($r35);

        i20 = $i5;

        $i6 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getWhiteSpaceRule()>();

        if $i6 <= $i5 goto label59;

        i20 = 0;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("whiteSpace-valid-restriction", null, r27);

        goto label71;

     label59:
        $r36 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.XmlValueRef build_wsstring(int)>($i5);

        $r37 = virtualinvoke $r36.<org.apache.xmlbeans.impl.schema.XmlValueRef: org.apache.xmlbeans.XmlAnySimpleType get()>();

        $r3[$i3] = $r37;

        goto label70;

     label60:
        $r28 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r29 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object,boolean)>($r28, 1);

     label61:
        goto label63;

     label62:
        $r89 := @caughtexception;

        $r90 = newarray (java.lang.Object)[2];

        $r91 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r92 = interfaceinvoke $r91.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r90[0] = $r92;

        $r93 = virtualinvoke $r89.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        $r90[1] = $r93;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-valid-restriction", $r90, r27);

        goto label71;

     label63:
        if r103 != null goto label64;

        $r116 = new java.util.ArrayList;

        specialinvoke $r116.<java.util.ArrayList: void <init>()>();

        r103 = $r116;

     label64:
        interfaceinvoke r103.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label70;

     label65:
        $r117 = new org.apache.xmlbeans.impl.regex.RegularExpression;

        $r32 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r33 = interfaceinvoke $r32.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        specialinvoke $r117.<org.apache.xmlbeans.impl.regex.RegularExpression: void <init>(java.lang.String,java.lang.String)>($r33, "X");

     label66:
        goto label68;

     label67:
        $r84 := @caughtexception;

        $r85 = newarray (java.lang.Object)[2];

        $r86 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: org.apache.xmlbeans.XmlAnySimpleType getValue()>();

        $r87 = interfaceinvoke $r86.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r85[0] = $r87;

        $r88 = virtualinvoke $r84.<org.apache.xmlbeans.impl.regex.ParseException: java.lang.String getMessage()>();

        $r85[1] = $r88;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("pattern-regex", $r85, r27);

        goto label71;

     label68:
        if r104 != null goto label69;

        $r118 = new java.util.ArrayList;

        specialinvoke $r118.<java.util.ArrayList: void <init>()>();

        r104 = $r118;

     label69:
        interfaceinvoke r104.<java.util.List: boolean add(java.lang.Object)>($r117);

     label70:
        $z25 = interfaceinvoke r27.<org.apache.xmlbeans.impl.xb.xsdschema.Facet: boolean getFixed()>();

        if $z25 == 0 goto label71;

        $r4[$i3] = 1;

     label71:
        z21 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling()>();

        goto label01;

     label72:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.XmlValueRef[] makeValueRefArray(org.apache.xmlbeans.XmlAnySimpleType[])>($r3);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBasicFacets(org.apache.xmlbeans.impl.schema.XmlValueRef[],boolean[])>($r7, $r4);

        if i20 != 0 goto label73;

        i20 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getWhiteSpaceRule()>();

     label73:
        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWhiteSpaceRule(int)>(i20);

        if r103 == null goto label77;

        $i2 = interfaceinvoke r103.<java.util.List: int size()>();

        $r12 = newarray (org.apache.xmlbeans.XmlAnySimpleType)[$i2];

        $r13 = interfaceinvoke r103.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.xmlbeans.XmlAnySimpleType[]) $r13;

        $r15 = (org.apache.xmlbeans.XmlAnySimpleType[]) $r14;

        $r16 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.XmlValueRef[] makeValueRefArray(org.apache.xmlbeans.XmlAnySimpleType[])>($r15);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setEnumerationValues(org.apache.xmlbeans.impl.schema.XmlValueRef[])>($r16);

        r113 = r6;

        $z1 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label75;

        $r20 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        $r21 = interfaceinvoke $r20.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        r113 = $r21;

        if $r21 == null goto label74;

        $r22 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        if $r22 != $r21 goto label76;

     label74:
        r113 = r6;

        goto label76;

     label75:
        $r17 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        $r18 = interfaceinvoke $r17.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        if $r18 == null goto label76;

        $r19 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r113 = interfaceinvoke $r19.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

     label76:
        $r114 = interfaceinvoke r113.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseEnumTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r114);

        goto label78;

     label77:
        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void copyEnumerationValues(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r2);

     label78:
        if r104 == null goto label79;

        $r9 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.regex.RegularExpression[] EMPTY_REGEX_ARRAY>;

        $r10 = interfaceinvoke r104.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (org.apache.xmlbeans.impl.regex.RegularExpression[]) $r10;

        r115 = (org.apache.xmlbeans.impl.regex.RegularExpression[]) $r11;

        goto label80;

     label79:
        r115 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.regex.RegularExpression[] EMPTY_REGEX_ARRAY>;

     label80:
        $i0 = lengthof r115;

        if $i0 > 0 goto label81;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean hasPatternFacet()>();

        if $z0 == 0 goto label82;

     label81:
        $z26 = 1;

        goto label83;

     label82:
        $z26 = 0;

     label83:
        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPatternFacet(boolean)>($z26);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPatterns(org.apache.xmlbeans.impl.regex.RegularExpression[])>(r115);

        $i1 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        if $i1 != 8 goto label84;

        $r8 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r8 != null goto label84;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation", null, r5);

     label84:
        return;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label39 to label40 with label41;
        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label60 to label61 with label62;
        catch org.apache.xmlbeans.impl.regex.ParseException from label65 to label66 with label67;
    }

    private static org.apache.xmlbeans.impl.schema.XmlValueRef[] makeValueRefArray(org.apache.xmlbeans.XmlAnySimpleType[])
    {
        org.apache.xmlbeans.XmlAnySimpleType $r2, $r3;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] r1;
        org.apache.xmlbeans.XmlAnySimpleType[] r0;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.XmlValueRef $r4;

        r0 := @parameter0: org.apache.xmlbeans.XmlAnySimpleType[];

        $i0 = lengthof r0;

        r1 = newarray (org.apache.xmlbeans.impl.schema.XmlValueRef)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $i2 = i3;

        $r2 = r0[i3];

        if $r2 != null goto label2;

        $r4 = null;

        goto label3;

     label2:
        $r4 = new org.apache.xmlbeans.impl.schema.XmlValueRef;

        $r3 = r0[i3];

        specialinvoke $r4.<org.apache.xmlbeans.impl.schema.XmlValueRef: void <init>(org.apache.xmlbeans.XmlAnySimpleType)>($r3);

     label3:
        r1[$i2] = $r4;

        i3 = i3 + 1;

        goto label1;

     label4:
        return r1;
    }

    private static boolean isDiscreteType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r2;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(8);

        if $r1 == null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i0)
        {
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label3;
            case 15: goto label3;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            default: goto label3;
        };

     label2:
        return 1;

     label3:
        return 0;
    }

    private static boolean isNumericPrimitive(org.apache.xmlbeans.SchemaType)
    {
        int $i0;
        org.apache.xmlbeans.SchemaType r0;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 11: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static int decimalSizeOfType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int mathematicalSizeOfType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        i1 = $i0;

        if $i0 != 8 goto label1;

        $r3 = <org.apache.xmlbeans.XmlByte: org.apache.xmlbeans.SchemaType type>;

        $z2 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>(r0);

        if $z2 != 0 goto label1;

        i1 = 16;

     label1:
        if i1 != 16 goto label2;

        $r1 = <org.apache.xmlbeans.XmlShort: org.apache.xmlbeans.SchemaType type>;

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>(r0);

        if $z0 != 0 goto label2;

        $r2 = <org.apache.xmlbeans.XmlUnsignedByte: org.apache.xmlbeans.SchemaType type>;

        $z1 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>(r0);

        if $z1 != 0 goto label2;

        i1 = 32;

     label2:
        return i1;
    }

    private static int mathematicalSizeOfType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.math.BigInteger $r5, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, r33, r34, r35, $r36, $r37;
        org.apache.xmlbeans.SchemaType $r1;
        org.apache.xmlbeans.XmlAnySimpleType $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r20, $r24, $r26, $r28, $r30;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xmlbeans.SimpleValue $r4, $r21, $r25, $r27, $r29, $r31;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i0 == 11 goto label01;

        return 0;

     label01:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(8);

        if $r2 == null goto label02;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(8);

        $r4 = (org.apache.xmlbeans.SimpleValue) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int signum()>();

        if $i1 == 0 goto label03;

     label02:
        return 1000001;

     label03:
        r33 = null;

        r34 = null;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        if $r6 == null goto label04;

        $r30 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r31 = (org.apache.xmlbeans.SimpleValue) $r30;

        r33 = interfaceinvoke $r31.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

     label04:
        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        if $r7 == null goto label05;

        $r28 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        $r29 = (org.apache.xmlbeans.SimpleValue) $r28;

        r33 = interfaceinvoke $r29.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

     label05:
        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        if $r8 == null goto label06;

        $r26 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r27 = (org.apache.xmlbeans.SimpleValue) $r26;

        r34 = interfaceinvoke $r27.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

     label06:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        if $r9 == null goto label07;

        $r24 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r25 = (org.apache.xmlbeans.SimpleValue) $r24;

        r34 = interfaceinvoke $r25.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

     label07:
        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(7);

        if $r10 == null goto label20;

        r35 = null;

     label08:
        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(7);

        $r21 = (org.apache.xmlbeans.SimpleValue) $r20;

        $r22 = interfaceinvoke $r21.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

        $i8 = virtualinvoke $r22.<java.math.BigInteger: int intValue()>();

        tableswitch($i8)
        {
            case 0: goto label09;
            case 1: goto label09;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label11;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label12;
            case 12: goto label12;
            case 13: goto label12;
            case 14: goto label12;
            case 15: goto label12;
            case 16: goto label12;
            case 17: goto label12;
            case 18: goto label12;
            default: goto label13;
        };

     label09:
        r35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(99L);

        goto label13;

     label10:
        r35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9999L);

        goto label13;

     label11:
        r35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(999999999L);

        goto label13;

     label12:
        r35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(999999999999999999L);

     label13:
        goto label15;

     label14:
        $r32 := @caughtexception;

     label15:
        if r35 == null goto label20;

        if r33 != null goto label16;

        $r36 = virtualinvoke r35.<java.math.BigInteger: java.math.BigInteger negate()>();

        goto label17;

     label16:
        $r23 = virtualinvoke r35.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r36 = virtualinvoke r33.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r23);

     label17:
        r33 = $r36;

        if r34 != null goto label18;

        $r37 = r35;

        goto label19;

     label18:
        $r37 = virtualinvoke r34.<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>(r35);

     label19:
        r34 = $r37;

     label20:
        if r33 == null goto label26;

        if r34 == null goto label26;

        $i2 = virtualinvoke r33.<java.math.BigInteger: int signum()>();

        if $i2 >= 0 goto label21;

        $r18 = virtualinvoke r33.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r19 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r33 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r19);

     label21:
        $i3 = virtualinvoke r34.<java.math.BigInteger: int signum()>();

        if $i3 >= 0 goto label22;

        $r16 = virtualinvoke r34.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r17 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r34 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

     label22:
        $r11 = virtualinvoke r34.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>(r33);

        $r12 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(127L);

        $i4 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i4 > 0 goto label23;

        return 8;

     label23:
        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(32767L);

        $i5 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r13);

        if $i5 > 0 goto label24;

        return 16;

     label24:
        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        $i6 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r14);

        if $i6 > 0 goto label25;

        return 32;

     label25:
        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        $i7 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i7 > 0 goto label26;

        return 64;

     label26:
        return 1000000;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label08 to label13 with label14;
    }

    static void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaType[] $r4;
        byte b5;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r10;
        org.apache.xmlbeans.SchemaType $r2, $r5, $r6, $r7, $r8, $r9, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, $z16, $z17;
        org.apache.xmlbeans.XmlAnySimpleType $r1, $r3, $r11, $r12, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, i6;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label12;
            case 3: goto label19;
            default: goto label25;
        };

     label01:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r10 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r9;

        $i3 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int ordered()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setOrdered(int)>($i3);

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        if $r11 != null goto label02;

        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        if $r15 == null goto label04;

     label02:
        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        if $r12 != null goto label03;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        if $r14 == null goto label04;

     label03:
        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBounded(boolean)>($z8);

        $z9 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isFinite()>();

        if $z9 != 0 goto label06;

        $z6 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isBounded()>();

        if $z6 == 0 goto label07;

        $z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean isDiscreteType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        if $z7 == 0 goto label07;

     label06:
        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFinite(boolean)>($z10);

        $z11 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNumeric()>();

        if $z11 != 0 goto label09;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $z5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean isNumericPrimitive(org.apache.xmlbeans.SchemaType)>($r13);

        if $z5 == 0 goto label10;

     label09:
        $z12 = 1;

        goto label11;

     label10:
        $z12 = 0;

     label11:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setNumeric(boolean)>($z12);

        $i4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: int decimalSizeOfType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDecimalSize(int)>($i4);

        goto label25;

     label12:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()>();

        b5 = 0;

        z13 = 1;

        z14 = 1;

        z15 = 1;

        i6 = 0;

     label13:
        $i1 = lengthof $r4;

        if i6 >= $i1 goto label18;

        $r5 = $r4[i6];

        $i2 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int ordered()>();

        if $i2 == 0 goto label14;

        b5 = 1;

     label14:
        $r6 = $r4[i6];

        $z2 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: boolean isBounded()>();

        if $z2 != 0 goto label15;

        z13 = 0;

     label15:
        $r7 = $r4[i6];

        $z3 = interfaceinvoke $r7.<org.apache.xmlbeans.SchemaType: boolean isFinite()>();

        if $z3 != 0 goto label16;

        z14 = 0;

     label16:
        $r8 = $r4[i6];

        $z4 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: boolean isNumeric()>();

        if $z4 != 0 goto label17;

        z15 = 0;

     label17:
        i6 = i6 + 1;

        goto label13;

     label18:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setOrdered(int)>(b5);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBounded(boolean)>(z13);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFinite(boolean)>(z14);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setNumeric(boolean)>(z15);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDecimalSize(int)>(0);

        goto label25;

     label19:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setOrdered(int)>(0);

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        if $r1 != null goto label20;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        if $r3 == null goto label21;

     label20:
        $z16 = 1;

        goto label22;

     label21:
        $z16 = 0;

     label22:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBounded(boolean)>($z16);

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getListItemType()>();

        $z0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: boolean isFinite()>();

        if $z0 == 0 goto label23;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isBounded()>();

        if $z1 == 0 goto label23;

        $z17 = 1;

        goto label24;

     label23:
        $z17 = 0;

     label24:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFinite(boolean)>($z17);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setNumeric(boolean)>(0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDecimalSize(int)>(0);

     label25:
        return;
    }

    private static java.util.Map buildFacetCodeMap()
    {
        org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] $r1, $r2, $r5;
        java.util.HashMap $r0;
        java.lang.Integer $r4;
        org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry $r3, $r6;
        int $i0, $i1, i2;
        javax.xml.namespace.QName $r7;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i2 = 0;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] facetCodes>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r2 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] facetCodes>;

        $r3 = $r2[i2];

        $r7 = $r3.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: javax.xml.namespace.QName name>;

        $r4 = new java.lang.Integer;

        $r5 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] facetCodes>;

        $r6 = $r5[i2];

        $i1 = $r6.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: int code>;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static int translateFacetCode(javax.xml.namespace.QName)
    {
        java.util.Map $r1;
        int $i0, $i2;
        java.lang.Object $r2;
        javax.xml.namespace.QName r0;
        java.lang.Integer r3;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.util.Map facetCodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Integer) $r2;

        if r3 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] $r2;
        org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        java.util.Map $r27;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.regex.RegularExpression[] $r1;
        java.lang.Class $r0, $r28;
        javax.xml.namespace.QName $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;

        $r0 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscSimpleTypeResolver>;

        if $r0 != null goto label1;

        $r28 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver");

        <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscSimpleTypeResolver> = $r28;

        goto label2;

     label1:
        $r28 = <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscSimpleTypeResolver>;

     label2:
        $z0 = virtualinvoke $r28.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (org.apache.xmlbeans.impl.regex.RegularExpression)[0];

        <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.regex.RegularExpression[] EMPTY_REGEX_ARRAY> = $r1;

        $r2 = newarray (org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry)[12];

        $r3 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("length", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r3.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r4, 0);

        $r2[0] = $r3;

        $r5 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("minLength", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r5.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r6, 1);

        $r2[1] = $r5;

        $r7 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("maxLength", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r7.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r8, 2);

        $r2[2] = $r7;

        $r9 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("pattern", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r9.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r10, 10);

        $r2[3] = $r9;

        $r11 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("enumeration", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r11.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r12, 11);

        $r2[4] = $r11;

        $r13 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("whiteSpace", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r13.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r14, 9);

        $r2[5] = $r13;

        $r15 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r16 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("maxInclusive", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r15.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r16, 5);

        $r2[6] = $r15;

        $r17 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r18 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("maxExclusive", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r17.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r18, 6);

        $r2[7] = $r17;

        $r19 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("minInclusive", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r19.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r20, 4);

        $r2[8] = $r19;

        $r21 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r22 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("minExclusive", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r21.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r22, 3);

        $r2[9] = $r21;

        $r23 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r24 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("totalDigits", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r23.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r24, 7);

        $r2[10] = $r23;

        $r25 = new org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("fractionDigits", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r25.<org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r26, 8);

        $r2[11] = $r25;

        <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver$CodeForNameEntry[] facetCodes> = $r2;

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.util.Map buildFacetCodeMap()>();

        <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: java.util.Map facetCodeMap> = $r27;

        return;
    }
}
