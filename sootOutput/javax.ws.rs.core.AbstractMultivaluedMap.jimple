public abstract class javax.ws.rs.core.AbstractMultivaluedMap extends java.lang.Object implements javax.ws.rs.core.MultivaluedMap
{
    protected final java.util.Map store;

    public void <init>(java.util.Map)
    {
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store> = r1;

        return;
    }

    public final void putSingle(java.lang.Object, java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r1, r3;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List getValues(java.lang.Object)>(r1);

        interfaceinvoke $r2.<java.util.List: void clear()>();

        if r3 == null goto label1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label2;

     label1:
        virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: void addNull(java.util.List)>($r2);

     label2:
        return;
    }

    protected void addNull(java.util.List)
    {
        java.util.List r1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.util.List;

        return;
    }

    protected void addFirstNull(java.util.List)
    {
        java.util.List r1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.util.List;

        return;
    }

    public final void add(java.lang.Object, java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r1, r3;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List getValues(java.lang.Object)>(r1);

        if r3 == null goto label1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label2;

     label1:
        virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: void addNull(java.util.List)>($r2);

     label2:
        return;
    }

    public final transient void addAll(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.NullPointerException $r5;
        java.util.List $r3;
        int $i0, i1, i2;
        java.lang.Object r2, r4;
        javax.ws.rs.core.AbstractMultivaluedMap r1;

        r1 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Supplied array of values must not be null.");

        throw $r5;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r1.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List getValues(java.lang.Object)>(r2);

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label6;

        r4 = r0[i2];

        if r4 == null goto label4;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label5;

     label4:
        virtualinvoke r1.<javax.ws.rs.core.AbstractMultivaluedMap: void addNull(java.util.List)>($r3);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return;
    }

    public final void addAll(java.lang.Object, java.util.List)
    {
        java.util.Iterator $r4;
        java.lang.NullPointerException $r6;
        java.util.List r0, $r3;
        java.lang.Object r2, $r5;
        javax.ws.rs.core.AbstractMultivaluedMap r1;
        boolean $z0, $z1;

        r1 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.List;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Supplied list of values must not be null.");

        throw $r6;

     label1:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r1.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List getValues(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r5 == null goto label4;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label5;

     label4:
        virtualinvoke r1.<javax.ws.rs.core.AbstractMultivaluedMap: void addNull(java.util.List)>($r3);

     label5:
        goto label3;

     label6:
        return;
    }

    public final java.lang.Object getFirst(java.lang.Object)
    {
        java.util.List r4;
        java.util.Map $r2;
        int $i0;
        java.lang.Object r1, $r3, $r5;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        return $r5;

     label1:
        return null;
    }

    public final void addFirst(java.lang.Object, java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r1, r3;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List getValues(java.lang.Object)>(r1);

        if r3 == null goto label1;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r3);

        goto label2;

     label1:
        virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: void addFirstNull(java.util.List)>($r2);

     label2:
        return;
    }

    protected final java.util.List getValues(java.lang.Object)
    {
        java.util.List r6;
        java.util.Map $r2, $r5;
        java.lang.Object r1, $r3;
        java.util.LinkedList $r4;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.List) $r3;

        if r6 != null goto label1;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r6 = $r4;

        $r5 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        boolean $z0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Collection values()
    {
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.List remove(java.lang.Object)
    {
        java.util.List $r4;
        java.util.Map $r2;
        java.lang.Object r1, $r3;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map r1, $r2;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.util.List put(java.lang.Object, java.util.List)
    {
        java.util.List r2, $r5;
        java.util.Map $r3;
        java.lang.Object r1, $r4;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.List get(java.lang.Object)
    {
        java.util.List $r4;
        java.util.Map $r2;
        java.lang.Object r1, $r3;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        boolean $z0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        boolean $z0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void clear()
    {
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        java.util.Map $r1;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        $r1 = r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Map store>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean equalsIgnoreValueOrder(javax.ws.rs.core.MultivaluedMap)
    {
        int $i0, $i1;
        javax.ws.rs.core.AbstractMultivaluedMap r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r7;
        java.util.Iterator $r5, $r15;
        java.util.Set $r2, $r3, $r4;
        javax.ws.rs.core.MultivaluedMap r1;
        java.util.List r10, $r12, $r14;
        java.lang.Object $r6, $r8, $r9, $r11, $r13, $r16;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: javax.ws.rs.core.MultivaluedMap;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke r1.<javax.ws.rs.core.MultivaluedMap: java.util.Set keySet()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r1.<javax.ws.rs.core.MultivaluedMap: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (java.util.List) $r9;

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.List) $r11;

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        $i1 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $r13 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.List) $r13;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>($r16);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        goto label5;

     label7:
        goto label3;

     label8:
        return 1;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.List $r3, $r4;
        java.lang.Object r1, r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.util.List) r2;

        $r4 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List put(java.lang.Object,java.util.List)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        javax.ws.rs.core.AbstractMultivaluedMap r0;

        r0 := @this: javax.ws.rs.core.AbstractMultivaluedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<javax.ws.rs.core.AbstractMultivaluedMap: java.util.List get(java.lang.Object)>(r1);

        return $r2;
    }
}
