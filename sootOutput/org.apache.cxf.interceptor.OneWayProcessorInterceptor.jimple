public class org.apache.cxf.interceptor.OneWayProcessorInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    public static final java.lang.String USE_ORIGINAL_THREAD;
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.interceptor.OneWayProcessorInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.OneWayProcessorInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("pre-logical");

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.cxf.interceptor.OneWayProcessorInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.interceptor.OneWayProcessorInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>(r1);

        return;
    }

    public void handleFault(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        java.io.IOException $r5;
        org.apache.cxf.message.Exchange $r1;
        org.apache.cxf.interceptor.OneWayProcessorInterceptor r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.io.InputStream r4;

        r2 := @this: org.apache.cxf.interceptor.OneWayProcessorInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $z0 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: boolean isOneWay()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r2.<org.apache.cxf.interceptor.OneWayProcessorInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r0);

        if $z1 != 0 goto label4;

        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        r4 = (java.io.InputStream) $r3;

        if r4 == null goto label4;

     label1:
        virtualinvoke r4.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        org.apache.cxf.transport.Conduit $r15;
        org.apache.cxf.interceptor.InterceptorChain $r6;
        org.apache.cxf.transport.Destination $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.logging.Logger $r32;
        org.apache.cxf.workqueue.AutomaticWorkQueue $r22;
        org.apache.cxf.interceptor.OneWayProcessorInterceptor$1 $r23;
        org.apache.cxf.transport.MessageObserver $r27;
        org.apache.cxf.interceptor.OneWayProcessorInterceptor r2;
        org.apache.cxf.workqueue.WorkQueueManager $r21;
        org.apache.cxf.Bus $r19;
        java.lang.Throwable $r34;
        org.apache.cxf.io.DelegatingInputStream r36;
        java.util.concurrent.RejectedExecutionException $r31;
        java.lang.String $r8;
        org.apache.cxf.message.Message r0, $r11;
        java.io.IOException $r35;
        org.apache.cxf.message.Exchange $r1, $r4, $r10, $r12, $r13, $r17, $r24, $r25, $r28;
        java.lang.InterruptedException $r30;
        java.lang.Object $r3, $r5, $r7, $r9, $r16, $r18, $r20, $r26, $r29, $r33;

        r2 := @this: org.apache.cxf.interceptor.OneWayProcessorInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $z0 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: boolean isOneWay()>();

        if $z0 == 0 goto label16;

        $z1 = virtualinvoke r2.<org.apache.cxf.interceptor.OneWayProcessorInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r0);

        if $z1 != 0 goto label16;

        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/OneWayProcessorInterceptor;");

        if $r3 != null goto label16;

        $r4 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r5 = interfaceinvoke $r4.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/Executor;");

        if $r5 != null goto label16;

        interfaceinvoke r0.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/interceptor/OneWayProcessorInterceptor;", r2);

        $r6 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.interceptor.InterceptorChain getInterceptorChain()>();

        $r7 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.oneway.robust");

        $z2 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r7);

        $r8 = <org.apache.cxf.interceptor.OneWayProcessorInterceptor: java.lang.String USE_ORIGINAL_THREAD>;

        $r9 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>($r8);

        $z3 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r9);

        if $z3 != 0 goto label01;

        if $z2 != 0 goto label01;

        $r29 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Lorg/apache/cxf/io/DelegatingInputStream;");

        r36 = (org.apache.cxf.io.DelegatingInputStream) $r29;

        if r36 == null goto label01;

        virtualinvoke r36.<org.apache.cxf.io.DelegatingInputStream: void cacheInput()>();

     label01:
        if $z2 == 0 goto label03;

        interfaceinvoke $r6.<org.apache.cxf.interceptor.InterceptorChain: void pause()>();

        interfaceinvoke $r6.<org.apache.cxf.interceptor.InterceptorChain: void resume()>();

        $r26 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        if $r26 == null goto label03;

        $r27 = interfaceinvoke $r6.<org.apache.cxf.interceptor.InterceptorChain: org.apache.cxf.transport.MessageObserver getFaultObserver()>();

        if $r27 == null goto label02;

        $r28 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r28.<org.apache.cxf.message.Exchange: void setOneWay(boolean)>(0);

        interfaceinvoke $r27.<org.apache.cxf.transport.MessageObserver: void onMessage(org.apache.cxf.message.Message)>(r0);

     label02:
        return;

     label03:
        $r10 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r11 = staticinvoke <org.apache.cxf.interceptor.OneWayProcessorInterceptor: org.apache.cxf.message.Message createMessage(org.apache.cxf.message.Exchange)>($r10);

        interfaceinvoke $r11.<org.apache.cxf.message.Message: java.lang.Object remove(java.lang.Object)>("Content-Type");

        $r12 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r11.<org.apache.cxf.message.Message: void setExchange(org.apache.cxf.message.Exchange)>($r12);

        $r13 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r14 = interfaceinvoke $r13.<org.apache.cxf.message.Exchange: org.apache.cxf.transport.Destination getDestination()>();

        $r15 = interfaceinvoke $r14.<org.apache.cxf.transport.Destination: org.apache.cxf.transport.Conduit getBackChannel(org.apache.cxf.message.Message,org.apache.cxf.message.Message,org.apache.cxf.ws.addressing.EndpointReferenceType)>(r0, null, null);

        if $r15 == null goto label04;

        $r24 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r24.<org.apache.cxf.message.Exchange: void setInMessage(org.apache.cxf.message.Message)>(null);

        interfaceinvoke $r15.<org.apache.cxf.transport.Conduit: void prepare(org.apache.cxf.message.Message)>($r11);

        interfaceinvoke $r15.<org.apache.cxf.transport.Conduit: void close(org.apache.cxf.message.Message)>($r11);

        $r25 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r25.<org.apache.cxf.message.Exchange: void setInMessage(org.apache.cxf.message.Message)>(r0);

     label04:
        goto label06;

     label05:
        $r35 := @caughtexception;

     label06:
        if $z3 != 0 goto label16;

        if $z2 != 0 goto label16;

        interfaceinvoke $r6.<org.apache.cxf.interceptor.InterceptorChain: void pause()>();

     label07:
        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        entermonitor $r16;

     label08:
        $r17 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r18 = interfaceinvoke $r17.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/Bus;");

        $r19 = (org.apache.cxf.Bus) $r18;

        $r20 = interfaceinvoke $r19.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/workqueue/WorkQueueManager;");

        $r21 = (org.apache.cxf.workqueue.WorkQueueManager) $r20;

        $r22 = interfaceinvoke $r21.<org.apache.cxf.workqueue.WorkQueueManager: org.apache.cxf.workqueue.AutomaticWorkQueue getAutomaticWorkQueue()>();

        $r23 = new org.apache.cxf.interceptor.OneWayProcessorInterceptor$1;

        specialinvoke $r23.<org.apache.cxf.interceptor.OneWayProcessorInterceptor$1: void <init>(org.apache.cxf.interceptor.OneWayProcessorInterceptor,java.lang.Object,org.apache.cxf.interceptor.InterceptorChain)>(r2, $r16, $r6);

        interfaceinvoke $r22.<org.apache.cxf.workqueue.AutomaticWorkQueue: void execute(java.lang.Runnable)>($r23);

        virtualinvoke $r16.<java.lang.Object: void wait(long)>(20L);

        exitmonitor $r16;

     label09:
        goto label12;

     label10:
        $r34 := @caughtexception;

        exitmonitor $r16;

     label11:
        throw $r34;

     label12:
        goto label16;

     label13:
        $r31 := @caughtexception;

        $r32 = <org.apache.cxf.interceptor.OneWayProcessorInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r32.<java.util.logging.Logger: void warning(java.lang.String)>("Executor queue is full, run the oneway invocation task in caller thread.  Users can specify a larger executor queue to avoid this.");

        $r33 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.oneway.rejected_execution_exception");

        $z4 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r33);

        if $z4 != 0 goto label14;

        interfaceinvoke $r6.<org.apache.cxf.interceptor.InterceptorChain: void unpause()>();

     label14:
        goto label16;

     label15:
        $r30 := @caughtexception;

     label16:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.util.concurrent.RejectedExecutionException from label07 to label12 with label13;
        catch java.lang.InterruptedException from label07 to label12 with label15;
    }

    private static org.apache.cxf.message.Message createMessage(org.apache.cxf.message.Exchange)
    {
        org.apache.cxf.message.MessageImpl $r3;
        org.apache.cxf.endpoint.Endpoint r2;
        org.apache.cxf.binding.Binding $r4;
        org.apache.cxf.message.Message r5;
        java.lang.Object $r1;
        org.apache.cxf.message.Exchange r0;

        r0 := @parameter0: org.apache.cxf.message.Exchange;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/Endpoint;");

        r2 = (org.apache.cxf.endpoint.Endpoint) $r1;

        r5 = null;

        if r2 == null goto label1;

        $r3 = new org.apache.cxf.message.MessageImpl;

        specialinvoke $r3.<org.apache.cxf.message.MessageImpl: void <init>()>();

        interfaceinvoke $r3.<org.apache.cxf.message.Message: void setExchange(org.apache.cxf.message.Exchange)>(r0);

        $r4 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.binding.Binding getBinding()>();

        r5 = interfaceinvoke $r4.<org.apache.cxf.binding.Binding: org.apache.cxf.message.Message createMessage(org.apache.cxf.message.Message)>($r3);

     label1:
        return r5;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;
        java.util.logging.Logger $r6;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lorg/apache/cxf/interceptor/OneWayProcessorInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".USE_ORIGINAL_THREAD");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.interceptor.OneWayProcessorInterceptor: java.lang.String USE_ORIGINAL_THREAD> = $r5;

        $r6 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/OneWayProcessorInterceptor;");

        <org.apache.cxf.interceptor.OneWayProcessorInterceptor: java.util.logging.Logger LOG> = $r6;

        return;
    }
}
