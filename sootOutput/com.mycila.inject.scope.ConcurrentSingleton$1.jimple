class com.mycila.inject.scope.ConcurrentSingleton$1 extends java.lang.Object implements java.lang.Runnable
{
    final com.google.inject.Key val$key;
    final com.mycila.inject.scope.ConcurrentSingleton this$0;

    void <init>(com.mycila.inject.scope.ConcurrentSingleton, com.google.inject.Key)
    {
        com.google.inject.Key r2;
        com.mycila.inject.scope.ConcurrentSingleton r1;
        com.mycila.inject.scope.ConcurrentSingleton$1 r0;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$1;

        r1 := @parameter0: com.mycila.inject.scope.ConcurrentSingleton;

        r2 := @parameter1: com.google.inject.Key;

        r0.<com.mycila.inject.scope.ConcurrentSingleton$1: com.mycila.inject.scope.ConcurrentSingleton this$0> = r1;

        r0.<com.mycila.inject.scope.ConcurrentSingleton$1: com.google.inject.Key val$key> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r14;
        com.google.inject.Key $r9;
        com.mycila.inject.scope.ConcurrentSingleton $r1, $r3;
        long $l0, $l1, l2, $l3;
        byte $b4;
        java.lang.Thread $r2, $r13;
        int $i5;
        boolean $z0;
        com.mycila.inject.scope.ConcurrentSingleton$1 r0;
        com.google.inject.Binding $r10;
        java.util.concurrent.TimeUnit $r5;
        java.lang.ref.Reference $r6;
        com.google.inject.Injector r8;
        com.google.inject.Provider $r11;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector $r4;
        java.lang.InterruptedException $r12;
        java.lang.Object $r7;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$1;

     label01:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<com.mycila.inject.scope.ConcurrentSingleton$1: com.mycila.inject.scope.ConcurrentSingleton this$0>;

        $l1 = $r1.<com.mycila.inject.scope.ConcurrentSingleton: long expirationDelay>;

        l2 = $l0 + $l1;

     label02:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r2.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label09;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l2;

        $i5 = (int) $b4;

        if $i5 >= 0 goto label09;

        $r3 = r0.<com.mycila.inject.scope.ConcurrentSingleton$1: com.mycila.inject.scope.ConcurrentSingleton this$0>;

        $r4 = staticinvoke <com.mycila.inject.scope.ConcurrentSingleton: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector access$200(com.mycila.inject.scope.ConcurrentSingleton)>($r3);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = virtualinvoke $r4.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.lang.ref.Reference waitAndGet(long,java.util.concurrent.TimeUnit)>(500L, $r5);

        $r7 = virtualinvoke $r6.<java.lang.ref.Reference: java.lang.Object get()>();

        r8 = (com.google.inject.Injector) $r7;

        if r8 != null goto label03;

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        goto label08;

     label03:
        $r9 = r0.<com.mycila.inject.scope.ConcurrentSingleton$1: com.google.inject.Key val$key>;

        $r10 = interfaceinvoke r8.<com.google.inject.Injector: com.google.inject.Binding getExistingBinding(com.google.inject.Key)>($r9);

        if $r10 != null goto label04;

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        goto label08;

     label04:
        $r11 = interfaceinvoke $r10.<com.google.inject.Binding: com.google.inject.Provider getProvider()>();

        interfaceinvoke $r11.<com.google.inject.Provider: java.lang.Object get()>();

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

     label07:
        return;

     label08:
        goto label02;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

     label11:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.InterruptedException from label01 to label07 with label10;
        catch java.lang.InterruptedException from label08 to label09 with label10;
    }
}
