public class com.hp.hpl.jena.mem.SetBunch extends java.lang.Object implements com.hp.hpl.jena.mem.TripleBunch
{
    protected java.util.Set elements;

    public void <init>(com.hp.hpl.jena.mem.TripleBunch)
    {
        java.util.HashSet $r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.mem.TripleBunch r2;
        java.util.Set $r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.mem.SetBunch r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r2 := @parameter0: com.hp.hpl.jena.mem.TripleBunch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(20);

        r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements> = $r1;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    protected static boolean equalsObjectOK(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r2 != null goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        return $z1;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.mem.SetBunch r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.mem.SetBunch r1;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.mem.SetBunch;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $z0 = staticinvoke <com.hp.hpl.jena.mem.SetBunch: boolean equalsObjectOK(com.hp.hpl.jena.graph.Triple)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        goto label2;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.mem.SetBunch: boolean slowContains(com.hp.hpl.jena.graph.Triple)>(r0);

     label2:
        return $z1;
    }

    protected boolean slowContains(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.hp.hpl.jena.graph.Triple r3, $r5;
        java.lang.Object $r4;
        com.hp.hpl.jena.mem.SetBunch r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $z1 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Triple)>($r5);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public int size()
    {
        int $i0;
        java.util.Set $r1;
        com.hp.hpl.jena.mem.SetBunch r0;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        $r1 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.mem.SetBunch r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.mem.SetBunch r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.mem.SetBunch r0;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r2;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        r2 := @parameter0: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.SetBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        return $r1;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.hp.hpl.jena.mem.SetBunch r0;

        r0 := @this: com.hp.hpl.jena.mem.SetBunch;

        $r1 = r0.<com.hp.hpl.jena.mem.SetBunch: java.util.Set elements>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r2);

        return $r3;
    }
}
