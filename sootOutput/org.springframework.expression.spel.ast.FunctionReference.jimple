public class org.springframework.expression.spel.ast.FunctionReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private final java.lang.String name;

    public transient void <init>(java.lang.String, int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.FunctionReference r0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.FunctionReference;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        r0.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name> = r2;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r8, $r13, $r17;
        java.lang.Object[] $r9, $r14;
        org.springframework.expression.spel.ast.FunctionReference r1;
        int $i0, $i1;
        java.lang.String $r2, $r10, $r15;
        org.springframework.expression.TypedValue $r3, $r7;
        java.lang.reflect.Method $r6;
        boolean $z0;
        org.springframework.expression.spel.SpelMessage $r11, $r16;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r4, $r5;
        java.lang.Class $r12;

        r1 := @this: org.springframework.expression.spel.ast.FunctionReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = r1.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue lookupVariable(java.lang.String)>($r2);

        if $r3 != null goto label1;

        $r13 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r1.<org.springframework.expression.spel.ast.FunctionReference: int getStartPosition()>();

        $r16 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage FUNCTION_NOT_DEFINED>;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = r1.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r14[0] = $r15;

        specialinvoke $r13.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r16, $r14);

        throw $r13;

     label1:
        $r4 = virtualinvoke $r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r4 instanceof java.lang.reflect.Method;

        if $z0 != 0 goto label2;

        $r8 = new org.springframework.expression.spel.SpelEvaluationException;

        $r11 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage FUNCTION_REFERENCE_CANNOT_BE_INVOKED>;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = r1.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r9[0] = $r10;

        $r12 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r9[1] = $r12;

        specialinvoke $r8.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r11, $r9);

        throw $r8;

     label2:
        $r5 = virtualinvoke $r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r6 = (java.lang.reflect.Method) $r5;

        $r7 = specialinvoke r1.<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>(r0, $r6);

     label3:
        return $r7;

     label4:
        $r17 := @caughtexception;

        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.FunctionReference: int getStartPosition()>();

        virtualinvoke $r17.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i1);

        throw $r17;

        catch org.springframework.expression.spel.SpelEvaluationException from label2 to label3 with label4;
    }

    private org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState, java.lang.reflect.Method) throws org.springframework.expression.EvaluationException
    {
        java.lang.Integer $r28, $r30;
        org.springframework.core.MethodParameter $r41;
        java.lang.reflect.Method r3;
        boolean $z0, $z1, $z2;
        org.springframework.expression.TypeConverter $r11;
        java.lang.Exception $r31;
        org.springframework.expression.EvaluationContext $r10;
        org.springframework.expression.spel.ExpressionState r1;
        java.lang.StringBuilder $r19, $r21, $r39;
        org.springframework.expression.spel.SpelEvaluationException $r38, $r40, $r44;
        java.lang.Object[] $r2, $r13, $r26, $r33, r37;
        org.springframework.expression.spel.ast.FunctionReference r0;
        org.springframework.core.convert.TypeDescriptor $r42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.String $r17, $r18, $r20, $r22, $r23, $r34, $r36;
        org.springframework.expression.TypedValue $r43;
        org.springframework.expression.spel.SpelMessage $r15, $r27, $r35;
        java.lang.Class[] $r9, $r24, $r29;
        java.lang.Class $r4, $r16;
        java.lang.Object $r5;

        r0 := @this: org.springframework.expression.spel.ast.FunctionReference;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter1: java.lang.reflect.Method;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.ast.FunctionReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1);

        r37 = $r2;

        $z0 = virtualinvoke r3.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z0 != 0 goto label1;

        $r24 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r24;

        $i2 = lengthof $r2;

        if $i3 == $i2 goto label1;

        $r38 = new org.springframework.expression.spel.SpelEvaluationException;

        $r27 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION>;

        $r26 = newarray (java.lang.Object)[2];

        $i4 = lengthof $r2;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r26[0] = $r28;

        $r29 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i5 = lengthof $r29;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r26[1] = $r30;

        specialinvoke $r38.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r27, $r26);

        throw $r38;

     label1:
        $i0 = virtualinvoke r3.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label2;

        $r40 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.FunctionReference: int getStartPosition()>();

        $r15 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage FUNCTION_MUST_BE_STATIC>;

        $r13 = newarray (java.lang.Object)[2];

        $r39 = new java.lang.StringBuilder;

        $r16 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r20 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r22;

        $r23 = r0.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r13[1] = $r23;

        specialinvoke $r40.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r15, $r13);

        throw $r40;

     label2:
        if $r2 == null goto label3;

        $r10 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r11 = interfaceinvoke $r10.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: void convertAllArguments(org.springframework.expression.TypeConverter,java.lang.Object[],java.lang.reflect.Method)>($r11, $r2, r3);

     label3:
        $z2 = virtualinvoke r3.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z2 == 0 goto label4;

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r37 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class[],java.lang.Object[])>($r9, $r2);

     label4:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r3);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, r37);

        $r43 = new org.springframework.expression.TypedValue;

        $r42 = new org.springframework.core.convert.TypeDescriptor;

        $r41 = new org.springframework.core.MethodParameter;

        $i8 = (int) -1;

        specialinvoke $r41.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r3, $i8);

        specialinvoke $r42.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r41);

        specialinvoke $r43.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r5, $r42);

     label5:
        return $r43;

     label6:
        $r31 := @caughtexception;

        $r44 = new org.springframework.expression.spel.SpelEvaluationException;

        $i6 = virtualinvoke r0.<org.springframework.expression.spel.ast.FunctionReference: int getStartPosition()>();

        $r35 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_FUNCTION_CALL>;

        $r33 = newarray (java.lang.Object)[2];

        $r34 = r0.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r33[0] = $r34;

        $r36 = virtualinvoke $r31.<java.lang.Exception: java.lang.String getMessage()>();

        $r33[1] = $r36;

        specialinvoke $r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i6, $r31, $r35, $r33);

        throw $r44;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.FunctionReference r1;
        int i0, $i1;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r2, $r5, $r6;
        org.springframework.expression.spel.SpelNode $r4;

        r1 := @this: org.springframework.expression.spel.ast.FunctionReference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("#");

        $r2 = r1.<org.springframework.expression.spel.ast.FunctionReference: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i0 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r4 = virtualinvoke r1.<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0);

        $r5 = interfaceinvoke $r4.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.FunctionReference: int getChildCount()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Object[] r1;
        org.springframework.expression.spel.ast.FunctionReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r2;
        int $i0, $i1, i2;
        org.springframework.expression.spel.ExpressionState r3;
        java.lang.Object $r6;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r0 := @this: org.springframework.expression.spel.ast.FunctionReference;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.FunctionReference: int getChildCount()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r4 = $r2[i2];

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r1[i2] = $r6;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        return r1;
    }
}
