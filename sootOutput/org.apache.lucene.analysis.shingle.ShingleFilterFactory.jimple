public class org.apache.lucene.analysis.shingle.ShingleFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory
{
    private final int minShingleSize;
    private final int maxShingleSize;
    private final boolean outputUnigrams;
    private final boolean outputUnigramsIfNoShingles;
    private final java.lang.String tokenSeparator;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.shingle.ShingleFilterFactory r0;
        java.util.Map r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r2, $r7, $r15, $r21, $r27;
        java.lang.IllegalArgumentException $r3, $r8, $r16, $r22;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "maxShingleSize", 2);

        r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize> = $i0;

        $i1 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize>;

        if $i1 >= 2 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid maxShingleSize (");

        $i9 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - must be at least 2");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label1:
        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minShingleSize", 2);

        r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize> = $i2;

        $i3 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize>;

        if $i3 >= 2 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid minShingleSize (");

        $i8 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - must be at least 2");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label2:
        $i5 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize>;

        $i4 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize>;

        if $i5 <= $i4 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid minShingleSize (");

        $i6 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - must be no greater than maxShingleSize (");

        $i7 = r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label3:
        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "outputUnigrams", 1);

        r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean outputUnigrams> = $z0;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "outputUnigramsIfNoShingles", 0);

        r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean outputUnigramsIfNoShingles> = $z1;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: java.lang.String get(java.util.Map,java.lang.String,java.lang.String)>(r1, "tokenSeparator", " ");

        r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: java.lang.String tokenSeparator> = $r2;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        return;
    }

    public org.apache.lucene.analysis.shingle.ShingleFilter create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.shingle.ShingleFilterFactory r2;
        org.apache.lucene.analysis.shingle.ShingleFilter $r0;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.analysis.shingle.ShingleFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.shingle.ShingleFilter;

        $i1 = r2.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int minShingleSize>;

        $i0 = r2.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: int maxShingleSize>;

        specialinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void <init>(org.apache.lucene.analysis.TokenStream,int,int)>(r1, $i1, $i0);

        $z0 = r2.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean outputUnigrams>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setOutputUnigrams(boolean)>($z0);

        $z1 = r2.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: boolean outputUnigramsIfNoShingles>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setOutputUnigramsIfNoShingles(boolean)>($z1);

        $r3 = r2.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: java.lang.String tokenSeparator>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setTokenSeparator(java.lang.String)>($r3);

        return $r0;
    }

    public volatile org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.shingle.ShingleFilter $r2;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.shingle.ShingleFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.shingle.ShingleFilterFactory: org.apache.lucene.analysis.shingle.ShingleFilter create(org.apache.lucene.analysis.TokenStream)>(r1);

        return $r2;
    }
}
