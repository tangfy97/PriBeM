public class com.mongodb.ReflectionDBObject$JavaWrapper extends java.lang.Object
{
    final java.lang.Class _class;
    final java.lang.String _name;
    final java.util.Map _fields;
    final java.util.Set _keys;

    void <init>(java.lang.Class)
    {
        com.mongodb.ReflectionDBObject$FieldInfo $r15, $r27, $r29, r32;
        java.lang.reflect.Method[] $r4;
        java.util.Map $r6, $r9, $r13, $r16, $r24, $r28;
        java.lang.reflect.Method r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r7, $r10, $r11, $r21;
        com.mongodb.ReflectionDBObject$JavaWrapper r0;
        java.util.HashSet $r5;
        int $i0, i1, i2;
        java.lang.String $r2, $r18, $r19, $r20, $r22, $r26, $r30, r33;
        java.util.Iterator $r8;
        java.lang.Class[] $r23;
        java.util.TreeMap $r3;
        java.lang.Class r1, $r31;
        java.lang.Object $r12, $r14, $r25;

        r0 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class _class> = r1;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.String _name> = $r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields> = $r3;

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = lengthof $r4;

        i2 = 0;

     label01:
        if i2 >= i1 goto label09;

        r17 = $r4[i2];

        $r18 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r18.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z2 != 0 goto label02;

        $r30 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z6 = virtualinvoke $r30.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z6 != 0 goto label02;

        goto label08;

     label02:
        $r19 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i0 == 0 goto label08;

        $r21 = staticinvoke <com.mongodb.ReflectionDBObject: java.util.Set access$000()>();

        $z3 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>($r20);

        if $z3 == 0 goto label03;

        goto label08;

     label03:
        $r22 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z4 == 0 goto label04;

        $r31 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        goto label05;

     label04:
        $r23 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r31 = $r23[0];

     label05:
        $r24 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        $r29 = (com.mongodb.ReflectionDBObject$FieldInfo) $r25;

        r32 = $r29;

        if $r29 != null goto label06;

        $r27 = new com.mongodb.ReflectionDBObject$FieldInfo;

        specialinvoke $r27.<com.mongodb.ReflectionDBObject$FieldInfo: void <init>(java.lang.String,java.lang.Class)>($r20, $r31);

        r32 = $r27;

        $r28 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r27);

     label06:
        $r26 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z5 == 0 goto label07;

        r32.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.reflect.Method _getter> = r17;

        goto label08;

     label07:
        r32.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.reflect.Method _setter> = r17;

     label08:
        i2 = i2 + 1;

        goto label01;

     label09:
        $r5 = new java.util.HashSet;

        $r6 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r7);

        $r8 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.lang.String) $r12;

        $r13 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r33);

        $r15 = (com.mongodb.ReflectionDBObject$FieldInfo) $r14;

        $z1 = virtualinvoke $r15.<com.mongodb.ReflectionDBObject$FieldInfo: boolean ok()>();

        if $z1 != 0 goto label11;

        $r16 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r33);

     label11:
        goto label10;

     label12:
        $r9 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>();

        $r11 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r10);

        r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Set _keys> = $r11;

        return;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r1;
        com.mongodb.ReflectionDBObject$JavaWrapper r0;

        r0 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        $r1 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Set _keys>;

        return $r1;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        com.mongodb.ReflectionDBObject$JavaWrapper r0;
        boolean $z0;

        r0 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Set _keys>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(com.mongodb.ReflectionDBObject, java.lang.String)
    {
        java.lang.Object[] $r6;
        com.mongodb.ReflectionDBObject$FieldInfo r4;
        java.util.Map $r2;
        java.lang.String r1, $r15, $r18;
        java.lang.reflect.Method $r7;
        com.mongodb.ReflectionDBObject r5;
        java.lang.RuntimeException $r10;
        com.mongodb.ReflectionDBObject$JavaWrapper r0;
        java.lang.Exception $r9;
        java.lang.Object $r3, $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16, $r17;

        r0 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        r5 := @parameter0: com.mongodb.ReflectionDBObject;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.mongodb.ReflectionDBObject$FieldInfo) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r7 = r4.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.reflect.Method _getter>;

        $r6 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, $r6);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not invoke getter for [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] on [");

        $r15 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.String _name>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r9);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r6;
        com.mongodb.ReflectionDBObject$FieldInfo r4;
        java.util.Map $r2;
        java.lang.String r1, $r15, $r18, $r25, $r28;
        java.lang.reflect.Method $r8;
        com.mongodb.ReflectionDBObject r5;
        java.lang.RuntimeException $r20;
        java.lang.IllegalArgumentException $r10;
        com.mongodb.ReflectionDBObject$JavaWrapper r0;
        java.lang.Exception $r19;
        java.lang.Object $r3, r7, $r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16, $r17, $r21, $r22, $r23, $r24, $r26, $r27;

        r0 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        r5 := @parameter0: com.mongodb.ReflectionDBObject;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Object;

        $r2 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.mongodb.ReflectionDBObject$FieldInfo) $r3;

        if r4 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no field [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] on [");

        $r15 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.String _name>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label1:
        $r8 = r4.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.reflect.Method _setter>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r7;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, $r6);

     label2:
        return $r9;

     label3:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not invoke setter for [");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] on [");

        $r25 = r0.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.String _name>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r19);

        throw $r20;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    java.lang.Class getInternalClass(java.lang.String)
    {
        com.mongodb.ReflectionDBObject$FieldInfo $r8;
        com.mongodb.ReflectionDBObject$JavaWrapper r1, $r5;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Class $r4, $r6, $r7;
        java.lang.String r0, r9, r10;

        r1 := @this: com.mongodb.ReflectionDBObject$JavaWrapper;

        r0 := @parameter0: java.lang.String;

        r9 = r0;

        r10 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i0 < 0 goto label1;

        r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        $r2 = r1.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Map _fields>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r8 = (com.mongodb.ReflectionDBObject$FieldInfo) $r3;

        if $r8 != null goto label2;

        return null;

     label2:
        if r10 != null goto label3;

        $r7 = $r8.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.Class _class>;

        return $r7;

     label3:
        $r4 = $r8.<com.mongodb.ReflectionDBObject$FieldInfo: java.lang.Class _class>;

        $r5 = staticinvoke <com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)>($r4);

        if $r5 != null goto label4;

        return null;

     label4:
        $r6 = virtualinvoke $r5.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>(r10);

        return $r6;
    }
}
