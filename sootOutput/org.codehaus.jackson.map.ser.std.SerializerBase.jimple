public abstract class org.codehaus.jackson.map.ser.std.SerializerBase extends org.codehaus.jackson.map.JsonSerializer implements org.codehaus.jackson.schema.SchemaAware
{
    protected final java.lang.Class _handledType;

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.JsonSerializer: void <init>()>();

        r0.<org.codehaus.jackson.map.ser.std.SerializerBase: java.lang.Class _handledType> = r1;

        return;
    }

    protected void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.JsonSerializer: void <init>()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r0.<org.codehaus.jackson.map.ser.std.SerializerBase: java.lang.Class _handledType> = $r2;

        return;
    }

    protected void <init>(java.lang.Class, boolean)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.codehaus.jackson.map.JsonSerializer: void <init>()>();

        r0.<org.codehaus.jackson.map.ser.std.SerializerBase: java.lang.Class _handledType> = r1;

        return;
    }

    public final java.lang.Class handledType()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.SerializerBase: java.lang.Class _handledType>;

        return $r1;
    }

    public abstract void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        return $r1;
    }

    protected org.codehaus.jackson.node.ObjectNode createObjectNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory $r0;
        org.codehaus.jackson.node.ObjectNode $r1;
        org.codehaus.jackson.map.ser.std.SerializerBase r2;

        r2 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        $r0 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        return $r1;
    }

    protected org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: org.codehaus.jackson.node.ObjectNode createObjectNode()>();

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", r2);

        return $r1;
    }

    protected org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String, boolean)
    {
        java.lang.String r1;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;
        org.codehaus.jackson.node.ObjectNode $r2;
        boolean z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>(r1);

        if z0 != 0 goto label3;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke $r2.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,boolean)>("required", $z1);

     label3:
        return $r2;
    }

    protected boolean isDefaultSerializer(org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.JsonSerializer r0;
        org.codehaus.jackson.map.ser.std.SerializerBase r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializer;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r7, r9;
        org.codehaus.jackson.map.SerializerProvider r0;
        java.lang.Error $r6;
        org.codehaus.jackson.map.JsonMappingException $r10;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        org.codehaus.jackson.map.ser.std.SerializerBase r8;
        java.io.IOException $r4;
        java.lang.RuntimeException $r3;
        java.lang.Object r1;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;

        r8 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r9 := @parameter1: java.lang.Throwable;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.String;

     label1:
        $z0 = r9 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r7 == null goto label2;

        r9 = virtualinvoke r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $z1 = r9 instanceof java.lang.Error;

        if $z1 == 0 goto label3;

        $r6 = (java.lang.Error) r9;

        throw $r6;

     label3:
        if r0 == null goto label4;

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_EXCEPTIONS>;

        $z5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z5 == 0 goto label5;

     label4:
        $z8 = 1;

        $z7 = 1;

        goto label6;

     label5:
        $z8 = 0;

        $z7 = 0;

     label6:
        $z2 = r9 instanceof java.io.IOException;

        if $z2 == 0 goto label8;

        if $z8 == 0 goto label7;

        $z4 = r9 instanceof org.codehaus.jackson.map.JsonMappingException;

        if $z4 != 0 goto label9;

     label7:
        $r4 = (java.io.IOException) r9;

        throw $r4;

     label8:
        if $z7 != 0 goto label9;

        $z3 = r9 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label9;

        $r3 = (java.lang.RuntimeException) r9;

        throw $r3;

     label9:
        $r10 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>(r9, r1, r2);

        throw $r10;
    }

    public void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider, java.lang.Throwable, java.lang.Object, int) throws java.io.IOException
    {
        java.lang.Throwable $r6, r8;
        org.codehaus.jackson.map.SerializerProvider r0;
        java.lang.Error $r5;
        org.codehaus.jackson.map.JsonMappingException $r9;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        org.codehaus.jackson.map.ser.std.SerializerBase r7;
        java.io.IOException $r3;
        java.lang.RuntimeException $r2;
        java.lang.Object r1;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;

        r7 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r8 := @parameter1: java.lang.Throwable;

        r1 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

     label1:
        $z0 = r8 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r8.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r6 == null goto label2;

        r8 = virtualinvoke r8.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $z1 = r8 instanceof java.lang.Error;

        if $z1 == 0 goto label3;

        $r5 = (java.lang.Error) r8;

        throw $r5;

     label3:
        if r0 == null goto label4;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_EXCEPTIONS>;

        $z5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        if $z5 == 0 goto label5;

     label4:
        $z8 = 1;

        $z7 = 1;

        goto label6;

     label5:
        $z8 = 0;

        $z7 = 0;

     label6:
        $z2 = r8 instanceof java.io.IOException;

        if $z2 == 0 goto label8;

        if $z8 == 0 goto label7;

        $z4 = r8 instanceof org.codehaus.jackson.map.JsonMappingException;

        if $z4 != 0 goto label9;

     label7:
        $r3 = (java.io.IOException) r8;

        throw $r3;

     label8:
        if $z7 != 0 goto label9;

        $z3 = r8 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label9;

        $r2 = (java.lang.RuntimeException) r8;

        throw $r2;

     label9:
        $r9 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(r8, r1, i0);

        throw $r9;
    }

    public void wrapAndThrow(java.lang.Throwable, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable r1;
        java.lang.Object r2;
        java.lang.String r3;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(null, r1, r2, r3);

        return;
    }

    public void wrapAndThrow(java.lang.Throwable, java.lang.Object, int) throws java.io.IOException
    {
        java.lang.Throwable r1;
        int i0;
        java.lang.Object r2;
        org.codehaus.jackson.map.ser.std.SerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializerBase;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(null, r1, r2, i0);

        return;
    }
}
