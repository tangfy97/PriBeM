public final class org.apache.lucene.util.NamedSPILoader extends java.lang.Object implements java.lang.Iterable
{
    private volatile java.util.Map services;
    private final java.lang.Class clazz;

    public void <init>(java.lang.Class)
    {
        org.apache.lucene.util.NamedSPILoader r0;
        java.lang.Thread $r2;
        java.lang.Class r1;
        java.lang.ClassLoader $r3;

        r0 := @this: org.apache.lucene.util.NamedSPILoader;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke r0.<org.apache.lucene.util.NamedSPILoader: void <init>(java.lang.Class,java.lang.ClassLoader)>(r1, $r3);

        return;
    }

    public void <init>(java.lang.Class, java.lang.ClassLoader)
    {
        org.apache.lucene.util.NamedSPILoader r0;
        java.util.Map $r1;
        java.lang.Class r2;
        java.lang.ClassLoader $r3, r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.NamedSPILoader;

        r2 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.lucene.util.NamedSPILoader: java.util.Map services> = $r1;

        r0.<org.apache.lucene.util.NamedSPILoader: java.lang.Class clazz> = r2;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r3 == null goto label1;

        $z0 = staticinvoke <org.apache.lucene.util.SPIClassIterator: boolean isParentClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>($r3, r4);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.NamedSPILoader: void reload(java.lang.ClassLoader)>($r3);

     label1:
        virtualinvoke r0.<org.apache.lucene.util.NamedSPILoader: void reload(java.lang.ClassLoader)>(r4);

        return;
    }

    public synchronized void reload(java.lang.ClassLoader)
    {
        java.util.LinkedHashMap $r0;
        java.util.Map $r2, $r6;
        java.util.ServiceConfigurationError $r11;
        java.lang.String $r9, $r14, $r16;
        boolean $z0, $z1;
        org.apache.lucene.util.NamedSPILoader$NamedSPI r17;
        java.lang.Exception $r10;
        org.apache.lucene.util.NamedSPILoader r1;
        java.lang.Class $r4, $r7;
        java.lang.Object $r8;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.ClassLoader r3;
        org.apache.lucene.util.SPIClassIterator $r5;

        r1 := @this: org.apache.lucene.util.NamedSPILoader;

        r3 := @parameter0: java.lang.ClassLoader;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.apache.lucene.util.NamedSPILoader: java.util.Map services>;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        $r4 = r1.<org.apache.lucene.util.NamedSPILoader: java.lang.Class clazz>;

        $r5 = staticinvoke <org.apache.lucene.util.SPIClassIterator: org.apache.lucene.util.SPIClassIterator get(java.lang.Class,java.lang.ClassLoader)>($r4, r3);

     label1:
        $z0 = virtualinvoke $r5.<org.apache.lucene.util.SPIClassIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = virtualinvoke $r5.<org.apache.lucene.util.SPIClassIterator: java.lang.Class next()>();

     label2:
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        r17 = (org.apache.lucene.util.NamedSPILoader$NamedSPI) $r8;

        $r9 = interfaceinvoke r17.<org.apache.lucene.util.NamedSPILoader$NamedSPI: java.lang.String getName()>();

        $z1 = virtualinvoke $r0.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r9);

        if $z1 != 0 goto label3;

        staticinvoke <org.apache.lucene.util.NamedSPILoader: void checkServiceName(java.lang.String)>($r9);

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r17);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.util.ServiceConfigurationError;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate SPI class: ");

        $r14 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label5:
        goto label1;

     label6:
        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        r1.<org.apache.lucene.util.NamedSPILoader: java.util.Map services> = $r6;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static void checkServiceName(java.lang.String)
    {
        int $i0, $i1, i3;
        java.lang.String r0, $r6, $r12;
        boolean $z0;
        char $c2;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 128 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal service name: \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is too long (must be < 128 chars).");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        i3 = 0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        if i3 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <org.apache.lucene.util.NamedSPILoader: boolean isLetterOrDigit(char)>($c2);

        if $z0 != 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal service name: \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be simple ascii alphanumeric.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return;
    }

    private static boolean isLetterOrDigit(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if 97 > $i1 goto label1;

        $i2 = (int) c0;

        if $i2 <= 122 goto label3;

     label1:
        $i3 = (int) c0;

        if 65 > $i3 goto label2;

        $i4 = (int) c0;

        if $i4 <= 90 goto label3;

     label2:
        $i5 = (int) c0;

        if 48 > $i5 goto label4;

        $i6 = (int) c0;

        if $i6 > 57 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public org.apache.lucene.util.NamedSPILoader$NamedSPI lookup(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String r1, $r9, $r18;
        java.util.Set $r16;
        org.apache.lucene.util.NamedSPILoader$NamedSPI r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.lucene.util.NamedSPILoader r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        java.lang.Class $r8;

        r0 := @this: org.apache.lucene.util.NamedSPILoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.util.NamedSPILoader: java.util.Map services>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.util.NamedSPILoader$NamedSPI) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A SPI class of type ");

        $r8 = r0.<org.apache.lucene.util.NamedSPILoader: java.lang.Class clazz>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with name \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist. ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You need to add the corresponding JAR file supporting this SPI to your classpath.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The current classpath supports the following names: ");

        $r16 = virtualinvoke r0.<org.apache.lucene.util.NamedSPILoader: java.util.Set availableServices()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r5;
    }

    public java.util.Set availableServices()
    {
        java.util.Set $r2;
        org.apache.lucene.util.NamedSPILoader r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.util.NamedSPILoader;

        $r1 = r0.<org.apache.lucene.util.NamedSPILoader: java.util.Map services>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3;
        org.apache.lucene.util.NamedSPILoader r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.lucene.util.NamedSPILoader;

        $r1 = r0.<org.apache.lucene.util.NamedSPILoader: java.util.Map services>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }
}
