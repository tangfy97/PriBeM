public class ucar.nc2.stream.NcStreamIosp extends ucar.nc2.iosp.AbstractIOServiceProvider
{
    private static final boolean debug;

    public void <init>()
    {
        ucar.nc2.stream.NcStreamIosp r0;

        r0 := @this: ucar.nc2.stream.NcStreamIosp;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        return;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        byte[] $r2, r3, $r4, $r5;
        ucar.unidata.io.RandomAccessFile r0;
        ucar.nc2.stream.NcStreamIosp r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: ucar.nc2.stream.NcStreamIosp;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_START>;

        $z0 = specialinvoke r1.<ucar.nc2.stream.NcStreamIosp: boolean readAndTest(ucar.unidata.io.RandomAccessFile,byte[])>(r0, $r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = newarray (byte)[4];

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r3);

        $r4 = <ucar.nc2.stream.NcStream: byte[] MAGIC_HEADER>;

        $z1 = specialinvoke r1.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r3, $r4);

        if $z1 != 0 goto label2;

        $r5 = <ucar.nc2.stream.NcStream: byte[] MAGIC_DATA>;

        $z2 = specialinvoke r1.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r3, $r5);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.stream.NcStreamIosp r0;

        r0 := @this: ucar.nc2.stream.NcStreamIosp;

        return "ncstream";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.stream.NcStreamIosp r0;

        r0 := @this: ucar.nc2.stream.NcStreamIosp;

        return "netCDF streaming protocol";
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        byte[] $r2, $r3, r4, r9, $r10, $r11, r12;
        java.lang.IllegalStateException $r20;
        ucar.unidata.io.RandomAccessFile r1;
        ucar.nc2.stream.NcStreamProto$Group $r6;
        ucar.nc2.util.CancelTask r40;
        ucar.nc2.stream.NcStreamIosp r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.Group $r8, $r17;
        java.lang.StringBuilder $r22, $r23, $r25, $r28, $r29, $r31, $r35, $r36, $r38;
        ucar.nc2.NetcdfFile r7;
        ucar.nc2.stream.NcStreamProto$Header $r5;
        java.lang.Throwable $r33;
        ucar.ma2.Section $r16;
        long $l3;
        ucar.nc2.stream.NcStreamProto$Data $r13;
        int $i0, $i1, $i2;
        ucar.nc2.Variable $r19;
        java.lang.String $r18, $r24, $r26, $r30, $r32, $r37, $r39;
        ucar.nc2.stream.NcStreamProto$Section $r15;
        java.io.IOException $r21, $r27;
        java.lang.RuntimeException $r34;
        ucar.nc2.stream.NcStreamIosp$DataSection $r14;

        r0 := @this: ucar.nc2.stream.NcStreamIosp;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r7 := @parameter1: ucar.nc2.NetcdfFile;

        r40 := @parameter2: ucar.nc2.util.CancelTask;

     label1:
        r0.<ucar.nc2.stream.NcStreamIosp: ucar.unidata.io.RandomAccessFile raf> = r1;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_START>;

        $z0 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean readAndTest(ucar.unidata.io.RandomAccessFile,byte[])>(r1, $r2);

        if $z0 != 0 goto label2;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data corrupted on ");

        $r30 = virtualinvoke r7.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label2:
        $r3 = <ucar.nc2.stream.NcStream: byte[] MAGIC_HEADER>;

        $z1 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean readAndTest(ucar.unidata.io.RandomAccessFile,byte[])>(r1, $r3);

        if $z1 != 0 goto label3;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data corrupted on ");

        $r24 = virtualinvoke r7.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label3:
        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        r4 = newarray (byte)[$i0];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r4);

        $r5 = staticinvoke <ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Header parseFrom(byte[])>(r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Group getRoot()>();

        $r8 = virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        staticinvoke <ucar.nc2.stream.NcStream: void readGroup(ucar.nc2.stream.NcStreamProto$Group,ucar.nc2.NetcdfFile,ucar.nc2.Group)>($r6, r7, $r8);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: void finish()>();

     label4:
        $z2 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: boolean isAtEndOfFile()>();

        if $z2 != 0 goto label7;

        r9 = newarray (byte)[4];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r9);

        $r10 = <ucar.nc2.stream.NcStream: byte[] MAGIC_END>;

        $z3 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r9, $r10);

        if $z3 == 0 goto label5;

        goto label7;

     label5:
        $r11 = <ucar.nc2.stream.NcStream: byte[] MAGIC_DATA>;

        $z4 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r9, $r11);

        if $z4 != 0 goto label6;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("bad format");

        throw $r20;

     label6:
        $i1 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        r12 = newarray (byte)[$i1];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r12);

        $r13 = staticinvoke <ucar.nc2.stream.NcStreamProto$Data: ucar.nc2.stream.NcStreamProto$Data parseFrom(byte[])>(r12);

        $i2 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        $r14 = new ucar.nc2.stream.NcStreamIosp$DataSection;

        specialinvoke $r14.<ucar.nc2.stream.NcStreamIosp$DataSection: void <init>(ucar.nc2.stream.NcStreamIosp,ucar.nc2.stream.NcStreamIosp$1)>(r0, null);

        $r14.<ucar.nc2.stream.NcStreamIosp$DataSection: int size> = $i2;

        $l3 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: long getFilePointer()>();

        $r14.<ucar.nc2.stream.NcStreamIosp$DataSection: long filePos> = $l3;

        $r15 = virtualinvoke $r13.<ucar.nc2.stream.NcStreamProto$Data: ucar.nc2.stream.NcStreamProto$Section getSection()>();

        $r16 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.Section decodeSection(ucar.nc2.stream.NcStreamProto$Section)>($r15);

        $r14.<ucar.nc2.stream.NcStreamIosp$DataSection: ucar.ma2.Section section> = $r16;

        $r17 = virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r18 = virtualinvoke $r13.<ucar.nc2.stream.NcStreamProto$Data: java.lang.String getVarName()>();

        $r19 = virtualinvoke $r17.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r18);

        virtualinvoke $r19.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r14);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>($i2);

        goto label4;

     label7:
        goto label9;

     label8:
        $r33 := @caughtexception;

        $r34 = new java.lang.RuntimeException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NcStreamIosp: ");

        $r37 = virtualinvoke $r33.<java.lang.Throwable: java.lang.String getMessage()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r39, $r33);

        throw $r34;

     label9:
        return;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r5;
        ucar.unidata.io.RandomAccessFile $r4, $r6;
        ucar.ma2.Section r11;
        long $l0;
        java.nio.ByteBuffer $r9;
        int[] $r8;
        int $i1;
        ucar.nc2.Variable r0;
        ucar.nc2.stream.NcStreamIosp r3;
        ucar.ma2.DataType $r7;
        ucar.ma2.Array $r10, $r13;
        java.util.List $r12;
        ucar.nc2.stream.NcStreamIosp$DataSection r2;
        java.lang.Object $r1;

        r3 := @this: ucar.nc2.stream.NcStreamIosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r11 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.stream.NcStreamIosp$DataSection) $r1;

        $r4 = r3.<ucar.nc2.stream.NcStreamIosp: ucar.unidata.io.RandomAccessFile raf>;

        $l0 = r2.<ucar.nc2.stream.NcStreamIosp$DataSection: long filePos>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l0);

        $i1 = r2.<ucar.nc2.stream.NcStreamIosp$DataSection: int size>;

        r5 = newarray (byte)[$i1];

        $r6 = r3.<ucar.nc2.stream.NcStreamIosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r6.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r5);

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r5);

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[],java.nio.ByteBuffer)>($r7, $r8, $r9);

        $r12 = virtualinvoke r11.<ucar.ma2.Section: java.util.List getRanges()>();

        $r13 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.Array section(java.util.List)>($r12);

        return $r13;
    }

    private int readVInt(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r0;
        short $s1, $s9;
        byte $b3, b5;
        int $i0, $i2, $i4, i6, i7, $i8, $i10;
        ucar.nc2.stream.NcStreamIosp r1;

        r1 := @this: ucar.nc2.stream.NcStreamIosp;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        $i0 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read()>();

        b5 = (byte) $i0;

        $i8 = (int) b5;

        i6 = $i8 & 127;

        i7 = 7;

     label1:
        $s9 = (short) b5;

        $s1 = $s9 & 128;

        if $s1 == 0 goto label2;

        $i2 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read()>();

        b5 = (byte) $i2;

        $b3 = b5 & 127;

        $i10 = (int) $b3;

        $i4 = $i10 << i7;

        i6 = i6 | $i4;

        i7 = i7 + 7;

        goto label1;

     label2:
        return i6;
    }

    private boolean readAndTest(ucar.unidata.io.RandomAccessFile, byte[]) throws java.io.IOException
    {
        byte[] r0, r1;
        ucar.unidata.io.RandomAccessFile r2;
        int $i0;
        ucar.nc2.stream.NcStreamIosp r3;
        boolean $z0;

        r3 := @this: ucar.nc2.stream.NcStreamIosp;

        r2 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r0 := @parameter1: byte[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        virtualinvoke r2.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r1);

        $z0 = specialinvoke r3.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r1, r0);

        return $z0;
    }

    private boolean test(byte[], byte[]) throws java.io.IOException
    {
        byte[] r0, r1;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i6, $i7;
        ucar.nc2.stream.NcStreamIosp r2;

        r2 := @this: ucar.nc2.stream.NcStreamIosp;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label4;

        $b4 = r0[i5];

        $b3 = r1[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public java.util.List open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile) throws java.io.IOException
    {
        byte[] $r2, $r3, r4, r11, $r12, $r13, $r25;
        ucar.unidata.io.RandomAccessFile r1;
        ucar.nc2.stream.NcStreamProto$Group $r6;
        ucar.nc2.stream.NcStreamIosp r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.Group $r8, $r20;
        java.lang.StringBuilder $r27, $r28, $r30, $r33, $r34, $r36;
        ucar.nc2.NetcdfFile r7;
        ucar.nc2.stream.NcStreamProto$Header $r5;
        ucar.nc2.stream.NcStreamIosp$NcsMess $r10, $r15, $r19;
        ucar.ma2.Section $r18;
        long $l3;
        java.util.ArrayList $r9;
        ucar.nc2.stream.NcStreamProto$Data $r14;
        int $i0, $i1, $i2;
        ucar.nc2.Variable $r22;
        java.lang.String $r21, $r29, $r31, $r35, $r37;
        java.io.PrintStream $r23, $r24;
        ucar.nc2.stream.NcStreamProto$Section $r17;
        java.io.IOException $r26, $r32;
        ucar.nc2.stream.NcStreamIosp$DataSection $r16;

        r0 := @this: ucar.nc2.stream.NcStreamIosp;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r7 := @parameter1: ucar.nc2.NetcdfFile;

        r0.<ucar.nc2.stream.NcStreamIosp: ucar.unidata.io.RandomAccessFile raf> = r1;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_START>;

        $z0 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean readAndTest(ucar.unidata.io.RandomAccessFile,byte[])>(r1, $r2);

        if $z0 != 0 goto label1;

        $r32 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data corrupted on ");

        $r35 = virtualinvoke r7.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r32;

     label1:
        $r3 = <ucar.nc2.stream.NcStream: byte[] MAGIC_HEADER>;

        $z1 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean readAndTest(ucar.unidata.io.RandomAccessFile,byte[])>(r1, $r3);

        if $z1 != 0 goto label2;

        $r26 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data corrupted on ");

        $r29 = virtualinvoke r7.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label2:
        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        r4 = newarray (byte)[$i0];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r4);

        $r5 = staticinvoke <ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Header parseFrom(byte[])>(r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Group getRoot()>();

        $r8 = virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        staticinvoke <ucar.nc2.stream.NcStream: void readGroup(ucar.nc2.stream.NcStreamProto$Group,ucar.nc2.NetcdfFile,ucar.nc2.Group)>($r6, r7, $r8);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: void finish()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new ucar.nc2.stream.NcStreamIosp$NcsMess;

        specialinvoke $r10.<ucar.nc2.stream.NcStreamIosp$NcsMess: void <init>(int,java.lang.Object)>($i0, $r5);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        $z2 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: boolean isAtEndOfFile()>();

        if $z2 != 0 goto label7;

        r11 = newarray (byte)[4];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r11);

        $r12 = <ucar.nc2.stream.NcStream: byte[] MAGIC_END>;

        $z3 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r11, $r12);

        if $z3 == 0 goto label4;

        goto label7;

     label4:
        $r13 = <ucar.nc2.stream.NcStream: byte[] MAGIC_DATA>;

        $z4 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: boolean test(byte[],byte[])>(r11, $r13);

        if $z4 != 0 goto label5;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("HEY");

     label5:
        $i1 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        $r25 = newarray (byte)[$i1];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[])>($r25);

        $r14 = staticinvoke <ucar.nc2.stream.NcStreamProto$Data: ucar.nc2.stream.NcStreamProto$Data parseFrom(byte[])>($r25);

        $r15 = new ucar.nc2.stream.NcStreamIosp$NcsMess;

        specialinvoke $r15.<ucar.nc2.stream.NcStreamIosp$NcsMess: void <init>(int,java.lang.Object)>($i1, $r14);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r15);

        $i2 = specialinvoke r0.<ucar.nc2.stream.NcStreamIosp: int readVInt(ucar.unidata.io.RandomAccessFile)>(r1);

        if $i2 != 1 goto label6;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("HEY");

     label6:
        $r16 = new ucar.nc2.stream.NcStreamIosp$DataSection;

        specialinvoke $r16.<ucar.nc2.stream.NcStreamIosp$DataSection: void <init>(ucar.nc2.stream.NcStreamIosp,ucar.nc2.stream.NcStreamIosp$1)>(r0, null);

        $r16.<ucar.nc2.stream.NcStreamIosp$DataSection: int size> = $i2;

        $l3 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: long getFilePointer()>();

        $r16.<ucar.nc2.stream.NcStreamIosp$DataSection: long filePos> = $l3;

        $r17 = virtualinvoke $r14.<ucar.nc2.stream.NcStreamProto$Data: ucar.nc2.stream.NcStreamProto$Section getSection()>();

        $r18 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.Section decodeSection(ucar.nc2.stream.NcStreamProto$Section)>($r17);

        $r16.<ucar.nc2.stream.NcStreamIosp$DataSection: ucar.ma2.Section section> = $r18;

        $r19 = new ucar.nc2.stream.NcStreamIosp$NcsMess;

        specialinvoke $r19.<ucar.nc2.stream.NcStreamIosp$NcsMess: void <init>(int,java.lang.Object)>($i2, $r16);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r21 = virtualinvoke $r14.<ucar.nc2.stream.NcStreamProto$Data: java.lang.String getVarName()>();

        $r22 = virtualinvoke $r20.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r21);

        virtualinvoke $r22.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r16);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>($i2);

        goto label3;

     label7:
        return $r9;
    }

    public static void <clinit>()
    {
        <ucar.nc2.stream.NcStreamIosp: boolean debug> = 0;

        return;
    }
}
