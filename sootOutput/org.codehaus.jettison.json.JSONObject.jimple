public class org.codehaus.jettison.json.JSONObject extends java.lang.Object implements java.io.Serializable
{
    private java.util.LinkedHashMap myHashMap;
    public static final java.lang.Object NULL;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.codehaus.jettison.json.JSONObject r0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap> = $r1;

        return;
    }

    public void <init>(org.codehaus.jettison.json.JSONObject, java.lang.String[]) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0, r2;
        java.lang.String[] r1;
        int $i0, i1;
        java.lang.Object $r5;
        java.lang.String $r3, $r4;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r2 := @parameter0: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.codehaus.jettison.json.JSONObject: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r4 = r1[i1];

        $r3 = r1[i1];

        $r5 = virtualinvoke r2.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>($r3);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject putOpt(java.lang.String,java.lang.Object)>($r4, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.codehaus.jettison.json.JSONTokener) throws org.codehaus.jettison.json.JSONException
    {
        int $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r4;
        org.codehaus.jettison.json.JSONObject r0;
        char $c0, $c1, $c2, $c3, $c4, $c5;
        org.codehaus.jettison.json.JSONException $r2, $r5, $r6, $r7;
        org.codehaus.jettison.json.JSONTokener r1;
        java.lang.Object $r3, $r8;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: org.codehaus.jettison.json.JSONTokener;

        specialinvoke r0.<org.codehaus.jettison.json.JSONObject: void <init>()>();

        $c0 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i6 = (int) $c0;

        if $i6 == 123 goto label01;

        $r7 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("A JSONObject text must begin with \'{\'");

        throw $r7;

     label01:
        $c1 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i7 = (int) $c1;

        lookupswitch($i7)
        {
            case 0: goto label02;
            case 125: goto label03;
            default: goto label04;
        };

     label02:
        $r2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("A JSONObject text must end with \'}\'");

        throw $r2;

     label03:
        return;

     label04:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: java.lang.Object nextValue()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $c2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i8 = (int) $c2;

        if $i8 != 61 goto label05;

        $c4 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i9 = (int) $c4;

        if $i9 == 62 goto label06;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        goto label06;

     label05:
        $i10 = (int) $c2;

        if $i10 == 58 goto label06;

        $r6 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Expected a \':\' after a key");

        throw $r6;

     label06:
        $r8 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: java.lang.Object nextValue()>();

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>($r4, $r8);

        $c5 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i11 = (int) $c5;

        lookupswitch($i11)
        {
            case 44: goto label07;
            case 59: goto label07;
            case 125: goto label09;
            default: goto label10;
        };

     label07:
        $c3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i12 = (int) $c3;

        if $i12 != 125 goto label08;

        return;

     label08:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        goto label01;

     label09:
        return;

     label10:
        $r5 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Expected a \',\' or \'}\'");

        throw $r5;
    }

    public void <init>(java.util.Map)
    {
        java.util.LinkedHashMap $r2, $r6, $r10, $r13, $r14;
        java.util.Map r1, $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Collection $r12;
        org.codehaus.jettison.json.JSONObject r0, $r8;
        java.util.Set $r3;
        org.codehaus.jettison.json.JSONArray $r11;
        java.lang.Object $r5, $r7;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        goto label2;

     label1:
        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

     label2:
        r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap> = $r14;

        $r2 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r5);

        $z0 = $r7 instanceof java.util.Collection;

        if $z0 == 0 goto label4;

        $r13 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r11 = new org.codehaus.jettison.json.JSONArray;

        $r12 = (java.util.Collection) $r7;

        specialinvoke $r11.<org.codehaus.jettison.json.JSONArray: void <init>(java.util.Collection)>($r12);

        virtualinvoke $r13.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r11);

     label4:
        $z1 = $r7 instanceof java.util.Map;

        if $z1 == 0 goto label5;

        $r10 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r8 = new org.codehaus.jettison.json.JSONObject;

        $r9 = (java.util.Map) $r7;

        specialinvoke $r8.<org.codehaus.jettison.json.JSONObject: void <init>(java.util.Map)>($r9);

        virtualinvoke $r10.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

     label5:
        goto label3;

     label6:
        return;
    }

    public void <init>(java.lang.Object, java.lang.String[])
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String[] r3;
        java.lang.reflect.Field $r4;
        java.lang.Exception $r6;
        int $i0, i1;
        java.lang.Object r1, $r5;
        java.lang.Class $r2;
        java.lang.String r7;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.codehaus.jettison.json.JSONObject: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        i1 = 0;

     label1:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label6;

     label2:
        r7 = r3[i1];

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r7);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r7, $r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void <init>(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONTokener $r1;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.codehaus.jettison.json.JSONTokener;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONTokener: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.codehaus.jettison.json.JSONObject: void <init>(org.codehaus.jettison.json.JSONTokener)>($r1);

        return;
    }

    public org.codehaus.jettison.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r1;
        org.codehaus.jettison.json.JSONArray $r4, $r5, $r6, $r7;
        java.lang.Object r0, $r3;
        java.lang.String r2;
        boolean $z0;

        r1 := @this: org.codehaus.jettison.json.JSONObject;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>(r0);

        $r3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r2);

        if $r3 != null goto label1;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r2, r0);

        goto label3;

     label1:
        $z0 = $r3 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 == 0 goto label2;

        $r7 = (org.codehaus.jettison.json.JSONArray) $r3;

        virtualinvoke $r7.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>(r0);

        goto label3;

     label2:
        $r4 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r4.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>(r0);

        virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r2, $r6);

     label3:
        return r1;
    }

    public org.codehaus.jettison.json.JSONObject append(java.lang.String, java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.String r2, $r12;
        boolean $z0;
        org.codehaus.jettison.json.JSONObject r1;
        org.codehaus.jettison.json.JSONArray $r4, $r5, $r6, $r13, $r14;
        org.codehaus.jettison.json.JSONException $r7;
        java.lang.Object r0, $r3;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r1 := @this: org.codehaus.jettison.json.JSONObject;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>(r0);

        $r3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r2);

        if $r3 != null goto label1;

        $r13 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r13.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        $r14 = virtualinvoke $r13.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>(r0);

        virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r2, $r14);

        goto label3;

     label1:
        $z0 = $r3 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 != 0 goto label2;

        $r7 = new org.codehaus.jettison.json.JSONException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a JSONArray.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label2:
        $r4 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r4.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>(r0);

        virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r2, $r6);

     label3:
        return r1;
    }

    public static java.lang.String doubleToString(double)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r0, r1;
        double d0;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        return "null";

     label2:
        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        r1 = $r0;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(46);

        if $i0 <= 0 goto label5;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(101);

        if $i1 >= 0 goto label5;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(69);

        if $i2 >= 0 goto label5;

     label3:
        $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("0");

        if $z2 == 0 goto label4;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label3;

     label4:
        $z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z3 == 0 goto label5;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label5:
        return r1;
    }

    public java.lang.Object get(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0;
        org.codehaus.jettison.json.JSONException $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String r1, $r6, $r9;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = new org.codehaus.jettison.json.JSONException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r6 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return $r2;
    }

    public boolean getBoolean(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Boolean $r3, $r4;
        java.lang.String r1, $r8, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.jettison.json.JSONObject r0;
        org.codehaus.jettison.json.JSONException $r5;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r13 = (java.lang.String) $r2;

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z5 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label3;

        $z3 = $r2 instanceof java.lang.String;

        if $z3 == 0 goto label4;

        $r12 = (java.lang.String) $r2;

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z4 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r5 = new org.codehaus.jettison.json.JSONException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r8 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a Boolean.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    public double getDouble(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Double $r4;
        java.lang.String r1, $r3, $r10, $r13;
        java.lang.Number $r5;
        boolean $z0;
        double $d0;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Exception $r6;
        org.codehaus.jettison.json.JSONException $r7;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

     label1:
        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r5 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $r3 = (java.lang.String) $r2;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r3);

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label3:
        return $d0;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.codehaus.jettison.json.JSONException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r10 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a number.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r13);

        throw $r7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getInt(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        int $i0;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2;
        java.lang.String r1;
        java.lang.Number $r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: double getDouble(java.lang.String)>(r1);

        $i0 = (int) $d0;

     label2:
        return $i0;
    }

    public org.codehaus.jettison.json.JSONArray getJSONArray(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0;
        org.codehaus.jettison.json.JSONArray $r10;
        org.codehaus.jettison.json.JSONException $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String r1, $r6, $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = $r2 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 == 0 goto label1;

        $r10 = (org.codehaus.jettison.json.JSONArray) $r2;

        return $r10;

     label1:
        $r3 = new org.codehaus.jettison.json.JSONException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r6 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a JSONArray.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public org.codehaus.jettison.json.JSONObject getJSONObject(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0, $r10;
        org.codehaus.jettison.json.JSONException $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String r1, $r6, $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = $r2 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label1;

        $r10 = (org.codehaus.jettison.json.JSONObject) $r2;

        return $r10;

     label1:
        $r3 = new org.codehaus.jettison.json.JSONException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONObject[");

        $r6 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a JSONObject.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public long getLong(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2;
        long $l0;
        java.lang.String r1;
        java.lang.Number $r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) $r2;

        $l0 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: double getDouble(java.lang.String)>(r1);

        $l0 = (long) $d0;

     label2:
        return $l0;
    }

    public java.lang.String getString(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public boolean has(java.lang.String)
    {
        java.util.LinkedHashMap $r2;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $z0 = virtualinvoke $r2.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isNull(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        $r3 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public java.util.Iterator keys()
    {
        java.util.LinkedHashMap $r1;
        java.util.Iterator $r3;
        org.codehaus.jettison.json.JSONObject r0;
        java.util.Set $r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        $r1 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public int length()
    {
        java.util.LinkedHashMap $r1;
        int $i0;
        org.codehaus.jettison.json.JSONObject r0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        $r1 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        return $i0;
    }

    public org.codehaus.jettison.json.JSONArray names()
    {
        java.util.Iterator $r2;
        int $i0;
        org.codehaus.jettison.json.JSONObject r1;
        org.codehaus.jettison.json.JSONArray $r0, $r4;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @this: org.codehaus.jettison.json.JSONObject;

        $r0 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r0.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        $r2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r3);

        goto label1;

     label2:
        $i0 = virtualinvoke $r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 != 0 goto label3;

        $r4 = null;

        goto label4;

     label3:
        $r4 = $r0;

     label4:
        return $r4;
    }

    public static java.lang.String numberToString(java.lang.Number) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, r3;
        java.lang.Number r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Number;

        if r0 != null goto label1;

        $r2 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>("Null pointer");

        throw $r2;

     label1:
        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        r3 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(101);

        if $i1 >= 0 goto label4;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(69);

        if $i2 >= 0 goto label4;

     label2:
        $z0 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("0");

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label2;

     label3:
        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label4:
        return r3;
    }

    public java.lang.Object opt(java.lang.String)
    {
        java.util.LinkedHashMap $r2;
        org.codehaus.jettison.json.JSONObject r1;
        java.lang.Object $r3;
        java.lang.String r0;

        r1 := @this: org.codehaus.jettison.json.JSONObject;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r1.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r0);

     label2:
        return $r3;
    }

    public boolean optBoolean(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>(r1, 0);

        return $z0;
    }

    public boolean optBoolean(java.lang.String, boolean)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Exception $r2;
        boolean $z0, z1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: boolean getBoolean(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        return z1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, java.util.Collection) throws org.codehaus.jettison.json.JSONException
    {
        java.util.Collection r3;
        org.codehaus.jettison.json.JSONObject r0;
        org.codehaus.jettison.json.JSONArray $r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Collection;

        $r2 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONArray: void <init>(java.util.Collection)>(r3);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public double optDouble(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: double optDouble(java.lang.String,double)>(r1, #NaN);

        return $d0;
    }

    public double optDouble(java.lang.String, double)
    {
        java.lang.Double $r3;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Exception $r6;
        java.lang.Object $r2;
        java.lang.String r1, $r4;
        java.lang.Number $r5;
        boolean $z0;
        double d0, $d1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r5 = (java.lang.Number) $r2;

        $d1 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $r3 = new java.lang.Double;

        $r4 = (java.lang.String) $r2;

        specialinvoke $r3.<java.lang.Double: void <init>(java.lang.String)>($r4);

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

     label3:
        return $d1;

     label4:
        $r6 := @caughtexception;

        return d0;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int optInt(java.lang.String)
    {
        int $i0;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: int optInt(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int optInt(java.lang.String, int)
    {
        int $i0, i1;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Exception $r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: int getInt(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.jettison.json.JSONArray optJSONArray(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2;
        org.codehaus.jettison.json.JSONArray $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = $r2 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 == 0 goto label1;

        $r3 = (org.codehaus.jettison.json.JSONArray) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.codehaus.jettison.json.JSONObject optJSONObject(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0, $r3;
        java.lang.Object $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = $r2 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label1;

        $r3 = (org.codehaus.jettison.json.JSONObject) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public long optLong(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        long $l0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $l0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: long optLong(java.lang.String,long)>(r1, 0L);

        return $l0;
    }

    public long optLong(java.lang.String, long)
    {
        org.codehaus.jettison.json.JSONObject r0;
        long $l0, l1;
        java.lang.String r1;
        java.lang.Exception $r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

     label1:
        $l0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: long getLong(java.lang.String)>(r1);

     label2:
        return $l0;

     label3:
        $r2 := @caughtexception;

        return l1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String optString(java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1, $r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public java.lang.String optString(java.lang.String, java.lang.String)
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r2;
        java.lang.String r1, r3, $r4;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = r3;

     label2:
        return $r4;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, boolean) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Boolean $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, double) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Double $r2;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        double d0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Integer $r2;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, long) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Long $r2;
        org.codehaus.jettison.json.JSONObject r0;
        long l0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, java.util.Map) throws org.codehaus.jettison.json.JSONException
    {
        java.util.Map r3;
        org.codehaus.jettison.json.JSONObject r0, $r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        $r2 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONObject: void <init>(java.util.Map)>(r3);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public org.codehaus.jettison.json.JSONObject put(java.lang.String, java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        java.util.LinkedHashMap $r3;
        org.codehaus.jettison.json.JSONException $r4;
        org.codehaus.jettison.json.JSONObject r2;
        java.lang.Object r1;
        java.lang.String r0;

        r2 := @this: org.codehaus.jettison.json.JSONObject;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r4.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>("Null key.");

        throw $r4;

     label1:
        if r1 == null goto label2;

        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>(r1);

        $r3 = r2.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label3;

     label2:
        virtualinvoke r2.<org.codehaus.jettison.json.JSONObject: java.lang.Object remove(java.lang.String)>(r0);

     label3:
        return r2;
    }

    public org.codehaus.jettison.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r1;
        java.lang.Object r2;
        java.lang.String r0;

        r1 := @this: org.codehaus.jettison.json.JSONObject;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        if r2 == null goto label1;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>(r0, r2);

     label1:
        return r1;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.StringBuffer $r13;
        int $i0, $i1, $i2, $i4, $i5, i6, $i7, $i8, $i9;
        java.lang.String r0, $r2, $r5, $r7, $r10, $r12;
        char $c3;
        java.lang.StringBuilder $r4, $r6, $r9, $r11, $r14, $r15;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return "\"\"";

     label02:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r13 = new java.lang.StringBuffer;

        $i2 = $i1 + 4;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(int)>($i2);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        i6 = 0;

     label03:
        if i6 >= $i1 goto label14;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c3;

        lookupswitch($i7)
        {
            case 8: goto label06;
            case 9: goto label07;
            case 10: goto label08;
            case 12: goto label09;
            case 13: goto label10;
            case 34: goto label04;
            case 47: goto label05;
            case 92: goto label04;
            default: goto label11;
        };

     label04:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label13;

     label05:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label13;

     label06:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label13;

     label07:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label13;

     label08:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label13;

     label09:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label13;

     label10:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label13;

     label11:
        $i8 = (int) $c3;

        if $i8 >= 32 goto label12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000");

        $i9 = (int) $c3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        $i4 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i5 = $i4 - 4;

        $r10 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i5);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label13;

     label12:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

     label13:
        i6 = i6 + 1;

        goto label03;

     label14:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r2 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.Object remove(java.lang.String)
    {
        java.util.LinkedHashMap $r2;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    static void testValidity(java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Float $r1, $r3;
        java.lang.Double $r4, $r6;
        org.codehaus.jettison.json.JSONException $r2, $r5;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label4;

        $z0 = r0 instanceof java.lang.Double;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Double) r0;

        $z4 = virtualinvoke $r4.<java.lang.Double: boolean isInfinite()>();

        if $z4 != 0 goto label1;

        $r6 = (java.lang.Double) r0;

        $z5 = virtualinvoke $r6.<java.lang.Double: boolean isNaN()>();

        if $z5 == 0 goto label4;

     label1:
        $r5 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r5.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>("JSON does not allow non-finite numbers");

        throw $r5;

     label2:
        $z1 = r0 instanceof java.lang.Float;

        if $z1 == 0 goto label4;

        $r1 = (java.lang.Float) r0;

        $z2 = virtualinvoke $r1.<java.lang.Float: boolean isInfinite()>();

        if $z2 != 0 goto label3;

        $r3 = (java.lang.Float) r0;

        $z3 = virtualinvoke $r3.<java.lang.Float: boolean isNaN()>();

        if $z3 == 0 goto label4;

     label3:
        $r2 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>("JSON does not allow non-finite numbers.");

        throw $r2;

     label4:
        return;
    }

    public org.codehaus.jettison.json.JSONArray toJSONArray(org.codehaus.jettison.json.JSONArray) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject r2;
        org.codehaus.jettison.json.JSONArray r0, $r1;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        java.lang.String $r3;

        r2 := @this: org.codehaus.jettison.json.JSONObject;

        r0 := @parameter0: org.codehaus.jettison.json.JSONArray;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        i2 = 0;

     label3:
        $i1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i2 >= $i1 goto label4;

        $r3 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.String getString(int)>(i2);

        $r4 = virtualinvoke r2.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>($r3);

        virtualinvoke $r1.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r1;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Exception $r10;
        java.util.LinkedHashMap $r7;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.Object $r4, $r8;
        java.lang.String $r3, $r5, $r6, $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i0 <= 1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label3:
        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r7 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r8 = virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r9 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($r8);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label2;

     label4:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return $r3;

     label6:
        $r10 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public java.lang.String toString(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.String toString(int,int)>(i0, 0);

        return $r1;
    }

    java.lang.String toString(int, int) throws org.codehaus.jettison.json.JSONException
    {
        java.util.LinkedHashMap $r6, $r12;
        java.lang.StringBuffer $r2;
        int $i0, i1, i2, i3, $i4, $i5, i6, i7;
        java.lang.String $r4, $r5, $r8, $r10, $r11, $r14, $r15;
        boolean $z0;
        java.util.Iterator $r1;
        org.codehaus.jettison.json.JSONObject r0;
        java.lang.Object $r3, $r7, $r9, $r13;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: int length()>();

        if $i0 != 0 goto label1;

        return "{}";

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

        i3 = i1 + i2;

        if $i0 != 1 goto label2;

        $r9 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r12 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r14 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($r13, i2, i1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        goto label9;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i5 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i5 <= 1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\n");

        goto label4;

     label3:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label4:
        i6 = 0;

     label5:
        if i6 >= i3 goto label6;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i6 = i6 + 1;

        goto label5;

     label6:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r8 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($r7, i2, i3);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label2;

     label7:
        $i4 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i4 <= 1 goto label9;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i7 = 0;

     label8:
        if i7 >= i1 goto label9;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i7 = i7 + 1;

        goto label8;

     label9:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r15 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }

    static java.lang.String valueToString(java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.String $r1, $r2, $r4, $r6, $r11, $r12, $r15;
        java.lang.Number $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.jettison.json.JSONString $r5;
        java.lang.Exception $r13;
        org.codehaus.jettison.json.JSONException $r7, $r14;
        java.lang.Object r0;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(null);

        if $z0 == 0 goto label02;

     label01:
        return "null";

     label02:
        $z1 = r0 instanceof org.codehaus.jettison.json.JSONString;

        if $z1 == 0 goto label08;

     label03:
        $r5 = (org.codehaus.jettison.json.JSONString) r0;

        $r6 = interfaceinvoke $r5.<org.codehaus.jettison.json.JSONString: java.lang.String toJSONString()>();

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        $r14 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r14.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label06:
        $z6 = $r6 instanceof java.lang.String;

        if $z6 == 0 goto label07;

        $r12 = (java.lang.String) $r6;

        return $r12;

     label07:
        $r7 = new org.codehaus.jettison.json.JSONException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value from toJSONString: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label08:
        $z2 = r0 instanceof java.lang.Number;

        if $z2 == 0 goto label09;

        $r3 = (java.lang.Number) r0;

        $r4 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($r3);

        return $r4;

     label09:
        $z3 = r0 instanceof java.lang.Boolean;

        if $z3 != 0 goto label10;

        $z4 = r0 instanceof org.codehaus.jettison.json.JSONObject;

        if $z4 != 0 goto label10;

        $z5 = r0 instanceof org.codehaus.jettison.json.JSONArray;

        if $z5 == 0 goto label11;

     label10:
        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r15;

     label11:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r1);

        return $r2;

        catch java.lang.Exception from label03 to label04 with label05;
    }

    static java.lang.String valueToString(java.lang.Object, int, int) throws org.codehaus.jettison.json.JSONException
    {
        int i0, i1;
        java.lang.String $r1, $r2, $r4, $r6, $r7, $r9, $r11, $r12;
        java.lang.Number $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.jettison.json.JSONObject $r5;
        org.codehaus.jettison.json.JSONArray $r3;
        org.codehaus.jettison.json.JSONString $r10;
        java.lang.Exception $r13;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(null);

        if $z0 == 0 goto label02;

     label01:
        return "null";

     label02:
        $z1 = r0 instanceof org.codehaus.jettison.json.JSONString;

        if $z1 == 0 goto label04;

        $r10 = (org.codehaus.jettison.json.JSONString) r0;

        $r11 = interfaceinvoke $r10.<org.codehaus.jettison.json.JSONString: java.lang.String toJSONString()>();

        $z6 = $r11 instanceof java.lang.String;

        if $z6 == 0 goto label04;

        $r12 = (java.lang.String) $r11;

     label03:
        return $r12;

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        $z2 = r0 instanceof java.lang.Number;

        if $z2 == 0 goto label07;

        $r8 = (java.lang.Number) r0;

        $r9 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($r8);

        return $r9;

     label07:
        $z3 = r0 instanceof java.lang.Boolean;

        if $z3 == 0 goto label08;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r7;

     label08:
        $z4 = r0 instanceof org.codehaus.jettison.json.JSONObject;

        if $z4 == 0 goto label09;

        $r5 = (org.codehaus.jettison.json.JSONObject) r0;

        $r6 = virtualinvoke $r5.<org.codehaus.jettison.json.JSONObject: java.lang.String toString(int,int)>(i0, i1);

        return $r6;

     label09:
        $z5 = r0 instanceof org.codehaus.jettison.json.JSONArray;

        if $z5 == 0 goto label10;

        $r3 = (org.codehaus.jettison.json.JSONArray) r0;

        $r4 = virtualinvoke $r3.<org.codehaus.jettison.json.JSONArray: java.lang.String toString(int,int)>(i0, i1);

        return $r4;

     label10:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r1);

        return $r2;

        catch java.lang.Exception from label02 to label03 with label05;
    }

    public java.io.Writer write(java.io.Writer) throws org.codehaus.jettison.json.JSONException
    {
        java.util.LinkedHashMap $r6;
        java.lang.String $r4, $r5, $r8;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r1;
        org.codehaus.jettison.json.JSONObject r0, $r10;
        org.codehaus.jettison.json.JSONArray $r9;
        java.io.IOException $r11;
        org.codehaus.jettison.json.JSONException $r12;
        java.io.Writer r2;
        java.lang.Object $r3, $r7;

        r0 := @this: org.codehaus.jettison.json.JSONObject;

        r2 := @parameter0: java.io.Writer;

     label1:
        z3 = 0;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

        virtualinvoke r2.<java.io.Writer: void write(int)>(123);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        if z3 == 0 goto label3;

        virtualinvoke r2.<java.io.Writer: void write(int)>(44);

     label3:
        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String quote(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.Writer: void write(int)>(58);

        $r6 = r0.<org.codehaus.jettison.json.JSONObject: java.util.LinkedHashMap myHashMap>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $z1 = $r7 instanceof org.codehaus.jettison.json.JSONObject;

        if $z1 == 0 goto label4;

        $r10 = (org.codehaus.jettison.json.JSONObject) $r7;

        virtualinvoke $r10.<org.codehaus.jettison.json.JSONObject: java.io.Writer write(java.io.Writer)>(r2);

        goto label6;

     label4:
        $z2 = $r7 instanceof org.codehaus.jettison.json.JSONArray;

        if $z2 == 0 goto label5;

        $r9 = (org.codehaus.jettison.json.JSONArray) $r7;

        virtualinvoke $r9.<org.codehaus.jettison.json.JSONArray: java.io.Writer write(java.io.Writer)>(r2);

        goto label6;

     label5:
        $r8 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($r7);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r8);

     label6:
        z3 = 1;

        goto label2;

     label7:
        virtualinvoke r2.<java.io.Writer: void write(int)>(125);

     label8:
        return r2;

     label9:
        $r11 := @caughtexception;

        $r12 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r12.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch java.io.IOException from label1 to label8 with label9;
    }

    static void <clinit>()
    {
        org.codehaus.jettison.json.JSONObject$Null $r0;

        $r0 = new org.codehaus.jettison.json.JSONObject$Null;

        specialinvoke $r0.<org.codehaus.jettison.json.JSONObject$Null: void <init>(org.codehaus.jettison.json.JSONObject$1)>(null);

        <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL> = $r0;

        return;
    }
}
