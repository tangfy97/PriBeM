class com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider extends com.mycila.inject.legacy.LegacyProvider
{
    private final java.lang.reflect.Constructor constructor;

    transient void <init>(java.lang.Class, com.google.inject.Key[])
    {
        com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider r0;
        java.lang.NoSuchMethodException $r5;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.reflect.Constructor $r4;
        java.lang.Class r1;
        com.google.inject.Key[] r2;
        java.lang.String $r7;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.inject.Key[];

        specialinvoke r0.<com.mycila.inject.legacy.LegacyProvider: void <init>(java.lang.Class,com.google.inject.Key[],com.mycila.inject.legacy.LegacyProvider$1)>(r1, r2, null);

     label1:
        $r3 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: java.lang.Class[] access$300(com.google.inject.Key[])>(r2);

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

        r0.<com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider: java.lang.reflect.Constructor constructor> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r5.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

     label4:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public java.lang.Object get(com.google.inject.Injector)
    {
        com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider r0;
        java.lang.Object[] $r4;
        java.lang.RuntimeException $r8;
        java.lang.reflect.Constructor $r1, $r3, $r6;
        java.lang.Exception $r7;
        com.google.inject.Injector r2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider;

        r2 := @parameter0: com.google.inject.Injector;

     label1:
        $r1 = r0.<com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider: java.lang.reflect.Constructor constructor>;

        $z0 = virtualinvoke $r1.<java.lang.reflect.Constructor: boolean isAccessible()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider: java.lang.reflect.Constructor constructor>;

        virtualinvoke $r6.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        $r3 = r0.<com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider: java.lang.reflect.Constructor constructor>;

        $r4 = virtualinvoke r0.<com.mycila.inject.legacy.LegacyProvider$ConstructorLegacyProvider: java.lang.Object[] getParameterValues(com.google.inject.Injector)>(r2);

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        $r8 = staticinvoke <com.mycila.inject.MycilaGuiceException: java.lang.RuntimeException runtime(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
