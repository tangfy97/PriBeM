public class org.codehaus.groovy.tools.RootLoader extends java.net.URLClassLoader
{
    private java.util.Map customClasses;
    static java.lang.Class class$org$codehaus$groovy$tools$RootLoader;

    private void <init>(java.lang.ClassLoader)
    {
        org.codehaus.groovy.tools.RootLoader r0;
        java.net.URL[] $r2;
        java.lang.ClassLoader r1;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = newarray (java.net.URL)[0];

        specialinvoke r0.<org.codehaus.groovy.tools.RootLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($r2, r1);

        return;
    }

    public void <init>(java.net.URL[], java.lang.ClassLoader)
    {
        java.net.URL[] r1;
        java.util.Map $r4;
        org.codehaus.groovy.tools.RootLoader r0;
        java.util.HashMap $r3;
        java.lang.Class $r5;
        java.lang.ClassLoader r2;
        java.lang.Exception $r6;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.net.URL[];

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>(r1, r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.tools.RootLoader: java.util.Map customClasses> = $r3;

     label1:
        $r4 = r0.<org.codehaus.groovy.tools.RootLoader: java.util.Map customClasses>;

        $r5 = specialinvoke r0.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>("org.w3c.dom.Node", 0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.w3c.dom.Node", $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.ClassLoader chooseParent()
    {
        java.lang.Class $r0, $r3;
        java.lang.ClassLoader $r1, $r2;

        $r0 = <org.codehaus.groovy.tools.RootLoader: java.lang.Class class$org$codehaus$groovy$tools$RootLoader>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <org.codehaus.groovy.tools.RootLoader: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.RootLoader");

        <org.codehaus.groovy.tools.RootLoader: java.lang.Class class$org$codehaus$groovy$tools$RootLoader> = $r3;

        goto label2;

     label1:
        $r3 = <org.codehaus.groovy.tools.RootLoader: java.lang.Class class$org$codehaus$groovy$tools$RootLoader>;

     label2:
        $r1 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == null goto label3;

        return $r1;

     label3:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        return $r2;
    }

    public void <init>(org.codehaus.groovy.tools.LoaderConfiguration)
    {
        java.net.URL $r5;
        java.net.URL[] $r4;
        org.codehaus.groovy.tools.LoaderConfiguration r3;
        java.lang.Thread $r2;
        org.codehaus.groovy.tools.RootLoader r0;
        int $i0, i1;
        java.lang.ClassLoader $r1;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r3 := @parameter0: org.codehaus.groovy.tools.LoaderConfiguration;

        $r1 = staticinvoke <org.codehaus.groovy.tools.RootLoader: java.lang.ClassLoader chooseParent()>();

        specialinvoke r0.<org.codehaus.groovy.tools.RootLoader: void <init>(java.lang.ClassLoader)>($r1);

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0);

        $r4 = virtualinvoke r3.<org.codehaus.groovy.tools.LoaderConfiguration: java.net.URL[] getClassPathUrls()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r5 = $r4[i1];

        virtualinvoke r0.<org.codehaus.groovy.tools.RootLoader: void addURL(java.net.URL)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.util.Map $r3;
        org.codehaus.groovy.tools.RootLoader r0;
        java.lang.Class $r2, r6;
        java.lang.Object $r4;
        java.lang.ClassNotFoundException $r5;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.tools.RootLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = r0.<org.codehaus.groovy.tools.RootLoader: java.util.Map customClasses>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Class) $r4;

        if r6 == null goto label2;

        return r6;

     label2:
        r6 = specialinvoke r0.<org.codehaus.groovy.tools.RootLoader: java.lang.Class oldFindClass(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        if r6 != null goto label6;

        r6 = specialinvoke r0.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, z0);

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r0.<org.codehaus.groovy.tools.RootLoader: void resolveClass(java.lang.Class)>(r6);

     label7:
        return r6;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.net.URL $r2, r3;
        org.codehaus.groovy.tools.RootLoader r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.tools.RootLoader: java.net.URL findResource(java.lang.String)>(r1);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = specialinvoke r0.<java.net.URLClassLoader: java.net.URL getResource(java.lang.String)>(r1);

     label1:
        return r3;
    }

    public void addURL(java.net.URL)
    {
        org.codehaus.groovy.tools.RootLoader r0;
        java.net.URL r1;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.net.URLClassLoader: void addURL(java.net.URL)>(r1);

        return;
    }

    private java.lang.Class oldFindClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.codehaus.groovy.tools.RootLoader r0;
        java.lang.Class $r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.codehaus.groovy.tools.RootLoader r2;
        java.lang.ClassNotFoundException $r0;
        java.lang.String r1;

        r2 := @this: org.codehaus.groovy.tools.RootLoader;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.ClassNotFoundException;

        specialinvoke $r0.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
