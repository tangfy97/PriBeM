class org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1 extends org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet
{
    final org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet this$0;

    transient void <init>(org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet, com.glines.socketio.server.Transport[])
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet r1;
        com.glines.socketio.server.Transport[] r2;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1 r0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1;

        r1 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet;

        r2 := @parameter1: com.glines.socketio.server.Transport[];

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet this$0> = r1;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: void <init>(com.glines.socketio.server.Transport[])>(r2);

        return;
    }

    protected com.glines.socketio.server.SocketIOInbound doSocketIOConnect(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpSession $r5;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet $r1, $r8;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        org.waveprotocol.box.server.rpc.SocketIOServerChannel $r10;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1 r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$SocketIOConnection $r7;
        org.waveprotocol.box.server.authentication.SessionManager $r3;
        javax.servlet.http.HttpServletRequest r4;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r2, $r9;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1;

        r4 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet this$0>;

        $r2 = $r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r3 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager access$200(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r2);

        $r5 = interfaceinvoke r4.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r6 = interfaceinvoke $r3.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r5);

        $r7 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$SocketIOConnection;

        $r8 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet$1: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet this$0>;

        $r9 = $r8.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveSocketIOServlet: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        specialinvoke $r7.<org.waveprotocol.box.server.rpc.ServerRpcProvider$SocketIOConnection: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r6, $r9);

        $r10 = virtualinvoke $r7.<org.waveprotocol.box.server.rpc.ServerRpcProvider$SocketIOConnection: org.waveprotocol.box.server.rpc.SocketIOServerChannel getWebSocketServerChannel()>();

        return $r10;
    }
}
