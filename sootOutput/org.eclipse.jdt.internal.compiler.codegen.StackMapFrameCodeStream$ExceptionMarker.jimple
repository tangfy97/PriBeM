public class org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker extends java.lang.Object implements java.lang.Comparable
{
    public char[] constantPoolName;
    public int pc;

    public void <init>(int, char[])
    {
        int i0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker r0;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc> = i0;

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: char[] constantPoolName> = r1;

        return;
    }

    public int compareTo(java.lang.Object)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        if $z0 == 0 goto label1;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        $r2 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker) r0;

        $i0 = $r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        $i2 = $i1 - $i0;

        return $i2;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker r1, r2;
        int $i0, $i1;
        char[] $r3, $r4;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        if $z0 == 0 goto label2;

        r1 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker) r0;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        if $i1 != $i0 goto label1;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: char[] constantPoolName>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: char[] constantPoolName>;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r4, $r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker r0;
        int $i0, $i1, $i2;
        char[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: char[] constantPoolName>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker r2;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r6;
        int $i0;
        char[] $r5;
        java.lang.String $r7;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $i0 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: int pc>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r5 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: char[] constantPoolName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        return $r7;
    }
}
