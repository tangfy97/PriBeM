public final class org.joda.time.field.SkipDateTimeField extends org.joda.time.field.DelegatedDateTimeField
{
    private static final long serialVersionUID;
    private final org.joda.time.Chronology iChronology;
    private final int iSkip;
    private transient int iMinValue;

    public void <init>(org.joda.time.Chronology, org.joda.time.DateTimeField)
    {
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeField r2;
        org.joda.time.field.SkipDateTimeField r0;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: org.joda.time.DateTimeField;

        specialinvoke r0.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>(r1, r2, 0);

        return;
    }

    public void <init>(org.joda.time.Chronology, org.joda.time.DateTimeField, int)
    {
        org.joda.time.field.SkipDateTimeField r0;
        org.joda.time.Chronology r2;
        int $i0, i1, $i2, $i3;
        org.joda.time.DateTimeField r1;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        r2 := @parameter0: org.joda.time.Chronology;

        r1 := @parameter1: org.joda.time.DateTimeField;

        i1 := @parameter2: int;

        specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>(r1);

        r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.Chronology iChronology> = r2;

        $i0 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>();

        if $i0 >= i1 goto label1;

        $i3 = $i0 - 1;

        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i3;

        goto label3;

     label1:
        if $i0 != i1 goto label2;

        $i2 = i1 + 1;

        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i2;

        goto label3;

     label2:
        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i0;

     label3:
        r0.<org.joda.time.field.SkipDateTimeField: int iSkip> = i1;

        return;
    }

    public int get(long)
    {
        org.joda.time.field.SkipDateTimeField r0;
        int $i1, $i2, i3, $i5;
        long l0;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        l0 := @parameter0: long;

        $i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0);

        i3 = $i1;

        $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if $i1 > $i2 goto label1;

        $i5 = (int) -1;

        i3 = $i1 + $i5;

     label1:
        return i3;
    }

    public long set(long, int)
    {
        org.joda.time.field.SkipDateTimeField r0;
        long l3, $l4;
        org.joda.time.IllegalFieldValueException $r1;
        java.lang.Integer $r3;
        int $i0, $i1, $i2, $i5, i6;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        l3 := @parameter0: long;

        i6 := @parameter1: int;

        $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>;

        $i1 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i6, $i0, $i1);

        $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if i6 > $i2 goto label2;

        $i5 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if i6 != $i5 goto label1;

        $r1 = new org.joda.time.IllegalFieldValueException;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i6);

        specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, null, null);

        throw $r1;

     label1:
        i6 = i6 + 1;

     label2:
        $l4 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l3, i6);

        return $l4;
    }

    public int getMinimumValue()
    {
        int $i0;
        org.joda.time.field.SkipDateTimeField r0;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>;

        return $i0;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.field.SkipDateTimeField r0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $r1 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r2 = r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.Chronology iChronology>;

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.joda.time.field.SkipDateTimeField: long serialVersionUID> = -8869148464118507846L;

        return;
    }
}
