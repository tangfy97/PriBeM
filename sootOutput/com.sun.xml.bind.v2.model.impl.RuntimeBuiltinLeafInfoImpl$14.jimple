final class com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 extends com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl
{

    transient void <init>(java.lang.Class, javax.xml.namespace.QName[])
    {
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r0;
        javax.xml.namespace.QName[] r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javax.xml.namespace.QName[];

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl: void <init>(java.lang.Class,javax.xml.namespace.QName[])>(r1, r2);

        return;
    }

    public byte[] parse(java.lang.CharSequence)
    {
        byte[] $r1;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r2;
        java.lang.CharSequence r0;

        r2 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl: byte[] access$100(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(byte[])
    {
        byte[] r3;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r0;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r4;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r1;
        java.lang.String $r2;

        r4 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r3 := @parameter0: byte[];

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

        $r1 = new com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        specialinvoke $r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void <init>()>();

        $r2 = virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: java.lang.String getXMIMEContentType()>();

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void set(byte[],java.lang.String)>(r3, $r2);

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.runtime.output.Pcdata print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r1 := @parameter0: java.lang.Object;

        $r2 = (byte[]) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(byte[])>($r2);

        return $r3;
    }

    public volatile java.lang.Object parse(java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r0;
        java.lang.CharSequence r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14: byte[] parse(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14 r0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14;

        r1 := @parameter0: java.lang.Object;

        $r2 = (byte[]) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$14: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(byte[])>($r2);

        return $r3;
    }
}
