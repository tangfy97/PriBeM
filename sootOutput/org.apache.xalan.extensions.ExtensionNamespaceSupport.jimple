public class org.apache.xalan.extensions.ExtensionNamespaceSupport extends java.lang.Object
{
    java.lang.String m_namespace;
    java.lang.String m_handlerClass;
    java.lang.Class[] m_sig;
    java.lang.Object[] m_args;

    public void <init>(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3, $r4, $r6, $r7, $r9;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        int $i0, $i1, i2;
        java.lang.String r1, r2;
        java.lang.Class[] $r5, $r11;
        java.lang.Object $r8, $r10;
        java.lang.Class $r12;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = r1;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = r2;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = r3;

        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i0 = lengthof $r4;

        $r5 = newarray (java.lang.Class)[$i0];

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = $r5;

        i2 = 0;

        goto label4;

     label1:
        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r8 = $r7[i2];

        if $r8 == null goto label2;

        $r11 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        $r9 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r10 = $r9[i2];

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r11[i2] = $r12;

        goto label3;

     label2:
        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

        goto label5;

     label3:
        i2 = i2 + 1;

     label4:
        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i1 = lengthof $r6;

        if i2 < $i1 goto label1;

     label5:
        return;
    }

    public java.lang.String getNamespace()
    {
        java.lang.String $r1;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r1 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace>;

        return $r1;
    }

    public org.apache.xalan.extensions.ExtensionHandler launch() throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r7, $r9;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        javax.xml.transform.TransformerException $r8, $r13;
        org.apache.xalan.extensions.ExtensionHandler r15;
        java.lang.reflect.Constructor $r5, r14;
        java.lang.reflect.Constructor[] $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1;
        java.lang.Class[] $r3, $r6, $r11;
        java.lang.Exception $r12;
        java.lang.Class $r2;
        java.lang.Object $r10;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

     label01:
        $r1 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass>;

        $r2 = staticinvoke <org.apache.xalan.extensions.ExtensionHandler: java.lang.Class getClassForName(java.lang.String)>($r1);

        r14 = null;

        $r3 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        if $r3 == null goto label02;

        $r11 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        r14 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);

        goto label06;

     label02:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i3 = 0;

        goto label05;

     label03:
        $r5 = $r4[i3];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r6;

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i1 = lengthof $r7;

        if $i2 != $i1 goto label04;

        r14 = $r4[i3];

        goto label06;

     label04:
        i3 = i3 + 1;

     label05:
        $i0 = lengthof $r4;

        if i3 < $i0 goto label03;

     label06:
        if r14 == null goto label07;

        $r9 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r10 = virtualinvoke r14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        r15 = (org.apache.xalan.extensions.ExtensionHandler) $r10;

        goto label08;

     label07:
        $r8 = new javax.xml.transform.TransformerException;

        specialinvoke $r8.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>("ExtensionHandler constructor not found");

        throw $r8;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        $r13 = new javax.xml.transform.TransformerException;

        specialinvoke $r13.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label10:
        return r15;

        catch java.lang.Exception from label01 to label08 with label09;
    }
}
