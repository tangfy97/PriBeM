public class org.apache.commons.logging.impl.SLF4JLogFactory extends org.apache.commons.logging.LogFactory
{
    java.util.Map loggerMap;
    public static final java.lang.String LOG_PROPERTY;
    protected java.util.Hashtable attributes;
    static java.lang.Class class$org$apache$commons$logging$impl$SLF4JLogFactory;

    public void <init>()
    {
        java.util.HashMap $r2;
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap> = $r2;

        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        java.lang.Object $r3;
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String[] getAttributeNames()
    {
        java.util.Enumeration $r3;
        java.lang.String[] r4;
        org.apache.commons.logging.impl.SLF4JLogFactory r1;
        java.util.ArrayList $r0;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r7;
        java.lang.String $r6, $r8;
        java.util.Hashtable $r2;
        boolean $z0;

        r1 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (java.lang.String) $r7;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label3:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label4;

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.lang.String) $r5;

        r4[i2] = $r6;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r4;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r1;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.SLF4JLogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Throwable $r10;
        org.slf4j.Logger $r5;
        org.apache.commons.logging.impl.SLF4JLocationAwareLog $r8;
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        org.slf4j.spi.LocationAwareLogger $r9;
        java.util.Map $r1, $r3, $r7;
        java.lang.Object $r4;
        org.apache.commons.logging.Log r11;
        java.lang.String r2;
        org.apache.commons.logging.impl.SLF4JLog $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r11 = (org.apache.commons.logging.Log) $r4;

        if r11 != null goto label4;

        $r5 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(r2);

        $z0 = $r5 instanceof org.slf4j.spi.LocationAwareLogger;

        if $z0 == 0 goto label2;

        $r8 = new org.apache.commons.logging.impl.SLF4JLocationAwareLog;

        $r9 = (org.slf4j.spi.LocationAwareLogger) $r5;

        specialinvoke $r8.<org.apache.commons.logging.impl.SLF4JLocationAwareLog: void <init>(org.slf4j.spi.LocationAwareLogger)>($r9);

        r11 = $r8;

        goto label3;

     label2:
        $r6 = new org.apache.commons.logging.impl.SLF4JLog;

        specialinvoke $r6.<org.apache.commons.logging.impl.SLF4JLog: void <init>(org.slf4j.Logger)>($r5);

        r11 = $r6;

     label3:
        $r7 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11);

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r10;

     label8:
        return r11;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void release()
    {
        java.io.PrintStream $r1, $r7, $r8;
        org.apache.commons.logging.impl.SLF4JLogFactory r9;
        java.lang.StringBuffer $r0, $r2, $r4, $r5;
        java.lang.Class $r3, $r10;
        java.lang.String $r6;

        r9 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARN: The method ");

        $r3 = <org.apache.commons.logging.impl.SLF4JLogFactory: java.lang.Class class$org$apache$commons$logging$impl$SLF4JLogFactory>;

        if $r3 != null goto label1;

        $r10 = staticinvoke <org.apache.commons.logging.impl.SLF4JLogFactory: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.impl.SLF4JLogFactory");

        <org.apache.commons.logging.impl.SLF4JLogFactory: java.lang.Class class$org$apache$commons$logging$impl$SLF4JLogFactory> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.commons.logging.impl.SLF4JLogFactory: java.lang.Class class$org$apache$commons$logging$impl$SLF4JLogFactory>;

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#release() was invoked.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("WARN: Please see http://www.slf4j.org/codes.html#release for an explanation.");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void flush()>();

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.commons.logging.impl.SLF4JLogFactory r1;
        java.lang.String r2;
        java.util.Hashtable $r3, $r4;

        r1 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = r1.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = r1.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.logging.impl.SLF4JLogFactory: java.lang.String LOG_PROPERTY> = "org.apache.commons.logging.Log";

        return;
    }
}
