public class org.apache.cxf.phase.PhaseComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        org.apache.cxf.phase.PhaseComparator r0;

        r0 := @this: org.apache.cxf.phase.PhaseComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.cxf.phase.Phase, org.apache.cxf.phase.Phase)
    {
        int $i0, $i1, $i2;
        org.apache.cxf.phase.PhaseComparator r2;
        org.apache.cxf.phase.Phase r0, r1;

        r2 := @this: org.apache.cxf.phase.PhaseComparator;

        r0 := @parameter0: org.apache.cxf.phase.Phase;

        r1 := @parameter1: org.apache.cxf.phase.Phase;

        $i0 = virtualinvoke r0.<org.apache.cxf.phase.Phase: int getPriority()>();

        $i1 = virtualinvoke r1.<org.apache.cxf.phase.Phase: int getPriority()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.cxf.phase.PhaseComparator r0;
        java.lang.Object r1, r2;
        org.apache.cxf.phase.Phase $r3, $r4;

        r0 := @this: org.apache.cxf.phase.PhaseComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.cxf.phase.Phase) r1;

        $r3 = (org.apache.cxf.phase.Phase) r2;

        $i0 = virtualinvoke r0.<org.apache.cxf.phase.PhaseComparator: int compare(org.apache.cxf.phase.Phase,org.apache.cxf.phase.Phase)>($r4, $r3);

        return $i0;
    }
}
