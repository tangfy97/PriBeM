class com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap extends java.lang.Object implements com.mycila.inject.internal.guava.collect.Multimap
{
    final com.mycila.inject.internal.guava.collect.Multimap fromMultimap;
    final com.mycila.inject.internal.guava.collect.Maps$EntryTransformer transformer;
    private transient java.util.Map asMap;
    private transient java.util.Collection entries;
    private transient java.util.Collection values;

    void <init>(com.mycila.inject.internal.guava.collect.Multimap, com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        com.mycila.inject.internal.guava.collect.Multimap r1, $r3;
        java.lang.Object $r2, $r5;
        com.mycila.inject.internal.guava.collect.Maps$EntryTransformer r4, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.mycila.inject.internal.guava.collect.Multimap) $r2;

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap> = $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.collect.Maps$EntryTransformer) $r5;

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer transformer> = $r6;

        return;
    }

    java.util.Collection transform(java.lang.Object, java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$1 $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r2;
        java.util.Collection r0, $r4;
        java.lang.Object r3;

        r2 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        $r1 = new com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$1: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap,java.lang.Object)>(r2, r3);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection transform(java.util.Collection,com.mycila.inject.internal.guava.base.Function)>(r0, $r1);

        return $r4;
    }

    public java.util.Map asMap()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$2 $r5;
        java.util.Map $r1, $r2, $r4, $r6;
        com.mycila.inject.internal.guava.collect.Multimap $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap>;

        if $r1 != null goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r5 = new com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$2;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$2: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap)>(r0);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map transformEntries(java.util.Map,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>($r4, $r5);

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap> = $r6;

        return $r6;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap>;

        return $r2;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: void clear()>();

        return;
    }

    public boolean containsEntry(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection get(java.lang.Object)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $z0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multimap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection values()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public java.util.Collection entries()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries $r3;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r1, $r2;
        com.mycila.inject.internal.guava.collect.Maps$EntryTransformer $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection entries>;

        if $r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer transformer>;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>(r0, $r4);

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection entries> = $r3;

        return $r3;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection entries>;

        return $r2;
    }

    public java.util.Collection get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r3, $r4;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimap $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection get(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection transform(java.lang.Object,java.util.Collection)>(r1, $r3);

        return $r4;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Set keySet()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.Multiset keys()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        com.mycila.inject.internal.guava.collect.Multiset $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: com.mycila.inject.internal.guava.collect.Multiset keys()>();

        return $r2;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r1;
        java.lang.Object r2, r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(com.mycila.inject.internal.guava.collect.Multimap)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimap r2;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection get(java.lang.Object)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r3);

        return $z0;
    }

    public java.util.Collection removeAll(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Collection $r3, $r4;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimap $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection transform(java.lang.Object,java.util.Collection)>(r1, $r3);

        return $r4;
    }

    public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $i0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$3 $r5;
        java.util.Collection $r1, $r2, $r4, $r6;
        com.mycila.inject.internal.guava.collect.Multimap $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection values>;

        if $r1 != null goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: com.mycila.inject.internal.guava.collect.Multimap fromMultimap>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection entries()>();

        $r5 = new com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$3;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap$3: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap)>(r0);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection transform(java.util.Collection,com.mycila.inject.internal.guava.base.Function)>($r4, $r5);

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection values> = $r6;

        return $r6;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection values>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r2;
        java.util.Map $r3, $r4;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.Multimap r1;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multimap;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Multimap) r0;

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap()>();

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap r0;
        java.lang.String $r2;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$TransformedEntriesMultimap: java.util.Map asMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
