public class org.wiztools.commons.MultiValueMapLinkedHashSet extends java.lang.Object implements org.wiztools.commons.MultiValueMap
{
    private java.util.Map map;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map> = $r1;

        return;
    }

    public java.util.Collection put(java.lang.Object, java.lang.Object)
    {
        java.util.Collection $r7;
        java.util.Set r9;
        java.util.Map $r2, $r5;
        java.lang.Object r1, $r3, r4, $r6;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        java.util.LinkedHashSet $r8;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (java.util.Set) $r3;

        if r9 != null goto label1;

        $r8 = new java.util.LinkedHashSet;

        specialinvoke $r8.<java.util.LinkedHashSet: void <init>()>();

        r9 = $r8;

     label1:
        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $r5 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

        $r7 = (java.util.Collection) $r6;

        return $r7;
    }

    public java.util.Collection get(java.lang.Object)
    {
        java.util.Map $r2;
        java.util.Collection $r4;
        java.lang.Object r1, $r3;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.Collection) $r3;

        return $r4;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        java.util.Map $r1;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        java.util.Map $r1;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $i0 = virtualinvoke r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        boolean $z0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Set $r2, r7;
        java.util.Map $r1, $r5;
        java.lang.Object $r4, $r6, r8;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        boolean $z0, $z1;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r8 := @parameter0: java.lang.Object;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r7 = (java.util.Set) $r6;

        $z1 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.Collection remove(java.lang.Object)
    {
        java.util.Map $r2;
        java.util.Collection $r4;
        java.lang.Object r1, $r3;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.util.Collection) $r3;

        return $r4;
    }

    public void clear()
    {
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        java.util.Map $r1;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.util.Collection values()
    {
        java.util.Iterator $r4;
        java.util.Set $r3, r8;
        java.util.ArrayList $r0;
        java.util.Map $r2, $r6;
        java.lang.Object $r5, $r7;
        org.wiztools.commons.MultiValueMapLinkedHashSet r1;
        boolean $z0;

        r1 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r1.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.util.Set) $r7;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r8);

        goto label1;

     label2:
        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.wiztools.commons.MultiValueMapLinkedHashSet r2;
        boolean $z0, $z1, $z2;
        java.util.Collection $r5, $r6, $r7, $r8, $r9;
        java.util.Set $r3, $r4, $r10, $r11, $r12;
        java.lang.Object r0;
        org.wiztools.commons.MultiValueMap r1;

        r2 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.wiztools.commons.MultiValueMap;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r1 = (org.wiztools.commons.MultiValueMap) r0;

        $r3 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Set keySet()>();

        $r4 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        if $r3 == $r4 goto label4;

        $r10 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Set keySet()>();

        if $r10 == null goto label3;

        $r11 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Set keySet()>();

        $r12 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $z2 = interfaceinvoke $r11.<java.util.Set: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r5 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Collection values()>();

        $r6 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Collection values()>();

        if $r5 == $r6 goto label6;

        $r7 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Collection values()>();

        if $r7 == null goto label5;

        $r8 = virtualinvoke r2.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Collection values()>();

        $r9 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Collection values()>();

        $z1 = interfaceinvoke $r8.<java.util.Collection: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label6;

     label5:
        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        java.util.Map $r1, $r2;
        int $i0, $i1;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        if $r1 == null goto label1;

        $r2 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i0 = 355 + $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.wiztools.commons.MultiValueMapLinkedHashSet r0;
        java.util.Map $r1;

        r0 := @this: org.wiztools.commons.MultiValueMapLinkedHashSet;

        $r1 = r0.<org.wiztools.commons.MultiValueMapLinkedHashSet: java.util.Map map>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
