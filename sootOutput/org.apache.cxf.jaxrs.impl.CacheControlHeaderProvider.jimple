public class org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider extends java.lang.Object implements javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate
{
    public static final java.lang.String CACHE_CONTROL_SEPARATOR_PROPERTY;
    private static final java.lang.String DEFAULT_SEPARATOR;
    private static final java.lang.String COMPLEX_HEADER_EXPRESSION;
    private static final java.util.regex.Pattern COMPLEX_HEADER_PATTERN;
    private static final java.lang.String PUBLIC;
    private static final java.lang.String PRIVATE;
    private static final java.lang.String NO_CACHE;
    private static final java.lang.String NO_STORE;
    private static final java.lang.String NO_TRANSFORM;
    private static final java.lang.String MUST_REVALIDATE;
    private static final java.lang.String PROXY_REVALIDATE;
    private static final java.lang.String MAX_AGE;
    private static final java.lang.String SMAX_AGE;

    public void <init>()
    {
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public javax.ws.rs.core.CacheControl fromString(java.lang.String)
    {
        java.util.Map $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11, z12, z13, z14;
        java.util.List $r7, $r8;
        javax.ws.rs.core.CacheControl $r22;
        java.lang.String[] $r5, $r12;
        java.util.HashMap $r21;
        java.util.ArrayList $r19, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i10, $i12;
        java.lang.String r4, r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r3;

        r3 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r4 := @parameter0: java.lang.String;

        z9 = 0;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        z10 = 0;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        z11 = 0;

        z12 = 0;

        z13 = 0;

        z14 = 0;

        $i10 = (int) -1;

        i6 = $i10;

        $i12 = (int) -1;

        i7 = $i12;

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        $r5 = specialinvoke r3.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String[] getTokens(java.lang.String)>(r4);

        i0 = lengthof $r5;

        i8 = 0;

     label01:
        if i8 >= i0 goto label14;

        r10 = $r5[i8];

        $r11 = virtualinvoke r10.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("max-age");

        if $z0 == 0 goto label02;

        $r16 = "max-age";

        $i4 = virtualinvoke $r16.<java.lang.String: int length()>();

        $i5 = $i4 + 1;

        $r17 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>($i5);

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        goto label13;

     label02:
        $z1 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("s-maxage");

        if $z1 == 0 goto label03;

        $r14 = "s-maxage";

        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i3 = $i2 + 1;

        $r15 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>($i3);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        goto label13;

     label03:
        $z2 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("public");

        if $z2 == 0 goto label04;

        goto label13;

     label04:
        $z3 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("no-store");

        if $z3 == 0 goto label05;

        z11 = 1;

        goto label13;

     label05:
        $z4 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("no-transform");

        if $z4 == 0 goto label06;

        z12 = 1;

        goto label13;

     label06:
        $z5 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("must-revalidate");

        if $z5 == 0 goto label07;

        z13 = 1;

        goto label13;

     label07:
        $z6 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("proxy-revalidate");

        if $z6 == 0 goto label08;

        z14 = 1;

        goto label13;

     label08:
        $z7 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("private");

        if $z7 == 0 goto label09;

        z9 = 1;

        staticinvoke <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: void addFields(java.util.List,java.lang.String)>($r19, $r11);

        goto label13;

     label09:
        $z8 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("no-cache");

        if $z8 == 0 goto label10;

        z10 = 1;

        staticinvoke <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: void addFields(java.util.List,java.lang.String)>($r20, $r11);

        goto label13;

     label10:
        $r12 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r11, "=");

        $i1 = lengthof $r12;

        if $i1 != 2 goto label11;

        $r18 = $r12[1];

        goto label12;

     label11:
        $r18 = "";

     label12:
        $r13 = $r12[0];

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r18);

     label13:
        i8 = i8 + 1;

        goto label01;

     label14:
        $r22 = new javax.ws.rs.core.CacheControl;

        specialinvoke $r22.<javax.ws.rs.core.CacheControl: void <init>()>();

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setMaxAge(int)>(i6);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setSMaxAge(int)>(i7);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setPrivate(boolean)>(z9);

        $r7 = virtualinvoke $r22.<javax.ws.rs.core.CacheControl: java.util.List getPrivateFields()>();

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setMustRevalidate(boolean)>(z13);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setProxyRevalidate(boolean)>(z14);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setNoCache(boolean)>(z10);

        $r8 = virtualinvoke $r22.<javax.ws.rs.core.CacheControl: java.util.List getNoCacheFields()>();

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r20);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setNoStore(boolean)>(z11);

        virtualinvoke $r22.<javax.ws.rs.core.CacheControl: void setNoTransform(boolean)>(z12);

        $r9 = virtualinvoke $r22.<javax.ws.rs.core.CacheControl: java.util.Map getCacheExtension()>();

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r21);

        return $r22;
    }

    private java.lang.String[] getTokens(java.lang.String)
    {
        java.lang.Object[] $r8;
        java.lang.String[] $r3, $r7, $r9;
        java.util.ArrayList $r4;
        java.util.regex.Matcher $r6;
        int $i0, $i1;
        java.lang.String r0, $r2, $r10, $r11;
        boolean $z0, $z1;
        java.util.regex.Pattern $r5;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r1;

        r1 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"");

        if $z0 == 0 goto label4;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(4);

        $r5 = <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.util.regex.Pattern COMPLEX_HEADER_PATTERN>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

     label1:
        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r11);

     label2:
        goto label1;

     label3:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r7 = newarray (java.lang.String)[$i0];

        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        return $r9;

     label4:
        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String getSeparator()>();

        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, $r2);

        return $r3;
    }

    public java.lang.String toString(javax.ws.rs.core.CacheControl)
    {
        java.util.Map $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r5;
        java.util.List $r26, $r27;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r29;
        javax.ws.rs.core.CacheControl r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12;
        java.lang.String $r1, $r7, $r11, r13, $r28;
        java.util.Map$Entry r9;
        java.util.Iterator $r6;
        java.lang.Object $r8, $r10, $r12;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r3 := @parameter0: javax.ws.rs.core.CacheControl;

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String getSeparator()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isPrivate()>();

        if $z0 == 0 goto label01;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("private");

        $r27 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: java.util.List getPrivateFields()>();

        staticinvoke <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: void handleFields(java.util.List,java.lang.StringBuilder)>($r27, $r29);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label01:
        $z1 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isNoCache()>();

        if $z1 == 0 goto label02;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-cache");

        $r26 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: java.util.List getNoCacheFields()>();

        staticinvoke <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: void handleFields(java.util.List,java.lang.StringBuilder)>($r26, $r29);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label02:
        $z2 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isNoStore()>();

        if $z2 == 0 goto label03;

        $r25 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-store");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label03:
        $z3 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isNoTransform()>();

        if $z3 == 0 goto label04;

        $r24 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-transform");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label04:
        $z4 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isMustRevalidate()>();

        if $z4 == 0 goto label05;

        $r23 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must-revalidate");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label05:
        $z5 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: boolean isProxyRevalidate()>();

        if $z5 == 0 goto label06;

        $r22 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("proxy-revalidate");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label06:
        $i0 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: int getMaxAge()>();

        $i8 = (int) -1;

        if $i0 == $i8 goto label07;

        $r19 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max-age");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i6 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: int getMaxAge()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label07:
        $i1 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: int getSMaxAge()>();

        $i10 = (int) -1;

        if $i1 == $i10 goto label08;

        $r16 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s-maxage");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i5 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: int getSMaxAge()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label08:
        $r4 = virtualinvoke r3.<javax.ws.rs.core.CacheControl: java.util.Map getCacheExtension()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label12;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r12;

        if r13 == null goto label11;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i4 = virtualinvoke r13.<java.lang.String: int indexOf(int)>(32);

        $i12 = (int) -1;

        if $i4 == $i12 goto label10;

        $r14 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        goto label11;

     label10:
        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

     label11:
        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label09;

     label12:
        $r7 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $z6 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>($r1);

        if $z6 == 0 goto label13;

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r28 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        goto label14;

     label13:
        $r28 = $r7;

     label14:
        return $r28;
    }

    private static void addFields(java.util.List, java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i12;
        java.lang.String r0, r2, $r4, $r5, $r6;
        boolean $z0, $z1;
        java.util.List r3;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(61);

        $i12 = (int) -1;

        if $i0 == $i12 goto label8;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 + 1;

        if $i0 != $i2 goto label1;

        $r5 = "";

        goto label2;

     label1:
        $i3 = $i0 + 1;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label2:
        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 < 2 goto label3;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z1 != 0 goto label4;

     label3:
        return;

     label4:
        $i5 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i5 != 2 goto label5;

        $r6 = "";

        goto label6;

     label5:
        $i6 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(1, $i7);

     label6:
        $i8 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i8 <= 0 goto label8;

        $r1 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r6, ",");

        i9 = lengthof $r1;

        i10 = 0;

     label7:
        if i10 >= i9 goto label8;

        r2 = $r1[i10];

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i10 = i10 + 1;

        goto label7;

     label8:
        return;
    }

    private static void handleFields(java.util.List, java.lang.StringBuilder)
    {
        java.util.Iterator $r2;
        java.util.List r0;
        java.lang.StringBuilder r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.StringBuilder;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return;
    }

    protected java.lang.String getSeparator()
    {
        org.apache.cxf.message.Message $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r3 = ",";

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: org.apache.cxf.message.Message getCurrentMessage()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.http.cache-control.separator");

        if $r2 == null goto label1;

        r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label1:
        return r3;
    }

    protected org.apache.cxf.message.Message getCurrentMessage()
    {
        org.apache.cxf.message.Message $r0;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r1;

        r1 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        $r0 = staticinvoke <org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message getCurrentMessage()>();

        return $r0;
    }

    public volatile java.lang.String toString(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r1;
        java.lang.String $r3;
        javax.ws.rs.core.CacheControl $r2;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.ws.rs.core.CacheControl) r1;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String toString(javax.ws.rs.core.CacheControl)>($r2);

        return $r3;
    }

    public volatile java.lang.Object fromString(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        javax.ws.rs.core.CacheControl $r2;
        org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: javax.ws.rs.core.CacheControl fromString(java.lang.String)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String SMAX_AGE> = "s-maxage";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String MAX_AGE> = "max-age";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String PROXY_REVALIDATE> = "proxy-revalidate";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String MUST_REVALIDATE> = "must-revalidate";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String NO_TRANSFORM> = "no-transform";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String NO_STORE> = "no-store";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String NO_CACHE> = "no-cache";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String PRIVATE> = "private";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String PUBLIC> = "public";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String COMPLEX_HEADER_EXPRESSION> = "(([\\w-]+=\"[^\"]*\")|([\\w-]+=[\\w]+)|([\\w-]+))";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String DEFAULT_SEPARATOR> = ",";

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.lang.String CACHE_CONTROL_SEPARATOR_PROPERTY> = "org.apache.cxf.http.cache-control.separator";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(([\\w-]+=\"[^\"]*\")|([\\w-]+=[\\w]+)|([\\w-]+))");

        <org.apache.cxf.jaxrs.impl.CacheControlHeaderProvider: java.util.regex.Pattern COMPLEX_HEADER_PATTERN> = $r0;

        return;
    }
}
