public class org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.util.AnnotationRegistry registry;
    private final org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caret;
    private final org.waveprotocol.wave.model.document.MutableDocument doc;
    org.waveprotocol.wave.model.util.StringMap leftSide;
    org.waveprotocol.wave.model.util.StringMap rightSide;

    public void <init>(org.waveprotocol.wave.model.document.util.AnnotationRegistry, org.waveprotocol.wave.model.document.MutableDocument, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r5;
        org.waveprotocol.wave.model.util.StringMap $r1, $r2;
        org.waveprotocol.wave.model.document.MutableDocument r4;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry r3;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.AnnotationRegistry;

        r4 := @parameter1: org.waveprotocol.wave.model.document.MutableDocument;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap rightSide> = $r2;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry registry> = r3;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc> = r4;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caret> = r5;

        return;
    }

    public org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection rebias(int, int, org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)
    {
        java.lang.Double $r3, $r11;
        org.waveprotocol.wave.model.util.Box $r4, $r8;
        org.waveprotocol.wave.model.util.StringMap $r14;
        int i0, i1, $i2;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$1 $r12;
        org.waveprotocol.wave.model.document.util.Point $r6;
        boolean $z0;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1, $r2, $r5;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection r13;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r7, $r9, $r16, $r17, $r18;
        java.lang.Object $r10, $r15;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r13 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call out of init/reset cycle.");

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        if i0 == i1 goto label3;

        $r18 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        return $r18;

     label3:
        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.Box: org.waveprotocol.wave.model.util.Box create(java.lang.Object)>($r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r7 = specialinvoke r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection biasFromContainers(org.waveprotocol.wave.model.document.util.Point)>($r6);

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.Box: org.waveprotocol.wave.model.util.Box create(java.lang.Object)>($r7);

        $r10 = $r8.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed>;

        $r9 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection NEITHER>;

        if $r10 != $r9 goto label4;

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection toBiasDirection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>(r13);

        $r8.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed> = $r17;

        goto label5;

     label4:
        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(5.0);

        $r4.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed> = $r11;

     label5:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void buildBoundaryMaps(int)>(i0);

        $r14 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide>;

        $r12 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$1;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$1: void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.util.Box,org.waveprotocol.wave.model.util.Box,org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>(r0, $r4, $r8, r13);

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r12);

        $r15 = $r8.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed>;

        $r16 = (org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection) $r15;

        return $r16;
    }

    public void supplementAnnotations(int, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1, $r2;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r4;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r5;
        int i0;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2 $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        i0 := @parameter0: int;

        r4 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r5 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call out of init/reset cycle.");

        specialinvoke r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void buildBoundaryMaps(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r6 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide>;

        $r3 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,int)>(r0, r4, r5, i0);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r3);

        return;
    }

    private void buildBoundaryMaps(int)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.util.StringSet $r5;
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.MutableDocument $r6, $r9, $r11;
        int i0, $i1, $i2;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$3 $r10;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5 $r7;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4 $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap rightSide>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        if i0 <= 0 goto label1;

        $r11 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $i2 = i0 - 1;

        $r10 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$3;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$3: void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringSet)>(r0, $r3, $r5);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.document.MutableDocument: void forEachAnnotationAt(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($i2, $r10);

     label1:
        $r6 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $i1 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        if i0 >= $i1 goto label2;

        $r9 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r8 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringSet)>(r0, $r4, $r5);

        interfaceinvoke $r9.<org.waveprotocol.wave.model.document.MutableDocument: void forEachAnnotationAt(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(i0, $r8);

     label2:
        $r7 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r0, $r3, $r4);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r7);

        return;
    }

    private org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection biasFromContainers(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.MutableDocument $r2, $r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isAtLineStart(org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.util.Point)>($r2, r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isAtLineEnd(org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.util.Point)>($r3, r1);

        if $z0 == 0 goto label1;

        if $z1 == 0 goto label1;

        $r7 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection NEITHER>;

        return $r7;

     label1:
        if $z0 == 0 goto label2;

        $r6 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        return $r6;

     label2:
        if $z1 == 0 goto label3;

        $r5 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        return $r5;

     label3:
        $r4 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection NEITHER>;

        return $r4;
    }

    private boolean shouldInheritFromRight(org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection, org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r6;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r2, $r3, $r4, $r5;
        int[] $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection r0;

        r6 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r2 := @parameter0: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r0 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection;

        $r1 = <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$6: int[] $SwitchMap$org$waveprotocol$wave$model$document$AnnotationBehaviour$InheritDirection>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        $r5 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        if r2 != $r5 goto label4;

        return 1;

     label2:
        $r3 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        if r2 == $r3 goto label3;

        $r4 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection NEITHER>;

        if r2 != $r4 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    static org.waveprotocol.wave.model.document.util.AnnotationRegistry access$000(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry registry>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$100(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caret>;

        return $r1;
    }

    static boolean access$200(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection, org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r1;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r1 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r2 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: boolean shouldInheritFromRight(org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection)>(r1, r2);

        return $z0;
    }

    static org.waveprotocol.wave.model.document.MutableDocument access$300(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument doc>;

        return $r1;
    }
}
