public class org.apache.pdfbox.pdfparser.PDFXRefStream extends java.lang.Object implements org.apache.pdfbox.pdfparser.PDFXRef
{
    private static final int ENTRY_OBJSTREAM;
    private static final int ENTRY_NORMAL;
    private static final int ENTRY_FREE;
    private java.util.Map streamData;
    private java.util.Set objectNumbers;
    private org.apache.pdfbox.cos.COSStream stream;
    private long size;

    public void <init>()
    {
        org.apache.pdfbox.cos.COSDictionary $r2;
        org.apache.pdfbox.io.RandomAccessBuffer $r3;
        java.util.TreeMap $r4;
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        org.apache.pdfbox.cos.COSStream $r1;
        java.util.TreeSet $r5;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: long size> = -1L;

        $r1 = new org.apache.pdfbox.cos.COSStream;

        $r2 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        $r3 = new org.apache.pdfbox.io.RandomAccessBuffer;

        specialinvoke $r3.<org.apache.pdfbox.io.RandomAccessBuffer: void <init>()>();

        specialinvoke $r1.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.io.RandomAccess)>($r2, $r3);

        r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream> = $r1;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Map streamData> = $r4;

        $r5 = new java.util.TreeSet;

        specialinvoke $r5.<java.util.TreeSet: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Set objectNumbers> = $r5;

        return;
    }

    public org.apache.pdfbox.cos.COSStream getStream() throws java.io.IOException
    {
        java.lang.Integer r30;
        byte $b1;
        int[] $r13;
        boolean $z0, $z1;
        java.util.Set $r20;
        java.util.List $r8;
        org.apache.pdfbox.cos.COSBase $r25;
        org.apache.pdfbox.cos.COSArray $r9, $r14;
        long $l0, $l2, $l4, $l6;
        org.apache.pdfbox.cos.COSInteger $r26, $r28;
        int $i3, $i5, i7, i8;
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        org.apache.pdfbox.cos.COSStream $r3, $r4, $r7, $r12, $r16, $r17, $r19, $r22, $r24;
        org.apache.pdfbox.cos.COSName $r1, $r2, $r5, $r6, $r11, $r15, r31;
        java.io.OutputStream $r18;
        java.util.Iterator $r10, $r21;
        java.lang.IllegalArgumentException $r29;
        java.lang.Object $r23, $r27;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, $r1);

        $l0 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: long size>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size is not set in xrefstream");

        throw $r29;

     label1:
        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE>;

        $l2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: long getSizeEntry()>();

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSStream: void setLong(org.apache.pdfbox.cos.COSName,long)>($r5, $l2);

        $r7 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>;

        virtualinvoke $r7.<org.apache.pdfbox.cos.COSStream: void setFilters(org.apache.pdfbox.cos.COSBase)>($r6);

        $r8 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.List getIndexEntry()>();

        $r9 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r9.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r27 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.Integer) $r27;

        $i5 = virtualinvoke r30.<java.lang.Integer: int intValue()>();

        $l6 = (long) $i5;

        $r28 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l6);

        virtualinvoke $r9.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r28);

        goto label2;

     label3:
        $r12 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INDEX>;

        virtualinvoke $r12.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r11, $r9);

        $r13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: int[] getWEntry()>();

        $r14 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r14.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        i7 = 0;

     label4:
        $i3 = lengthof $r13;

        if i7 >= $i3 goto label5;

        i8 = $r13[i7];

        $l4 = (long) i8;

        $r26 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l4);

        virtualinvoke $r14.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r26);

        i7 = i7 + 1;

        goto label4;

     label5:
        $r16 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W>;

        virtualinvoke $r16.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r15, $r14);

        $r17 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r18 = virtualinvoke $r17.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createUnfilteredStream()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeStreamData(java.io.OutputStream,int[])>($r18, $r13);

        $r19 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r20 = virtualinvoke $r19.<org.apache.pdfbox.cos.COSStream: java.util.Set keySet()>();

        $r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r23 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.pdfbox.cos.COSName) $r23;

        $r24 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r25 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r31);

        virtualinvoke $r25.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1);

        goto label6;

     label7:
        $r22 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        return $r22;
    }

    public void addTrailerInfo(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream r8;
        org.apache.pdfbox.cos.COSStream $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.pdfbox.cos.COSName r6, $r7, $r9, $r10, $r11, $r12;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.apache.pdfbox.cos.COSDictionary r0;
        org.apache.pdfbox.cos.COSBase $r15;
        java.lang.Object $r3, $r5, $r14;

        r8 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (org.apache.pdfbox.cos.COSName) $r5;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>;

        $z1 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r6);

        if $z1 != 0 goto label2;

        $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>;

        $z2 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r6);

        if $z2 != 0 goto label2;

        $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>;

        $z3 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r6);

        if $z3 != 0 goto label2;

        $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>;

        $z4 = virtualinvoke $r11.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r6);

        if $z4 != 0 goto label2;

        $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>;

        $z5 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r6);

        if $z5 == 0 goto label3;

     label2:
        $r13 = r8.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream stream>;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (org.apache.pdfbox.cos.COSBase) $r14;

        virtualinvoke $r13.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r6, $r15);

     label3:
        goto label1;

     label4:
        return;
    }

    public void addEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference $r10;
        long $l0, $l2, $l3, $l4, $l6, $l7, $l8;
        java.lang.Integer $r4, $r9, $r14;
        java.util.Map $r7, $r13;
        int $i1, $i5, $i9;
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry r1;
        boolean $z0;
        java.util.Set $r2;
        org.apache.pdfbox.persistence.util.COSObjectKey $r3, $r6, $r8, $r11, $r12;
        org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference $r5;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        r1 := @parameter0: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry;

        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Set objectNumbers>;

        $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l0 = virtualinvoke $r3.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $i1 = (int) $l0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>();

        if $z0 == 0 goto label1;

        $r10 = new org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference;

        specialinvoke $r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: void <init>(org.apache.pdfbox.pdfparser.PDFXRefStream)>(r0);

        $r11 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l6 = virtualinvoke $r11.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextGenNumber> = $l6;

        $r12 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l7 = virtualinvoke $r12.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextFree> = $l7;

        $r13 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Map streamData>;

        $l8 = $r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextFree>;

        $i9 = (int) $l8;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r10);

        goto label2;

     label1:
        $r5 = new org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference;

        specialinvoke $r5.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: void <init>(org.apache.pdfbox.pdfparser.PDFXRefStream)>(r0);

        $r6 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l2 = virtualinvoke $r6.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r5.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long genNumber> = $l2;

        $l3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>();

        $r5.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long offset> = $l3;

        $r7 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Map streamData>;

        $r8 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l4 = virtualinvoke $r8.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $i5 = (int) $l4;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r5);

     label2:
        return;
    }

    private int[] getWEntry()
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference r7;
        byte $b2;
        int[] r10;
        java.util.Map $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r3;
        org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference r8;
        long $l1, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30;
        long[] r0;
        int $i0, $i3, $i4, i31, $i32;
        org.apache.pdfbox.pdfparser.PDFXRefStream r1;
        org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference r9;
        java.util.Iterator $r4;
        java.lang.RuntimeException $r11;
        java.lang.Object $r5;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        r0 = newarray (long)[3];

        $r2 = r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Map streamData>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference;

        if $z1 == 0 goto label02;

        r7 = (org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference) $r5;

        $l23 = r0[0];

        $l24 = staticinvoke <java.lang.Math: long max(long,long)>($l23, 0L);

        r0[0] = $l24;

        $l26 = r0[1];

        $l25 = r7.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextFree>;

        $l27 = staticinvoke <java.lang.Math: long max(long,long)>($l26, $l25);

        r0[1] = $l27;

        $l29 = r0[2];

        $l28 = r7.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextGenNumber>;

        $l30 = staticinvoke <java.lang.Math: long max(long,long)>($l29, $l28);

        r0[2] = $l30;

        goto label05;

     label02:
        $z2 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference;

        if $z2 == 0 goto label03;

        r8 = (org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference) $r5;

        $l15 = r0[0];

        $l16 = staticinvoke <java.lang.Math: long max(long,long)>($l15, 1L);

        r0[0] = $l16;

        $l18 = r0[1];

        $l17 = r8.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long offset>;

        $l19 = staticinvoke <java.lang.Math: long max(long,long)>($l18, $l17);

        r0[1] = $l19;

        $l21 = r0[2];

        $l20 = r8.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long genNumber>;

        $l22 = staticinvoke <java.lang.Math: long max(long,long)>($l21, $l20);

        r0[2] = $l22;

        goto label05;

     label03:
        $z3 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference;

        if $z3 == 0 goto label04;

        r9 = (org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference) $r5;

        $l7 = r0[0];

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>($l7, 2L);

        r0[0] = $l8;

        $l10 = r0[1];

        $l9 = r9.<org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference: long offset>;

        $l11 = staticinvoke <java.lang.Math: long max(long,long)>($l10, $l9);

        r0[1] = $l11;

        $l13 = r0[2];

        $l12 = r9.<org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference: long objectNumberOfObjectStream>;

        $l14 = staticinvoke <java.lang.Math: long max(long,long)>($l13, $l12);

        r0[2] = $l14;

        goto label05;

     label04:
        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected reference type");

        throw $r11;

     label05:
        goto label01;

     label06:
        r10 = newarray (int)[3];

        i31 = 0;

     label07:
        $i0 = lengthof r10;

        if i31 >= $i0 goto label10;

     label08:
        $l1 = r0[i31];

        $b2 = $l1 cmp 0L;

        $i32 = (int) $b2;

        if $i32 <= 0 goto label09;

        $i3 = r10[i31];

        $i4 = $i3 + 1;

        r10[i31] = $i4;

        $l5 = r0[i31];

        $l6 = $l5 >> 8;

        r0[i31] = $l6;

        goto label08;

     label09:
        i31 = i31 + 1;

        goto label07;

     label10:
        return r10;
    }

    private long getSizeEntry()
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        long $l0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        $l0 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: long size>;

        return $l0;
    }

    public void setSize(long)
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        long l0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        l0 := @parameter0: long;

        r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: long size> = l0;

        return;
    }

    private java.util.List getIndexEntry()
    {
        java.lang.Integer r5, r6, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.pdfbox.pdfparser.PDFXRefStream r1;
        java.util.LinkedList $r0;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        r6 = null;

        r7 = null;

        $r2 = r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Set objectNumbers>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r4;

        if r6 != null goto label2;

        r6 = r5;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

     label2:
        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i2 != $i3 goto label3;

        $i8 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i9 = $i8 + 1;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

     label3:
        $i4 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i5 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i6 = $i4 + $i5;

        $i7 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i6 >= $i7 goto label4;

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r7);

        r6 = r5;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

     label4:
        goto label1;

     label5:
        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r7);

        return $r0;
    }

    private void writeNumber(java.io.OutputStream, long, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r0;
        long $l4, l7;
        byte $b3, $b6;
        int i0, $i1, $i2, $i5, i8, i9, $i10;
        org.apache.pdfbox.pdfparser.PDFXRefStream r2;

        r2 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        r1 := @parameter0: java.io.OutputStream;

        l7 := @parameter1: long;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        i8 = 0;

     label1:
        if i8 >= i0 goto label2;

        $l4 = l7 & 255L;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        r0[i8] = $b6;

        l7 = l7 >> 8;

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 0;

     label3:
        if i9 >= i0 goto label4;

        $i1 = i0 - i9;

        $i2 = $i1 - 1;

        $b3 = r0[$i2];

        $i10 = (int) $b3;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i10);

        i9 = i9 + 1;

        goto label3;

     label4:
        return;
    }

    private void writeStreamData(java.io.OutputStream, int[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference r8;
        long $l2, $l4, $l7, $l9, $l12, $l14;
        int[] r7;
        java.util.Map $r1;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i10, $i11, $i13;
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;
        org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference r10;
        boolean $z0, $z1, $z2, $z3;
        java.io.OutputStream r4;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.RuntimeException $r6;
        org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference r9;
        java.lang.Object $r5;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        r4 := @parameter0: java.io.OutputStream;

        r7 := @parameter1: int[];

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: java.util.Map streamData>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference;

        if $z1 == 0 goto label2;

        r8 = (org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference) $r5;

        $i10 = r7[0];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, 0L, $i10);

        $l12 = r8.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextFree>;

        $i11 = r7[1];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l12, $i11);

        $l14 = r8.<org.apache.pdfbox.pdfparser.PDFXRefStream$FreeReference: long nextGenNumber>;

        $i13 = r7[2];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l14, $i13);

        goto label5;

     label2:
        $z2 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference;

        if $z2 == 0 goto label3;

        r9 = (org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference) $r5;

        $i5 = r7[0];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, 1L, $i5);

        $l7 = r9.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long offset>;

        $i6 = r7[1];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l7, $i6);

        $l9 = r9.<org.apache.pdfbox.pdfparser.PDFXRefStream$NormalReference: long genNumber>;

        $i8 = r7[2];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l9, $i8);

        goto label5;

     label3:
        $z3 = $r5 instanceof org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference;

        if $z3 == 0 goto label4;

        r10 = (org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference) $r5;

        $i0 = r7[0];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, 2L, $i0);

        $l2 = r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference: long offset>;

        $i1 = r7[1];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l2, $i1);

        $l4 = r10.<org.apache.pdfbox.pdfparser.PDFXRefStream$ObjectStreamReference: long objectNumberOfObjectStream>;

        $i3 = r7[2];

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFXRefStream: void writeNumber(java.io.OutputStream,long,int)>(r4, $l4, $i3);

        goto label5;

     label4:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected reference type");

        throw $r6;

     label5:
        goto label1;

     label6:
        virtualinvoke r4.<java.io.OutputStream: void flush()>();

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        return;
    }

    public org.apache.pdfbox.cos.COSObject getObject(int)
    {
        int i0;
        org.apache.pdfbox.pdfparser.PDFXRefStream r0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFXRefStream;

        i0 := @parameter0: int;

        return null;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.pdfparser.PDFXRefStream: int ENTRY_FREE> = 0;

        <org.apache.pdfbox.pdfparser.PDFXRefStream: int ENTRY_NORMAL> = 1;

        <org.apache.pdfbox.pdfparser.PDFXRefStream: int ENTRY_OBJSTREAM> = 2;

        return;
    }
}
