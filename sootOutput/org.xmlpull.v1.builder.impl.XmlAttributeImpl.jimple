public class org.xmlpull.v1.builder.impl.XmlAttributeImpl extends java.lang.Object implements org.xmlpull.v1.builder.XmlAttribute
{
    private org.xmlpull.v1.builder.XmlElement owner_;
    private java.lang.String prefix_;
    private org.xmlpull.v1.builder.XmlNamespace namespace_;
    private java.lang.String name_;
    private java.lang.String value_;
    private java.lang.String type_;
    private boolean default_;

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.xmlpull.v1.builder.XmlNamespace $r4;
        java.lang.Object $r1;
        java.lang.String $r3, $r5, $r6;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0, r2;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.xmlpull.v1.builder.impl.XmlAttributeImpl) $r1;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlElement owner_> = null;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String prefix_>;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String prefix_> = $r3;

        $r4 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_>;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_> = $r4;

        $r5 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String name_>;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String name_> = $r5;

        $r6 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String value_>;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String value_> = $r6;

        $z0 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: boolean default_>;

        r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: boolean default_> = $z0;

        return r2;
    }

    void <init>(org.xmlpull.v1.builder.XmlElement, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        java.lang.String r2, r3;
        java.lang.IllegalArgumentException $r4;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String type_> = "CDATA";

        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlElement owner_> = r1;

        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String name_> = r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attribute value can not be null");

        throw $r4;

     label1:
        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String value_> = r3;

        return;
    }

    void <init>(org.xmlpull.v1.builder.XmlElement, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.XmlNamespace r4;
        java.lang.String r2, r3;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r4 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: void <init>(org.xmlpull.v1.builder.XmlElement,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_> = r4;

        return;
    }

    void <init>(org.xmlpull.v1.builder.XmlElement, java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.String r3, r4, r5;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: void <init>(org.xmlpull.v1.builder.XmlElement,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String type_> = r5;

        return;
    }

    void <init>(org.xmlpull.v1.builder.XmlElement, java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.IllegalArgumentException $r6;
        org.xmlpull.v1.builder.XmlElement r1;
        java.lang.String r3, r4, r5;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;
        boolean z0, $z1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: void <init>(org.xmlpull.v1.builder.XmlElement,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        if r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attribute type can not be null");

        throw $r6;

     label1:
        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String type_> = r5;

        if z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: boolean default_> = $z1;

        return;
    }

    public org.xmlpull.v1.builder.XmlElement getOwner()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlElement owner_>;

        return $r1;
    }

    public org.xmlpull.v1.builder.XmlNamespace getNamespace()
    {
        org.xmlpull.v1.builder.XmlNamespace $r1;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_>;

        return $r1;
    }

    public java.lang.String getNamespaceName()
    {
        org.xmlpull.v1.builder.XmlNamespace $r1, $r2;
        java.lang.String $r3;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: org.xmlpull.v1.builder.XmlNamespace namespace_>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String name_>;

        return $r1;
    }

    public java.lang.String getValue()
    {
        java.lang.String $r1;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String value_>;

        return $r1;
    }

    public java.lang.String getType()
    {
        java.lang.String $r1;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String type_>;

        return $r1;
    }

    public boolean isSpecified()
    {
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $z0 = r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: boolean default_>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean equals(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlAttribute r2;
        java.lang.Object r0;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlAttribute;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.xmlpull.v1.builder.XmlAttribute) r0;

        $r3 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String getNamespaceName()>();

        $r4 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getNamespaceName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String getName()>();

        $r6 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label4;

        $r7 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String getValue()>();

        $r8 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getValue()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl r2;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name=");

        $r3 = r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String name_>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value=");

        $r6 = r2.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: java.lang.String value_>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }
}
