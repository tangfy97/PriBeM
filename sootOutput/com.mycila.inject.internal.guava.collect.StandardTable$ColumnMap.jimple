class com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap extends com.mycila.inject.internal.guava.collect.Maps$ImprovedAbstractMap
{
    com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues columnMapValues;
    final com.mycila.inject.internal.guava.collect.StandardTable this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.StandardTable)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        com.mycila.inject.internal.guava.collect.StandardTable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.StandardTable;

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$ImprovedAbstractMap: void <init>()>();

        return;
    }

    public java.util.Map get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        java.util.Map $r4;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.StandardTable $r2, $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.StandardTable: boolean containsColumn(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map column(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.StandardTable $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.StandardTable: boolean containsColumn(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Map remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        java.util.Map $r4;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.StandardTable $r2, $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.StandardTable: boolean containsColumn(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map access$1100(com.mycila.inject.internal.guava.collect.StandardTable,java.lang.Object)>($r3, r1);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Set createEntrySet()
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapEntrySet $r0;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        $r0 = new com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapEntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapEntrySet: void <init>(com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap)>(r1);

        return $r0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        com.mycila.inject.internal.guava.collect.StandardTable $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Set columnKeySet()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues columnMapValues>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues: void <init>(com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap,com.mycila.inject.internal.guava.collect.StandardTable$1)>(r0, null);

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap$ColumnMapValues columnMapValues> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: java.util.Map remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: java.util.Map get(java.lang.Object)>(r1);

        return $r2;
    }

    void <init>(com.mycila.inject.internal.guava.collect.StandardTable, com.mycila.inject.internal.guava.collect.StandardTable$1)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$1 r2;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap r0;
        com.mycila.inject.internal.guava.collect.StandardTable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.StandardTable;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.StandardTable$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnMap: void <init>(com.mycila.inject.internal.guava.collect.StandardTable)>(r1);

        return;
    }
}
