public class org.springframework.beans.propertyeditors.CustomNumberEditor extends java.beans.PropertyEditorSupport
{
    private final java.lang.Class numberClass;
    private final java.text.NumberFormat numberFormat;
    private final boolean allowEmpty;

    public void <init>(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r1;
        org.springframework.beans.propertyeditors.CustomNumberEditor r0;
        boolean z0;

        r0 := @this: org.springframework.beans.propertyeditors.CustomNumberEditor;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: void <init>(java.lang.Class,java.text.NumberFormat,boolean)>(r1, null, z0);

        return;
    }

    public void <init>(java.lang.Class, java.text.NumberFormat, boolean) throws java.lang.IllegalArgumentException
    {
        org.springframework.beans.propertyeditors.CustomNumberEditor r0;
        java.lang.Class r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.text.NumberFormat r4;
        boolean $z0, z1;

        r0 := @this: org.springframework.beans.propertyeditors.CustomNumberEditor;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.text.NumberFormat;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        if r1 == null goto label1;

        $r3 = class "Ljava/lang/Number;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property class must be a subclass of Number");

        throw $r2;

     label2:
        r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.lang.Class numberClass> = r1;

        r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.text.NumberFormat numberFormat> = r4;

        r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: boolean allowEmpty> = z1;

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.text.NumberFormat $r1, $r5;
        org.springframework.beans.propertyeditors.CustomNumberEditor r0;
        java.lang.Class $r3, $r6;
        java.lang.String r2;
        java.lang.Number $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.propertyeditors.CustomNumberEditor;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: boolean allowEmpty>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: void setValue(java.lang.Object)>(null);

        goto label3;

     label1:
        $r1 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.text.NumberFormat numberFormat>;

        if $r1 == null goto label2;

        $r6 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.lang.Class numberClass>;

        $r5 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.text.NumberFormat numberFormat>;

        $r7 = staticinvoke <org.springframework.util.NumberUtils: java.lang.Number parseNumber(java.lang.String,java.lang.Class,java.text.NumberFormat)>(r2, $r6, $r5);

        virtualinvoke r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: void setValue(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r3 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.lang.Class numberClass>;

        $r4 = staticinvoke <org.springframework.util.NumberUtils: java.lang.Number parseNumber(java.lang.String,java.lang.Class)>(r2, $r3);

        virtualinvoke r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: void setValue(java.lang.Object)>($r4);

     label3:
        return;
    }

    public void setValue(java.lang.Object)
    {
        org.springframework.beans.propertyeditors.CustomNumberEditor r1;
        java.lang.Object r0;
        java.lang.Class $r2;
        java.lang.Number $r3, $r4;
        boolean $z0;

        r1 := @this: org.springframework.beans.propertyeditors.CustomNumberEditor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r0;

        $r2 = r1.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.lang.Class numberClass>;

        $r4 = staticinvoke <org.springframework.util.NumberUtils: java.lang.Number convertNumberToTargetClass(java.lang.Number,java.lang.Class)>($r3, $r2);

        specialinvoke r1.<java.beans.PropertyEditorSupport: void setValue(java.lang.Object)>($r4);

        goto label2;

     label1:
        specialinvoke r1.<java.beans.PropertyEditorSupport: void setValue(java.lang.Object)>(r0);

     label2:
        return;
    }

    public java.lang.String getAsText()
    {
        org.springframework.beans.propertyeditors.CustomNumberEditor r0;
        java.lang.Object $r1;
        java.lang.String $r3, $r5;
        java.text.NumberFormat $r2, $r4;

        r0 := @this: org.springframework.beans.propertyeditors.CustomNumberEditor;

        $r1 = virtualinvoke r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.lang.Object getValue()>();

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.text.NumberFormat numberFormat>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.beans.propertyeditors.CustomNumberEditor: java.text.NumberFormat numberFormat>;

        $r5 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(java.lang.Object)>($r1);

        return $r5;

     label2:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }
}
