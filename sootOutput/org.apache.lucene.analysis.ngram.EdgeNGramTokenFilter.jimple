public final class org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter extends org.apache.lucene.analysis.TokenFilter
{
    public static final org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side DEFAULT_SIDE;
    public static final int DEFAULT_MAX_GRAM_SIZE;
    public static final int DEFAULT_MIN_GRAM_SIZE;
    private final int minGram;
    private final int maxGram;
    private org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side side;
    private char[] curTermBuffer;
    private int curTermLength;
    private int curGramSize;
    private int tokStart;
    private int tokEnd;
    private boolean hasIllegalOffsets;
    private int savePosIncr;
    private boolean isFirstToken;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;
    private final org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt;

    public void <init>(org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side, int, int)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r7;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter r0;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side r8;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        java.lang.IllegalArgumentException $r9, $r10, $r11;
        int i0, i1;
        org.apache.lucene.util.Attribute $r2, $r4, $r6;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        r8 := @parameter1: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r1);

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean isFirstToken> = 1;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        $r6 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt> = $r7;

        if r8 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sideLabel must be either front or back");

        throw $r11;

     label1:
        if i0 >= 1 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must be greater than zero");

        throw $r10;

     label2:
        if i0 <= i1 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must not be greater than maxGram");

        throw $r9;

     label3:
        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int minGram> = i0;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int maxGram> = i1;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side side> = r8;

        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, java.lang.String, int, int)
    {
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter r0;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side $r3;
        int i0, i1;
        java.lang.String r2;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = staticinvoke <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side getSide(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: void <init>(org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side,int,int)>(r1, $r3, i0, i1);

        return;
    }

    public final boolean incrementToken() throws java.io.IOException
    {
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r5, $r6, $r16;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r4, $r7, $r14, $r15;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r9, $r13, $r17;
        org.apache.lucene.analysis.TokenStream $r8;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side $r2, $r3;
        char[] $r1, $r10, $r12, $r18;
        java.lang.Object $r11;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;

     label01:
        $r1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: char[] curTermBuffer>;

        if $r1 != null goto label05;

        $r8 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.TokenStream input>;

        $z2 = virtualinvoke $r8.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z2 != 0 goto label02;

        return 0;

     label02:
        $r9 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r10 = interfaceinvoke $r9.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Object clone()>();

        $r12 = (char[]) $r11;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: char[] curTermBuffer> = $r12;

        $r13 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i16 = interfaceinvoke $r13.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curTermLength> = $i16;

        $i17 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int minGram>;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize> = $i17;

        $r14 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i18 = interfaceinvoke $r14.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int startOffset()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokStart> = $i18;

        $r15 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i19 = interfaceinvoke $r15.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int endOffset()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokEnd> = $i19;

        $i21 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokStart>;

        $i20 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curTermLength>;

        $i23 = $i21 + $i20;

        $i22 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokEnd>;

        if $i23 == $i22 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean hasIllegalOffsets> = $z3;

        $r16 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        $i24 = interfaceinvoke $r16.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int savePosIncr> = $i24;

     label05:
        $i25 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i26 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int maxGram>;

        if $i25 > $i26 goto label12;

        $i1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i0 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curTermLength>;

        if $i1 > $i0 goto label12;

        $r3 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side side>;

        $r2 = <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side FRONT>;

        if $r3 != $r2 goto label06;

        $i27 = 0;

        goto label07;

     label06:
        $i3 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curTermLength>;

        $i2 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i27 = $i3 - $i2;

     label07:
        i4 = $i27;

        $i5 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i15 = $i27 + $i5;

        virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: void clearAttributes()>();

        $z0 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean hasIllegalOffsets>;

        if $z0 == 0 goto label08;

        $r7 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i14 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokStart>;

        $i13 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokEnd>;

        interfaceinvoke $r7.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i14, $i13);

        goto label09;

     label08:
        $r4 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i6 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokStart>;

        $i9 = $i6 + $i27;

        $i7 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int tokStart>;

        $i8 = $i7 + $i15;

        interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i9, $i8);

     label09:
        $i11 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i10 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int minGram>;

        if $i11 != $i10 goto label10;

        $z1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean isFirstToken>;

        if $z1 != 0 goto label11;

        $r6 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        $i12 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int savePosIncr>;

        interfaceinvoke $r6.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>($i12);

        goto label11;

     label10:
        $r5 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        interfaceinvoke $r5.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>(0);

     label11:
        $r17 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r18 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: char[] curTermBuffer>;

        $i28 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        interfaceinvoke $r17.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: void copyBuffer(char[],int,int)>($r18, i4, $i28);

        $i29 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize>;

        $i30 = $i29 + 1;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int curGramSize> = $i30;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean isFirstToken> = 0;

        return 1;

     label12:
        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: char[] curTermBuffer> = null;

        goto label01;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void reset()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: char[] curTermBuffer> = null;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: boolean isFirstToken> = 1;

        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side $r0;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int DEFAULT_MIN_GRAM_SIZE> = 1;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: int DEFAULT_MAX_GRAM_SIZE> = 1;

        $r0 = <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side FRONT>;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter: org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter$Side DEFAULT_SIDE> = $r0;

        return;
    }
}
