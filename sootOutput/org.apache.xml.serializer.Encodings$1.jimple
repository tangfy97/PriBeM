class org.apache.xml.serializer.Encodings$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    static java.lang.Class class$java$lang$String;

    void <init>()
    {
        org.apache.xml.serializer.Encodings$1 r0;

        r0 := @this: org.apache.xml.serializer.Encodings$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object run()
    {
        java.lang.Class[] $r1;
        java.lang.RuntimeException $r5;
        java.lang.Exception $r4;
        org.apache.xml.serializer.Encodings$1 r7;
        java.lang.Class $r0, $r2, $r8;
        java.lang.String $r6;
        java.lang.reflect.Method $r3;

        r7 := @this: org.apache.xml.serializer.Encodings$1;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.io.CharToByteConverter");

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <org.apache.xml.serializer.Encodings$1: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label2;

        $r8 = staticinvoke <org.apache.xml.serializer.Encodings$1: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xml.serializer.Encodings$1: java.lang.Class class$java$lang$String> = $r8;

        goto label3;

     label2:
        $r8 = <org.apache.xml.serializer.Encodings$1: java.lang.Class class$java$lang$String>;

     label3:
        $r1[0] = $r8;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getConverter", $r1);

        return $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label4 with label4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
