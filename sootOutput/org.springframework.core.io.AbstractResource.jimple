public abstract class org.springframework.core.io.AbstractResource extends java.lang.Object implements org.springframework.core.io.Resource
{

    public void <init>()
    {
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean exists()
    {
        java.lang.Throwable $r2;
        java.io.IOException $r3;
        java.io.File $r1;
        org.springframework.core.io.AbstractResource r0;
        boolean $z0;
        java.io.InputStream $r4;

        r0 := @this: org.springframework.core.io.AbstractResource;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.io.File getFile()>();

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.io.InputStream getInputStream()>();

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label5:
        return 1;

     label6:
        $r2 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean isReadable()
    {
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        return 1;
    }

    public boolean isOpen()
    {
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        return 0;
    }

    public java.net.URL getURL() throws java.io.IOException
    {
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r3, $r4, $r6;
        java.io.FileNotFoundException $r0;
        org.springframework.core.io.AbstractResource r2;

        r2 := @this: org.springframework.core.io.AbstractResource;

        $r0 = new java.io.FileNotFoundException;

        $r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r2.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to URL");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public java.net.URI getURI() throws java.io.IOException
    {
        java.net.URL $r1;
        java.net.URISyntaxException $r3;
        org.springframework.core.NestedIOException $r4;
        org.springframework.core.io.AbstractResource r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.net.URI $r2;
        java.lang.String $r8;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.net.URL getURL()>();

     label1:
        $r2 = staticinvoke <org.springframework.util.ResourceUtils: java.net.URI toURI(java.net.URL)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.core.NestedIOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid URI [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.core.NestedIOException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public java.io.File getFile() throws java.io.IOException
    {
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r3, $r4, $r6;
        java.io.FileNotFoundException $r0;
        org.springframework.core.io.AbstractResource r2;

        r2 := @this: org.springframework.core.io.AbstractResource;

        $r0 = new java.io.FileNotFoundException;

        $r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r2.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to absolute file path");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public long contentLength() throws java.io.IOException
    {
        long $l0;
        java.io.File $r1;
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.io.File getFile()>();

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    public long lastModified() throws java.io.IOException
    {
        long $l0;
        java.io.File $r1;
        java.io.FileNotFoundException $r2;
        org.springframework.core.io.AbstractResource r0;
        byte $b1;
        java.lang.StringBuilder $r3, $r6;
        java.lang.String $r4, $r5, $r7;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.io.File getFileForLastModifiedCheck()>();

        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = new java.io.FileNotFoundException;

        $r3 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved in the file system for resolving its last-modified timestamp");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return $l0;
    }

    protected java.io.File getFileForLastModifiedCheck() throws java.io.IOException
    {
        java.io.File $r1;
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.io.File getFile()>();

        return $r1;
    }

    public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r3, $r5, r6;
        java.io.FileNotFoundException $r0;
        org.springframework.core.io.AbstractResource r2;

        r2 := @this: org.springframework.core.io.AbstractResource;

        r6 := @parameter0: java.lang.String;

        $r0 = new java.io.FileNotFoundException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create a relative resource for ");

        $r3 = virtualinvoke r2.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.String getFilename() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r0;
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r3, $r4, $r6;
        org.springframework.core.io.AbstractResource r2;

        r2 := @this: org.springframework.core.io.AbstractResource;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r2.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a filename");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        org.springframework.core.io.AbstractResource r1;
        boolean $z0, $z1;
        org.springframework.core.io.Resource $r2;

        r1 := @this: org.springframework.core.io.AbstractResource;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label2;

        $z0 = r0 instanceof org.springframework.core.io.Resource;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.core.io.Resource) r0;

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r4 = virtualinvoke r1.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.springframework.core.io.AbstractResource r0;

        r0 := @this: org.springframework.core.io.AbstractResource;

        $r1 = virtualinvoke r0.<org.springframework.core.io.AbstractResource: java.lang.String getDescription()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
}
