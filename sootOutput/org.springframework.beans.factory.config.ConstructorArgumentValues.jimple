public class org.springframework.beans.factory.config.ConstructorArgumentValues extends java.lang.Object
{
    private final java.util.Map indexedArgumentValues;
    private final java.util.List genericArgumentValues;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.LinkedList $r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(0);

        r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues> = $r2;

        return;
    }

    public void <init>(org.springframework.beans.factory.config.ConstructorArgumentValues)
    {
        java.util.LinkedHashMap $r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0, r3;
        java.util.LinkedList $r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r3 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(0);

        r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues> = $r2;

        virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>(r3);

        return;
    }

    public void addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)
    {
        java.lang.Integer $r7;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0, r5;
        java.util.Map $r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r9, $r10, $r15, r17;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r16;
        java.util.Iterator $r3, $r12;
        java.util.Set $r2;
        java.util.List $r11, $r14;
        java.lang.Object $r4, $r6, $r8, $r13;

        r5 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r0 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues;

        if r0 == null goto label5;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r6;

        $r8 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r8;

        $r10 = virtualinvoke $r9.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder copy()>();

        specialinvoke r5.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>($r7, $r10);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r13;

        $r14 = r5.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $z1 = interfaceinvoke $r14.<java.util.List: boolean contains(java.lang.Object)>(r17);

        if $z1 != 0 goto label4;

        $r15 = virtualinvoke r17.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder copy()>();

        specialinvoke r5.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>($r15);

     label4:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

     label5:
        return;
    }

    public void addIndexedArgumentValue(int, java.lang.Object)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = new org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        specialinvoke $r1.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void <init>(java.lang.Object)>(r2);

        virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(i0, $r1);

        return;
    }

    public void addIndexedArgumentValue(int, java.lang.Object, java.lang.String)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r1;
        int i0;
        java.lang.Object r2;
        java.lang.String r3;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $r1 = new org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        specialinvoke $r1.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void <init>(java.lang.Object,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(i0, $r1);

        return;
    }

    public void addIndexedArgumentValue(int, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r0;
        int i0;
        java.lang.Integer $r2;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r0 := @parameter1: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Index must not be negative");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ValueHolder must not be null");

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r1.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>($r2, r0);

        return;
    }

    private void addOrMergeIndexedArgumentValue(java.lang.Integer, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)
    {
        java.lang.Integer r1;
        org.springframework.beans.Mergeable r8;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r2, $r11;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r4, r5;
        java.lang.Object $r3, $r6, $r7, $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r1 := @parameter0: java.lang.Integer;

        r5 := @parameter1: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        $r2 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r3;

        if r4 == null goto label1;

        $r6 = virtualinvoke r5.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $z0 = $r6 instanceof org.springframework.beans.Mergeable;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r5.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        r8 = (org.springframework.beans.Mergeable) $r7;

        $z1 = interfaceinvoke r8.<org.springframework.beans.Mergeable: boolean isMergeEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $r10 = interfaceinvoke r8.<org.springframework.beans.Mergeable: java.lang.Object merge(java.lang.Object)>($r9);

        virtualinvoke r5.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void setValue(java.lang.Object)>($r10);

     label1:
        $r11 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        return;
    }

    public boolean hasIndexedArgumentValue(int)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1;
        int i0;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int, java.lang.Class)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r2;
        int i0;
        java.lang.Class r1;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int,java.lang.Class,java.lang.String)>(i0, r1, null);

        return $r2;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int, java.lang.Class, java.lang.String)
    {
        java.lang.Integer $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r10;
        int i0;
        java.lang.Object $r3;
        java.lang.Class r8;
        java.lang.String $r4, $r5, r6, $r7, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.Class;

        r6 := @parameter2: java.lang.String;

        if i0 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, "Index must not be negative");

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r10 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r3;

        if $r10 == null goto label5;

        $r4 = virtualinvoke $r10.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getType()>();

        if $r4 == null goto label3;

        if r8 == null goto label5;

        $r9 = virtualinvoke $r10.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getType()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean matchesTypeName(java.lang.Class,java.lang.String)>(r8, $r9);

        if $z1 == 0 goto label5;

     label3:
        $r5 = virtualinvoke $r10.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        if $r5 == null goto label4;

        if r6 == null goto label5;

        $r7 = virtualinvoke $r10.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

     label4:
        return $r10;

     label5:
        return null;
    }

    public java.util.Map getIndexedArgumentValues()
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public void addGenericArgumentValue(java.lang.Object)
    {
        java.util.List $r3;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r1;
        java.lang.Object r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r2 := @parameter0: java.lang.Object;

        $r3 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r1 = new org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        specialinvoke $r1.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void <init>(java.lang.Object)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addGenericArgumentValue(java.lang.Object, java.lang.String)
    {
        java.util.List $r4;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r1;
        java.lang.Object r2;
        java.lang.String r3;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r4 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r1 = new org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        specialinvoke $r1.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void <init>(java.lang.Object,java.lang.String)>(r2, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)
    {
        java.util.List $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r0;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r0 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ValueHolder must not be null");

        $r2 = r1.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        specialinvoke r1.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(r0);

     label1:
        return;
    }

    private void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)
    {
        org.springframework.beans.Mergeable r12;
        org.springframework.beans.factory.config.ConstructorArgumentValues r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r0, r7;
        java.lang.String $r1, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        java.util.List $r3, $r4;
        java.lang.Object $r6, $r10, $r11, $r13, $r14;

        r2 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r0 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        if $r1 == null goto label4;

        $r4 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r6;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        $r9 = virtualinvoke r7.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $z1 = $r10 instanceof org.springframework.beans.Mergeable;

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        r12 = (org.springframework.beans.Mergeable) $r11;

        $z2 = interfaceinvoke r12.<org.springframework.beans.Mergeable: boolean isMergeEnabled()>();

        if $z2 == 0 goto label2;

        $r13 = virtualinvoke r7.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $r14 = interfaceinvoke r12.<org.springframework.beans.Mergeable: java.lang.Object merge(java.lang.Object)>($r13);

        virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void setValue(java.lang.Object)>($r14);

     label2:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

     label3:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

     label4:
        $r3 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class,java.lang.String,java.util.Set)>(r1, null, null);

        return $r2;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class, java.lang.String)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r3;
        java.lang.Class r1;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class,java.lang.String,java.util.Set)>(r1, r2, null);

        return $r3;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class, java.lang.String, java.util.Set)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r4;
        java.lang.String $r6, $r7, $r9, $r10, $r12, r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2;
        java.util.Set r5;
        java.util.List $r1;
        java.lang.Object $r3, $r11;
        java.lang.Class r8;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r8 := @parameter0: java.lang.Class;

        r13 := @parameter1: java.lang.String;

        r5 := @parameter2: java.util.Set;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r3;

        if r5 == null goto label2;

        $z3 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z3 == 0 goto label2;

        goto label6;

     label2:
        $r6 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        if $r6 == null goto label3;

        if r13 == null goto label6;

        $r14 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z2 != 0 goto label3;

        goto label6;

     label3:
        $r7 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getType()>();

        if $r7 == null goto label4;

        if r8 == null goto label6;

        $r12 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getType()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean matchesTypeName(java.lang.Class,java.lang.String)>(r8, $r12);

        if $z1 != 0 goto label4;

        goto label6;

     label4:
        if r8 == null goto label5;

        $r9 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getType()>();

        if $r9 != null goto label5;

        $r10 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.String getName()>();

        if $r10 != null goto label5;

        $r11 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>(r8, $r11);

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        return r4;

     label6:
        $z4 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        return null;
    }

    public java.util.List getGenericArgumentValues()
    {
        java.util.List $r1, $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r2;
        int i0;
        java.lang.Class r1;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int,java.lang.Class,java.lang.String,java.util.Set)>(i0, r1, null, null);

        return $r2;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class, java.lang.String)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r3;
        int i0;
        java.lang.Class r1;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int,java.lang.Class,java.lang.String,java.util.Set)>(i0, r1, r2, null);

        return $r3;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class, java.lang.String, java.util.Set)
    {
        java.util.Set r4;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r3, r5;
        int i0;
        java.lang.Class r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Set;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Index must not be negative");

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int,java.lang.Class,java.lang.String)>(i0, r1, r2);

        r5 = $r3;

        if $r3 != null goto label3;

        r5 = virtualinvoke r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class,java.lang.String,java.util.Set)>(r1, r2, r4);

     label3:
        return r5;
    }

    public int getArgumentCount()
    {
        java.util.List $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean isEmpty()
    {
        java.util.List $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void clear()
    {
        java.util.List $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r5, $r6, $r11, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r12;
        java.util.List $r3, $r4, $r7, $r9;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0, r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r16, r20, r23, r24;
        int $i0, $i1, $i2, $i3;
        java.util.Map$Entry r25;
        java.util.Iterator $r8, $r10, $r13;
        java.lang.Object r1, $r14, $r15, $r18, $r19, $r21, $r22;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.beans.factory.config.ConstructorArgumentValues;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.beans.factory.config.ConstructorArgumentValues) r1;

        $r3 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 != $i1 goto label3;

        $r5 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $i2 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $i3 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i2 == $i3 goto label4;

     label3:
        return 0;

     label4:
        $r7 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        $r9 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r21 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r21;

        $r22 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r22;

        $z5 = staticinvoke <org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: boolean access$0(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(r23, r24);

        if $z5 != 0 goto label6;

        return 0;

     label6:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label5;

     label7:
        $r11 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label9;

     label8:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        r16 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r15;

        $r17 = r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r18 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r20 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r19;

        $z3 = staticinvoke <org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: boolean access$0(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(r16, r20);

        if $z3 != 0 goto label9;

        return 0;

     label9:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label8;

        return 1;
    }

    public int hashCode()
    {
        java.lang.Integer $r11;
        org.springframework.beans.factory.config.ConstructorArgumentValues r0;
        java.util.Map $r4;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder $r9, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0, $z1;
        java.util.Map$Entry r13;
        java.util.Iterator $r2, $r6;
        java.util.Set $r5;
        java.util.List $r1;
        java.lang.Object $r3, $r7, $r8, $r10;

        r0 := @this: org.springframework.beans.factory.config.ConstructorArgumentValues;

        i6 = 7;

        $r1 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List genericArgumentValues>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r3;

        $i0 = 31 * i6;

        $i1 = staticinvoke <org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: int access$1(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>(r12);

        i6 = $i0 + $i1;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        i7 = i6 * 29;

        $r4 = r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map indexedArgumentValues>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r7;

        $i2 = 31 * i7;

        $r8 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r8;

        $i3 = staticinvoke <org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: int access$1(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>($r9);

        $r10 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.Integer) $r10;

        $i4 = virtualinvoke $r11.<java.lang.Integer: int hashCode()>();

        $i5 = $i3 ^ $i4;

        i7 = $i2 + $i5;

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return i7;
    }
}
