final class org.waveprotocol.wave.model.util.CollectionUtils$2 extends java.lang.Object implements org.waveprotocol.wave.model.util.DataDomain
{

    void <init>()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$2 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void compose(org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.ReadableStringMap, org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r0;
        org.waveprotocol.wave.model.util.ReadableStringMap r1, r2;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r3;

        r3 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.StringMap;

        r2 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringMap;

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>(r1);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>(r2);

        return;
    }

    public org.waveprotocol.wave.model.util.StringMap empty()
    {
        org.waveprotocol.wave.model.util.StringMap $r0;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        return $r0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap readOnlyView(org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r0;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.StringMap;

        return r0;
    }

    public volatile java.lang.Object readOnlyView(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.util.StringMap) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$2: org.waveprotocol.wave.model.util.ReadableStringMap readOnlyView(org.waveprotocol.wave.model.util.StringMap)>($r2);

        return $r3;
    }

    public volatile void compose(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, r3;
        org.waveprotocol.wave.model.util.ReadableStringMap $r4, $r5;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (org.waveprotocol.wave.model.util.StringMap) r1;

        $r5 = (org.waveprotocol.wave.model.util.ReadableStringMap) r2;

        $r4 = (org.waveprotocol.wave.model.util.ReadableStringMap) r3;

        virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$2: void compose(org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.ReadableStringMap,org.waveprotocol.wave.model.util.ReadableStringMap)>($r6, $r5, $r4);

        return;
    }

    public volatile java.lang.Object empty()
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$2 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$2: org.waveprotocol.wave.model.util.StringMap empty()>();

        return $r1;
    }
}
