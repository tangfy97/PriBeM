public class org.apache.batik.gvt.UpdateTracker extends org.apache.batik.gvt.event.GraphicsNodeChangeAdapter
{
    java.util.Map dirtyNodes;
    java.util.Map fromBounds;
    protected static java.awt.geom.Rectangle2D NULL_RECT;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.apache.batik.gvt.UpdateTracker r0;

        r0 := @this: org.apache.batik.gvt.UpdateTracker;

        specialinvoke r0.<org.apache.batik.gvt.event.GraphicsNodeChangeAdapter: void <init>()>();

        r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds> = $r1;

        return;
    }

    public boolean hasChanged()
    {
        org.apache.batik.gvt.UpdateTracker r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.UpdateTracker;

        $r1 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List getDirtyAreas()
    {
        java.awt.geom.Rectangle2D $r20, $r24, r30;
        org.apache.batik.gvt.CompositeGraphicsNode $r32;
        java.util.Map $r1, $r3, $r8, $r10, $r15, $r25, $r26;
        boolean $z0, $z1;
        java.awt.Shape r34, r35;
        org.apache.batik.gvt.UpdateTracker r0;
        org.apache.batik.gvt.GraphicsNode r28;
        java.util.Set $r4;
        java.awt.geom.AffineTransform $r13, $r17, $r18, $r19, $r21, $r22, $r23, r29, r31, r33;
        org.apache.batik.ext.awt.image.renderable.Filter $r12;
        java.util.LinkedList $r2;
        java.lang.ref.WeakReference $r14, r27;
        java.util.Iterator $r5;
        java.lang.Object $r6, $r7, $r9, $r11, $r16;

        r0 := @this: org.apache.batik.gvt.UpdateTracker;

        $r1 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        if $r1 != null goto label01;

        return null;

     label01:
        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label17;

     label02:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.ref.WeakReference) $r6;

        $r7 = virtualinvoke r27.<java.lang.ref.Reference: java.lang.Object get()>();

        r28 = (org.apache.batik.gvt.GraphicsNode) $r7;

        if r28 != null goto label03;

        goto label17;

     label03:
        $r8 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r29 = (java.awt.geom.AffineTransform) $r9;

        if r29 == null goto label04;

        $r23 = new java.awt.geom.AffineTransform;

        specialinvoke $r23.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r29);

        r29 = $r23;

     label04:
        $r10 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r27);

        $r24 = (java.awt.geom.Rectangle2D) $r11;

        r30 = null;

        r31 = null;

        $z0 = $r24 instanceof org.apache.batik.gvt.UpdateTracker$ChngSrcRect;

        if $z0 != 0 goto label05;

        r30 = interfaceinvoke r28.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        $r21 = interfaceinvoke r28.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        r31 = $r21;

        if $r21 == null goto label05;

        $r22 = new java.awt.geom.AffineTransform;

        specialinvoke $r22.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r21);

        r31 = $r22;

     label05:
        $r32 = interfaceinvoke r28.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

        r28 = $r32;

        if $r32 != null goto label06;

        goto label13;

     label06:
        $r12 = interfaceinvoke $r32.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getFilter()>();

        if $r12 == null goto label07;

        r30 = interfaceinvoke $r12.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        r31 = null;

     label07:
        $r13 = interfaceinvoke $r32.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        $r14 = interfaceinvoke $r32.<org.apache.batik.gvt.GraphicsNode: java.lang.ref.WeakReference getWeakReference()>();

        $r15 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r19 = (java.awt.geom.AffineTransform) $r16;

        r33 = $r19;

        if $r19 != null goto label08;

        r33 = $r13;

     label08:
        if r33 == null goto label10;

        if r29 == null goto label09;

        virtualinvoke r29.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r33);

        goto label10;

     label09:
        $r18 = new java.awt.geom.AffineTransform;

        specialinvoke $r18.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r33);

        r29 = $r18;

     label10:
        if $r13 == null goto label12;

        if r31 == null goto label11;

        virtualinvoke r31.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r13);

        goto label12;

     label11:
        $r17 = new java.awt.geom.AffineTransform;

        specialinvoke $r17.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r13);

        r31 = $r17;

     label12:
        goto label05;

     label13:
        if $r32 != null goto label17;

        r34 = $r24;

        if $r24 == null goto label15;

        $r20 = <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT>;

        if $r24 == $r20 goto label15;

        if r29 == null goto label14;

        r34 = virtualinvoke r29.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r24);

     label14:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r34);

     label15:
        if r30 == null goto label17;

        r35 = r30;

        if r31 == null goto label16;

        r35 = virtualinvoke r31.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r30);

     label16:
        if r35 == null goto label17;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r35);

     label17:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label02;

        $r25 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds>;

        interfaceinvoke $r25.<java.util.Map: void clear()>();

        $r26 = r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        interfaceinvoke $r26.<java.util.Map: void clear()>();

        return $r2;
    }

    public java.awt.geom.Rectangle2D getNodeDirtyRegion(org.apache.batik.gvt.GraphicsNode, java.awt.geom.AffineTransform)
    {
        java.awt.geom.Rectangle2D $r8, $r14, $r15, $r16, r21;
        org.apache.batik.gvt.CompositeGraphicsNode r10;
        java.util.Map $r3, $r6;
        java.lang.ref.WeakReference $r1;
        boolean $z0, $z1;
        java.awt.Shape $r9, $r17;
        org.apache.batik.gvt.UpdateTracker r2;
        java.util.Iterator $r11;
        org.apache.batik.gvt.GraphicsNode r0, r13;
        java.awt.geom.AffineTransform $r18, r19, r20;
        org.apache.batik.ext.awt.image.renderable.Filter $r5;
        java.lang.Object $r4, $r7, $r12;

        r2 := @this: org.apache.batik.gvt.UpdateTracker;

        r0 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        r19 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: java.lang.ref.WeakReference getWeakReference()>();

        $r3 = r2.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r20 = (java.awt.geom.AffineTransform) $r4;

        if r20 != null goto label01;

        r20 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

     label01:
        if r20 == null goto label02;

        $r18 = new java.awt.geom.AffineTransform;

        specialinvoke $r18.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r19);

        r19 = $r18;

        virtualinvoke $r18.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(r20);

     label02:
        $r5 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getFilter()>();

        r21 = null;

        $z0 = r0 instanceof org.apache.batik.gvt.CompositeGraphicsNode;

        if $z0 == 0 goto label09;

        r10 = (org.apache.batik.gvt.CompositeGraphicsNode) r0;

        $r11 = virtualinvoke r10.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.Iterator iterator()>();

        goto label07;

     label03:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.batik.gvt.GraphicsNode) $r12;

        $r14 = virtualinvoke r2.<org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D getNodeDirtyRegion(org.apache.batik.gvt.GraphicsNode,java.awt.geom.AffineTransform)>(r13, r19);

        if $r14 == null goto label07;

        if $r5 == null goto label04;

        $r16 = interfaceinvoke $r5.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r17 = virtualinvoke r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r16);

        r21 = interfaceinvoke $r17.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label08;

     label04:
        if r21 == null goto label05;

        $r15 = <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT>;

        if r21 != $r15 goto label06;

     label05:
        r21 = $r14;

        goto label07;

     label06:
        virtualinvoke r21.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r14);

     label07:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label03;

     label08:
        goto label13;

     label09:
        $r6 = r2.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        r21 = (java.awt.geom.Rectangle2D) $r7;

        if r21 != null goto label11;

        if $r5 == null goto label10;

        r21 = interfaceinvoke $r5.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label12;

     label10:
        r21 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        goto label12;

     label11:
        $r8 = <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT>;

        if r21 != $r8 goto label12;

        r21 = null;

     label12:
        if r21 == null goto label13;

        $r9 = virtualinvoke r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r21);

        r21 = interfaceinvoke $r9.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label13:
        return r21;
    }

    public java.awt.geom.Rectangle2D getNodeDirtyRegion(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.UpdateTracker r0;
        org.apache.batik.gvt.GraphicsNode r1;
        java.awt.geom.Rectangle2D $r3;
        java.awt.geom.AffineTransform $r2;

        r0 := @this: org.apache.batik.gvt.UpdateTracker;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D getNodeDirtyRegion(org.apache.batik.gvt.GraphicsNode,java.awt.geom.AffineTransform)>(r1, $r2);

        return $r3;
    }

    public void changeStarted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)
    {
        java.awt.geom.Rectangle2D $r9, $r10, $r11, r20, r21;
        java.util.HashMap $r17;
        org.apache.batik.gvt.UpdateTracker$ChngSrcRect $r12;
        java.util.Map $r4, $r5, $r6, $r8, $r15;
        java.lang.ref.WeakReference $r2;
        boolean $z0, z1;
        org.apache.batik.gvt.UpdateTracker r3;
        org.apache.batik.gvt.GraphicsNode $r1, $r19;
        java.awt.geom.AffineTransform $r13, $r14, r18;
        org.apache.batik.gvt.event.GraphicsNodeChangeEvent r0;
        java.lang.Object $r7, $r16;

        r3 := @this: org.apache.batik.gvt.UpdateTracker;

        r0 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeChangeEvent;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.event.GraphicsNodeEvent: org.apache.batik.gvt.GraphicsNode getGraphicsNode()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.GraphicsNode: java.lang.ref.WeakReference getWeakReference()>();

        z1 = 0;

        $r4 = r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        if $r4 != null goto label01;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes> = $r17;

        z1 = 1;

        goto label02;

     label01:
        $r5 = r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label02;

        z1 = 1;

     label02:
        if z1 == 0 goto label05;

        $r13 = interfaceinvoke $r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        if $r13 == null goto label03;

        $r16 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r18 = (java.awt.geom.AffineTransform) $r16;

        goto label04;

     label03:
        $r14 = new java.awt.geom.AffineTransform;

        specialinvoke $r14.<java.awt.geom.AffineTransform: void <init>()>();

        r18 = $r14;

     label04:
        $r15 = r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r18);

     label05:
        $r19 = virtualinvoke r0.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: org.apache.batik.gvt.GraphicsNode getChangeSrc()>();

        r20 = null;

        if $r19 == null goto label07;

        $r10 = virtualinvoke r3.<org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D getNodeDirtyRegion(org.apache.batik.gvt.GraphicsNode)>($r19);

        if $r10 == null goto label06;

        $r12 = new org.apache.batik.gvt.UpdateTracker$ChngSrcRect;

        specialinvoke $r12.<org.apache.batik.gvt.UpdateTracker$ChngSrcRect: void <init>(org.apache.batik.gvt.UpdateTracker,java.awt.geom.Rectangle2D)>(r3, $r10);

        r20 = $r12;

     label06:
        goto label08;

     label07:
        r20 = interfaceinvoke $r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

     label08:
        $r6 = r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        $r11 = (java.awt.geom.Rectangle2D) $r7;

        r21 = $r11;

        if r20 == null goto label10;

        if $r11 == null goto label09;

        $r9 = <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT>;

        if $r11 == $r9 goto label09;

        virtualinvoke $r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>(r20);

        goto label10;

     label09:
        r21 = r20;

     label10:
        if r21 != null goto label11;

        r21 = <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT>;

     label11:
        $r8 = r3.<org.apache.batik.gvt.UpdateTracker: java.util.Map fromBounds>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r21);

        return;
    }

    public void clear()
    {
        org.apache.batik.gvt.UpdateTracker r0;

        r0 := @this: org.apache.batik.gvt.UpdateTracker;

        r0.<org.apache.batik.gvt.UpdateTracker: java.util.Map dirtyNodes> = null;

        return;
    }

    static void <clinit>()
    {
        java.awt.Rectangle $r0;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>()>();

        <org.apache.batik.gvt.UpdateTracker: java.awt.geom.Rectangle2D NULL_RECT> = $r0;

        return;
    }
}
