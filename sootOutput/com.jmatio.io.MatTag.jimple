class com.jmatio.io.MatTag extends java.lang.Object
{
    protected int type;
    protected int size;

    public void <init>(int, int)
    {
        int i0, i1;
        com.jmatio.io.MatTag r0;

        r0 := @this: com.jmatio.io.MatTag;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jmatio.io.MatTag: int type> = i0;

        r0.<com.jmatio.io.MatTag: int size> = i1;

        return;
    }

    protected int getPadding(int, boolean)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17;
        boolean z0;
        com.jmatio.io.MatTag r0;

        r0 := @this: com.jmatio.io.MatTag;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label3;

        $i8 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i9 = i0 / $i8;

        $i10 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i11 = 8 / $i10;

        $i12 = $i9 % $i11;

        $i13 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i14 = $i12 * $i13;

        if $i14 == 0 goto label1;

        $i15 = 8 - $i14;

        goto label2;

     label1:
        $i15 = 0;

     label2:
        i16 = $i15;

        goto label6;

     label3:
        $i1 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i2 = i0 / $i1;

        $i3 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i4 = 4 / $i3;

        $i5 = $i2 % $i4;

        $i6 = virtualinvoke r0.<com.jmatio.io.MatTag: int sizeOf()>();

        $i7 = $i5 * $i6;

        if $i7 == 0 goto label4;

        $i17 = 4 - $i7;

        goto label5;

     label4:
        $i17 = 0;

     label5:
        i16 = $i17;

     label6:
        return i16;
    }

    public java.lang.String toString()
    {
        com.jmatio.io.MatTag r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7;
        java.lang.String $r3, $r8;

        r2 := @this: com.jmatio.io.MatTag;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[tag: ");

        $i0 = r2.<com.jmatio.io.MatTag: int type>;

        $r3 = staticinvoke <com.jmatio.common.MatDataTypes: java.lang.String typeToString(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $i1 = r2.<com.jmatio.io.MatTag: int size>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public int sizeOf()
    {
        int $i0, $i1;
        com.jmatio.io.MatTag r0;

        r0 := @this: com.jmatio.io.MatTag;

        $i0 = r0.<com.jmatio.io.MatTag: int type>;

        $i1 = staticinvoke <com.jmatio.common.MatDataTypes: int sizeOf(int)>($i0);

        return $i1;
    }
}
