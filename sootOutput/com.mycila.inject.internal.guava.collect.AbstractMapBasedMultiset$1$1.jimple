class com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1 extends com.mycila.inject.internal.guava.collect.Multisets$AbstractEntry
{
    final java.util.Map$Entry val$mapEntry;
    final com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 this$1;

    void <init>(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1, java.util.Map$Entry)
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 r1;
        java.util.Map$Entry r2;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1;

        r2 := @parameter1: java.util.Map$Entry;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 this$1> = r1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: java.util.Map$Entry val$mapEntry> = r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Multisets$AbstractEntry: void <init>()>();

        return;
    }

    public java.lang.Object getElement()
    {
        java.util.Map$Entry $r1;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: java.util.Map$Entry val$mapEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public int getCount()
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 $r4;
        java.util.Map$Entry $r1;
        com.mycila.inject.internal.guava.collect.Count $r3, r9;
        java.util.Map $r6;
        int $i0, i1;
        java.lang.Object $r2, $r7, $r8;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset $r5;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: java.util.Map$Entry val$mapEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (com.mycila.inject.internal.guava.collect.Count) $r2;

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Count: int get()>();

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 this$1>;

        $r5 = $r4.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset this$0>;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map access$000(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset)>($r5);

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1$1: java.lang.Object getElement()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (com.mycila.inject.internal.guava.collect.Count) $r8;

        if r9 == null goto label1;

        i1 = virtualinvoke r9.<com.mycila.inject.internal.guava.collect.Count: int get()>();

     label1:
        return i1;
    }
}
