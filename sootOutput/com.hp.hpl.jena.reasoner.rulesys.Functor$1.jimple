final class com.hp.hpl.jena.reasoner.rulesys.Functor$1 extends com.hp.hpl.jena.util.iterator.Filter
{

    void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.Functor$1 r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor$1;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.Filter: void <init>()>();

        return;
    }

    public boolean accept(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor$1 r5;
        com.hp.hpl.jena.graph.Triple r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3, $r4;
        boolean $z0, $z1, $z2;

        r5 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor$1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.Functor$FunctorDatatype: com.hp.hpl.jena.datatypes.RDFDatatype theFunctorDatatype>;

        if $r3 != $r4 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public volatile boolean accept(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor$1 r0;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor$1: boolean accept(com.hp.hpl.jena.graph.Triple)>($r2);

        return $z0;
    }
}
