public class org.apache.jena.riot.out.OutputLangUtils extends java.lang.Object
{
    private static boolean asciiOnly;
    private static int relFlags;
    static final boolean applyUnicodeEscapes;

    public void <init>()
    {
        org.apache.jena.riot.out.OutputLangUtils r0;

        r0 := @this: org.apache.jena.riot.out.OutputLangUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.sparql.core.Quad, org.apache.jena.riot.system.Prologue, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.out.NodeToLabel r7;
        org.apache.jena.riot.system.Prologue r6;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        java.io.Writer r5;

        r5 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        r6 := @parameter2: org.apache.jena.riot.system.Prologue;

        r7 := @parameter3: org.apache.jena.riot.out.NodeToLabel;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r5, $r1, $r2, $r3, $r4, r6, r7);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.out.NodeToLabel r3;
        org.apache.jena.riot.system.Prologue r2;
        java.io.Writer r0;
        com.hp.hpl.jena.graph.Node r1, r4, r5, r6;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        r6 := @parameter4: com.hp.hpl.jena.graph.Node;

        r2 := @parameter5: org.apache.jena.riot.system.Prologue;

        r3 := @parameter6: org.apache.jena.riot.out.NodeToLabel;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r0, r1, r2, r3);

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, " ");

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r0, r4, r2, r3);

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, " ");

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r0, r5, r2, r3);

        if r6 == null goto label1;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, " ");

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r0, r6, r2, r3);

     label1:
        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, " .");

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void println(java.io.Writer)>(r0);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.out.NodeToLabel r7;
        org.apache.jena.riot.system.Prologue r6;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, r5;
        com.hp.hpl.jena.graph.Triple r0;
        java.io.Writer r4;

        r4 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        r6 := @parameter3: org.apache.jena.riot.system.Prologue;

        r7 := @parameter4: org.apache.jena.riot.out.NodeToLabel;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r4, $r1, $r2, $r3, r5, r6, r7);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Triple, org.apache.jena.riot.system.Prologue, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.out.NodeToLabel r6;
        org.apache.jena.riot.system.Prologue r5;
        java.io.Writer r4;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;

        r4 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r5 := @parameter2: org.apache.jena.riot.system.Prologue;

        r6 := @parameter3: org.apache.jena.riot.out.NodeToLabel;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r4, $r1, $r2, $r3, null, r5, r6);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue)
    {
        org.apache.jena.riot.out.NodeToLabel $r3;
        org.apache.jena.riot.system.Prologue r2;
        java.io.Writer r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: org.apache.jena.riot.system.Prologue;

        $r3 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.out.NodeToLabel createNodeToLabel()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r0, r1, r2, $r3);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.system.Prologue r9;
        com.hp.hpl.jena.graph.Node r0, $r1;
        java.lang.String $r6, $r8, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r3;
        org.apache.jena.riot.out.NodeToLabel r13;
        java.io.Writer r7;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.Object $r10;

        r7 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r9 := @parameter2: org.apache.jena.riot.system.Prologue;

        r13 := @parameter3: org.apache.jena.riot.out.NodeToLabel;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void printIRI(java.io.Writer,java.lang.String,org.apache.jena.riot.system.Prologue)>(r7, $r12, r9);

        return;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label3;

        if r13 != null goto label2;

        r13 = staticinvoke <org.apache.jena.riot.out.NodeToLabel: org.apache.jena.riot.out.NodeToLabel labelByInternal()>();

     label2:
        $r10 = virtualinvoke r13.<org.apache.jena.riot.out.NodeToLabel: java.lang.Object get(java.lang.Object,java.lang.Object)>(null, r0);

        $r11 = (java.lang.String) $r10;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r7, $r11);

        return;

     label3:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label4;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void printLiteral(java.io.Writer,com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.Prologue)>(r7, r0, r9);

        return;

     label4:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label5;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r7, 63);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r7, $r8);

        return;

     label5:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label6;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r7, "ANY");

        return;

     label6:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal node: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    private static void printLiteral(java.io.Writer, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue)
    {
        org.apache.jena.riot.system.Prologue r5;
        com.hp.hpl.jena.graph.Node r1;
        java.io.Writer r0;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r6, $r7, $r8;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: org.apache.jena.riot.system.Prologue;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r0, 34);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void outputEsc(java.io.Writer,java.lang.String,boolean)>(r0, $r2, 1);

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r0, 34);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r3 == null goto label1;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r0, 64);

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, $r7);

     label1:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r8 == null goto label2;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r0, "^^");

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void printIRI(java.io.Writer,java.lang.String,org.apache.jena.riot.system.Prologue)>(r0, $r4, r5);

     label2:
        return;
    }

    private static void printIRI(java.io.Writer, java.lang.String, org.apache.jena.riot.system.Prologue)
    {
        org.apache.jena.riot.system.Prologue r0;
        org.apache.jena.riot.system.PrefixMap $r2;
        java.io.Writer r1;
        java.lang.String $r3, $r4, $r5, r6;
        boolean $z0;

        r1 := @parameter0: java.io.Writer;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.jena.riot.system.Prologue;

        if r0 == null goto label2;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.PrefixMap getPrefixMap()>();

        if $r2 == null goto label1;

        $r5 = staticinvoke <org.apache.jena.riot.out.OutputLangUtils: java.lang.String prefixFor(java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r6, $r2);

        if $r5 == null goto label1;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, $r5);

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.jena.riot.system.Prologue: java.lang.String getBaseURI()>();

        if $r3 == null goto label2;

        $r4 = staticinvoke <org.apache.jena.riot.out.OutputLangUtils: java.lang.String abbrevByBase(java.lang.String,java.lang.String)>(r6, $r3);

        if $r4 == null goto label2;

        r6 = $r4;

     label2:
        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "<");

        $z0 = <org.apache.jena.riot.out.OutputLangUtils: boolean asciiOnly>;

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void outputEsc(java.io.Writer,java.lang.String,boolean)>(r1, r6, 0);

        goto label4;

     label3:
        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, r6);

     label4:
        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, ">");

        return;
    }

    private static java.lang.String prefixFor(java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        org.apache.jena.riot.system.PrefixMap r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: java.lang.String abbreviate(java.lang.String)>(r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        return null;
    }

    public static java.lang.String abbrevByBase(java.lang.String, java.lang.String)
    {
        java.net.MalformedURLException $r5;
        org.apache.jena.iri.IRIFactory $r1;
        int $i0;
        java.lang.String r0, r3, r6;
        org.apache.jena.iri.IRI $r2, $r4;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        $r2 = virtualinvoke $r1.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI construct(java.lang.String)>(r0);

        $i0 = <org.apache.jena.riot.out.OutputLangUtils: int relFlags>;

        $r4 = virtualinvoke $r2.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r3, $i0);

     label2:
        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toASCIIString()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

     label5:
        return r6;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    private static void print(java.io.Writer, java.lang.String)
    {
        java.io.Writer r0;
        java.io.IOException $r2;
        java.lang.String r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.lang.String;

     label1:
        virtualinvoke r0.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void print(java.io.Writer, char)
    {
        java.io.Writer r0;
        char c0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

     label1:
        virtualinvoke r0.<java.io.Writer: java.io.Writer append(char)>(c0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void println(java.io.Writer)
    {
        java.io.Writer r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.Writer;

     label1:
        virtualinvoke r0.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("\n");

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void outputEsc(java.io.Writer, java.lang.String, boolean)
    {
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r0;
        boolean z0, $z1;
        char $c1;
        java.io.Writer r1;

        r1 := @parameter0: java.io.Writer;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label01:
        if i2 >= $i0 goto label11;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 92 goto label02;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r1, 92);

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r1, $c1);

        goto label10;

     label02:
        if z0 == 0 goto label07;

        $i4 = (int) $c1;

        if $i4 != 34 goto label03;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\\"");

        goto label10;

     label03:
        $i5 = (int) $c1;

        if $i5 != 10 goto label04;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\n");

        goto label10;

     label04:
        $i6 = (int) $c1;

        if $i6 != 9 goto label05;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\t");

        goto label10;

     label05:
        $i7 = (int) $c1;

        if $i7 != 13 goto label06;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\r");

        goto label10;

     label06:
        $i8 = (int) $c1;

        if $i8 != 12 goto label07;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\f");

        goto label10;

     label07:
        $i9 = (int) $c1;

        if $i9 < 32 goto label08;

        $i10 = (int) $c1;

        if $i10 >= 127 goto label08;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r1, $c1);

        goto label10;

     label08:
        $z1 = <org.apache.jena.riot.out.OutputLangUtils: boolean asciiOnly>;

        if $z1 != 0 goto label09;

        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,char)>(r1, $c1);

        goto label10;

     label09:
        staticinvoke <org.apache.jena.riot.out.OutputLangUtils: void print(java.io.Writer,java.lang.String)>(r1, "\\u");

        $i11 = (int) $c1;

        staticinvoke <org.apache.jena.atlas.io.OutputUtils: void printHex(java.io.Writer,int,int)>(r1, $i11, 4);

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        return;
    }

    static void <clinit>()
    {
        <org.apache.jena.riot.out.OutputLangUtils: boolean applyUnicodeEscapes> = 1;

        <org.apache.jena.riot.out.OutputLangUtils: boolean asciiOnly> = 1;

        <org.apache.jena.riot.out.OutputLangUtils: int relFlags> = 9;

        return;
    }
}
