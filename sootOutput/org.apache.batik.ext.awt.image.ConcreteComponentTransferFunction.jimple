public class org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction extends java.lang.Object implements org.apache.batik.ext.awt.image.ComponentTransferFunction
{
    private int type;
    private float slope;
    private float[] tableValues;
    private float intercept;
    private float amplitude;
    private float exponent;
    private float offset;

    private void <init>()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.batik.ext.awt.image.ComponentTransferFunction getIdentityTransfer()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction $r0;

        $r0 = new org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type> = 0;

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.ComponentTransferFunction getTableTransfer(float[])
    {
        float[] r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction $r0;
        int $i0, $i1, $i2;

        r1 := @parameter0: float[];

        $r0 = new org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type> = 1;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i1 = lengthof r1;

        $r2 = newarray (float)[$i1];

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float[] tableValues> = $r2;

        $r3 = $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float[] tableValues>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i2);

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.ComponentTransferFunction getDiscreteTransfer(float[])
    {
        float[] r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction $r0;
        int $i0, $i1, $i2;

        r1 := @parameter0: float[];

        $r0 = new org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type> = 2;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i1 = lengthof r1;

        $r2 = newarray (float)[$i1];

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float[] tableValues> = $r2;

        $r3 = $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float[] tableValues>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i2);

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.ComponentTransferFunction getLinearTransfer(float, float)
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction $r0;
        float f0, f1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r0 = new org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type> = 3;

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float slope> = f0;

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float intercept> = f1;

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.ComponentTransferFunction getGammaTransfer(float, float, float)
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction $r0;
        float f0, f1, f2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r0 = new org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type> = 4;

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float amplitude> = f0;

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float exponent> = f1;

        $r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float offset> = f2;

        return $r0;
    }

    public int getType()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $i0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: int type>;

        return $i0;
    }

    public float getSlope()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $f0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float slope>;

        return $f0;
    }

    public float[] getTableValues()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $r1 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float[] tableValues>;

        return $r1;
    }

    public float getIntercept()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $f0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float intercept>;

        return $f0;
    }

    public float getAmplitude()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $f0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float amplitude>;

        return $f0;
    }

    public float getExponent()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $f0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float exponent>;

        return $f0;
    }

    public float getOffset()
    {
        org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction;

        $f0 = r0.<org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: float offset>;

        return $f0;
    }
}
