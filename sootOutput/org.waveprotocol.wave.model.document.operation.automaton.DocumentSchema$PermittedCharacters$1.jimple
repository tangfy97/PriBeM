final enum class org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$1 extends org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters
{

    void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: void <init>(java.lang.String,int,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$1)>(r1, i0, null);

        return;
    }

    public java.lang.String coerceString(java.lang.String)
    {
        java.lang.String r2;
        java.lang.IllegalArgumentException $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$1 r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$1;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Text not permitted at all, can\'t convert");

        throw $r0;
    }
}
