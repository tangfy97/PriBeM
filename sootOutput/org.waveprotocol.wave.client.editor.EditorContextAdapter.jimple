public class org.waveprotocol.wave.client.editor.EditorContextAdapter extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorContext
{
    private org.waveprotocol.wave.client.editor.EditorContext editor;

    public void <init>(org.waveprotocol.wave.client.editor.EditorContext)
    {
        org.waveprotocol.wave.client.editor.EditorContext r1;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor> = r1;

        return;
    }

    public void checkEditor(org.waveprotocol.wave.client.editor.EditorContext)
    {
        org.waveprotocol.wave.client.editor.EditorContext r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "wrong editor");

        return;
    }

    public void switchEditor(org.waveprotocol.wave.client.editor.EditorContext)
    {
        org.waveprotocol.wave.client.editor.EditorContext r1;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor> = r1;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()>();

     label2:
        return $r3;
    }

    public org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.common.logging.Logger $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r3, $r6;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 != null goto label1;

        $r4 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Don\'t access editor selection with context not attached to an editor!");

        $r6 = <org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper NOP_IMPL>;

        return $r6;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        return $r3;
    }

    public org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r3;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()>();

     label2:
        return $r3;
    }

    public java.lang.String getImeCompositionState()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: java.lang.String getImeCompositionState()>();

     label2:
        return $r3;
    }

    public boolean isEditing()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: boolean isEditing()>();

     label2:
        return $z0;
    }

    public void blur()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: void blur()>();

     label1:
        return;
    }

    public void focus(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: void focus(boolean)>(z0);

     label1:
        return;
    }

    public void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorContext: void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)>(r2);

     label1:
        return;
    }

    public void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r2;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorContext: void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)>(r2);

     label1:
        return;
    }

    public org.waveprotocol.wave.client.editor.Responsibility$Manager getResponsibilityManager()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r2;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r3;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.Responsibility$Manager getResponsibilityManager()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void undoableSequence(java.lang.Runnable)
    {
        org.waveprotocol.wave.client.editor.EditorContext $r1, $r3;
        org.waveprotocol.wave.client.editor.EditorContextAdapter r0;
        java.lang.Runnable r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorContextAdapter;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "editor must not be null");

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorContextAdapter: org.waveprotocol.wave.client.editor.EditorContext editor>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorContext: void undoableSequence(java.lang.Runnable)>(r2);

        return;
    }
}
