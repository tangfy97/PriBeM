class bsh.BSHClassDeclaration extends bsh.SimpleNode
{
    static final java.lang.String CLASSINITNAME;
    java.lang.String name;
    bsh.Modifiers modifiers;
    int numInterfaces;
    boolean extend;
    boolean isInterface;

    void <init>(int)
    {
        int i0;
        bsh.BSHClassDeclaration r0;

        r0 := @this: bsh.BSHClassDeclaration;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        boolean $z0, $z1, $z2;
        bsh.Interpreter r3;
        bsh.Node $r1, $r18, $r19;
        bsh.BSHBlock $r13, r26;
        bsh.UtilEvalError $r21;
        bsh.CallStack r2;
        bsh.ClassGenerator $r14;
        java.lang.StringBuffer $r7, $r8, $r10, $r11;
        bsh.Modifiers $r15;
        bsh.BSHAmbiguousName r24, r25;
        int $i0, $i1, $i2, $i3, i4, i5;
        bsh.BSHClassDeclaration r0;
        java.lang.String $r9, $r12, $r16;
        bsh.EvalError $r6, $r22;
        java.lang.Class[] $r20;
        java.lang.Class $r4, $r5, $r17, r23;

        r0 := @this: bsh.BSHClassDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        i4 = 0;

        r23 = null;

        $z0 = r0.<bsh.BSHClassDeclaration: boolean extend>;

        if $z0 == 0 goto label1;

        i4 = 1;

        $r19 = virtualinvoke r0.<bsh.BSHClassDeclaration: bsh.Node jjtGetChild(int)>(0);

        r24 = (bsh.BSHAmbiguousName) $r19;

        r23 = virtualinvoke r24.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r2, r3);

     label1:
        $i0 = r0.<bsh.BSHClassDeclaration: int numInterfaces>;

        $r20 = newarray (java.lang.Class)[$i0];

        i5 = 0;

        goto label4;

     label2:
        $i2 = i4;

        i4 = i4 + 1;

        $r1 = virtualinvoke r0.<bsh.BSHClassDeclaration: bsh.Node jjtGetChild(int)>($i2);

        r25 = (bsh.BSHAmbiguousName) $r1;

        $r4 = virtualinvoke r25.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        $r20[i5] = $r4;

        $r5 = $r20[i5];

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label3;

        $r6 = new bsh.EvalError;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r9 = r25.<bsh.BSHAmbiguousName: java.lang.String text>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an interface!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r12, r0, r2);

        throw $r6;

     label3:
        i5 = i5 + 1;

     label4:
        $i1 = r0.<bsh.BSHClassDeclaration: int numInterfaces>;

        if i5 < $i1 goto label2;

        $i3 = virtualinvoke r0.<bsh.BSHClassDeclaration: int jjtGetNumChildren()>();

        if i4 >= $i3 goto label5;

        $r18 = virtualinvoke r0.<bsh.BSHClassDeclaration: bsh.Node jjtGetChild(int)>(i4);

        r26 = (bsh.BSHBlock) $r18;

        goto label6;

     label5:
        $r13 = new bsh.BSHBlock;

        specialinvoke $r13.<bsh.BSHBlock: void <init>(int)>(25);

        r26 = $r13;

     label6:
        $r14 = staticinvoke <bsh.ClassGenerator: bsh.ClassGenerator getClassGenerator()>();

        $r16 = r0.<bsh.BSHClassDeclaration: java.lang.String name>;

        $r15 = r0.<bsh.BSHClassDeclaration: bsh.Modifiers modifiers>;

        $z2 = r0.<bsh.BSHClassDeclaration: boolean isInterface>;

        $r17 = virtualinvoke $r14.<bsh.ClassGenerator: java.lang.Class generateClass(java.lang.String,bsh.Modifiers,java.lang.Class[],java.lang.Class,bsh.BSHBlock,boolean,bsh.CallStack,bsh.Interpreter)>($r16, $r15, $r20, r23, r26, $z2, r2, r3);

     label7:
        return $r17;

     label8:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r2);

        throw $r22;

        catch bsh.UtilEvalError from label6 to label7 with label8;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4;
        bsh.BSHClassDeclaration r2;
        java.lang.String $r3, $r5;

        r2 := @this: bsh.BSHClassDeclaration;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClassDeclaration: ");

        $r3 = r2.<bsh.BSHClassDeclaration: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <bsh.BSHClassDeclaration: java.lang.String CLASSINITNAME> = "_bshClassInit";

        return;
    }
}
