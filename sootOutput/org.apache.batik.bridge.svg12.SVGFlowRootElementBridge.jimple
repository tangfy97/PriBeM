public class org.apache.batik.bridge.svg12.SVGFlowRootElementBridge extends org.apache.batik.bridge.svg12.SVG12TextElementBridge
{
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS;
    public static final java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING;
    protected java.util.Map flowRegionNodes;
    protected org.apache.batik.gvt.TextNode textNode;
    protected org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener regionChangeListener;
    protected int startLen;
    int marginTopIndex;
    int marginRightIndex;
    int marginBottomIndex;
    int marginLeftIndex;
    int indentIndex;
    int textAlignIndex;
    int lineHeightIndex;

    protected org.apache.batik.gvt.TextNode getTextNode()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.apache.batik.gvt.TextNode $r1;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        $r1 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.TextNode textNode>;

        return $r1;
    }

    public void <init>()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginTopIndex> = $i1;

        $i3 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginRightIndex> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginBottomIndex> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginLeftIndex> = $i7;

        $i9 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int indentIndex> = $i9;

        $i11 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int textAlignIndex> = $i11;

        $i13 = (int) -1;

        r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int lineHeightIndex> = $i13;

        return;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        return "http://www.w3.org/2000/svg";
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        return "flowRoot";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        $r0 = new org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void <init>()>();

        return $r0;
    }

    public boolean isComposite()
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        return 0;
    }

    public org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r8;
        java.awt.geom.Point2D $r10;
        java.awt.RenderingHints $r5, $r6;
        org.apache.batik.gvt.CompositeGraphicsNode $r3, $r7;
        short $s1;
        org.w3c.dom.Node r16;
        int $i0;
        java.lang.String $r4;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode $r9;
        org.apache.batik.bridge.BridgeContext r1;
        java.awt.geom.AffineTransform $r15;
        org.apache.batik.gvt.flow.FlowTextNode $r14;
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element r0, $r12;
        org.apache.batik.gvt.TextPainter $r11, $r13;

        r8 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r3.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        $r4 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "transform");

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r15 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform convertTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "transform", $r4, r1);

        virtualinvoke $r3.<org.apache.batik.gvt.AbstractGraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r15);

     label2:
        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>(r0);

        virtualinvoke $r3.<org.apache.batik.gvt.CompositeGraphicsNode: void setVisible(boolean)>($z1);

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r0, null);

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertTextRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r0, $r5);

        if $r6 == null goto label3;

        virtualinvoke $r3.<org.apache.batik.gvt.AbstractGraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r6);

     label3:
        $r7 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r7.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        virtualinvoke $r3.<org.apache.batik.gvt.CompositeGraphicsNode: boolean add(java.lang.Object)>($r7);

        $r9 = virtualinvoke r8.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()>();

        $r14 = (org.apache.batik.gvt.flow.FlowTextNode) $r9;

        $r10 = virtualinvoke r8.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r0);

        virtualinvoke $r14.<org.apache.batik.gvt.TextNode: void setLocation(java.awt.geom.Point2D)>($r10);

        $r11 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter getTextPainter()>();

        if $r11 == null goto label4;

        $r13 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter getTextPainter()>();

        virtualinvoke $r14.<org.apache.batik.gvt.flow.FlowTextNode: void setTextPainter(org.apache.batik.gvt.TextPainter)>($r13);

     label4:
        r8.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.TextNode textNode> = $r14;

        virtualinvoke $r3.<org.apache.batik.gvt.CompositeGraphicsNode: boolean add(java.lang.Object)>($r14);

        virtualinvoke r8.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void associateSVGContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r0, $r3);

        r16 = virtualinvoke r8.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label7;

     label5:
        $s1 = interfaceinvoke r16.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label6;

        $r12 = (org.w3c.dom.Element) r16;

        virtualinvoke r8.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, $r12);

     label6:
        r16 = virtualinvoke r8.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r16);

     label7:
        if r16 != null goto label5;

        return $r3;
    }

    protected org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()
    {
        org.apache.batik.gvt.flow.FlowTextNode $r0;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r1;

        r1 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        $r0 = new org.apache.batik.gvt.flow.FlowTextNode;

        specialinvoke $r0.<org.apache.batik.gvt.flow.FlowTextNode: void <init>()>();

        return $r0;
    }

    protected java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r1;
        java.awt.geom.Point2D$Float $r0;
        org.w3c.dom.Element r3;
        org.apache.batik.bridge.BridgeContext r2;

        r1 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.awt.geom.Point2D$Float;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        return $r0;
    }

    protected boolean isTextElement(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r4;
        org.w3c.dom.Element r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r4 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z5 == 0 goto label3;

     label2:
        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;
    }

    protected boolean isTextChild(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r4;
        org.w3c.dom.Element r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r4 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z5 == 0 goto label3;

     label2:
        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;
    }

    public void buildGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r3;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener $r4, $r13;
        java.util.HashMap $r15;
        org.apache.batik.gvt.CompositeGraphicsNode r1, $r16;
        short $s0;
        org.apache.batik.dom.AbstractNode r19;
        java.util.Map $r10;
        org.w3c.dom.Node r17, r18;
        boolean $z0, z1, $z2, $z4, $z5;
        org.apache.batik.gvt.GraphicsNode r0, $r9, r20;
        org.apache.batik.bridge.GVTBuilder $r6;
        org.apache.batik.dom.events.EventSupport $r11;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.dom.svg12.XBLEventSupport r12;
        org.w3c.dom.Element r7, $r8;
        java.lang.Object $r5, $r14;

        r3 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r7 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r1 = (org.apache.batik.gvt.CompositeGraphicsNode) r0;

        $z0 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 != 0 goto label01;

        $z5 = 1;

        $z4 = 1;

        goto label02;

     label01:
        $z5 = 0;

        $z4 = 0;

     label02:
        z1 = $z4;

        if $z5 == 0 goto label03;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map flowRegionNodes> = $r15;

        goto label04;

     label03:
        $r4 = new org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener;

        specialinvoke $r4.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener: void <init>(org.apache.batik.bridge.svg12.SVGFlowRootElementBridge)>(r3);

        r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener regionChangeListener> = $r4;

     label04:
        $r5 = virtualinvoke r1.<org.apache.batik.gvt.CompositeGraphicsNode: java.lang.Object get(int)>(0);

        $r16 = (org.apache.batik.gvt.CompositeGraphicsNode) $r5;

        $r6 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        r17 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r7);

        goto label11;

     label05:
        $z2 = r17 instanceof org.apache.batik.dom.svg12.SVGOMFlowRegionElement;

        if $z2 == 0 goto label10;

        r18 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r17);

        goto label09;

     label06:
        $s0 = interfaceinvoke r18.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label07;

        goto label08;

     label07:
        $r8 = (org.w3c.dom.Element) r18;

        $r9 = virtualinvoke $r6.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r2, $r8);

        if $r9 == null goto label08;

        virtualinvoke $r16.<org.apache.batik.gvt.CompositeGraphicsNode: boolean add(java.lang.Object)>($r9);

        if z1 == 0 goto label08;

        $r10 = r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map flowRegionNodes>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r9);

     label08:
        r18 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r18);

     label09:
        if r18 != null goto label06;

        if z1 != 0 goto label10;

        r19 = (org.apache.batik.dom.AbstractNode) r17;

        $r11 = virtualinvoke r19.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r12 = (org.apache.batik.dom.svg12.XBLEventSupport) $r11;

        $r13 = r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$RegionChangeListener regionChangeListener>;

        virtualinvoke r12.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2000/svg", "shapechange", $r13, 0);

     label10:
        r17 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r17);

     label11:
        if r17 != null goto label05;

        $r14 = virtualinvoke r1.<org.apache.batik.gvt.CompositeGraphicsNode: java.lang.Object get(int)>(1);

        r20 = (org.apache.batik.gvt.GraphicsNode) $r14;

        specialinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void buildGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r2, r7, r20);

        r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map flowRegionNodes> = null;

        return;
    }

    protected void computeLaidoutText(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.w3c.dom.Element r2, $r3;
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.bridge.BridgeContext r1;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.w3c.dom.Element getFlowDivElement(org.w3c.dom.Element)>(r2);

        specialinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, $r3, r4);

        return;
    }

    protected void addContextToChild(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r3;
        short $s0;
        org.w3c.dom.Node r9;
        java.lang.String $r1, $r2, $r6;
        org.apache.batik.dom.svg.SVGOMElement $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r0, $r5;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$FlowContentBridge $r8;

        r3 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z4 == 0 goto label2;

     label1:
        $r7 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r8 = new org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$FlowContentBridge;

        specialinvoke $r8.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge$FlowContentBridge: void <init>(org.apache.batik.bridge.svg12.SVGFlowRootElementBridge,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.SVGTextElementBridge,org.w3c.dom.Element)>(r3, r4, r3, r0);

        virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>($r8);

     label2:
        r9 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label5;

     label3:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r5 = (org.w3c.dom.Element) r9;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, $r5);

     label4:
        r9 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r9);

     label5:
        if r9 != null goto label3;

        return;
    }

    protected void removeContextFromChild(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r3;
        org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler $r9;
        short $s0;
        org.apache.batik.dom.svg.SVGContext $r8;
        org.w3c.dom.Node r10;
        java.lang.String $r1, $r2, $r6;
        org.apache.batik.dom.svg.SVGOMElement $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r0, $r5;

        r3 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z4 == 0 goto label2;

     label1:
        $r7 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r9 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler) $r8;

        virtualinvoke $r9.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler: void dispose()>();

     label2:
        r10 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label5;

     label3:
        $s0 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r5 = (org.w3c.dom.Element) r10;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void removeContextFromChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, $r5);

     label4:
        r10 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r10);

     label5:
        if r10 != null goto label3;

        return;
    }

    protected java.text.AttributedString buildAttributedString(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r1;
        java.util.List $r3;
        org.w3c.dom.Element r0;
        java.text.AttributedCharacterIterator$Attribute $r5;
        org.apache.batik.bridge.BridgeContext r2;
        java.text.AttributedString $r4;

        r1 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.List getRegions(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r2, r0);

        $r4 = virtualinvoke r1.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedString getFlowDiv(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r2, r0);

        if $r4 != null goto label2;

        return $r4;

     label2:
        $r5 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS>;

        virtualinvoke $r4.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r5, $r3, 0, 1);

        staticinvoke <org.apache.batik.gvt.flow.TextLineBreaks: void findLineBrk(java.text.AttributedString)>($r4);

        return $r4;
    }

    protected void dumpACIWord(java.text.AttributedString)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r14;
        java.lang.Integer $r8;
        java.text.AttributedCharacterIterator$Attribute r4;
        java.lang.StringBuffer $r5, $r6, $r9, $r15, $r16;
        int $i0, $i2, $i4;
        java.lang.String $r11, $r13;
        java.io.PrintStream $r10, $r12;
        char c1;
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator $r3;
        java.lang.Object $r7;

        r14 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: java.text.AttributedString;

        if r0 != null goto label1;

        return;

     label1:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        r4 = <org.apache.batik.gvt.flow.TextLineBreaks: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT>;

        c1 = interfaceinvoke $r3.<java.text.CharacterIterator: char current()>();

        goto label4;

     label2:
        $r5 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = interfaceinvoke $r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>(r4);

        $r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        if $i0 >= 10 goto label3;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label3:
        c1 = interfaceinvoke $r3.<java.text.CharacterIterator: char next()>();

     label4:
        $i2 = (int) c1;

        $i4 = (int) 65535;

        if $i2 != $i4 goto label2;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return;
    }

    protected org.w3c.dom.Element getFlowDivElement(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r3;
        short $s0;
        org.w3c.dom.Element r0, r6;
        org.w3c.dom.Node r8;
        java.lang.String $r1, $r2, $r4, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r3 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/svg");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("flowRoot");

        if $z2 != 0 goto label3;

        return null;

     label3:
        r8 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label8;

     label4:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label5;

        goto label7;

     label5:
        $r4 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r5 = "http://www.w3.org/2000/svg";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label6;

        goto label7;

     label6:
        r6 = (org.w3c.dom.Element) r8;

        $r7 = interfaceinvoke r6.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z4 == 0 goto label7;

        return r6;

     label7:
        r8 = virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r8);

     label8:
        if r8 != null goto label4;

        return null;
    }

    protected java.text.AttributedString getFlowDiv(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.w3c.dom.Element r1, $r2;
        org.apache.batik.bridge.BridgeContext r3;
        java.text.AttributedString $r4;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r3 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.w3c.dom.Element getFlowDivElement(org.w3c.dom.Element)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedString gatherFlowPara(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r3, $r2);

        return $r4;
    }

    protected java.text.AttributedString gatherFlowPara(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.awt.Color $r1;
        java.lang.Integer $r13, $r14, $r18, $r24;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r12;
        java.text.AttributedString $r15;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer $r5;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r2;
        java.util.ArrayList $r6, $r7, $r8;
        short $s0;
        java.text.AttributedCharacterIterator$Attribute $r20, $r25, $r27;
        org.w3c.dom.Node r30;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        java.lang.String $r9, $r10, $r11;
        java.util.LinkedList $r29, r32;
        java.util.WeakHashMap $r4;
        java.util.Iterator $r16;
        org.apache.batik.gvt.text.TextPaintInfo $r0;
        org.w3c.dom.Element r3, r22, r31;
        org.apache.batik.gvt.flow.BlockInfo $r26, $r28;
        java.lang.Object $r17, $r19, $r21, $r23;

        r2 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r12 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r0.<org.apache.batik.gvt.text.TextPaintInfo: void <init>()>();

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible> = 1;

        $r1 = <java.awt.Color: java.awt.Color black>;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint> = $r1;

        $r4 = r2.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r0);

        $r5 = new org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        specialinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r30 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r3);

        goto label05;

     label01:
        $s0 = interfaceinvoke r30.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label04;

        $r9 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.lang.String getNamespaceURI()>();

        $r10 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label02;

        goto label04;

     label02:
        r31 = (org.w3c.dom.Element) r30;

        $r11 = interfaceinvoke r31.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z1 == 0 goto label03;

        virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r12, r31, 1, null, null, $r5, $r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r31);

        $r14 = new java.lang.Integer;

        $i2 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label04;

     label03:
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z2 == 0 goto label04;

        virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r12, r31, 1, null, null, $r5, $r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r31);

        $r13 = new java.lang.Integer;

        $i1 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r13);

     label04:
        r30 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r30);

     label05:
        if r30 != null goto label01;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = 0;

        $i3 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i4 = $i3 - 1;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i4;

        $r15 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: java.text.AttributedString toAttributedString()>();

        if $r15 != null goto label06;

        return null;

     label06:
        i7 = 0;

        $r16 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (java.lang.Integer) $r17;

        $i5 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        if $i5 != i7 goto label08;

        goto label09;

     label08:
        $r20 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r20, $r19, i7, $i5);

        i7 = $i5;

     label09:
        $z3 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label07;

        i8 = 0;

        r32 = null;

        i9 = 0;

        goto label14;

     label10:
        $r21 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i9);

        r22 = (org.w3c.dom.Element) $r21;

        $r23 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i9);

        $r24 = (java.lang.Integer) $r23;

        $i6 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        if i8 != $i6 goto label12;

        if r32 != null goto label11;

        $r29 = new java.util.LinkedList;

        specialinvoke $r29.<java.util.LinkedList: void <init>()>();

        r32 = $r29;

     label11:
        $r28 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.flow.BlockInfo makeBlockInfo(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r12, r22);

        interfaceinvoke r32.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label13;

     label12:
        $r25 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r26 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.flow.BlockInfo makeBlockInfo(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r12, r22);

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r25, $r26, i8, $i6);

        if r32 == null goto label13;

        $r27 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH>;

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r27, r32, i8, $i6);

        r32 = null;

     label13:
        i9 = i9 + 1;

        i8 = $i6;

     label14:
        $i10 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i9 < $i10 goto label10;

        return $r15;
    }

    protected java.util.List getRegions(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r2;
        org.apache.batik.bridge.BridgeContext r8;
        short $s0;
        org.w3c.dom.Element r5, r9, r10;
        org.w3c.dom.Node $r0, r11;
        java.lang.String $r3, $r4, $r6, $r7;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r8 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r9 := @parameter1: org.w3c.dom.Element;

        $r0 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r10 = (org.w3c.dom.Element) $r0;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r11 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r10);

        goto label6;

     label1:
        $s0 = interfaceinvoke r11.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label5;

     label2:
        $r3 = "http://www.w3.org/2000/svg";

        $r4 = interfaceinvoke r11.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        goto label5;

     label3:
        r5 = (org.w3c.dom.Element) r11;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r7 = "flowRegion";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        virtualinvoke r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void gatherRegionInfo(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,float,java.util.List)>(r8, r5, 0.0F, $r1);

     label5:
        r11 = virtualinvoke r2.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r11);

     label6:
        if r11 != null goto label1;

        return $r1;
    }

    protected void gatherRegionInfo(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, float, java.util.List)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r1;
        short $s0;
        java.util.Map $r7;
        org.w3c.dom.Node r9;
        boolean $z0, z1, $z2;
        java.awt.Shape $r3, r11;
        org.apache.batik.gvt.GraphicsNode $r10;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.gvt.flow.RegionInfo $r6;
        java.awt.geom.AffineTransform $r4;
        java.util.List r5;
        org.w3c.dom.Element r2;
        float f0;
        java.lang.Object $r8;

        r1 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        f0 := @parameter2: float;

        r5 := @parameter3: java.util.List;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z1 = $z2;

        r9 = virtualinvoke r1.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r2);

        goto label10;

     label03:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label04;

        goto label09;

     label04:
        if z1 == 0 goto label05;

        $r7 = r1.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map flowRegionNodes>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r10 = (org.apache.batik.gvt.GraphicsNode) $r8;

        goto label06;

     label05:
        $r10 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r9);

     label06:
        $r3 = interfaceinvoke $r10.<org.apache.batik.gvt.GraphicsNode: java.awt.Shape getOutline()>();

        r11 = $r3;

        if $r3 != null goto label07;

        goto label09;

     label07:
        $r4 = interfaceinvoke $r10.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        if $r4 == null goto label08;

        r11 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r3);

     label08:
        $r6 = new org.apache.batik.gvt.flow.RegionInfo;

        specialinvoke $r6.<org.apache.batik.gvt.flow.RegionInfo: void <init>(java.awt.Shape,float)>(r11, f0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r6);

     label09:
        r9 = virtualinvoke r1.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r9);

     label10:
        if r9 != null goto label03;

        return;
    }

    protected void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, boolean, java.lang.Integer, java.util.Map, org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer, java.util.List)
    {
        java.awt.Cursor $r28;
        java.lang.Integer r7, $r42, r46, r48, r51, r52, $r59, $r65;
        java.util.Map r43, r45;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer r4;
        org.apache.batik.bridge.UserAgent $r2, $r26;
        org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener $r63;
        java.awt.font.TextAttribute $r8;
        short $s38;
        java.lang.String $r3, $r11, $r12, $r13, $r14, $r15, $r17, $r20, $r21;
        org.apache.batik.dom.events.NodeEventTarget r50;
        org.apache.batik.bridge.SVGAElementBridge$AnchorListener $r61;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z13, $z14, $z15, $z16;
        java.util.Collection $r35;
        java.util.List r10;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r6;
        org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener $r62;
        java.util.HashMap r5, $r44, $r57, $r58, $r64;
        org.apache.batik.bridge.SVGAElementBridge$CursorHolder $r60;
        org.w3c.dom.Node r47;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i39, i40, $i41, $i42, $i43, $i44, $i45, $i47, $i49;
        java.util.WeakHashMap $r23, $r34, $r54;
        java.util.Iterator $r36;
        org.apache.batik.gvt.text.TextPaintInfo r25, r53, $r56;
        org.w3c.dom.Element r0, $r16, $r18, $r19, r49;
        java.lang.Object $r9, $r24, $r33, $r37, $r38, $r40, $r41, $r55;

        r6 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        z3 := @parameter2: boolean;

        r7 := @parameter3: java.lang.Integer;

        r43 := @parameter4: java.util.Map;

        r4 := @parameter5: org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        r10 := @parameter6: java.util.List;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r3 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLSpace(org.w3c.dom.Element)>(r0);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        $i0 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if z3 == 0 goto label03;

        $i37 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int startLen> = $i37;

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i37;

     label03:
        if $z2 == 0 goto label04;

        $i36 = r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int startLen>;

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i36;

     label04:
        if r43 != null goto label05;

        $r57 = new java.util.HashMap;

        $r44 = $r57;

        specialinvoke $r57.<java.util.HashMap: void <init>()>();

        goto label06;

     label05:
        $r58 = new java.util.HashMap;

        $r44 = $r58;

        specialinvoke $r58.<java.util.HashMap: void <init>(java.util.Map)>(r43);

     label06:
        r5 = $r44;

        r45 = virtualinvoke r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r0, null, r7, $r44);

        $r8 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        $r9 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r46 = r7;

        if $r9 == null goto label07;

        r46 = (java.lang.Integer) $r9;

     label07:
        $i1 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i1 == 0 goto label08;

        $i34 = interfaceinvoke r10.<java.util.List: int size()>();

        $i35 = $i34 - 1;

        $r41 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>($i35);

        $r42 = (java.lang.Integer) $r41;

        virtualinvoke $r42.<java.lang.Integer: int intValue()>();

     label08:
        r47 = virtualinvoke r6.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label29;

     label09:
        if $z2 == 0 goto label10;

        z11 = 0;

        goto label14;

     label10:
        $i2 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i3 = r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int startLen>;

        if $i2 != $i3 goto label11;

        z11 = 1;

        goto label14;

     label11:
        $i4 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i4 != 32 goto label12;

        $z16 = 1;

        $z15 = 1;

        goto label13;

     label12:
        $z16 = 0;

        $z15 = 0;

     label13:
        z11 = $z15;

        $i5 = interfaceinvoke r10.<java.util.List: int size()>();

        $i19 = $i5 - 1;

        if $z16 != 0 goto label14;

        if $i19 < 0 goto label14;

        $r33 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>($i19);

        r48 = (java.lang.Integer) $r33;

        $i18 = virtualinvoke r48.<java.lang.Integer: int intValue()>();

        if $i18 != $i2 goto label14;

        z11 = 1;

     label14:
        $s38 = interfaceinvoke r47.<org.w3c.dom.Node: short getNodeType()>();

        $i45 = (int) $s38;

        tableswitch($i45)
        {
            case 1: goto label15;
            case 2: goto label28;
            case 3: goto label26;
            case 4: goto label26;
            default: goto label28;
        };

     label15:
        $r13 = "http://www.w3.org/2000/svg";

        $r14 = interfaceinvoke r47.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 != 0 goto label16;

        goto label28;

     label16:
        r49 = (org.w3c.dom.Element) r47;

        $r15 = interfaceinvoke r47.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z5 == 0 goto label18;

        $i16 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, r49, 0, r46, r45, r4, r10);

        $i17 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $r59 = new java.lang.Integer;

        specialinvoke $r59.<java.lang.Integer: void <init>(int)>($i17);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r59);

        if $i16 == $i17 goto label17;

        r45 = null;

     label17:
        goto label28;

     label18:
        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z6 != 0 goto label19;

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z7 == 0 goto label21;

     label19:
        $i8 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, r49, 0, r46, r45, r4, r10);

        $i9 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i9 == $i8 goto label20;

        r45 = null;

     label20:
        goto label28;

     label21:
        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z8 == 0 goto label24;

        $z10 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z10 == 0 goto label22;

        r50 = (org.apache.batik.dom.events.NodeEventTarget) r49;

        $r26 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r60 = new org.apache.batik.bridge.SVGAElementBridge$CursorHolder;

        $r28 = <org.apache.batik.bridge.CursorManager: java.awt.Cursor DEFAULT_CURSOR>;

        specialinvoke $r60.<org.apache.batik.bridge.SVGAElementBridge$CursorHolder: void <init>(java.awt.Cursor)>($r28);

        $r61 = new org.apache.batik.bridge.SVGAElementBridge$AnchorListener;

        specialinvoke $r61.<org.apache.batik.bridge.SVGAElementBridge$AnchorListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r26, $r60);

        interfaceinvoke r50.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "click", $r61, 0, null);

        $r62 = new org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener;

        specialinvoke $r62.<org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r26, $r60);

        interfaceinvoke r50.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseover", $r62, 0, null);

        $r63 = new org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener;

        specialinvoke $r63.<org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r26, $r60);

        interfaceinvoke r50.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseout", $r63, 0, null);

     label22:
        $i14 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, r49, 0, r46, r45, r4, r10);

        $i15 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i15 == $i14 goto label23;

        r45 = null;

     label23:
        goto label28;

     label24:
        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z9 == 0 goto label28;

        $r16 = (org.w3c.dom.Element) r47;

        $r17 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>($r16);

        $r18 = (org.w3c.dom.Element) r47;

        $r19 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>($r18, $r17);

        $r20 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.String getElementContent(org.w3c.dom.Element)>($r19);

        $r21 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r20, $z2, z11);

        $i10 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i10 == 0 goto label25;

        $i11 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $r64 = new java.util.HashMap;

        specialinvoke $r64.<java.util.HashMap: void <init>()>();

        virtualinvoke r6.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r49, null, r7, $r64);

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r21, $r64);

        $i12 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        i13 = $i12 - 1;

        $r23 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r24 = virtualinvoke $r23.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r49);

        r25 = (org.apache.batik.gvt.text.TextPaintInfo) $r24;

        r25.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i11;

        r25.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = i13;

     label25:
        goto label28;

     label26:
        $r11 = interfaceinvoke r47.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r12 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r11, $z2, z11);

        $i6 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i6 == 0 goto label28;

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r12, r5);

        if $z2 == 0 goto label27;

        $i7 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i7;

     label27:
        r45 = null;

     label28:
        r47 = virtualinvoke r6.<org.apache.batik.bridge.svg12.SVG12TextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r47);

     label29:
        if r47 != null goto label09;

        if z3 == 0 goto label39;

        z13 = 0;

        goto label35;

     label30:
        $i28 = interfaceinvoke r10.<java.util.List: int size()>();

        i39 = $i28 - 1;

        $i29 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if i39 < 0 goto label34;

        $r38 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i39);

        r51 = (java.lang.Integer) $r38;

        $i30 = virtualinvoke r51.<java.lang.Integer: int intValue()>();

        if $i30 < $i29 goto label34;

        $r65 = new java.lang.Integer;

        $i31 = $i29 - 1;

        specialinvoke $r65.<java.lang.Integer: void <init>(int)>($i31);

        interfaceinvoke r10.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i39, $r65);

        $i47 = (int) -1;

        i40 = i39 + $i47;

        goto label33;

     label31:
        $r40 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i40);

        r52 = (java.lang.Integer) $r40;

        $i32 = virtualinvoke r52.<java.lang.Integer: int intValue()>();

        $i33 = $i29 - 1;

        if $i32 >= $i33 goto label32;

        goto label34;

     label32:
        interfaceinvoke r10.<java.util.List: java.lang.Object remove(int)>(i40);

        $i49 = (int) -1;

        i40 = i40 + $i49;

     label33:
        if i40 >= 0 goto label31;

     label34:
        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void stripLast()>();

        z13 = 1;

     label35:
        $i41 = r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit>;

        $i42 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i41 >= $i42 goto label36;

        $i27 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i27 == 32 goto label30;

     label36:
        if z13 == 0 goto label39;

        $r34 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r35 = virtualinvoke $r34.<java.util.AbstractMap: java.util.Collection values()>();

        $r36 = interfaceinvoke $r35.<java.util.Collection: java.util.Iterator iterator()>();

        goto label38;

     label37:
        $r37 = interfaceinvoke $r36.<java.util.Iterator: java.lang.Object next()>();

        r53 = (org.apache.batik.gvt.text.TextPaintInfo) $r37;

        $i20 = r53.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        $i21 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i20 < $i21 goto label38;

        $i22 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i23 = $i22 - 1;

        r53.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i23;

        $i25 = r53.<org.apache.batik.gvt.text.TextPaintInfo: int startChar>;

        $i24 = r53.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        if $i25 <= $i24 goto label38;

        $i26 = r53.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        r53.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i26;

     label38:
        $z14 = interfaceinvoke $r36.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label37;

     label39:
        $i43 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i44 = $i43 - 1;

        $r54 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r55 = virtualinvoke $r54.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r56 = (org.apache.batik.gvt.text.TextPaintInfo) $r55;

        $r56.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i0;

        $r56.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i44;

        return;
    }

    protected java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.text.TextPath, java.lang.Integer, java.util.Map)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        java.lang.Float $r7, $r8;
        org.apache.batik.bridge.BridgeContext r1;
        java.lang.Integer r4;
        org.w3c.dom.Element r2;
        java.text.AttributedCharacterIterator$Attribute $r9;
        java.util.Map r5, $r6;
        float $f0, $f1;
        org.apache.batik.gvt.text.TextPath r3;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.text.TextPath;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.util.Map;

        $r6 = specialinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r2, r3, r4, r5);

        $r7 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertFontSize(org.w3c.dom.Element)>(r2);

        $f0 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: float getLineHeight(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,float)>(r1, r2, $f0);

        $r9 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT>;

        $r8 = new java.lang.Float;

        specialinvoke $r8.<java.lang.Float: void <init>(float)>($f1);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        return $r6;
    }

    protected void checkMap(java.util.Map)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r6;
        java.util.Map r0;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r6 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: java.util.Map;

        $r1 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        $z1 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING>;

        $z2 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z2 == 0 goto label3;

        return;

     label3:
        $r4 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING>;

        $z3 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z3 == 0 goto label4;

        return;

     label4:
        $r5 = <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING>;

        $z4 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z4 == 0 goto label5;

        return;

     label5:
        return;
    }

    protected void initCSSPropertyIndexes(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r2;
        org.apache.batik.css.engine.CSSEngine $r1;
        org.w3c.dom.Element r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r2 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.CSSEngine getCSSEngine(org.w3c.dom.Element)>(r0);

        $i0 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("margin-top");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginTopIndex> = $i0;

        $i1 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("margin-right");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginRightIndex> = $i1;

        $i2 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("margin-bottom");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginBottomIndex> = $i2;

        $i3 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("margin-left");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginLeftIndex> = $i3;

        $i4 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("indent");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int indentIndex> = $i4;

        $i5 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("text-align");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int textAlignIndex> = $i5;

        $i6 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>("line-height");

        r2.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int lineHeightIndex> = $i6;

        return;
    }

    public org.apache.batik.gvt.flow.BlockInfo makeBlockInfo(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.lang.Float $r20;
        byte b7;
        boolean $z0;
        org.apache.batik.bridge.BridgeContext r11;
        java.util.List $r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        java.awt.font.TextAttribute $r18;
        java.util.HashMap $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9;
        java.lang.String $r21;
        org.apache.batik.css.engine.value.Value $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, r14, $r15;
        org.w3c.dom.Element r1;
        org.apache.batik.gvt.flow.BlockInfo $r24;
        java.lang.Object $r19;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r11 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        $i0 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginTopIndex>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void initCSSPropertyIndexes(org.w3c.dom.Element)>(r1);

     label1:
        $i1 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginTopIndex>;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i1);

        $f0 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i2 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginRightIndex>;

        $r3 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i2);

        $f1 = interfaceinvoke $r3.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i3 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginBottomIndex>;

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i3);

        $f2 = interfaceinvoke $r4.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i4 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int marginLeftIndex>;

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i4);

        $f3 = interfaceinvoke $r5.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i5 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int indentIndex>;

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i5);

        $f4 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i6 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int textAlignIndex>;

        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i6);

        r14 = $r7;

        $r8 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        if $r7 != $r8 goto label3;

        $r12 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, 11);

        $r13 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value LTR_VALUE>;

        if $r12 != $r13 goto label2;

        r14 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value START_VALUE>;

        goto label3;

     label2:
        r14 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value END_VALUE>;

     label3:
        $r15 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value START_VALUE>;

        if r14 != $r15 goto label4;

        b7 = 0;

        goto label7;

     label4:
        $r9 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value MIDDLE_VALUE>;

        if r14 != $r9 goto label5;

        b7 = 1;

        goto label7;

     label5:
        $r10 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value END_VALUE>;

        if r14 != $r10 goto label6;

        b7 = 2;

        goto label7;

     label6:
        b7 = 3;

     label7:
        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>(int)>(20);

        $r17 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getFontList(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.util.Map)>(r11, r1, $r23);

        $r18 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r19 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r20 = (java.lang.Float) $r19;

        $f5 = virtualinvoke $r20.<java.lang.Float: float floatValue()>();

        $f6 = virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: float getLineHeight(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,float)>(r11, r1, $f5);

        $r21 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        $r24 = new org.apache.batik.gvt.flow.BlockInfo;

        specialinvoke $r24.<org.apache.batik.gvt.flow.BlockInfo: void <init>(float,float,float,float,float,int,float,java.util.List,java.util.Map,boolean)>($f0, $f1, $f2, $f3, $f4, b7, $f6, $r17, $r23, $z0);

        return $r24;
    }

    protected float getLineHeight(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, float)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.apache.batik.css.engine.value.svg12.LineHeightValue $r5;
        org.apache.batik.css.engine.value.ComputedValue $r6;
        int $i0, $i1, $i3;
        boolean $z0, $z1, $z2;
        org.apache.batik.bridge.BridgeContext r7;
        org.apache.batik.css.engine.value.Value $r2, $r3, $r4, r8;
        org.w3c.dom.Element r1;
        float f0, $f1, $f2, f3;

        r0 := @this: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r7 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        f0 := @parameter2: float;

        $i0 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int lineHeightIndex>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: void initCSSPropertyIndexes(org.w3c.dom.Element)>(r1);

     label1:
        $i1 = r0.<org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: int lineHeightIndex>;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r1, $i1);

        r8 = $r2;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        if $r2 == $r3 goto label2;

        $r4 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        if $r2 != $r4 goto label3;

     label2:
        $f1 = f0 * 1.1F;

        return $f1;

     label3:
        $f2 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        f3 = $f2;

        $z0 = $r2 instanceof org.apache.batik.css.engine.value.ComputedValue;

        if $z0 == 0 goto label4;

        $r6 = (org.apache.batik.css.engine.value.ComputedValue) $r2;

        r8 = virtualinvoke $r6.<org.apache.batik.css.engine.value.ComputedValue: org.apache.batik.css.engine.value.Value getComputedValue()>();

     label4:
        $z1 = r8 instanceof org.apache.batik.css.engine.value.svg12.LineHeightValue;

        if $z1 == 0 goto label5;

        $r5 = (org.apache.batik.css.engine.value.svg12.LineHeightValue) r8;

        $z2 = virtualinvoke $r5.<org.apache.batik.css.engine.value.svg12.LineHeightValue: boolean getFontSizeRelative()>();

        if $z2 == 0 goto label5;

        f3 = $f2 * f0;

     label5:
        return f3;
    }

    static java.text.AttributedString access$003(org.apache.batik.bridge.svg12.SVGFlowRootElementBridge, java.text.AttributedString)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        java.text.AttributedString r1;

        r0 := @parameter0: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        r1 := @parameter1: java.text.AttributedString;

        r0.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = r1;

        return r1;
    }

    static org.apache.batik.bridge.BridgeContext access$101(org.apache.batik.bridge.svg12.SVGFlowRootElementBridge)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @parameter0: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        return $r1;
    }

    static org.w3c.dom.Element access$201(org.apache.batik.bridge.svg12.SVGFlowRootElementBridge)
    {
        org.apache.batik.bridge.svg12.SVGFlowRootElementBridge r0;
        org.w3c.dom.Element $r1;

        r0 := @parameter0: org.apache.batik.bridge.svg12.SVGFlowRootElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_PARAGRAPH>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH> = $r0;

        $r1 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_EMPTY_PARAGRAPH>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_LINE_BREAK>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_REGIONS>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS> = $r3;

        $r4 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LINE_HEIGHT>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT> = $r4;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH> = $r5;

        $r6 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE> = $r6;

        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING> = $r7;

        $r8 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING> = $r8;

        $r9 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING>;

        <org.apache.batik.bridge.svg12.SVGFlowRootElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING> = $r9;

        return;
    }
}
