class org.springframework.beans.factory.support.BeanDefinitionValueResolver extends java.lang.Object
{
    private final org.springframework.beans.factory.support.AbstractBeanFactory beanFactory;
    private final java.lang.String beanName;
    private final org.springframework.beans.factory.config.BeanDefinition beanDefinition;
    private final org.springframework.beans.TypeConverter typeConverter;

    public void <init>(org.springframework.beans.factory.support.AbstractBeanFactory, java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.TypeConverter)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        org.springframework.beans.factory.config.BeanDefinition r3;
        org.springframework.beans.TypeConverter r4;
        java.lang.String r2;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r0;

        r0 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r1 := @parameter0: org.springframework.beans.factory.support.AbstractBeanFactory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.springframework.beans.factory.config.BeanDefinition;

        r4 := @parameter3: org.springframework.beans.TypeConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory> = r1;

        r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName> = r2;

        r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition> = r3;

        r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.TypeConverter typeConverter> = r4;

        return;
    }

    public java.lang.Object resolveValueIfNecessary(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r16, $r17;
        org.springframework.beans.TypeConverter $r5;
        java.util.Set $r8, $r18, $r19;
        java.lang.StringBuilder $r36, $r37, $r38, $r39, $r46, $r48, $r54, $r56;
        java.lang.ClassLoader $r24;
        java.lang.Throwable $r42, $r50;
        org.springframework.beans.factory.config.BeanDefinitionHolder r59;
        org.springframework.beans.factory.BeanCreationException $r43, $r51;
        org.springframework.beans.factory.support.ManagedArray r61;
        org.springframework.beans.factory.config.BeanDefinition $r28, $r44, $r52, r60;
        java.lang.String $r22, $r27, $r31, $r33, $r40, $r45, $r47, $r49, $r53, $r55, $r57;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r1;
        java.util.Map$Entry r66;
        java.util.Properties $r7, r65;
        org.springframework.beans.factory.BeanDefinitionStoreException $r35;
        org.springframework.beans.factory.config.RuntimeBeanNameReference $r30;
        org.springframework.beans.factory.config.TypedStringValue $r13, $r14, r69;
        org.springframework.beans.factory.support.AbstractBeanFactory $r23, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        org.springframework.beans.factory.config.RuntimeBeanReference r58;
        java.util.List $r20, $r21, $r63;
        java.util.Iterator $r9;
        java.lang.Object r0, $r2, $r3, $r6, $r10, $r11, $r12, r15, $r26, $r29, $r32, $r41, $r64, r67, r68;
        java.lang.Class $r4, $r25, r62;

        r1 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r15 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.springframework.beans.factory.config.RuntimeBeanReference;

        if $z0 == 0 goto label01;

        r58 = (org.springframework.beans.factory.config.RuntimeBeanReference) r0;

        $r41 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveReference(java.lang.Object,org.springframework.beans.factory.config.RuntimeBeanReference)>(r15, r58);

        return $r41;

     label01:
        $z1 = r0 instanceof org.springframework.beans.factory.config.RuntimeBeanNameReference;

        if $z1 == 0 goto label03;

        $r30 = (org.springframework.beans.factory.config.RuntimeBeanNameReference) r0;

        $r31 = virtualinvoke $r30.<org.springframework.beans.factory.config.RuntimeBeanNameReference: java.lang.String getBeanName()>();

        $r32 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(java.lang.Object)>($r31);

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r32);

        $r34 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $z13 = virtualinvoke $r34.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBean(java.lang.String)>($r33);

        if $z13 != 0 goto label02;

        $r35 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid bean name \'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in bean reference for ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label02:
        return $r33;

     label03:
        $z2 = r0 instanceof org.springframework.beans.factory.config.BeanDefinitionHolder;

        if $z2 == 0 goto label04;

        r59 = (org.springframework.beans.factory.config.BeanDefinitionHolder) r0;

        $r27 = virtualinvoke r59.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r28 = virtualinvoke r59.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        $r29 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r15, $r27, $r28);

        return $r29;

     label04:
        $z3 = r0 instanceof org.springframework.beans.factory.config.BeanDefinition;

        if $z3 == 0 goto label05;

        r60 = (org.springframework.beans.factory.config.BeanDefinition) r0;

        $r26 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r15, "(inner bean)", r60);

        return $r26;

     label05:
        $z4 = r0 instanceof org.springframework.beans.factory.support.ManagedArray;

        if $z4 == 0 goto label11;

        r61 = (org.springframework.beans.factory.support.ManagedArray) r0;

        r62 = r61.<org.springframework.beans.factory.support.ManagedArray: java.lang.Class resolvedElementType>;

        if r62 != null goto label10;

        $r22 = virtualinvoke r61.<org.springframework.beans.factory.support.ManagedArray: java.lang.String getElementTypeName()>();

        $z12 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r22);

        if $z12 == 0 goto label09;

     label06:
        $r23 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r24 = virtualinvoke $r23.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        $r25 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r22, $r24);

        r62 = $r25;

        r61.<org.springframework.beans.factory.support.ManagedArray: java.lang.Class resolvedElementType> = $r25;

     label07:
        goto label10;

     label08:
        $r50 := @caughtexception;

        $r51 = new org.springframework.beans.factory.BeanCreationException;

        $r52 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r53 = interfaceinvoke $r52.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r55 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error resolving array type for ");

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r53, $r55, $r57, $r50);

        throw $r51;

     label09:
        r62 = class "Ljava/lang/Object;";

     label10:
        $r63 = (java.util.List) r0;

        $r64 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveManagedArray(java.lang.Object,java.util.List,java.lang.Class)>(r15, $r63, r62);

        return $r64;

     label11:
        $z5 = r0 instanceof org.springframework.beans.factory.support.ManagedList;

        if $z5 == 0 goto label12;

        $r20 = (java.util.List) r0;

        $r21 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.List resolveManagedList(java.lang.Object,java.util.List)>(r15, $r20);

        return $r21;

     label12:
        $z6 = r0 instanceof org.springframework.beans.factory.support.ManagedSet;

        if $z6 == 0 goto label13;

        $r18 = (java.util.Set) r0;

        $r19 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>(r15, $r18);

        return $r19;

     label13:
        $z7 = r0 instanceof org.springframework.beans.factory.support.ManagedMap;

        if $z7 == 0 goto label14;

        $r16 = (java.util.Map) r0;

        $r17 = specialinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Map resolveManagedMap(java.lang.Object,java.util.Map)>(r15, $r16);

        return $r17;

     label14:
        $z8 = r0 instanceof org.springframework.beans.factory.support.ManagedProperties;

        if $z8 == 0 goto label19;

        r65 = (java.util.Properties) r0;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        $r8 = virtualinvoke r65.<java.util.Properties: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label18;

     label15:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r66 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getKey()>();

        r67 = $r11;

        $r12 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getValue()>();

        r68 = $r12;

        $z10 = $r11 instanceof org.springframework.beans.factory.config.TypedStringValue;

        if $z10 == 0 goto label16;

        $r14 = (org.springframework.beans.factory.config.TypedStringValue) $r11;

        r67 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(org.springframework.beans.factory.config.TypedStringValue)>($r14);

     label16:
        $z11 = $r12 instanceof org.springframework.beans.factory.config.TypedStringValue;

        if $z11 == 0 goto label17;

        $r13 = (org.springframework.beans.factory.config.TypedStringValue) $r12;

        r68 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(org.springframework.beans.factory.config.TypedStringValue)>($r13);

     label17:
        virtualinvoke $r7.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r67, r68);

     label18:
        $z14 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label15;

        return $r7;

     label19:
        $z9 = r0 instanceof org.springframework.beans.factory.config.TypedStringValue;

        if $z9 == 0 goto label24;

        r69 = (org.springframework.beans.factory.config.TypedStringValue) r0;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(org.springframework.beans.factory.config.TypedStringValue)>(r69);

     label20:
        $r4 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Class resolveTargetType(org.springframework.beans.factory.config.TypedStringValue)>(r69);

        if $r4 == null goto label22;

        $r5 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.TypeConverter typeConverter>;

        $r6 = interfaceinvoke $r5.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>($r3, $r4);

     label21:
        return $r6;

     label22:
        return $r3;

     label23:
        $r42 := @caughtexception;

        $r43 = new org.springframework.beans.factory.BeanCreationException;

        $r44 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r45 = interfaceinvoke $r44.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r47 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error converting typed String value for ");

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r45, $r47, $r49, $r42);

        throw $r43;

     label24:
        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(java.lang.Object)>(r0);

        return $r2;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label20 to label21 with label23;
    }

    protected java.lang.Object evaluate(org.springframework.beans.factory.config.TypedStringValue)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r2;
        org.springframework.beans.factory.config.TypedStringValue r1;
        org.springframework.beans.factory.config.BeanDefinition $r4;
        java.lang.Object $r5;
        java.lang.String $r3, $r6;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r0;

        r0 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r1 := @parameter0: org.springframework.beans.factory.config.TypedStringValue;

        $r2 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.config.TypedStringValue: java.lang.String getValue()>();

        $r4 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r5 = virtualinvoke $r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object evaluateBeanDefinitionString(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r3, $r4);

        $r6 = virtualinvoke r1.<org.springframework.beans.factory.config.TypedStringValue: java.lang.String getValue()>();

        if $r5 == $r6 goto label1;

        virtualinvoke r1.<org.springframework.beans.factory.config.TypedStringValue: void setDynamic()>();

     label1:
        return $r5;
    }

    protected java.lang.Object evaluate(java.lang.Object)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r4;
        org.springframework.beans.factory.config.BeanDefinition $r2;
        java.lang.Object r0, $r5;
        java.lang.String $r3;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r1;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r4 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r3 = (java.lang.String) r0;

        $r2 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r5 = virtualinvoke $r4.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object evaluateBeanDefinitionString(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r3, $r2);

        return $r5;

     label1:
        return r0;
    }

    protected java.lang.Class resolveTargetType(org.springframework.beans.factory.config.TypedStringValue) throws java.lang.ClassNotFoundException
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r2;
        org.springframework.beans.factory.config.TypedStringValue r0;
        java.lang.Class $r4, $r5;
        java.lang.ClassLoader $r3;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r1;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r0 := @parameter0: org.springframework.beans.factory.config.TypedStringValue;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.config.TypedStringValue: boolean hasTargetType()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.config.TypedStringValue: java.lang.Class getTargetType()>();

        return $r5;

     label1:
        $r2 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r3 = virtualinvoke $r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.config.TypedStringValue: java.lang.Class resolveTargetType(java.lang.ClassLoader)>($r3);

        return $r4;
    }

    private java.lang.Object resolveInnerBean(java.lang.Object, java.lang.String, org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r4, $r7, $r10, $r12, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r19, $r20, $r23, $r25, $r26, $r33, $r35, $r36, $r37;
        org.springframework.beans.factory.support.RootBeanDefinition $r5, r27;
        java.lang.String[] $r6;
        org.springframework.beans.factory.FactoryBean $r11;
        org.springframework.beans.factory.BeanCreationException $r30;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition r2, $r3, $r18;
        java.lang.String r1, $r9, $r14, $r22, $r24, r28, r29, $r31, $r32, $r34, $r38;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r0;
        org.springframework.beans.BeansException $r17;
        java.lang.Object $r8, $r13, r21;

        r0 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r21 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.springframework.beans.factory.config.BeanDefinition;

        r27 = null;

     label01:
        $r4 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r3 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r5 = virtualinvoke $r4.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.config.BeanDefinition)>(r1, r2, $r3);

        r27 = $r5;

        r28 = r1;

        $z0 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z0 == 0 goto label02;

        r28 = specialinvoke r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String adaptInnerBeanName(java.lang.String)>(r1);

     label02:
        $r6 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String[] getDependsOn()>();

        if $r6 == null goto label05;

        i0 = lengthof $r6;

        i1 = 0;

        goto label04;

     label03:
        r29 = $r6[i1];

        $r15 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        virtualinvoke $r15.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String)>(r29);

        $r16 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        virtualinvoke $r16.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>(r29, r28);

        i1 = i1 + 1;

     label04:
        if i1 < i0 goto label03;

     label05:
        $r7 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r8 = virtualinvoke $r7.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r28, $r5, null);

        $r10 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r9 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        virtualinvoke $r10.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerContainedBean(java.lang.String,java.lang.String)>(r28, $r9);

        $z1 = $r8 instanceof org.springframework.beans.factory.FactoryBean;

        if $z1 == 0 goto label11;

        if $r5 == null goto label06;

        $z2 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z2 == 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        $r12 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r11 = (org.springframework.beans.factory.FactoryBean) $r8;

        $r14 = r28;

        if $z3 == 0 goto label08;

        $z4 = 0;

        goto label09;

     label08:
        $z4 = 1;

     label09:
        $r13 = virtualinvoke $r12.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectFromFactoryBean(org.springframework.beans.factory.FactoryBean,java.lang.String,boolean)>($r11, $r14, $z4);

     label10:
        return $r13;

     label11:
        return $r8;

     label12:
        $r17 := @caughtexception;

        $r30 = new org.springframework.beans.factory.BeanCreationException;

        $r18 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r31 = interfaceinvoke $r18.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r32 = r0.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create inner bean \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        if r27 == null goto label13;

        $r22 = virtualinvoke r27.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        if $r22 == null goto label13;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("of type [");

        $r24 = virtualinvoke r27.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r34 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label13:
        $r34 = "";

     label14:
        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("while setting ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r31, $r32, $r38, $r17);

        throw $r30;

        catch org.springframework.beans.BeansException from label01 to label10 with label12;
    }

    private java.lang.String adaptInnerBeanName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r2;
        int i0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r0, $r4, r7;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r1;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r0 := @parameter0: java.lang.String;

        r7 = r0;

        i0 = 0;

        goto label2;

     label1:
        i0 = i0 + 1;

        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r2 = r1.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $z0 = virtualinvoke $r2.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isBeanNameInUse(java.lang.String)>(r7);

        if $z0 != 0 goto label1;

        return r7;
    }

    private java.lang.Object resolveReference(java.lang.Object, org.springframework.beans.factory.config.RuntimeBeanReference)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory $r5, $r8, $r9, $r11;
        boolean $z0;
        org.springframework.beans.factory.config.RuntimeBeanReference r0;
        java.lang.StringBuilder $r17, $r19, $r20, $r26, $r29, $r30, $r32;
        org.springframework.beans.factory.BeanCreationException $r14, $r23;
        org.springframework.beans.factory.config.BeanDefinition $r15, $r24;
        java.lang.String $r1, $r4, $r7, $r16, $r18, $r21, $r25, $r27, $r28, $r33;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r2;
        org.springframework.beans.BeansException $r22;
        org.springframework.beans.factory.BeanFactory $r10, $r12;
        java.lang.Object $r3, $r6, $r13, r31;

        r2 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r31 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.springframework.beans.factory.config.RuntimeBeanReference;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String getBeanName()>();

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object evaluate(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.config.RuntimeBeanReference: boolean isToParent()>();

        if $z0 == 0 goto label4;

        $r9 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r10 = virtualinvoke $r9.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r10 != null goto label2;

        $r14 = new org.springframework.beans.factory.BeanCreationException;

        $r15 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r16 = interfaceinvoke $r15.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r18 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can\'t resolve reference to bean \'");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in parent factory: no parent factory available");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r16, $r18, $r21);

        throw $r14;

     label2:
        $r11 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r12 = virtualinvoke $r11.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r13 = interfaceinvoke $r12.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r4);

     label3:
        return $r13;

     label4:
        $r5 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r6 = virtualinvoke $r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String)>($r4);

        $r8 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.support.AbstractBeanFactory beanFactory>;

        $r7 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        virtualinvoke $r8.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>($r4, $r7);

     label5:
        return $r6;

     label6:
        $r22 := @caughtexception;

        $r23 = new org.springframework.beans.factory.BeanCreationException;

        $r24 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: org.springframework.beans.factory.config.BeanDefinition beanDefinition>;

        $r25 = interfaceinvoke $r24.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r27 = r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.String beanName>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot resolve reference to bean \'");

        $r28 = virtualinvoke r0.<org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String getBeanName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' while setting ");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r25, $r27, $r33, $r22);

        throw $r23;

        catch org.springframework.beans.BeansException from label1 to label3 with label6;
        catch org.springframework.beans.BeansException from label4 to label5 with label6;
    }

    private java.lang.Object resolveManagedArray(java.lang.Object, java.util.List, java.lang.Class)
    {
        java.lang.Integer $r6;
        java.util.List r1;
        int $i0, $i1, i2;
        java.lang.Class r0;
        java.lang.Object $r2, r5, $r7, $r8;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName $r4;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r3;

        r3 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r5 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.List;

        r0 := @parameter2: java.lang.Class;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, $i0);

        i2 = 0;

        goto label2;

     label1:
        $r4 = new org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r4.<org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName: void <init>(java.lang.Object,java.lang.Object)>(r5, $r6);

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r8 = virtualinvoke r3.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>($r4, $r7);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r2, i2, $r8);

        i2 = i2 + 1;

     label2:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 < $i1 goto label1;

        return $r2;
    }

    private java.util.List resolveManagedList(java.lang.Object, java.util.List)
    {
        java.lang.Integer $r5;
        java.util.ArrayList $r0;
        java.util.List r1;
        int $i0, $i1, i2;
        java.lang.Object r4, $r6, $r7;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName $r3;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r2;

        r2 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName: void <init>(java.lang.Object,java.lang.Object)>(r4, $r5);

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r7 = virtualinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>($r3, $r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

     label2:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 < $i1 goto label1;

        return $r0;
    }

    private java.util.Set resolveManagedSet(java.lang.Object, java.util.Set)
    {
        java.util.Iterator $r2;
        java.util.Set r1;
        java.lang.Integer $r7;
        int $i0, i1;
        java.lang.Object $r3, r6, $r8;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName $r5;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r4;
        java.util.LinkedHashSet $r0;
        boolean $z0;

        r4 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r6 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Set;

        $r0 = new java.util.LinkedHashSet;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>($i0);

        i1 = 0;

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = new org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r5.<org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName: void <init>(java.lang.Object,java.lang.Object)>(r6, $r7);

        $r8 = virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>($r5, $r3);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    private java.util.Map resolveManagedMap(java.lang.Object, java.util.Map)
    {
        java.util.LinkedHashMap $r0;
        java.util.Map r1;
        int $i0;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver r6;
        boolean $z0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, r7, $r8, $r9, $r11, $r12, $r13;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName $r10;

        r6 := @this: org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        r7 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Map;

        $r0 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = virtualinvoke r6.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>(r7, $r8);

        $r10 = new org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName;

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        specialinvoke $r10.<org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName: void <init>(java.lang.Object,java.lang.Object)>(r7, $r11);

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = virtualinvoke r6.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>($r10, $r12);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r13);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }
}
