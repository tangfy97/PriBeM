public class org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE extends org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK
{

    void <init>(java.awt.image.ColorModel, java.awt.image.ColorModel)
    {
        java.awt.image.ColorModel r1, r2;
        org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE r0;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE;

        r1 := @parameter0: java.awt.image.ColorModel;

        r2 := @parameter1: java.awt.image.ColorModel;

        specialinvoke r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK: void <init>(java.awt.image.ColorModel,java.awt.image.ColorModel)>(r1, r2);

        $z0 = virtualinvoke r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("OverCompositeContext_INT_PACK_UNPRE is only forsources with unpremultiplied alpha");

        throw $r3;

     label1:
        return;
    }

    public void compose(java.awt.image.Raster, java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE r0;
        java.awt.image.ColorModel $r1, $r5, $r7, r9;
        java.awt.image.Raster r2, r3;
        java.awt.image.WritableRaster r4, $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE;

        r2 := @parameter0: java.awt.image.Raster;

        r3 := @parameter1: java.awt.image.Raster;

        r4 := @parameter2: java.awt.image.WritableRaster;

        r9 = r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext: java.awt.image.ColorModel dstCM>;

        $r1 = r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext: java.awt.image.ColorModel dstCM>;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 != 0 goto label1;

        $r8 = (java.awt.image.WritableRaster) r3;

        $r7 = r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext: java.awt.image.ColorModel dstCM>;

        r9 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r8, $r7, 1);

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK: void precompose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)>(r2, r3, r4);

        $r5 = r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext: java.awt.image.ColorModel dstCM>;

        $z1 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z1 != 0 goto label2;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r4, r9, 0);

        if r3 == r4 goto label2;

        $r6 = (java.awt.image.WritableRaster) r3;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r6, r9, 0);

     label2:
        return;
    }

    public void precompose_INT_PACK(int, int, int[], int, int, int[], int, int, int[], int, int)
    {
        int[] r0, r1, r2;
        int i0, i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, i49, i50, i51, i52, i53, i54, i55;
        org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE r3;

        r3 := @this: org.apache.batik.ext.awt.image.SVGComposite$OverCompositeContext_INT_PACK_UNPRE;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i49 := @parameter3: int;

        i52 := @parameter4: int;

        r1 := @parameter5: int[];

        i50 := @parameter6: int;

        i53 := @parameter7: int;

        r2 := @parameter8: int[];

        i51 := @parameter9: int;

        i54 := @parameter10: int;

        i55 = 0;

        goto label4;

     label1:
        i2 = i54 + i1;

        goto label3;

     label2:
        $i3 = i52;

        i52 = i52 + 1;

        i4 = r0[$i3];

        $i5 = i53;

        i53 = i53 + 1;

        i6 = r1[$i5];

        $i7 = i4 >>> 24;

        i8 = $i7 * 65793;

        $i9 = i4 >>> 24;

        $i10 = 255 - $i9;

        i11 = $i10 * 65793;

        $i12 = i54;

        i54 = i54 + 1;

        $i15 = i4 & -16777216;

        $i13 = i6 >>> 24;

        $i14 = $i13 * i11;

        $i16 = $i15 + $i14;

        $i17 = $i16 + 8388608;

        $i28 = $i17 & -16777216;

        $i18 = i4 >> 16;

        $i19 = $i18 & 255;

        $i23 = $i19 * i8;

        $i20 = i6 >> 16;

        $i21 = $i20 & 255;

        $i22 = $i21 * i11;

        $i24 = $i23 + $i22;

        $i25 = $i24 + 8388608;

        $i26 = $i25 & -16777216;

        $i27 = $i26 >>> 8;

        $i39 = $i28 | $i27;

        $i29 = i4 >> 8;

        $i30 = $i29 & 255;

        $i34 = $i30 * i8;

        $i31 = i6 >> 8;

        $i32 = $i31 & 255;

        $i33 = $i32 * i11;

        $i35 = $i34 + $i33;

        $i36 = $i35 + 8388608;

        $i37 = $i36 & -16777216;

        $i38 = $i37 >>> 16;

        $i47 = $i39 | $i38;

        $i40 = i4 & 255;

        $i43 = $i40 * i8;

        $i41 = i6 & 255;

        $i42 = $i41 * i11;

        $i44 = $i43 + $i42;

        $i45 = $i44 + 8388608;

        $i46 = $i45 >>> 24;

        $i48 = $i47 | $i46;

        r2[$i12] = $i48;

     label3:
        if i54 < i2 goto label2;

        i52 = i52 + i49;

        i53 = i53 + i50;

        i54 = i54 + i51;

        i55 = i55 + 1;

     label4:
        if i55 < i0 goto label1;

        return;
    }
}
