public class org.apache.commons.codec.binary.Hex extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    public static final java.lang.String DEFAULT_CHARSET_NAME;
    private static final char[] DIGITS_LOWER;
    private static final char[] DIGITS_UPPER;
    private final java.lang.String charsetName;

    public static byte[] decodeHex(char[]) throws org.apache.commons.codec.DecoderException
    {
        byte[] r1;
        byte $b8;
        int i0, $i1, $i2, $i4, $i6, $i7, i9, i10, i11, i12, i13;
        org.apache.commons.codec.DecoderException $r2;
        char $c3, $c5;
        char[] r0;

        r0 := @parameter0: char[];

        i0 = lengthof r0;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r2.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Odd number of characters.");

        throw $r2;

     label1:
        $i2 = i0 >> 1;

        r1 = newarray (byte)[$i2];

        i9 = 0;

        i10 = 0;

     label2:
        if i10 >= i0 goto label3;

        $c3 = r0[i10];

        $i4 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c3, i10);

        i11 = $i4 << 4;

        i12 = i10 + 1;

        $c5 = r0[i12];

        $i6 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c5, i12);

        i13 = i11 | $i6;

        i10 = i12 + 1;

        $i7 = i13 & 255;

        $b8 = (byte) $i7;

        r1[i9] = $b8;

        i9 = i9 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static char[] encodeHex(byte[])
    {
        byte[] r0;
        char[] $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public static char[] encodeHex(byte[], boolean)
    {
        byte[] r0;
        char[] $r1, $r2;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = <org.apache.commons.codec.binary.Hex: char[] DIGITS_LOWER>;

        goto label2;

     label1:
        $r2 = <org.apache.commons.codec.binary.Hex: char[] DIGITS_UPPER>;

     label2:
        $r1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],char[])>(r0, $r2);

        return $r1;
    }

    protected static char[] encodeHex(byte[], char[])
    {
        byte[] r0;
        short $s3, $s12;
        byte $b2, $b6, $b7;
        int i0, $i1, $i4, i9, i10, i11, $i13;
        char $c5, $c8;
        char[] r1, r2;

        r0 := @parameter0: byte[];

        r2 := @parameter1: char[];

        i0 = lengthof r0;

        $i1 = i0 << 1;

        r1 = newarray (char)[$i1];

        i9 = 0;

        i10 = 0;

     label1:
        if i9 >= i0 goto label2;

        i11 = i10 + 1;

        $b2 = r0[i9];

        $s12 = (short) $b2;

        $s3 = 240 & $s12;

        $i13 = (int) $s3;

        $i4 = $i13 >>> 4;

        $c5 = r2[$i4];

        r1[i10] = $c5;

        i10 = i11 + 1;

        $b6 = r0[i9];

        $b7 = 15 & $b6;

        $c8 = r2[$b7];

        r1[i11] = $c8;

        i9 = i9 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String encodeHexString(byte[])
    {
        byte[] r1;
        char[] $r2;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r2);

        return $r0;
    }

    protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.DecoderException $r8;
        char c0;
        int $i1, i2, $i4;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        c0 := @parameter0: char;

        i2 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Character: int digit(char,int)>(c0, 16);

        $i4 = (int) -1;

        if $i1 != $i4 goto label1;

        $r8 = new org.apache.commons.codec.DecoderException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hexadecimal character ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return $i1;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Hex r0;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.binary.Hex: java.lang.String charsetName> = "UTF-8";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.codec.binary.Hex r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.binary.Hex: java.lang.String charsetName> = r1;

        return;
    }

    public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException
    {
        byte[] r1, $r5;
        org.apache.commons.codec.DecoderException $r7;
        org.apache.commons.codec.binary.Hex r2;
        char[] $r4;
        java.lang.String $r0, $r3, $r8;
        java.io.UnsupportedEncodingException $r6;

        r2 := @this: org.apache.commons.codec.binary.Hex;

        r1 := @parameter0: byte[];

     label1:
        $r0 = new java.lang.String;

        $r3 = virtualinvoke r2.<org.apache.commons.codec.binary.Hex: java.lang.String getCharsetName()>();

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, $r3);

        $r4 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $r5 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.codec.DecoderException;

        $r8 = virtualinvoke $r6.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r7.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        byte[] $r2;
        org.apache.commons.codec.DecoderException $r5;
        org.apache.commons.codec.binary.Hex r7;
        java.lang.ClassCastException $r4;
        char[] $r1, $r8;
        java.lang.Object r0;
        java.lang.String $r3, $r6;
        boolean $z0;

        r7 := @this: org.apache.commons.codec.binary.Hex;

        r0 := @parameter0: java.lang.Object;

     label1:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.String) r0;

        $r8 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        goto label3;

     label2:
        $r1 = (char[]) r0;

        $r8 = (char[]) $r1;

     label3:
        $r2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r8);

     label4:
        return $r2;

     label5:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.codec.DecoderException;

        $r6 = virtualinvoke $r4.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r4);

        throw $r5;

        catch java.lang.ClassCastException from label1 to label4 with label5;
    }

    public byte[] encode(byte[])
    {
        byte[] r0, $r4;
        java.lang.String $r1, $r3;
        org.apache.commons.codec.binary.Hex r2;

        r2 := @this: org.apache.commons.codec.binary.Hex;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>(r0);

        $r3 = virtualinvoke r2.<org.apache.commons.codec.binary.Hex: java.lang.String getCharsetName()>();

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>($r1, $r3);

        return $r4;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        byte[] $r1, $r12;
        org.apache.commons.codec.EncoderException $r7, $r10;
        org.apache.commons.codec.binary.Hex r3;
        java.lang.ClassCastException $r9;
        char[] $r2;
        java.lang.Object r0;
        java.lang.String $r4, $r5, $r8, $r11;
        java.io.UnsupportedEncodingException $r6;
        boolean $z0;

        r3 := @this: org.apache.commons.codec.binary.Hex;

        r0 := @parameter0: java.lang.Object;

     label1:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.String) r0;

        $r5 = virtualinvoke r3.<org.apache.commons.codec.binary.Hex: java.lang.String getCharsetName()>();

        $r12 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>($r5);

        goto label3;

     label2:
        $r1 = (byte[]) r0;

        $r12 = (byte[]) $r1;

     label3:
        $r2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r12);

     label4:
        return $r2;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.codec.EncoderException;

        $r11 = virtualinvoke $r9.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r10.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r9);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.codec.EncoderException;

        $r8 = virtualinvoke $r6.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r7.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

        catch java.lang.ClassCastException from label1 to label4 with label5;
        catch java.io.UnsupportedEncodingException from label1 to label4 with label6;
    }

    public java.lang.String getCharsetName()
    {
        org.apache.commons.codec.binary.Hex r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        $r1 = r0.<org.apache.commons.codec.binary.Hex: java.lang.String charsetName>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.codec.binary.Hex r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.apache.commons.codec.binary.Hex;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[charsetName=");

        $r5 = r1.<org.apache.commons.codec.binary.Hex: java.lang.String charsetName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        char[] $r0, $r1;

        <org.apache.commons.codec.binary.Hex: java.lang.String DEFAULT_CHARSET_NAME> = "UTF-8";

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.apache.commons.codec.binary.Hex: char[] DIGITS_LOWER> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.apache.commons.codec.binary.Hex: char[] DIGITS_UPPER> = $r1;

        return;
    }
}
