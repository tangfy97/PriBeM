public class org.waveprotocol.wave.model.document.operation.DocumentCostFunction extends java.lang.Object
{
    private final int objectOverhead;

    public static org.waveprotocol.wave.model.document.operation.DocumentCostFunction withObjectOverhead(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction $r0;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: void <init>(int)>(i0);

        return $r0;
    }

    private void <init>(int)
    {
        java.lang.Object[] $r1;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r0;
        int i0;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Negative objectOverhead: %s", $r1);

        r0.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int objectOverhead> = i0;

        return;
    }

    public int computeCost(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r1;
        int $i0, $i1;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int codePointCount(int,int)>(0, $i0);

        return $i1;
    }

    public int computeCostNullable(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCost(java.lang.String)>(r0);

     label2:
        return $i0;
    }

    public int computeCost(org.waveprotocol.wave.model.document.operation.Attributes)
    {
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r7, $r9;
        boolean $z0;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r5;
        java.lang.Object $r3, $r6, $r8;

        r5 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        i5 = 0;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $i0 = r5.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int objectOverhead>;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $i1 = virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCost(java.lang.String)>($r7);

        $i2 = $i0 + $i1;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        $i3 = virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCost(java.lang.String)>($r9);

        $i4 = $i2 + $i3;

        i5 = i5 + $i4;

        goto label1;

     label2:
        return i5;
    }

    public int computeCost(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        java.lang.String $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        i12 = 0;

        i13 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i13 >= $i0 goto label2;

        $i5 = r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int objectOverhead>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i13);

        $i6 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCost(java.lang.String)>($r3);

        $i7 = $i5 + $i6;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i13);

        $i8 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCostNullable(java.lang.String)>($r4);

        $i9 = $i7 + $i8;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i13);

        $i10 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCostNullable(java.lang.String)>($r5);

        $i11 = $i9 + $i10;

        i12 = i12 + $i11;

        i13 = i13 + 1;

        goto label1;

     label2:
        i14 = 0;

     label3:
        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i14 >= $i1 goto label4;

        $i2 = r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int objectOverhead>;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i14);

        $i3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int computeCost(java.lang.String)>($r2);

        $i4 = $i2 + $i3;

        i12 = i12 + $i4;

        i14 = i14 + 1;

        goto label3;

     label4:
        return i12;
    }

    public int computeCost(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        int[] $r0;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r3;
        int $i0;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction$1 $r2;

        r3 := @this: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r0 = newarray (int)[1];

        $r0[0] = 0;

        $r2 = new org.waveprotocol.wave.model.document.operation.DocumentCostFunction$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction$1: void <init>(org.waveprotocol.wave.model.document.operation.DocumentCostFunction,int[])>(r3, $r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocInitialization: void apply(org.waveprotocol.wave.model.document.operation.DocInitializationCursor)>($r2);

        $i0 = $r0[0];

        return $i0;
    }

    static int access$000(org.waveprotocol.wave.model.document.operation.DocumentCostFunction)
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.DocumentCostFunction r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocumentCostFunction;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.DocumentCostFunction: int objectOverhead>;

        return $i0;
    }
}
