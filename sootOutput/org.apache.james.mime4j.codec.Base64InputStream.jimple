public class org.apache.james.mime4j.codec.Base64InputStream extends java.io.InputStream
{
    private static final int ENCODED_BUFFER_SIZE;
    private static final int[] BASE64_DECODE;
    private static final byte BASE64_PAD;
    private static final int EOF;
    private final byte[] singleByte;
    private final java.io.InputStream in;
    private final byte[] encoded;
    private final org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf;
    private int position;
    private int size;
    private boolean closed;
    private boolean eof;
    private final org.apache.james.mime4j.codec.DecodeMonitor monitor;
    static final boolean $assertionsDisabled;

    public void <init>(java.io.InputStream, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        org.apache.james.mime4j.codec.DecodeMonitor r2;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(int,java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>(1536, r1, r2);

        return;
    }

    protected void <init>(int, java.io.InputStream, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        byte[] $r1, $r3;
        java.lang.IllegalArgumentException $r6;
        int i0;
        org.apache.james.mime4j.codec.DecodeMonitor r5;
        org.apache.james.mime4j.util.ByteArrayBuffer $r4;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        i0 := @parameter0: int;

        r2 := @parameter1: java.io.InputStream;

        r5 := @parameter2: org.apache.james.mime4j.codec.DecodeMonitor;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte> = $r1;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int size> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed> = 0;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r3 = newarray (byte)[i0];

        r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded> = $r3;

        $r4 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        specialinvoke $r4.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>(512);

        r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf> = $r4;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: java.io.InputStream in> = r2;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor> = r5;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.InputStream, boolean)
    {
        org.apache.james.mime4j.codec.DecodeMonitor $r2;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = <org.apache.james.mime4j.codec.DecodeMonitor: org.apache.james.mime4j.codec.DecodeMonitor STRICT>;

        goto label2;

     label1:
        $r2 = <org.apache.james.mime4j.codec.DecodeMonitor: org.apache.james.mime4j.codec.DecodeMonitor SILENT>;

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(int,java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>(1536, r1, $r2);

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        java.io.IOException $r4;
        short $s2, $s7;
        byte $b1;
        int $i0, $i4, $i6, $i8;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte>;

        $i0 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i6 = (int) -1;

        return $i6;

     label2:
        if $i0 != 1 goto label3;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte>;

        $b1 = $r2[0];

        $s7 = (short) $b1;

        $s2 = $s7 & 255;

        $i8 = (int) $s2;

        return $i8;

     label3:
        goto label1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        java.io.IOException $r3;
        java.lang.NullPointerException $r2;
        int $i0, $i1, $i2;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        $i0 = lengthof r1;

        if $i0 != 0 goto label3;

        return 0;

     label3:
        $i1 = lengthof r1;

        $i2 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>(r1, 0, $i1);

        return $i2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.IndexOutOfBoundsException $r4;
        java.io.IOException $r3;
        java.lang.NullPointerException $r2;
        int i0, i1, $i2, $i3, $i4;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label4:
        if i1 != 0 goto label5;

        return 0;

     label5:
        $i4 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>(r1, i0, i1);

        return $i4;
    }

    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed> = 1;

        return;
    }

    private int read0(byte[], int, int) throws java.io.IOException
    {
        byte[] $r4, r10, $r20, $r21, $r26;
        byte $b9, b13, b15, b16, $b21;
        java.lang.StringBuilder $r16, $r17, $r29;
        java.lang.AssertionError $r28, $r31, $r32, $r33;
        short s35, $s45;
        java.lang.String $r18;
        java.io.IOException $r30;
        org.apache.james.mime4j.codec.DecodeMonitor $r15;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int[] $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.james.mime4j.util.ByteArrayBuffer $r1, $r6, $r7, $r8, $r11, $r12, $r13, $r24, $r25, $r27;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, $i11, $i12, $i14, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, i30, i31, $i32, $i33, $i34, i36, i37, i38, $i40, $i42, $i44, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;
        java.io.InputStream $r22;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        r10 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i28 = i0;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i3 = virtualinvoke $r1.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

        if $i3 <= 0 goto label01;

        $r24 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i26 = virtualinvoke $r24.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>($i26, i1);

        $r25 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $r26 = virtualinvoke $r25.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r10, i0, $i27);

        $r27 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r27.<org.apache.james.mime4j.util.ByteArrayBuffer: void remove(int,int)>(0, $i27);

        i28 = i0 + $i27;

     label01:
        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof>;

        if $z0 == 0 goto label04;

        if i28 != i0 goto label02;

        $i40 = (int) -1;

        $i29 = $i40;

        goto label03;

     label02:
        $i29 = i28 - i0;

     label03:
        return $i29;

     label04:
        i30 = 0;

        i31 = 0;

     label05:
        if i28 >= i2 goto label22;

     label06:
        $i6 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        $i5 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int size>;

        if $i6 != $i5 goto label13;

        $r22 = r0.<org.apache.james.mime4j.codec.Base64InputStream: java.io.InputStream in>;

        $r21 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        $r20 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        $i24 = lengthof $r20;

        $i25 = virtualinvoke $r22.<java.io.InputStream: int read(byte[],int,int)>($r21, 0, $i24);

        $i42 = (int) -1;

        if $i25 != $i42 goto label10;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof> = 1;

        if i31 == 0 goto label07;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpectedEof(int)>(i31);

     label07:
        if i28 != i0 goto label08;

        $i44 = (int) -1;

        $i32 = $i44;

        goto label09;

     label08:
        $i32 = i28 - i0;

     label09:
        return $i32;

     label10:
        if $i25 <= 0 goto label11;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int size> = $i25;

        goto label12;

     label11:
        $z4 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z4 != 0 goto label12;

        if $i25 == 0 goto label12;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label12:
        goto label06;

     label13:
        $i33 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        $i34 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int size>;

        if $i33 >= $i34 goto label05;

        if i28 >= i2 goto label05;

        $r4 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        $i7 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        $i8 = $i7 + 1;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = $i8;

        $b9 = $r4[$i7];

        $s45 = (short) $b9;

        s35 = $s45 & 255;

        $i46 = (int) s35;

        if $i46 != 61 goto label14;

        $i22 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int decodePad(int,int,byte[],int,int)>(i30, i31, r10, i28, i2);

        $i23 = $i22 - i0;

        return $i23;

     label14:
        $r5 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        $i47 = (int) s35;

        i10 = $r5[$i47];

        if i10 >= 0 goto label15;

        $i48 = (int) s35;

        if $i48 == 13 goto label13;

        $i49 = (int) s35;

        if $i49 == 10 goto label13;

        $i50 = (int) s35;

        if $i50 == 32 goto label13;

        $r15 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected base64 byte: ");

        $b21 = (byte) s35;

        $i51 = (int) $b21;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i51);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke $r15.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>($r18, "ignoring.");

        if $z3 == 0 goto label13;

        $r30 = new java.io.IOException;

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("Unexpected base64 byte");

        throw $r30;

     label15:
        $i11 = i30 << 6;

        i30 = $i11 | i10;

        i31 = i31 + 1;

        if i31 != 4 goto label21;

        i31 = 0;

        $i12 = i30 >>> 16;

        b13 = (byte) $i12;

        $i14 = i30 >>> 8;

        b15 = (byte) $i14;

        b16 = (byte) i30;

        $i17 = i2 - 2;

        if i28 >= $i17 goto label16;

        i36 = i28 + 1;

        r10[i28] = b13;

        i37 = i36 + 1;

        r10[i36] = b15;

        i28 = i37 + 1;

        r10[i37] = b16;

        goto label21;

     label16:
        $i18 = i2 - 1;

        if i28 >= $i18 goto label17;

        i38 = i28 + 1;

        r10[i28] = b13;

        i28 = i38 + 1;

        r10[i38] = b15;

        $r13 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i52 = (int) b16;

        virtualinvoke $r13.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i52);

        goto label19;

     label17:
        if i28 >= i2 goto label18;

        $i20 = i28;

        i28 = i28 + 1;

        r10[$i20] = b13;

        $r11 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i53 = (int) b15;

        virtualinvoke $r11.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i53);

        $r12 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i54 = (int) b16;

        virtualinvoke $r12.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i54);

        goto label19;

     label18:
        $r6 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i55 = (int) b13;

        virtualinvoke $r6.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i55);

        $r7 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i56 = (int) b15;

        virtualinvoke $r7.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i56);

        $r8 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i57 = (int) b16;

        virtualinvoke $r8.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i57);

     label19:
        $z5 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z5 != 0 goto label20;

        if i28 == i2 goto label20;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label20:
        $i19 = i2 - i0;

        return $i19;

     label21:
        goto label13;

     label22:
        $z1 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label23;

        if i31 == 0 goto label23;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label23:
        $z2 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z2 != 0 goto label24;

        if i28 == i2 goto label24;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label24:
        $i4 = i2 - i0;

        return $i4;
    }

    private int decodePad(int, int, byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        byte b5, b12, b13;
        int i0, i1, $i2, $i3, $i4, i6, $i7, $i8, $i9, $i10, i11, i14, $i15, $i16, $i17, $i18;
        org.apache.james.mime4j.util.ByteArrayBuffer $r1, $r2, $r4, $r5;
        org.apache.james.mime4j.codec.Base64InputStream r0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r3 := @parameter2: byte[];

        i11 := @parameter3: int;

        i6 := @parameter4: int;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof> = 1;

        if i0 != 2 goto label3;

        $i9 = i1 >>> 4;

        b12 = (byte) $i9;

        if i11 >= i6 goto label1;

        $i10 = i11;

        i11 = i11 + 1;

        r3[$i10] = b12;

        goto label2;

     label1:
        $r5 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i15 = (int) b12;

        virtualinvoke $r5.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i15);

     label2:
        goto label8;

     label3:
        if i0 != 3 goto label7;

        $i2 = i1 >>> 10;

        b13 = (byte) $i2;

        $i3 = i1 >>> 2;

        $i4 = $i3 & 255;

        b5 = (byte) $i4;

        $i7 = i6 - 1;

        if i11 >= $i7 goto label4;

        i14 = i11 + 1;

        r3[i11] = b13;

        i11 = i14 + 1;

        r3[i14] = b5;

        goto label6;

     label4:
        if i11 >= i6 goto label5;

        $i8 = i11;

        i11 = i11 + 1;

        r3[$i8] = b13;

        $r4 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i16 = (int) b5;

        virtualinvoke $r4.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i16);

        goto label6;

     label5:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i17 = (int) b13;

        virtualinvoke $r1.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i17);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i18 = (int) b5;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i18);

     label6:
        goto label8;

     label7:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpecedPad(int)>(i0);

     label8:
        return i11;
    }

    private void handleUnexpectedEof(int) throws java.io.IOException
    {
        java.io.IOException $r7;
        int i0;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dropping ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sextet(s)");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>("Unexpected end of BASE64 stream", $r6);

        if $z0 == 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Unexpected end of BASE64 stream");

        throw $r7;

     label1:
        return;
    }

    private void handleUnexpecedPad(int) throws java.io.IOException
    {
        java.io.IOException $r7;
        int i0;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dropping ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sextet(s)");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>("Unexpected padding character", $r6);

        if $z0 == 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Unexpected padding character");

        throw $r7;

     label1:
        return;
    }

    static void <clinit>()
    {
        byte[] $r2, $r3;
        short $s2, $s7;
        byte $b1;
        int[] $r1, $r4, $r5;
        int $i0, i3, i4, $i6, $i8;
        boolean $z0, $z1;
        java.lang.Class $r0;

        <org.apache.james.mime4j.codec.Base64InputStream: int EOF> = -1;

        <org.apache.james.mime4j.codec.Base64InputStream: byte BASE64_PAD> = 61;

        <org.apache.james.mime4j.codec.Base64InputStream: int ENCODED_BUFFER_SIZE> = 1536;

        $r0 = class "Lorg/apache/james/mime4j/codec/Base64InputStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[256];

        <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE> = $r1;

        i3 = 0;

     label3:
        if i3 >= 256 goto label4;

        $r5 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        $i6 = (int) -1;

        $r5[i3] = $i6;

        i3 = i3 + 1;

        goto label3;

     label4:
        i4 = 0;

     label5:
        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i0 = lengthof $r2;

        if i4 >= $i0 goto label6;

        $r4 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $b1 = $r3[i4];

        $s7 = (short) $b1;

        $s2 = $s7 & 255;

        $i8 = (int) $s2;

        $r4[$i8] = i4;

        i4 = i4 + 1;

        goto label5;

     label6:
        return;
    }
}
