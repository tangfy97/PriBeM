public abstract class org.xmpp.packet.Packet extends java.lang.Object
{
    protected static org.dom4j.DocumentFactory docFactory;
    protected org.dom4j.Element element;
    protected org.xmpp.packet.JID toJID;
    protected org.xmpp.packet.JID fromJID;

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element,boolean)>(r1, 0);

        return;
    }

    public void <init>(org.dom4j.Element, boolean)
    {
        java.lang.String[] $r4, $r11;
        org.xmpp.packet.JID $r5, $r9, $r12, $r16;
        java.lang.String $r2, $r3, $r6, $r7, $r8, $r10, $r13, $r14, $r15, $r17;
        boolean z0;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element r1;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: org.dom4j.Element;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmpp.packet.Packet: org.dom4j.Element element> = r1;

        $r2 = interfaceinvoke r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("to");

        if $r2 == null goto label1;

        $r11 = staticinvoke <org.xmpp.packet.JID: java.lang.String[] getParts(java.lang.String)>($r2);

        $r12 = new org.xmpp.packet.JID;

        $r15 = $r11[0];

        $r14 = $r11[1];

        $r13 = $r11[2];

        specialinvoke $r12.<org.xmpp.packet.JID: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>($r15, $r14, $r13, z0);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID> = $r12;

        $r16 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        $r17 = virtualinvoke $r16.<org.xmpp.packet.JID: java.lang.String toString()>();

        interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("to", $r17);

     label1:
        $r3 = interfaceinvoke r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("from");

        if $r3 == null goto label2;

        $r4 = staticinvoke <org.xmpp.packet.JID: java.lang.String[] getParts(java.lang.String)>($r3);

        $r5 = new org.xmpp.packet.JID;

        $r8 = $r4[0];

        $r7 = $r4[1];

        $r6 = $r4[2];

        specialinvoke $r5.<org.xmpp.packet.JID: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>($r8, $r7, $r6, 1);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID> = $r5;

        $r9 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        $r10 = virtualinvoke $r9.<org.xmpp.packet.JID: java.lang.String toString()>();

        interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("from", $r10);

     label2:
        return;
    }

    protected void <init>()
    {
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getID()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("id");

        return $r2;
    }

    public void setID(java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String r1;
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("id", r1);

        return;
    }

    public org.xmpp.packet.JID getTo()
    {
        java.lang.String[] $r4;
        org.xmpp.packet.JID $r3, $r5, $r9, $r10, $r12;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1;
        java.lang.String $r2, $r6, $r7, $r8, $r11;
        boolean $z0;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("to");

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        if $r3 == null goto label2;

        $r10 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        $r11 = virtualinvoke $r10.<org.xmpp.packet.JID: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label2;

        $r12 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        return $r12;

     label2:
        $r4 = staticinvoke <org.xmpp.packet.JID: java.lang.String[] getParts(java.lang.String)>($r2);

        $r5 = new org.xmpp.packet.JID;

        $r8 = $r4[0];

        $r7 = $r4[1];

        $r6 = $r4[2];

        specialinvoke $r5.<org.xmpp.packet.JID: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>($r8, $r7, $r6, 1);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID> = $r5;

        $r9 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        return $r9;
    }

    public void setTo(java.lang.String)
    {
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1;
        java.lang.String r4;
        org.xmpp.packet.JID $r2, $r3;

        r0 := @this: org.xmpp.packet.Packet;

        r4 := @parameter0: java.lang.String;

        if r4 == null goto label1;

        $r2 = new org.xmpp.packet.JID;

        specialinvoke $r2.<org.xmpp.packet.JID: void <init>(java.lang.String)>(r4);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID> = $r2;

        $r3 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID>;

        r4 = virtualinvoke $r3.<org.xmpp.packet.JID: java.lang.String toString()>();

     label1:
        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("to", r4);

        return;
    }

    public void setTo(org.xmpp.packet.JID)
    {
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r4;
        java.lang.String $r3;
        org.xmpp.packet.JID r1;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: org.xmpp.packet.JID;

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID toJID> = r1;

        if r1 != null goto label1;

        $r4 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("to", null);

        goto label2;

     label1:
        $r2 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r3 = virtualinvoke r1.<org.xmpp.packet.JID: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("to", $r3);

     label2:
        return;
    }

    public org.xmpp.packet.JID getFrom()
    {
        java.lang.String[] $r4;
        org.xmpp.packet.JID $r3, $r5, $r9, $r10, $r12;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1;
        java.lang.String $r2, $r6, $r7, $r8, $r11;
        boolean $z0;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("from");

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        if $r3 == null goto label2;

        $r10 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        $r11 = virtualinvoke $r10.<org.xmpp.packet.JID: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label2;

        $r12 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        return $r12;

     label2:
        $r4 = staticinvoke <org.xmpp.packet.JID: java.lang.String[] getParts(java.lang.String)>($r2);

        $r5 = new org.xmpp.packet.JID;

        $r8 = $r4[0];

        $r7 = $r4[1];

        $r6 = $r4[2];

        specialinvoke $r5.<org.xmpp.packet.JID: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>($r8, $r7, $r6, 1);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID> = $r5;

        $r9 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        return $r9;
    }

    public void setFrom(java.lang.String)
    {
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1;
        java.lang.String r4;
        org.xmpp.packet.JID $r2, $r3;

        r0 := @this: org.xmpp.packet.Packet;

        r4 := @parameter0: java.lang.String;

        if r4 == null goto label1;

        $r2 = new org.xmpp.packet.JID;

        specialinvoke $r2.<org.xmpp.packet.JID: void <init>(java.lang.String)>(r4);

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID> = $r2;

        $r3 = r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID>;

        r4 = virtualinvoke $r3.<org.xmpp.packet.JID: java.lang.String toString()>();

     label1:
        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("from", r4);

        return;
    }

    public void setFrom(org.xmpp.packet.JID)
    {
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r4;
        java.lang.String $r3;
        org.xmpp.packet.JID r1;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: org.xmpp.packet.JID;

        r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID fromJID> = r1;

        if r1 != null goto label1;

        $r4 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("from", null);

        goto label2;

     label1:
        $r2 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r3 = virtualinvoke r1.<org.xmpp.packet.JID: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("from", $r3);

     label2:
        return;
    }

    public void addExtension(org.xmpp.packet.PacketExtension)
    {
        org.xmpp.packet.PacketExtension r1;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r3;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: org.xmpp.packet.PacketExtension;

        $r2 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r3 = virtualinvoke r1.<org.xmpp.packet.PacketExtension: org.dom4j.Element getElement()>();

        interfaceinvoke $r2.<org.dom4j.Element: void add(org.dom4j.Element)>($r3);

        return;
    }

    public org.xmpp.packet.PacketExtension getExtension(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r12;
        java.lang.reflect.Constructor $r11;
        java.lang.String r1, r2;
        boolean $z0;
        org.xmpp.packet.PacketExtension $r7, $r15;
        java.lang.Class[] $r10;
        java.lang.Exception $r16;
        java.util.List $r5;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r3, $r9;
        org.dom4j.QName $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r13, $r14;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = interfaceinvoke $r3.<org.dom4j.Element: java.util.List elements(org.dom4j.QName)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r6 = staticinvoke <org.xmpp.packet.PacketExtension: java.lang.Class getExtensionClass(java.lang.String,java.lang.String)>(r1, r2);

        if $r6 == null goto label4;

     label1:
        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = class "Lorg/dom4j/Element;";

        $r11 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r10);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r12[0] = $r13;

        $r14 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r12);

        $r15 = (org.xmpp.packet.PacketExtension) $r14;

     label2:
        return $r15;

     label3:
        $r16 := @caughtexception;

        goto label5;

     label4:
        $r7 = new org.xmpp.packet.PacketExtension;

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (org.dom4j.Element) $r8;

        specialinvoke $r7.<org.xmpp.packet.PacketExtension: void <init>(org.dom4j.Element)>($r9);

        return $r7;

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean deleteExtension(java.lang.String, java.lang.String)
    {
        java.util.List $r5;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r3, $r6, $r8;
        org.dom4j.QName $r4;
        java.lang.Object $r7;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.xmpp.packet.Packet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = interfaceinvoke $r3.<org.dom4j.Element: java.util.List elements(org.dom4j.QName)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.dom4j.Element) $r7;

        interfaceinvoke $r6.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r8);

        return 1;

     label1:
        return 0;
    }

    public org.xmpp.packet.PacketError getError()
    {
        org.xmpp.packet.Packet r0;
        org.xmpp.packet.PacketError $r3;
        org.dom4j.Element $r1, $r2;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("error");

        if $r2 == null goto label1;

        $r3 = new org.xmpp.packet.PacketError;

        specialinvoke $r3.<org.xmpp.packet.PacketError: void <init>(org.dom4j.Element)>($r2);

        return $r3;

     label1:
        return null;
    }

    public void setError(org.xmpp.packet.PacketError)
    {
        org.xmpp.packet.PacketError r5;
        java.lang.NullPointerException $r11;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.xmpp.packet.Packet;

        r5 := @parameter0: org.xmpp.packet.PacketError;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        if $r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Error cannot be null");

        throw $r11;

     label1:
        $r2 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", "error");

        $r3 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("error");

        if $r4 == null goto label2;

        $r9 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r8 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r10 = interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("error");

        interfaceinvoke $r9.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r10);

     label2:
        $r6 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r7 = virtualinvoke r5.<org.xmpp.packet.PacketError: org.dom4j.Element getElement()>();

        interfaceinvoke $r6.<org.dom4j.Element: void add(org.dom4j.Element)>($r7);

        return;
    }

    public void setError(org.xmpp.packet.PacketError$Condition)
    {
        org.xmpp.packet.PacketError$Condition r2;
        org.xmpp.packet.Packet r0;
        org.xmpp.packet.PacketError $r1;

        r0 := @this: org.xmpp.packet.Packet;

        r2 := @parameter0: org.xmpp.packet.PacketError$Condition;

        $r1 = new org.xmpp.packet.PacketError;

        specialinvoke $r1.<org.xmpp.packet.PacketError: void <init>(org.xmpp.packet.PacketError$Condition)>(r2);

        virtualinvoke r0.<org.xmpp.packet.Packet: void setError(org.xmpp.packet.PacketError)>($r1);

        return;
    }

    public abstract org.xmpp.packet.Packet createCopy();

    public org.dom4j.Element getElement()
    {
        org.dom4j.Element $r1;
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        return $r1;
    }

    public java.lang.String toXML()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.Packet r0;

        r0 := @this: org.xmpp.packet.Packet;

        $r1 = r0.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String asXML()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        org.xmpp.packet.Packet r3;
        java.io.StringWriter $r0;
        org.dom4j.io.XMLWriter $r1;
        org.dom4j.io.OutputFormat $r2;
        org.dom4j.Element $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;

        r3 := @this: org.xmpp.packet.Packet;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new org.dom4j.io.XMLWriter;

        $r2 = staticinvoke <org.dom4j.io.OutputFormat: org.dom4j.io.OutputFormat createPrettyPrint()>();

        specialinvoke $r1.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r0, $r2);

     label1:
        $r4 = r3.<org.xmpp.packet.Packet: org.dom4j.Element element>;

        virtualinvoke $r1.<org.dom4j.io.XMLWriter: void write(org.dom4j.Element)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r5 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.xmpp.packet.Packet: org.dom4j.DocumentFactory docFactory> = $r0;

        return;
    }
}
