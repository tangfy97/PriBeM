public final class com.google.common.io.Files extends java.lang.Object
{
    private static final int TEMP_DIR_ATTEMPTS;

    private void <init>()
    {
        com.google.common.io.Files r0;

        r0 := @this: com.google.common.io.Files;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.nio.charset.Charset r4;
        java.io.BufferedReader $r0;
        java.io.FileInputStream $r2;
        java.io.InputStreamReader $r1;
        java.io.File r3;

        r3 := @parameter0: java.io.File;

        r4 := @parameter1: java.nio.charset.Charset;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r2, r4);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.nio.charset.Charset r4;
        java.io.BufferedWriter $r0;
        java.io.OutputStreamWriter $r1;
        java.io.FileOutputStream $r2;
        java.io.File r3;

        r3 := @parameter0: java.io.File;

        r4 := @parameter1: java.nio.charset.Charset;

        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.OutputStreamWriter;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r2, r4);

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        return $r0;
    }

    public static com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)
    {
        com.google.common.io.Files$1 $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.io.Files$1;

        specialinvoke $r1.<com.google.common.io.Files$1: void <init>(java.io.File)>(r0);

        return $r1;
    }

    public static com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File)
    {
        com.google.common.io.OutputSupplier $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File,boolean)>(r0, 0);

        return $r1;
    }

    public static com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File, boolean)
    {
        com.google.common.io.Files$2 $r1;
        java.io.File r0;
        boolean z0;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.io.Files$2;

        specialinvoke $r1.<com.google.common.io.Files$2: void <init>(java.io.File,boolean)>(r0, z0);

        return $r1;
    }

    public static com.google.common.io.InputSupplier newReaderSupplier(java.io.File, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r2;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1, $r3;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.nio.charset.Charset;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $r3 = staticinvoke <com.google.common.io.CharStreams: com.google.common.io.InputSupplier newReaderSupplier(com.google.common.io.InputSupplier,java.nio.charset.Charset)>($r1, r2);

        return $r3;
    }

    public static com.google.common.io.OutputSupplier newWriterSupplier(java.io.File, java.nio.charset.Charset)
    {
        com.google.common.io.OutputSupplier $r2;
        java.nio.charset.Charset r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newWriterSupplier(java.io.File,java.nio.charset.Charset,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static com.google.common.io.OutputSupplier newWriterSupplier(java.io.File, java.nio.charset.Charset, boolean)
    {
        com.google.common.io.OutputSupplier $r1, $r3;
        java.nio.charset.Charset r2;
        java.io.File r0;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.nio.charset.Charset;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File,boolean)>(r0, z0);

        $r3 = staticinvoke <com.google.common.io.CharStreams: com.google.common.io.OutputSupplier newWriterSupplier(com.google.common.io.OutputSupplier,java.nio.charset.Charset)>($r1, r2);

        return $r3;
    }

    public static byte[] toByteArray(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        byte[] r1, $r4;
        long $l0, $l2, $l4;
        java.io.FileInputStream $r6;
        java.io.File r0;
        byte $b1, $b3;
        int $i5, $i6;
        com.google.common.io.InputSupplier $r3;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $b1 = $l0 cmp 2147483647L;

        $i6 = (int) $b1;

        if $i6 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $l2 = virtualinvoke r0.<java.io.File: long length()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label3;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $r4 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)>($r3);

        return $r4;

     label3:
        $l4 = virtualinvoke r0.<java.io.File: long length()>();

        $i5 = (int) $l4;

        r1 = newarray (byte)[$i5];

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label4:
        staticinvoke <com.google.common.io.ByteStreams: void readFully(java.io.InputStream,byte[])>($r6, r1);

     label5:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 0);

        goto label8;

     label6:
        $r5 := @caughtexception;

     label7:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r5;

     label8:
        return r1;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        byte[] $r2;
        java.nio.charset.Charset r3;
        java.lang.String $r0, $r4;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: java.nio.charset.Charset;

        $r0 = new java.lang.String;

        $r2 = staticinvoke <com.google.common.io.Files: byte[] toByteArray(java.io.File)>(r1);

        $r4 = virtualinvoke r3.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, $r4);

        return $r0;
    }

    public static void copy(com.google.common.io.InputSupplier, java.io.File) throws java.io.IOException
    {
        com.google.common.io.OutputSupplier $r2;
        com.google.common.io.InputSupplier r0;
        java.io.File r1;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: java.io.File;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File)>(r1);

        staticinvoke <com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>(r0, $r2);

        return;
    }

    public static void write(byte[], java.io.File) throws java.io.IOException
    {
        byte[] r0;
        com.google.common.io.OutputSupplier $r2;
        java.io.File r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.File;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newOutputStreamSupplier(java.io.File)>(r1);

        staticinvoke <com.google.common.io.ByteStreams: void write(byte[],com.google.common.io.OutputSupplier)>(r0, $r2);

        return;
    }

    public static void copy(java.io.File, com.google.common.io.OutputSupplier) throws java.io.IOException
    {
        com.google.common.io.OutputSupplier r2;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: com.google.common.io.OutputSupplier;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        staticinvoke <com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>($r1, r2);

        return;
    }

    public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.OutputStream;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        staticinvoke <com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)>($r1, r2);

        return;
    }

    public static void copy(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r2;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        staticinvoke <com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)>($r1, r2);

        return;
    }

    public static void copy(com.google.common.io.InputSupplier, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        com.google.common.io.OutputSupplier $r3;
        java.nio.charset.Charset r2;
        com.google.common.io.InputSupplier r0;
        java.io.File r1;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newWriterSupplier(java.io.File,java.nio.charset.Charset)>(r1, r2);

        staticinvoke <com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>(r0, $r3);

        return;
    }

    public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.nio.charset.Charset r2;
        java.io.File r1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.nio.charset.Charset r2;
        java.io.File r1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset,boolean)>(r0, r1, r2, 1);

        return;
    }

    private static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        com.google.common.io.OutputSupplier $r3;
        java.lang.CharSequence r0;
        java.nio.charset.Charset r2;
        java.io.File r1;
        boolean z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.OutputSupplier newWriterSupplier(java.io.File,java.nio.charset.Charset,boolean)>(r1, r2, z0);

        staticinvoke <com.google.common.io.CharStreams: void write(java.lang.CharSequence,com.google.common.io.OutputSupplier)>(r0, $r3);

        return;
    }

    public static void copy(java.io.File, java.nio.charset.Charset, com.google.common.io.OutputSupplier) throws java.io.IOException
    {
        com.google.common.io.OutputSupplier r3;
        java.nio.charset.Charset r1;
        java.io.File r0;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: com.google.common.io.OutputSupplier;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newReaderSupplier(java.io.File,java.nio.charset.Charset)>(r0, r1);

        staticinvoke <com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>($r2, r3);

        return;
    }

    public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException
    {
        java.nio.charset.Charset r1;
        java.lang.Appendable r3;
        java.io.File r0;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: java.lang.Appendable;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newReaderSupplier(java.io.File,java.nio.charset.Charset)>(r0, r1);

        staticinvoke <com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)>($r2, r3);

        return;
    }

    public static boolean equal(java.io.File, java.io.File) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.File r0, r1;
        byte $b2, $b3, $b4;
        com.google.common.io.InputSupplier $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 == r1 goto label1;

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $l1 = virtualinvoke r1.<java.io.File: long length()>();

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label3;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label3;

        $b4 = $l0 cmp $l1;

        if $b4 == 0 goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r1);

        $z1 = staticinvoke <com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)>($r2, $r3);

        return $z1;
    }

    public static java.io.File createTempDir()
    {
        java.lang.IllegalStateException $r6;
        long $l0;
        int i1;
        java.lang.String $r1, $r5, $r14, $r19;
        boolean $z0;
        java.io.File $r0, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r18;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = 0;

     label1:
        if i1 >= 10000 goto label3;

        $r15 = new java.io.File;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, $r19);

        $z0 = virtualinvoke $r15.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label2;

        return $r15;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create directory within 10000 attempts (tried ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(9999);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r6;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        long $l0;
        java.io.IOException $r1;
        java.io.File r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean createNewFile()>();

        if $z0 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z1 = virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l0);

        if $z1 != 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update modification time of ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public static void createParentDirs(java.io.File) throws java.io.IOException
    {
        java.io.IOException $r3;
        java.io.File r0, $r1, $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        return;
    }

    public static void move(java.io.File, java.io.File) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.lang.String $r7, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r3, $r8;
        java.io.File r0, r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;

        r1 := @parameter0: java.io.File;

        r0 := @parameter1: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = virtualinvoke r1.<java.io.File: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r2[1] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Source %s and destination %s must be different", $r2);

        $z1 = virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>(r0);

        if $z1 != 0 goto label4;

        staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r1, r0);

        $z2 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label3;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        return;
    }

    public static void deleteDirectoryContents(java.io.File) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.io.IOException $r6;
        java.io.File r0, r5;
        int i0, i1;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r2, $r3, $r10;
        java.io.File[] $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Not a directory: %s", $r1);

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r4 != null goto label2;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error listing files for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        i0 = lengthof $r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r5 = $r4[i1];

        staticinvoke <com.google.common.io.Files: void deleteRecursively(java.io.File)>(r5);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static void deleteRecursively(java.io.File) throws java.io.IOException
    {
        java.io.IOException $r1;
        java.io.File r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.google.common.io.Files: void deleteDirectoryContents(java.io.File)>(r0);

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset r1;
        java.lang.String $r3;
        java.io.File r0;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newReaderSupplier(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r3 = staticinvoke <com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)>($r2);

        return $r3;
    }

    public static java.util.List readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.util.List $r3;
        java.nio.charset.Charset r1;
        java.io.File r0;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newReaderSupplier(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r3 = staticinvoke <com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)>($r2);

        return $r3;
    }

    public static java.lang.Object readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor) throws java.io.IOException
    {
        com.google.common.io.LineProcessor r3;
        java.nio.charset.Charset r1;
        java.lang.Object $r4;
        java.io.File r0;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: com.google.common.io.LineProcessor;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newReaderSupplier(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r4 = staticinvoke <com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)>($r2, r3);

        return $r4;
    }

    public static java.lang.Object readBytes(java.io.File, com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        com.google.common.io.ByteProcessor r2;
        java.lang.Object $r3;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: com.google.common.io.ByteProcessor;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $r3 = staticinvoke <com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)>($r1, r2);

        return $r3;
    }

    public static long getChecksum(java.io.File, java.util.zip.Checksum) throws java.io.IOException
    {
        java.util.zip.Checksum r2;
        long $l0;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.zip.Checksum;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $l0 = staticinvoke <com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)>($r1, r2);

        return $l0;
    }

    public static byte[] getDigest(java.io.File, java.security.MessageDigest) throws java.io.IOException
    {
        byte[] $r3;
        java.security.MessageDigest r2;
        java.io.File r0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.security.MessageDigest;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.InputSupplier newInputStreamSupplier(java.io.File)>(r0);

        $r3 = staticinvoke <com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)>($r1, r2);

        return $r3;
    }

    public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException
    {
        java.nio.channels.FileChannel$MapMode $r1;
        java.io.File r0;
        java.nio.MappedByteBuffer $r2;

        r0 := @parameter0: java.io.File;

        $r1 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r2 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode)>(r0, $r1);

        return $r2;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException
    {
        long $l0;
        java.lang.String $r4;
        java.nio.channels.FileChannel$MapMode r1;
        java.io.File r0;
        java.io.FileNotFoundException $r3;
        boolean $z0;
        java.nio.MappedByteBuffer $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r3 = new java.io.FileNotFoundException;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r2 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode,long)>(r0, r1, $l0);

        return $r2;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.FileNotFoundException, java.io.IOException
    {
        java.lang.Throwable $r5;
        java.io.RandomAccessFile $r0;
        long l0;
        java.nio.channels.FileChannel$MapMode r2, $r3;
        java.io.File r1;
        java.lang.String $r6;
        java.nio.MappedByteBuffer $r4;
        boolean z0;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter2: long;

        $r0 = new java.io.RandomAccessFile;

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        if r2 != $r3 goto label1;

        $r6 = "r";

        goto label2;

     label1:
        $r6 = "rw";

     label2:
        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r1, $r6);

        z0 = 1;

     label3:
        $r4 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.RandomAccessFile,java.nio.channels.FileChannel$MapMode,long)>($r0, r2, l0);

        z0 = 0;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r0, 0);

        return $r4;

     label5:
        $r5 := @caughtexception;

     label6:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r0, 1);

        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static java.nio.MappedByteBuffer map(java.io.RandomAccessFile, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.RandomAccessFile r0;
        long l0;
        java.nio.channels.FileChannel $r1;
        java.nio.channels.FileChannel$MapMode r2;
        java.nio.MappedByteBuffer $r3;
        boolean z0;

        r0 := @parameter0: java.io.RandomAccessFile;

        r2 := @parameter1: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter2: long;

        $r1 = virtualinvoke r0.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        z0 = 1;

     label1:
        $r3 = virtualinvoke $r1.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>(r2, 0L, l0);

        z0 = 0;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r1, 0);

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r1, 1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <com.google.common.io.Files: int TEMP_DIR_ATTEMPTS> = 10000;

        return;
    }
}
