public class org.apache.jena.riot.writer.WriterStream extends java.lang.Object
{

    private void <init>()
    {
        org.apache.jena.riot.writer.WriterStream r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static void finish(org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDF r0;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void finish()>();

        return;
    }

    protected static void start(org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDF r0;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void start()>();

        return;
    }

    protected static void writePrefixes(org.apache.jena.riot.system.StreamRDF, org.apache.jena.riot.system.PrefixMap)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.jena.riot.system.StreamRDF r6;
        org.apache.jena.riot.system.PrefixMap r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0;

        r6 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        if r0 == null goto label2;

        $r1 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: java.util.Map getMappingCopyStr()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        interfaceinvoke r6.<org.apache.jena.riot.system.StreamRDF: void prefix(java.lang.String,java.lang.String)>($r8, $r10);

        goto label1;

     label2:
        return;
    }

    protected static void write(org.apache.jena.riot.system.StreamRDF, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.system.PrefixMap, java.lang.String)
    {
        org.apache.jena.riot.system.PrefixMap r2;
        java.util.Iterator $r4;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r1 := @parameter3: java.lang.String;

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void start(org.apache.jena.riot.system.StreamRDF)>(r0);

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void base(java.lang.String)>(r1);

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void writePrefixes(org.apache.jena.riot.system.StreamRDF,org.apache.jena.riot.system.PrefixMap)>(r0, r2);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null, null);

        staticinvoke <org.apache.jena.riot.system.StreamRDFLib: void quadsToStream(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>(r0, $r4);

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void finish(org.apache.jena.riot.system.StreamRDF)>(r0);

        return;
    }

    protected static void write(org.apache.jena.riot.system.StreamRDF, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.system.PrefixMap, java.lang.String)
    {
        org.apache.jena.riot.system.PrefixMap r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r1 := @parameter3: java.lang.String;

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void start(org.apache.jena.riot.system.StreamRDF)>(r0);

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void base(java.lang.String)>(r1);

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void writePrefixes(org.apache.jena.riot.system.StreamRDF,org.apache.jena.riot.system.PrefixMap)>(r0, r2);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        staticinvoke <org.apache.jena.riot.system.StreamRDFLib: void triplesToStream(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>(r0, $r4);

        staticinvoke <org.apache.jena.riot.writer.WriterStream: void finish(org.apache.jena.riot.system.StreamRDF)>(r0);

        return;
    }
}
