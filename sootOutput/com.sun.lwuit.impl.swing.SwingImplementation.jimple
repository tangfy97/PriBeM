public class com.sun.lwuit.impl.swing.SwingImplementation extends com.sun.lwuit.impl.LWUITImplementation
{
    private static com.sun.lwuit.impl.swing.SwingImplementation instance;
    private com.sun.lwuit.impl.swing.SwingImplementation$C canvas;
    private static final java.awt.Font DEFAULT_FONT;
    private com.sun.lwuit.Component currentTextComponent;
    private static java.lang.Class clsInstance;
    private java.awt.image.BufferedImage cache;

    public void <init>()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void <init>()>();

        $r1 = new com.sun.lwuit.impl.swing.SwingImplementation$C;

        specialinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: void <init>(com.sun.lwuit.impl.swing.SwingImplementation)>(r0);

        r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas> = $r1;

        return;
    }

    public void setImplementationSize(int, int)
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r2, $r4, $r6, $r7, $r9, $r10, $r12;
        int i0, i1;
        java.awt.Container $r8, $r11, $r13;
        java.awt.Dimension $r1, $r3, $r5;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r1 = new java.awt.Dimension;

        specialinvoke $r1.<java.awt.Dimension: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<com.sun.lwuit.impl.swing.SwingImplementation$C: void setPreferredSize(java.awt.Dimension)>($r1);

        $r4 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i0, i1);

        virtualinvoke $r4.<com.sun.lwuit.impl.swing.SwingImplementation$C: void setMinimumSize(java.awt.Dimension)>($r3);

        $r6 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r5 = new java.awt.Dimension;

        specialinvoke $r5.<java.awt.Dimension: void <init>(int,int)>(i0, i1);

        virtualinvoke $r6.<com.sun.lwuit.impl.swing.SwingImplementation$C: void setMaximumSize(java.awt.Dimension)>($r5);

        $r7 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r8 = virtualinvoke $r7.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Container getParent()>();

        if $r8 == null goto label1;

        $r10 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r11 = virtualinvoke $r10.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Container getParent()>();

        virtualinvoke $r11.<java.awt.Container: void invalidate()>();

        $r12 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r13 = virtualinvoke $r12.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Container getParent()>();

        virtualinvoke $r13.<java.awt.Container: void validate()>();

     label1:
        $r9 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        virtualinvoke $r9.<com.sun.lwuit.impl.swing.SwingImplementation$C: void revalidate()>();

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void sizeChanged(int,int)>(i0, i1);

        return;
    }

    public static void setClassLoader(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        <com.sun.lwuit.impl.swing.SwingImplementation: java.lang.Class clsInstance> = r0;

        return;
    }

    public static java.lang.Class getClassLoader()
    {
        java.lang.Class $r0;

        $r0 = <com.sun.lwuit.impl.swing.SwingImplementation: java.lang.Class clsInstance>;

        return $r0;
    }

    public void setBufferedImageType(int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: void setBufferedImageType(int)>(i0);

        return;
    }

    public int getBufferedImageType()
    {
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $i0 = virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: int getBufferedImageType()>();

        return $i0;
    }

    public javax.swing.JComponent getJComponent()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        return $r1;
    }

    public static com.sun.lwuit.impl.swing.SwingImplementation getInstance()
    {
        com.sun.lwuit.impl.swing.SwingImplementation $r0;

        $r0 = <com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation instance>;

        return $r0;
    }

    public void init(java.lang.Object)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        <com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation instance> = r0;

        return;
    }

    public void vibrate(int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        return;
    }

    public void flashBacklight(int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        return;
    }

    public int getDisplayWidth()
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;
        java.awt.Dimension $r2;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r2 = virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Dimension getPreferredSize()>();

        $i0 = $r2.<java.awt.Dimension: int width>;

        return $i0;
    }

    public int getDisplayHeight()
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;
        java.awt.Dimension $r2;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r2 = virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Dimension getPreferredSize()>();

        $i0 = $r2.<java.awt.Dimension: int height>;

        return $i0;
    }

    public void editString(com.sun.lwuit.Component, int, int, java.lang.String)
    {
        com.sun.lwuit.Component r1;
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.String r2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: com.sun.lwuit.Component;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        return;
    }

    public void saveTextEditingState()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return;
    }

    public void flushGraphics(int, int, int, int)
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: void repaint(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void flushGraphics()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: void repaint()>();

        return;
    }

    public void getRGB(java.lang.Object, int[], int, int, int, int, int)
    {
        java.awt.image.BufferedImage $r2, $r5;
        int[] r1;
        int i0, i1, i2, i3, i4;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;
        boolean $z0;
        com.sun.lwuit.impl.swing.SVG $r4;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: int[];

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        $z0 = r0 instanceof com.sun.lwuit.impl.swing.SVG;

        if $z0 == 0 goto label1;

        $r4 = (com.sun.lwuit.impl.swing.SVG) r0;

        $r5 = virtualinvoke $r4.<com.sun.lwuit.impl.swing.SVG: java.awt.image.BufferedImage getImg()>();

        virtualinvoke r3.<com.sun.lwuit.impl.swing.SwingImplementation: void getRGB(java.lang.Object,int[],int,int,int,int,int)>($r5, r1, i4, i0, i1, i2, i3);

        return;

     label1:
        $r2 = (java.awt.image.BufferedImage) r0;

        virtualinvoke $r2.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i0, i1, i2, i3, r1, i4, i2);

        return;
    }

    public java.lang.Object createImage(int[], int, int)
    {
        java.awt.image.BufferedImage $r0;
        int[] r1;
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r2;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        virtualinvoke $r0.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, i0, i1, r1, 0, i0);

        return $r0;
    }

    public java.lang.Object createImage(java.lang.String) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r3;
        java.net.URL $r2;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Class $r1;
        java.lang.String r0;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.sun.lwuit.impl.swing.SwingImplementation: java.lang.Class clsInstance>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.net.URL getResource(java.lang.String)>(r0);

        $r3 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.net.URL)>($r2);

        return $r3;
    }

    public java.lang.Object createImage(java.io.InputStream) throws java.io.IOException
    {
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.awt.image.BufferedImage $r1;
        java.io.InputStream r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r0);

        return $r1;
    }

    public java.lang.Object createMutableImage(int, int, int)
    {
        java.awt.Color $r2, $r5;
        java.awt.image.BufferedImage $r0, $r3;
        java.awt.Graphics2D $r1, $r4;
        int i0, $i1, i2, i3, i4;
        com.sun.lwuit.impl.swing.SwingImplementation r6;

        r6 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = i0 >> 24;

        i2 = $i1 & 255;

        if i2 != 255 goto label1;

        $r3 = new java.awt.image.BufferedImage;

        specialinvoke $r3.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i3, i4, 1);

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r5 = new java.awt.Color;

        specialinvoke $r5.<java.awt.Color: void <init>(int)>(i0);

        virtualinvoke $r4.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r5);

        virtualinvoke $r4.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, i3, i4);

        virtualinvoke $r4.<java.awt.Graphics2D: void dispose()>();

        return $r3;

     label1:
        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i3, i4, 2);

        if i2 == 0 goto label2;

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int)>(i0);

        virtualinvoke $r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r2);

        virtualinvoke $r1.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, i3, i4);

        virtualinvoke $r1.<java.awt.Graphics2D: void dispose()>();

     label2:
        return $r0;
    }

    public boolean isAlphaMutableImageSupported()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 1;
    }

    public java.lang.Object createImage(byte[], int, int)
    {
        byte[] r1;
        java.io.ByteArrayInputStream $r0;
        java.awt.image.BufferedImage $r2;
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.io.IOException $r3;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r1, i0, i1);

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getImageWidth(java.lang.Object)
    {
        java.awt.image.BufferedImage $r1, $r3;
        int $i0, $i1;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;
        boolean $z0;
        com.sun.lwuit.impl.swing.SVG $r2;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.sun.lwuit.impl.swing.SVG;

        if $z0 == 0 goto label1;

        $r2 = (com.sun.lwuit.impl.swing.SVG) r0;

        $r3 = virtualinvoke $r2.<com.sun.lwuit.impl.swing.SVG: java.awt.image.BufferedImage getImg()>();

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        return $i1;

     label1:
        $r1 = (java.awt.image.BufferedImage) r0;

        $i0 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        return $i0;
    }

    public int getImageHeight(java.lang.Object)
    {
        java.awt.image.BufferedImage $r1, $r3;
        int $i0, $i1;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;
        boolean $z0;
        com.sun.lwuit.impl.swing.SVG $r2;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.sun.lwuit.impl.swing.SVG;

        if $z0 == 0 goto label1;

        $r2 = (com.sun.lwuit.impl.swing.SVG) r0;

        $r3 = virtualinvoke $r2.<com.sun.lwuit.impl.swing.SVG: java.awt.image.BufferedImage getImg()>();

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        return $i1;

     label1:
        $r1 = (java.awt.image.BufferedImage) r0;

        $i0 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        return $i0;
    }

    public java.lang.Object scale(java.lang.Object, int, int)
    {
        java.awt.image.BufferedImage r1;
        int[] $r4, $r5;
        int $i0, $i1, i2, i3, $i4;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0, $r3;
        boolean $z0;
        com.sun.lwuit.impl.swing.SVG $r6, $r7;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $z0 = r0 instanceof com.sun.lwuit.impl.swing.SVG;

        if $z0 == 0 goto label1;

        $r6 = (com.sun.lwuit.impl.swing.SVG) r0;

        $r7 = specialinvoke r2.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SVG scaleSVG(com.sun.lwuit.impl.swing.SVG,int,int)>($r6, i2, i3);

        return $r7;

     label1:
        r1 = (java.awt.image.BufferedImage) r0;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        if $i0 != i2 goto label2;

        if $i1 != i3 goto label2;

        return r1;

     label2:
        $r4 = newarray (int)[$i0];

        $i4 = i2 * i3;

        $r5 = newarray (int)[$i4];

        specialinvoke r2.<com.sun.lwuit.impl.swing.SwingImplementation: void scaleArray(java.awt.image.BufferedImage,int,int,int,int,int[],int[])>(r1, $i0, $i1, i3, i2, $r4, $r5);

        $r3 = virtualinvoke r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.lang.Object createImage(int[],int,int)>($r5, i2, i3);

        return $r3;
    }

    private void scaleArray(java.awt.image.BufferedImage, int, int, int, int, int[], int[])
    {
        int[] r2, r3;
        int i0, i1, $i2, i3, i4, i5, $i6, i7, i8, i9, $i10, i11, $i12, $i13, $i14, i15, i16, i17, i18;
        java.awt.image.BufferedImage r1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i5 := @parameter4: int;

        r2 := @parameter5: int[];

        r3 := @parameter6: int[];

        $i2 = i0 << 16;

        i3 = $i2 / i1;

        $i6 = i4 << 16;

        i7 = $i6 / i5;

        i15 = i7 / 2;

        i16 = i3 / 2;

        i17 = 0;

     label1:
        if i17 >= i1 goto label5;

        i8 = i16 >> 16;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void getRGB(java.lang.Object,int[],int,int,int,int,int)>(r1, r2, 0, 0, i8, i4, 1);

        i18 = 0;

     label2:
        if i18 >= i5 goto label4;

        i9 = i15 >> 16;

        $i10 = i17 * i5;

        i11 = i18 + $i10;

        if i11 < 0 goto label3;

        $i12 = lengthof r3;

        if i11 >= $i12 goto label3;

        $i13 = lengthof r2;

        if i9 >= $i13 goto label3;

        $i14 = r2[i9];

        r3[i11] = $i14;

     label3:
        i15 = i15 + i7;

        i18 = i18 + 1;

        goto label2;

     label4:
        i16 = i16 + i3;

        i15 = i7 / 2;

        i17 = i17 + 1;

        goto label1;

     label5:
        return;
    }

    private static int round(double)
    {
        byte $b0;
        int $i1, $i2, $i3;
        double d0, $d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>(d0);

        $d4 = $d2 - d0;

        $d3 = d0 - $d1;

        $b0 = $d4 cmpg $d3;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        $i2 = (int) $d2;

        return $i2;

     label1:
        $i1 = (int) $d1;

        return $i1;
    }

    public java.lang.Object rotate(java.lang.Object, int)
    {
        int[] r2, r3;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, i20, i21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        java.lang.Object r1, $r4;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        i6 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: int getImageWidth(java.lang.Object)>(r1);

        $i1 = virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: int getImageHeight(java.lang.Object)>(r1);

        $i2 = $i0 * $i1;

        r2 = newarray (int)[$i2];

        $i3 = lengthof r2;

        r3 = newarray (int)[$i3];

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void getRGB(java.lang.Object,int[],int,int,int,int,int)>(r1, r2, 0, 0, 0, $i0, $i1);

        i4 = $i0 / 2;

        i5 = $i1 / 2;

        $i7 = neg i6;

        $d0 = (double) $i7;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        i20 = 0;

     label1:
        if i20 >= $i0 goto label5;

        i21 = 0;

     label2:
        if i21 >= $i1 goto label4;

        $i8 = i20 - i4;

        $d4 = (double) $i8;

        $d7 = $d2 * $d4;

        $i9 = i21 - i5;

        $d5 = (double) $i9;

        $d6 = $d3 * $d5;

        $d9 = $d7 - $d6;

        $d8 = (double) i4;

        $d10 = $d9 + $d8;

        $i10 = staticinvoke <com.sun.lwuit.impl.swing.SwingImplementation: int round(double)>($d10);

        $i11 = i20 - i4;

        $d11 = (double) $i11;

        $d14 = $d3 * $d11;

        $i12 = i21 - i5;

        $d12 = (double) $i12;

        $d13 = $d2 * $d12;

        $d16 = $d14 + $d13;

        $d15 = (double) i5;

        $d17 = $d16 + $d15;

        $i13 = staticinvoke <com.sun.lwuit.impl.swing.SwingImplementation: int round(double)>($d17);

        if $i10 < 0 goto label3;

        if $i13 < 0 goto label3;

        if $i10 >= $i0 goto label3;

        if $i13 >= $i1 goto label3;

        $i14 = $i13 * $i0;

        i15 = $i10 + $i14;

        if i15 < 0 goto label3;

        $i16 = lengthof r3;

        if i15 >= $i16 goto label3;

        $i17 = i21 * $i0;

        $i19 = i20 + $i17;

        $i18 = r2[i15];

        r3[$i19] = $i18;

     label3:
        i21 = i21 + 1;

        goto label2;

     label4:
        i20 = i20 + 1;

        goto label1;

     label5:
        $r4 = virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.lang.Object createImage(int[],int,int)>(r3, $i0, $i1);

        return $r4;
    }

    public int getSoftkeyCount()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 2;
    }

    public int[] getSoftkeyCode(int)
    {
        int[] $r0, $r1;
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r2;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = newarray (int)[1];

        $r1[0] = 112;

        return $r1;

     label1:
        if i0 != 1 goto label2;

        $r0 = newarray (int)[1];

        $r0[0] = 113;

        return $r0;

     label2:
        return null;
    }

    public int getClearKeyCode()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 0;
    }

    public int getBackspaceKeyCode()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 0;
    }

    public int getBackKeyCode()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 0;
    }

    public int getGameAction(int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 37: goto label4;
            case 38: goto label1;
            case 39: goto label3;
            case 40: goto label2;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return 6;

     label3:
        return 5;

     label4:
        return 2;

     label5:
        return 0;
    }

    public int getKeyCode(int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label5;
        };

     label1:
        return 38;

     label2:
        return 40;

     label3:
        return 39;

     label4:
        return 37;

     label5:
        return 0;
    }

    public boolean isTouchDevice()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 1;
    }

    public void setNativeFont(java.lang.Object, java.lang.Object)
    {
        java.awt.Graphics2D r1;
        java.awt.Font $r4;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0, r3;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r4 = specialinvoke r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r3);

        virtualinvoke r1.<java.awt.Graphics2D: void setFont(java.awt.Font)>($r4);

        return;
    }

    public int getClipX(java.lang.Object)
    {
        java.awt.Rectangle $r2;
        java.awt.Graphics2D r1;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = $r2.<java.awt.Rectangle: int x>;

        return $i0;
    }

    public int getClipY(java.lang.Object)
    {
        java.awt.Rectangle $r2;
        java.awt.Graphics2D r1;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = $r2.<java.awt.Rectangle: int y>;

        return $i0;
    }

    public int getClipWidth(java.lang.Object)
    {
        java.awt.Rectangle $r2;
        java.awt.Graphics2D r1;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = $r2.<java.awt.Rectangle: int width>;

        return $i0;
    }

    public int getClipHeight(java.lang.Object)
    {
        java.awt.Rectangle $r2;
        java.awt.Graphics2D r1;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = $r2.<java.awt.Rectangle: int height>;

        return $i0;
    }

    public void setClip(java.lang.Object, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void setClip(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void clipRect(java.lang.Object, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void clipRect(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void drawLine(java.lang.Object, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void fillRect(java.lang.Object, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public boolean isAlphaGlobal()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 1;
    }

    public void drawRect(java.lang.Object, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void drawRect(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void drawRoundRect(java.lang.Object, int, int, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void drawRoundRect(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        return;
    }

    public void fillRoundRect(java.lang.Object, int, int, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void fillRoundRect(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        return;
    }

    public void fillArc(java.lang.Object, int, int, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void fillArc(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        return;
    }

    public void drawArc(java.lang.Object, int, int, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void drawArc(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        return;
    }

    public void setColor(java.lang.Object, int)
    {
        java.awt.Color $r2;
        java.awt.Graphics2D r1;
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int)>(i0);

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r2);

        return;
    }

    public int getColor(java.lang.Object)
    {
        java.awt.Color $r2;
        java.awt.Graphics2D r1;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Color getColor()>();

        $i0 = virtualinvoke $r2.<java.awt.Color: int getRGB()>();

        return $i0;
    }

    public void setAlpha(java.lang.Object, int)
    {
        java.awt.AlphaComposite $r2;
        java.awt.Graphics2D r1;
        int i0;
        float $f0, f1;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r1 = (java.awt.Graphics2D) r0;

        $f0 = (float) i0;

        f1 = $f0 / 255.0F;

        $r2 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, f1);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r2);

        return;
    }

    public int getAlpha(java.lang.Object)
    {
        java.awt.Composite $r2;
        java.awt.AlphaComposite $r3;
        java.awt.Graphics2D r1;
        int $i0;
        float $f0, $f1;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;
        boolean $z0;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        if $r2 == null goto label1;

        $z0 = $r2 instanceof java.awt.AlphaComposite;

        if $z0 == 0 goto label1;

        $r3 = (java.awt.AlphaComposite) $r2;

        $f0 = virtualinvoke $r3.<java.awt.AlphaComposite: float getAlpha()>();

        $f1 = $f0 * 255.0F;

        $i0 = (int) $f1;

        return $i0;

     label1:
        return 255;
    }

    public void drawString(java.lang.Object, java.lang.String, int, int)
    {
        java.awt.FontMetrics $r3;
        java.awt.Graphics2D r1;
        int i0, i1, $i2, $i3;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;
        java.lang.String r2;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        $i2 = virtualinvoke $r3.<java.awt.FontMetrics: int getAscent()>();

        $i3 = i1 + $i2;

        virtualinvoke r1.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>(r2, i0, $i3);

        return;
    }

    public void drawImage(java.lang.Object, java.lang.Object, int, int)
    {
        java.awt.image.BufferedImage $r3;
        java.awt.Graphics2D r2;
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0, r1;
        boolean $z0;
        com.sun.lwuit.impl.swing.SVG $r5;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = r0 instanceof com.sun.lwuit.impl.swing.SVG;

        if $z0 == 0 goto label1;

        $r5 = (com.sun.lwuit.impl.swing.SVG) r0;

        specialinvoke r4.<com.sun.lwuit.impl.swing.SwingImplementation: void drawSVGImage(java.lang.Object,com.sun.lwuit.impl.swing.SVG,int,int)>(r1, $r5, i0, i1);

        goto label2;

     label1:
        r2 = (java.awt.Graphics2D) r1;

        $r3 = (java.awt.image.BufferedImage) r0;

        virtualinvoke r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r3, i0, i1, null);

     label2:
        return;
    }

    public void fillTriangle(java.lang.Object, int, int, int, int, int, int)
    {
        java.awt.Graphics2D r1;
        int[] $r2, $r3;
        int i0, i1, i2, i3, i4, i5;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i1 := @parameter3: int;

        i4 := @parameter4: int;

        i2 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = newarray (int)[3];

        $r2[0] = i0;

        $r2[1] = i1;

        $r2[2] = i2;

        $r3 = newarray (int)[3];

        $r3[0] = i3;

        $r3[1] = i4;

        $r3[2] = i5;

        virtualinvoke r1.<java.awt.Graphics2D: void fillPolygon(int[],int[],int)>($r2, $r3, 3);

        return;
    }

    public void drawRGB(java.lang.Object, int[], int, int, int, int, int, boolean)
    {
        java.awt.Graphics2D r1;
        int[] r4;
        int i0, i1, i2, i3, i4, $i5, $i6;
        boolean z0;
        java.awt.image.BufferedImage $r3, $r5, $r6, $r7, $r8, $r9;
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.Object r0;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: int[];

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        z0 := @parameter7: boolean;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache>;

        if $r3 == null goto label1;

        $r5 = r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache>;

        $i5 = virtualinvoke $r5.<java.awt.image.BufferedImage: int getWidth()>();

        if $i5 != i0 goto label1;

        $r6 = r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache>;

        $i6 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getHeight()>();

        if $i6 == i1 goto label2;

     label1:
        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache> = $r7;

     label2:
        $r8 = r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache>;

        virtualinvoke $r8.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, i0, i1, r4, i2, i0);

        $r9 = r2.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.image.BufferedImage cache>;

        virtualinvoke r1.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r9, i3, i4, null);

        return;
    }

    public java.lang.Object getNativeGraphics()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        com.sun.lwuit.impl.swing.SwingImplementation$C $r1;
        java.awt.Graphics2D $r2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r1 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r2 = virtualinvoke $r1.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.Graphics2D getGraphics2D()>();

        return $r2;
    }

    public java.lang.Object getNativeGraphics(java.lang.Object)
    {
        java.awt.image.BufferedImage $r1;
        java.awt.Graphics $r2;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        $r1 = (java.awt.image.BufferedImage) r0;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        return $r2;
    }

    public void translate(java.lang.Object, int, int)
    {
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public int getTranslateX(java.lang.Object)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int getTranslateY(java.lang.Object)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int charsWidth(java.lang.Object, char[], int, int)
    {
        int i0, i1, $i2;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        char[] r3;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: char[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r3, i0, i1);

        $i2 = virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: int stringWidth(java.lang.Object,java.lang.String)>(r1, $r2);

        return $i2;
    }

    public int stringWidth(java.lang.Object, java.lang.String)
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r4;
        java.awt.Font $r2;
        java.awt.geom.Rectangle2D $r6;
        java.awt.font.FontRenderContext $r5;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        java.lang.String r3;
        double $d0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $r4 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r5 = virtualinvoke $r4.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.font.FontRenderContext getFRC()>();

        $r6 = virtualinvoke $r2.<java.awt.Font: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.font.FontRenderContext)>(r3, $r5);

        $d0 = virtualinvoke $r6.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i0 = (int) $d0;

        return $i0;
    }

    public int charWidth(java.lang.Object, char)
    {
        com.sun.lwuit.impl.swing.SwingImplementation$C $r7;
        java.awt.Font $r2;
        java.awt.geom.Rectangle2D $r9;
        char c0;
        java.awt.font.FontRenderContext $r8;
        int $i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        double $d0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        c0 := @parameter1: char;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<com.sun.lwuit.impl.swing.SwingImplementation: com.sun.lwuit.impl.swing.SwingImplementation$C canvas>;

        $r8 = virtualinvoke $r7.<com.sun.lwuit.impl.swing.SwingImplementation$C: java.awt.font.FontRenderContext getFRC()>();

        $r9 = virtualinvoke $r2.<java.awt.Font: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.font.FontRenderContext)>($r6, $r8);

        $d0 = virtualinvoke $r9.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i1 = (int) $d0;

        return $i1;
    }

    public int getHeight(java.lang.Object)
    {
        java.awt.Font $r2;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r2.<java.awt.Font: int getSize()>();

        return $i0;
    }

    public java.lang.Object createFont(int, int, int)
    {
        java.awt.Font r1, r2;
        byte b3, b4, b5, b6;
        int i0, i1, i2;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = <com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font DEFAULT_FONT>;

        lookupswitch(i0)
        {
            case 0: goto label03;
            case 32: goto label01;
            case 64: goto label02;
            default: goto label04;
        };

     label01:
        r1 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>("Monospaced-plain-11");

        goto label04;

     label02:
        r1 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>("SansSerif-plain-11");

        goto label04;

     label03:
        r1 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>("Arial-plain-11");

     label04:
        tableswitch(i1)
        {
            case 0: goto label07;
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label09;
            case 4: goto label08;
            default: goto label09;
        };

     label05:
        b3 = 1;

        b6 = 1;

        b5 = 1;

        b4 = 1;

        goto label10;

     label06:
        b3 = 2;

        b6 = 2;

        b5 = 2;

        b4 = 2;

        goto label10;

     label07:
        b3 = 0;

        b6 = 0;

        b5 = 0;

        b4 = 0;

        goto label10;

     label08:
        b3 = 0;

        b6 = 0;

        b5 = 0;

        b4 = 0;

        goto label10;

     label09:
        b3 = 3;

        b6 = 3;

        b5 = 3;

        b4 = 3;

     label10:
        lookupswitch(i2)
        {
            case 8: goto label12;
            case 16: goto label11;
            default: goto label13;
        };

     label11:
        r2 = virtualinvoke r1.<java.awt.Font: java.awt.Font deriveFont(int,float)>(b6, 14.0F);

        goto label14;

     label12:
        r2 = virtualinvoke r1.<java.awt.Font: java.awt.Font deriveFont(int,float)>(b4, 9.0F);

        goto label14;

     label13:
        r2 = virtualinvoke r1.<java.awt.Font: java.awt.Font deriveFont(int,float)>(b5, 11.0F);

     label14:
        return r2;
    }

    public java.lang.Object getDefaultFont()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r1;
        java.awt.Font $r0;

        r1 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        $r0 = <com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font DEFAULT_FONT>;

        return $r0;
    }

    public int getFace(java.lang.Object)
    {
        java.awt.Font $r2, $r4, $r6;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        java.lang.String $r3, $r5, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.awt.Font: java.lang.String getFamily()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("Monospaced");

        if $z0 == 0 goto label1;

        return 32;

     label1:
        $r4 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.awt.Font: java.lang.String getFamily()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("SansSerif");

        if $z1 == 0 goto label2;

        return 64;

     label2:
        $r6 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.awt.Font: java.lang.String getFamily()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("Arial");

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 0;
    }

    public int getSize(java.lang.Object)
    {
        java.awt.Font $r2;
        int $i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r2.<java.awt.Font: int getSize()>();

        lookupswitch($i0)
        {
            case 9: goto label2;
            case 14: goto label1;
            default: goto label3;
        };

     label1:
        return 16;

     label2:
        return 8;

     label3:
        return 0;
    }

    public int getStyle(java.lang.Object)
    {
        java.awt.Font $r2, $r3, $r4;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r2.<java.awt.Font: boolean isBold()>();

        if $z0 == 0 goto label2;

        $r4 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $z2 = virtualinvoke $r4.<java.awt.Font: boolean isItalic()>();

        if $z2 == 0 goto label1;

        return 3;

     label1:
        return 1;

     label2:
        $r3 = specialinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font font(java.lang.Object)>(r1);

        $z1 = virtualinvoke $r3.<java.awt.Font: boolean isItalic()>();

        if $z1 == 0 goto label3;

        return 2;

     label3:
        return 0;
    }

    private java.awt.Font font(java.lang.Object)
    {
        java.awt.Font $r1, $r2;
        com.sun.lwuit.impl.swing.SwingImplementation r3;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r2 = <com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font DEFAULT_FONT>;

        return $r2;

     label1:
        $r1 = (java.awt.Font) r0;

        return $r1;
    }

    public java.lang.Object loadNativeFont(java.lang.String)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r2;
        java.lang.String r0;
        java.awt.Font $r1;

        r2 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>(r0);

        return $r1;
    }

    public void fillPolygon(java.lang.Object, int[], int[], int)
    {
        java.awt.Graphics2D r1;
        int[] r2, r3;
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        i0 := @parameter3: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void fillPolygon(int[],int[],int)>(r2, r3, i0);

        return;
    }

    public void drawPolygon(java.lang.Object, int[], int[], int)
    {
        java.awt.Graphics2D r1;
        int[] r2, r3;
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r4;
        java.lang.Object r0;

        r4 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        i0 := @parameter3: int;

        r1 = (java.awt.Graphics2D) r0;

        virtualinvoke r1.<java.awt.Graphics2D: void drawPolygon(int[],int[],int)>(r2, r3, i0);

        return;
    }

    public boolean animateImage(java.lang.Object, long)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        long l0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        return 0;
    }

    private com.sun.lwuit.impl.swing.SVG scaleSVG(com.sun.lwuit.impl.swing.SVG, int, int)
    {
        byte[] $r3, $r7, $r15;
        java.lang.Float $r10, $r12;
        java.io.ByteArrayOutputStream $r8;
        java.io.ByteArrayInputStream $r6, $r14;
        int i0, i1;
        java.lang.String $r2;
        org.apache.batik.transcoder.TranscodingHints$Key $r11, $r13;
        com.sun.lwuit.impl.swing.SVG $r0, r1;
        java.awt.image.BufferedImage $r16;
        org.apache.batik.transcoder.TranscoderOutput $r9;
        org.apache.batik.transcoder.image.PNGTranscoder $r4;
        java.lang.Exception $r17;
        org.apache.batik.transcoder.TranscoderInput $r5;
        float $f0, $f1;
        com.sun.lwuit.impl.swing.SwingImplementation r18;

        r18 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: com.sun.lwuit.impl.swing.SVG;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r0 = new com.sun.lwuit.impl.swing.SVG;

        specialinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void <init>()>();

        $r2 = virtualinvoke r1.<com.sun.lwuit.impl.swing.SVG: java.lang.String getBaseURL()>();

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setBaseURL(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<com.sun.lwuit.impl.swing.SVG: byte[] getSvgData()>();

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setSvgData(byte[])>($r3);

        $r4 = new org.apache.batik.transcoder.image.PNGTranscoder;

        specialinvoke $r4.<org.apache.batik.transcoder.image.PNGTranscoder: void <init>()>();

        $r5 = new org.apache.batik.transcoder.TranscoderInput;

        $r6 = new java.io.ByteArrayInputStream;

        $r7 = virtualinvoke r1.<com.sun.lwuit.impl.swing.SVG: byte[] getSvgData()>();

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        specialinvoke $r5.<org.apache.batik.transcoder.TranscoderInput: void <init>(java.io.InputStream)>($r6);

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new org.apache.batik.transcoder.TranscoderOutput;

        specialinvoke $r9.<org.apache.batik.transcoder.TranscoderOutput: void <init>(java.io.OutputStream)>($r8);

        $r11 = <org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_WIDTH>;

        $r10 = new java.lang.Float;

        $f0 = (float) i0;

        specialinvoke $r10.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r4.<org.apache.batik.transcoder.image.PNGTranscoder: void addTranscodingHint(org.apache.batik.transcoder.TranscodingHints$Key,java.lang.Object)>($r11, $r10);

        $r13 = <org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_HEIGHT>;

        $r12 = new java.lang.Float;

        $f1 = (float) i1;

        specialinvoke $r12.<java.lang.Float: void <init>(float)>($f1);

        virtualinvoke $r4.<org.apache.batik.transcoder.image.PNGTranscoder: void addTranscodingHint(org.apache.batik.transcoder.TranscodingHints$Key,java.lang.Object)>($r13, $r12);

        virtualinvoke $r4.<org.apache.batik.transcoder.image.PNGTranscoder: void transcode(org.apache.batik.transcoder.TranscoderInput,org.apache.batik.transcoder.TranscoderOutput)>($r5, $r9);

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

        $r14 = new java.io.ByteArrayInputStream;

        $r15 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15);

        $r16 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r14);

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setImg(java.awt.image.BufferedImage)>($r16);

     label2:
        return $r0;

     label3:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object createSVGImage(java.lang.String, byte[]) throws java.io.IOException
    {
        byte[] r2, $r6, $r10;
        java.io.ByteArrayOutputStream $r7;
        java.awt.image.BufferedImage $r11;
        org.apache.batik.transcoder.TranscoderOutput $r8;
        java.io.IOException $r13;
        org.apache.batik.transcoder.image.PNGTranscoder $r3;
        java.io.ByteArrayInputStream $r5, $r9;
        org.apache.batik.transcoder.TranscoderInput $r4;
        org.apache.batik.transcoder.TranscoderException $r12;
        com.sun.lwuit.impl.swing.SwingImplementation r14;
        java.lang.String r1;
        com.sun.lwuit.impl.swing.SVG $r0;

        r14 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

     label1:
        $r0 = new com.sun.lwuit.impl.swing.SVG;

        specialinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void <init>()>();

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setBaseURL(java.lang.String)>(r1);

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setSvgData(byte[])>(r2);

        $r3 = new org.apache.batik.transcoder.image.PNGTranscoder;

        specialinvoke $r3.<org.apache.batik.transcoder.image.PNGTranscoder: void <init>()>();

        $r4 = new org.apache.batik.transcoder.TranscoderInput;

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: byte[] getSvgData()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        specialinvoke $r4.<org.apache.batik.transcoder.TranscoderInput: void <init>(java.io.InputStream)>($r5);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.batik.transcoder.TranscoderOutput;

        specialinvoke $r8.<org.apache.batik.transcoder.TranscoderOutput: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke $r3.<org.apache.batik.transcoder.image.PNGTranscoder: void transcode(org.apache.batik.transcoder.TranscoderInput,org.apache.batik.transcoder.TranscoderOutput)>($r4, $r8);

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r9);

        virtualinvoke $r0.<com.sun.lwuit.impl.swing.SVG: void setImg(java.awt.image.BufferedImage)>($r11);

     label2:
        return $r0;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<org.apache.batik.transcoder.TranscoderException: void printStackTrace()>();

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

        catch org.apache.batik.transcoder.TranscoderException from label1 to label2 with label3;
    }

    public boolean isSVGSupported()
    {
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        return 0;
    }

    private void drawSVGImage(java.lang.Object, com.sun.lwuit.impl.swing.SVG, int, int)
    {
        java.awt.image.BufferedImage $r3;
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;
        java.lang.Object r1;
        com.sun.lwuit.impl.swing.SVG r2;

        r0 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.lwuit.impl.swing.SVG;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = virtualinvoke r2.<com.sun.lwuit.impl.swing.SVG: java.awt.image.BufferedImage getImg()>();

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, $r3, i0, i1);

        return;
    }

    public java.lang.Object getSVGDocument(java.lang.Object)
    {
        com.sun.lwuit.impl.swing.SwingImplementation r1;
        java.lang.Object r0;

        r1 := @this: com.sun.lwuit.impl.swing.SwingImplementation;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    static void access$000(com.sun.lwuit.impl.swing.SwingImplementation, int, int)
    {
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void sizeChanged(int,int)>(i0, i1);

        return;
    }

    static void access$100(com.sun.lwuit.impl.swing.SwingImplementation, int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void keyPressed(int)>(i0);

        return;
    }

    static void access$200(com.sun.lwuit.impl.swing.SwingImplementation, int)
    {
        int i0;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void keyReleased(int)>(i0);

        return;
    }

    static void access$300(com.sun.lwuit.impl.swing.SwingImplementation, int, int)
    {
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void pointerPressed(int,int)>(i0, i1);

        return;
    }

    static void access$400(com.sun.lwuit.impl.swing.SwingImplementation, int, int)
    {
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void pointerReleased(int,int)>(i0, i1);

        return;
    }

    static void access$500(com.sun.lwuit.impl.swing.SwingImplementation, int, int)
    {
        int i0, i1;
        com.sun.lwuit.impl.swing.SwingImplementation r0;

        r0 := @parameter0: com.sun.lwuit.impl.swing.SwingImplementation;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.sun.lwuit.impl.swing.SwingImplementation: void pointerDragged(int,int)>(i0, i1);

        return;
    }

    static void <clinit>()
    {
        java.awt.Font $r0;

        $r0 = new java.awt.Font;

        specialinvoke $r0.<java.awt.Font: void <init>(java.lang.String,int,int)>("Arial", 0, 11);

        <com.sun.lwuit.impl.swing.SwingImplementation: java.awt.Font DEFAULT_FONT> = $r0;

        return;
    }
}
