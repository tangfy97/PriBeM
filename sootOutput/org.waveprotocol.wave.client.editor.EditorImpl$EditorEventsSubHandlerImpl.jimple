class org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    private void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r1;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean handleBlockLevelCommands(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.client.editor.content.ContentRange)
    {
        org.waveprotocol.wave.client.editor.content.ContentRange r0;
        java.lang.StringBuilder $r30, $r31, $r32;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier $r4;
        java.lang.String $r41, $r42, $r43, $r44, r45, r49;
        org.waveprotocol.wave.model.document.util.Point $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r5;
        org.waveprotocol.wave.client.editor.EditorImpl $r6, $r8, $r10, $r13, $r16, $r20, $r23, $r26, $r33, $r36, $r38, $r46, $r50;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r7, $r9, $r11, $r14, $r21, $r24, $r34, $r37, $r39, $r47;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r19, $r29, $r53;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle $r35, $r48;
        org.waveprotocol.wave.client.editor.EditorSettings $r17, $r27, $r51;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r40;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r15, $r25;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r18, $r28, $r52;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment $r12, $r22;

        r5 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRange;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r4 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier CTRL>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: boolean check(org.waveprotocol.wave.client.common.util.SignalEvent)>(r3);

        if $z0 == 0 goto label10;

        $r6 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i1 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r1);

        $r8 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i2 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r2);

        $i3 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        $i4 = $i3 - 49;

        i5 = $i4 + 1;

        if i5 < 1 goto label07;

        if i5 > 6 goto label07;

        if i5 != 5 goto label03;

        $r36 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r37 = virtualinvoke $r36.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r38 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r39 = virtualinvoke $r38.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i6 = interfaceinvoke $r39.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r1);

        $r40 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLine(org.waveprotocol.wave.model.document.indexed.LocationMapper,int)>($r37, $i6);

        $r41 = "li";

        $r42 = virtualinvoke $r40.<org.waveprotocol.wave.client.editor.content.paragraph.Line: java.lang.String getAttribute(java.lang.String)>("t");

        $z2 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r42);

        if $z2 == 0 goto label01;

        $r43 = "decimal";

        $r44 = virtualinvoke $r40.<org.waveprotocol.wave.client.editor.content.paragraph.Line: java.lang.String getAttribute(java.lang.String)>("listyle");

        $z3 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z3 != 0 goto label01;

        r45 = "decimal";

        goto label02;

     label01:
        r45 = null;

     label02:
        $r46 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r47 = virtualinvoke $r46.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r48 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle listStyle(java.lang.String)>(r45);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>($r47, $i1, $i2, $r48, 1);

        goto label06;

     label03:
        if i5 != 6 goto label04;

        r49 = null;

        goto label05;

     label04:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("h");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        r49 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r33 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r34 = virtualinvoke $r33.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r35 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle regularStyle(java.lang.String)>(r49);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void toggle(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle)>($r34, $i1, $i2, $r35);

     label06:
        $r50 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r51 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r50);

        $r52 = virtualinvoke $r51.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r53 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_HEADINGSTYLE>;

        interfaceinvoke $r52.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r53);

        return 1;

     label07:
        if i5 != 7 goto label08;

        $r20 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r22 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment LEFT>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>($r21, $i1, $i2, $r22, 1);

        $r23 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r24 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r25 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>($r24, $i1, $i2, $r25, 1);

        $r26 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r27 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r26);

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r29 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_ALIGNMENT>;

        interfaceinvoke $r28.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r29);

        return 1;

     label08:
        if i5 != 8 goto label09;

        $r10 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r12 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment RIGHT>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>($r11, $i1, $i2, $r12, 1);

        $r13 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $r15 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction RTL>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>($r14, $i1, $i2, $r15, 1);

        $r16 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r17 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r16);

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r19 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_ALIGNMENT>;

        interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r19);

        return 1;

     label09:
        goto label11;

     label10:
        $i0 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        if $i0 != 9 goto label11;

        $z1 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean getShiftKey()>();

        specialinvoke r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void handleTab(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,boolean)>($r1, $r2, $z1);

        return 1;

     label11:
        return 0;
    }

    public boolean handleRangeKeyCombo(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.client.editor.content.ContentRange)
    {
        com.google.gwt.user.client.Event $r1;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r13, $r17, $r21;
        int[] $r9;
        org.waveprotocol.wave.client.editor.content.ContentRange r6;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.common.util.KeyCombo $r2;
        org.waveprotocol.wave.client.editor.EditorAction $r24;
        org.waveprotocol.wave.client.editor.EditorSettings $r11, $r15, $r19;
        java.lang.AssertionError $r26;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r7, $r8;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r3;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r5, $r23;
        org.waveprotocol.wave.client.editor.EditorImpl $r4, $r10, $r14, $r18, $r22, $r25;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r12, $r16, $r20;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;

        r3 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r6 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRange;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentRange: boolean isCollapsed()>();

        if $z2 == 0 goto label1;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: com.google.gwt.user.client.Event asEvent()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(com.google.gwt.user.client.Event)>($r1);

        $r4 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry access$1800(org.waveprotocol.wave.client.editor.EditorImpl)>($r4);

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: boolean hasAction(org.waveprotocol.wave.client.common.util.KeyCombo)>($r2);

        if $z1 == 0 goto label2;

        $r22 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r23 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry access$1800(org.waveprotocol.wave.client.editor.EditorImpl)>($r22);

        $r24 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.EditorAction getAction(org.waveprotocol.wave.client.common.util.KeyCombo)>($r2);

        $r25 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        interfaceinvoke $r24.<org.waveprotocol.wave.client.editor.EditorAction: void execute(org.waveprotocol.wave.client.editor.EditorContext)>($r25);

        return 1;

     label2:
        $r7 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r8 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r9 = <org.waveprotocol.wave.client.editor.EditorImpl$18: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label5;
            default: goto label6;
        };

     label3:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doStyle(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>($r7, $r8, "fontWeight", "bold");

        $r18 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r18);

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r21 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_BOLD>;

        interfaceinvoke $r20.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r21);

        return 1;

     label4:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doStyle(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>($r7, $r8, "fontStyle", "italic");

        $r14 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r14);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r17 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_ITALIC>;

        interfaceinvoke $r16.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r17);

        return 1;

     label5:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doStyle(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>($r7, $r8, "textDecoration", "underline");

        $r10 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r10);

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r13 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_UNDERLINE>;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r13);

        return 1;

     label6:
        return 0;
    }

    public boolean handleCollapsedKeyCombo(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.model.document.util.Point)
    {
        com.google.gwt.user.client.Event $r1;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager $r9;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r13, $r17, $r21, $r25;
        int[] $r6;
        boolean $z0;
        org.waveprotocol.wave.client.common.util.KeyCombo $r2;
        org.waveprotocol.wave.client.editor.EditorAction $r28;
        org.waveprotocol.wave.client.editor.EditorSettings $r11, $r15, $r19, $r23;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point r8;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r3;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r5, $r27;
        org.waveprotocol.wave.client.editor.EditorImpl $r4, $r7, $r10, $r14, $r18, $r22, $r26, $r29;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r12, $r16, $r20, $r24;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;

        r3 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r8 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: com.google.gwt.user.client.Event asEvent()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(com.google.gwt.user.client.Event)>($r1);

        $r4 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry access$1800(org.waveprotocol.wave.client.editor.EditorImpl)>($r4);

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: boolean hasAction(org.waveprotocol.wave.client.common.util.KeyCombo)>($r2);

        if $z0 == 0 goto label1;

        $r26 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r27 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry access$1800(org.waveprotocol.wave.client.editor.EditorImpl)>($r26);

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.EditorAction getAction(org.waveprotocol.wave.client.common.util.KeyCombo)>($r2);

        $r29 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        interfaceinvoke $r28.<org.waveprotocol.wave.client.editor.EditorAction: void execute(org.waveprotocol.wave.client.editor.EditorContext)>($r29);

        return 1;

     label1:
        $r6 = <org.waveprotocol.wave.client.editor.EditorImpl$18: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label2;
            default: goto label6;
        };

     label2:
        $r7 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = $r7.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager>;

        interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager: boolean showSuggestionsNearestTo(org.waveprotocol.wave.model.document.util.Point)>(r8);

        $r10 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r10);

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r13 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_OPENNEARBYPOPUP>;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r13);

        return 1;

     label3:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doCollapsedStyle(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>(r8, "fontWeight", "bold");

        $r22 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r23 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r22);

        $r24 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r25 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_BOLD>;

        interfaceinvoke $r24.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r25);

        return 1;

     label4:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doCollapsedStyle(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>(r8, "fontStyle", "italic");

        $r18 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r18);

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r21 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_ITALIC>;

        interfaceinvoke $r20.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r21);

        return 1;

     label5:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void doCollapsedStyle(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.lang.String)>(r8, "textDecoration", "underline");

        $r14 = r3.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r14);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r17 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_UNDERLINE>;

        interfaceinvoke $r16.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r17);

        return 1;

     label6:
        return 0;
    }

    public void handleDomMutation(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter $r2;
        org.waveprotocol.wave.client.common.util.SignalEvent r3;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r3 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter access$1100(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: void handleMutationEvent(org.waveprotocol.wave.client.common.util.SignalEvent)>(r3);

        return;
    }

    public boolean handleCommand(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        com.google.gwt.user.client.Event $r2;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r10, $r19;
        int[] $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.client.common.util.KeyCombo $r3;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r12, $r21;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r14, $r23;
        org.waveprotocol.wave.client.editor.EditorSettings $r8, $r17;
        java.lang.AssertionError $r15, $r24;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r5;
        org.waveprotocol.wave.client.editor.EditorImpl $r6, $r7, $r11, $r13, $r16, $r20, $r22;
        org.waveprotocol.wave.client.common.util.EventWrapper $r1;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r9, $r18;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;

        r5 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isUndoCombo()>();

        if $z0 == 0 goto label2;

        $z4 = <org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean $assertionsDisabled>;

        if $z4 != 0 goto label1;

        $r22 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r23 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r22);

        $z5 = interfaceinvoke $r23.<org.waveprotocol.wave.client.editor.Responsibility$Manager: boolean withinDirectSequence()>();

        if $z5 != 0 goto label1;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label1:
        $r16 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r17 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r16);

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r19 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action UNDO>;

        interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r19);

        $r20 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r21 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r20);

        interfaceinvoke $r21.<org.waveprotocol.wave.client.editor.EditorUndoManager: void undo()>();

        return 1;

     label2:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isRedoCombo()>();

        if $z1 == 0 goto label4;

        $z2 = <org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r13 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r14 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r13);

        $z3 = interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.Responsibility$Manager: boolean withinDirectSequence()>();

        if $z3 != 0 goto label3;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label3:
        $r7 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r7);

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r10 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action REDO>;

        interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r10);

        $r11 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r11);

        interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.EditorUndoManager: void redo()>();

        return 1;

     label4:
        $r1 = new org.waveprotocol.wave.client.common.util.EventWrapper;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: com.google.gwt.user.client.Event asEvent()>();

        specialinvoke $r1.<org.waveprotocol.wave.client.common.util.EventWrapper: void <init>(com.google.gwt.user.client.Event)>($r2);

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo()>();

        $r4 = <org.waveprotocol.wave.client.editor.EditorImpl$18: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r4[$i0];

        lookupswitch($i1)
        {
            case 8: goto label5;
            case 9: goto label5;
            default: goto label6;
        };

     label5:
        $r6 = r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: void debugToggleDebugDialog()>();

        return 1;

     label6:
        return 0;
    }

    private void handleTab(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r17, $r18, r23;
        org.waveprotocol.wave.client.editor.EditorSettings $r4, $r21;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r8, $r11;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r6, $r24;
        org.waveprotocol.wave.client.editor.content.ContentElement $r12;
        org.waveprotocol.wave.model.document.util.Point r0, r19;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r2;
        boolean z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.EditorImpl $r3, $r7, $r10, $r15, $r20;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r5, $r22;
        org.waveprotocol.wave.model.document.util.Point$El $r13, $r14;
        java.lang.Object $r1, $r9;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r16;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r19 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r23 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r1;

     label01:
        if r23 == null goto label03;

        $z2 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean isTabTarget(org.waveprotocol.wave.client.editor.content.ContentNode)>(r23);

        if $z2 == 0 goto label02;

        goto label03;

     label02:
        r23 = virtualinvoke r23.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label01;

     label03:
        if r23 != null goto label06;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void applyParagraphIndent(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,boolean)>(r0, r19, z0);

        $r20 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r21 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r20);

        $r22 = virtualinvoke $r21.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        if z0 == 0 goto label04;

        $r24 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_TABOUTDENT>;

        goto label05;

     label04:
        $r24 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_TABINDENT>;

     label05:
        interfaceinvoke $r22.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r24);

        goto label12;

     label06:
        $r3 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r6 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action SHORTCUT_TABFIELDS>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r6);

     label07:
        $r7 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r17 = r23;

        if z0 != 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>($r8, $r17, null, 1, $z3);

        $r18 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r9;

        r23 = $r18;

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean isTabTarget(org.waveprotocol.wave.client.editor.content.ContentNode)>($r18);

        if $z1 == 0 goto label10;

        goto label11;

     label10:
        if $r18 != null goto label07;

     label11:
        if $r18 == null goto label12;

        $r10 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r12 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r18;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r11, $r12);

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r18);

        $r15 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r16 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper access$000(org.waveprotocol.wave.client.editor.EditorImpl)>($r15);

        virtualinvoke $r16.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r13, $r14);

     label12:
        return;
    }

    public boolean isTabTarget(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2;
        java.lang.String $r3;
        boolean $z0;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r5;

        r5 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r4 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.util.StringSet TAB_TARGETS>;

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>($r3);

        return $z0;
    }

    public boolean handleCut(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.EditorUndoManager $r2;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r5, $r7;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.client.editor.event.EditorEvent r8;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r8 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint()>();

        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("handling cut");

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor access$1900(org.waveprotocol.wave.client.editor.EditorImpl)>($r5);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean handleCutEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper)>($r7);

        return $z0;
    }

    public boolean handlePaste(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.EditorUndoManager $r2;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r5, $r7;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r8;
        org.waveprotocol.wave.client.editor.event.EditorEvent r9;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r9 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint()>();

        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("handling paste");

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor access$1900(org.waveprotocol.wave.client.editor.EditorImpl)>($r5);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1400(org.waveprotocol.wave.client.editor.EditorImpl)>($r7);

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean handlePasteEvent(org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)>($r8);

        return $z0;
    }

    public boolean handleCopy(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.client.editor.EditorImpl $r3, $r5;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r6;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r6 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("handling copy");

        $r3 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor access$1900(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        $r5 = r2.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean handleCopyEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper)>($r5);

        return $z0;
    }

    private void doStyle(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r5;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r3, $r6;
        int $i0, $i1;
        java.lang.String $r0, r8, r9;
        org.waveprotocol.wave.model.document.util.Point r4, r7;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r1;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r7 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r9 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: java.lang.String key(java.lang.String)>(r9);

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r4);

        $r5 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i1 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r7);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void applyPaint(int,int,java.lang.String,java.lang.String)>($i0, $i1, $r0, r8);

        return;
    }

    private void doCollapsedStyle(org.waveprotocol.wave.model.document.util.Point, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r5, $r7, $r8;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r3, $r6, $r9;
        java.lang.String $r0, r4, r11;
        org.waveprotocol.wave.model.document.util.Point r10;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r10 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r11 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: java.lang.String key(java.lang.String)>(r11);

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$2000(org.waveprotocol.wave.client.editor.EditorImpl)>($r2);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: boolean isAnnotated(java.lang.String,java.lang.String)>($r0, r4);

        if $z0 == 0 goto label1;

        $r8 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$2000(org.waveprotocol.wave.client.editor.EditorImpl)>($r8);

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>($r0, null);

        goto label2;

     label1:
        $r5 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$2000(org.waveprotocol.wave.client.editor.EditorImpl)>($r5);

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>($r0, r4);

     label2:
        $r7 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: void access$900(org.waveprotocol.wave.client.editor.EditorImpl,boolean,boolean,boolean,boolean)>($r7, 0, 0, 1, 0);

        return;
    }

    private void applyPaint(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.EditorUndoManager $r6;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r5, $r7;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2, $r8;
        int i0, i1, $i2, $i4;
        java.lang.String r3, r4, $r9;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i2 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.String)>(i0, i1, r3, r4);

        $i4 = (int) -1;

        if $i2 != $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint(int,int)>(i0, i1);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        if $z0 == 0 goto label3;

        $r9 = null;

        goto label4;

     label3:
        $r9 = r4;

     label4:
        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setAnnotation(int,int,java.lang.String,java.lang.String)>(i0, i1, r3, $r9);

        return;
    }

    private void applyParagraphIndent(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement$Action $r5;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point r3, r4;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r3);

        $i1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r4);

        if z0 == 0 goto label1;

        $r5 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action OUTDENTER>;

        goto label2;

     label1:
        $r5 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action INDENTER>;

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void traverse(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.ContentElement$Action)>($r2, $i0, $i1, $r5);

        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.client.editor.EditorImpl$1)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$1 r2;
        org.waveprotocol.wave.client.editor.EditorImpl r1;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.EditorImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
