public abstract class org.springframework.aop.aspectj.AbstractAspectJAdvice extends java.lang.Object implements org.aopalliance.aop.Advice, org.springframework.aop.aspectj.AspectJPrecedenceInformation
{
    protected static final java.lang.String JOIN_POINT_KEY;
    protected final java.lang.reflect.Method aspectJAdviceMethod;
    private final int adviceInvocationArgumentCount;
    private final org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut;
    private final org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory;
    private java.lang.String aspectName;
    private int declarationOrder;
    private java.lang.String[] argumentNames;
    private java.lang.String throwingName;
    private java.lang.String returningName;
    private java.lang.Class discoveredReturningType;
    private java.lang.Class discoveredThrowingType;
    private int joinPointArgumentIndex;
    private int joinPointStaticPartArgumentIndex;
    private java.util.Map argumentBindings;
    private boolean argumentsIntrospected;
    private java.lang.reflect.Type discoveredReturningGenericType;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Lorg/aspectj/lang/JoinPoint;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String JOIN_POINT_KEY> = $r1;

        return;
    }

    public static org.aspectj.lang.JoinPoint currentJoinPoint()
    {
        java.lang.IllegalStateException $r12;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r13;
        org.aopalliance.intercept.MethodInvocation $r0;
        java.lang.Object $r3, r10;
        java.lang.StringBuilder $r8, $r11;
        java.lang.String $r2, $r5, $r9;
        org.springframework.aop.ProxyMethodInvocation r1;
        org.aspectj.lang.JoinPoint $r14;
        boolean $z0;

        $r0 = staticinvoke <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.aopalliance.intercept.MethodInvocation currentInvocation()>();

        $z0 = $r0 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("MethodInvocation is not a Spring ProxyMethodInvocation: ");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r12;

     label1:
        r1 = (org.springframework.aop.ProxyMethodInvocation) $r0;

        $r2 = <org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String JOIN_POINT_KEY>;

        $r3 = interfaceinvoke r1.<org.springframework.aop.ProxyMethodInvocation: java.lang.Object getUserAttribute(java.lang.String)>($r2);

        r10 = (org.aspectj.lang.JoinPoint) $r3;

        if r10 != null goto label2;

        $r13 = new org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint;

        specialinvoke $r13.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: void <init>(org.springframework.aop.ProxyMethodInvocation)>(r1);

        r10 = $r13;

        $r5 = <org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String JOIN_POINT_KEY>;

        interfaceinvoke r1.<org.springframework.aop.ProxyMethodInvocation: void setUserAttribute(java.lang.String,java.lang.Object)>($r5, $r13);

     label2:
        $r14 = (org.aspectj.lang.JoinPoint) r10;

        return $r14;
    }

    public void <init>(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)
    {
        java.lang.Class[] $r3;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int $i0, $i2, $i4;
        org.springframework.aop.aspectj.AspectInstanceFactory r5;
        java.lang.reflect.Method r1, $r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r4;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: java.lang.reflect.Method;

        r4 := @parameter1: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r5 := @parameter2: org.springframework.aop.aspectj.AspectInstanceFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames> = null;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName> = null;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName> = null;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredReturningType> = class "Ljava/lang/Object;";

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredThrowingType> = class "Ljava/lang/Object;";

        $i2 = (int) -1;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointArgumentIndex> = $i2;

        $i4 = (int) -1;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointStaticPartArgumentIndex> = $i4;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings> = null;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean argumentsIntrospected> = 0;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Advice method must not be null");

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod> = r1;

        $r2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r3;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount> = $i0;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut> = r4;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory> = r5;

        return;
    }

    public final java.lang.reflect.Method getAspectJAdviceMethod()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        return $r1;
    }

    public final org.springframework.aop.aspectj.AspectJExpressionPointcut getPointcut()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void calculateArgumentBindings()>();

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        return $r1;
    }

    public final org.springframework.aop.Pointcut buildSafePointcut()
    {
        org.springframework.aop.support.ComposablePointcut $r6;
        org.springframework.aop.ClassFilter $r7;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r1;
        org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher $r2;
        java.lang.reflect.Method $r3;
        org.springframework.aop.MethodMatcher $r4, $r5;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut getPointcut()>();

        $r2 = new org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher;

        $r3 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        specialinvoke $r2.<org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher: void <init>(java.lang.reflect.Method)>($r3);

        $r4 = interfaceinvoke $r1.<org.springframework.aop.Pointcut: org.springframework.aop.MethodMatcher getMethodMatcher()>();

        $r5 = staticinvoke <org.springframework.aop.support.MethodMatchers: org.springframework.aop.MethodMatcher intersection(org.springframework.aop.MethodMatcher,org.springframework.aop.MethodMatcher)>($r2, $r4);

        $r6 = new org.springframework.aop.support.ComposablePointcut;

        $r7 = interfaceinvoke $r1.<org.springframework.aop.Pointcut: org.springframework.aop.ClassFilter getClassFilter()>();

        specialinvoke $r6.<org.springframework.aop.support.ComposablePointcut: void <init>(org.springframework.aop.ClassFilter,org.springframework.aop.MethodMatcher)>($r7, $r5);

        return $r6;
    }

    public final org.springframework.aop.aspectj.AspectInstanceFactory getAspectInstanceFactory()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        org.springframework.aop.aspectj.AspectInstanceFactory $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory>;

        return $r1;
    }

    public final java.lang.ClassLoader getAspectClassLoader()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.ClassLoader $r2;
        org.springframework.aop.aspectj.AspectInstanceFactory $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory>;

        $r2 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectInstanceFactory: java.lang.ClassLoader getAspectClassLoader()>();

        return $r2;
    }

    public int getOrder()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int $i0;
        org.springframework.aop.aspectj.AspectInstanceFactory $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory>;

        $i0 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectInstanceFactory: int getOrder()>();

        return $i0;
    }

    public void setAspectName(java.lang.String)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String aspectName> = r1;

        return;
    }

    public java.lang.String getAspectName()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String aspectName>;

        return $r1;
    }

    public void setDeclarationOrder(int)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int i0;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        i0 := @parameter0: int;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int declarationOrder> = i0;

        return;
    }

    public int getDeclarationOrder()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int $i0;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $i0 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int declarationOrder>;

        return $i0;
    }

    public void setArgumentNames(java.lang.String)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r2;
        java.lang.String[] $r1;
        java.lang.String r0;

        r2 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>(r0);

        virtualinvoke r2.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setArgumentNamesFromStringArray(java.lang.String[])>($r1);

        return;
    }

    public void setArgumentNamesFromStringArray(java.lang.String[])
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.reflect.Method $r16, $r19;
        boolean $z0;
        java.lang.StringBuilder $r9, $r12, $r13;
        java.lang.String[] r1, $r2, $r4, $r6, $r10, $r15, $r18, $r22, $r23, $r24, $r25;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8;
        java.lang.String $r3, $r5, $r7, $r11, $r14;
        java.lang.Class[] $r17, $r20;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class r21;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: java.lang.String[];

        $i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[$i0];

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames> = $r2;

        i5 = 0;

        goto label3;

     label1:
        $r4 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r3 = r1[i5];

        $r5 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r3);

        $r4[i5] = $r5;

        $r6 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r7 = $r6[i5];

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean isVariableName(java.lang.String)>($r7);

        if $z0 != 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'argumentNames\' property of AbstractAspectJAdvice contains an argument name \'");

        $r10 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r11 = $r10[i5];

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' that is not a valid Java identifier");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label2:
        i5 = i5 + 1;

     label3:
        $i1 = lengthof r1;

        if i5 < $i1 goto label1;

        $r15 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        if $r15 == null goto label5;

        $r16 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r17 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r17;

        $r18 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i2 = lengthof $r18;

        $i3 = $i2 + 1;

        if $i4 != $i3 goto label5;

        $r19 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r20 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r21 = $r20[0];

        if r21 == class "Lorg/aspectj/lang/JoinPoint;" goto label4;

        if r21 == class "Lorg/aspectj/lang/ProceedingJoinPoint;" goto label4;

        if r21 != class "Lorg/aspectj/lang/JoinPoint$StaticPart;" goto label5;

     label4:
        $r22 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i6 = lengthof $r22;

        $i7 = $i6 + 1;

        $r23 = newarray (java.lang.String)[$i7];

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames> = $r23;

        $r24 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r24[0] = "THIS_JOIN_POINT";

        $r25 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i8 = lengthof $r22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, $r25, 1, $i8);

     label5:
        return;
    }

    public void setReturningName(java.lang.String)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only afterReturning advice can be used to bind a return value");

        throw $r0;
    }

    protected void setReturningNameNoCheck(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.IllegalArgumentException $r5;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.Class $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.String r1, $r11;
        java.lang.ClassLoader $r2;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean isVariableName(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName> = r1;

        goto label4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.ClassLoader getAspectClassLoader()>();

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r1, $r2);

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredReturningType> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returning name \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root cause: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.Class getDiscoveredReturningType()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredReturningType>;

        return $r1;
    }

    protected java.lang.reflect.Type getDiscoveredReturningGenericType()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.reflect.Type $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Type discoveredReturningGenericType>;

        return $r1;
    }

    public void setThrowingName(java.lang.String)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only afterThrowing advice can be used to bind a thrown exception");

        throw $r0;
    }

    protected void setThrowingNameNoCheck(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.IllegalArgumentException $r5;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.Class $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.String r1, $r11;
        java.lang.ClassLoader $r2;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean isVariableName(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName> = r1;

        goto label4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.ClassLoader getAspectClassLoader()>();

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r1, $r2);

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredThrowingType> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Throwing name \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root cause: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.Class getDiscoveredThrowingType()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredThrowingType>;

        return $r1;
    }

    private boolean isVariableName(java.lang.String)
    {
        char $c0, $c2;
        int $i1, i3;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r2;
        char[] $r1;
        java.lang.String r0;
        boolean $z0, $z1;

        r2 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $c0 = $r1[0];

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i3 = 1;

        goto label4;

     label2:
        $c2 = $r1[i3];

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c2);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

     label4:
        $i1 = lengthof $r1;

        if i3 < $i1 goto label2;

        return 1;
    }

    public final synchronized void calculateArgumentBindings()
    {
        java.lang.Class[] $r2;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int $i0, i1, $i3, $i5;
        java.lang.Class $r3, $r4, $r5;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $z0 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean argumentsIntrospected>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        i1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = $r2[0];

        $z1 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean maybeBindJoinPoint(java.lang.Class)>($r3);

        if $z1 != 0 goto label3;

        $r4 = $r2[0];

        $z2 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean maybeBindProceedingJoinPoint(java.lang.Class)>($r4);

        if $z2 == 0 goto label4;

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label5;

     label4:
        $r5 = $r2[0];

        $z3 = specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean maybeBindJoinPointStaticPart(java.lang.Class)>($r5);

        if $z3 == 0 goto label5;

        $i5 = (int) -1;

        i1 = i1 + $i5;

     label5:
        if i1 <= 0 goto label6;

        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void bindArgumentsByName(int)>(i1);

     label6:
        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean argumentsIntrospected> = 1;

        return;
    }

    private boolean maybeBindJoinPoint(java.lang.Class)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.Class r0;
        boolean $z0;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/aspectj/lang/JoinPoint;");

        if $z0 == 0 goto label1;

        r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointArgumentIndex> = 0;

        return 1;

     label1:
        return 0;
    }

    private boolean maybeBindProceedingJoinPoint(java.lang.Class)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/aspectj/lang/ProceedingJoinPoint;");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: boolean supportsProceedingJoinPoint()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ProceedingJoinPoint is only supported for around advice");

        throw $r2;

     label1:
        r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointArgumentIndex> = 0;

        return 1;

     label2:
        return 0;
    }

    protected boolean supportsProceedingJoinPoint()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        return 0;
    }

    private boolean maybeBindJoinPointStaticPart(java.lang.Class)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.Class r0;
        boolean $z0;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/aspectj/lang/JoinPoint$StaticPart;");

        if $z0 == 0 goto label1;

        r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointStaticPartArgumentIndex> = 0;

        return 1;

     label1:
        return 0;
    }

    private void bindArgumentsByName(int)
    {
        org.springframework.core.ParameterNameDiscoverer $r14;
        java.lang.IllegalStateException $r3;
        java.lang.String[] $r1, $r2, $r16;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        int i0;
        java.lang.String $r6, $r13;
        java.lang.reflect.Method $r5, $r15;
        java.lang.StringBuilder $r4, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        if $r1 != null goto label1;

        $r14 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.core.ParameterNameDiscoverer createParameterNameDiscoverer()>();

        $r15 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r16 = interfaceinvoke $r14.<org.springframework.core.ParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>($r15);

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames> = $r16;

     label1:
        $r2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        if $r2 == null goto label2;

        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void bindExplicitArguments(int)>(i0);

        goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Advice method [");

        $r5 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments to be bound by name, but ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the argument names were not specified and could not be discovered.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r3;

     label3:
        return;
    }

    protected org.springframework.core.ParameterNameDiscoverer createParameterNameDiscoverer()
    {
        org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer $r2;
        org.springframework.core.PrioritizedParameterNameDiscoverer $r0;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer $r1;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r3;
        java.lang.String $r5, $r6, $r7;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r4;

        r3 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r0 = new org.springframework.core.PrioritizedParameterNameDiscoverer;

        specialinvoke $r0.<org.springframework.core.PrioritizedParameterNameDiscoverer: void <init>()>();

        $r1 = new org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        specialinvoke $r1.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: void <init>()>();

        virtualinvoke $r0.<org.springframework.core.PrioritizedParameterNameDiscoverer: void addDiscoverer(org.springframework.core.ParameterNameDiscoverer)>($r1);

        $r2 = new org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer;

        $r4 = r3.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        $r5 = virtualinvoke $r4.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        specialinvoke $r2.<org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer: void <init>(java.lang.String)>($r5);

        $r6 = r3.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        virtualinvoke $r2.<org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer: void setReturningName(java.lang.String)>($r6);

        $r7 = r3.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        virtualinvoke $r2.<org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer: void setThrowingName(java.lang.String)>($r7);

        virtualinvoke $r2.<org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer: void setRaiseExceptions(boolean)>(1);

        virtualinvoke $r0.<org.springframework.core.PrioritizedParameterNameDiscoverer: void addDiscoverer(org.springframework.core.ParameterNameDiscoverer)>($r2);

        return $r0;
    }

    private void bindExplicitArguments(int)
    {
        java.lang.Integer $r9, r51, r52;
        java.util.Map $r7, $r13, $r15, $r27, $r29;
        java.lang.StringBuilder $r21, $r23, $r24, $r38, $r40, $r41, $r44, $r45, $r46, $r48, $r49;
        java.lang.String $r8, $r10, $r11, $r12, $r14, $r22, $r25, $r26, $r28, $r39, $r42, $r50;
        java.lang.Class[] $r3, $r18, $r32;
        java.lang.IllegalStateException $r20, $r37, $r43;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.reflect.Method $r2, $r17, $r31, $r34;
        boolean $z0, $z1;
        java.lang.reflect.Type $r36;
        java.lang.reflect.Type[] $r35;
        java.util.HashMap $r1;
        java.lang.String[] $r4, $r5, $r6, $r47;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object $r16, $r30;
        java.lang.Class $r19, $r33;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        i2 := @parameter0: int;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings> = $r1;

        $r2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r3;

        $r4 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i1 = lengthof $r4;

        if $i1 == i0 goto label1;

        $r43 = new java.lang.IllegalStateException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expecting to find ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments to bind by name in advice, but actually found ");

        $r47 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i9 = lengthof $r47;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments.");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r50);

        throw $r43;

     label1:
        $i3 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        i4 = $i3 - i2;

        i10 = i4;

        goto label3;

     label2:
        $r7 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r6 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r8 = $r6[i10];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        i10 = i10 + 1;

     label3:
        $r5 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i5 = lengthof $r5;

        if i10 < $i5 goto label2;

        $r10 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        if $r10 == null goto label5;

        $r27 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r26 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        $z1 = interfaceinvoke $r27.<java.util.Map: boolean containsKey(java.lang.Object)>($r26);

        if $z1 != 0 goto label4;

        $r37 = new java.lang.IllegalStateException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returning argument name \'");

        $r39 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not bound in advice arguments");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r42);

        throw $r37;

     label4:
        $r29 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r28 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        r51 = (java.lang.Integer) $r30;

        $r31 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r32 = virtualinvoke $r31.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i7 = virtualinvoke r51.<java.lang.Integer: int intValue()>();

        $r33 = $r32[$i7];

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredReturningType> = $r33;

        $r34 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r35 = virtualinvoke $r34.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i8 = virtualinvoke r51.<java.lang.Integer: int intValue()>();

        $r36 = $r35[$i8];

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Type discoveredReturningGenericType> = $r36;

     label5:
        $r11 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        if $r11 == null goto label7;

        $r13 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r12 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        $z0 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z0 != 0 goto label6;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Throwing argument name \'");

        $r22 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not bound in advice arguments");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label6:
        $r15 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r14 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r52 = (java.lang.Integer) $r16;

        $r17 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i6 = virtualinvoke r52.<java.lang.Integer: int intValue()>();

        $r19 = $r18[$i6];

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Class discoveredThrowingType> = $r19;

     label7:
        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void configurePointcutParameters(int)>(i4);

        return;
    }

    private void configurePointcutParameters(int)
    {
        java.lang.String[] $r3, $r6, $r9, $r12, $r17, $r19;
        int i0, $i1, $i2, $i3, i4, i5, i6, $i7;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        java.lang.String $r1, $r2, $r7, $r8, $r10, $r11, $r13;
        java.lang.reflect.Method $r4;
        boolean $z0, $z1;
        java.lang.Class[] $r5, $r18;
        java.lang.Class $r14;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r15, $r16;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        i0 := @parameter0: int;

        i4 = i0;

        $r1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        if $r1 == null goto label1;

        i4 = i0 + 1;

     label1:
        $r2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        if $r2 == null goto label2;

        i4 = i4 + 1;

     label2:
        $r3 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i1 = lengthof $r3;

        $i2 = $i1 - i4;

        $r17 = newarray (java.lang.String)[$i2];

        $i3 = lengthof $r17;

        $r18 = newarray (java.lang.Class)[$i3];

        $r4 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i5 = 0;

        i6 = 0;

        goto label7;

     label3:
        if i6 >= i0 goto label4;

        goto label6;

     label4:
        $r6 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r8 = $r6[i6];

        $r7 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label6;

        $r9 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r11 = $r9[i6];

        $r10 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        $r12 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $r13 = $r12[i6];

        $r17[i5] = $r13;

        $r14 = $r5[i6];

        $r18[i5] = $r14;

        i5 = i5 + 1;

     label6:
        i6 = i6 + 1;

     label7:
        $r19 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String[] argumentNames>;

        $i7 = lengthof $r19;

        if i6 < $i7 goto label3;

        $r15 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        virtualinvoke $r15.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setParameterNames(java.lang.String[])>($r17);

        $r16 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        virtualinvoke $r16.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setParameterTypes(java.lang.Class[])>($r18);

        return;
    }

    protected java.lang.Object[] argBinding(org.aspectj.lang.JoinPoint, org.aspectj.weaver.tools.JoinPointMatch, java.lang.Object, java.lang.Throwable)
    {
        java.lang.IllegalStateException $r36;
        org.aspectj.weaver.tools.JoinPointMatch r8;
        org.aspectj.weaver.tools.PointcutParameter r23;
        java.lang.Integer r27, r32, r33;
        java.util.Map $r15, $r19, $r25, $r31;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10, $r35;
        java.lang.Throwable r17;
        java.lang.Object[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10, i11, $i12, $i14, $i16;
        org.aspectj.lang.JoinPoint$StaticPart $r30;
        java.lang.String $r11, $r12, $r13, $r14, $r18, $r24, $r34;
        org.aspectj.lang.JoinPoint r29;
        java.lang.Object $r16, $r20, r21, $r26, $r28;
        org.aspectj.weaver.tools.PointcutParameter[] $r22;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r29 := @parameter0: org.aspectj.lang.JoinPoint;

        r8 := @parameter1: org.aspectj.weaver.tools.JoinPointMatch;

        r21 := @parameter2: java.lang.Object;

        r17 := @parameter3: java.lang.Throwable;

        virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void calculateArgumentBindings()>();

        $i0 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        r1 = newarray (java.lang.Object)[$i0];

        i10 = 0;

        $i1 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointArgumentIndex>;

        $i14 = (int) -1;

        if $i1 == $i14 goto label01;

        $i9 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointArgumentIndex>;

        r1[$i9] = r29;

        i10 = 1;

        goto label02;

     label01:
        $i2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointStaticPartArgumentIndex>;

        $i16 = (int) -1;

        if $i2 == $i16 goto label02;

        $i8 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int joinPointStaticPartArgumentIndex>;

        $r30 = interfaceinvoke r29.<org.aspectj.lang.JoinPoint: org.aspectj.lang.JoinPoint$StaticPart getStaticPart()>();

        r1[$i8] = $r30;

        i10 = 1;

     label02:
        $r31 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>($r31);

        if $z0 != 0 goto label07;

        if r8 == null goto label05;

        $r22 = interfaceinvoke r8.<org.aspectj.weaver.tools.JoinPointMatch: org.aspectj.weaver.tools.PointcutParameter[] getParameterBindings()>();

        i6 = lengthof $r22;

        i11 = 0;

        goto label04;

     label03:
        r23 = $r22[i11];

        $r24 = interfaceinvoke r23.<org.aspectj.weaver.tools.PointcutParameter: java.lang.String getName()>();

        $r25 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r27 = (java.lang.Integer) $r26;

        $i7 = virtualinvoke r27.<java.lang.Integer: int intValue()>();

        $r28 = interfaceinvoke r23.<org.aspectj.weaver.tools.PointcutParameter: java.lang.Object getBinding()>();

        r1[$i7] = $r28;

        i10 = i10 + 1;

        i11 = i11 + 1;

     label04:
        if i11 < i6 goto label03;

     label05:
        $r12 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        if $r12 == null goto label06;

        $r19 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r18 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String returningName>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r32 = (java.lang.Integer) $r20;

        $i5 = virtualinvoke r32.<java.lang.Integer: int intValue()>();

        r1[$i5] = r21;

        i10 = i10 + 1;

     label06:
        $r13 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        if $r13 == null goto label07;

        $r15 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.util.Map argumentBindings>;

        $r14 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String throwingName>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r33 = (java.lang.Integer) $r16;

        $i4 = virtualinvoke r33.<java.lang.Integer: int intValue()>();

        r1[$i4] = r17;

        i10 = i10 + 1;

     label07:
        $i12 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        if i10 == $i12 goto label10;

        $r36 = new java.lang.IllegalStateException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Required to bind ");

        $i3 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: int adviceInvocationArgumentCount>;

        $r4 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments, but only bound ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (JoinPointMatch ");

        if r8 != null goto label08;

        $r34 = "was NOT";

        goto label09;

     label08:
        $r34 = "WAS";

     label09:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bound in invocation)");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r36;

     label10:
        return r1;
    }

    protected java.lang.Object invokeAdviceMethod(org.aspectj.weaver.tools.JoinPointMatch, java.lang.Object, java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r4;
        java.lang.Object[] $r5;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        org.aspectj.weaver.tools.JoinPointMatch r2;
        java.lang.Object r3, $r6;
        org.aspectj.lang.JoinPoint $r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r2 := @parameter0: org.aspectj.weaver.tools.JoinPointMatch;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.aspectj.lang.JoinPoint getJoinPoint()>();

        $r5 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Object[] argBinding(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>($r1, r2, r3, r4);

        $r6 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Object invokeAdviceMethodWithGivenArgs(java.lang.Object[])>($r5);

        return $r6;
    }

    protected java.lang.Object invokeAdviceMethod(org.aspectj.lang.JoinPoint, org.aspectj.weaver.tools.JoinPointMatch, java.lang.Object, java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r4;
        java.lang.Object[] $r5;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r0;
        org.aspectj.weaver.tools.JoinPointMatch r2;
        java.lang.Object r3, $r6;
        org.aspectj.lang.JoinPoint r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r1 := @parameter0: org.aspectj.lang.JoinPoint;

        r2 := @parameter1: org.aspectj.weaver.tools.JoinPointMatch;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Throwable;

        $r5 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Object[] argBinding(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>(r1, r2, r3, r4);

        $r6 = virtualinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.Object invokeAdviceMethodWithGivenArgs(java.lang.Object[])>($r5);

        return $r6;
    }

    protected java.lang.Object invokeAdviceMethodWithGivenArgs(java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r10;
        java.lang.Object[] r0, r22;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        int $i0;
        java.lang.String $r21;
        org.springframework.aop.aspectj.AspectInstanceFactory $r5;
        java.lang.reflect.Method $r2, $r4, $r6, $r14;
        org.springframework.aop.AopInvocationException $r12;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r11;
        java.lang.reflect.InvocationTargetException $r9;
        org.aspectj.weaver.tools.PointcutExpression $r18;
        java.lang.Object $r7, $r8;
        java.lang.StringBuilder $r13, $r15, $r16, $r19, $r20;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r17;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: java.lang.Object[];

        r22 = r0;

        $r2 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r3;

        if $i0 != 0 goto label1;

        r22 = (java.lang.Object[]) null;

     label1:
        $r4 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r4);

        $r6 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r5 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectInstanceFactory aspectInstanceFactory>;

        $r7 = interfaceinvoke $r5.<org.springframework.aop.aspectj.AspectInstanceFactory: java.lang.Object getAspectInstance()>();

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, r22);

     label2:
        return $r8;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.springframework.aop.AopInvocationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Mismatch on arguments to advice method [");

        $r14 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; pointcut expression [");

        $r17 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        $r18 = virtualinvoke $r17.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression getPointcutExpression()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.aop.AopInvocationException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r11);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r10;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    protected org.aspectj.lang.JoinPoint getJoinPoint()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        org.aspectj.lang.JoinPoint $r0;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r0 = staticinvoke <org.springframework.aop.aspectj.AbstractAspectJAdvice: org.aspectj.lang.JoinPoint currentJoinPoint()>();

        return $r0;
    }

    protected org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch()
    {
        java.lang.IllegalStateException $r4;
        org.aspectj.weaver.tools.JoinPointMatch $r3;
        org.aopalliance.intercept.MethodInvocation $r0;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        org.springframework.aop.ProxyMethodInvocation $r2;
        boolean $z0;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r0 = staticinvoke <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.aopalliance.intercept.MethodInvocation currentInvocation()>();

        $z0 = $r0 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("MethodInvocation is not a Spring ProxyMethodInvocation: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label1:
        $r2 = (org.springframework.aop.ProxyMethodInvocation) $r0;

        $r3 = virtualinvoke r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch(org.springframework.aop.ProxyMethodInvocation)>($r2);

        return $r3;
    }

    protected org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch(org.springframework.aop.ProxyMethodInvocation)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        org.aspectj.weaver.tools.JoinPointMatch $r5;
        java.lang.Object $r4;
        java.lang.String $r3;
        org.springframework.aop.ProxyMethodInvocation r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r2;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        r0 := @parameter0: org.springframework.aop.ProxyMethodInvocation;

        $r2 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: org.springframework.aop.aspectj.AspectJExpressionPointcut pointcut>;

        $r3 = virtualinvoke $r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        $r4 = interfaceinvoke r0.<org.springframework.aop.ProxyMethodInvocation: java.lang.Object getUserAttribute(java.lang.String)>($r3);

        $r5 = (org.aspectj.weaver.tools.JoinPointMatch) $r4;

        return $r5;
    }

    public java.lang.String toString()
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice r1;
        java.lang.StringBuilder $r0, $r5, $r7, $r8, $r9, $r11, $r12;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r10, $r13;
        java.lang.reflect.Method $r6;

        r1 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": advice method [");

        $r6 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.reflect.Method aspectJAdviceMethod>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aspect name \'");

        $r10 = r1.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String aspectName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }
}
