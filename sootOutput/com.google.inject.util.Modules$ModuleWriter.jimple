class com.google.inject.util.Modules$ModuleWriter extends com.google.inject.spi.DefaultElementVisitor
{
    protected final com.google.inject.Binder binder;

    void <init>(com.google.inject.Binder)
    {
        com.google.inject.util.Modules$ModuleWriter r0;
        com.google.inject.Binder r1;

        r0 := @this: com.google.inject.util.Modules$ModuleWriter;

        r1 := @parameter0: com.google.inject.Binder;

        specialinvoke r0.<com.google.inject.spi.DefaultElementVisitor: void <init>()>();

        r0.<com.google.inject.util.Modules$ModuleWriter: com.google.inject.Binder binder> = r1;

        return;
    }

    protected java.lang.Void visitOther(com.google.inject.spi.Element)
    {
        com.google.inject.spi.Element r0;
        com.google.inject.util.Modules$ModuleWriter r1;
        com.google.inject.Binder $r2;

        r1 := @this: com.google.inject.util.Modules$ModuleWriter;

        r0 := @parameter0: com.google.inject.spi.Element;

        $r2 = r1.<com.google.inject.util.Modules$ModuleWriter: com.google.inject.Binder binder>;

        interfaceinvoke r0.<com.google.inject.spi.Element: void applyTo(com.google.inject.Binder)>($r2);

        return null;
    }

    void writeAll(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        com.google.inject.spi.Element r3;
        com.google.inject.util.Modules$ModuleWriter r4;
        java.lang.Object $r2;
        java.lang.Iterable r0;
        boolean $z0;

        r4 := @this: com.google.inject.util.Modules$ModuleWriter;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.inject.spi.Element) $r2;

        interfaceinvoke r3.<com.google.inject.spi.Element: java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor)>(r4);

        goto label1;

     label2:
        return;
    }

    protected volatile java.lang.Object visitOther(com.google.inject.spi.Element)
    {
        com.google.inject.spi.Element r1;
        com.google.inject.util.Modules$ModuleWriter r0;
        java.lang.Void $r2;

        r0 := @this: com.google.inject.util.Modules$ModuleWriter;

        r1 := @parameter0: com.google.inject.spi.Element;

        $r2 = virtualinvoke r0.<com.google.inject.util.Modules$ModuleWriter: java.lang.Void visitOther(com.google.inject.spi.Element)>(r1);

        return $r2;
    }
}
