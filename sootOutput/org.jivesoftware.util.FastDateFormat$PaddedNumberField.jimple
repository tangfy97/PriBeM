class org.jivesoftware.util.FastDateFormat$PaddedNumberField extends java.lang.Object implements org.jivesoftware.util.FastDateFormat$NumberRule
{
    private final int mField;
    private final int mSize;

    void <init>(int, int)
    {
        org.jivesoftware.util.FastDateFormat$PaddedNumberField r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.jivesoftware.util.FastDateFormat$PaddedNumberField;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: int mField> = i1;

        r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: int mSize> = i0;

        return;
    }

    public int estimateLength()
    {
        org.jivesoftware.util.FastDateFormat$PaddedNumberField r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat$PaddedNumberField;

        return 4;
    }

    public void appendTo(java.lang.StringBuffer, java.util.Calendar)
    {
        java.util.Calendar r2;
        org.jivesoftware.util.FastDateFormat$PaddedNumberField r0;
        java.lang.StringBuffer r1;
        int $i0, $i1;

        r0 := @this: org.jivesoftware.util.FastDateFormat$PaddedNumberField;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.util.Calendar;

        $i0 = r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: int mField>;

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>($i0);

        virtualinvoke r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: void appendTo(java.lang.StringBuffer,int)>(r1, $i1);

        return;
    }

    public final void appendTo(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, $i3, $i5, $i6, i8, i9, i10, $i12, $i14;
        java.lang.String $r2;
        double $d0, $d1, $d2, $d3;
        char $c4, $c7;
        org.jivesoftware.util.FastDateFormat$PaddedNumberField r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat$PaddedNumberField;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        if i0 >= 100 goto label3;

        i8 = r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: int mSize>;

     label1:
        $i12 = (int) -1;

        i8 = i8 + $i12;

        if i8 < 2 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label1;

     label2:
        $i2 = i0 / 10;

        $i3 = $i2 + 48;

        $c4 = (char) $i3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $i5 = i0 % 10;

        $i6 = $i5 + 48;

        $c7 = (char) $i6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        goto label8;

     label3:
        if i0 >= 1000 goto label4;

        i9 = 3;

        goto label5;

     label4:
        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = staticinvoke <org.jivesoftware.util.FastDateFormat: double access$000()>();

        $d3 = $d1 / $d2;

        $i1 = (int) $d3;

        i9 = $i1 + 1;

     label5:
        i10 = r0.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: int mSize>;

     label6:
        $i14 = (int) -1;

        i10 = i10 + $i14;

        if i10 < i9 goto label7;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label6;

     label7:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label8:
        return;
    }
}
