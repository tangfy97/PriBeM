public class com.hp.hpl.jena.sparql.path.PathLib extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.path.PathLib r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.PathLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op pathToTriples(com.hp.hpl.jena.sparql.core.PathBlock)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpPath $r6;
        com.hp.hpl.jena.sparql.core.BasicPattern $r8, r9;
        com.hp.hpl.jena.sparql.core.TriplePath r4;
        com.hp.hpl.jena.graph.Triple $r7;
        com.hp.hpl.jena.sparql.core.PathBlock r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5, r10;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.PathBlock;

        r9 = null;

        r10 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.PathBlock: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.TriplePath) $r3;

        $z0 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z0 == 0 goto label3;

        if r9 != null goto label2;

        $r8 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        r9 = $r8;

     label2:
        $r7 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke r9.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r7);

        goto label1;

     label3:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.algebra.Op)>(r9, r10);

        r9 = null;

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpPath;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath)>(r4);

        r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r5, $r6);

        goto label1;

     label4:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.algebra.Op)>(r9, r10);

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return r3;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r3, $r1);

        return $r2;
    }

    public static void install(java.lang.String, com.hp.hpl.jena.sparql.path.Path)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.path.Path r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry get()>();

        staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: void install(java.lang.String,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry)>(r0, r1, $r2);

        return;
    }

    public static void install(java.lang.String, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry r2;
        com.hp.hpl.jena.sparql.path.Path r1;
        com.hp.hpl.jena.sparql.path.PathLib$1 $r0;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;

        $r0 = new com.hp.hpl.jena.sparql.path.PathLib$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.path.PathLib$1: void <init>(com.hp.hpl.jena.sparql.path.Path)>(r1);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: void put(java.lang.String,com.hp.hpl.jena.sparql.pfunction.PropertyFunctionFactory)>(r3, $r0);

        return;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.core.TriplePath, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.path.P_Link $r6;
        com.hp.hpl.jena.sparql.core.TriplePath $r8, r11;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r7, $r9, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.path.Path $r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r11 := @parameter1: com.hp.hpl.jena.sparql.core.TriplePath;

        r4 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z0 == 0 goto label1;

        $r6 = new com.hp.hpl.jena.sparql.path.P_Link;

        $r7 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getPredicate()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.path.P_Link: void <init>(com.hp.hpl.jena.graph.Node)>($r7);

        $r8 = new com.hp.hpl.jena.sparql.core.TriplePath;

        $r9 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r10 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r9, $r6, $r10);

        r11 = $r8;

     label1:
        $r1 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        $r3 = virtualinvoke r11.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, $r1, $r2, $r3, r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node $r4, $r5, r14, r15, r17;
        com.hp.hpl.jena.sparql.path.Path r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.graph.Graph $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator r16;
        com.hp.hpl.jena.sparql.core.Var $r9, $r10, $r12;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r7, $r8, $r11, $r13;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r14 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.sparql.path.Path;

        r15 := @parameter3: com.hp.hpl.jena.graph.Node;

        r1 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        staticinvoke <com.hp.hpl.jena.sparql.mgt.Explain: void explain(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.Context)>(r14, r0, r15, $r2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node)>(r3, r14);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node)>(r3, r15);

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z0 == 0 goto label2;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r5);

        if $z4 == 0 goto label2;

        $z5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label1;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r4);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator ungroundedPathSameVar(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, $r6, $r12, r0, r1);

        return $r13;

     label1:
        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r4);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r5);

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator ungroundedPath(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, $r6, $r9, r0, $r10, r1);

        return $r11;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z1 != 0 goto label3;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r5);

        if $z3 != 0 goto label3;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator groundedPath(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, $r6, $r4, r0, $r5, r1);

        return $r8;

     label3:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z2 == 0 goto label4;

        r16 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEval: java.util.Iterator evalReverse(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path)>($r6, $r5, r0);

        r17 = $r4;

        goto label5;

     label4:
        r16 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEval: java.util.Iterator eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path)>($r6, $r4, r0);

        r17 = $r5;

     label5:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator _execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding,java.util.Iterator,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, r16, r17, r1);

        return $r7;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator _execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding, java.util.Iterator, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r4;
        java.util.Iterator r3, $r5;
        com.hp.hpl.jena.graph.Node r1, r7;
        com.hp.hpl.jena.sparql.core.Var $r2;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8, $r9;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r10;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r11;
        boolean $z0, $z1;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: java.util.Iterator;

        r1 := @parameter2: com.hp.hpl.jena.graph.Node;

        r11 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r1);

        if $z0 != 0 goto label1;

        $r10 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Non-variable endnode in _execTriplePath");

        throw $r10;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r1);

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r8, $r2, r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator)>($r5);

        return $r4;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator groundedPath(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN $r4;
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Node r1, r7, r8;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        com.hp.hpl.jena.sparql.path.Path r2;
        int i0;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r9;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter2: com.hp.hpl.jena.graph.Node;

        r2 := @parameter3: com.hp.hpl.jena.sparql.path.Path;

        r8 := @parameter4: com.hp.hpl.jena.graph.Node;

        r9 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEval: java.util.Iterator eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path)>(r0, r1, r2);

        i0 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $z1 = virtualinvoke r7.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN: void <init>(int,com.hp.hpl.jena.sparql.engine.binding.Binding)>(i0, r5);

        return $r4;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator ungroundedPath(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.Iterator $r1, $r10;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r2;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.Var r7, r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6, $r8;
        com.hp.hpl.jena.sparql.path.Path r9;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r3;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r12;
        boolean $z0;

        r6 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r7 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        r9 := @parameter3: com.hp.hpl.jena.sparql.path.Path;

        r11 := @parameter4: com.hp.hpl.jena.sparql.core.Var;

        r3 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.util.Iterator allNodes(com.hp.hpl.jena.graph.Graph)>(r0);

        $r2 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r6, r7, r5);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEval: java.util.Iterator eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path)>(r0, r5, r9);

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.engine.QueryIterator _execTriplePath(com.hp.hpl.jena.sparql.engine.binding.Binding,java.util.Iterator,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, $r10, r11, r3);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r12);

        goto label1;

     label2:
        return $r2;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator ungroundedPathSameVar(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN $r10;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r2;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.Var r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6, $r8;
        com.hp.hpl.jena.sparql.path.Path r9;
        int $i0;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r3;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r6 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r7 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        r9 := @parameter3: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.util.Iterator allNodes(com.hp.hpl.jena.graph.Graph)>(r0);

        $r2 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r6, r7, r5);

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: int existsPath(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r0, r5, r9, r5);

        if $i0 <= 0 goto label2;

        $r10 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN: void <init>(int,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($i0, $r8, r3);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r10);

     label2:
        goto label1;

     label3:
        return $r2;
    }

    private static int existsPath(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r5, $r7;
        com.hp.hpl.jena.sparql.path.PathLib$2 $r6;
        long $l0;
        com.hp.hpl.jena.graph.Node r0, r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r1;
        com.hp.hpl.jena.sparql.path.Path r4;
        int $i1;
        com.hp.hpl.jena.graph.Graph r3;
        boolean $z0, $z1;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter3: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z1 != 0 goto label2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Non concrete node for existsPath evaluation");

        throw $r1;

     label2:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEval: java.util.Iterator eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path)>(r3, r0, r4);

        $r6 = new com.hp.hpl.jena.sparql.path.PathLib$2;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.path.PathLib$2: void <init>(com.hp.hpl.jena.graph.Node)>(r2);

        $r7 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator filter(java.util.Iterator,org.apache.jena.atlas.iterator.Filter)>($r5, $r6);

        $l0 = staticinvoke <org.apache.jena.atlas.iterator.Iter: long count(java.util.Iterator)>($r7);

        $i1 = (int) $l0;

        return $i1;
    }
}
