public class com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality r4;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3, $r5;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r1, r2);

        if $r3 != null goto label1;

        $r5 = specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r2);

        return $r5;

     label1:
        return $r3;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r0, r8;
        com.hp.hpl.jena.sparql.algebra.Op r9, $r20, $r21, r23;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r6;
        java.util.List $r3, r5, $r17, $r18;
        org.apache.jena.atlas.lib.Pair $r1, r12;
        com.hp.hpl.jena.sparql.expr.NodeValue $r16;
        com.hp.hpl.jena.sparql.algebra.op.Op2 $r19;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r22;
        int $i0, $i1, $i2, $i3;
        java.util.Iterator $r10;
        com.hp.hpl.jena.sparql.core.Var $r14;
        java.lang.Object $r2, $r4, $r7, $r11, $r13, $r15;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r9 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: org.apache.jena.atlas.lib.Pair preprocessFilterEquality(com.hp.hpl.jena.sparql.expr.ExprList)>(r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke $r1.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        r5 = (java.util.List) $r4;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: java.util.Collection varsMentionedInEqualityFilters(java.util.List)>(r5);

        $r7 = virtualinvoke $r1.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        r8 = (com.hp.hpl.jena.sparql.expr.ExprList) $r7;

        $i1 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i1 >= $i2 goto label3;

        return null;

     label3:
        r23 = r9;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean testSpecialCaseUnused(com.hp.hpl.jena.sparql.algebra.Op,java.util.List,com.hp.hpl.jena.sparql.expr.ExprList)>(r9, r5, r8);

        if $z0 == 0 goto label4;

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r22;

     label4:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean testSpecialCase1(com.hp.hpl.jena.sparql.algebra.Op,java.util.List,com.hp.hpl.jena.sparql.expr.ExprList)>(r9, r5, r8);

        if $z1 == 0 goto label5;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: java.util.List extractOptionals(com.hp.hpl.jena.sparql.algebra.Op)>(r9);

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: java.util.List processSpecialCase1(java.util.List,java.util.List)>($r17, r5);

        $r19 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r9;

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op rebuild(com.hp.hpl.jena.sparql.algebra.op.Op2,java.util.List)>($r19, $r18);

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r0, $r20);

        return $r21;

     label5:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>($r6, r9);

        if $z2 != 0 goto label6;

        return null;

     label6:
        $r10 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.jena.atlas.lib.Pair) $r11;

        $r13 = virtualinvoke r12.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        $r14 = (com.hp.hpl.jena.sparql.core.Var) $r13;

        $r15 = virtualinvoke r12.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        $r16 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r15;

        r23 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op processFilterWorker(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.NodeValue)>(r23, $r14, $r16);

        goto label7;

     label8:
        $i3 = virtualinvoke r8.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i3 <= 0 goto label9;

        r23 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r8, r23);

     label9:
        return r23;
    }

    private static org.apache.jena.atlas.lib.Pair preprocessFilterEquality(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.Iterator $r4;
        java.util.ArrayList $r0;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.expr.Expr r7;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, r2;
        int $i0;
        org.apache.jena.atlas.lib.Pair $r5, $r8;
        java.lang.Object $r6;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.expr.Expr) $r6;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: org.apache.jena.atlas.lib.Pair preprocess(com.hp.hpl.jena.sparql.expr.Expr)>(r7);

        if $r8 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label2:
        virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r7);

     label3:
        goto label1;

     label4:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label5;

        return null;

     label5:
        $r5 = staticinvoke <org.apache.jena.atlas.lib.Pair: org.apache.jena.atlas.lib.Pair create(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $r5;
    }

    private static org.apache.jena.atlas.lib.Pair preprocess(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r5;
        com.hp.hpl.jena.sparql.expr.Expr r0, $r1, $r2;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.hp.hpl.jena.sparql.core.Var r4;
        org.apache.jena.atlas.lib.Pair $r6;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_Equals;

        if $z0 != 0 goto label1;

        $z10 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_SameTerm;

        if $z10 != 0 goto label1;

        return null;

     label1:
        $r3 = (com.hp.hpl.jena.sparql.expr.ExprFunction2) r0;

        $r1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        $r2 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        r4 = null;

        r5 = null;

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z1 == 0 goto label2;

        $z9 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z9 == 0 goto label2;

        r4 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        r5 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        goto label3;

     label2:
        $z2 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z2 == 0 goto label3;

        $z8 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z8 == 0 goto label3;

        r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        r5 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

     label3:
        if r4 == null goto label4;

        if r5 != null goto label5;

     label4:
        return null;

     label5:
        $z3 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_SameTerm;

        if $z3 == 0 goto label6;

        $z6 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isStrictMode()>();

        if $z6 != 0 goto label6;

        $z7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z7 == 0 goto label6;

        return null;

     label6:
        $z11 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_Equals;

        if $z11 == 0 goto label7;

        $z4 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isStrictMode()>();

        if $z4 != 0 goto label7;

        $z5 = virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isLiteral()>();

        if $z5 == 0 goto label7;

        return null;

     label7:
        $r6 = staticinvoke <org.apache.jena.atlas.lib.Pair: org.apache.jena.atlas.lib.Pair create(java.lang.Object,java.lang.Object)>(r4, r5);

        return $r6;
    }

    private static java.util.Collection varsMentionedInEqualityFilters(java.util.List)
    {
        java.util.HashSet $r0;
        java.util.List r1;
        java.util.Iterator $r2;
        org.apache.jena.atlas.lib.Pair r4;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jena.atlas.lib.Pair) $r3;

        $r5 = virtualinvoke r4.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    private static boolean safeToTransform(java.util.Collection, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r28;
        com.hp.hpl.jena.sparql.core.VarExprList $r8;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r15, $r21, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29;
        java.util.Collection r1;
        java.util.Set $r7;
        java.util.List $r11, $r18;
        com.hp.hpl.jena.sparql.algebra.op.OpN r23;
        com.hp.hpl.jena.sparql.algebra.op.Op2 $r16, $r17;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r27;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r29;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r22;
        java.util.Iterator $r12, $r19;
        com.hp.hpl.jena.sparql.algebra.op.OpModifier r26;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r25;
        com.hp.hpl.jena.sparql.core.Var r14;
        java.lang.Object $r13, $r20;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        if $z0 != 0 goto label01;

        $z1 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        if $z1 == 0 goto label02;

     label01:
        return 1;

     label02:
        $z2 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z2 == 0 goto label03;

        r22 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) r0;

        $r21 = virtualinvoke r22.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z27 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r21);

        return $z27;

     label03:
        $z3 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        if $z3 == 0 goto label07;

        r23 = (com.hp.hpl.jena.sparql.algebra.op.OpN) r0;

        $r18 = virtualinvoke r23.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List getElements()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z25 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z25 == 0 goto label06;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.sparql.algebra.Op) $r20;

        $z26 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r24);

        if $z26 != 0 goto label05;

        return 0;

     label05:
        goto label04;

     label06:
        return 1;

     label07:
        $z4 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        if $z4 != 0 goto label08;

        $z7 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        if $z7 == 0 goto label11;

     label08:
        $r17 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r0;

        $r2 = virtualinvoke $r17.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r2);

        if $z5 == 0 goto label09;

        $r3 = virtualinvoke $r17.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $z6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r3);

        if $z6 == 0 goto label09;

        $z28 = 1;

        goto label10;

     label09:
        $z28 = 0;

     label10:
        return $z28;

     label11:
        $z8 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        if $z8 != 0 goto label12;

        $z12 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        if $z12 == 0 goto label16;

     label12:
        $r16 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r0;

        $r4 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $z9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r4);

        if $z9 == 0 goto label13;

        $r5 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $z10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r5);

        if $z10 != 0 goto label14;

     label13:
        return 0;

     label14:
        $r6 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>($r6);

        $z11 = interfaceinvoke $r7.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        if $z11 == 0 goto label15;

        return 1;

     label15:
        return 0;

     label16:
        $z13 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        if $z13 == 0 goto label17;

        r25 = (com.hp.hpl.jena.sparql.algebra.op.OpGraph) r0;

        $r15 = virtualinvoke r25.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z24 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r15);

        return $z24;

     label17:
        $z14 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpModifier;

        if $z14 == 0 goto label21;

        r26 = (com.hp.hpl.jena.sparql.algebra.op.OpModifier) r0;

        $z20 = r26 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        if $z20 == 0 goto label20;

        r27 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r0;

        $r11 = virtualinvoke r27.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z22 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label20;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.sparql.core.Var) $r13;

        $z23 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r14);

        if $z23 == 0 goto label19;

        return 0;

     label19:
        goto label18;

     label20:
        $r10 = virtualinvoke r26.<com.hp.hpl.jena.sparql.algebra.op.OpModifier: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z21 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r10);

        return $z21;

     label21:
        $z15 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        if $z15 == 0 goto label24;

        r28 = (com.hp.hpl.jena.sparql.algebra.op.OpGroup) r0;

        $r8 = virtualinvoke r28.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $z18 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.core.VarExprList)>(r1, $r8);

        if $z18 == 0 goto label22;

        $r9 = virtualinvoke r28.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z19 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r9);

        if $z19 == 0 goto label22;

        $z29 = 1;

        goto label23;

     label22:
        $z29 = 0;

     label23:
        return $z29;

     label24:
        $z16 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTable;

        if $z16 == 0 goto label25;

        r29 = (com.hp.hpl.jena.sparql.algebra.op.OpTable) r0;

        $z17 = virtualinvoke r29.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z17 == 0 goto label25;

        return 1;

     label25:
        return 0;
    }

    private static boolean safeToTransform(java.util.Collection, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.List $r1;
        java.util.Collection r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        boolean $z0;

        r2 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $z0 = staticinvoke <org.apache.jena.atlas.lib.CollectionUtils: boolean disjoint(java.util.Collection,java.util.Collection)>($r1, r2);

        return $z0;
    }

    private static boolean testSpecialCaseUnused(com.hp.hpl.jena.sparql.algebra.Op, java.util.List, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.Iterator $r3;
        java.util.Set $r1;
        java.util.List r2;
        com.hp.hpl.jena.sparql.expr.ExprList r7;
        org.apache.jena.atlas.lib.Pair r5;
        java.lang.Object $r4, $r6;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: java.util.List;

        r7 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.jena.atlas.lib.Pair) $r4;

        $r6 = virtualinvoke r5.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private static boolean testSpecialCase1(com.hp.hpl.jena.sparql.algebra.Op, java.util.List, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.algebra.op.Op2 $r0;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

     label1:
        $z0 = r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        if $z0 != 0 goto label2;

        $z1 = r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        if $z1 == 0 goto label3;

     label2:
        $r0 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r3;

        r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        goto label1;

     label3:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean isUnitTable(com.hp.hpl.jena.sparql.algebra.Op)>(r3);

        return $z2;
    }

    private static java.util.List extractOptionals(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 $r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1, r3;
        java.util.ArrayList $r0;
        boolean $z0, $z1;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        if $z0 != 0 goto label2;

        $z1 = r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        if $z1 == 0 goto label3;

     label2:
        $r2 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r3;

        $r1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        goto label1;

     label3:
        return $r0;
    }

    private static java.util.List processSpecialCase1(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r13;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.algebra.Op r6, r14;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4, $r7;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.core.Var $r11;
        java.util.List r1, r3;
        org.apache.jena.atlas.lib.Pair r9;
        java.lang.Object $r5, $r8, $r10, $r12;

        r3 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: java.util.Collection varsMentionedInEqualityFilters(java.util.List)>(r1);

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.algebra.Op) $r5;

        r14 = r6;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: boolean safeToTransform(java.util.Collection,com.hp.hpl.jena.sparql.algebra.Op)>($r2, r6);

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.jena.atlas.lib.Pair) $r8;

        $r10 = virtualinvoke r9.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        $r11 = (com.hp.hpl.jena.sparql.core.Var) $r10;

        $r12 = virtualinvoke r9.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        $r13 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r12;

        r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op processFilterWorker(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.NodeValue)>(r6, $r11, $r13);

        goto label2;

     label3:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label1;

     label4:
        return $r0;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op rebuild(com.hp.hpl.jena.sparql.algebra.op.Op2, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.op.Op2 r4;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBase r5;
        com.hp.hpl.jena.sparql.algebra.Op r3;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r0 := @parameter1: java.util.List;

        r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.algebra.Op) $r2;

        r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.op.Op2 copy(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r5, r3);

        goto label1;

     label2:
        return r5;
    }

    private static boolean isUnitTable(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTable;

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpTable) r0;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op processFilterWorker(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op subst(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1, r2);

        return $r3;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op subst(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r4, $r5;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r0, r1, $r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>($r4, r1, r2);

        return $r5;
    }

    static com.hp.hpl.jena.sparql.algebra.Op processFilter(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r2);

        return $r3;
    }
}
