public class org.apache.pdfbox.ExtractText extends java.lang.Object
{
    private static final java.lang.String PASSWORD;
    private static final java.lang.String ENCODING;
    private static final java.lang.String CONSOLE;
    private static final java.lang.String START_PAGE;
    private static final java.lang.String END_PAGE;
    private static final java.lang.String SORT;
    private static final java.lang.String IGNORE_BEADS;
    private static final java.lang.String DEBUG;
    private static final java.lang.String HTML;
    private static final java.lang.String FORCE;
    private static final java.lang.String NONSEQ;
    private boolean debug;

    private void <init>()
    {
        org.apache.pdfbox.ExtractText r0;

        r0 := @this: org.apache.pdfbox.ExtractText;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.ExtractText: boolean debug> = 0;

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r1;
        org.apache.pdfbox.ExtractText $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.pdfbox.ExtractText;

        specialinvoke $r0.<org.apache.pdfbox.ExtractText: void <init>()>();

        virtualinvoke $r0.<org.apache.pdfbox.ExtractText: void startExtraction(java.lang.String[])>(r1);

        return;
    }

    public void startExtraction(java.lang.String[]) throws java.lang.Exception
    {
        java.util.Map $r13;
        org.apache.pdfbox.pdmodel.PDDocument $r6, $r22, r79;
        org.apache.pdfbox.util.PDFText2HTML $r43;
        java.util.Set $r14;
        org.apache.pdfbox.ExtractText r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r23, $r25, $r26, $r27, $r29, $r31, $r34, $r35, $r38, $r40, $r41, $r52, $r54, $r55;
        java.lang.Throwable $r70, $r71, $r72;
        long $l1, $l2;
        java.lang.String $r5, $r20, $r28, $r33, $r36, $r42, $r53, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, r73, r74, r75, r76, r77;
        org.apache.pdfbox.pdmodel.PDDocumentCatalog $r10;
        java.util.Map$Entry r17;
        java.io.FileOutputStream $r8, $r45;
        java.io.IOException $r48;
        java.io.File $r50, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, z19, z20, z21, z22, $z23, z24, z25, z26, z27;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r80;
        org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification $r37;
        org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial $r49;
        org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode $r12;
        org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile $r19;
        java.lang.String[] r0;
        org.apache.pdfbox.pdmodel.PDDocumentNameDictionary $r11;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        java.io.OutputStreamWriter $r7, $r44, $r46, r78;
        java.io.PrintStream $r24, $r30, $r39, $r47;
        java.util.Iterator $r15;
        org.apache.pdfbox.util.PDFTextStripper $r9, r81;
        java.lang.Object $r16, $r18, $r32;
        java.io.InputStream $r21;

        r1 := @this: org.apache.pdfbox.ExtractText;

        r0 := @parameter0: java.lang.String[];

        z17 = 0;

        z18 = 0;

        z25 = 0;

        z24 = 0;

        z19 = 0;

        z27 = 0;

        z26 = 0;

        z20 = 0;

        z21 = 1;

        z22 = 0;

        r73 = "";

        r74 = null;

        r75 = null;

        r76 = null;

        r77 = ".txt";

        i11 = 1;

        i12 = 2147483647;

        i13 = 0;

     label01:
        $i0 = lengthof r0;

        if i13 >= $i0 goto label19;

        $r57 = r0[i13];

        $z6 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z6 == 0 goto label03;

        i13 = i13 + 1;

        $i10 = lengthof r0;

        if i13 < $i10 goto label02;

        staticinvoke <org.apache.pdfbox.ExtractText: void usage()>();

     label02:
        r73 = r0[i13];

        goto label18;

     label03:
        $r58 = r0[i13];

        $z7 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>("-encoding");

        if $z7 == 0 goto label05;

        i13 = i13 + 1;

        $i9 = lengthof r0;

        if i13 < $i9 goto label04;

        staticinvoke <org.apache.pdfbox.ExtractText: void usage()>();

     label04:
        r74 = r0[i13];

        goto label18;

     label05:
        $r59 = r0[i13];

        $z8 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>("-startPage");

        if $z8 == 0 goto label07;

        i13 = i13 + 1;

        $i8 = lengthof r0;

        if i13 < $i8 goto label06;

        staticinvoke <org.apache.pdfbox.ExtractText: void usage()>();

     label06:
        $r69 = r0[i13];

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r69);

        goto label18;

     label07:
        $r60 = r0[i13];

        $z9 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>("-html");

        if $z9 == 0 goto label08;

        z18 = 1;

        z25 = 1;

        z24 = 1;

        r77 = ".html";

        goto label18;

     label08:
        $r61 = r0[i13];

        $z10 = virtualinvoke $r61.<java.lang.String: boolean equals(java.lang.Object)>("-sort");

        if $z10 == 0 goto label09;

        z20 = 1;

        goto label18;

     label09:
        $r62 = r0[i13];

        $z11 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>("-ignoreBeads");

        if $z11 == 0 goto label10;

        z21 = 0;

        goto label18;

     label10:
        $r63 = r0[i13];

        $z12 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("-debug");

        if $z12 == 0 goto label11;

        r1.<org.apache.pdfbox.ExtractText: boolean debug> = 1;

        goto label18;

     label11:
        $r64 = r0[i13];

        $z13 = virtualinvoke $r64.<java.lang.String: boolean equals(java.lang.Object)>("-endPage");

        if $z13 == 0 goto label13;

        i13 = i13 + 1;

        $i7 = lengthof r0;

        if i13 < $i7 goto label12;

        staticinvoke <org.apache.pdfbox.ExtractText: void usage()>();

     label12:
        $r68 = r0[i13];

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r68);

        goto label18;

     label13:
        $r65 = r0[i13];

        $z14 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>("-console");

        if $z14 == 0 goto label14;

        z17 = 1;

        goto label18;

     label14:
        $r66 = r0[i13];

        $z15 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>("-force");

        if $z15 == 0 goto label15;

        z19 = 1;

        z27 = 1;

        z26 = 1;

        goto label18;

     label15:
        $r67 = r0[i13];

        $z16 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>("-nonSeq");

        if $z16 == 0 goto label16;

        z22 = 1;

        goto label18;

     label16:
        if r75 != null goto label17;

        r75 = r0[i13];

        goto label18;

     label17:
        r76 = r0[i13];

     label18:
        i13 = i13 + 1;

        goto label01;

     label19:
        if r75 != null goto label20;

        staticinvoke <org.apache.pdfbox.ExtractText: void usage()>();

        goto label52;

     label20:
        r78 = null;

        r79 = null;

     label21:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading PDF ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = specialinvoke r1.<org.apache.pdfbox.ExtractText: long startProcessing(java.lang.String)>($r5);

        if r76 != null goto label22;

        $i4 = virtualinvoke r75.<java.lang.String: int length()>();

        if $i4 <= 4 goto label22;

        $r51 = new java.io.File;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $i5 = virtualinvoke r75.<java.lang.String: int length()>();

        $i6 = $i5 - 4;

        $r53 = virtualinvoke r75.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r77);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>($r56);

        r76 = virtualinvoke $r51.<java.io.File: java.lang.String getAbsolutePath()>();

     label22:
        if z22 == 0 goto label23;

        $r50 = new java.io.File;

        specialinvoke $r50.<java.io.File: void <init>(java.lang.String)>(r75);

        r79 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument loadNonSeq(java.io.File,org.apache.pdfbox.io.RandomAccess,java.lang.String)>($r50, null, r73);

        goto label24;

     label23:
        $r6 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String,boolean)>(r75, z26);

        r79 = $r6;

        $z0 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z0 == 0 goto label24;

        $r49 = new org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;

        specialinvoke $r49.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: void <init>(java.lang.String)>(r73);

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: void openProtection(org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)>($r49);

     label24:
        $r80 = virtualinvoke r79.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.AccessPermission getCurrentAccessPermission()>();

        $z23 = virtualinvoke $r80.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: boolean canExtractContent()>();

        if $z23 != 0 goto label25;

        $r48 = new java.io.IOException;

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>("You do not have permission to extract text");

        throw $r48;

     label25:
        specialinvoke r1.<org.apache.pdfbox.ExtractText: void stopProcessing(java.lang.String,long)>("Time for loading: ", $l1);

        if r74 != null goto label26;

        if z25 == 0 goto label26;

        r74 = "UTF-8";

     label26:
        if z17 == 0 goto label27;

        $r46 = new java.io.OutputStreamWriter;

        $r47 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r46.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r47);

        r78 = $r46;

        goto label29;

     label27:
        if r74 == null goto label28;

        $r44 = new java.io.OutputStreamWriter;

        $r45 = new java.io.FileOutputStream;

        specialinvoke $r45.<java.io.FileOutputStream: void <init>(java.lang.String)>(r76);

        specialinvoke $r44.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r45, r74);

        r78 = $r44;

        goto label29;

     label28:
        $r7 = new java.io.OutputStreamWriter;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.lang.String)>(r76);

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r8);

        r78 = $r7;

     label29:
        if z24 == 0 goto label30;

        $r43 = new org.apache.pdfbox.util.PDFText2HTML;

        specialinvoke $r43.<org.apache.pdfbox.util.PDFText2HTML: void <init>(java.lang.String)>(r74);

        r81 = $r43;

        goto label31;

     label30:
        $r9 = new org.apache.pdfbox.util.PDFTextStripper;

        specialinvoke $r9.<org.apache.pdfbox.util.PDFTextStripper: void <init>(java.lang.String)>(r74);

        r81 = $r9;

     label31:
        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void setForceParsing(boolean)>(z27);

        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void setSortByPosition(boolean)>(z20);

        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void setShouldSeparateByBeads(boolean)>(z21);

        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void setStartPage(int)>(i11);

        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void setEndPage(int)>(i12);

        $l2 = specialinvoke r1.<org.apache.pdfbox.ExtractText: long startProcessing(java.lang.String)>("Starting text extraction");

        $z1 = r1.<org.apache.pdfbox.ExtractText: boolean debug>;

        if $z1 == 0 goto label32;

        $r39 = <java.lang.System: java.io.PrintStream err>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing to ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>($r42);

     label32:
        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void writeText(org.apache.pdfbox.pdmodel.PDDocument,java.io.Writer)>(r79, r78);

        $r10 = virtualinvoke r79.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>();

        $r11 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDDocumentNameDictionary getNames()>();

        if $r11 == null goto label45;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.PDDocumentNameDictionary: org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode getEmbeddedFiles()>();

        if $r12 == null goto label45;

        $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode: java.util.Map getNames()>();

        if $r13 == null goto label45;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label33:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label45;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $z3 = r1.<org.apache.pdfbox.ExtractText: boolean debug>;

        if $z3 == 0 goto label34;

        $r30 = <java.lang.System: java.io.PrintStream err>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing embedded file ");

        $r32 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = (java.lang.String) $r32;

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r36);

     label34:
        $r18 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r37 = (org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification) $r18;

        $r19 = virtualinvoke $r37.<org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification: org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile getEmbeddedFile()>();

        if $r19 == null goto label44;

        $r20 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile: java.lang.String getSubtype()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("application/pdf");

        if $z4 == 0 goto label44;

        $z5 = r1.<org.apache.pdfbox.ExtractText: boolean debug>;

        if $z5 == 0 goto label35;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  is PDF (size=");

        $i3 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile: int getSize()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label35:
        $r21 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile: java.io.InputStream createInputStream()>();

     label36:
        $r22 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.InputStream)>($r21);

     label37:
        virtualinvoke $r21.<java.io.InputStream: void close()>();

        goto label40;

     label38:
        $r72 := @caughtexception;

     label39:
        virtualinvoke $r21.<java.io.InputStream: void close()>();

        throw $r72;

     label40:
        virtualinvoke r81.<org.apache.pdfbox.util.PDFTextStripper: void writeText(org.apache.pdfbox.pdmodel.PDDocument,java.io.Writer)>($r22, r78);

     label41:
        virtualinvoke $r22.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label44;

     label42:
        $r71 := @caughtexception;

     label43:
        virtualinvoke $r22.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        throw $r71;

     label44:
        goto label33;

     label45:
        specialinvoke r1.<org.apache.pdfbox.ExtractText: void stopProcessing(java.lang.String,long)>("Time for extraction: ", $l2);

     label46:
        if r78 == null goto label47;

        virtualinvoke r78.<java.io.Writer: void close()>();

     label47:
        if r79 == null goto label52;

        virtualinvoke r79.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label52;

     label48:
        $r70 := @caughtexception;

     label49:
        if r78 == null goto label50;

        virtualinvoke r78.<java.io.Writer: void close()>();

     label50:
        if r79 == null goto label51;

        virtualinvoke r79.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label51:
        throw $r70;

     label52:
        return;

        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
        catch java.lang.Throwable from label21 to label46 with label48;
        catch java.lang.Throwable from label48 to label49 with label48;
    }

    private long startProcessing(java.lang.String)
    {
        java.io.PrintStream $r2;
        org.apache.pdfbox.ExtractText r0;
        long $l0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.ExtractText;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.pdfbox.ExtractText: boolean debug>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r1);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    private void stopProcessing(java.lang.String, long)
    {
        java.io.PrintStream $r2;
        long $l0, l1, $l2;
        org.apache.pdfbox.ExtractText r0;
        float $f0, f1;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.String r3, $r7;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.ExtractText;

        r3 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        $z0 = r0.<org.apache.pdfbox.ExtractText: boolean debug>;

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l0 - l1;

        $f0 = (float) $l2;

        f1 = $f0 / 1000.0F;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java -jar pdfbox-app-x.y.z.jar ExtractText [OPTIONS] <PDF file> [Text File]\n  -password  <password>        Password to decrypt document\n  -encoding  <output encoding> (ISO-8859-1,UTF-16BE,UTF-16LE,...)\n  -console                     Send text to console instead of file\n  -html                        Output in HTML format instead of raw text\n  -sort                        Sort the text before writing\n  -ignoreBeads                 Disables the separation by beads\n  -force                       Enables pdfbox to ignore corrupt objects\n  -debug                       Enables debug output about the time consumption of every stage\n  -startPage <number>          The first page to start extraction(1 based)\n  -endPage <number>            The last page to extract(inclusive)\n  -nonSeq                      Enables the new non-sequential parser\n  <PDF file>                   The PDF document to use\n  [Text File]                  The file to write the text to\n");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.ExtractText: java.lang.String NONSEQ> = "-nonSeq";

        <org.apache.pdfbox.ExtractText: java.lang.String FORCE> = "-force";

        <org.apache.pdfbox.ExtractText: java.lang.String HTML> = "-html";

        <org.apache.pdfbox.ExtractText: java.lang.String DEBUG> = "-debug";

        <org.apache.pdfbox.ExtractText: java.lang.String IGNORE_BEADS> = "-ignoreBeads";

        <org.apache.pdfbox.ExtractText: java.lang.String SORT> = "-sort";

        <org.apache.pdfbox.ExtractText: java.lang.String END_PAGE> = "-endPage";

        <org.apache.pdfbox.ExtractText: java.lang.String START_PAGE> = "-startPage";

        <org.apache.pdfbox.ExtractText: java.lang.String CONSOLE> = "-console";

        <org.apache.pdfbox.ExtractText: java.lang.String ENCODING> = "-encoding";

        <org.apache.pdfbox.ExtractText: java.lang.String PASSWORD> = "-password";

        return;
    }
}
