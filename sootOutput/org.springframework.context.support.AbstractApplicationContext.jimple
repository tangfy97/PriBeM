public abstract class org.springframework.context.support.AbstractApplicationContext extends org.springframework.core.io.DefaultResourceLoader implements org.springframework.context.ConfigurableApplicationContext, org.springframework.beans.factory.DisposableBean
{
    public static final java.lang.String MESSAGE_SOURCE_BEAN_NAME;
    public static final java.lang.String LIFECYCLE_PROCESSOR_BEAN_NAME;
    public static final java.lang.String APPLICATION_EVENT_MULTICASTER_BEAN_NAME;
    protected final org.apache.commons.logging.Log logger;
    private java.lang.String id;
    private java.lang.String displayName;
    private org.springframework.context.ApplicationContext parent;
    private final java.util.List beanFactoryPostProcessors;
    private long startupDate;
    private boolean active;
    private boolean closed;
    private final java.lang.Object activeMonitor;
    private final java.lang.Object startupShutdownMonitor;
    private java.lang.Thread shutdownHook;
    private org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver;
    private org.springframework.context.LifecycleProcessor lifecycleProcessor;
    private org.springframework.context.MessageSource messageSource;
    private org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster;
    private java.util.Set applicationListeners;

    static void <clinit>()
    {
        java.lang.Class $r0;

        <org.springframework.context.support.AbstractApplicationContext: java.lang.String APPLICATION_EVENT_MULTICASTER_BEAN_NAME> = "applicationEventMulticaster";

        <org.springframework.context.support.AbstractApplicationContext: java.lang.String LIFECYCLE_PROCESSOR_BEAN_NAME> = "lifecycleProcessor";

        <org.springframework.context.support.AbstractApplicationContext: java.lang.String MESSAGE_SOURCE_BEAN_NAME> = "messageSource";

        $r0 = class "Lorg/springframework/context/event/ContextClosedEvent;";

        virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        return;
    }

    public void <init>()
    {
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void <init>(org.springframework.context.ApplicationContext)>(null);

        return;
    }

    public void <init>(org.springframework.context.ApplicationContext)
    {
        org.springframework.context.ApplicationContext r9;
        java.util.ArrayList $r5;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Object $r6, $r7;
        java.lang.String $r3, $r4;
        org.springframework.core.io.support.ResourcePatternResolver $r10;
        java.util.LinkedHashSet $r8;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r9 := @parameter0: org.springframework.context.ApplicationContext;

        specialinvoke r0.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)>(r0);

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String id> = $r3;

        $r4 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)>(r0);

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String displayName> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: java.util.List beanFactoryPostProcessors> = $r5;

        r0.<org.springframework.context.support.AbstractApplicationContext: boolean active> = 0;

        r0.<org.springframework.context.support.AbstractApplicationContext: boolean closed> = 0;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object startupShutdownMonitor> = $r7;

        $r8 = new java.util.LinkedHashSet;

        specialinvoke $r8.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: java.util.Set applicationListeners> = $r8;

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent> = r9;

        $r10 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver> = $r10;

        return;
    }

    public void setId(java.lang.String)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String id> = r1;

        return;
    }

    public java.lang.String getId()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String id>;

        return $r1;
    }

    public void setDisplayName(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.context.support.AbstractApplicationContext r1;

        r1 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "Display name must not be empty");

        r1.<org.springframework.context.support.AbstractApplicationContext: java.lang.String displayName> = r0;

        return;
    }

    public java.lang.String getDisplayName()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String displayName>;

        return $r1;
    }

    public org.springframework.context.ApplicationContext getParent()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.ApplicationContext $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent>;

        return $r1;
    }

    public org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws java.lang.IllegalStateException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        return $r1;
    }

    public long getStartupDate()
    {
        long $l0;
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $l0 = r0.<org.springframework.context.support.AbstractApplicationContext: long startupDate>;

        return $l0;
    }

    public void publishEvent(org.springframework.context.ApplicationEvent)
    {
        org.springframework.context.ApplicationContext $r4, $r5;
        org.springframework.context.ApplicationEvent r0;
        org.springframework.context.support.AbstractApplicationContext r1;
        org.apache.commons.logging.Log $r2, $r7;
        java.lang.StringBuilder $r6, $r9, $r10, $r11;
        java.lang.String $r8, $r12;
        boolean $z0;
        org.springframework.context.event.ApplicationEventMulticaster $r3;

        r1 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: org.springframework.context.ApplicationEvent;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Event must not be null");

        $r2 = r1.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r1.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Publishing event in ");

        $r8 = virtualinvoke r1.<org.springframework.context.support.AbstractApplicationContext: java.lang.String getDisplayName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r12);

     label1:
        $r3 = specialinvoke r1.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster getApplicationEventMulticaster()>();

        interfaceinvoke $r3.<org.springframework.context.event.ApplicationEventMulticaster: void multicastEvent(org.springframework.context.ApplicationEvent)>(r0);

        $r4 = r1.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent>;

        if $r4 == null goto label2;

        $r5 = r1.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent>;

        interfaceinvoke $r5.<org.springframework.context.ApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>(r0);

     label2:
        return;
    }

    private org.springframework.context.event.ApplicationEventMulticaster getApplicationEventMulticaster() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;
        org.springframework.context.event.ApplicationEventMulticaster $r1, $r2;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ApplicationEventMulticaster not initialized - call \'refresh\' before multicasting events via the context: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        return $r2;
    }

    private org.springframework.context.LifecycleProcessor getLifecycleProcessor()
    {
        java.lang.IllegalStateException $r3;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;
        org.springframework.context.LifecycleProcessor $r1, $r2;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("LifecycleProcessor not initialized - call \'refresh\' before invoking lifecycle methods via the context: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor>;

        return $r2;
    }

    protected org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver $r0;
        org.springframework.context.support.AbstractApplicationContext r1;

        r1 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r0 = new org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        specialinvoke $r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>(org.springframework.core.io.ResourceLoader)>(r1);

        return $r0;
    }

    public void setParent(org.springframework.context.ApplicationContext)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.ApplicationContext r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: org.springframework.context.ApplicationContext;

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent> = r1;

        return;
    }

    public void addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)
    {
        java.util.List $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.BeanFactoryPostProcessor r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanFactoryPostProcessor;

        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: java.util.List beanFactoryPostProcessors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getBeanFactoryPostProcessors()
    {
        java.util.List $r1;
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.util.List beanFactoryPostProcessors>;

        return $r1;
    }

    public void addApplicationListener(org.springframework.context.ApplicationListener)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.util.Set $r3;
        org.springframework.context.ApplicationListener r2;
        org.springframework.context.event.ApplicationEventMulticaster $r1, $r4;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: org.springframework.context.ApplicationListener;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        if $r1 == null goto label1;

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        interfaceinvoke $r4.<org.springframework.context.event.ApplicationEventMulticaster: void addApplicationListener(org.springframework.context.ApplicationListener)>(r2);

        goto label2;

     label1:
        $r3 = r0.<org.springframework.context.support.AbstractApplicationContext: java.util.Set applicationListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label2:
        return;
    }

    public java.util.Collection getApplicationListeners()
    {
        java.util.Set $r1;
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.util.Set applicationListeners>;

        return $r1;
    }

    public void refresh() throws org.springframework.beans.BeansException, java.lang.IllegalStateException
    {
        java.lang.Throwable $r3;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r1;
        org.springframework.beans.BeansException $r4;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r2;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object startupShutdownMonitor>;

        entermonitor $r1;

     label1:
        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void prepareRefresh()>();

        $r2 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory obtainFreshBeanFactory()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r2);

     label2:
        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r2);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r2);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r2);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void initMessageSource()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void initApplicationEventMulticaster()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void onRefresh()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void registerListeners()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r2);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void finishRefresh()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void destroyBeans()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void cancelRefresh(org.springframework.beans.BeansException)>($r4);

        throw $r4;

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r3;

     label9:
        return;

        catch org.springframework.beans.BeansException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void prepareRefresh()
    {
        java.lang.Throwable $r7;
        long $l0;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2, $r4;
        java.lang.StringBuilder $r3, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.springframework.context.support.AbstractApplicationContext: long startupDate> = $l0;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.context.support.AbstractApplicationContext: boolean active> = 1;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

     label5:
        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Refreshing ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r6);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected org.springframework.beans.factory.config.ConfigurableListableBeanFactory obtainFreshBeanFactory()
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.apache.commons.logging.Log $r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7, $r8;
        java.lang.String $r5, $r9;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void refreshBeanFactory()>();

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean factory for ");

        $r5 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String getDisplayName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label1:
        return $r1;
    }

    protected void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.context.expression.StandardBeanExpressionResolver $r3;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        org.springframework.beans.support.ResourceEditorRegistrar $r4;
        org.springframework.context.support.ContextTypeMatchClassLoader $r7;
        java.util.Map r13, r14;
        org.springframework.context.support.ApplicationContextAwareProcessor $r5;
        boolean $z0, $z1, $z2;
        org.springframework.context.support.AbstractApplicationContext$1 $r12;
        org.springframework.context.support.AbstractApplicationContext$2 $r10;
        org.springframework.context.support.AbstractApplicationContext r1;
        java.security.AccessControlException $r9, $r11;
        org.springframework.context.weaving.LoadTimeWeaverAwareProcessor $r6;
        java.lang.ClassLoader $r2, $r8;

        r1 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r2 = virtualinvoke r1.<org.springframework.context.support.AbstractApplicationContext: java.lang.ClassLoader getClassLoader()>();

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void setBeanClassLoader(java.lang.ClassLoader)>($r2);

        $r3 = new org.springframework.context.expression.StandardBeanExpressionResolver;

        specialinvoke $r3.<org.springframework.context.expression.StandardBeanExpressionResolver: void <init>()>();

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)>($r3);

        $r4 = new org.springframework.beans.support.ResourceEditorRegistrar;

        specialinvoke $r4.<org.springframework.beans.support.ResourceEditorRegistrar: void <init>(org.springframework.core.io.ResourceLoader)>(r1);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)>($r4);

        $r5 = new org.springframework.context.support.ApplicationContextAwareProcessor;

        specialinvoke $r5.<org.springframework.context.support.ApplicationContextAwareProcessor: void <init>(org.springframework.context.ConfigurableApplicationContext)>(r1);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>($r5);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/context/ResourceLoaderAware;");

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/context/ApplicationEventPublisherAware;");

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/context/MessageSourceAware;");

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/context/ApplicationContextAware;");

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerResolvableDependency(java.lang.Class,java.lang.Object)>(class "Lorg/springframework/beans/factory/BeanFactory;", r0);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerResolvableDependency(java.lang.Class,java.lang.Object)>(class "Lorg/springframework/core/io/ResourceLoader;", r1);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerResolvableDependency(java.lang.Class,java.lang.Object)>(class "Lorg/springframework/context/ApplicationEventPublisher;", r1);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerResolvableDependency(java.lang.Class,java.lang.Object)>(class "Lorg/springframework/context/ApplicationContext;", r1);

        $z0 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>("loadTimeWeaver");

        if $z0 == 0 goto label01;

        $r6 = new org.springframework.context.weaving.LoadTimeWeaverAwareProcessor;

        specialinvoke $r6.<org.springframework.context.weaving.LoadTimeWeaverAwareProcessor: void <init>(org.springframework.beans.factory.BeanFactory)>(r0);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>($r6);

        $r7 = new org.springframework.context.support.ContextTypeMatchClassLoader;

        $r8 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        specialinvoke $r7.<org.springframework.context.support.ContextTypeMatchClassLoader: void <init>(java.lang.ClassLoader)>($r8);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void setTempClassLoader(java.lang.ClassLoader)>($r7);

     label01:
        $z1 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>("systemProperties");

        if $z1 != 0 goto label06;

     label02:
        r13 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        $r12 = new org.springframework.context.support.AbstractApplicationContext$1;

        specialinvoke $r12.<org.springframework.context.support.AbstractApplicationContext$1: void <init>(org.springframework.context.support.AbstractApplicationContext)>(r1);

        r13 = $r12;

     label05:
        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>("systemProperties", r13);

     label06:
        $z2 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>("systemEnvironment");

        if $z2 != 0 goto label11;

     label07:
        r14 = staticinvoke <java.lang.System: java.util.Map getenv()>();

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        $r10 = new org.springframework.context.support.AbstractApplicationContext$2;

        specialinvoke $r10.<org.springframework.context.support.AbstractApplicationContext$2: void <init>(org.springframework.context.support.AbstractApplicationContext)>(r1);

        r14 = $r10;

     label10:
        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>("systemEnvironment", r14);

     label11:
        return;

        catch java.security.AccessControlException from label02 to label03 with label04;
        catch java.security.AccessControlException from label07 to label08 with label09;
    }

    protected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        return;
    }

    protected void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry r32;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r1;
        java.util.Map $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r27, $r31;
        java.util.Set $r30;
        java.util.List $r3, $r22;
        org.springframework.context.support.AbstractApplicationContext r2;
        java.lang.String[] $r4;
        java.util.ArrayList $r5, $r6, $r7, $r10, $r15, $r26;
        java.util.HashSet $r0;
        int $i0, i1;
        java.lang.String r36, r37, r38;
        java.util.LinkedList $r20, $r21;
        java.util.Iterator $r11, $r16, $r23, $r28;
        org.springframework.beans.factory.config.BeanFactoryPostProcessor $r9, $r14, $r19, r33;
        org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor r34, r35;
        java.lang.Object $r8, $r12, $r13, $r17, $r18, $r24, $r29;

        r2 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $z0 = r1 instanceof org.springframework.beans.factory.support.BeanDefinitionRegistry;

        if $z0 == 0 goto label06;

        r32 = (org.springframework.beans.factory.support.BeanDefinitionRegistry) r1;

        $r20 = new java.util.LinkedList;

        specialinvoke $r20.<java.util.LinkedList: void <init>()>();

        $r21 = new java.util.LinkedList;

        specialinvoke $r21.<java.util.LinkedList: void <init>()>();

        $r22 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: java.util.List getBeanFactoryPostProcessors()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

        goto label03;

     label01:
        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.springframework.beans.factory.config.BeanFactoryPostProcessor) $r24;

        $z6 = r33 instanceof org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;

        if $z6 == 0 goto label02;

        r34 = (org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor) r33;

        interfaceinvoke r34.<org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor: void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r32);

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r34);

        goto label03;

     label02:
        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>(r33);

     label03:
        $z8 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label01;

        $r25 = interfaceinvoke r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>(class "Lorg/springframework/beans/factory/support/BeanDefinitionRegistryPostProcessor;", 1, 0);

        $r26 = new java.util.ArrayList;

        $r27 = interfaceinvoke $r25.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r26.<java.util.ArrayList: void <init>(java.util.Collection)>($r27);

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r26);

        $r28 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

        goto label05;

     label04:
        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor) $r29;

        interfaceinvoke r35.<org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor: void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r32);

     label05:
        $z7 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label04;

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r21, r1);

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r26, r1);

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r20, r1);

        $r30 = interfaceinvoke $r25.<java.util.Map: java.util.Set keySet()>();

        $r31 = (java.util.Collection) $r30;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r31);

        goto label07;

     label06:
        $r3 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: java.util.List getBeanFactoryPostProcessors()>();

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r3, r1);

     label07:
        $r4 = interfaceinvoke r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(class "Lorg/springframework/beans/factory/config/BeanFactoryPostProcessor;", 1, 0);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r4;

        i1 = 0;

        goto label12;

     label08:
        r36 = $r4[i1];

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(r36);

        if $z1 != 0 goto label11;

        $z2 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r36, class "Lorg/springframework/core/PriorityOrdered;");

        if $z2 == 0 goto label09;

        $r8 = interfaceinvoke r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r36, class "Lorg/springframework/beans/factory/config/BeanFactoryPostProcessor;");

        $r9 = (org.springframework.beans.factory.config.BeanFactoryPostProcessor) $r8;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label11;

     label09:
        $z3 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r36, class "Lorg/springframework/core/Ordered;");

        if $z3 == 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r36);

        goto label11;

     label10:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r36);

     label11:
        i1 = i1 + 1;

     label12:
        if i1 < $i0 goto label08;

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r5);

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r5, r1);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.lang.String) $r12;

        $r13 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r37, class "Lorg/springframework/beans/factory/config/BeanFactoryPostProcessor;");

        $r14 = (org.springframework.beans.factory.config.BeanFactoryPostProcessor) $r13;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14);

     label14:
        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label13;

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r10);

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r10, r1);

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label16;

     label15:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.lang.String) $r17;

        $r18 = virtualinvoke r2.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r38, class "Lorg/springframework/beans/factory/config/BeanFactoryPostProcessor;");

        $r19 = (org.springframework.beans.factory.config.BeanFactoryPostProcessor) $r18;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r19);

     label16:
        $z5 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label15;

        specialinvoke r2.<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(java.util.Collection,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>($r15, r1);

        return;
    }

    private void invokeBeanFactoryPostProcessors(java.util.Collection, org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.context.support.AbstractApplicationContext r5;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.springframework.beans.factory.config.BeanFactoryPostProcessor r3;
        java.lang.Object $r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r4;
        boolean $z0;

        r5 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: java.util.Collection;

        r4 := @parameter1: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.springframework.beans.factory.config.BeanFactoryPostProcessor) $r2;

        interfaceinvoke r3.<org.springframework.beans.factory.config.BeanFactoryPostProcessor: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>(r4);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector $r17;
        org.springframework.beans.factory.config.BeanPostProcessor r19, r21, r23;
        org.springframework.context.support.AbstractApplicationContext r3;
        java.lang.String[] $r1;
        java.util.ArrayList $r4, $r5, $r6, $r7, $r9, $r13;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.String r18, r20, r22;
        java.util.Iterator $r10, $r14;
        org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker $r2;
        java.lang.Object $r8, $r11, $r12, $r15, $r16;

        r3 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(class "Lorg/springframework/beans/factory/config/BeanPostProcessor;", 1, 0);

        $i0 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: int getBeanPostProcessorCount()>();

        $i2 = $i0 + 1;

        $i1 = lengthof $r1;

        i3 = $i2 + $i1;

        $r2 = new org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker;

        specialinvoke $r2.<org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker: void <init>(org.springframework.context.support.AbstractApplicationContext,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,int)>(r3, r0, i3);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>($r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i4 = lengthof $r1;

        i5 = 0;

        goto label5;

     label1:
        r18 = $r1[i5];

        $z0 = virtualinvoke r3.<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r18, class "Lorg/springframework/core/PriorityOrdered;");

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r18, class "Lorg/springframework/beans/factory/config/BeanPostProcessor;");

        r19 = (org.springframework.beans.factory.config.BeanPostProcessor) $r8;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r19);

        $z2 = r19 instanceof org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;

        if $z2 == 0 goto label4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r19);

        goto label4;

     label2:
        $z1 = virtualinvoke r3.<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r18, class "Lorg/springframework/core/Ordered;");

        if $z1 == 0 goto label3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r18);

        goto label4;

     label3:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r18);

     label4:
        i5 = i5 + 1;

     label5:
        if i5 < i4 goto label1;

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r4);

        specialinvoke r3.<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.util.List)>(r0, $r4);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r11;

        $r12 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r20, class "Lorg/springframework/beans/factory/config/BeanPostProcessor;");

        r21 = (org.springframework.beans.factory.config.BeanPostProcessor) $r12;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r21);

        $z3 = r21 instanceof org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;

        if $z3 == 0 goto label7;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r21);

     label7:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label6;

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r9);

        specialinvoke r3.<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.util.List)>(r0, $r9);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label9;

     label8:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r22, class "Lorg/springframework/beans/factory/config/BeanPostProcessor;");

        r23 = (org.springframework.beans.factory.config.BeanPostProcessor) $r16;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r23);

        $z4 = r23 instanceof org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;

        if $z4 == 0 goto label9;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r23);

     label9:
        $z6 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label8;

        specialinvoke r3.<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.util.List)>(r0, $r13);

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r5);

        specialinvoke r3.<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.util.List)>(r0, $r5);

        $r17 = new org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector;

        specialinvoke $r17.<org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector: void <init>(org.springframework.context.support.AbstractApplicationContext,org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector)>(r3, null);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>($r17);

        return;
    }

    private void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List)
    {
        org.springframework.beans.factory.config.BeanPostProcessor r3;
        java.util.List r0;
        org.springframework.context.support.AbstractApplicationContext r5;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r4;
        boolean $z0;

        r5 := @this: org.springframework.context.support.AbstractApplicationContext;

        r4 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.springframework.beans.factory.config.BeanPostProcessor) $r2;

        interfaceinvoke r4.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>(r3);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected void initMessageSource()
    {
        org.springframework.context.support.DelegatingMessageSource $r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        java.lang.String $r11, $r20;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.context.MessageSource $r3, $r4, $r8, $r13, $r17, $r21, $r22, $r23, $r24;
        org.springframework.context.ApplicationContext $r14;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.apache.commons.logging.Log $r5, $r7, $r16, $r26;
        java.lang.StringBuilder $r6, $r9, $r10, $r15, $r18, $r19;
        java.lang.Object $r12;
        org.springframework.context.HierarchicalMessageSource r25;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsLocalBean(java.lang.String)>("messageSource");

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>("messageSource", class "Lorg/springframework/context/MessageSource;");

        $r13 = (org.springframework.context.MessageSource) $r12;

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource> = $r13;

        $r14 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext parent>;

        if $r14 == null goto label1;

        $r21 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        $z2 = $r21 instanceof org.springframework.context.HierarchicalMessageSource;

        if $z2 == 0 goto label1;

        $r22 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        r25 = (org.springframework.context.HierarchicalMessageSource) $r22;

        $r23 = interfaceinvoke r25.<org.springframework.context.HierarchicalMessageSource: org.springframework.context.MessageSource getParentMessageSource()>();

        if $r23 != null goto label1;

        $r24 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource getInternalParentMessageSource()>();

        interfaceinvoke r25.<org.springframework.context.HierarchicalMessageSource: void setParentMessageSource(org.springframework.context.MessageSource)>($r24);

     label1:
        $r26 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r26.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label3;

        $r16 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using MessageSource [");

        $r17 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

        goto label3;

     label2:
        $r2 = new org.springframework.context.support.DelegatingMessageSource;

        specialinvoke $r2.<org.springframework.context.support.DelegatingMessageSource: void <init>()>();

        $r3 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource getInternalParentMessageSource()>();

        virtualinvoke $r2.<org.springframework.context.support.DelegatingMessageSource: void setParentMessageSource(org.springframework.context.MessageSource)>($r3);

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource> = $r2;

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>("messageSource", $r4);

        $r5 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate MessageSource with name \'messageSource\': using default [");

        $r8 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label3:
        return;
    }

    protected void initApplicationEventMulticaster()
    {
        org.springframework.context.event.SimpleApplicationEventMulticaster $r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        java.lang.String $r10, $r19;
        boolean $z0, $z1, $z2;
        org.springframework.context.event.ApplicationEventMulticaster $r3, $r7, $r12, $r16;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.apache.commons.logging.Log $r4, $r6, $r13, $r15;
        java.lang.StringBuilder $r5, $r8, $r9, $r14, $r17, $r18;
        java.lang.Object $r11;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsLocalBean(java.lang.String)>("applicationEventMulticaster");

        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>("applicationEventMulticaster", class "Lorg/springframework/context/event/ApplicationEventMulticaster;");

        $r12 = (org.springframework.context.event.ApplicationEventMulticaster) $r11;

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster> = $r12;

        $r13 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r15 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using ApplicationEventMulticaster [");

        $r16 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

        goto label2;

     label1:
        $r2 = new org.springframework.context.event.SimpleApplicationEventMulticaster;

        specialinvoke $r2.<org.springframework.context.event.SimpleApplicationEventMulticaster: void <init>(org.springframework.beans.factory.BeanFactory)>($r1);

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster> = $r2;

        $r3 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>("applicationEventMulticaster", $r3);

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate ApplicationEventMulticaster with name \'applicationEventMulticaster\': using default [");

        $r7 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster applicationEventMulticaster>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label2:
        return;
    }

    protected void initLifecycleProcessor()
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        java.lang.String $r10, $r19;
        boolean $z0, $z1, $z2;
        org.springframework.context.LifecycleProcessor $r3, $r7, $r12, $r16;
        org.springframework.context.support.DefaultLifecycleProcessor $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.apache.commons.logging.Log $r4, $r6, $r13, $r15;
        java.lang.StringBuilder $r5, $r8, $r9, $r14, $r17, $r18;
        java.lang.Object $r11;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsLocalBean(java.lang.String)>("lifecycleProcessor");

        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>("lifecycleProcessor", class "Lorg/springframework/context/LifecycleProcessor;");

        $r12 = (org.springframework.context.LifecycleProcessor) $r11;

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor> = $r12;

        $r13 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r15 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using LifecycleProcessor [");

        $r16 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

        goto label2;

     label1:
        $r2 = new org.springframework.context.support.DefaultLifecycleProcessor;

        specialinvoke $r2.<org.springframework.context.support.DefaultLifecycleProcessor: void <init>()>();

        virtualinvoke $r2.<org.springframework.context.support.DefaultLifecycleProcessor: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r1);

        r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor> = $r2;

        $r3 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor>;

        interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>("lifecycleProcessor", $r3);

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate LifecycleProcessor with name \'lifecycleProcessor\': using default [");

        $r7 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor lifecycleProcessor>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label2:
        return;
    }

    protected void onRefresh() throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        return;
    }

    protected void registerListeners()
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        java.lang.String[] $r5;
        org.springframework.context.ApplicationListener r7;
        org.springframework.context.support.AbstractApplicationContext r0;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.String r8;
        boolean $z0;
        org.springframework.context.event.ApplicationEventMulticaster $r4, $r6;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: java.util.Collection getApplicationListeners()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.context.ApplicationListener) $r3;

        $r4 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster getApplicationEventMulticaster()>();

        interfaceinvoke $r4.<org.springframework.context.event.ApplicationEventMulticaster: void addApplicationListener(org.springframework.context.ApplicationListener)>(r7);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(class "Lorg/springframework/context/ApplicationListener;", 1, 0);

        i0 = lengthof $r5;

        i1 = 0;

        goto label4;

     label3:
        r8 = $r5[i1];

        $r6 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster getApplicationEventMulticaster()>();

        interfaceinvoke $r6.<org.springframework.context.event.ApplicationEventMulticaster: void addApplicationListenerBean(java.lang.String)>(r8);

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        return;
    }

    protected void addListener(org.springframework.context.ApplicationListener)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.ApplicationListener r2;
        org.springframework.context.event.ApplicationEventMulticaster $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: org.springframework.context.ApplicationListener;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.event.ApplicationEventMulticaster getApplicationEventMulticaster()>();

        interfaceinvoke $r1.<org.springframework.context.event.ApplicationEventMulticaster: void addApplicationListener(org.springframework.context.ApplicationListener)>(r2);

        return;
    }

    protected void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.context.support.AbstractApplicationContext r3;
        java.lang.Object $r1;
        org.springframework.core.convert.ConversionService $r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        boolean $z0, $z1;

        r3 := @this: org.springframework.context.support.AbstractApplicationContext;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $z0 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>("conversionService");

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>("conversionService", class "Lorg/springframework/core/convert/ConversionService;");

        if $z1 == 0 goto label1;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>("conversionService", class "Lorg/springframework/core/convert/ConversionService;");

        $r2 = (org.springframework.core.convert.ConversionService) $r1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void setConversionService(org.springframework.core.convert.ConversionService)>($r2);

     label1:
        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void setTempClassLoader(java.lang.ClassLoader)>(null);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void freezeConfiguration()>();

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void preInstantiateSingletons()>();

        return;
    }

    protected void finishRefresh()
    {
        org.springframework.context.event.ContextRefreshedEvent $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.LifecycleProcessor $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void initLifecycleProcessor()>();

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor getLifecycleProcessor()>();

        interfaceinvoke $r1.<org.springframework.context.LifecycleProcessor: void onRefresh()>();

        $r2 = new org.springframework.context.event.ContextRefreshedEvent;

        specialinvoke $r2.<org.springframework.context.event.ContextRefreshedEvent: void <init>(org.springframework.context.ApplicationContext)>(r0);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>($r2);

        return;
    }

    protected void cancelRefresh(org.springframework.beans.BeansException)
    {
        java.lang.Throwable $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r1;
        org.springframework.beans.BeansException r3;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r3 := @parameter0: org.springframework.beans.BeansException;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.context.support.AbstractApplicationContext: boolean active> = 0;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerShutdownHook()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.support.AbstractApplicationContext$3 $r2;
        java.lang.Thread $r1, $r4;
        java.lang.Runtime $r3;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Thread shutdownHook>;

        if $r1 != null goto label1;

        $r2 = new org.springframework.context.support.AbstractApplicationContext$3;

        specialinvoke $r2.<org.springframework.context.support.AbstractApplicationContext$3: void <init>(org.springframework.context.support.AbstractApplicationContext)>(r0);

        r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Thread shutdownHook> = $r2;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Thread shutdownHook>;

        virtualinvoke $r3.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r4);

     label1:
        return;
    }

    public void destroy()
    {
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void close()>();

        return;
    }

    public void close()
    {
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Thread $r2, $r4;
        java.lang.Runtime $r3;
        java.lang.Object $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object startupShutdownMonitor>;

        entermonitor $r1;

     label1:
        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void doClose()>();

        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Thread shutdownHook>;

        if $r2 == null goto label5;

     label2:
        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r4 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Thread shutdownHook>;

        virtualinvoke $r3.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r5;

     label9:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void doClose()
    {
        java.lang.Throwable $r10, $r11, $r13, $r15;
        org.springframework.context.event.ContextClosedEvent $r3;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.context.LifecycleProcessor $r4;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r1, $r5;
        org.apache.commons.logging.Log $r2, $r7, $r12, $r14;
        java.lang.StringBuilder $r6, $r8;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor>;

        entermonitor $r1;

     label01:
        $z0 = r0.<org.springframework.context.support.AbstractApplicationContext: boolean active>;

        if $z0 == 0 goto label02;

        $z2 = r0.<org.springframework.context.support.AbstractApplicationContext: boolean closed>;

        if $z2 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        r0.<org.springframework.context.support.AbstractApplicationContext: boolean closed> = 1;

        exitmonitor $r1;

     label04:
        goto label07;

     label05:
        $r15 := @caughtexception;

        exitmonitor $r1;

     label06:
        throw $r15;

     label07:
        if $z3 == 0 goto label19;

        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label08;

        $r7 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Closing ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r9);

     label08:
        $r3 = new org.springframework.context.event.ContextClosedEvent;

        specialinvoke $r3.<org.springframework.context.event.ContextClosedEvent: void <init>(org.springframework.context.ApplicationContext)>(r0);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>($r3);

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        $r14 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Exception thrown from ApplicationListener handling ContextClosedEvent", $r13);

     label11:
        $r4 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor getLifecycleProcessor()>();

        interfaceinvoke $r4.<org.springframework.context.LifecycleProcessor: void onClose()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.context.support.AbstractApplicationContext: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Exception thrown from LifecycleProcessor on context close", $r11);

     label14:
        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void destroyBeans()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void closeBeanFactory()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void onClose()>();

        $r5 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor>;

        entermonitor $r5;

     label15:
        r0.<org.springframework.context.support.AbstractApplicationContext: boolean active> = 0;

        exitmonitor $r5;

     label16:
        goto label19;

     label17:
        $r10 := @caughtexception;

        exitmonitor $r5;

     label18:
        throw $r10;

     label19:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected void destroyBeans()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void destroySingletons()>();

        return;
    }

    protected void onClose()
    {
        org.springframework.context.support.AbstractApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        return;
    }

    public boolean isActive()
    {
        java.lang.Throwable $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: java.lang.Object activeMonitor>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.springframework.context.support.AbstractApplicationContext: boolean active>;

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object $r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.Object getBean(java.lang.String, java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class r3;
        java.lang.Object $r4;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r4 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r2, r3);

        return $r4;
    }

    public java.lang.Object getBean(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class r2;
        java.lang.Object $r3;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.Class)>(r2);

        return $r3;
    }

    public transient java.lang.Object getBean(java.lang.String, java.lang.Object[]) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object[] r3;
        java.lang.Object $r4;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r4 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Object[])>(r2, r3);

        return $r4;
    }

    public boolean containsBean(java.lang.String)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>(r2);

        return $z0;
    }

    public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isSingleton(java.lang.String)>(r2);

        return $z0;
    }

    public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isPrototype(java.lang.String)>(r2);

        return $z0;
    }

    public boolean isTypeMatch(java.lang.String, java.lang.Class) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r2, r3);

        return $z0;
    }

    public java.lang.Class getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class $r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Class getType(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String[] getAliases(java.lang.String)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String[] $r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getAliases(java.lang.String)>(r2);

        return $r3;
    }

    public boolean containsBeanDefinition(java.lang.String)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r2);

        return $z0;
    }

    public int getBeanDefinitionCount()
    {
        int $i0;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $i0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: int getBeanDefinitionCount()>();

        return $i0;
    }

    public java.lang.String[] getBeanDefinitionNames()
    {
        java.lang.String[] $r2;
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r2 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        return $r2;
    }

    public java.lang.String[] getBeanNamesForType(java.lang.Class)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class r2;
        java.lang.String[] $r3;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>(r2);

        return $r3;
    }

    public java.lang.String[] getBeanNamesForType(java.lang.Class, boolean, boolean)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Class r2;
        java.lang.String[] $r3;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean z0, z1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(r2, z0, z1);

        return $r3;
    }

    public java.util.Map getBeansOfType(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.util.Map $r3;
        java.lang.Class r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class)>(r2);

        return $r3;
    }

    public java.util.Map getBeansOfType(java.lang.Class, boolean, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.util.Map $r3;
        java.lang.Class r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean z0, z1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>(r2, z0, z1);

        return $r3;
    }

    public java.util.Map getBeansWithAnnotation(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.util.Map $r3;
        java.lang.Class r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.util.Map getBeansWithAnnotation(java.lang.Class)>(r2);

        return $r3;
    }

    public java.lang.'annotation'.Annotation findAnnotationOnBean(java.lang.String, java.lang.Class)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Class r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $r4 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.'annotation'.Annotation findAnnotationOnBean(java.lang.String,java.lang.Class)>(r2, r3);

        return $r4;
    }

    public org.springframework.beans.factory.BeanFactory getParentBeanFactory()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.ApplicationContext $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        return $r1;
    }

    public boolean containsLocalBean(java.lang.String)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        $z0 = interfaceinvoke $r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsLocalBean(java.lang.String)>(r2);

        return $z0;
    }

    protected org.springframework.beans.factory.BeanFactory getInternalParentBeanFactory()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.ConfigurableApplicationContext $r3;
        org.springframework.context.ApplicationContext $r1, $r2;
        boolean $z0;
        org.springframework.beans.factory.ListableBeanFactory $r4;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        $z0 = $r1 instanceof org.springframework.context.ConfigurableApplicationContext;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        $r3 = (org.springframework.context.ConfigurableApplicationContext) $r2;

        $r4 = interfaceinvoke $r3.<org.springframework.context.ConfigurableApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

     label2:
        return $r4;
    }

    public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object[] r3;
        java.util.Locale r5;
        java.lang.String r2, r4, $r6;
        org.springframework.context.MessageSource $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.util.Locale;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource getMessageSource()>();

        $r6 = interfaceinvoke $r1.<org.springframework.context.MessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)>(r2, r3, r4, r5);

        return $r6;
    }

    public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.Object[] r3;
        java.util.Locale r4;
        java.lang.String r2, $r5;
        org.springframework.context.MessageSource $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        r4 := @parameter2: java.util.Locale;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource getMessageSource()>();

        $r5 = interfaceinvoke $r1.<org.springframework.context.MessageSource: java.lang.String getMessage(java.lang.String,java.lang.Object[],java.util.Locale)>(r2, r3, r4);

        return $r5;
    }

    public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        java.util.Locale r3;
        java.lang.String $r4;
        org.springframework.context.MessageSourceResolvable r2;
        org.springframework.context.MessageSource $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r2 := @parameter0: org.springframework.context.MessageSourceResolvable;

        r3 := @parameter1: java.util.Locale;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource getMessageSource()>();

        $r4 = interfaceinvoke $r1.<org.springframework.context.MessageSource: java.lang.String getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale)>(r2, r3);

        return $r4;
    }

    private org.springframework.context.MessageSource getMessageSource() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;
        org.springframework.context.MessageSource $r1, $r2;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("MessageSource not initialized - call \'refresh\' before accessing messages via the context: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        return $r2;
    }

    protected org.springframework.context.MessageSource getInternalParentMessageSource()
    {
        org.springframework.context.support.AbstractApplicationContext r0, $r3;
        org.springframework.context.ApplicationContext $r1, $r2;
        boolean $z0;
        org.springframework.context.MessageSource $r4;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        $z0 = $r1 instanceof org.springframework.context.support.AbstractApplicationContext;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        $r3 = (org.springframework.context.support.AbstractApplicationContext) $r2;

        $r4 = $r3.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.MessageSource messageSource>;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

     label2:
        return $r4;
    }

    public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException
    {
        org.springframework.core.io.Resource[] $r3;
        org.springframework.context.support.AbstractApplicationContext r0;
        java.lang.String r1;
        org.springframework.core.io.support.ResourcePatternResolver $r2;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver>;

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.support.ResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>(r1);

        return $r3;
    }

    public void start()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.event.ContextStartedEvent $r2;
        org.springframework.context.LifecycleProcessor $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor getLifecycleProcessor()>();

        interfaceinvoke $r1.<org.springframework.context.LifecycleProcessor: void start()>();

        $r2 = new org.springframework.context.event.ContextStartedEvent;

        specialinvoke $r2.<org.springframework.context.event.ContextStartedEvent: void <init>(org.springframework.context.ApplicationContext)>(r0);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>($r2);

        return;
    }

    public void stop()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.event.ContextStoppedEvent $r2;
        org.springframework.context.LifecycleProcessor $r1;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor getLifecycleProcessor()>();

        interfaceinvoke $r1.<org.springframework.context.LifecycleProcessor: void stop()>();

        $r2 = new org.springframework.context.event.ContextStoppedEvent;

        specialinvoke $r2.<org.springframework.context.event.ContextStoppedEvent: void <init>(org.springframework.context.ApplicationContext)>(r0);

        virtualinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>($r2);

        return;
    }

    public boolean isRunning()
    {
        org.springframework.context.support.AbstractApplicationContext r0;
        org.springframework.context.LifecycleProcessor $r1;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r1 = specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.LifecycleProcessor getLifecycleProcessor()>();

        $z0 = interfaceinvoke $r1.<org.springframework.context.LifecycleProcessor: boolean isRunning()>();

        return $z0;
    }

    protected abstract void refreshBeanFactory() throws org.springframework.beans.BeansException, java.lang.IllegalStateException;

    protected abstract void closeBeanFactory();

    public abstract org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory() throws java.lang.IllegalStateException;

    public java.lang.String toString()
    {
        java.util.Date $r4;
        long $l0;
        org.springframework.context.ApplicationContext $r5;
        org.springframework.context.support.AbstractApplicationContext r1;
        java.lang.StringBuilder $r0, $r3, $r6;
        java.lang.String $r2, $r7, $r8;

        r1 := @this: org.springframework.context.support.AbstractApplicationContext;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<org.springframework.context.support.AbstractApplicationContext: java.lang.String getDisplayName()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": startup date [");

        $r4 = new java.util.Date;

        $l0 = virtualinvoke r1.<org.springframework.context.support.AbstractApplicationContext: long getStartupDate()>();

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; ");

        $r5 = virtualinvoke r1.<org.springframework.context.support.AbstractApplicationContext: org.springframework.context.ApplicationContext getParent()>();

        if $r5 != null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("root of context hierarchy");

        goto label2;

     label1:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parent: ");

        $r7 = interfaceinvoke $r5.<org.springframework.context.ApplicationContext: java.lang.String getDisplayName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
