public class com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation extends java.lang.Object implements java.lang.reflect.InvocationHandler, com.sun.xml.bind.v2.model.'annotation'.Locatable, com.sun.xml.bind.v2.runtime.Location
{
    private final java.lang.'annotation'.Annotation core;
    private final com.sun.xml.bind.v2.model.'annotation'.Locatable upstream;
    private static final java.util.Map quicks;

    public static java.lang.'annotation'.Annotation create(java.lang.'annotation'.Annotation, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        java.util.Map $r2, $r11;
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation $r7;
        java.lang.String $r4;
        boolean $z0;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r8;
        java.lang.Class[] $r6;
        java.lang.IllegalArgumentException $r15;
        java.lang.'annotation'.Annotation r0, $r10;
        java.lang.Class $r1, $r5;
        java.lang.Object $r9, $r12;
        java.lang.ClassNotFoundException $r16;
        java.lang.ClassLoader $r3;
        com.sun.xml.bind.v2.model.'annotation'.Quick $r13, $r14;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        r8 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r2 = <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.util.Map quicks>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r11 = <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.util.Map quicks>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r13 = (com.sun.xml.bind.v2.model.'annotation'.Quick) $r12;

        $r14 = virtualinvoke $r13.<com.sun.xml.bind.v2.model.'annotation'.Quick: com.sun.xml.bind.v2.model.'annotation'.Quick newInstance(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.'annotation'.Annotation)>(r8, r0);

        return $r14;

     label2:
        $r3 = staticinvoke <com.sun.xml.bind.v2.model.'annotation'.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/model/annotation/LocatableAnnotation;");

     label3:
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r4, 0, $r3);

        if $r5 == $r1 goto label5;

     label4:
        return r0;

     label5:
        $r6 = newarray (java.lang.Class)[2];

        $r6[0] = $r1;

        $r6[1] = class "Lcom/sun/xml/bind/v2/model/annotation/Locatable;";

        $r7 = new com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        specialinvoke $r7.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: void <init>(java.lang.'annotation'.Annotation,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r0, r8);

        $r9 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r6, $r7);

        $r10 = (java.lang.'annotation'.Annotation) $r9;

     label6:
        return $r10;

     label7:
        $r16 := @caughtexception;

        return r0;

     label8:
        $r15 := @caughtexception;

        return r0;

        catch java.lang.ClassNotFoundException from label3 to label4 with label7;
        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
        catch java.lang.IllegalArgumentException from label3 to label4 with label8;
        catch java.lang.IllegalArgumentException from label5 to label6 with label8;
    }

    void <init>(java.lang.'annotation'.Annotation, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        java.lang.'annotation'.Annotation r1;
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation r0;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;

        r0 := @this: com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.lang.'annotation'.Annotation core> = r1;

        r0.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: com.sun.xml.bind.v2.model.'annotation'.Locatable upstream> = r2;

        return;
    }

    public com.sun.xml.bind.v2.model.'annotation'.Locatable getUpstream()
    {
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation r0;
        com.sun.xml.bind.v2.model.'annotation'.Locatable $r1;

        r0 := @this: com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        $r1 = r0.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: com.sun.xml.bind.v2.model.'annotation'.Locatable upstream>;

        return $r1;
    }

    public com.sun.xml.bind.v2.runtime.Location getLocation()
    {
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation r0;

        r0 := @this: com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        return r0;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r9, $r10;
        java.lang.Object[] r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.reflect.InvocationTargetException $r8;
        int $i0;
        java.lang.'annotation'.Annotation $r4;
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation r2;
        java.lang.Class $r1;
        java.lang.Object $r5, $r7, r11;
        java.lang.reflect.Method r0;
        boolean $z0;

        r2 := @this: com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        r11 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

     label1:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r1 != class "Lcom/sun/xml/bind/v2/model/annotation/Locatable;" goto label3;

        $r7 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

     label2:
        return $r7;

     label3:
        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label4:
        $r4 = r2.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.lang.'annotation'.Annotation core>;

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, r3);

     label5:
        return $r5;

     label6:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r9 == null goto label7;

        $r10 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r10;

     label7:
        throw $r8;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label5 with label6;
    }

    public java.lang.String toString()
    {
        java.lang.'annotation'.Annotation $r1;
        com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation r0;
        java.lang.String $r2;

        r0 := @this: com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation;

        $r1 = r0.<com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.lang.'annotation'.Annotation core>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.util.Map $r3;
        int i0, i1;
        java.util.HashMap $r0;
        java.lang.Class $r4;
        com.sun.xml.bind.v2.model.'annotation'.Quick r2;
        com.sun.xml.bind.v2.model.'annotation'.Quick[] $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.util.Map quicks> = $r0;

        $r1 = staticinvoke <com.sun.xml.bind.v2.model.'annotation'.Init: com.sun.xml.bind.v2.model.'annotation'.Quick[] getAll()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        $r3 = <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.util.Map quicks>;

        $r4 = virtualinvoke r2.<com.sun.xml.bind.v2.model.'annotation'.Quick: java.lang.Class annotationType()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
