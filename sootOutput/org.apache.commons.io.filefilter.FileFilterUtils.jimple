public class org.apache.commons.io.filefilter.FileFilterUtils extends java.lang.Object
{
    private static final org.apache.commons.io.filefilter.IOFileFilter cvsFilter;
    private static final org.apache.commons.io.filefilter.IOFileFilter svnFilter;

    public void <init>()
    {
        org.apache.commons.io.filefilter.FileFilterUtils r0;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.lang.Object[] $r4;
        java.lang.IllegalArgumentException $r7, $r9;
        java.io.File r6;
        java.util.ArrayList $r2;
        int i0, $i1, i2;
        java.io.File[] r1, $r3, $r5, $r8;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.io.File[];

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file filter is null");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r8 = newarray (java.io.File)[0];

        return $r8;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r6 = r1[i2];

        if r6 != null goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file array contains null");

        throw $r7;

     label4:
        $z0 = interfaceinvoke r0.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6);

        if $z0 == 0 goto label5;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r6);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (java.io.File)[$i1];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.io.File[]) $r4;

        return $r5;
    }

    public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.List $r2;
        java.lang.Object[] $r4;
        int $i0;
        java.io.File[] $r3, $r5;
        java.lang.Iterable r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (java.io.File)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.io.File[]) $r4;

        return $r5;
    }

    public static java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.List $r4;
        java.util.Collection $r3;
        java.lang.Iterable r1;
        java.util.ArrayList $r2;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Collection filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,java.util.Collection)>(r0, r1, $r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static transient java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.List $r3;
        java.io.File[] r1, $r2;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.io.File[];

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r0, r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r3;
    }

    public static transient java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.HashSet $r3;
        java.util.List $r4;
        java.io.File[] r1, $r2;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.io.File[];

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r0, r1);

        $r3 = new java.util.HashSet;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        return $r3;
    }

    public static java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.HashSet $r2;
        java.util.Collection $r3;
        java.util.Set $r4;
        java.lang.Iterable r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Collection filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,java.util.Collection)>(r0, r1, $r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    private static java.util.Collection filter(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable, java.util.Collection)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        java.util.Iterator $r3;
        java.util.Collection r2;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.Iterable r1;
        java.io.File r5;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: java.util.Collection;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file filter is null");

        throw $r7;

     label1:
        if r1 == null goto label5;

        $r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.io.File) $r4;

        if r5 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file collection contains null");

        throw $r6;

     label3:
        $z1 = interfaceinvoke r0.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5);

        if $z1 == 0 goto label4;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r5);

     label4:
        goto label2;

     label5:
        return r2;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.io.filefilter.PrefixFileFilter $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String, org.apache.commons.io.IOCase)
    {
        java.lang.String r1;
        org.apache.commons.io.IOCase r2;
        org.apache.commons.io.filefilter.PrefixFileFilter $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.io.IOCase;

        $r0 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(r1, r2);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)
    {
        org.apache.commons.io.filefilter.SuffixFileFilter $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.filefilter.SuffixFileFilter $r0;
        java.lang.String r1;
        org.apache.commons.io.IOCase r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.io.IOCase;

        $r0 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(r1, r2);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.io.filefilter.NameFileFilter $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String, org.apache.commons.io.IOCase)
    {
        java.lang.String r1;
        org.apache.commons.io.IOCase r2;
        org.apache.commons.io.filefilter.NameFileFilter $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.io.IOCase;

        $r0 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(r1, r2);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter fileFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        org.apache.commons.io.filefilter.AndFileFilter $r0;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r0 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        org.apache.commons.io.filefilter.OrFileFilter $r0;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r0 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2);

        return $r0;
    }

    public static transient org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])
    {
        java.util.List $r2;
        org.apache.commons.io.filefilter.AndFileFilter $r0;
        org.apache.commons.io.filefilter.IOFileFilter[] r1;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];

        $r0 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>(r1);

        specialinvoke $r0.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)>($r2);

        return $r0;
    }

    public static transient org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])
    {
        java.util.List $r2;
        org.apache.commons.io.filefilter.OrFileFilter $r0;
        org.apache.commons.io.filefilter.IOFileFilter[] r1;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];

        $r0 = new org.apache.commons.io.filefilter.OrFileFilter;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>(r1);

        specialinvoke $r0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)>($r2);

        return $r0;
    }

    public static transient java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])
    {
        org.apache.commons.io.filefilter.IOFileFilter $r2, $r3;
        java.lang.IllegalArgumentException $r4, $r10;
        java.util.ArrayList $r1;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.commons.io.filefilter.IOFileFilter[] r0;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filters must not be null");

        throw $r10;

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = lengthof r0;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $r2 = r0[i2];

        if $r2 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The filter[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is null");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label3:
        $r3 = r0[i2];

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i2 = i2 + 1;

        goto label2;

     label4:
        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r1;
        org.apache.commons.io.filefilter.NotFileFilter $r0;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r0 = new org.apache.commons.io.filefilter.NotFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter falseFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter FALSE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)
    {
        org.apache.commons.io.filefilter.DelegateFileFilter $r0;
        java.io.FileFilter r1;

        r1 := @parameter0: java.io.FileFilter;

        $r0 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)
    {
        java.io.FilenameFilter r1;
        org.apache.commons.io.filefilter.DelegateFileFilter $r0;

        r1 := @parameter0: java.io.FilenameFilter;

        $r0 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        long l0;

        l0 := @parameter0: long;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)>(l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long, boolean)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>(l0, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        java.util.Date r1;

        r1 := @parameter0: java.util.Date;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date, boolean)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        java.util.Date r1;
        boolean z0;

        r1 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>(r1, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File, boolean)
    {
        org.apache.commons.io.filefilter.AgeFileFilter $r0;
        java.io.File r1;
        boolean z0;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>(r1, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)
    {
        long l0;
        org.apache.commons.io.filefilter.SizeFileFilter $r0;

        l0 := @parameter0: long;

        $r0 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>(l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long, boolean)
    {
        long l0;
        org.apache.commons.io.filefilter.SizeFileFilter $r0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long, long)
    {
        org.apache.commons.io.filefilter.AndFileFilter $r2;
        long l0, l1, $l2;
        org.apache.commons.io.filefilter.SizeFileFilter $r0, $r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, 1);

        $r1 = new org.apache.commons.io.filefilter.SizeFileFilter;

        $l2 = l1 + 1L;

        specialinvoke $r1.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>($l2, 0);

        $r2 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1);

        return $r2;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String, long)
    {
        long l0;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r0 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>(r1, l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])
    {
        byte[] r1;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r0;

        r1 := @parameter0: byte[];

        $r0 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>(r1);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[], long)
    {
        byte[] r1;
        long l0;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r0;

        r1 := @parameter0: byte[];

        l0 := @parameter1: long;

        $r0 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>(r1, l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3, $r4;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r4 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;

        return $r4;

     label1:
        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = r0;

        $r2 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;

        $r1[1] = $r2;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        return $r3;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3, $r4;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r4 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;

        return $r4;

     label1:
        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = r0;

        $r2 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;

        $r1[1] = $r2;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        return $r3;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3;
        org.apache.commons.io.filefilter.AndFileFilter $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        return $r3;

     label1:
        $r1 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3;
        org.apache.commons.io.filefilter.AndFileFilter $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        return $r3;

     label1:
        $r1 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r2 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        org.apache.commons.io.filefilter.IOFileFilter[] $r0, $r5;

        $r0 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();

        $r0[0] = $r1;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("CVS");

        $r0[1] = $r2;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r0);

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r3);

        <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter> = $r4;

        $r5 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();

        $r5[0] = $r6;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(".svn");

        $r5[1] = $r7;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r5);

        $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r8);

        <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter> = $r9;

        return;
    }
}
