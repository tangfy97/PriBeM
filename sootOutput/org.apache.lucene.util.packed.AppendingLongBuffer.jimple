public final class org.apache.lucene.util.packed.AppendingLongBuffer extends org.apache.lucene.util.packed.AbstractAppendingLongBuffer
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.packed.AppendingLongBuffer r0;

        r0 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: void <init>(int)>(16);

        return;
    }

    long get(int, int)
    {
        long $l3, $l4, $l5, $l6, $l7;
        long[] $r3, $r6, $r7;
        int i0, $i1, i2;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r1, $r4;
        org.apache.lucene.util.packed.PackedInts$Reader $r2, $r5;
        org.apache.lucene.util.packed.AppendingLongBuffer r0;

        r0 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int valuesOff>;

        if i0 != $i1 goto label1;

        $r7 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        $l7 = $r7[i2];

        return $l7;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $r2 = $r1[i0];

        if $r2 != null goto label2;

        $r6 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] minValues>;

        $l6 = $r6[i0];

        return $l6;

     label2:
        $r3 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] minValues>;

        $l3 = $r3[i0];

        $r4 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $r5 = $r4[i0];

        $l4 = interfaceinvoke $r5.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i2);

        $l5 = $l3 + $l4;

        return $l5;
    }

    void packPendingValues()
    {
        byte $b1, $b2;
        org.apache.lucene.util.packed.PackedInts$Mutable $r4;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r5;
        long $l10, $l11, $l12, $l13, l15, l16, l19;
        java.lang.AssertionError $r11;
        long[] $r1, $r2, $r3, $r6, $r7, $r8, $r9;
        int $i0, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i14, i17, $i18, $i20, i21, $i22, i23, $i24;
        org.apache.lucene.util.packed.AppendingLongBuffer r0;

        r0 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        $z0 = <org.apache.lucene.util.packed.AppendingLongBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i14 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        if $i14 == 1024 goto label01;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label01:
        $r1 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        l15 = $r1[0];

        $r2 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        l16 = $r2[0];

        i17 = 1;

     label02:
        $i18 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        if i17 >= $i18 goto label03;

        $r8 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        $l12 = $r8[i17];

        l15 = staticinvoke <java.lang.Math: long min(long,long)>(l15, $l12);

        $r9 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        $l13 = $r9[i17];

        l16 = staticinvoke <java.lang.Math: long max(long,long)>(l16, $l13);

        i17 = i17 + 1;

        goto label02;

     label03:
        l19 = l16 - l15;

        $r3 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] minValues>;

        $i0 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int valuesOff>;

        $r3[$i0] = l15;

        $b1 = l19 cmp 0L;

        if $b1 == 0 goto label10;

        $b2 = l19 cmp 0L;

        $i24 = (int) $b2;

        if $i24 >= 0 goto label04;

        $i20 = 64;

        goto label05;

     label04:
        $i20 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l19);

     label05:
        i3 = $i20;

        i21 = 0;

     label06:
        $i22 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        if i21 >= $i22 goto label07;

        $r7 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        $l10 = $r7[i21];

        $l11 = $l10 - l15;

        $r7[i21] = $l11;

        i21 = i21 + 1;

        goto label06;

     label07:
        $i4 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        $r4 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>($i4, i3, 0.0F);

        i23 = 0;

     label08:
        $i5 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        if i23 >= $i5 goto label09;

        $r6 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: long[] pending>;

        $i7 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int pendingOff>;

        $i8 = $i7 - i23;

        $i9 = interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Mutable: int set(int,long[],int,int)>(i23, $r6, i23, $i8);

        i23 = i23 + $i9;

        goto label08;

     label09:
        $r5 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i6 = r0.<org.apache.lucene.util.packed.AppendingLongBuffer: int valuesOff>;

        $r5[$i6] = $r4;

     label10:
        return;
    }

    public org.apache.lucene.util.packed.AppendingLongBuffer$Iterator iterator()
    {
        org.apache.lucene.util.packed.AppendingLongBuffer$Iterator $r0;
        org.apache.lucene.util.packed.AppendingLongBuffer r1;

        r1 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        $r0 = new org.apache.lucene.util.packed.AppendingLongBuffer$Iterator;

        specialinvoke $r0.<org.apache.lucene.util.packed.AppendingLongBuffer$Iterator: void <init>(org.apache.lucene.util.packed.AppendingLongBuffer,org.apache.lucene.util.packed.AppendingLongBuffer$1)>(r1, null);

        return $r0;
    }

    public volatile long ramBytesUsed()
    {
        long $l0;
        org.apache.lucene.util.packed.AppendingLongBuffer r0;

        r0 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        $l0 = specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long ramBytesUsed()>();

        return $l0;
    }

    public volatile org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator iterator()
    {
        org.apache.lucene.util.packed.AppendingLongBuffer$Iterator $r1;
        org.apache.lucene.util.packed.AppendingLongBuffer r0;

        r0 := @this: org.apache.lucene.util.packed.AppendingLongBuffer;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.packed.AppendingLongBuffer: org.apache.lucene.util.packed.AppendingLongBuffer$Iterator iterator()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/AppendingLongBuffer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.AppendingLongBuffer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
