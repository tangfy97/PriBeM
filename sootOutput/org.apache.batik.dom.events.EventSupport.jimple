public class org.apache.batik.dom.events.EventSupport extends java.lang.Object
{
    protected org.apache.batik.dom.util.HashTable capturingListeners;
    protected org.apache.batik.dom.util.HashTable bubblingListeners;
    protected org.apache.batik.dom.AbstractNode node;

    public void <init>(org.apache.batik.dom.AbstractNode)
    {
        org.apache.batik.dom.events.EventSupport r0;
        org.apache.batik.dom.AbstractNode r1;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r1 := @parameter0: org.apache.batik.dom.AbstractNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.AbstractNode node> = r1;

        return;
    }

    public void addEventListener(java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.w3c.dom.events.EventListener r2;
        org.apache.batik.dom.events.EventSupport r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.events.EventListener;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.batik.dom.events.EventSupport: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>(null, r1, r2, z0, null);

        return;
    }

    public void addEventListenerNS(java.lang.String, java.lang.String, org.w3c.dom.events.EventListener, boolean, java.lang.Object)
    {
        org.apache.batik.dom.events.EventListenerList $r6, $r12, r13;
        org.apache.batik.dom.events.EventSupport r0;
        org.apache.batik.dom.util.HashTable $r1, $r7, $r8, $r9, r10;
        org.w3c.dom.events.EventListener r5;
        java.lang.Object r4, $r11;
        java.lang.String r2, r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.w3c.dom.events.EventListener;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.Object;

        if z0 == 0 goto label2;

        $r8 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        if $r8 != null goto label1;

        $r9 = new org.apache.batik.dom.util.HashTable;

        specialinvoke $r9.<org.apache.batik.dom.util.HashTable: void <init>()>();

        r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners> = $r9;

     label1:
        r10 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        goto label4;

     label2:
        $r1 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

        if $r1 != null goto label3;

        $r7 = new org.apache.batik.dom.util.HashTable;

        specialinvoke $r7.<org.apache.batik.dom.util.HashTable: void <init>()>();

        r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners> = $r7;

     label3:
        r10 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

     label4:
        $r11 = virtualinvoke r10.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>(r2);

        $r12 = (org.apache.batik.dom.events.EventListenerList) $r11;

        r13 = $r12;

        if $r12 != null goto label5;

        $r6 = new org.apache.batik.dom.events.EventListenerList;

        specialinvoke $r6.<org.apache.batik.dom.events.EventListenerList: void <init>()>();

        r13 = $r6;

        virtualinvoke r10.<org.apache.batik.dom.util.HashTable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

     label5:
        virtualinvoke r13.<org.apache.batik.dom.events.EventListenerList: void addListener(java.lang.String,java.lang.Object,org.w3c.dom.events.EventListener)>(r3, r4, r5);

        return;
    }

    public void removeEventListener(java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.w3c.dom.events.EventListener r2;
        org.apache.batik.dom.events.EventSupport r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.events.EventListener;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.batik.dom.events.EventSupport: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(null, r1, r2, z0);

        return;
    }

    public void removeEventListenerNS(java.lang.String, java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.apache.batik.dom.events.EventListenerList r3;
        org.apache.batik.dom.events.EventSupport r0;
        org.apache.batik.dom.util.HashTable r6;
        org.w3c.dom.events.EventListener r5;
        int $i0;
        java.lang.Object $r2;
        java.lang.String r1, r4;
        boolean z0;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: org.w3c.dom.events.EventListener;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        r6 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        goto label2;

     label1:
        r6 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

     label2:
        if r6 != null goto label3;

        return;

     label3:
        $r2 = virtualinvoke r6.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (org.apache.batik.dom.events.EventListenerList) $r2;

        if r3 == null goto label4;

        virtualinvoke r3.<org.apache.batik.dom.events.EventListenerList: void removeListener(java.lang.String,org.w3c.dom.events.EventListener)>(r4, r5);

        $i0 = virtualinvoke r3.<org.apache.batik.dom.events.EventListenerList: int size()>();

        if $i0 != 0 goto label4;

        virtualinvoke r6.<org.apache.batik.dom.util.HashTable: java.lang.Object remove(java.lang.Object)>(r1);

     label4:
        return;
    }

    public void moveEventListeners(org.apache.batik.dom.events.EventSupport)
    {
        org.apache.batik.dom.util.HashTable $r2, $r3;
        org.apache.batik.dom.events.EventSupport r0, r1;

        r1 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.EventSupport;

        $r2 = r1.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners> = $r2;

        $r3 = r1.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

        r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners> = $r3;

        r1.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners> = null;

        r1.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners> = null;

        return;
    }

    public boolean dispatchEvent(org.apache.batik.dom.events.NodeEventTarget, org.w3c.dom.events.Event) throws org.w3c.dom.events.EventException
    {
        java.lang.Object[] $r4, $r11;
        java.util.HashSet $r14, $r15;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String $r2;
        org.apache.batik.dom.events.NodeEventTarget[] $r7;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.events.EventException $r5, $r12;
        org.apache.batik.dom.events.EventSupport r3;
        org.apache.batik.dom.events.AbstractEvent r1;
        org.apache.batik.dom.events.NodeEventTarget r6, r10, r13;
        org.w3c.dom.events.Event r0;

        r3 := @this: org.apache.batik.dom.events.EventSupport;

        r6 := @parameter0: org.apache.batik.dom.events.NodeEventTarget;

        r0 := @parameter1: org.w3c.dom.events.Event;

        if r0 != null goto label01;

        return 0;

     label01:
        $z0 = r0 instanceof org.apache.batik.dom.events.AbstractEvent;

        if $z0 != 0 goto label02;

        $r11 = newarray (java.lang.Object)[0];

        $r12 = virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: org.w3c.dom.events.EventException createEventException(short,java.lang.String,java.lang.Object[])>(9, "unsupported.event", $r11);

        throw $r12;

     label02:
        r1 = (org.apache.batik.dom.events.AbstractEvent) r0;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: java.lang.String getType()>();

        if $r2 == null goto label03;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label04;

     label03:
        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: org.w3c.dom.events.EventException createEventException(short,java.lang.String,java.lang.Object[])>(0, "unspecified.event", $r4);

        throw $r5;

     label04:
        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setTarget(org.w3c.dom.events.EventTarget)>(r6);

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void stopPropagation(boolean)>(0);

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void stopImmediatePropagation(boolean)>(0);

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void preventDefault(boolean)>(0);

        $r7 = virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.events.NodeEventTarget[] getAncestors(org.apache.batik.dom.events.NodeEventTarget)>(r6);

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setEventPhase(short)>(1);

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        i3 = 0;

        goto label06;

     label05:
        r13 = $r7[i3];

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setCurrentTarget(org.w3c.dom.events.EventTarget)>(r13);

        virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget,org.apache.batik.dom.events.AbstractEvent,boolean,java.util.HashSet,java.util.HashSet)>(r13, r1, 1, $r14, $r15);

        virtualinvoke $r14.<java.util.AbstractCollection: boolean addAll(java.util.Collection)>($r15);

        virtualinvoke $r15.<java.util.HashSet: void clear()>();

        i3 = i3 + 1;

     label06:
        $i1 = lengthof $r7;

        if i3 < $i1 goto label05;

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setEventPhase(short)>(2);

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setCurrentTarget(org.w3c.dom.events.EventTarget)>(r6);

        virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget,org.apache.batik.dom.events.AbstractEvent,boolean,java.util.HashSet,java.util.HashSet)>(r6, r1, 0, $r14, $r15);

        virtualinvoke $r14.<java.util.AbstractCollection: boolean addAll(java.util.Collection)>($r15);

        virtualinvoke $r15.<java.util.HashSet: void clear()>();

        $z1 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: boolean getBubbles()>();

        if $z1 == 0 goto label09;

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setEventPhase(short)>(3);

        $i2 = lengthof $r7;

        i4 = $i2 - 1;

        goto label08;

     label07:
        r10 = $r7[i4];

        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void setCurrentTarget(org.w3c.dom.events.EventTarget)>(r10);

        virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget,org.apache.batik.dom.events.AbstractEvent,boolean,java.util.HashSet,java.util.HashSet)>(r10, r1, 0, $r14, $r15);

        virtualinvoke $r14.<java.util.AbstractCollection: boolean addAll(java.util.Collection)>($r15);

        virtualinvoke $r15.<java.util.HashSet: void clear()>();

        $i6 = (int) -1;

        i4 = i4 + $i6;

     label08:
        if i4 >= 0 goto label07;

     label09:
        $z2 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: boolean getDefaultPrevented()>();

        if $z2 != 0 goto label10;

        virtualinvoke r3.<org.apache.batik.dom.events.EventSupport: void runDefaultActions(org.apache.batik.dom.events.AbstractEvent)>(r1);

     label10:
        $z3 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: boolean getDefaultPrevented()>();

        return $z3;
    }

    protected void runDefaultActions(org.apache.batik.dom.events.AbstractEvent)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.apache.batik.dom.events.EventSupport r5;
        java.lang.Object $r3;
        org.apache.batik.dom.events.AbstractEvent r0;
        java.lang.Runnable r4;
        boolean $z0;

        r5 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: java.util.List getDefaultActions()>();

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Runnable) $r3;

        interfaceinvoke r4.<java.lang.Runnable: void run()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    protected void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget, org.apache.batik.dom.events.AbstractEvent, org.apache.batik.dom.events.EventListenerList$Entry[], java.util.HashSet, java.util.HashSet)
    {
        java.lang.Throwable $r9;
        java.util.HashSet r5, r8;
        int i0, $i1;
        java.lang.String $r2, $r4;
        org.apache.batik.dom.events.EventListenerList$Entry $r3, $r6, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.dom.events.EventSupport r11;
        org.apache.batik.dom.events.AbstractEvent r1;
        org.apache.batik.dom.events.EventListenerList$Entry[] r0;
        java.lang.ThreadDeath $r10;
        org.apache.batik.dom.events.NodeEventTarget r12;
        org.w3c.dom.events.EventListener $r7;
        java.lang.Object $r14;

        r11 := @this: org.apache.batik.dom.events.EventSupport;

        r12 := @parameter0: org.apache.batik.dom.events.NodeEventTarget;

        r1 := @parameter1: org.apache.batik.dom.events.AbstractEvent;

        r0 := @parameter2: org.apache.batik.dom.events.EventListenerList$Entry[];

        r5 := @parameter3: java.util.HashSet;

        r8 := @parameter4: java.util.HashSet;

        if r0 != null goto label01;

        return;

     label01:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: java.lang.String getNamespaceURI()>();

        i0 = 0;

        goto label12;

     label02:
        $r3 = r0[i0];

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.events.EventListenerList$Entry: java.lang.String getNamespaceURI()>();

        if $r4 == null goto label03;

        if $r2 == null goto label03;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 != 0 goto label03;

        goto label11;

     label03:
        $r13 = r0[i0];

        $r14 = virtualinvoke $r13.<org.apache.batik.dom.events.EventListenerList$Entry: java.lang.Object getGroup()>();

        if r5 == null goto label04;

        $z2 = virtualinvoke r5.<java.util.HashSet: boolean contains(java.lang.Object)>($r14);

        if $z2 != 0 goto label08;

     label04:
        $r6 = r0[i0];

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.events.EventListenerList$Entry: org.w3c.dom.events.EventListener getListener()>();

        interfaceinvoke $r7.<org.w3c.dom.events.EventListener: void handleEvent(org.w3c.dom.events.Event)>(r1);

        $z0 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: boolean getStopImmediatePropagation()>();

        if $z0 == 0 goto label06;

        if r5 == null goto label05;

        virtualinvoke r5.<java.util.HashSet: boolean add(java.lang.Object)>($r14);

     label05:
        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void stopImmediatePropagation(boolean)>(0);

        goto label08;

     label06:
        $z1 = virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: boolean getStopPropagation()>();

        if $z1 == 0 goto label08;

        if r8 == null goto label07;

        virtualinvoke r8.<java.util.HashSet: boolean add(java.lang.Object)>($r14);

     label07:
        virtualinvoke r1.<org.apache.batik.dom.events.AbstractEvent: void stopPropagation(boolean)>(0);

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        throw $r10;

     label10:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void printStackTrace()>();

     label11:
        i0 = i0 + 1;

     label12:
        $i1 = lengthof r0;

        if i0 < $i1 goto label02;

        return;

        catch java.lang.ThreadDeath from label02 to label08 with label09;
        catch java.lang.Throwable from label02 to label08 with label10;
    }

    protected void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget, org.apache.batik.dom.events.AbstractEvent, boolean, java.util.HashSet, java.util.HashSet)
    {
        org.apache.batik.dom.events.EventListenerList $r4;
        org.apache.batik.dom.events.EventSupport $r3, r6;
        org.apache.batik.dom.events.AbstractEvent r0;
        org.apache.batik.dom.events.EventListenerList$Entry[] $r5;
        org.apache.batik.dom.events.NodeEventTarget r2;
        java.util.HashSet r7, r8;
        java.lang.String $r1;
        boolean z0;

        r6 := @this: org.apache.batik.dom.events.EventSupport;

        r2 := @parameter0: org.apache.batik.dom.events.NodeEventTarget;

        r0 := @parameter1: org.apache.batik.dom.events.AbstractEvent;

        z0 := @parameter2: boolean;

        r7 := @parameter3: java.util.HashSet;

        r8 := @parameter4: java.util.HashSet;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: java.lang.String getType()>();

        $r3 = interfaceinvoke r2.<org.apache.batik.dom.events.NodeEventTarget: org.apache.batik.dom.events.EventSupport getEventSupport()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke $r3.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.events.EventListenerList getEventListeners(java.lang.String,boolean)>($r1, z0);

        if $r4 != null goto label2;

        return;

     label2:
        $r5 = virtualinvoke $r4.<org.apache.batik.dom.events.EventListenerList: org.apache.batik.dom.events.EventListenerList$Entry[] getEventListeners()>();

        virtualinvoke r6.<org.apache.batik.dom.events.EventSupport: void fireEventListeners(org.apache.batik.dom.events.NodeEventTarget,org.apache.batik.dom.events.AbstractEvent,org.apache.batik.dom.events.EventListenerList$Entry[],java.util.HashSet,java.util.HashSet)>(r2, r0, $r5, r7, r8);

        return;
    }

    protected org.apache.batik.dom.events.NodeEventTarget[] getAncestors(org.apache.batik.dom.events.NodeEventTarget)
    {
        org.apache.batik.dom.events.EventSupport r2;
        org.apache.batik.dom.events.NodeEventTarget $r0, r3, r4, r5;
        int i0, i1, $i3;
        org.apache.batik.dom.events.NodeEventTarget[] r1;

        r2 := @this: org.apache.batik.dom.events.EventSupport;

        r3 := @parameter0: org.apache.batik.dom.events.NodeEventTarget;

        $r0 = interfaceinvoke r3.<org.apache.batik.dom.events.NodeEventTarget: org.apache.batik.dom.events.NodeEventTarget getParentNodeEventTarget()>();

        r4 = $r0;

        i0 = 0;

        r5 = $r0;

        goto label2;

     label1:
        r5 = interfaceinvoke r5.<org.apache.batik.dom.events.NodeEventTarget: org.apache.batik.dom.events.NodeEventTarget getParentNodeEventTarget()>();

        i0 = i0 + 1;

     label2:
        if r5 != null goto label1;

        r1 = newarray (org.apache.batik.dom.events.NodeEventTarget)[i0];

        i1 = i0 - 1;

        goto label4;

     label3:
        r1[i1] = r4;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        r4 = interfaceinvoke r4.<org.apache.batik.dom.events.NodeEventTarget: org.apache.batik.dom.events.NodeEventTarget getParentNodeEventTarget()>();

     label4:
        if i1 >= 0 goto label3;

        return r1;
    }

    public boolean hasEventListenerNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.events.EventListenerList r8, r10;
        org.apache.batik.dom.events.EventSupport r0;
        org.apache.batik.dom.util.HashTable $r1, $r3, $r6, $r9;
        java.lang.Object $r4, $r7;
        java.lang.String r2, r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (org.apache.batik.dom.events.EventListenerList) $r7;

        if r8 == null goto label1;

        $z1 = virtualinvoke r8.<org.apache.batik.dom.events.EventListenerList: boolean hasEventListener(java.lang.String)>(r5);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r9 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

        if $r9 == null goto label2;

        $r3 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>(r2);

        r10 = (org.apache.batik.dom.events.EventListenerList) $r4;

        if r10 == null goto label2;

        $z0 = virtualinvoke r10.<org.apache.batik.dom.events.EventListenerList: boolean hasEventListener(java.lang.String)>(r5);

        return $z0;

     label2:
        return 0;
    }

    public org.apache.batik.dom.events.EventListenerList getEventListeners(java.lang.String, boolean)
    {
        org.apache.batik.dom.events.EventListenerList $r3;
        org.apache.batik.dom.util.HashTable $r4;
        org.apache.batik.dom.events.EventSupport r0;
        java.lang.Object $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable capturingListeners>;

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.util.HashTable bubblingListeners>;

     label2:
        if $r4 != null goto label3;

        return null;

     label3:
        $r2 = virtualinvoke $r4.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (org.apache.batik.dom.events.EventListenerList) $r2;

        return $r3;
    }

    protected org.w3c.dom.events.EventException createEventException(short, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r5;
        org.w3c.dom.events.EventException $r3, $r8;
        org.apache.batik.dom.events.EventSupport r0;
        org.apache.batik.dom.AbstractDocument r9;
        java.lang.Exception $r7;
        short s0;
        org.apache.batik.dom.AbstractNode $r1;
        org.w3c.dom.Document $r2;
        java.lang.String r4, $r6;

        r0 := @this: org.apache.batik.dom.events.EventSupport;

        s0 := @parameter0: short;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Object[];

     label1:
        $r1 = r0.<org.apache.batik.dom.events.EventSupport: org.apache.batik.dom.AbstractNode node>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        r9 = (org.apache.batik.dom.AbstractDocument) $r2;

        $r3 = new org.w3c.dom.events.EventException;

        $r6 = virtualinvoke r9.<org.apache.batik.dom.AbstractDocument: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r4, r5);

        specialinvoke $r3.<org.w3c.dom.events.EventException: void <init>(short,java.lang.String)>(s0, $r6);

        return $r3;

     label2:
        $r7 := @caughtexception;

        $r8 = new org.w3c.dom.events.EventException;

        specialinvoke $r8.<org.w3c.dom.events.EventException: void <init>(short,java.lang.String)>(s0, r4);

        return $r8;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    protected void setTarget(org.apache.batik.dom.events.AbstractEvent, org.apache.batik.dom.events.NodeEventTarget)
    {
        org.apache.batik.dom.events.EventSupport r2;
        org.apache.batik.dom.events.AbstractEvent r0;
        org.apache.batik.dom.events.NodeEventTarget r1;

        r2 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        r1 := @parameter1: org.apache.batik.dom.events.NodeEventTarget;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void setTarget(org.w3c.dom.events.EventTarget)>(r1);

        return;
    }

    protected void stopPropagation(org.apache.batik.dom.events.AbstractEvent, boolean)
    {
        org.apache.batik.dom.events.EventSupport r1;
        org.apache.batik.dom.events.AbstractEvent r0;
        boolean z0;

        r1 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void stopPropagation(boolean)>(z0);

        return;
    }

    protected void stopImmediatePropagation(org.apache.batik.dom.events.AbstractEvent, boolean)
    {
        org.apache.batik.dom.events.EventSupport r1;
        org.apache.batik.dom.events.AbstractEvent r0;
        boolean z0;

        r1 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void stopImmediatePropagation(boolean)>(z0);

        return;
    }

    protected void preventDefault(org.apache.batik.dom.events.AbstractEvent, boolean)
    {
        org.apache.batik.dom.events.EventSupport r1;
        org.apache.batik.dom.events.AbstractEvent r0;
        boolean z0;

        r1 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void preventDefault(boolean)>(z0);

        return;
    }

    protected void setCurrentTarget(org.apache.batik.dom.events.AbstractEvent, org.apache.batik.dom.events.NodeEventTarget)
    {
        org.apache.batik.dom.events.EventSupport r2;
        org.apache.batik.dom.events.AbstractEvent r0;
        org.apache.batik.dom.events.NodeEventTarget r1;

        r2 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        r1 := @parameter1: org.apache.batik.dom.events.NodeEventTarget;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void setCurrentTarget(org.w3c.dom.events.EventTarget)>(r1);

        return;
    }

    protected void setEventPhase(org.apache.batik.dom.events.AbstractEvent, short)
    {
        org.apache.batik.dom.events.EventSupport r1;
        short s0;
        org.apache.batik.dom.events.AbstractEvent r0;

        r1 := @this: org.apache.batik.dom.events.EventSupport;

        r0 := @parameter0: org.apache.batik.dom.events.AbstractEvent;

        s0 := @parameter1: short;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void setEventPhase(short)>(s0);

        return;
    }

    public static org.w3c.dom.events.Event getUltimateOriginalEvent(org.w3c.dom.events.Event)
    {
        org.w3c.dom.events.Event r0, $r1;
        org.apache.batik.dom.events.AbstractEvent $r2, r3;

        r0 := @parameter0: org.w3c.dom.events.Event;

        r3 = (org.apache.batik.dom.events.AbstractEvent) r0;

        goto label1;

     label1:
        $r1 = virtualinvoke r3.<org.apache.batik.dom.events.AbstractEvent: org.w3c.dom.events.Event getOriginalEvent()>();

        $r2 = (org.apache.batik.dom.events.AbstractEvent) $r1;

        if $r2 != null goto label2;

        goto label3;

     label2:
        r3 = $r2;

        goto label1;

     label3:
        return r3;
    }
}
