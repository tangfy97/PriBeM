public final class org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation extends org.waveprotocol.wave.model.operation.wave.WaveletOperation
{
    private final java.lang.String blipId;
    private final org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, org.waveprotocol.wave.model.operation.wave.BlipOperation)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r2);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Null blip ID");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null blip operation");

        r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId> = r3;

        r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp> = r1;

        return;
    }

    public java.lang.String getBlipId()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        return $r1;
    }

    public org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        return $r1;
    }

    protected void doApply(org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r2;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.wave.data.BlipData getTargetBlip(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void apply(org.waveprotocol.wave.model.wave.data.BlipData)>($r2);

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.VersionUpdateOp createVersionUpdateOp(long, org.waveprotocol.wave.model.version.HashedVersion)
    {
        long l0;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r6;
        java.lang.String $r5, $r7;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp $r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        l0 := @parameter0: long;

        r4 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = new org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r6 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $r5 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.wave.BlipOperation: boolean updatesBlipMetadata(java.lang.String)>($r5);

        if $z0 == 0 goto label1;

        $r7 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        goto label2;

     label1:
        $r7 = null;

     label2:
        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>($r3, l0, r4, $r7);

        return $r0;
    }

    public void acceptVisitor(org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor r0;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor;

        interfaceinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor: void visitWaveletBlipOperation(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10, $r11;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r2;
        java.lang.String $r5, $r8, $r12;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on blip ");

        $r5 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String suffixForToString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isWorthy ");

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: boolean isWorthyOfAttribution()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r2;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0, $r9;
        java.util.ArrayList $r5;
        java.util.List $r4;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r3, r8;
        java.lang.Object $r7;
        java.lang.String $r10;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.wave.data.BlipData getTargetBlip(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BlipOperation: java.util.List applyAndReturnReverse(java.lang.Object)>($r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.operation.wave.BlipOperation) $r7;

        $r9 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r10 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r10, r8);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void update(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        return $r5;
    }

    private org.waveprotocol.wave.model.wave.data.BlipData getTargetBlip(org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r3, r14;
        long $l0, $l1, $l2, $l3;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r7, $r9;
        java.lang.String $r2, $r6;
        org.waveprotocol.wave.model.wave.data.WaveletData r0;
        boolean $z0;
        java.util.Set $r10;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r12;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5, $r8, $r11, $r13;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>($r2);

        r14 = $r3;

        if $r3 != null goto label1;

        $r6 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $r5 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r8 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r9);

        $r12 = <org.waveprotocol.wave.model.document.util.EmptyDocument: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_DOCUMENT>;

        $r11 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        $l1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r13 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l2 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l3 = $l1 + $l2;

        r14 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.document.operation.DocInitialization,long,long)>($r6, $r7, $r10, $r12, $l0, $l3);

     label1:
        $z0 = <org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r14 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return r14;
    }

    public boolean isWorthyOfAttribution()
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.BlipOperation: boolean isWorthyOfAttribution(java.lang.String)>($r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1, r2;
        java.lang.Object r0;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r5, $r6;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        $r4 = r2.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $r3 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String blipId>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $r5 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation blipOp>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public volatile java.util.List applyAndReturnReverse(java.lang.Object) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.util.List $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.WaveletData) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.WaveletData)>($r2);

        return $r3;
    }

    public volatile void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r0;
        org.waveprotocol.wave.model.operation.Visitor r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Visitor;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void acceptVisitor(org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/operation/wave/WaveletBlipOperation;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: boolean $assertionsDisabled> = $z1;

        return;
    }
}
