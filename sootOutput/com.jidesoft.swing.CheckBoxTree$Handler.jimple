public class com.jidesoft.swing.CheckBoxTree$Handler extends java.lang.Object implements java.awt.event.MouseListener, java.awt.event.KeyListener, javax.swing.event.TreeSelectionListener
{
    protected com.jidesoft.swing.CheckBoxTree _tree;
    int _hotspot;
    private int _toggleCount;

    public void <init>(com.jidesoft.swing.CheckBoxTree)
    {
        java.awt.Dimension $r2;
        com.jidesoft.swing.CheckBoxTree r3;
        int $i0, $i2;
        javax.swing.JCheckBox $r4;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r3 := @parameter0: com.jidesoft.swing.CheckBoxTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new javax.swing.JCheckBox;

        specialinvoke $r4.<javax.swing.JCheckBox: void <init>()>();

        $r2 = virtualinvoke $r4.<javax.swing.JCheckBox: java.awt.Dimension getPreferredSize()>();

        $i0 = $r2.<java.awt.Dimension: int width>;

        r0.<com.jidesoft.swing.CheckBoxTree$Handler: int _hotspot> = $i0;

        $i2 = (int) -1;

        r0.<com.jidesoft.swing.CheckBoxTree$Handler: int _toggleCount> = $i2;

        r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree> = r3;

        return;
    }

    protected javax.swing.tree.TreePath getTreePathForMouseEvent(java.awt.event.MouseEvent)
    {
        javax.swing.tree.TreePath $r4;
        com.jidesoft.swing.CheckBoxTree $r2, $r3, $r5;
        java.awt.event.MouseEvent r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $z0 = staticinvoke <javax.swing.SwingUtilities: boolean isLeftMouseButton(java.awt.event.MouseEvent)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z1 = virtualinvoke $r2.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxEnabled()>();

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r3 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $i0 = virtualinvoke r0.<java.awt.event.MouseEvent: int getX()>();

        $i1 = virtualinvoke r0.<java.awt.event.MouseEvent: int getY()>();

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreePath getPathForLocation(int,int)>($i0, $i1);

        if $r4 != null goto label3;

        return null;

     label3:
        $z2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: boolean clicksInCheckBox(java.awt.event.MouseEvent,javax.swing.tree.TreePath)>(r0, $r4);

        if $z2 != 0 goto label4;

        $r5 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z3 = virtualinvoke $r5.<com.jidesoft.swing.CheckBoxTree: boolean isClickInCheckBoxOnly()>();

        if $z3 != 0 goto label5;

     label4:
        return $r4;

     label5:
        return null;
    }

    protected boolean clicksInCheckBox(java.awt.event.MouseEvent, javax.swing.tree.TreePath)
    {
        java.awt.Rectangle $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3;
        javax.swing.tree.TreePath r1;
        com.jidesoft.swing.CheckBoxTree $r2, $r3, $r5;
        java.awt.event.MouseEvent r7;
        java.awt.ComponentOrientation $r6;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r7 := @parameter0: java.awt.event.MouseEvent;

        r1 := @parameter1: javax.swing.tree.TreePath;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z0 = virtualinvoke $r2.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxVisible(javax.swing.tree.TreePath)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath)>(r1);

        $r5 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $r6 = virtualinvoke $r5.<com.jidesoft.swing.CheckBoxTree: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r6.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 == 0 goto label4;

        $i6 = virtualinvoke r7.<java.awt.event.MouseEvent: int getX()>();

        $i8 = $r4.<java.awt.Rectangle: int x>;

        $i7 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: int _hotspot>;

        $i9 = $i8 + $i7;

        if $i6 >= $i9 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $i0 = virtualinvoke r7.<java.awt.event.MouseEvent: int getX()>();

        $i2 = $r4.<java.awt.Rectangle: int x>;

        $i1 = $r4.<java.awt.Rectangle: int width>;

        $i4 = $i2 + $i1;

        $i3 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: int _hotspot>;

        $i5 = $i4 - $i3;

        if $i0 <= $i5 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    private javax.swing.tree.TreePath preventToggleEvent(java.awt.event.MouseEvent)
    {
        javax.swing.tree.TreePath $r2;
        com.jidesoft.swing.CheckBoxTree $r3, $r4;
        java.awt.event.MouseEvent r1;
        int $i0, $i2, $i4;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree$Handler: javax.swing.tree.TreePath getTreePathForMouseEvent(java.awt.event.MouseEvent)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $i0 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: int getToggleClickCount()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r0.<com.jidesoft.swing.CheckBoxTree$Handler: int _toggleCount> = $i0;

        $r4 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $i4 = (int) -1;

        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTree: void setToggleClickCount(int)>($i4);

     label1:
        return $r2;
    }

    public void mouseClicked(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r0;
        boolean $z0;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $z0 = virtualinvoke r0.<java.awt.event.MouseEvent: boolean isConsumed()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: javax.swing.tree.TreePath preventToggleEvent(java.awt.event.MouseEvent)>(r0);

        return;
    }

    public void mousePressed(java.awt.event.MouseEvent)
    {
        javax.swing.tree.TreePath[] $r3;
        javax.swing.tree.TreePath $r2;
        java.awt.event.MouseEvent r0;
        boolean $z0;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $z0 = virtualinvoke r0.<java.awt.event.MouseEvent: boolean isConsumed()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: javax.swing.tree.TreePath preventToggleEvent(java.awt.event.MouseEvent)>(r0);

        if $r2 == null goto label2;

        $r3 = newarray (javax.swing.tree.TreePath)[1];

        $r3[0] = $r2;

        specialinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: void toggleSelections(javax.swing.tree.TreePath[])>($r3);

        virtualinvoke r0.<java.awt.event.MouseEvent: void consume()>();

     label2:
        return;
    }

    public void mouseReleased(java.awt.event.MouseEvent)
    {
        javax.swing.tree.TreePath $r2;
        com.jidesoft.swing.CheckBoxTree $r3;
        java.awt.event.MouseEvent r0;
        int $i0, $i1, $i3;
        boolean $z0;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $z0 = virtualinvoke r0.<java.awt.event.MouseEvent: boolean isConsumed()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: javax.swing.tree.TreePath preventToggleEvent(java.awt.event.MouseEvent)>(r0);

        if $r2 == null goto label2;

        virtualinvoke r0.<java.awt.event.MouseEvent: void consume()>();

     label2:
        $i0 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: int _toggleCount>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label3;

        $r3 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $i1 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: int _toggleCount>;

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: void setToggleClickCount(int)>($i1);

     label3:
        return;
    }

    public void mouseEntered(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void mouseExited(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void keyPressed(java.awt.event.KeyEvent)
    {
        com.jidesoft.swing.CheckBoxTree $r2;
        char $c1;
        java.awt.event.KeyEvent r0;
        int $i0, $i2;
        boolean $z0, $z1;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: java.awt.event.KeyEvent;

        $z0 = virtualinvoke r0.<java.awt.event.KeyEvent: boolean isConsumed()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z1 = virtualinvoke $r2.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxEnabled()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $i0 = virtualinvoke r0.<java.awt.event.KeyEvent: int getModifiers()>();

        if $i0 != 0 goto label3;

        $c1 = virtualinvoke r0.<java.awt.event.KeyEvent: char getKeyChar()>();

        $i2 = (int) $c1;

        if $i2 != 32 goto label3;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxTree$Handler: void toggleSelections()>();

     label3:
        return;
    }

    public void keyTyped(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r1 := @parameter0: java.awt.event.KeyEvent;

        return;
    }

    public void keyReleased(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r1 := @parameter0: java.awt.event.KeyEvent;

        return;
    }

    public void valueChanged(javax.swing.event.TreeSelectionEvent)
    {
        com.jidesoft.swing.CheckBoxTree $r1;
        javax.swing.event.TreeSelectionEvent r2;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r2 := @parameter0: javax.swing.event.TreeSelectionEvent;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTree: void treeDidChange()>();

        return;
    }

    protected void toggleSelections()
    {
        javax.swing.tree.TreePath[] $r2;
        com.jidesoft.swing.CheckBoxTree $r1;
        com.jidesoft.swing.CheckBoxTree$Handler r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreePath[] getSelectionPaths()>();

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTree$Handler: void toggleSelections(javax.swing.tree.TreePath[])>($r2);

        return;
    }

    private void toggleSelections(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath[] r0, $r8, $r10, $r11, $r13, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javax.swing.tree.TreePath r14, r17, $r18;
        java.lang.Throwable $r20;
        java.lang.Object[] $r9, $r12;
        java.util.ArrayList $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8, i9;
        com.jidesoft.swing.CheckBoxTree $r2, $r3, $r7, $r15, $r19, $r21;
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r4;
        com.jidesoft.swing.CheckBoxTree$Handler r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTree$Handler;

        r0 := @parameter0: javax.swing.tree.TreePath[];

        if r0 == null goto label01;

        $i0 = lengthof r0;

        if $i0 == 0 goto label01;

        $r2 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z0 = virtualinvoke $r2.<com.jidesoft.swing.CheckBoxTree: boolean isEnabled()>();

        if $z0 != 0 goto label02;

     label01:
        return;

     label02:
        $i1 = lengthof r0;

        if $i1 != 1 goto label03;

        $r19 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $r18 = r0[0];

        $z6 = virtualinvoke $r19.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxEnabled(javax.swing.tree.TreePath)>($r18);

        if $z6 != 0 goto label03;

        return;

     label03:
        $r3 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel getCheckBoxTreeSelectionModel()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $i7 = lengthof r0;

        i8 = 0;

     label04:
        if i8 >= $i7 goto label11;

        r14 = r0[i8];

        $z1 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        $z2 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r14, $z1);

        if $z2 == 0 goto label05;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label10;

     label05:
        $r15 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        $z3 = virtualinvoke $r15.<com.jidesoft.swing.CheckBoxTree: boolean isSelectPartialOnToggling()>();

        if $z3 != 0 goto label09;

        $z4 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPartiallySelected(javax.swing.tree.TreePath)>(r14);

        if $z4 == 0 goto label09;

        $r16 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r16 == null goto label08;

        i6 = lengthof $r16;

        i9 = 0;

     label06:
        if i9 >= i6 goto label08;

        r17 = $r16[i9];

        $z5 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDescendant(javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r17, r14);

        if $z5 == 0 goto label07;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r17);

     label07:
        i9 = i9 + 1;

        goto label06;

     label08:
        goto label10;

     label09:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r14);

     label10:
        i8 = i8 + 1;

        goto label04;

     label11:
        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)>(r1);

     label12:
        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i2 <= 0 goto label13;

        $i5 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r11 = newarray (javax.swing.tree.TreePath)[$i5];

        $r12 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (javax.swing.tree.TreePath[]) $r12;

        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[])>($r13);

     label13:
        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i3 <= 0 goto label14;

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r8 = newarray (javax.swing.tree.TreePath)[$i4];

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (javax.swing.tree.TreePath[]) $r9;

        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[])>($r10);

     label14:
        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)>(r1);

        $r7 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        virtualinvoke $r7.<com.jidesoft.swing.CheckBoxTree: void treeDidChange()>();

        goto label17;

     label15:
        $r20 := @caughtexception;

     label16:
        virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)>(r1);

        $r21 = r1.<com.jidesoft.swing.CheckBoxTree$Handler: com.jidesoft.swing.CheckBoxTree _tree>;

        virtualinvoke $r21.<com.jidesoft.swing.CheckBoxTree: void treeDidChange()>();

        throw $r20;

     label17:
        return;

        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }
}
