public class org.apache.jena.query.text.TextQueryPF extends com.hp.hpl.jena.sparql.pfunction.PropertyFunctionBase
{
    private static org.slf4j.Logger log;
    private org.apache.jena.query.text.TextIndex server;
    private boolean warningIssued;

    public void <init>()
    {
        org.apache.jena.query.text.TextQueryPF r0;

        r0 := @this: org.apache.jena.query.text.TextQueryPF;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionBase: void <init>()>();

        r0.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex server> = null;

        r0.<org.apache.jena.query.text.TextQueryPF: boolean warningIssued> = 0;

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryBuildException $r8, $r13, $r14;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        org.apache.jena.query.text.TextIndex $r6;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        java.lang.String $r12, $r18;
        boolean $z0, $z1;
        org.apache.jena.query.text.TextQueryPF r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r5;
        java.util.List $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17;

        r0 := @this: org.apache.jena.query.text.TextQueryPF;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionBase: void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4);

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r6 = staticinvoke <org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex chooseTextIndex(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r5);

        r0.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex server> = $r6;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r14 = new com.hp.hpl.jena.query.QueryBuildException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject is not a single node: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label1:
        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        $r13 = new com.hp.hpl.jena.query.QueryBuildException;

        specialinvoke $r13.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>("Zero-length argument list");

        throw $r13;

     label2:
        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 <= 4 goto label3;

        $r8 = new com.hp.hpl.jena.query.QueryBuildException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many arguments in list : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        return;
    }

    private static org.apache.jena.query.text.TextIndex chooseTextIndex(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        org.apache.jena.query.text.DatasetGraphText r13;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        com.hp.hpl.jena.sparql.util.Context $r1;
        java.lang.ClassCastException $r6;
        org.apache.jena.query.text.TextIndex $r4, $r5;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r12;
        com.hp.hpl.jena.sparql.util.Symbol $r2, $r9;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = <org.apache.jena.query.text.TextQuery: com.hp.hpl.jena.sparql.util.Symbol textIndex>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        if $r3 == null goto label4;

     label1:
        $r5 = (org.apache.jena.query.text.TextIndex) $r3;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Context setting \'");

        $r9 = <org.apache.jena.query.text.TextQuery: com.hp.hpl.jena.sparql.util.Symbol textIndex>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'is not a TextIndex");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lorg/apache/jena/query/text/TextQueryPF;", $r12);

     label4:
        $z0 = r0 instanceof org.apache.jena.query.text.DatasetGraphText;

        if $z0 == 0 goto label5;

        r13 = (org.apache.jena.query.text.DatasetGraphText) r0;

        $r4 = virtualinvoke r13.<org.apache.jena.query.text.DatasetGraphText: org.apache.jena.query.text.TextIndex getTextIndex()>();

        return $r4;

     label5:
        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lorg/apache/jena/query/text/TextQueryPF;", "Failed to find the text index : tried context and as a text-enabled dataset");

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        long $l2;
        com.hp.hpl.jena.graph.Node $r4, r14;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r3, r5;
        org.apache.jena.query.text.TextIndex $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice $r8;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.query.text.TextQueryPF r0;
        org.apache.jena.query.text.TextQueryPF$StrMatch $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding r7;
        java.lang.Class $r13;
        org.apache.jena.atlas.lib.InternalErrorException $r11;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r9, $r10, $r12, $r15, r16;

        r0 := @this: org.apache.jena.query.text.TextQueryPF;

        r7 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r14 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = r0.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex server>;

        if $r1 != null goto label2;

        $z3 = r0.<org.apache.jena.query.text.TextQueryPF: boolean warningIssued>;

        if $z3 != 0 goto label1;

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>($r13, "No text index - no text search performed");

        r0.<org.apache.jena.query.text.TextQueryPF: boolean warningIssued> = 1;

     label1:
        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, r2);

        return $r12;

     label2:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $z0 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 != 0 goto label3;

        $r11 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r11.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>("Subject is not a node (it was earlier!)");

        throw $r11;

     label3:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label4;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2);

        return $r10;

     label4:
        $r6 = specialinvoke r0.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextQueryPF$StrMatch objectToStruct(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>(r5);

        if $r6 != null goto label5;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2);

        return $r9;

     label5:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z2 == 0 goto label6;

        $r15 = specialinvoke r0.<org.apache.jena.query.text.TextQueryPF: com.hp.hpl.jena.sparql.engine.QueryIterator variableSubject(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,org.apache.jena.query.text.TextQueryPF$StrMatch,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, $r4, $r6, r2);

        goto label7;

     label6:
        $r15 = specialinvoke r0.<org.apache.jena.query.text.TextQueryPF: com.hp.hpl.jena.sparql.engine.QueryIterator concreteSubject(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,org.apache.jena.query.text.TextQueryPF$StrMatch,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, $r4, $r6, r2);

     label7:
        r16 = $r15;

        $i0 = virtualinvoke $r6.<org.apache.jena.query.text.TextQueryPF$StrMatch: int getLimit()>();

        if $i0 < 0 goto label8;

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice;

        $i1 = virtualinvoke $r6.<org.apache.jena.query.text.TextQueryPF$StrMatch: int getLimit()>();

        $l2 = (long) $i1;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,long,long,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r15, 0L, $l2, r2);

        r16 = $r8;

     label8:
        return r16;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator variableSubject(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, org.apache.jena.query.text.TextQueryPF$StrMatch, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.Iterator $r12;
        org.apache.jena.query.text.TextQueryPF r2;
        org.apache.jena.query.text.TextQueryPF$StrMatch r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var $r1;
        java.util.List $r6, $r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r11;
        int $i0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterExtendByVar $r10;
        java.lang.String $r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        org.apache.jena.atlas.iterator.Iter $r7, $r8;

        r2 := @this: org.apache.jena.query.text.TextQueryPF;

        r11 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: org.apache.jena.query.text.TextQueryPF$StrMatch;

        r5 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r4 = virtualinvoke r3.<org.apache.jena.query.text.TextQueryPF$StrMatch: java.lang.String getQueryString()>();

        $i0 = virtualinvoke r3.<org.apache.jena.query.text.TextQueryPF$StrMatch: int getLimit()>();

        $r6 = specialinvoke r2.<org.apache.jena.query.text.TextQueryPF: java.util.List query(java.lang.String,int,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $i0, r5);

        $r7 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Collection)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter distinct()>();

        $r9 = virtualinvoke $r8.<org.apache.jena.atlas.iterator.Iter: java.util.List toList()>();

        $r10 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterExtendByVar;

        $r12 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterExtendByVar: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r11, $r1, $r12, r5);

        return $r10;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator concreteSubject(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, org.apache.jena.query.text.TextQueryPF$StrMatch, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0;
        int $i1;
        java.lang.String $r2, $r13;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        boolean $z0, $z1;
        org.slf4j.Logger $r10;
        org.apache.jena.query.text.TextQueryPF r3;
        org.apache.jena.query.text.TextQueryPF$StrMatch r1;
        java.util.List $r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r7;
        java.lang.StringBuilder $r11, $r12, $r15;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r6, $r8, $r14;

        r3 := @this: org.apache.jena.query.text.TextQueryPF;

        r7 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: org.apache.jena.query.text.TextQueryPF$StrMatch;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $r10 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject not a URI: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r13);

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4);

        return $r14;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r2 = virtualinvoke r1.<org.apache.jena.query.text.TextQueryPF$StrMatch: java.lang.String getQueryString()>();

        $i1 = (int) -1;

        $r5 = specialinvoke r3.<org.apache.jena.query.text.TextQueryPF: java.util.List query(java.lang.String,int,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2, $i1, r4);

        if $r5 == null goto label2;

        $z1 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label3;

     label2:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4);

        return $r6;

     label3:
        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, r4);

        return $r8;
    }

    private java.util.List query(java.lang.String, int, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        org.slf4j.Logger $r7, $r11;
        org.apache.jena.query.text.TextQueryPF r8;
        com.hp.hpl.jena.sparql.util.Context $r1;
        java.lang.Integer $r12;
        java.util.List $r10;
        org.apache.jena.query.text.TextIndex $r9;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        java.lang.String r4, $r6;
        boolean $z0;

        r8 := @this: org.apache.jena.query.text.TextQueryPF;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text query: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.mgt.Explain: void explain(com.hp.hpl.jena.sparql.util.Context,java.lang.String)>($r1, $r6);

        $r7 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Text query: {} ({})", r4, $r12);

     label1:
        $r9 = r8.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex server>;

        $r10 = interfaceinvoke $r9.<org.apache.jena.query.text.TextIndex: java.util.List query(java.lang.String,int)>(r4, i0);

        return $r10;
    }

    private org.apache.jena.query.text.TextQueryPF$StrMatch objectToStruct(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.graph.Node $r39, r46, r48, r49;
        java.lang.StringBuilder $r11, $r12, $r13, $r19, $r20, $r24, $r25, $r31, $r32, $r36, $r37, $r53, $r55, $r56, $r57, $r58;
        org.apache.jena.query.text.EntityDefinition $r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r3;
        org.apache.jena.query.text.TextIndex $r1;
        java.lang.String $r8, $r21, $r26, $r28, $r33, $r38, $r41, r47, r50;
        org.apache.jena.query.text.TextQueryPF$StrMatch $r51, $r59;
        com.hp.hpl.jena.datatypes.RDFDatatype $r7, $r15, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.jena.query.text.TextIndexException $r52, $r54;
        org.apache.jena.query.text.TextQueryPF r0;
        java.util.List $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i9, $i11, $i13;
        org.slf4j.Logger $r18, $r23, $r30, $r44, $r45;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r16, $r43;
        java.lang.Object $r6, $r14, $r27;

        r0 := @this: org.apache.jena.query.text.TextQueryPF;

        r3 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<org.apache.jena.query.text.TextQueryPF: org.apache.jena.query.text.TextIndex server>;

        $r2 = interfaceinvoke $r1.<org.apache.jena.query.text.TextIndex: org.apache.jena.query.text.EntityDefinition getDocDef()>();

        $z0 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label03;

        $r39 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $z4 = virtualinvoke $r39.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 != 0 goto label01;

        $r45 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        interfaceinvoke $r45.<org.slf4j.Logger: void warn(java.lang.String)>("Object to text query is not a literal");

        return null;

     label01:
        $r40 = virtualinvoke $r39.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r40 == null goto label02;

        $r43 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        if $r40 == $r43 goto label02;

        $r44 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String)>("Object to text query is not a string");

        return null;

     label02:
        $r41 = virtualinvoke $r39.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r51 = new org.apache.jena.query.text.TextQueryPF$StrMatch;

        $i9 = (int) -1;

        specialinvoke $r51.<org.apache.jena.query.text.TextQueryPF$StrMatch: void <init>(org.apache.jena.query.text.TextQueryPF,com.hp.hpl.jena.graph.Node,java.lang.String,int,float)>(r0, null, $r41, $i9, 0.0F);

        return $r51;

     label03:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 == 0 goto label04;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 <= 3 goto label05;

     label04:
        $r52 = new org.apache.jena.query.text.TextIndexException;

        specialinvoke $r52.<org.apache.jena.query.text.TextIndexException: void <init>(java.lang.String)>("Change in object list size");

        throw $r52;

     label05:
        r46 = null;

        r47 = virtualinvoke $r2.<org.apache.jena.query.text.EntityDefinition: java.lang.String getPrimaryField()>();

        z5 = 0;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r48 = (com.hp.hpl.jena.graph.Node) $r6;

        $z1 = virtualinvoke r48.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label07;

        r46 = r48;

        z5 = 1;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if 1 < $i4 goto label06;

        $r54 = new org.apache.jena.query.text.TextIndexException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property specificied but no query string : ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<org.apache.jena.query.text.TextIndexException: void <init>(java.lang.String)>($r38);

        throw $r54;

     label06:
        $r27 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        r48 = (com.hp.hpl.jena.graph.Node) $r27;

        $r28 = virtualinvoke $r2.<org.apache.jena.query.text.EntityDefinition: java.lang.String getField(com.hp.hpl.jena.graph.Node)>(r46);

        r47 = $r28;

        if $r28 != null goto label07;

        $r30 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Predicate not indexed: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String)>($r33);

        return null;

     label07:
        $z2 = virtualinvoke r48.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 != 0 goto label08;

        $r23 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text query string is not a literal ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String)>($r26);

        return null;

     label08:
        $r7 = virtualinvoke r48.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r7 == null goto label09;

        $r15 = virtualinvoke r48.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r16 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z3 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label09;

        $r18 = <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text query is not a string ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>($r21);

        return null;

     label09:
        $r8 = virtualinvoke r48.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        i5 = z5 + 1;

        $i11 = (int) -1;

        i6 = $i11;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i5 >= $i2 goto label12;

        $r14 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        r49 = (com.hp.hpl.jena.graph.Node) $r14;

        $i3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r49);

        if $i3 >= 0 goto label10;

        $i13 = (int) -1;

        $i7 = $i13;

        goto label11;

     label10:
        $i7 = $i3;

     label11:
        i6 = $i7;

     label12:
        r50 = $r8;

        if r47 == null goto label13;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r50 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $r59 = new org.apache.jena.query.text.TextQueryPF$StrMatch;

        specialinvoke $r59.<org.apache.jena.query.text.TextQueryPF$StrMatch: void <init>(org.apache.jena.query.text.TextQueryPF,com.hp.hpl.jena.graph.Node,java.lang.String,int,float)>(r0, r46, r50, i6, 0.0F);

        return $r59;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/query/text/TextQueryPF;");

        <org.apache.jena.query.text.TextQueryPF: org.slf4j.Logger log> = $r0;

        return;
    }
}
