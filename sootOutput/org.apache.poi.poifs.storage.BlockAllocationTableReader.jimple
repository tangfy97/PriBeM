public final class org.apache.poi.poifs.storage.BlockAllocationTableReader extends java.lang.Object
{
    private static final org.apache.poi.util.POILogger _logger;
    private static final int MAX_BLOCK_COUNT;
    private final org.apache.poi.util.IntList _entries;
    private org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize;

    public void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize, int, int[], int, int, org.apache.poi.poifs.storage.BlockList) throws java.io.IOException
    {
        byte[] $r7;
        int[] r2;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24;
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18, i19, $i21;
        java.lang.String $r23;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;
        java.io.IOException $r25, $r26, $r27;
        org.apache.poi.poifs.storage.ListManagedBlock $r6, $r8, $r11;
        org.apache.poi.poifs.storage.RawDataBlock $r9, $r12;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        org.apache.poi.poifs.storage.RawDataBlock[] r3;
        org.apache.poi.poifs.storage.BlockList r4;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i6 := @parameter3: int;

        i3 := @parameter4: int;

        r4 := @parameter5: org.apache.poi.poifs.storage.BlockList;

        specialinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        staticinvoke <org.apache.poi.poifs.storage.BlockAllocationTableReader: void sanityCheckBlockCount(int)>(i0);

        $i1 = lengthof r2;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        r3 = newarray (org.apache.poi.poifs.storage.RawDataBlock)[i0];

        i14 = 0;

     label01:
        if i14 >= $i2 goto label03;

        i15 = r2[i14];

        $i12 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: int blockCount()>();

        if i15 <= $i12 goto label02;

        $r25 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Your file contains ");

        $i13 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: int blockCount()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sectors, but the initial DIFAT array at index ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" referenced block # ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". This isn\'t allowed and ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" your file is corrupt");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r25;

     label02:
        $r11 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: org.apache.poi.poifs.storage.ListManagedBlock remove(int)>(i15);

        $r12 = (org.apache.poi.poifs.storage.RawDataBlock) $r11;

        r3[i14] = $r12;

        i14 = i14 + 1;

        goto label01;

     label03:
        if i14 >= i0 goto label09;

        if i3 >= 0 goto label04;

        $r26 = new java.io.IOException;

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>("BAT count exceeds limit, yet XBAT index indicates no valid entries");

        throw $r26;

     label04:
        i16 = i3;

        $i4 = virtualinvoke r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        $i5 = virtualinvoke r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getNextXBATChainOffset()>();

        i17 = 0;

     label05:
        if i17 >= i6 goto label09;

        $i7 = i0 - i14;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i4);

        $r6 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: org.apache.poi.poifs.storage.ListManagedBlock remove(int)>(i16);

        $r7 = interfaceinvoke $r6.<org.apache.poi.poifs.storage.ListManagedBlock: byte[] getData()>();

        i18 = 0;

        i19 = 0;

     label06:
        if i19 >= $i8 goto label07;

        $i10 = i14;

        i14 = i14 + 1;

        $i11 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>($r7, i18);

        $r8 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: org.apache.poi.poifs.storage.ListManagedBlock remove(int)>($i11);

        $r9 = (org.apache.poi.poifs.storage.RawDataBlock) $r8;

        r3[$i10] = $r9;

        i18 = i18 + 4;

        i19 = i19 + 1;

        goto label06;

     label07:
        $i9 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>($r7, $i5);

        i16 = $i9;

        $i21 = (int) -2;

        if $i9 != $i21 goto label08;

        goto label09;

     label08:
        i17 = i17 + 1;

        goto label05;

     label09:
        if i14 == i0 goto label10;

        $r27 = new java.io.IOException;

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>("Could not find all blocks");

        throw $r27;

     label10:
        specialinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: void setEntries(org.apache.poi.poifs.storage.ListManagedBlock[],org.apache.poi.poifs.storage.BlockList)>(r3, r4);

        return;
    }

    void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize, org.apache.poi.poifs.storage.ListManagedBlock[], org.apache.poi.poifs.storage.BlockList) throws java.io.IOException
    {
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        org.apache.poi.poifs.storage.BlockList r3;
        org.apache.poi.poifs.storage.ListManagedBlock[] r2;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r2 := @parameter1: org.apache.poi.poifs.storage.ListManagedBlock[];

        r3 := @parameter2: org.apache.poi.poifs.storage.BlockList;

        specialinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        specialinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: void setEntries(org.apache.poi.poifs.storage.ListManagedBlock[],org.apache.poi.poifs.storage.BlockList)>(r2, r3);

        return;
    }

    void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)
    {
        org.apache.poi.util.IntList $r2;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize> = r1;

        $r2 = new org.apache.poi.util.IntList;

        specialinvoke $r2.<org.apache.poi.util.IntList: void <init>()>();

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries> = $r2;

        return;
    }

    public static void sanityCheckBlockCount(int) throws java.io.IOException
    {
        int i0, $i2, $i4;
        java.lang.String $r7, $r13;
        java.io.IOException $r15, $r17;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r14, $r16;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r15 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal block count; minimum count is 1, got ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r15;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Block count ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too high. POI maximum is ");

        $i4 = (int) 65535;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r17;

     label2:
        return;
    }

    org.apache.poi.poifs.storage.ListManagedBlock[] fetchBlocks(int, int, org.apache.poi.poifs.storage.BlockList) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.util.ArrayList $r11;
        int i0, $i1, i2, i3, $i5, $i7, $i9;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r6;
        boolean z0;
        java.io.IOException $r8;
        org.apache.poi.util.POILogger $r9, $r10;
        org.apache.poi.poifs.storage.ListManagedBlock $r5;
        org.apache.poi.poifs.storage.BlockList r4;
        org.apache.poi.poifs.storage.ListManagedBlock[] $r1, $r3;
        org.apache.poi.util.IntList $r7;

        r6 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r4 := @parameter2: org.apache.poi.poifs.storage.BlockList;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        i3 = i0;

        z0 = 1;

     label1:
        $i5 = (int) -2;

        if i3 == $i5 goto label8;

     label2:
        $r5 = interfaceinvoke r4.<org.apache.poi.poifs.storage.BlockList: org.apache.poi.poifs.storage.ListManagedBlock remove(int)>(i3);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r7 = r6.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries>;

        i3 = virtualinvoke $r7.<org.apache.poi.util.IntList: int get(int)>(i3);

        z0 = 0;

     label3:
        goto label1;

     label4:
        $r8 := @caughtexception;

        if i3 != i2 goto label5;

        $r10 = <org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.POILogger _logger>;

        virtualinvoke $r10.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Warning, header block comes after data blocks in POIFS block listing");

        $i7 = (int) -2;

        i3 = $i7;

        goto label7;

     label5:
        if i3 != 0 goto label6;

        if z0 == 0 goto label6;

        $r9 = <org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.POILogger _logger>;

        virtualinvoke $r9.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Warning, incorrectly terminated empty data blocks in POIFS block listing (should end at -2, ended at 0)");

        $i9 = (int) -2;

        i3 = $i9;

        goto label7;

     label6:
        throw $r8;

     label7:
        goto label1;

     label8:
        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r1 = newarray (org.apache.poi.poifs.storage.ListManagedBlock)[$i1];

        $r2 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (org.apache.poi.poifs.storage.ListManagedBlock[]) $r2;

        return $r3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    boolean isUsed(int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        int i0, $i1, $i3;
        org.apache.poi.util.IntList $r1;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries>;

        $i1 = virtualinvoke $r1.<org.apache.poi.util.IntList: int get(int)>(i0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.IndexOutOfBoundsException from label1 to label3 with label4;
    }

    int getNextBlockIndex(int) throws java.io.IOException
    {
        java.io.IOException $r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.poi.util.IntList $r7;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: boolean isUsed(int)>(i0);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries>;

        $i1 = virtualinvoke $r7.<org.apache.poi.util.IntList: int get(int)>(i0);

        return $i1;

     label1:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unused");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private void setEntries(org.apache.poi.poifs.storage.ListManagedBlock[], org.apache.poi.poifs.storage.BlockList) throws java.io.IOException
    {
        byte[] $r5;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        org.apache.poi.poifs.storage.BlockAllocationTableReader r0;
        org.apache.poi.poifs.storage.ListManagedBlock $r4;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        org.apache.poi.poifs.storage.BlockList r3;
        org.apache.poi.poifs.storage.ListManagedBlock[] r2;
        org.apache.poi.util.IntList $r6, $r7;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableReader;

        r2 := @parameter0: org.apache.poi.poifs.storage.ListManagedBlock[];

        r3 := @parameter1: org.apache.poi.poifs.storage.BlockList;

        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i0 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        i4 = 0;

     label1:
        $i1 = lengthof r2;

        if i4 >= $i1 goto label5;

        $r4 = r2[i4];

        $r5 = interfaceinvoke $r4.<org.apache.poi.poifs.storage.ListManagedBlock: byte[] getData()>();

        i5 = 0;

        i6 = 0;

     label2:
        if i6 >= $i0 goto label4;

        $i2 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>($r5, i5);

        $i8 = (int) -1;

        if $i2 != $i8 goto label3;

        $r7 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries>;

        $i3 = virtualinvoke $r7.<org.apache.poi.util.IntList: int size()>();

        interfaceinvoke r3.<org.apache.poi.poifs.storage.BlockList: void zap(int)>($i3);

     label3:
        $r6 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.IntList _entries>;

        virtualinvoke $r6.<org.apache.poi.util.IntList: boolean add(int)>($i2);

        i5 = i5 + 4;

        i6 = i6 + 1;

        goto label2;

     label4:
        r2[i4] = null;

        i4 = i4 + 1;

        goto label1;

     label5:
        interfaceinvoke r3.<org.apache.poi.poifs.storage.BlockList: void setBAT(org.apache.poi.poifs.storage.BlockAllocationTableReader)>(r0);

        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.poifs.storage.BlockAllocationTableReader: int MAX_BLOCK_COUNT> = 65535;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/poifs/storage/BlockAllocationTableReader;");

        <org.apache.poi.poifs.storage.BlockAllocationTableReader: org.apache.poi.util.POILogger _logger> = $r0;

        return;
    }
}
