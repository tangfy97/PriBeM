abstract class org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr extends org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultBinaryExpr
{

    public void <init>(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr, org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr r0;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Expr r1, r2;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr;

        r1 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr;

        r2 := @parameter1: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr;

        specialinvoke r0.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultBinaryExpr: void <init>(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr,org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)>(r1, r2);

        return;
    }

    public java.lang.String toString()
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr r2;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Expr $r3, $r6;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r9;

        r2 := @this: org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[(DefaultArithExpr): ");

        $r3 = virtualinvoke r2.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultBinaryExpr: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr getLHS()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = virtualinvoke r2.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultBinaryExpr: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr getRHS()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public void assertInteger(java.lang.Number) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr r6;
        org.xmlpull.v1.builder.xpath.jaxen.JaxenException $r1;
        byte $b1;
        java.lang.StringBuffer $r2, $r3, $r4;
        int $i0;
        java.lang.String $r5;
        java.lang.Number r0;
        double $d0, $d1;

        r6 := @this: org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultArithExpr;

        r0 := @parameter0: java.lang.Number;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $d1 = (double) $i0;

        $b1 = $d0 cmpl $d1;

        if $b1 == 0 goto label1;

        $r1 = new org.xmlpull.v1.builder.xpath.jaxen.JaxenException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an integer");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.JaxenException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }
}
