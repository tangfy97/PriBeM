public abstract class com.hp.hpl.jena.sparql.expr.NodeValue extends com.hp.hpl.jena.sparql.expr.ExprNode
{
    private static org.slf4j.Logger log;
    public static boolean VerboseWarnings;
    public static boolean VerboseExceptions;
    private static boolean VALUE_EXTENSIONS;
    private static boolean sameValueAsString;
    private static com.hp.hpl.jena.sparql.util.RefBoolean enableRomanNumerals;
    public static final java.math.BigInteger IntegerZERO;
    public static final java.math.BigDecimal DecimalZERO;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue TRUE;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue FALSE;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvZERO;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvONE;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvNaN;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvINF;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvNegINF;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvEmptyString;
    private static final java.lang.String strForUnNode;
    public static final com.hp.hpl.jena.sparql.expr.NodeValue nvNothing;
    public static final java.lang.String xsdNamespace;
    public static javax.xml.datatype.DatatypeFactory xmlDatatypeFactory;
    private com.hp.hpl.jena.graph.Node node;
    private static final java.lang.String dtXSDdateTimeStamp;
    private static final java.lang.String dtXSDdayTimeDuration;
    private static final java.lang.String dtXSDyearMonthDuration;
    private static final java.lang.String dtXSDprecisionDecimal;

    private static javax.xml.datatype.DatatypeFactory getDatatypeFactory() throws javax.xml.datatype.DatatypeConfigurationException
    {
        javax.xml.datatype.DatatypeFactory $r16, $r20;
        boolean $z0, $z1, $z2;
        java.util.ServiceLoader $r17;
        java.lang.Exception $r28;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r10, $r11;
        java.lang.ClassLoader $r1, $r15;
        java.lang.Throwable $r25;
        java.lang.String $r4, $r6, $r9, $r12, $r13, r32;
        java.util.Properties $r21;
        org.slf4j.Logger $r24, $r27, $r29, $r31;
        java.util.Iterator $r18;
        java.io.IOException $r23, $r26, $r30;
        java.io.FileInputStream $r22, r33;
        java.io.File $r2;
        java.lang.Class $r0, $r14;
        java.lang.Object $r19;

        $r0 = class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = <java.io.File: java.lang.String pathSeparator>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");

        $r9 = <java.io.File: java.lang.String pathSeparator>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jaxp.properties");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r12);

        $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.xml.datatype.DatatypeFactory");

        r32 = $r13;

        if $r13 != null goto label17;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label17;

        $z2 = virtualinvoke $r2.<java.io.File: boolean canRead()>();

        if $z2 == 0 goto label17;

        $r21 = new java.util.Properties;

        specialinvoke $r21.<java.util.Properties: void <init>()>();

        r33 = null;

     label01:
        $r22 = new java.io.FileInputStream;

        specialinvoke $r22.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        r33 = $r22;

        virtualinvoke $r21.<java.util.Properties: void load(java.io.InputStream)>($r22);

        r32 = virtualinvoke $r21.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.xml.datatype.DatatypeFactory");

     label02:
        if $r22 == null goto label17;

     label03:
        virtualinvoke $r22.<java.io.InputStream: void close()>();

     label04:
        goto label17;

     label05:
        $r30 := @caughtexception;

        $r31 = <com.hp.hpl.jena.sparql.expr.NodeValue: org.slf4j.Logger log>;

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Issue closing jaxp.properties ", $r30);

        goto label17;

     label06:
        $r28 := @caughtexception;

        $r29 = <com.hp.hpl.jena.sparql.expr.NodeValue: org.slf4j.Logger log>;

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Issue loading jaxp.properties", $r28);

     label07:
        if r33 == null goto label17;

     label08:
        virtualinvoke r33.<java.io.InputStream: void close()>();

     label09:
        goto label17;

     label10:
        $r26 := @caughtexception;

        $r27 = <com.hp.hpl.jena.sparql.expr.NodeValue: org.slf4j.Logger log>;

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Issue closing jaxp.properties ", $r26);

        goto label17;

     label11:
        $r25 := @caughtexception;

     label12:
        if r33 == null goto label16;

     label13:
        virtualinvoke r33.<java.io.InputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        $r24 = <com.hp.hpl.jena.sparql.expr.NodeValue: org.slf4j.Logger log>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Issue closing jaxp.properties ", $r23);

     label16:
        throw $r25;

     label17:
        if r32 != null goto label18;

        $r17 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Ljavax/xml/datatype/DatatypeFactory;", $r1);

        $r18 = virtualinvoke $r17.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (javax.xml.datatype.DatatypeFactory) $r19;

        return $r20;

     label18:
        if r32 != null goto label19;

        r32 = <javax.xml.datatype.DatatypeFactory: java.lang.String DATATYPEFACTORY_IMPLEMENTATION_CLASS>;

     label19:
        $r14 = class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r16 = staticinvoke <javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance(java.lang.String,java.lang.ClassLoader)>(r32, $r15);

        return $r16;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Exception from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = null;

        return;
    }

    protected void <init>(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = null;

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = r1;

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue parse(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node parseNode(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(long)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger $r0;
        long l0;
        java.math.BigInteger $r1;

        l0 := @parameter0: long;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(java.math.BigInteger)>($r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger $r0;
        java.math.BigInteger r1;

        r1 := @parameter0: java.math.BigInteger;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(java.math.BigInteger)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger $r0;
        java.math.BigInteger $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(java.math.BigInteger)>($r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)
    {
        float f0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat $r0;

        f0 := @parameter0: float;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: void <init>(float)>(f0);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble: void <init>(double)>(d0);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal $r0;

        r1 := @parameter0: java.math.BigDecimal;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: void <init>(java.math.BigDecimal)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(long)
    {
        java.math.BigDecimal $r1;
        long l0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal $r0;

        l0 := @parameter0: long;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(l0);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: void <init>(java.math.BigDecimal)>($r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(double)
    {
        java.math.BigDecimal $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(d0);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: void <init>(java.math.BigDecimal)>($r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDate(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateTimeString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(javax.xml.datatype.XMLGregorianCalendar)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT $r4;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;
        javax.xml.datatype.XMLGregorianCalendar r0;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        $r1 = virtualinvoke r0.<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toXMLFormat()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, $r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r1, $r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDate(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDate(javax.xml.datatype.XMLGregorianCalendar)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT $r4;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;
        javax.xml.datatype.XMLGregorianCalendar r0;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        $r1 = virtualinvoke r0.<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toXMLFormat()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, $r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r1, $r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDuration(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDduration>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeDuration(javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration $r0;

        r1 := @parameter0: javax.xml.datatype.Duration;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration: void <init>(javax.xml.datatype.Duration)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDuration(javax.xml.datatype.Duration, com.hp.hpl.jena.graph.Node)
    {
        javax.xml.datatype.Duration r1;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration $r0;

        r1 := @parameter0: javax.xml.datatype.Duration;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration: void <init>(javax.xml.datatype.Duration,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeBoolean(boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        goto label2;

     label1:
        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        goto label2;

     label1:
        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nodeToNodeValue(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String, java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String r1, r2, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r4);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.TypeMapper $r3;
        com.hp.hpl.jena.graph.Node r11;
        com.hp.hpl.jena.datatypes.RDFDatatype $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r0, r1, $r9, r10;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        if r10 == null goto label1;

        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        r10 = null;

     label1:
        if r0 == null goto label2;

        if r10 == null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Both lang tag and datatype defined (lexcial form \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;", $r9);

     label2:
        if r10 == null goto label3;

        $r3 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r10);

        r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, null, $r4);

        goto label4;

     label3:
        r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r0, null);

     label4:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r11);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeBoolean(boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        goto label2;

     label1:
        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeBoolean(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeInteger(long)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        long l0;
        java.lang.String $r0, $r2;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeInteger(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeFloat(float)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        float f0;
        java.lang.String $r0, $r2;

        f0 := @parameter0: float;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(float)>(f0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeFloat(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDouble(double)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String $r0, $r2;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(double)>(d0);

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDouble(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r4;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1, $r3;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(java.math.BigDecimal)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r1, null, $r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDecimal(java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeString(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>(r0, null, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDateTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateTimeString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDateTime(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDate(java.util.Calendar)
    {
        java.util.Calendar r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateString(java.util.Calendar)>(r0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDate(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0, $r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return r0;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        com.hp.hpl.jena.sparql.graph.NodeTransform r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r3);

        return $r4;
    }

    public com.hp.hpl.jena.graph.Node evalNode(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        return $r1;
    }

    public boolean isConstant()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 1;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue getConstant()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return r0;
    }

    public boolean isIRI()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void forceToNode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        return $z0;
    }

    public boolean isBlank()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void forceToNode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        return $z0;
    }

    public static boolean sameAs(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.ExprNotComparableException $r32, $r33;
        com.hp.hpl.jena.graph.Node $r12, $r13, $r24, $r25, $r26, $r27;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r5, $r16;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r1, $r23, $r34;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r17, $r18, $r19, $r20, $r21, $r35, $r36, $r37, $r38, $r39;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r3;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        java.lang.String $r11, $r14, $r15, $r22, $r28, $r29, $r30, $r31, $r40;
        int[] $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        if r0 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r1 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Attempt to sameValueAs on a null");

        throw $r1;

     label02:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification classifyValueOp(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        $r4 = <com.hp.hpl.jena.sparql.expr.NodeValue$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$ValueSpaceClassification>;

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label06;
            case 7: goto label06;
            case 8: goto label06;
            case 9: goto label06;
            case 10: goto label10;
            case 11: goto label14;
            case 12: goto label17;
            case 13: goto label20;
            case 14: goto label23;
            case 15: goto label24;
            case 16: goto label31;
            default: goto label33;
        };

     label03:
        $i6 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareNumeric(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        if $i6 != 0 goto label04;

        $z13 = 1;

        goto label05;

     label04:
        $z13 = 0;

     label05:
        return $z13;

     label06:
        $i5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDateTime(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        if $i5 != 2 goto label07;

        $r33 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        specialinvoke $r33.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>("Indeterminate dateTime comparison");

        throw $r33;

     label07:
        if $i5 != 0 goto label08;

        $z14 = 1;

        goto label09;

     label08:
        $z14 = 0;

     label09:
        return $z14;

     label10:
        $i4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDuration(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        if $i4 != 2 goto label11;

        $r32 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        specialinvoke $r32.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>("Indeterminate duration comparison");

        throw $r32;

     label11:
        if $i4 != 0 goto label12;

        $z15 = 1;

        goto label13;

     label12:
        $z15 = 0;

     label13:
        return $z15;

     label14:
        $i3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareString(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        if $i3 != 0 goto label15;

        $z16 = 1;

        goto label16;

     label15:
        $z16 = 0;

     label16:
        return $z16;

     label17:
        $i2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareBoolean(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        if $i2 != 0 goto label18;

        $z17 = 1;

        goto label19;

     label18:
        $z17 = 0;

     label19:
        return $z17;

     label20:
        $r26 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r27 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r28 = virtualinvoke $r26.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r29 = virtualinvoke $r27.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z11 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z11 == 0 goto label21;

        $r30 = virtualinvoke $r26.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r31 = virtualinvoke $r27.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z12 = virtualinvoke $r30.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r31);

        if $z12 == 0 goto label21;

        $z18 = 1;

        goto label22;

     label21:
        $z18 = 0;

     label22:
        return $z18;

     label23:
        $r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r25 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $z10 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean sameTerm(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r24, $r25);

        return $z10;

     label24:
        $r12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r13 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $z3 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS>;

        if $z3 != 0 goto label25;

        $z9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean rdfTermEquals(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r13);

        return $z9;

     label25:
        $z4 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 == 0 goto label26;

        $z5 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z5 != 0 goto label27;

     label26:
        return 0;

     label27:
        $z6 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean sameTerm(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r13);

        if $z6 == 0 goto label28;

        return 1;

     label28:
        $r14 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z7 == 0 goto label29;

        $r15 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z8 != 0 goto label30;

     label29:
        return 0;

     label30:
        $r16 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown equality test: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r22);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r16);

        $r23 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r23.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("raise returned (sameValueAs)");

        throw $r23;

     label31:
        $z0 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS>;

        if $z0 != 0 goto label32;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isLiteral()>();

        if $z1 == 0 goto label32;

        $z2 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isLiteral()>();

        if $z2 == 0 goto label32;

        $r5 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r11);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r5);

     label32:
        return 0;

     label33:
        $r34 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sameValueAs failure ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r40);

        throw $r34;
    }

    public static boolean notSameAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, $r3;
        com.hp.hpl.jena.graph.Node r0, r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r2);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: boolean notSameAs(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r1, $r3);

        return $z0;
    }

    public static boolean notSameAs(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: boolean sameAs(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int compareAlways(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.ExprNotComparableException $r4;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Node $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

     label1:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: int compare(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,boolean)>(r0, r1, 1);

        if $i0 == 0 goto label3;

     label2:
        return $i0;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareRDFTerms(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return $i1;

        catch com.hp.hpl.jena.sparql.expr.ExprNotComparableException from label1 to label2 with label4;
    }

    public static int compare(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r1;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Attempt to compare on null");

        throw $r1;

     label2:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: int compare(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,boolean)>(r0, r2, 0);

        return $i0;
    }

    private static int compare(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, boolean)
    {
        com.hp.hpl.jena.sparql.expr.ExprNotComparableException $r66, $r69, $r72, $r75;
        com.hp.hpl.jena.graph.Node $r12, $r13, $r14, $r15, $r32, $r33, $r34, $r35, $r50, $r52;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r64, $r67, $r70, $r73, $r76, $r78;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r18, $r19, $r20, $r21, $r26, $r27, $r28, $r29, $r45, $r46, $r47, $r48, $r57, $r58, $r59, $r60, $r65, $r68, $r71, $r74, $r77;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r2, r62;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        java.lang.String $r10, $r22, $r30, $r36, $r37, $r38, $r39, $r40, $r41, $r49, $r51, $r53, $r61;
        int[] $r3, $r63;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        z0 := @parameter2: boolean;

        if r0 != null goto label01;

        if r1 != null goto label01;

        return 0;

     label01:
        if r0 != null goto label02;

        $i16 = (int) -1;

        return $i16;

     label02:
        if r1 != null goto label03;

        return 1;

     label03:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification classifyValueOp(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        r62 = $r2;

        $r3 = <com.hp.hpl.jena.sparql.expr.NodeValue$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$ValueSpaceClassification>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label04;
            case 10: goto label06;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label08;
            case 14: goto label08;
            case 15: goto label08;
            case 16: goto label08;
            default: goto label08;
        };

     label04:
        $i12 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDateTime(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if $i12 == 2 goto label05;

        return $i12;

     label05:
        r62 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DIFFERENT>;

        goto label08;

     label06:
        $i2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDuration(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if $i2 == 2 goto label07;

        return $i2;

     label07:
        r62 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DIFFERENT>;

        goto label08;

     label08:
        $r63 = <com.hp.hpl.jena.sparql.expr.NodeValue$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$ValueSpaceClassification>;

        $i13 = virtualinvoke r62.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: int ordinal()>();

        $i14 = $r63[$i13];

        tableswitch($i14)
        {
            case 1: goto label10;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label11;
            case 12: goto label16;
            case 13: goto label17;
            case 14: goto label22;
            case 15: goto label24;
            case 16: goto label27;
            default: goto label29;
        };

     label09:
        $r64 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r64.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Still seeing date/dateTime/time/duration compare type");

        throw $r64;

     label10:
        $i11 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareNumeric(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        return $i11;

     label11:
        $i10 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareString(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if z0 != 0 goto label12;

        return $i10;

     label12:
        if $i10 == 0 goto label13;

        return $i10;

     label13:
        $r50 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r51 = virtualinvoke $r50.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $r52 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r53 = virtualinvoke $r52.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r51 != null goto label14;

        if $r53 == null goto label14;

        $i18 = (int) -1;

        return $i18;

     label14:
        if $r53 != null goto label15;

        if $r51 == null goto label15;

        return 1;

     label15:
        return 0;

     label16:
        $i9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareBoolean(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        return $i9;

     label17:
        $r34 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r35 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r36 = virtualinvoke $r34.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r37 = virtualinvoke $r35.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $i6 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompareIgnoreCase(java.lang.String,java.lang.String)>($r36, $r37);

        if $i6 == 0 goto label19;

        if z0 != 0 goto label18;

        $r66 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t compare (different languages) ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>($r49);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r66);

     label18:
        return $i6;

     label19:
        $r38 = virtualinvoke $r34.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r39 = virtualinvoke $r35.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i7 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r38, $r39);

        if $i7 == 0 goto label20;

        return $i7;

     label20:
        $r40 = virtualinvoke $r34.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r41 = virtualinvoke $r35.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $i8 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r40, $r41);

        if $i8 != 0 goto label21;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean sameTerm(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r34, $r35);

        if $z2 != 0 goto label21;

        $r67 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r67.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Look the same (lang tags) but no node equals");

        throw $r67;

     label21:
        return $i8;

     label22:
        if z0 == 0 goto label23;

        $r32 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r33 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i5 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareRDFTerms(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r32, $r33);

        return $i5;

     label23:
        $r69 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t compare (nodes) ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r69.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>($r30);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r69);

        $r70 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r70.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("NodeValue.raise returned");

        throw $r70;

     label24:
        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r15 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean sameTerm(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r14, $r15);

        if $z1 == 0 goto label25;

        return 0;

     label25:
        if z0 == 0 goto label26;

        $i4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareRDFTerms(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r14, $r15);

        return $i4;

     label26:
        $r72 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t compare ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r72.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>($r22);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r72);

        $r73 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r73.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("NodeValue.raise returned");

        throw $r73;

     label27:
        if z0 == 0 goto label28;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r13 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareRDFTerms(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r13);

        return $i3;

     label28:
        $r75 = new com.hp.hpl.jena.sparql.expr.ExprNotComparableException;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t compare (incompatible value spaces)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<com.hp.hpl.jena.sparql.expr.ExprNotComparableException: void <init>(java.lang.String)>($r10);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r75);

        $r76 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r76.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("NodeValue.raise returned");

        throw $r76;

     label29:
        $r78 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compare failure ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r78.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r61);

        throw $r78;
    }

    public static com.hp.hpl.jena.sparql.expr.ValueSpaceClassification classifyValueOp(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        if $r1 != $r3 goto label1;

        return $r1;

     label1:
        $r4 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_UNKNOWN>;

        if $r1 == $r4 goto label2;

        $r6 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_UNKNOWN>;

        if $r3 != $r6 goto label3;

     label2:
        $r5 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_UNKNOWN>;

        return $r5;

     label3:
        $r7 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DIFFERENT>;

        return $r7;
    }

    public com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification classifyValueSpace(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.expr.ValueSpaceClassification classifyValueSpace(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.lang.String $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z0 == 0 goto label01;

        $r19 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        return $r19;

     label01:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z1 == 0 goto label02;

        $r18 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATETIME>;

        return $r18;

     label02:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z2 == 0 goto label03;

        $r17 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATE>;

        return $r17;

     label03:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isTime()>();

        if $z3 == 0 goto label04;

        $r16 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_TIME>;

        return $r16;

     label04:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDuration()>();

        if $z4 == 0 goto label05;

        $r15 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        return $r15;

     label05:
        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYear()>();

        if $z5 == 0 goto label06;

        $r14 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_G_YEAR>;

        return $r14;

     label06:
        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z6 == 0 goto label07;

        $r13 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_G_YEARMONTH>;

        return $r13;

     label07:
        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonth()>();

        if $z7 == 0 goto label08;

        $r12 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_G_MONTH>;

        return $r12;

     label08:
        $z8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z8 == 0 goto label09;

        $r11 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_G_MONTHDAY>;

        return $r11;

     label09:
        $z9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGDay()>();

        if $z9 == 0 goto label10;

        $r10 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_G_DAY>;

        return $r10;

     label10:
        $z10 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS>;

        if $z10 == 0 goto label11;

        $z17 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z17 == 0 goto label11;

        $r9 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATE>;

        return $r9;

     label11:
        $z11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z11 == 0 goto label12;

        $r8 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_STRING>;

        return $r8;

     label12:
        $z12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z12 == 0 goto label13;

        $r7 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_BOOLEAN>;

        return $r7;

     label13:
        $z13 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isLiteral()>();

        if $z13 != 0 goto label14;

        $r6 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NODE>;

        return $r6;

     label14:
        $z14 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS>;

        if $z14 == 0 goto label15;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        if $r1 == null goto label15;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $z15 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z15 == 0 goto label15;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z16 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z16 != 0 goto label15;

        $r5 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_LANG>;

        return $r5;

     label15:
        $r20 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_UNKNOWN>;

        return $r20;
    }

    public static com.hp.hpl.jena.graph.Node toNode(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node asNode()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node makeNode()>();

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        return $r2;
    }

    protected abstract com.hp.hpl.jena.graph.Node makeNode();

    public com.hp.hpl.jena.graph.Node getNode()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        return $r1;
    }

    public java.lang.String getDatatypeURI()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        return $r2;
    }

    public boolean hasNode()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBoolean()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isNumber()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isInteger()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isDecimal()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isFloat()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isDouble()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean hasDateTime()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isTime()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYear()>();

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonth()>();

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z6 != 0 goto label1;

        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGDay()>();

        if $z7 == 0 goto label2;

     label1:
        $z8 = 1;

        goto label3;

     label2:
        $z8 = 0;

     label3:
        return $z8;
    }

    public boolean isDateTime()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isDate()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isLiteral()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isTime()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isDuration()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isYearMonth()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        javax.xml.datatype.Duration $r1;
        javax.xml.datatype.DatatypeConstants$Field $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDuration()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r2 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field YEARS>;

        $z1 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r2);

        if $z1 != 0 goto label2;

        $r7 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MONTHS>;

        $z6 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r7);

        if $z6 == 0 goto label3;

     label2:
        $r3 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field DAYS>;

        $z2 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r3);

        if $z2 != 0 goto label3;

        $r4 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field HOURS>;

        $z3 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r4);

        if $z3 != 0 goto label3;

        $r5 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MINUTES>;

        $z4 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r5);

        if $z4 != 0 goto label3;

        $r6 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $z5 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r6);

        if $z5 != 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        return $z7;
    }

    boolean isDayTime()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        javax.xml.datatype.Duration $r1;
        javax.xml.datatype.DatatypeConstants$Field $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDuration()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r2 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field YEARS>;

        $z1 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r2);

        if $z1 != 0 goto label3;

        $r3 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MONTHS>;

        $z2 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r3);

        if $z2 != 0 goto label3;

        $r4 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field DAYS>;

        $z3 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r4);

        if $z3 != 0 goto label2;

        $r5 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field HOURS>;

        $z4 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r5);

        if $z4 != 0 goto label2;

        $r6 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MINUTES>;

        $z5 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r6);

        if $z5 != 0 goto label2;

        $r7 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $z6 = virtualinvoke $r1.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r7);

        if $z6 == 0 goto label3;

     label2:
        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        return $z7;
    }

    public boolean isGYear()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isGYearMonth()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isGMonth()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isGMonthDay()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean isGDay()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        return 0;
    }

    public boolean getBoolean()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a boolean: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return 0;
    }

    public java.lang.String getString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return null;
    }

    public java.math.BigInteger getInteger()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an integer: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return null;
    }

    public java.math.BigDecimal getDecimal()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a decimal: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return null;
    }

    public float getFloat()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a float: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return #NaNF;
    }

    public double getDouble()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a double: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return #NaN;
    }

    public javax.xml.datatype.XMLGregorianCalendar getDateTime()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No DateTime value: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return null;
    }

    public javax.xml.datatype.Duration getDuration()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r3 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a duration: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r0);

        return null;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue nodeToNodeValue(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode $r4, $r5, $r15, $r17;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString $r12;
        java.lang.String $r1, $r6, $r10, $r11, $r13, $r14, $r16;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r2;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;", "Variable passed to NodeValue.nodeToNodeValue");

     label01:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label02;

        $r15 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r15;

     label02:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r1 == null goto label03;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 != 0 goto label03;

        $z10 = 1;

        $z9 = 1;

        goto label04;

     label03:
        $z10 = 0;

        $z9 = 0;

     label04:
        z2 = $z9;

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r16 != null goto label05;

        if $z10 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        if $z8 == 0 goto label07;

        $r12 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        specialinvoke $r12.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r13, r0);

        return $r12;

     label07:
        if z2 == 0 goto label09;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r11 == null goto label08;

        $z5 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VerboseWarnings>;

        if $z5 == 0 goto label08;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;", "Lang tag and datatype (datatype ignored)");

     label08:
        $r17 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r17;

     label09:
        virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: boolean isWellFormed()>();

        if $z3 != 0 goto label11;

        $z4 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VerboseWarnings>;

        if $z4 == 0 goto label10;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Datatype format exception: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;", $r10);

     label10:
        $r5 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r5;

     label11:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue _setByValue(com.hp.hpl.jena.graph.Node)>(r0);

        if $r3 == null goto label12;

        return $r3;

     label12:
        $r4 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r4;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue _setByValue(com.hp.hpl.jena.graph.Node)
    {
        javax.xml.datatype.DatatypeFactory $r36;
        java.lang.Integer $r31;
        java.math.BigInteger $r81;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble $r70;
        java.lang.StringBuilder $r89, $r90, $r91;
        long $l1, $l2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat $r74;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString $r84;
        int $i0;
        java.lang.Boolean $r34;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r32, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r67, $r71, $r75, $r79, $r83, $r102;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal $r78;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r87;
        java.lang.Object $r26, $r33, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r64, $r68, $r72;
        com.hp.hpl.jena.graph.Node r0;
        java.math.BigDecimal $r76;
        com.hp.hpl.jena.sparql.util.RomanNumeralDatatype $r22, $r24;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r94, r95, r96, r97, r98, r99, r100, r101;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r27, $r88;
        java.lang.String $r2, $r4, $r21, $r23, $r25, $r38, $r39, $r41, $r42, $r66, $r77, $r80, $r85, $r92, r93;
        java.lang.Number $r69, $r73;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT $r45, $r48, $r51, $r54, $r57, $r60, $r63, $r65;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger $r28, $r30, $r82;
        javax.xml.datatype.Duration $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration $r40;
        com.hp.hpl.jena.sparql.util.RefBoolean $r20, $r86;
        float $f0;
        com.hp.hpl.jena.sparql.util.RomanNumeral $r29;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueBoolean $r35;
        double $d0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: boolean hasLang(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("http://www.w3.org/2001/XMLSchema#");

        if $z1 != 0 goto label02;

        $r86 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.util.RefBoolean enableRomanNumerals>;

        $z44 = virtualinvoke $r86.<com.hp.hpl.jena.sparql.util.RefBoolean: boolean getValue()>();

        if $z44 != 0 goto label02;

        return null;

     label02:
        $z2 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean sameValueAsString>;

        if $z2 == 0 goto label04;

        $r83 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z43 = virtualinvoke $r83.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z43 == 0 goto label04;

        $r84 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString;

        $r85 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        specialinvoke $r84.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r85, r0);

     label03:
        return $r84;

     label04:
        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $z3 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label07;

        $r79 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z41 = virtualinvoke $r79.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z41 == 0 goto label07;

        $r80 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        r93 = $r80;

        $z42 = virtualinvoke $r80.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z42 == 0 goto label05;

        r93 = virtualinvoke $r80.<java.lang.String: java.lang.String substring(int)>(1);

     label05:
        $r81 = new java.math.BigInteger;

        specialinvoke $r81.<java.math.BigInteger: void <init>(java.lang.String)>(r93);

        $r82 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        specialinvoke $r82.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(java.math.BigInteger,com.hp.hpl.jena.graph.Node)>($r81, r0);

     label06:
        return $r82;

     label07:
        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $z4 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label09;

        $r75 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $z40 = virtualinvoke $r75.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z40 == 0 goto label09;

        $r76 = new java.math.BigDecimal;

        $r77 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        specialinvoke $r76.<java.math.BigDecimal: void <init>(java.lang.String)>($r77);

        $r78 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        specialinvoke $r78.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: void <init>(java.math.BigDecimal,com.hp.hpl.jena.graph.Node)>($r76, r0);

     label08:
        return $r78;

     label09:
        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z5 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label11;

        $r71 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z39 = virtualinvoke $r71.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z39 == 0 goto label11;

        $r72 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r73 = (java.lang.Number) $r72;

        $f0 = virtualinvoke $r73.<java.lang.Number: float floatValue()>();

        $r74 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        specialinvoke $r74.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: void <init>(float,com.hp.hpl.jena.graph.Node)>($f0, r0);

     label10:
        return $r74;

     label11:
        $r8 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z6 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z6 == 0 goto label13;

        $r67 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z38 = virtualinvoke $r67.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z38 == 0 goto label13;

        $r68 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r69 = (java.lang.Number) $r68;

        $d0 = virtualinvoke $r69.<java.lang.Number: double doubleValue()>();

        $r70 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble;

        specialinvoke $r70.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDouble: void <init>(double,com.hp.hpl.jena.graph.Node)>($d0, r0);

     label12:
        return $r70;

     label13:
        $r9 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $z7 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z7 != 0 goto label14;

        $r66 = "http://www.w3.org/2001/XMLSchema#dateTimeStamp";

        $z37 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z37 == 0 goto label16;

     label14:
        $r10 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $z8 = virtualinvoke $r10.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValid(java.lang.String)>($r2);

        if $z8 == 0 goto label16;

        $r64 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r94 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r64;

        $r65 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r65.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label15:
        return $r65;

     label16:
        $r11 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $z9 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z9 == 0 goto label18;

        $r61 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $z36 = virtualinvoke $r61.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z36 == 0 goto label18;

        $r62 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r95 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r62;

        $r63 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r63.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label17:
        return $r63;

     label18:
        $r12 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $z10 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z10 == 0 goto label20;

        $r58 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $z35 = virtualinvoke $r58.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z35 == 0 goto label20;

        $r59 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r96 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r59;

        $r60 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r60.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label19:
        return $r60;

     label20:
        $r13 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        $z11 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z11 == 0 goto label22;

        $r55 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        $z34 = virtualinvoke $r55.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z34 == 0 goto label22;

        $r56 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r97 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r56;

        $r57 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r57.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label21:
        return $r57;

     label22:
        $r14 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        $z12 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z12 == 0 goto label24;

        $r52 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        $z33 = virtualinvoke $r52.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z33 == 0 goto label24;

        $r53 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r98 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r53;

        $r54 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r54.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label23:
        return $r54;

     label24:
        $r15 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $z13 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z13 == 0 goto label26;

        $r49 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $z32 = virtualinvoke $r49.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z32 == 0 goto label26;

        $r50 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r99 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r50;

        $r51 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r51.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label25:
        return $r51;

     label26:
        $r16 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        $z14 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z14 == 0 goto label28;

        $r46 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        $z31 = virtualinvoke $r46.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z31 == 0 goto label28;

        $r47 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r100 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r47;

        $r48 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r48.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label27:
        return $r48;

     label28:
        $r17 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        $z15 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z15 == 0 goto label30;

        $r43 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        $z30 = virtualinvoke $r43.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z30 == 0 goto label30;

        $r44 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r101 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r44;

        $r45 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        specialinvoke $r45.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node)>($r2, r0);

     label29:
        return $r45;

     label30:
        $r18 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDduration>;

        $z16 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        if $z16 != 0 goto label31;

        $r41 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $z28 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z28 != 0 goto label31;

        $r42 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $z29 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z29 == 0 goto label37;

     label31:
        $r102 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDduration>;

        $z45 = virtualinvoke $r102.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValid(java.lang.String)>($r2);

        if $z45 == 0 goto label37;

        $r36 = <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory>;

        $r37 = virtualinvoke $r36.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(java.lang.String)>($r2);

        $r38 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $z24 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z24 == 0 goto label33;

        $z27 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isDayTime(javax.xml.datatype.Duration)>($r37);

        if $z27 != 0 goto label33;

     label32:
        return null;

     label33:
        $r39 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $z25 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z25 == 0 goto label35;

        $z26 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isYearMonth(javax.xml.datatype.Duration)>($r37);

        if $z26 != 0 goto label35;

     label34:
        return null;

     label35:
        $r40 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration;

        specialinvoke $r40.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDuration: void <init>(javax.xml.datatype.Duration,com.hp.hpl.jena.graph.Node)>($r37, r0);

     label36:
        return $r40;

     label37:
        $r19 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $z17 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        if $z17 == 0 goto label39;

        $r32 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $z22 = virtualinvoke $r32.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        if $z22 == 0 goto label39;

        $r33 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r34 = (java.lang.Boolean) $r33;

        $z23 = virtualinvoke $r34.<java.lang.Boolean: boolean booleanValue()>();

        $r35 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueBoolean;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueBoolean: void <init>(boolean,com.hp.hpl.jena.graph.Node)>($z23, r0);

     label38:
        return $r35;

     label39:
        $r20 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.util.RefBoolean enableRomanNumerals>;

        $z18 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.util.RefBoolean: boolean getValue()>();

        if $z18 == 0 goto label44;

        $r21 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getDatatypeURI()>();

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeralDatatype: com.hp.hpl.jena.sparql.util.RomanNumeralDatatype get()>();

        $r23 = virtualinvoke $r22.<com.hp.hpl.jena.sparql.util.RomanNumeralDatatype: java.lang.String getURI()>();

        $z19 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z19 == 0 goto label44;

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeralDatatype: com.hp.hpl.jena.sparql.util.RomanNumeralDatatype get()>();

        $r25 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $r26 = virtualinvoke $r24.<com.hp.hpl.jena.sparql.util.RomanNumeralDatatype: java.lang.Object parse(java.lang.String)>($r25);

        $z20 = $r26 instanceof java.lang.Integer;

        if $z20 == 0 goto label41;

        $r30 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        $r31 = (java.lang.Integer) $r26;

        $l2 = virtualinvoke $r31.<java.lang.Integer: long longValue()>();

        specialinvoke $r30.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(long)>($l2);

     label40:
        return $r30;

     label41:
        $z21 = $r26 instanceof com.hp.hpl.jena.sparql.util.RomanNumeral;

        if $z21 == 0 goto label43;

        $r28 = new com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger;

        $r29 = (com.hp.hpl.jena.sparql.util.RomanNumeral) $r26;

        $i0 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.util.RomanNumeral: int intValue()>();

        $l1 = (long) $i0;

        specialinvoke $r28.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueInteger: void <init>(long)>($l1);

     label42:
        return $r28;

     label43:
        $r27 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r27.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("DatatypeFormatException: Roman numeral is unknown class");

        throw $r27;

     label44:
        goto label46;

     label45:
        $r87 := @caughtexception;

        $r88 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DatatypeFormatException: ");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r88.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String,java.lang.Throwable)>($r92, $r87);

        throw $r88;

     label46:
        return null;

        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label02 to label03 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label04 to label06 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label07 to label08 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label09 to label10 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label11 to label12 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label13 to label15 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label16 to label17 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label18 to label19 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label20 to label21 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label22 to label23 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label24 to label25 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label26 to label27 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label28 to label29 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label30 to label32 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label33 to label34 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label35 to label36 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label37 to label38 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label39 to label40 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label41 to label42 with label45;
        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label43 to label44 with label45;
    }

    public static void raise(com.hp.hpl.jena.sparql.expr.ExprException)
    {
        com.hp.hpl.jena.sparql.expr.ExprException r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprException;

        throw r0;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprVisitor r0;
        com.hp.hpl.jena.sparql.expr.NodeValue r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitor: void visit(com.hp.hpl.jena.sparql.expr.NodeValue)>(r1);

        return;
    }

    private void forceToNode()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r8;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 != null goto label1;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = $r8;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r2 != null goto label2;

        $r3 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r7);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r3);

     label2:
        return;
    }

    public final java.lang.String asUnquotedString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        return $r1;
    }

    public final java.lang.String asQuotedString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asQuotedString(com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r1);

        return $r2;
    }

    public final java.lang.String asQuotedString(com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r4;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r5, $r7;
        java.lang.String $r3, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r4 := @parameter0: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r1 != null goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node> = $r7;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        if $r2 == null goto label2;

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r5, r4);

        return $r6;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String asString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void forceToNode()>();

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node node>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String str(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.expr.NodeValue;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.expr.NodeValue) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public abstract void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor);

    public com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform r0;
        com.hp.hpl.jena.sparql.expr.Expr $r2;

        r1 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransform: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.NodeValue)>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asQuotedString()>();

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r21, $r24;
        javax.xml.datatype.DatatypeConfigurationException $r26;
        com.hp.hpl.jena.graph.Node $r11, $r13, $r23;
        javax.xml.datatype.DatatypeFactory $r25;
        java.math.BigDecimal $r6;
        com.hp.hpl.jena.rdf.model.AnonId $r22;
        java.math.BigInteger $r5;
        com.hp.hpl.jena.sparql.util.Symbol $r2, $r4;
        boolean $z0, $z1;
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r7, $r9, $r15, $r17, $r19;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r27;
        com.hp.hpl.jena.sparql.util.RefBoolean $r3;

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String dtXSDprecisionDecimal> = "http://www.w3.org/2001/XMLSchema#precisionDecimal";

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String dtXSDyearMonthDuration> = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String dtXSDdayTimeDuration> = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String dtXSDdateTimeStamp> = "http://www.w3.org/2001/XMLSchema#dateTimeStamp";

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String xsdNamespace> = "http://www.w3.org/2001/XMLSchema#";

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String strForUnNode> = "node value nothing";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/expr/NodeValue;");

        <com.hp.hpl.jena.sparql.expr.NodeValue: org.slf4j.Logger log> = $r0;

        <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VerboseWarnings> = 1;

        <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VerboseExceptions> = 0;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol extensionValueTypes>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS> = $z0;

        $z1 = <com.hp.hpl.jena.sparql.expr.NodeValue: boolean VALUE_EXTENSIONS>;

        <com.hp.hpl.jena.sparql.expr.NodeValue: boolean sameValueAsString> = $z1;

        $r3 = new com.hp.hpl.jena.sparql.util.RefBoolean;

        $r4 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enableRomanNumerals>;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.RefBoolean: void <init>(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r4, 0);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.util.RefBoolean enableRomanNumerals> = $r3;

        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger IntegerZERO> = $r5;

        $r6 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        <com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal DecimalZERO> = $r6;

        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>("true", $r7);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE> = $r8;

        $r9 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>("false", $r9);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE> = $r10;

        $r11 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeZero>;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r11);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvZERO> = $r12;

        $r13 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeOne>;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r13);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvONE> = $r14;

        $r15 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>("NaN", $r15);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvNaN> = $r16;

        $r17 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>("INF", $r17);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvINF> = $r18;

        $r19 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>("-INF", $r19);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvNegINF> = $r20;

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>("");

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvEmptyString> = $r21;

        $r22 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r22.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>("node value nothing");

        $r23 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r22);

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r23);

        <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvNothing> = $r24;

        <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory> = null;

     label1:
        $r25 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory getDatatypeFactory()>();

        <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory> = $r25;

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r27.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t create a javax.xml DatatypeFactory", $r26);

        throw $r27;

     label4:
        return;

        catch javax.xml.datatype.DatatypeConfigurationException from label1 to label2 with label3;
    }
}
