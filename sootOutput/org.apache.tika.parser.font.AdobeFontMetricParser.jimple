public class org.apache.tika.parser.font.AdobeFontMetricParser extends org.apache.tika.parser.AbstractParser
{
    private static final long serialVersionUID;
    private static final org.apache.tika.mime.MediaType AFM_TYPE;
    private static final java.util.Set SUPPORTED_TYPES;
    static final java.lang.String MET_AVG_CHAR_WIDTH;
    static final java.lang.String MET_DOC_VERSION;
    static final java.lang.String MET_PS_NAME;
    static final java.lang.String MET_FONT_NAME;
    static final java.lang.String MET_FONT_FULL_NAME;
    static final java.lang.String MET_FONT_FAMILY_NAME;
    static final java.lang.String MET_FONT_SUB_FAMILY_NAME;
    static final java.lang.String MET_FONT_VERSION;
    static final java.lang.String MET_FONT_WEIGHT;
    static final java.lang.String MET_FONT_NOTICE;
    static final java.lang.String MET_FONT_UNDERLINE_THICKNESS;

    public void <init>()
    {
        org.apache.tika.parser.font.AdobeFontMetricParser r0;

        r0 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        specialinvoke r0.<org.apache.tika.parser.AbstractParser: void <init>()>();

        return;
    }

    public java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)
    {
        java.util.Set $r0;
        org.apache.tika.parser.font.AdobeFontMetricParser r1;
        org.apache.tika.parser.ParseContext r2;

        r1 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        r2 := @parameter0: org.apache.tika.parser.ParseContext;

        $r0 = <org.apache.tika.parser.font.AdobeFontMetricParser: java.util.Set SUPPORTED_TYPES>;

        return $r0;
    }

    public void parse(java.io.InputStream, org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, org.apache.tika.parser.ParseContext) throws java.io.IOException, org.xml.sax.SAXException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.mime.MediaType $r6;
        org.apache.tika.parser.font.AdobeFontMetricParser r4;
        org.apache.tika.metadata.Metadata r5;
        org.apache.tika.metadata.Property $r8;
        int $i0;
        org.apache.fontbox.afm.AFMParser $r0;
        org.apache.fontbox.afm.FontMetric $r2;
        java.lang.String $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r23;
        org.xml.sax.ContentHandler r20;
        boolean $z0;
        java.util.Iterator $r21;
        org.apache.tika.sax.XHTMLContentHandler $r19;
        java.util.List $r3;
        org.apache.tika.parser.ParseContext r24;
        float $f0, $f1, $f2;
        java.lang.Object $r22;
        java.io.InputStream r1;

        r4 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        r1 := @parameter0: java.io.InputStream;

        r20 := @parameter1: org.xml.sax.ContentHandler;

        r5 := @parameter2: org.apache.tika.metadata.Metadata;

        r24 := @parameter3: org.apache.tika.parser.ParseContext;

        $r0 = new org.apache.fontbox.afm.AFMParser;

        specialinvoke $r0.<org.apache.fontbox.afm.AFMParser: void <init>(java.io.InputStream)>(r1);

        virtualinvoke $r0.<org.apache.fontbox.afm.AFMParser: void parse()>();

        $r2 = virtualinvoke $r0.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric getResult()>();

        $r3 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.util.List getComments()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void extractCreationDate(org.apache.tika.metadata.Metadata,java.util.List)>(r5, $r3);

        $r6 = <org.apache.tika.parser.font.AdobeFontMetricParser: org.apache.tika.mime.MediaType AFM_TYPE>;

        $r7 = virtualinvoke $r6.<org.apache.tika.mime.MediaType: java.lang.String toString()>();

        virtualinvoke r5.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("Content-Type", $r7);

        $r8 = <org.apache.tika.metadata.TikaCoreProperties: org.apache.tika.metadata.Property TITLE>;

        $r9 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getFullName()>();

        virtualinvoke r5.<org.apache.tika.metadata.Metadata: void set(org.apache.tika.metadata.Property,java.lang.String)>($r8, $r9);

        $f0 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: float getAverageCharacterWidth()>();

        $r10 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "AvgCharacterWidth", $r10);

        $f1 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: float getAFMVersion()>();

        $r11 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f1);

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "DocVersion", $r11);

        $r12 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getFontName()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontName", $r12);

        $r13 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getFullName()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontFullName", $r13);

        $r14 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getFamilyName()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontFamilyName", $r14);

        $r15 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getFontVersion()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontVersion", $r15);

        $r16 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getWeight()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontWeight", $r16);

        $r17 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: java.lang.String getNotice()>();

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontNotice", $r17);

        $f2 = virtualinvoke $r2.<org.apache.fontbox.afm.FontMetric: float getUnderlineThickness()>();

        $r18 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f2);

        specialinvoke r4.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByString(org.apache.tika.metadata.Metadata,java.lang.String,java.lang.String)>(r5, "FontUnderlineThickness", $r18);

        $r19 = new org.apache.tika.sax.XHTMLContentHandler;

        specialinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void <init>(org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata)>(r20, r5);

        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void startDocument()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void element(java.lang.String,java.lang.String)>("h1", "Comments");

        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String)>("div", "class", "comments");

        $r21 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r22;

        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void element(java.lang.String,java.lang.String)>("p", r23);

        goto label1;

     label2:
        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void endElement(java.lang.String)>("div");

     label3:
        virtualinvoke $r19.<org.apache.tika.sax.XHTMLContentHandler: void endDocument()>();

        return;
    }

    private void addMetadataByString(org.apache.tika.metadata.Metadata, java.lang.String, java.lang.String)
    {
        org.apache.tika.metadata.Metadata r1;
        org.apache.tika.parser.font.AdobeFontMetricParser r3;
        java.lang.String r0, r2;

        r3 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        r1 := @parameter0: org.apache.tika.metadata.Metadata;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.tika.metadata.Metadata: void add(java.lang.String,java.lang.String)>(r2, r0);

     label1:
        return;
    }

    private void addMetadataByProperty(org.apache.tika.metadata.Metadata, org.apache.tika.metadata.Property, java.lang.String)
    {
        org.apache.tika.metadata.Metadata r1;
        org.apache.tika.parser.font.AdobeFontMetricParser r3;
        org.apache.tika.metadata.Property r2;
        java.lang.String r0;

        r3 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        r1 := @parameter0: org.apache.tika.metadata.Metadata;

        r2 := @parameter1: org.apache.tika.metadata.Property;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.tika.metadata.Metadata: void set(org.apache.tika.metadata.Property,java.lang.String)>(r2, r0);

     label1:
        return;
    }

    private void extractCreationDate(org.apache.tika.metadata.Metadata, java.util.List)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        org.apache.tika.parser.font.AdobeFontMetricParser r2;
        org.apache.tika.metadata.Metadata r3;
        org.apache.tika.metadata.Property $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String r6, r7;
        boolean $z0, $z1;

        r2 := @this: org.apache.tika.parser.font.AdobeFontMetricParser;

        r3 := @parameter0: org.apache.tika.metadata.Metadata;

        r0 := @parameter1: java.util.List;

        r7 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = virtualinvoke r6.<java.lang.String: boolean matches(java.lang.String)>(".*Creation\\sDate.*");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i1 = $i0 + 2;

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i1);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>(r6);

        goto label3;

     label2:
        goto label1;

     label3:
        if r7 == null goto label4;

        $r4 = <org.apache.tika.metadata.Metadata: org.apache.tika.metadata.Property CREATION_DATE>;

        specialinvoke r2.<org.apache.tika.parser.font.AdobeFontMetricParser: void addMetadataByProperty(org.apache.tika.metadata.Metadata,org.apache.tika.metadata.Property,java.lang.String)>(r3, $r4, r7);

     label4:
        return;
    }

    static void <clinit>()
    {
        java.util.Set $r2;
        org.apache.tika.mime.MediaType $r0, $r1;

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_UNDERLINE_THICKNESS> = "FontUnderlineThickness";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_NOTICE> = "FontNotice";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_WEIGHT> = "FontWeight";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_VERSION> = "FontVersion";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_SUB_FAMILY_NAME> = "FontSubFamilyName";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_FAMILY_NAME> = "FontFamilyName";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_FULL_NAME> = "FontFullName";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_FONT_NAME> = "FontName";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_PS_NAME> = "PSName";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_DOC_VERSION> = "DocVersion";

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.lang.String MET_AVG_CHAR_WIDTH> = "AvgCharacterWidth";

        <org.apache.tika.parser.font.AdobeFontMetricParser: long serialVersionUID> = -4820306522217196835L;

        $r0 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-font-adobe-metric");

        <org.apache.tika.parser.font.AdobeFontMetricParser: org.apache.tika.mime.MediaType AFM_TYPE> = $r0;

        $r1 = <org.apache.tika.parser.font.AdobeFontMetricParser: org.apache.tika.mime.MediaType AFM_TYPE>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1);

        <org.apache.tika.parser.font.AdobeFontMetricParser: java.util.Set SUPPORTED_TYPES> = $r2;

        return;
    }
}
