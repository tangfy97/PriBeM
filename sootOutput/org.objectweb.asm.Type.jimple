public class org.objectweb.asm.Type extends java.lang.Object
{
    public static final int VOID;
    public static final int BOOLEAN;
    public static final int CHAR;
    public static final int BYTE;
    public static final int SHORT;
    public static final int INT;
    public static final int FLOAT;
    public static final int LONG;
    public static final int DOUBLE;
    public static final int ARRAY;
    public static final int OBJECT;
    public static final int METHOD;
    public static final org.objectweb.asm.Type VOID_TYPE;
    public static final org.objectweb.asm.Type BOOLEAN_TYPE;
    public static final org.objectweb.asm.Type CHAR_TYPE;
    public static final org.objectweb.asm.Type BYTE_TYPE;
    public static final org.objectweb.asm.Type SHORT_TYPE;
    public static final org.objectweb.asm.Type INT_TYPE;
    public static final org.objectweb.asm.Type FLOAT_TYPE;
    public static final org.objectweb.asm.Type LONG_TYPE;
    public static final org.objectweb.asm.Type DOUBLE_TYPE;
    private final int sort;
    private final char[] buf;
    private final int off;
    private final int len;

    private void <init>(int, char[], int, int)
    {
        int i0, i1, i2;
        char[] r1;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.Type: int sort> = i0;

        r0.<org.objectweb.asm.Type: char[] buf> = r1;

        r0.<org.objectweb.asm.Type: int off> = i1;

        r0.<org.objectweb.asm.Type: int len> = i2;

        return;
    }

    public static org.objectweb.asm.Type getType(java.lang.String)
    {
        char[] $r1;
        java.lang.String r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(char[],int)>($r1, 0);

        return $r2;
    }

    public static org.objectweb.asm.Type getObjectType(java.lang.String)
    {
        byte $b2;
        int $i1, $i3;
        char[] $r1;
        char $c0;
        java.lang.String r0;
        org.objectweb.asm.Type $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = new org.objectweb.asm.Type;

        $c0 = $r1[0];

        $i3 = (int) $c0;

        if $i3 != 91 goto label1;

        $b2 = 9;

        goto label2;

     label1:
        $b2 = 10;

     label2:
        $i1 = lengthof $r1;

        specialinvoke $r3.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>($b2, $r1, 0, $i1);

        return $r3;
    }

    public static org.objectweb.asm.Type getMethodType(java.lang.String)
    {
        char[] $r1;
        java.lang.String r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(char[],int)>($r1, 0);

        return $r2;
    }

    public static transient org.objectweb.asm.Type getMethodType(org.objectweb.asm.Type, org.objectweb.asm.Type[])
    {
        org.objectweb.asm.Type[] r1;
        java.lang.String $r2;
        org.objectweb.asm.Type r0, $r3;

        r0 := @parameter0: org.objectweb.asm.Type;

        r1 := @parameter1: org.objectweb.asm.Type[];

        $r2 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(r0, r1);

        $r3 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r2);

        return $r3;
    }

    public static org.objectweb.asm.Type getType(java.lang.Class)
    {
        org.objectweb.asm.Type $r2, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Class r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label9;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r3 goto label1;

        $r19 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        return $r19;

     label1:
        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r4 goto label2;

        $r18 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        return $r18;

     label2:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r5 goto label3;

        $r17 = <org.objectweb.asm.Type: org.objectweb.asm.Type BOOLEAN_TYPE>;

        return $r17;

     label3:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label4;

        $r16 = <org.objectweb.asm.Type: org.objectweb.asm.Type BYTE_TYPE>;

        return $r16;

     label4:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r7 goto label5;

        $r15 = <org.objectweb.asm.Type: org.objectweb.asm.Type CHAR_TYPE>;

        return $r15;

     label5:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r8 goto label6;

        $r14 = <org.objectweb.asm.Type: org.objectweb.asm.Type SHORT_TYPE>;

        return $r14;

     label6:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r9 goto label7;

        $r13 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        return $r13;

     label7:
        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r10 goto label8;

        $r12 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        return $r12;

     label8:
        $r11 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        return $r11;

     label9:
        $r1 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(r0);

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static org.objectweb.asm.Type getType(java.lang.reflect.Constructor)
    {
        java.lang.String $r1;
        java.lang.reflect.Constructor r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = staticinvoke <org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)>(r0);

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static org.objectweb.asm.Type getType(java.lang.reflect.Method)
    {
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>(r0);

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)
    {
        org.objectweb.asm.Type $r2, $r3, $r4;
        byte $b13;
        int $i0, $i2, $i5, $i6, $i7, $i8, i9, i10, i11, i12, $i14, $i15, $i16, $i17, $i18;
        org.objectweb.asm.Type[] r5;
        java.lang.String r0;
        char $c1, $c3, $c4;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i9 = 1;

        i10 = 0;

     label01:
        $i0 = i9;

        i9 = i9 + 1;

        $c1 = $r1[$i0];

        $i14 = (int) $c1;

        if $i14 != 41 goto label02;

        goto label07;

     label02:
        $i15 = (int) $c1;

        if $i15 != 76 goto label05;

     label03:
        $i2 = i9;

        i9 = i9 + 1;

        $c3 = $r1[$i2];

        $i16 = (int) $c3;

        if $i16 == 59 goto label04;

        goto label03;

     label04:
        i10 = i10 + 1;

        goto label06;

     label05:
        $i17 = (int) $c1;

        if $i17 == 91 goto label06;

        i10 = i10 + 1;

     label06:
        goto label01;

     label07:
        r5 = newarray (org.objectweb.asm.Type)[i10];

        i11 = 1;

        i12 = 0;

     label08:
        $c4 = $r1[i11];

        $i18 = (int) $c4;

        if $i18 == 41 goto label11;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(char[],int)>($r1, i11);

        r5[i12] = $r2;

        $i8 = i11;

        $r3 = r5[i12];

        $i6 = $r3.<org.objectweb.asm.Type: int len>;

        $r4 = r5[i12];

        $i5 = $r4.<org.objectweb.asm.Type: int sort>;

        if $i5 != 10 goto label09;

        $b13 = 2;

        goto label10;

     label09:
        $b13 = 0;

     label10:
        $i7 = $i6 + $b13;

        i11 = $i8 + $i7;

        i12 = i12 + 1;

        goto label08;

     label11:
        return r5;
    }

    public static org.objectweb.asm.Type[] getArgumentTypes(java.lang.reflect.Method)
    {
        java.lang.Class[] $r1;
        org.objectweb.asm.Type $r4;
        int $i0, $i1, i2, $i4;
        org.objectweb.asm.Type[] r2;
        java.lang.Class $r3;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (org.objectweb.asm.Type)[$i0];

        $i1 = lengthof $r1;

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        $r3 = $r1[i2];

        $r4 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>($r3);

        r2[i2] = $r4;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return r2;
    }

    public static org.objectweb.asm.Type getReturnType(java.lang.String)
    {
        int $i0, $i1;
        char[] $r1;
        java.lang.String r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(41);

        $i1 = $i0 + 1;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(char[],int)>($r1, $i1);

        return $r2;
    }

    public static org.objectweb.asm.Type getReturnType(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        java.lang.reflect.Method r0;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>($r1);

        return $r2;
    }

    public static int getArgumentsAndReturnSizes(java.lang.String)
    {
        byte $b9;
        int $i0, $i3, i6, i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24;
        java.lang.String r0;
        char $c1, $c2, $c4, $c5;

        r0 := @parameter0: java.lang.String;

        i6 = 1;

        i7 = 1;

     label01:
        $i0 = i7;

        i7 = i7 + 1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i0);

        $i11 = (int) $c1;

        if $i11 != 41 goto label06;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i8 = i6 << 2;

        $i12 = (int) $c5;

        if $i12 != 86 goto label02;

        $b9 = 0;

        goto label05;

     label02:
        $i13 = (int) $c5;

        if $i13 == 68 goto label03;

        $i14 = (int) $c5;

        if $i14 != 74 goto label04;

     label03:
        $b9 = 2;

        goto label05;

     label04:
        $b9 = 1;

     label05:
        $i10 = $i8 | $b9;

        return $i10;

     label06:
        $i15 = (int) $c1;

        if $i15 != 76 goto label09;

     label07:
        $i3 = i7;

        i7 = i7 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i16 = (int) $c4;

        if $i16 == 59 goto label08;

        goto label07;

     label08:
        i6 = i6 + 1;

        goto label16;

     label09:
        $i17 = (int) $c1;

        if $i17 != 91 goto label13;

     label10:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i18 = (int) $c2;

        if $i18 != 91 goto label11;

        i7 = i7 + 1;

        goto label10;

     label11:
        $i19 = (int) $c2;

        if $i19 == 68 goto label12;

        $i20 = (int) $c2;

        if $i20 != 74 goto label16;

     label12:
        $i22 = (int) -1;

        i6 = i6 + $i22;

        goto label16;

     label13:
        $i23 = (int) $c1;

        if $i23 == 68 goto label14;

        $i24 = (int) $c1;

        if $i24 != 74 goto label15;

     label14:
        i6 = i6 + 2;

        goto label16;

     label15:
        i6 = i6 + 1;

     label16:
        goto label01;
    }

    private static org.objectweb.asm.Type getType(char[], int)
    {
        org.objectweb.asm.Type $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        int i0, $i2, $i4, $i6, $i7, $i9, $i11, $i12, $i13, $i14, i15, i16, $i17, $i18, $i19, $i20, $i21;
        char $c1, $c3, $c5, $c8, $c10;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $c1 = r0[i0];

        $i17 = (int) $c1;

        tableswitch($i17)
        {
            case 66: goto label04;
            case 67: goto label03;
            case 68: goto label09;
            case 69: goto label18;
            case 70: goto label07;
            case 71: goto label18;
            case 72: goto label18;
            case 73: goto label06;
            case 74: goto label08;
            case 75: goto label18;
            case 76: goto label15;
            case 77: goto label18;
            case 78: goto label18;
            case 79: goto label18;
            case 80: goto label18;
            case 81: goto label18;
            case 82: goto label18;
            case 83: goto label05;
            case 84: goto label18;
            case 85: goto label18;
            case 86: goto label01;
            case 87: goto label18;
            case 88: goto label18;
            case 89: goto label18;
            case 90: goto label02;
            case 91: goto label10;
            default: goto label18;
        };

     label01:
        $r3 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        return $r3;

     label02:
        $r2 = <org.objectweb.asm.Type: org.objectweb.asm.Type BOOLEAN_TYPE>;

        return $r2;

     label03:
        $r10 = <org.objectweb.asm.Type: org.objectweb.asm.Type CHAR_TYPE>;

        return $r10;

     label04:
        $r11 = <org.objectweb.asm.Type: org.objectweb.asm.Type BYTE_TYPE>;

        return $r11;

     label05:
        $r4 = <org.objectweb.asm.Type: org.objectweb.asm.Type SHORT_TYPE>;

        return $r4;

     label06:
        $r7 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        return $r7;

     label07:
        $r8 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        return $r8;

     label08:
        $r6 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        return $r6;

     label09:
        $r9 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        return $r9;

     label10:
        i15 = 1;

     label11:
        $i2 = i0 + i15;

        $c3 = r0[$i2];

        $i18 = (int) $c3;

        if $i18 != 91 goto label12;

        i15 = i15 + 1;

        goto label11;

     label12:
        $i4 = i0 + i15;

        $c5 = r0[$i4];

        $i19 = (int) $c5;

        if $i19 != 76 goto label14;

        i15 = i15 + 1;

     label13:
        $i7 = i0 + i15;

        $c8 = r0[$i7];

        $i20 = (int) $c8;

        if $i20 == 59 goto label14;

        i15 = i15 + 1;

        goto label13;

     label14:
        $r13 = new org.objectweb.asm.Type;

        $i6 = i15 + 1;

        specialinvoke $r13.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(9, r0, i0, $i6);

        return $r13;

     label15:
        i16 = 1;

     label16:
        $i9 = i0 + i16;

        $c10 = r0[$i9];

        $i21 = (int) $c10;

        if $i21 == 59 goto label17;

        i16 = i16 + 1;

        goto label16;

     label17:
        $r14 = new org.objectweb.asm.Type;

        $i12 = i0 + 1;

        $i11 = i16 - 1;

        specialinvoke $r14.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(10, r0, $i12, $i11);

        return $r14;

     label18:
        $r15 = new org.objectweb.asm.Type;

        $i13 = lengthof r0;

        $i14 = $i13 - i0;

        specialinvoke $r15.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(11, r0, i0, $i14);

        return $r15;
    }

    public int getSort()
    {
        int $i0;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        $i0 = r0.<org.objectweb.asm.Type: int sort>;

        return $i0;
    }

    public int getDimensions()
    {
        int $i0, $i1, i3, $i4;
        char[] $r1;
        char $c2;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        i3 = 1;

     label1:
        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        $i0 = r0.<org.objectweb.asm.Type: int off>;

        $i1 = $i0 + i3;

        $c2 = $r1[$i1];

        $i4 = (int) $c2;

        if $i4 != 91 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i3;
    }

    public org.objectweb.asm.Type getElementType()
    {
        int $i0, $i1, $i2;
        char[] $r1;
        org.objectweb.asm.Type r0, $r2;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        $i0 = r0.<org.objectweb.asm.Type: int off>;

        $i1 = virtualinvoke r0.<org.objectweb.asm.Type: int getDimensions()>();

        $i2 = $i0 + $i1;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(char[],int)>($r1, $i2);

        return $r2;
    }

    public java.lang.String getClassName()
    {
        org.objectweb.asm.Type r0, $r5;
        java.lang.StringBuffer $r8;
        int $i0, $i1, $i2, i3, $i5;
        char[] $r2;
        java.lang.String $r3, $r6, $r7, $r9;

        r0 := @this: org.objectweb.asm.Type;

        $i0 = r0.<org.objectweb.asm.Type: int sort>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label13;
            default: goto label14;
        };

     label01:
        return "void";

     label02:
        return "boolean";

     label03:
        return "char";

     label04:
        return "byte";

     label05:
        return "short";

     label06:
        return "int";

     label07:
        return "float";

     label08:
        return "long";

     label09:
        return "double";

     label10:
        $r8 = new java.lang.StringBuffer;

        $r5 = virtualinvoke r0.<org.objectweb.asm.Type: org.objectweb.asm.Type getElementType()>();

        $r6 = virtualinvoke $r5.<org.objectweb.asm.Type: java.lang.String getClassName()>();

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        i3 = virtualinvoke r0.<org.objectweb.asm.Type: int getDimensions()>();

     label11:
        if i3 <= 0 goto label12;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label11;

     label12:
        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label13:
        $r9 = new java.lang.String;

        $r2 = r0.<org.objectweb.asm.Type: char[] buf>;

        $i2 = r0.<org.objectweb.asm.Type: int off>;

        $i1 = r0.<org.objectweb.asm.Type: int len>;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>($r2, $i2, $i1);

        $r3 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r3;

     label14:
        return null;
    }

    public java.lang.String getInternalName()
    {
        int $i0, $i1;
        char[] $r2;
        java.lang.String $r0;
        org.objectweb.asm.Type r1;

        r1 := @this: org.objectweb.asm.Type;

        $r0 = new java.lang.String;

        $r2 = r1.<org.objectweb.asm.Type: char[] buf>;

        $i1 = r1.<org.objectweb.asm.Type: int off>;

        $i0 = r1.<org.objectweb.asm.Type: int len>;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i0);

        return $r0;
    }

    public org.objectweb.asm.Type[] getArgumentTypes()
    {
        org.objectweb.asm.Type[] $r2;
        java.lang.String $r1;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r1);

        return $r2;
    }

    public org.objectweb.asm.Type getReturnType()
    {
        java.lang.String $r1;
        org.objectweb.asm.Type r0, $r2;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>($r1);

        return $r2;
    }

    public int getArgumentsAndReturnSizes()
    {
        int $i0;
        java.lang.String $r1;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $i0 = staticinvoke <org.objectweb.asm.Type: int getArgumentsAndReturnSizes(java.lang.String)>($r1);

        return $i0;
    }

    public java.lang.String getDescriptor()
    {
        java.lang.String $r2;
        org.objectweb.asm.Type r1;
        java.lang.StringBuffer $r0;

        r1 := @this: org.objectweb.asm.Type;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        specialinvoke r1.<org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer)>($r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static transient java.lang.String getMethodDescriptor(org.objectweb.asm.Type, org.objectweb.asm.Type[])
    {
        java.lang.StringBuffer $r0;
        int $i0, i1;
        org.objectweb.asm.Type[] r1;
        java.lang.String $r3;
        org.objectweb.asm.Type r2, $r4;

        r2 := @parameter0: org.objectweb.asm.Type;

        r1 := @parameter1: org.objectweb.asm.Type[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r4 = r1[i1];

        specialinvoke $r4.<org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer)>($r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        specialinvoke r2.<org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private void getDescriptor(java.lang.StringBuffer)
    {
        char $c8;
        org.objectweb.asm.Type r0;
        java.lang.StringBuffer r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r1, $r3, $r4;

        r0 := @this: org.objectweb.asm.Type;

        r2 := @parameter0: java.lang.StringBuffer;

        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        if $r1 != null goto label1;

        $i5 = r0.<org.objectweb.asm.Type: int off>;

        $i6 = $i5 & -16777216;

        $i7 = $i6 >>> 24;

        $c8 = (char) $i7;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        goto label3;

     label1:
        $i0 = r0.<org.objectweb.asm.Type: int sort>;

        if $i0 != 10 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r4 = r0.<org.objectweb.asm.Type: char[] buf>;

        $i4 = r0.<org.objectweb.asm.Type: int off>;

        $i3 = r0.<org.objectweb.asm.Type: int len>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r4, $i4, $i3);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        goto label3;

     label2:
        $r3 = r0.<org.objectweb.asm.Type: char[] buf>;

        $i2 = r0.<org.objectweb.asm.Type: int off>;

        $i1 = r0.<org.objectweb.asm.Type: int len>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r3, $i2, $i1);

     label3:
        return;
    }

    public static java.lang.String getInternalName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r2;
    }

    public static java.lang.String getDescriptor(java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String $r2;
        java.lang.StringBuffer $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer,java.lang.Class)>($r0, r1);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)
    {
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor r0;
        java.lang.StringBuffer $r2, $r3;
        int $i0, i1;
        java.lang.Class $r5;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r5 = $r1[i1];

        staticinvoke <org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer,java.lang.Class)>($r2, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")V");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getMethodDescriptor(java.lang.reflect.Method)
    {
        java.lang.Class[] $r1;
        java.lang.StringBuffer $r2;
        int $i0, i1;
        java.lang.Class $r3, $r5;
        java.lang.String $r4;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r5 = $r1[i1];

        staticinvoke <org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer,java.lang.Class)>($r2, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        staticinvoke <org.objectweb.asm.Type: void getDescriptor(java.lang.StringBuffer,java.lang.Class)>($r2, $r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private static void getDescriptor(java.lang.StringBuffer, java.lang.Class)
    {
        java.lang.StringBuffer r1;
        int $i0, i3, $i5;
        java.lang.String $r2;
        boolean $z0, $z1;
        char $c1, c2, $c4;
        java.lang.Class r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Class;

        r11 = r0;

     label01:
        $z0 = virtualinvoke r11.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label11;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if r11 != $r3 goto label02;

        c2 = 73;

        goto label10;

     label02:
        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if r11 != $r4 goto label03;

        c2 = 86;

        goto label10;

     label03:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r11 != $r5 goto label04;

        c2 = 90;

        goto label10;

     label04:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r11 != $r6 goto label05;

        c2 = 66;

        goto label10;

     label05:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        if r11 != $r7 goto label06;

        c2 = 67;

        goto label10;

     label06:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r11 != $r8 goto label07;

        c2 = 83;

        goto label10;

     label07:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r11 != $r9 goto label08;

        c2 = 68;

        goto label10;

     label08:
        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        if r11 != $r10 goto label09;

        c2 = 70;

        goto label10;

     label09:
        c2 = 74;

     label10:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        return;

     label11:
        $z1 = virtualinvoke r11.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        r11 = virtualinvoke r11.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label01;

     label12:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r2 = virtualinvoke r11.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        i3 = 0;

     label13:
        if i3 >= $i0 goto label16;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 != 46 goto label14;

        $c4 = 47;

        goto label15;

     label14:
        $c4 = $c1;

     label15:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i3 = i3 + 1;

        goto label13;

     label16:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return;
    }

    public int getSize()
    {
        int $i0, $i1;
        char[] $r1;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        if $r1 != null goto label1;

        $i0 = r0.<org.objectweb.asm.Type: int off>;

        $i1 = $i0 & 255;

        goto label2;

     label1:
        $i1 = 1;

     label2:
        return $i1;
    }

    public int getOpcode(int)
    {
        org.objectweb.asm.Type r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        char[] $r1, $r2;

        r0 := @this: org.objectweb.asm.Type;

        i0 := @parameter0: int;

        if i0 == 46 goto label1;

        if i0 != 79 goto label4;

     label1:
        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        if $r1 != null goto label2;

        $i2 = r0.<org.objectweb.asm.Type: int off>;

        $i10 = (int) 65280;

        $i3 = $i2 & $i10;

        $i7 = $i3 >> 8;

        goto label3;

     label2:
        $i7 = 4;

     label3:
        $i1 = i0 + $i7;

        return $i1;

     label4:
        $r2 = r0.<org.objectweb.asm.Type: char[] buf>;

        if $r2 != null goto label5;

        $i5 = r0.<org.objectweb.asm.Type: int off>;

        $i6 = $i5 & 16711680;

        $i8 = $i6 >> 16;

        goto label6;

     label5:
        $i8 = 4;

     label6:
        $i4 = i0 + $i8;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.objectweb.asm.Type r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i9, i10, $i11, $i12;
        boolean $z0;
        char $c7, $c8;
        char[] $r3, $r4;
        java.lang.Object r1;

        r0 := @this: org.objectweb.asm.Type;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.objectweb.asm.Type;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.objectweb.asm.Type) r1;

        $i1 = r0.<org.objectweb.asm.Type: int sort>;

        $i0 = r2.<org.objectweb.asm.Type: int sort>;

        if $i1 == $i0 goto label3;

        return 0;

     label3:
        $i2 = r0.<org.objectweb.asm.Type: int sort>;

        if $i2 < 9 goto label7;

        $i4 = r0.<org.objectweb.asm.Type: int len>;

        $i3 = r2.<org.objectweb.asm.Type: int len>;

        if $i4 == $i3 goto label4;

        return 0;

     label4:
        i9 = r0.<org.objectweb.asm.Type: int off>;

        i10 = r2.<org.objectweb.asm.Type: int off>;

        $i5 = r0.<org.objectweb.asm.Type: int len>;

        i6 = i9 + $i5;

     label5:
        if i9 >= i6 goto label7;

        $r3 = r0.<org.objectweb.asm.Type: char[] buf>;

        $c8 = $r3[i9];

        $r4 = r2.<org.objectweb.asm.Type: char[] buf>;

        $c7 = $r4[i10];

        $i11 = (int) $c8;

        $i12 = (int) $c7;

        if $i11 == $i12 goto label6;

        return 0;

     label6:
        i9 = i9 + 1;

        i10 = i10 + 1;

        goto label5;

     label7:
        return 1;
    }

    public int hashCode()
    {
        char $c4;
        org.objectweb.asm.Type r0;
        int $i0, $i1, $i2, i3, $i5, i6, i7, $i8;
        char[] $r1;

        r0 := @this: org.objectweb.asm.Type;

        $i0 = r0.<org.objectweb.asm.Type: int sort>;

        i6 = 13 * $i0;

        $i1 = r0.<org.objectweb.asm.Type: int sort>;

        if $i1 < 9 goto label2;

        i7 = r0.<org.objectweb.asm.Type: int off>;

        $i2 = r0.<org.objectweb.asm.Type: int len>;

        i3 = i7 + $i2;

     label1:
        if i7 >= i3 goto label2;

        $r1 = r0.<org.objectweb.asm.Type: char[] buf>;

        $c4 = $r1[i7];

        $i8 = (int) $c4;

        $i5 = i6 + $i8;

        i6 = 17 * $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.objectweb.asm.Type r0;

        r0 := @this: org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.objectweb.asm.Type $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        <org.objectweb.asm.Type: int METHOD> = 11;

        <org.objectweb.asm.Type: int OBJECT> = 10;

        <org.objectweb.asm.Type: int ARRAY> = 9;

        <org.objectweb.asm.Type: int DOUBLE> = 8;

        <org.objectweb.asm.Type: int LONG> = 7;

        <org.objectweb.asm.Type: int FLOAT> = 6;

        <org.objectweb.asm.Type: int INT> = 5;

        <org.objectweb.asm.Type: int SHORT> = 4;

        <org.objectweb.asm.Type: int BYTE> = 3;

        <org.objectweb.asm.Type: int CHAR> = 2;

        <org.objectweb.asm.Type: int BOOLEAN> = 1;

        <org.objectweb.asm.Type: int VOID> = 0;

        $r0 = new org.objectweb.asm.Type;

        specialinvoke $r0.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(0, null, 1443168256, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE> = $r0;

        $r1 = new org.objectweb.asm.Type;

        specialinvoke $r1.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(1, null, 1509950721, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type BOOLEAN_TYPE> = $r1;

        $r2 = new org.objectweb.asm.Type;

        specialinvoke $r2.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(2, null, 1124075009, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type CHAR_TYPE> = $r2;

        $r3 = new org.objectweb.asm.Type;

        specialinvoke $r3.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(3, null, 1107297537, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type BYTE_TYPE> = $r3;

        $r4 = new org.objectweb.asm.Type;

        specialinvoke $r4.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(4, null, 1392510721, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type SHORT_TYPE> = $r4;

        $r5 = new org.objectweb.asm.Type;

        specialinvoke $r5.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(5, null, 1224736769, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE> = $r5;

        $r6 = new org.objectweb.asm.Type;

        specialinvoke $r6.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(6, null, 1174536705, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE> = $r6;

        $r7 = new org.objectweb.asm.Type;

        specialinvoke $r7.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(7, null, 1241579778, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE> = $r7;

        $r8 = new org.objectweb.asm.Type;

        specialinvoke $r8.<org.objectweb.asm.Type: void <init>(int,char[],int,int)>(8, null, 1141048066, 1);

        <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE> = $r8;

        return;
    }
}
