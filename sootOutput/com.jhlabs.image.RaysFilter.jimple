public class com.jhlabs.image.RaysFilter extends com.jhlabs.image.MotionBlurOp
{
    private float opacity;
    private float threshold;
    private float strength;
    private boolean raysOnly;
    private com.jhlabs.image.Colormap colormap;

    public void <init>()
    {
        com.jhlabs.image.RaysFilter r0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        specialinvoke r0.<com.jhlabs.image.MotionBlurOp: void <init>()>();

        r0.<com.jhlabs.image.RaysFilter: float opacity> = 1.0F;

        r0.<com.jhlabs.image.RaysFilter: float threshold> = 0.0F;

        r0.<com.jhlabs.image.RaysFilter: float strength> = 0.5F;

        r0.<com.jhlabs.image.RaysFilter: boolean raysOnly> = 0;

        return;
    }

    public void setOpacity(float)
    {
        com.jhlabs.image.RaysFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RaysFilter: float opacity> = f0;

        return;
    }

    public float getOpacity()
    {
        com.jhlabs.image.RaysFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        $f0 = r0.<com.jhlabs.image.RaysFilter: float opacity>;

        return $f0;
    }

    public void setThreshold(float)
    {
        com.jhlabs.image.RaysFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RaysFilter: float threshold> = f0;

        return;
    }

    public float getThreshold()
    {
        com.jhlabs.image.RaysFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        $f0 = r0.<com.jhlabs.image.RaysFilter: float threshold>;

        return $f0;
    }

    public void setStrength(float)
    {
        com.jhlabs.image.RaysFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RaysFilter: float strength> = f0;

        return;
    }

    public float getStrength()
    {
        com.jhlabs.image.RaysFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        $f0 = r0.<com.jhlabs.image.RaysFilter: float strength>;

        return $f0;
    }

    public void setRaysOnly(boolean)
    {
        com.jhlabs.image.RaysFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.RaysFilter: boolean raysOnly> = z0;

        return;
    }

    public boolean getRaysOnly()
    {
        com.jhlabs.image.RaysFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        $z0 = r0.<com.jhlabs.image.RaysFilter: boolean raysOnly>;

        return $z0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.RaysFilter r0;
        com.jhlabs.image.Colormap r1;

        r0 := @this: com.jhlabs.image.RaysFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.RaysFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.RaysFilter r0;
        com.jhlabs.image.Colormap $r1;

        r0 := @this: com.jhlabs.image.RaysFilter;

        $r1 = r0.<com.jhlabs.image.RaysFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.RaysFilter r4;
        java.awt.AlphaComposite $r8;
        com.jhlabs.image.Colormap $r9, $r10;
        int[] r1, r2;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r3, $r5, r11;
        java.awt.Composite $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        java.awt.Graphics2D $r6;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41;

        r4 := @this: com.jhlabs.image.RaysFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r11 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        r1 = newarray (int)[$i0];

        r2 = newarray (int)[$i0];

        $r3 = new java.awt.image.BufferedImage;

        specialinvoke $r3.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $f0 = r4.<com.jhlabs.image.RaysFilter: float threshold>;

        $f1 = $f0 * 3.0F;

        $f2 = $f1 * 255.0F;

        i2 = (int) $f2;

        i24 = 0;

     label01:
        if i24 >= $i1 goto label06;

        virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i24, $i0, 1, r1);

        i25 = 0;

     label02:
        if i25 >= $i0 goto label05;

        i26 = r1[i25];

        i27 = i26 & -16777216;

        $i16 = i26 >> 16;

        i28 = $i16 & 255;

        $i17 = i26 >> 8;

        i29 = $i17 & 255;

        i30 = i26 & 255;

        $i18 = i28 + i29;

        i31 = $i18 + i30;

        if i31 >= i2 goto label03;

        r1[i25] = -16777216;

        goto label04;

     label03:
        i32 = i31 / 3;

        $i19 = i32 << 16;

        $i21 = i27 | $i19;

        $i20 = i32 << 8;

        $i22 = $i21 | $i20;

        $i23 = $i22 | i32;

        r1[i25] = $i23;

     label04:
        i25 = i25 + 1;

        goto label02;

     label05:
        virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r3, 0, i24, $i0, 1, r1);

        i24 = i24 + 1;

        goto label01;

     label06:
        $r5 = specialinvoke r4.<com.jhlabs.image.MotionBlurOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r3, null);

        i33 = 0;

     label07:
        if i33 >= $i1 goto label12;

        virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r5, 0, i33, $i0, 1, r1);

        virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i33, $i0, 1, r2);

        i34 = 0;

     label08:
        if i34 >= $i0 goto label11;

        i35 = r1[i34];

        i36 = i35 & -16777216;

        $i3 = i35 >> 16;

        i37 = $i3 & 255;

        $i4 = i35 >> 8;

        i38 = $i4 & 255;

        i39 = i35 & 255;

        $r9 = r4.<com.jhlabs.image.RaysFilter: com.jhlabs.image.Colormap colormap>;

        if $r9 == null goto label09;

        $i15 = i37 + i38;

        i40 = $i15 + i39;

        $r10 = r4.<com.jhlabs.image.RaysFilter: com.jhlabs.image.Colormap colormap>;

        $f14 = (float) i40;

        $f13 = r4.<com.jhlabs.image.RaysFilter: float strength>;

        $f15 = $f14 * $f13;

        $f16 = $f15 * 0.33333334F;

        i41 = interfaceinvoke $r10.<com.jhlabs.image.Colormap: int getColor(float)>($f16);

        goto label10;

     label09:
        $f5 = (float) i37;

        $f4 = r4.<com.jhlabs.image.RaysFilter: float strength>;

        $f6 = $f5 * $f4;

        $i5 = (int) $f6;

        $i6 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i5);

        $f8 = (float) i38;

        $f7 = r4.<com.jhlabs.image.RaysFilter: float strength>;

        $f9 = $f8 * $f7;

        $i7 = (int) $f9;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $f11 = (float) i39;

        $f10 = r4.<com.jhlabs.image.RaysFilter: float strength>;

        $f12 = $f11 * $f10;

        $i9 = (int) $f12;

        $i10 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i9);

        $i11 = $i6 << 16;

        $i13 = i36 | $i11;

        $i12 = $i8 << 8;

        $i14 = $i13 | $i12;

        i41 = $i14 | $i10;

     label10:
        r1[i34] = i41;

        i34 = i34 + 1;

        goto label08;

     label11:
        virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r5, 0, i33, $i0, 1, r1);

        i33 = i33 + 1;

        goto label07;

     label12:
        if r11 != null goto label13;

        r11 = virtualinvoke r4.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label13:
        $r6 = virtualinvoke r11.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $z0 = r4.<com.jhlabs.image.RaysFilter: boolean raysOnly>;

        if $z0 != 0 goto label14;

        $r8 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r8);

        virtualinvoke $r6.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, null);

     label14:
        $f3 = r4.<com.jhlabs.image.RaysFilter: float opacity>;

        $r7 = staticinvoke <com.jhlabs.composite.MiscComposite: java.awt.Composite getInstance(int,float)>(1, $f3);

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r7);

        virtualinvoke $r6.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r5, null);

        virtualinvoke $r6.<java.awt.Graphics: void dispose()>();

        return r11;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.RaysFilter r0;

        r0 := @this: com.jhlabs.image.RaysFilter;

        return "Stylize/Rays...";
    }
}
