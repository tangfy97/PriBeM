public class org.apache.jena.iri.impl.ComponentPatternParser extends java.lang.Object implements org.apache.jena.iri.ViolationCodes
{
    static java.lang.String separators;
    static final int OPEN_PAREN;
    static final int OPEN_NON_CAPTURING_PAREN;
    static final int CLOSE_PAREN;
    static final int OPEN_SQ;
    static final int CLOSE_SQ;
    static final int OPEN_VAR;
    static final int CLOSE_BRACE;
    static final int LOWER_CASE_RANGE;
    static final int OTHER;
    static final java.util.regex.Pattern keyword;
    final java.lang.String[] split;
    final int[] classify;
    int field;
    int groupCount;
    final java.lang.StringBuffer rslt;
    int shouldLowerCase;
    int mustLowerCase;
    int hostNames;
    final java.util.regex.Pattern pattern;
    static final java.lang.String[] emptyStringArray;

    private static java.lang.String[] mySplit(java.lang.String)
    {
        java.lang.Object[] $r5;
        java.lang.String[] $r4, $r6;
        java.util.ArrayList $r3;
        java.util.regex.Matcher $r2;
        int $i0, $i1, $i2, i3, $i4, $i5;
        java.lang.String r0, $r7, $r8, $r9;
        boolean $z0;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern keyword>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        if $i1 > i3 goto label2;

        if i3 != 0 goto label3;

     label2:
        $i2 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label3:
        $i4 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $i5 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        i3 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        goto label1;

     label4:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label5;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        $r4 = <org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] emptyStringArray>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public void <init>(java.lang.String)
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.String[] $r3, $r4, $r6, $r7, $r11;
        int[] $r5, $r13;
        java.lang.StringBuffer $r1, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r2, $r9, $r12;
        java.util.regex.Pattern $r10;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt> = $r1;

        $r3 = staticinvoke <org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] mySplit(java.lang.String)>(r2);

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split> = $r3;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = 0;

        $r4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i0 = lengthof $r4;

        $r5 = newarray (int)[$i0];

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify> = $r5;

        i5 = 0;

     label1:
        $r6 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i1 = lengthof $r6;

        if i5 >= $i1 goto label2;

        $r13 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $r11 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $r12 = $r11[i5];

        $i4 = specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: int classify(java.lang.String)>($r12);

        $r13[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i3 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r7 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i2 = lengthof $r7;

        if $i3 >= $i2 goto label3;

        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void next()>();

        goto label2;

     label3:
        $r8 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r9);

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern pattern> = $r10;

        return;
    }

    public java.util.regex.Pattern get()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.util.regex.Pattern $r1;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern pattern>;

        return $r1;
    }

    org.apache.jena.iri.impl.GroupAction[] actions()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        org.apache.jena.iri.impl.GroupAction $r4;
        java.util.regex.Matcher $r2;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.jena.iri.impl.HostAction $r5;
        org.apache.jena.iri.impl.GroupAction[] r3;
        org.apache.jena.iri.impl.ErrorAction $r6, $r7;
        java.util.regex.Pattern $r1;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern pattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("");

        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int groupCount()>();

        i1 = $i0 + 1;

        r3 = newarray (org.apache.jena.iri.impl.GroupAction)[i1];

        i9 = 1;

     label1:
        if i9 >= i1 goto label6;

        i2 = 1 << i9;

        $i3 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int mustLowerCase>;

        $i4 = $i3 & i2;

        if $i4 == 0 goto label2;

        $r7 = new org.apache.jena.iri.impl.ErrorAction;

        specialinvoke $r7.<org.apache.jena.iri.impl.ErrorAction: void <init>(int)>(59);

        r3[i9] = $r7;

        goto label5;

     label2:
        $i5 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int shouldLowerCase>;

        $i6 = $i5 & i2;

        if $i6 == 0 goto label3;

        $r6 = new org.apache.jena.iri.impl.ErrorAction;

        specialinvoke $r6.<org.apache.jena.iri.impl.ErrorAction: void <init>(int)>(60);

        r3[i9] = $r6;

        goto label5;

     label3:
        $i7 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int hostNames>;

        $i8 = $i7 & i2;

        if $i8 == 0 goto label4;

        $r5 = new org.apache.jena.iri.impl.HostAction;

        specialinvoke $r5.<org.apache.jena.iri.impl.HostAction: void <init>(int)>(i9);

        r3[i9] = $r5;

        goto label5;

     label4:
        $r4 = <org.apache.jena.iri.impl.GroupAction: org.apache.jena.iri.impl.GroupAction NoAction>;

        r3[i9] = $r4;

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        return r3;
    }

    private int classify(java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        org.apache.jena.iri.impl.ComponentPatternParser r4;
        java.util.regex.Matcher $r2;
        int $i0, $i1, i2, $i4, $i6;
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r4 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern keyword>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        i2 = 1;

     label2:
        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int groupCount()>();

        if i2 > $i0 goto label4;

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int start(int)>(i2);

        $i6 = (int) -1;

        if $i1 == $i6 goto label3;

        return i2;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IRI code internal error: no group matched.");

        throw $r5;
    }

    private void untilCloseSq()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.String[] $r2;
        java.lang.IllegalArgumentException $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

     label1:
        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i1 = $i0 - 1;

        $i2 = $r1[$i1];

        if $i2 == 5 goto label3;

        $i4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i3 = lengthof $r2;

        if $i4 < $i3 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal IRI code error. Did not find CLOSE_SQ in until().");

        throw $r3;

     label2:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void add()>();

        goto label1;

     label3:
        return;
    }

    private void next()
    {
        java.lang.IllegalStateException $r17;
        int[] $r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r10, $r11, $r14;
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.String[] $r3, $r5, $r7, $r12;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String $r4, $r6, $r8, $r13, $r15;
        java.lang.IllegalArgumentException $r9, $r16;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case -1: goto label09;
            case 0: goto label10;
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label02;
            case 5: goto label01;
            case 6: goto label03;
            case 7: goto label09;
            case 8: goto label09;
            default: goto label10;
        };

     label01:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Found unexpected ], either pattern syntax error, or limitation of IRI code.");

        throw $r16;

     label02:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void add()>();

        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void untilCloseSq()>();

        goto label11;

     label03:
        $i2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i3 = $i2 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i3;

        $r2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $i4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount> = $i5;

        $r3 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i6 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r4 = $r3[$i6];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("host");

        if $z0 == 0 goto label04;

        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void addHost()>();

        goto label11;

     label04:
        $r5 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i7 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r6 = $r5[$i7];

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("shouldLowerCase");

        if $z1 == 0 goto label05;

        $i16 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int shouldLowerCase>;

        $i14 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount>;

        $i15 = 1 << $i14;

        $i17 = $i16 | $i15;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int shouldLowerCase> = $i17;

        goto label07;

     label05:
        $r7 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i8 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r8 = $r7[$i8];

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("mustLowerCase");

        if $z2 == 0 goto label06;

        $i12 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int mustLowerCase>;

        $i10 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount>;

        $i11 = 1 << $i10;

        $i13 = $i12 | $i11;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int mustLowerCase> = $i13;

        goto label07;

     label06:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No macro: ");

        $r12 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i9 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r13 = $r12[$i9];

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label07:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void addLowerCase()>();

        goto label11;

     label08:
        $i18 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount>;

        $i19 = $i18 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount> = $i19;

     label09:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void add()>();

        return;

     label10:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IRI code internal error.");

        throw $r17;

     label11:
        return;
    }

    private void addLowerCase()
    {
        java.lang.StringBuilder $r27, $r28, $r30;
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.StringBuffer $r2, $r19, $r20, $r21, $r32;
        java.lang.String $r8, $r10, $r12, $r14, $r26, $r29;
        java.lang.IllegalStateException $r34, $r35;
        int[] $r1, $r4, $r6, $r18;
        java.lang.String[] $r5, $r7, $r9, $r11, $r13, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i33, $i34, $i35;
        char $c15, $c18, $c20, $c23;
        java.lang.IllegalArgumentException $r31, $r33, $r36;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        i31 = 0;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i1 = $i0 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i1;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i3 = $r1[$i2];

        if $i3 == 1 goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r25 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i29 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i30 = $i29 - 1;

        $r26 = $r25[$i30];

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" macro syntax error");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r31;

     label01:
        $i4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i5 = $i4 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i5;

        $r2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?:(?:");

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

     label02:
        $r4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i6 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i7 = $i6 - 1;

        $i8 = $r4[$i7];

        if $i8 != 3 goto label03;

        if i31 <= 0 goto label14;

     label03:
        $i10 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r5 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i9 = lengthof $r5;

        if $i10 < $i9 goto label04;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal IRI code error. Did not find CLOSE_PAREN in addLowerCase().");

        throw $r33;

     label04:
        $r6 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i11 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i12 = $r6[$i11];

        tableswitch($i12)
        {
            case -1: goto label11;
            case 0: goto label12;
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label12;
            case 7: goto label10;
            case 8: goto label07;
            default: goto label12;
        };

     label05:
        i31 = i31 + 1;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        goto label13;

     label06:
        $i33 = (int) -1;

        i31 = i31 + $i33;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        goto label13;

     label07:
        if i31 != 0 goto label08;

        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void makeCaseInsensitive(java.lang.StringBuffer)>($r32);

        goto label13;

     label08:
        $r7 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i13 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r8 = $r7[$i13];

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r9 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i14 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r10 = $r9[$i14];

        $c15 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(0);

        $i34 = (int) $c15;

        $i16 = $i34 - 97;

        $i17 = $i16 + 65;

        $c18 = (char) $i17;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c18);

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r11 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i19 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r12 = $r11[$i19];

        $c20 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(2);

        $i35 = (int) $c20;

        $i21 = $i35 - 97;

        $i22 = $i21 + 65;

        $c23 = (char) $i22;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c23);

        goto label13;

     label09:
        if i31 != 0 goto label10;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IRI code internal error: capturing group not supported inside lowercase.");

        throw $r34;

     label10:
        $r13 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i24 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r14 = $r13[$i24];

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        goto label13;

     label11:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void makeCaseInsensitive(java.lang.StringBuffer)>($r32);

        goto label13;

     label12:
        $r35 = new java.lang.IllegalStateException;

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IRI code internal error.");

        throw $r35;

     label13:
        specialinvoke r0.<org.apache.jena.iri.impl.ComponentPatternParser: void add()>();

        goto label02;

     label14:
        $r18 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i25 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i26 = $r18[$i25];

        if $i26 == 7 goto label15;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("case macro syntax error");

        throw $r36;

     label15:
        $i27 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i28 = $i27 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i28;

        $r19 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|(");

        $r20 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r32);

        $r21 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        return;
    }

    private void makeCaseInsensitive(java.lang.StringBuffer)
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.String[] $r1, $r3;
        java.lang.StringBuffer r5;
        int $i0, $i1, $i2, $i4, $i5, i7, $i8, $i9, $i10;
        java.lang.String $r2, $r4;
        char $c3, $c6;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        r5 := @parameter0: java.lang.StringBuffer;

        i7 = 0;

     label1:
        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r2 = $r1[$i0];

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i7 >= $i1 goto label3;

        $r3 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r4 = $r3[$i2];

        $c3 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c3;

        if $i8 < 97 goto label2;

        $i9 = (int) $c3;

        if $i9 > 122 goto label2;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $i10 = (int) $c3;

        $i4 = $i10 - 97;

        $i5 = $i4 + 65;

        $c6 = (char) $i5;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    private void addHost()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.IllegalArgumentException $r3;
        int[] $r1;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $i2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int hostNames>;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int groupCount>;

        $i1 = 1 << $i0;

        $i3 = $i2 | $i1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int hostNames> = $i3;

        $i4 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i5 = $i4 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i5;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int[] classify>;

        $i6 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i7 = $r1[$i6];

        if $i7 == 7 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host macro syntax error");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[^\\[\\]:/?#@!$&\'()*+,;=]*|\\[[^\\[\\]/?#@!$&\'()*+,;=]*\\])");

        $i8 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i9 = $i8 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i9;

        return;
    }

    private void add()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $r3 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.StringBuffer rslt>;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] split>;

        $i0 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $r2 = $r1[$i0];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field>;

        $i2 = $i1 + 1;

        r0.<org.apache.jena.iri.impl.ComponentPatternParser: int field> = $i2;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.jena.iri.impl.ComponentPatternParser r0;
        java.util.regex.Pattern $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.jena.iri.impl.ComponentPatternParser;

        $r1 = r0.<org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern pattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.lang.String pattern()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;

        <org.apache.jena.iri.impl.ComponentPatternParser: int OTHER> = -1;

        <org.apache.jena.iri.impl.ComponentPatternParser: int LOWER_CASE_RANGE> = 8;

        <org.apache.jena.iri.impl.ComponentPatternParser: int CLOSE_BRACE> = 7;

        <org.apache.jena.iri.impl.ComponentPatternParser: int OPEN_VAR> = 6;

        <org.apache.jena.iri.impl.ComponentPatternParser: int CLOSE_SQ> = 5;

        <org.apache.jena.iri.impl.ComponentPatternParser: int OPEN_SQ> = 4;

        <org.apache.jena.iri.impl.ComponentPatternParser: int CLOSE_PAREN> = 3;

        <org.apache.jena.iri.impl.ComponentPatternParser: int OPEN_NON_CAPTURING_PAREN> = 2;

        <org.apache.jena.iri.impl.ComponentPatternParser: int OPEN_PAREN> = 1;

        <org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String separators> = "([(](?![?]))|([(][?])|([)])|(\\[)|(\\])|([@][{])|([}]|[a-z]-[a-z])";

        $r0 = <org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String separators>;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r0);

        <org.apache.jena.iri.impl.ComponentPatternParser: java.util.regex.Pattern keyword> = $r1;

        $r2 = newarray (java.lang.String)[0];

        <org.apache.jena.iri.impl.ComponentPatternParser: java.lang.String[] emptyStringArray> = $r2;

        return;
    }
}
