public abstract class org.waveprotocol.wave.common.logging.AbstractLogger extends java.lang.Object implements org.waveprotocol.wave.common.logging.LoggerBundle
{
    private final org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger errorLogger;
    private final org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger fatalLogger;
    private final org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger traceLogger;
    protected final org.waveprotocol.wave.common.logging.LogSink sink;

    public void <init>(org.waveprotocol.wave.common.logging.LogSink)
    {
        org.waveprotocol.wave.common.logging.LogSink r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r3, $r5, $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger $r2, $r4, $r6;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LogSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.LogSink sink> = r1;

        $r2 = new org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        $r3 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR>;

        specialinvoke $r2.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: void <init>(org.waveprotocol.wave.common.logging.AbstractLogger,org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r0, $r3);

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger errorLogger> = $r2;

        $r4 = new org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        $r5 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL>;

        specialinvoke $r4.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: void <init>(org.waveprotocol.wave.common.logging.AbstractLogger,org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r0, $r5);

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger fatalLogger> = $r4;

        $r6 = new org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        $r7 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        specialinvoke $r6.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: void <init>(org.waveprotocol.wave.common.logging.AbstractLogger,org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r0, $r7);

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger traceLogger> = $r6;

        return;
    }

    public final transient void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r2 := @parameter1: java.lang.Object[];

        virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>(r1, null, r2);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger: boolean shouldLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>(r1, r2);

     label1:
        return;
    }

    public final org.waveprotocol.wave.common.logging.Logger trace()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger traceLogger>;

        return $r1;
    }

    public final org.waveprotocol.wave.common.logging.Logger error()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger errorLogger>;

        return $r1;
    }

    public final org.waveprotocol.wave.common.logging.Logger fatal()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger fatalLogger>;

        return $r1;
    }

    protected void logPlainTextInner(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.String)
    {
        java.lang.Object[] $r2;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;
        java.lang.String r3, $r4;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r3 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = "<pre style=\'display:inline\'>";

        $r4 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String xmlEscape(java.lang.String)>(r3);

        $r2[1] = $r4;

        $r2[2] = "</pre>";

        virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>(r1, $r2);

        return;
    }

    protected final transient void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.waveprotocol.wave.common.logging.LogSink $r3;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.LogSink sink>;

        virtualinvoke $r3.<org.waveprotocol.wave.common.logging.LogSink: void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>(r1, r2);

        return;
    }

    protected abstract boolean shouldLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level);

    protected transient void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.Throwable, java.lang.Object[])
    {
        java.lang.Throwable r2;
        java.lang.Object[] r3;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;
        org.waveprotocol.wave.common.logging.AbstractLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r2 := @parameter1: java.lang.Throwable;

        r3 := @parameter2: java.lang.Object[];

        return;
    }
}
