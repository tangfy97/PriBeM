final class kodkod.engine.bool.CBCFactory$2 extends kodkod.engine.bool.CBCFactory$Assembler
{
    final kodkod.engine.bool.CBCFactory this$0;

    void <init>(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory r1;
        kodkod.engine.bool.CBCFactory$2 r0;

        r0 := @this: kodkod.engine.bool.CBCFactory$2;

        r1 := @parameter0: kodkod.engine.bool.CBCFactory;

        r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0> = r1;

        specialinvoke r0.<kodkod.engine.bool.CBCFactory$Assembler: void <init>(kodkod.engine.bool.CBCFactory$Assembler)>(null);

        return;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.BooleanValue $r34;
        boolean $z0, $z1, $z2;
        java.util.Set $r2, $r4, $r8, $r13, $r16, $r21;
        kodkod.engine.bool.CBCFactory$Assembler $r25, $r27;
        kodkod.engine.bool.Operator$Nary r22, $r23, $r29, $r32;
        kodkod.engine.bool.BooleanFormula r5, r10, r19, $r33;
        java.lang.AssertionError $r30;
        kodkod.engine.bool.Operator $r6, $r11, $r28, $r31;
        kodkod.engine.bool.CBCFactory$2 r0;
        int $i0, $i1, $i2, $i3;
        java.util.Iterator $r17;
        kodkod.engine.bool.CBCFactory $r1, $r3, $r7, $r9, $r12, $r14, $r15, $r20, $r24, $r26;
        java.lang.Object $r18;

        r0 := @this: kodkod.engine.bool.CBCFactory$2;

        r22 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r5 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r10 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r28 = virtualinvoke r5.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r29 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        if $r28 != $r29 goto label1;

        $r31 = virtualinvoke r10.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r32 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        if $r31 == $r32 goto label2;

     label1:
        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label2:
        $r1 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r2 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$2(kodkod.engine.bool.CBCFactory)>($r1);

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r4 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$3(kodkod.engine.bool.CBCFactory)>($r3);

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r6 = virtualinvoke r5.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r7 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r8 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$2(kodkod.engine.bool.CBCFactory)>($r7);

        $r9 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $i0 = staticinvoke <kodkod.engine.bool.CBCFactory: int access$0(kodkod.engine.bool.CBCFactory)>($r9);

        virtualinvoke r5.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>($r6, $r8, $i0);

        $r11 = virtualinvoke r10.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r12 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r13 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$3(kodkod.engine.bool.CBCFactory)>($r12);

        $r14 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $i1 = staticinvoke <kodkod.engine.bool.CBCFactory: int access$0(kodkod.engine.bool.CBCFactory)>($r14);

        virtualinvoke r10.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>($r11, $r13, $i1);

        $r15 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r16 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$3(kodkod.engine.bool.CBCFactory)>($r15);

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label3:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (kodkod.engine.bool.BooleanFormula) $r18;

        $r20 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r21 = staticinvoke <kodkod.engine.bool.CBCFactory: java.util.Set access$2(kodkod.engine.bool.CBCFactory)>($r20);

        $z2 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>(r19);

        if $z2 == 0 goto label6;

        $r23 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        if r22 != $r23 goto label4;

        $r33 = r5;

        goto label5;

     label4:
        $r33 = r10;

     label5:
        return $r33;

     label6:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $i2 = virtualinvoke r5.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i3 = virtualinvoke r10.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i2 >= $i3 goto label7;

        $r26 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r27 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler access$4(kodkod.engine.bool.CBCFactory)>($r26);

        $r34 = virtualinvoke $r27.<kodkod.engine.bool.CBCFactory$Assembler: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r22, r10, r5);

        goto label8;

     label7:
        $r24 = r0.<kodkod.engine.bool.CBCFactory$2: kodkod.engine.bool.CBCFactory this$0>;

        $r25 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler access$4(kodkod.engine.bool.CBCFactory)>($r24);

        $r34 = virtualinvoke $r25.<kodkod.engine.bool.CBCFactory$Assembler: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r22, r5, r10);

     label8:
        return $r34;
    }
}
