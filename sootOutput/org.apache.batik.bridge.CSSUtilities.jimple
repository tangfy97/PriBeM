public abstract class org.apache.batik.bridge.CSSUtilities extends java.lang.Object implements org.apache.batik.util.CSSConstants, org.apache.batik.bridge.ErrorConstants, org.apache.batik.util.XMLConstants
{
    public static final java.awt.Composite TRANSPARENT;

    protected void <init>()
    {
        org.apache.batik.bridge.CSSUtilities r0;

        r0 := @this: org.apache.batik.bridge.CSSUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.batik.css.engine.CSSEngine getCSSEngine(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        org.w3c.dom.Document $r1;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.dom.svg.SVGOMDocument $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        return $r3;
    }

    public static org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element, int)
    {
        org.w3c.dom.Element r0;
        int i0;
        org.apache.batik.css.engine.CSSStylableElement $r2;
        org.apache.batik.css.engine.value.Value $r3;
        org.apache.batik.css.engine.CSSEngine $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.CSSEngine getCSSEngine(org.w3c.dom.Element)>(r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = (org.apache.batik.css.engine.CSSStylableElement) r0;

        $r3 = virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.Value getComputedStyle(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,int)>($r2, null, i0);

        return $r3;
    }

    public static int convertPointerEvents(org.w3c.dom.Element)
    {
        java.lang.IllegalStateException $r14, $r16;
        java.lang.StringBuffer $r5, $r6, $r10, $r11, $r13, $r15;
        int $i1, $i5, $i6;
        java.lang.String $r2, $r7, $r12;
        char $c0, $c2, $c3, $c4;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 40);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c0;

        lookupswitch($i5)
        {
            case 97: goto label10;
            case 102: goto label08;
            case 110: goto label11;
            case 112: goto label07;
            case 115: goto label09;
            case 118: goto label01;
            default: goto label12;
        };

     label01:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 7 goto label02;

        return 3;

     label02:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(7);

        $i6 = (int) $c2;

        lookupswitch($i6)
        {
            case 102: goto label04;
            case 112: goto label03;
            case 115: goto label05;
            default: goto label06;
        };

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 2;

     label06:
        $r14 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected event, must be one of (p,f,s) is:");

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r14;

     label07:
        return 4;

     label08:
        return 5;

     label09:
        return 6;

     label10:
        return 7;

     label11:
        return 8;

     label12:
        $r16 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected event, must be one of (v,p,f,s,a,n) is:");

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r16;
    }

    public static java.awt.geom.Rectangle2D convertEnableBackground(org.w3c.dom.Element)
    {
        java.lang.IllegalStateException $r16;
        java.awt.geom.Rectangle2D $r8;
        java.awt.geom.Rectangle2D$Float $r14;
        short $s0;
        java.lang.StringBuffer $r11, $r12, $r15;
        int $i1, $i2;
        java.lang.String $r13;
        org.apache.batik.css.engine.value.Value $r1, $r3, $r4, $r5, $r6;
        org.apache.batik.css.engine.value.ListValue r2;
        org.w3c.dom.Element r0;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 14);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i2 = (int) $s0;

        if $i2 == 2 goto label1;

        return null;

     label1:
        r2 = (org.apache.batik.css.engine.value.ListValue) $r1;

        $i1 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: int getLength()>();

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 5: goto label3;
            default: goto label4;
        };

     label2:
        $r8 = <org.apache.batik.gvt.CompositeGraphicsNode: java.awt.geom.Rectangle2D VIEWPORT>;

        return $r8;

     label3:
        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(1);

        $f0 = interfaceinvoke $r3.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r4 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(2);

        $f1 = interfaceinvoke $r4.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r5 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(3);

        $f2 = interfaceinvoke $r5.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r6 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(4);

        $f3 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r14 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r14.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        return $r14;

     label4:
        $r16 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected length:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r16;
    }

    public static boolean convertColorInterpolationFilters(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 7);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        if "linearrgb" != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum convertColorInterpolation(org.w3c.dom.Element)
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r3;
        org.w3c.dom.Element r0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 6);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        if "linearrgb" != $r2 goto label1;

        $r3 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum LINEAR_RGB>;

        goto label2;

     label1:
        $r3 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB>;

     label2:
        return $r3;
    }

    public static boolean isAutoCursor(org.w3c.dom.Element)
    {
        short $s0, $s2, $s3, $s5, $s7;
        int $i1, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r3, $r4;
        boolean z0;
        char $c4, $c6;
        org.apache.batik.css.engine.value.Value $r1, $r2;
        org.w3c.dom.Element r0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 10);

        z0 = 0;

        if $r1 == null goto label2;

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label1;

        $s5 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i8 = (int) $s5;

        if $i8 != 21 goto label1;

        $r4 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c6 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c6;

        if $i9 != 97 goto label1;

        z0 = 1;

        goto label2;

     label1:
        $s7 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i10 = (int) $s7;

        if $i10 != 2 goto label2;

        $i1 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: int getLength()>();

        if $i1 != 1 goto label2;

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

        if $r2 == null goto label2;

        $s2 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s2 != 1 goto label2;

        $s3 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i11 = (int) $s3;

        if $i11 != 21 goto label2;

        $r3 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c4 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c4;

        if $i12 != 97 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    public static java.awt.Cursor convertCursor(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r2;
        org.apache.batik.bridge.CursorManager $r1;
        java.awt.Cursor $r3;
        org.apache.batik.bridge.BridgeContext r0;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.CursorManager getCursorManager()>();

        $r3 = virtualinvoke $r1.<org.apache.batik.bridge.CursorManager: java.awt.Cursor convertCursor(org.w3c.dom.Element)>(r2);

        return $r3;
    }

    public static java.awt.RenderingHints convertShapeRendering(org.w3c.dom.Element, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r18, $r19;
        int $i0, $i3, $i4;
        java.lang.String $r2;
        char $c1, $c2;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        java.awt.RenderingHints$Key $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.lang.Object $r3, $r5, $r7, $r9, $r11, $r13, $r15;

        r0 := @parameter0: org.w3c.dom.Element;

        r18 := @parameter1: java.awt.RenderingHints;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 42);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 4 goto label1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c2;

        if $i3 != 97 goto label1;

        return r18;

     label1:
        if $i0 >= 10 goto label2;

        return r18;

     label2:
        if r18 != null goto label3;

        $r19 = new java.awt.RenderingHints;

        specialinvoke $r19.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r18 = $r19;

     label3:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 99: goto label5;
            case 103: goto label6;
            case 111: goto label4;
            default: goto label7;
        };

     label4:
        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_SPEED>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label7;

     label5:
        $r14 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r13 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_DEFAULT>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r13);

        $r16 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r15 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

        goto label7;

     label6:
        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r12 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $r11 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_PURE>;

        virtualinvoke r18.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

     label7:
        return r18;
    }

    public static java.awt.RenderingHints convertTextRendering(org.w3c.dom.Element, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r26, $r27;
        int $i0, $i3, $i4;
        java.lang.String $r2;
        char $c1, $c2;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        java.awt.RenderingHints$Key $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        java.lang.Object $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;

        r0 := @parameter0: org.w3c.dom.Element;

        r26 := @parameter1: java.awt.RenderingHints;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 55);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 4 goto label1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c2;

        if $i3 != 97 goto label1;

        return r26;

     label1:
        if $i0 >= 13 goto label2;

        return r26;

     label2:
        if r26 != null goto label3;

        $r27 = new java.awt.RenderingHints;

        specialinvoke $r27.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r26 = $r27;

     label3:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(8);

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 99: goto label6;
            case 108: goto label5;
            case 115: goto label4;
            default: goto label7;
        };

     label4:
        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_SPEED>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label7;

     label5:
        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r12 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r11 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        $r14 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r13 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r13);

        goto label7;

     label6:
        $r16 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r15 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

        $r18 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r17 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

        $r20 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r19 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r19);

        $r22 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_FRACTIONALMETRICS>;

        $r21 = <java.awt.RenderingHints: java.lang.Object VALUE_FRACTIONALMETRICS_ON>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

        $r24 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $r23 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_PURE>;

        virtualinvoke r26.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23);

     label7:
        return r26;
    }

    public static java.awt.RenderingHints convertImageRendering(org.w3c.dom.Element, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r12, $r13;
        int $i0, $i3, $i4;
        java.lang.String $r2;
        char $c1, $c2;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        java.awt.RenderingHints$Key $r4, $r6, $r8, $r10;
        java.lang.Object $r3, $r5, $r7, $r9;

        r0 := @parameter0: org.w3c.dom.Element;

        r12 := @parameter1: java.awt.RenderingHints;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 30);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 4 goto label1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c2;

        if $i3 != 97 goto label1;

        return r12;

     label1:
        if $i0 >= 13 goto label2;

        return r12;

     label2:
        if r12 != null goto label3;

        $r13 = new java.awt.RenderingHints;

        specialinvoke $r13.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r12 = $r13;

     label3:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(8);

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 113: goto label5;
            case 115: goto label4;
            default: goto label6;
        };

     label4:
        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_SPEED>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label6;

     label5:
        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label6:
        return r12;
    }

    public static java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r12, $r13;
        int $i0, $i3, $i4;
        java.lang.String $r2;
        char $c1, $c2;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        java.awt.RenderingHints$Key $r4, $r6, $r8, $r10;
        java.lang.Object $r3, $r5, $r7, $r9;

        r0 := @parameter0: org.w3c.dom.Element;

        r12 := @parameter1: java.awt.RenderingHints;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 9);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 4 goto label1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c2;

        if $i3 != 97 goto label1;

        return r12;

     label1:
        if $i0 >= 13 goto label2;

        return r12;

     label2:
        if r12 != null goto label3;

        $r13 = new java.awt.RenderingHints;

        specialinvoke $r13.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r12 = $r13;

     label3:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(8);

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 113: goto label5;
            case 115: goto label4;
            default: goto label6;
        };

     label4:
        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_SPEED>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ALPHA_INTERPOLATION>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_ALPHA_INTERPOLATION_SPEED>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label6;

     label5:
        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_QUALITY>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ALPHA_INTERPOLATION>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_ALPHA_INTERPOLATION_QUALITY>;

        virtualinvoke r12.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label6:
        return r12;
    }

    public static boolean convertDisplay(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        int $i1;
        char $c0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        $z0 = r0 instanceof org.apache.batik.css.engine.CSSStylableElement;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 12);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 == 110 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean convertVisibility(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        int $i1;
        char $c0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 57);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 118 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.awt.Composite convertOpacity(org.w3c.dom.Element)
    {
        java.awt.Composite $r4;
        org.apache.batik.css.engine.value.Value $r1;
        java.awt.AlphaComposite $r2, $r3;
        org.w3c.dom.Element r0;
        byte $b0, $b1;
        int $i2, $i3;
        float $f0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 38);

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b0 = $f0 cmpg 0.0F;

        $i2 = (int) $b0;

        if $i2 > 0 goto label1;

        $r4 = <org.apache.batik.bridge.CSSUtilities: java.awt.Composite TRANSPARENT>;

        return $r4;

     label1:
        $b1 = $f0 cmpl 1.0F;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        $r3 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        return $r3;

     label2:
        $r2 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f0);

        return $r2;
    }

    public static boolean convertOverflow(org.w3c.dom.Element)
    {
        char $c0, $c1;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        int $i2, $i3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 39);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 == 104 goto label1;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c1;

        if $i3 != 115 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static float[] convertClip(org.w3c.dom.Element)
    {
        java.lang.IllegalStateException $r13;
        float[] r2;
        short $s0;
        java.lang.StringBuffer $r9, $r10, $r12;
        int $i1, $i2;
        java.lang.String $r11;
        org.apache.batik.css.engine.value.Value $r1, $r3, $r4, $r5, $r6;
        org.w3c.dom.Element r0;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 2);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 21: goto label2;
            case 24: goto label1;
            default: goto label3;
        };

     label1:
        r2 = newarray (float)[4];

        $r3 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getTop()>();

        $f0 = interfaceinvoke $r3.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        r2[0] = $f0;

        $r4 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getRight()>();

        $f1 = interfaceinvoke $r4.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        r2[1] = $f1;

        $r5 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getBottom()>();

        $f2 = interfaceinvoke $r5.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        r2[2] = $f2;

        $r6 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getLeft()>();

        $f3 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        r2[3] = $f3;

        return r2;

     label2:
        return null;

     label3:
        $r13 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected primitiveType:");

        $i2 = (int) $s0;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r13;
    }

    public static org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.IllegalStateException $r18;
        java.lang.Object[] $r7;
        short $s0;
        java.lang.StringBuffer $r13, $r14, $r17;
        int $i1, $i2;
        java.lang.String $r2, $r15;
        boolean $z0;
        org.apache.batik.gvt.GraphicsNode r8;
        org.apache.batik.bridge.BridgeException $r16;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r10;
        org.apache.batik.bridge.Bridge $r5;
        org.apache.batik.bridge.FilterBridge $r9;
        org.w3c.dom.Element r0, $r4;

        r0 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 18);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 20: goto label2;
            case 21: goto label1;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r0, $r2);

        $r5 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r4);

        if $r5 == null goto label3;

        $z0 = $r5 instanceof org.apache.batik.bridge.FilterBridge;

        if $z0 != 0 goto label4;

     label3:
        $r16 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r3, r0, "css.uri.badTarget", $r7);

        throw $r16;

     label4:
        $r9 = (org.apache.batik.bridge.FilterBridge) $r5;

        $r10 = interfaceinvoke $r9.<org.apache.batik.bridge.FilterBridge: org.apache.batik.ext.awt.image.renderable.Filter createFilter(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r3, $r4, r0, r8);

        return $r10;

     label5:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected primitive type:");

        $i2 = (int) $s0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r18;
    }

    public static org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.IllegalStateException $r18;
        java.lang.Object[] $r7;
        short $s0;
        java.lang.StringBuffer $r13, $r14, $r17;
        int $i1, $i2;
        java.lang.String $r2, $r15;
        boolean $z0;
        org.apache.batik.bridge.ClipBridge $r9;
        org.apache.batik.gvt.GraphicsNode r8;
        org.apache.batik.bridge.BridgeException $r16;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r10;
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.bridge.Bridge $r5;
        org.w3c.dom.Element r0, $r4;

        r0 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 3);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 20: goto label2;
            case 21: goto label1;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r0, $r2);

        $r5 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r4);

        if $r5 == null goto label3;

        $z0 = $r5 instanceof org.apache.batik.bridge.ClipBridge;

        if $z0 != 0 goto label4;

     label3:
        $r16 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r3, r0, "css.uri.badTarget", $r7);

        throw $r16;

     label4:
        $r9 = (org.apache.batik.bridge.ClipBridge) $r5;

        $r10 = interfaceinvoke $r9.<org.apache.batik.bridge.ClipBridge: org.apache.batik.ext.awt.image.renderable.ClipRable createClip(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r3, $r4, r0, r8);

        return $r10;

     label5:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected primitive type:");

        $i2 = (int) $s0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r18;
    }

    public static int convertClipRule(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        byte $b1;
        int $i2;
        char $c0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 4);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 != 110 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    public static org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.IllegalStateException $r18;
        java.lang.Object[] $r7;
        org.apache.batik.bridge.MaskBridge $r9;
        short $s0;
        java.lang.StringBuffer $r13, $r14, $r17;
        int $i1, $i2;
        java.lang.String $r2, $r15;
        org.apache.batik.gvt.filter.Mask $r10;
        boolean $z0;
        org.apache.batik.gvt.GraphicsNode r8;
        org.apache.batik.bridge.BridgeException $r16;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.bridge.Bridge $r5;
        org.w3c.dom.Element r0, $r4;

        r0 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 37);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 20: goto label2;
            case 21: goto label1;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r0, $r2);

        $r5 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r4);

        if $r5 == null goto label3;

        $z0 = $r5 instanceof org.apache.batik.bridge.MaskBridge;

        if $z0 != 0 goto label4;

     label3:
        $r16 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r3, r0, "css.uri.badTarget", $r7);

        throw $r16;

     label4:
        $r9 = (org.apache.batik.bridge.MaskBridge) $r5;

        $r10 = interfaceinvoke $r9.<org.apache.batik.bridge.MaskBridge: org.apache.batik.gvt.filter.Mask createMask(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r3, $r4, r0, r8);

        return $r10;

     label5:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected primitive type:");

        $i2 = (int) $s0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r18;
    }

    public static int convertFillRule(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        byte $b1;
        int $i2;
        char $c0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 17);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 != 110 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    public static java.awt.Color convertLightingColor(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r6, $r7;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.css.engine.value.Value $r1, $r2, $r3;
        short $s0;
        org.w3c.dom.Element r0;
        org.apache.batik.css.engine.value.svg.ICCColor $r5;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 33);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label1;

        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>($r1, 1.0F);

        return $r7;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

        $r3 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(1);

        $r5 = (org.apache.batik.css.engine.value.svg.ICCColor) $r3;

        $r6 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertRGBICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r0, $r2, $r5, 1.0F, r4);

        return $r6;
    }

    public static java.awt.Color convertFloodColor(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r7, $r8;
        org.apache.batik.bridge.BridgeContext r5;
        org.apache.batik.css.engine.value.Value $r1, $r2, $r3, $r4;
        short $s0;
        org.w3c.dom.Element r0;
        float $f0;
        org.apache.batik.css.engine.value.svg.ICCColor $r6;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 19);

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 20);

        $f0 = staticinvoke <org.apache.batik.bridge.PaintServer: float convertOpacity(org.apache.batik.css.engine.value.Value)>($r2);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label1;

        $r8 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>($r1, $f0);

        return $r8;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

        $r4 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(1);

        $r6 = (org.apache.batik.css.engine.value.svg.ICCColor) $r4;

        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertRGBICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r0, $r3, $r6, $f0, r5);

        return $r7;
    }

    public static java.awt.Color convertStopColor(org.w3c.dom.Element, float, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r7, $r8;
        org.apache.batik.bridge.BridgeContext r5;
        org.apache.batik.css.engine.value.Value $r1, $r2, $r3, $r4;
        short $s0;
        org.w3c.dom.Element r0;
        float $f0, f1, f2;
        org.apache.batik.css.engine.value.svg.ICCColor $r6;

        r0 := @parameter0: org.w3c.dom.Element;

        f1 := @parameter1: float;

        r5 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 43);

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 44);

        $f0 = staticinvoke <org.apache.batik.bridge.PaintServer: float convertOpacity(org.apache.batik.css.engine.value.Value)>($r2);

        f2 = f1 * $f0;

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label1;

        $r8 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>($r1, f2);

        return $r8;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

        $r4 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(1);

        $r6 = (org.apache.batik.css.engine.value.svg.ICCColor) $r4;

        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertRGBICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r0, $r3, $r6, f2, r5);

        return $r7;
    }

    public static void computeStyleAndURIs(org.w3c.dom.Element, org.w3c.dom.Element, java.lang.String)
    {
        org.apache.batik.css.engine.CSSEngine $r1, $r3;
        org.w3c.dom.Element r0, r2;
        int $i0, $i1, $i3;
        java.lang.String r4;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(35);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 == 0 goto label2;

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "base", r4);

     label2:
        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.CSSEngine getCSSEngine(org.w3c.dom.Element)>(r0);

        $r3 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.CSSEngine getCSSEngine(org.w3c.dom.Element)>(r2);

        virtualinvoke $r1.<org.apache.batik.css.engine.CSSEngine: void importCascadedStyleMaps(org.w3c.dom.Element,org.apache.batik.css.engine.CSSEngine,org.w3c.dom.Element)>(r2, $r3, r0);

        return;
    }

    protected static int rule(org.w3c.dom.css.CSSValue)
    {
        org.w3c.dom.css.CSSPrimitiveValue $r1;
        byte $b1;
        int $i2;
        char $c0;
        java.lang.String $r2;
        org.w3c.dom.css.CSSValue r0;

        r0 := @parameter0: org.w3c.dom.css.CSSValue;

        $r1 = (org.w3c.dom.css.CSSPrimitiveValue) r0;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.css.CSSPrimitiveValue: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 != 110 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    static void <clinit>()
    {
        java.awt.AlphaComposite $r0;

        $r0 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, 0.0F);

        <org.apache.batik.bridge.CSSUtilities: java.awt.Composite TRANSPARENT> = $r0;

        return;
    }
}
