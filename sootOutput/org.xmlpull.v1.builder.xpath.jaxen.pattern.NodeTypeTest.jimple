public class org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest extends org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest
{
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest DOCUMENT_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ELEMENT_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ATTRIBUTE_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest COMMENT_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest TEXT_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest PROCESSING_INSTRUCTION_TEST;
    public static final org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest NAMESPACE_TEST;
    private short nodeType;

    public void <init>(short)
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r0;
        short s0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        s0 := @parameter0: short;

        specialinvoke r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest: void <init>()>();

        r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: short nodeType> = s0;

        return;
    }

    public boolean matches(java.lang.Object, org.xmlpull.v1.builder.xpath.jaxen.Context)
    {
        org.xmlpull.v1.builder.xpath.jaxen.Context r1;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r0;
        short $s0, $s1;
        int $i2, $i3;
        java.lang.Object r3;
        org.xmlpull.v1.builder.xpath.jaxen.Navigator $r2;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.xmlpull.v1.builder.xpath.jaxen.Context;

        $s0 = r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: short nodeType>;

        $r2 = virtualinvoke r1.<org.xmlpull.v1.builder.xpath.jaxen.Context: org.xmlpull.v1.builder.xpath.jaxen.Navigator getNavigator()>();

        $s1 = interfaceinvoke $r2.<org.xmlpull.v1.builder.xpath.jaxen.Navigator: short getNodeType(java.lang.Object)>(r3);

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getPriority()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        return -0.5;
    }

    public short getMatchType()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r0;
        short $s0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        $s0 = r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: short nodeType>;

        return $s0;
    }

    public java.lang.String getText()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r0;
        int $i1;
        short $s0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        $s0 = r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: short nodeType>;

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label6;
            case 4: goto label8;
            case 5: goto label8;
            case 6: goto label8;
            case 7: goto label7;
            case 8: goto label5;
            case 9: goto label4;
            case 10: goto label8;
            case 11: goto label8;
            case 12: goto label8;
            case 13: goto label3;
            default: goto label8;
        };

     label1:
        return "child()";

     label2:
        return "@*";

     label3:
        return "namespace()";

     label4:
        return "/";

     label5:
        return "comment()";

     label6:
        return "text()";

     label7:
        return "processing-instruction()";

     label8:
        return "";
    }

    public java.lang.String toString()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest r1;
        short $s0;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r8;
        int $i1;
        java.lang.String $r2, $r7;

        r1 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ type: ");

        $s0 = r1.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: short nodeType>;

        $i1 = (int) $s0;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(9);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest DOCUMENT_TEST> = $r0;

        $r1 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(1);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ELEMENT_TEST> = $r1;

        $r2 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r2.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(2);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ATTRIBUTE_TEST> = $r2;

        $r3 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r3.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(8);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest COMMENT_TEST> = $r3;

        $r4 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r4.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(3);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest TEXT_TEST> = $r4;

        $r5 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r5.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(7);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest PROCESSING_INSTRUCTION_TEST> = $r5;

        $r6 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest;

        specialinvoke $r6.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: void <init>(short)>(13);

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest NAMESPACE_TEST> = $r6;

        return;
    }
}
