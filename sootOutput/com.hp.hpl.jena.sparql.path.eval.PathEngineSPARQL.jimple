public class com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL extends com.hp.hpl.jena.sparql.path.eval.PathEngine
{
    private final com.hp.hpl.jena.graph.Graph graph;
    private boolean forwardMode;

    public void <init>(com.hp.hpl.jena.graph.Graph, boolean)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngine: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph> = r1;

        r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode> = z0;

        return;
    }

    protected void doSeq(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.graph.Node r5, r10;
        com.hp.hpl.jena.sparql.path.Path r1, r2, r3, r4, $r13, $r14;
        org.apache.jena.atlas.iterator.Iter $r7;
        com.hp.hpl.jena.graph.Graph $r6, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r8;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        java.util.Collection r11;
        java.lang.Object $r9;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r1 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        r11 := @parameter3: java.util.Collection;

        $z0 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        if $z0 == 0 goto label1;

        $r13 = r3;

        goto label2;

     label1:
        $r13 = r1;

     label2:
        r2 = $r13;

        $z1 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        if $z1 == 0 goto label3;

        $r14 = r1;

        goto label4;

     label3:
        $r14 = r3;

     label4:
        r4 = $r14;

        $r6 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r6, r2, r5);

        $r8 = virtualinvoke $r7.<org.apache.jena.atlas.iterator.Iter: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $r12 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node,java.util.Collection)>($r12, r4, r10, r11);

        goto label5;

     label6:
        return;
    }

    protected void doAlt(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.path.Path r1, r6;
        org.apache.jena.atlas.iterator.Iter $r4, $r8;
        com.hp.hpl.jena.graph.Graph $r3, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r6 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: java.util.Collection;

        $r3 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r3, r1, r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r4, r5);

        $r7 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r7, r6, r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r8, r5);

        return;
    }

    protected void doNegatedPropertySet(com.hp.hpl.jena.sparql.path.P_NegPropSet, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        java.util.Iterator $r7, $r11;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r3;
        java.util.Collection r8;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;
        com.hp.hpl.jena.graph.Node r4;
        java.util.List $r1, $r2, $r6, $r10;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r5, $r9;

        r3 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r8 := @parameter2: java.util.Collection;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List getFwdNodes()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r9 = r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List getFwdNodes()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: java.util.Iterator stepExcludeForwards(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,java.util.List)>($r9, r4, $r10);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r11, r8);

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List getBwdNodes()>();

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        $r5 = r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List getBwdNodes()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: java.util.Iterator stepExcludeBackwards(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,java.util.List)>($r5, r4, $r6);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r7, r8);

     label2:
        return;
    }

    protected void doZeroOrOne(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.path.Path r2;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r2 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node,java.util.Collection)>($r4, r2, r3, $r0);

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r0);

        return;
    }

    protected void doZeroOrMore(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.path.Path r3;
        int $i1;
        java.util.LinkedList $r6;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: java.util.Collection;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r4 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        $i1 = (int) -1;

        specialinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_1(com.hp.hpl.jena.graph.Graph,boolean,int,int,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection)>($r4, $z0, 0, $i1, r2, r3, $r6);

        interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

        return;
    }

    protected void doOneOrMore(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.Collection r6;
        com.hp.hpl.jena.graph.Node r3, r8;
        com.hp.hpl.jena.sparql.path.Path r2;
        int $i1;
        java.lang.Object $r7;
        org.apache.jena.atlas.iterator.Iter $r5;
        java.util.LinkedList $r10;
        com.hp.hpl.jena.graph.Graph $r4, $r9;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r2 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r6 := @parameter2: java.util.Collection;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        $r4 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r4, r2, r3);

     label1:
        $z0 = virtualinvoke $r5.<org.apache.jena.atlas.iterator.Iter: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r5.<org.apache.jena.atlas.iterator.Iter: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r9 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $z1 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        $i1 = (int) -1;

        specialinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_1(com.hp.hpl.jena.graph.Graph,boolean,int,int,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection)>($r9, $z1, 0, $i1, r8, r2, $r10);

        goto label1;

     label2:
        interfaceinvoke r6.<java.util.Collection: boolean addAll(java.util.Collection)>($r10);

        return;
    }

    protected void doZero(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.Path r3;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r2;
        java.util.Collection r0;
        com.hp.hpl.jena.graph.Node r1;

        r2 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: java.util.Collection;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void ALP_1(com.hp.hpl.jena.graph.Graph, boolean, int, int, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r2;
        java.util.Collection r0;
        com.hp.hpl.jena.graph.Node r1, r7;
        com.hp.hpl.jena.sparql.path.Path r4;
        int i0, i1, $i2;
        java.lang.Object $r6;
        org.apache.jena.atlas.iterator.Iter $r5;
        com.hp.hpl.jena.graph.Graph r3;
        boolean $z0, $z1, $z2, z3;

        r2 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        z3 := @parameter1: boolean;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r1 := @parameter4: com.hp.hpl.jena.graph.Node;

        r4 := @parameter5: com.hp.hpl.jena.sparql.path.Path;

        r0 := @parameter6: java.util.Collection;

        if i0 < 0 goto label1;

        if i1 <= i0 goto label1;

        return;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        return;

     label3:
        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r3, r4, r1);

     label4:
        $z2 = virtualinvoke $r5.<org.apache.jena.atlas.iterator.Iter: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = virtualinvoke $r5.<org.apache.jena.atlas.iterator.Iter: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $i2 = i1 + 1;

        specialinvoke r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_1(com.hp.hpl.jena.graph.Graph,boolean,int,int,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection)>(r3, z3, $i2, i0, r7, r4, r0);

        goto label4;

     label5:
        return;
    }

    protected void doZeroOrMoreN(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.path.Path r3;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.Collection r4;
        com.hp.hpl.jena.graph.Node r2;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        specialinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_N(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection,java.util.Collection)>(r2, r3, $r0, r4);

        return;
    }

    protected void doOneOrMoreN(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.Collection r8;
        com.hp.hpl.jena.graph.Node r3, r7;
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.path.Path r2;
        java.lang.Object $r6;
        org.apache.jena.atlas.iterator.Iter $r5;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r2 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r8 := @parameter2: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r4, r2, r3);

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        specialinvoke r1.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_N(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection,java.util.Collection)>(r7, r2, $r0, r8);

        goto label1;

     label2:
        return;
    }

    private void ALP_N(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, java.util.Collection, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r3;
        java.util.Collection r0, r2;
        com.hp.hpl.jena.graph.Node r1, r8;
        com.hp.hpl.jena.sparql.path.Path r4;
        java.lang.Object $r7;
        org.apache.jena.atlas.iterator.Iter $r6;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0, $z1, $z2;

        r3 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        r0 := @parameter2: java.util.Collection;

        r2 := @parameter3: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        return;

     label2:
        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r5 = r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r5, r4, r1);

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        specialinvoke r3.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void ALP_N(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,java.util.Collection,java.util.Collection)>(r8, r4, r0, r2);

        goto label3;

     label4:
        interfaceinvoke r0.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void doMultiLengthPath(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, long, long, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.P_Mod $r1;
        long l2, $l4, $l5, l6;
        com.hp.hpl.jena.graph.Node r3, r7;
        com.hp.hpl.jena.sparql.path.Path r0, r11, r12;
        byte $b0, $b1, $b3;
        org.apache.jena.atlas.iterator.Iter $r5, $r9;
        com.hp.hpl.jena.graph.Graph $r4, $r8;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r2;
        java.util.Collection r10;
        java.lang.Object $r6;

        r2 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        l6 := @parameter2: long;

        l2 := @parameter3: long;

        r10 := @parameter4: java.util.Collection;

        $b0 = l6 cmp -1L;

        if $b0 != 0 goto label1;

        l6 = 0L;

     label1:
        $b1 = l6 cmp 0L;

        if $b1 != 0 goto label2;

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>(r3);

     label2:
        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label3;

        return;

     label3:
        $l4 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: long dec(long)>(l6);

        $l5 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: long dec(long)>(l2);

        r11 = r0;

        $r1 = new com.hp.hpl.jena.sparql.path.P_Mod;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.path.P_Mod: void <init>(com.hp.hpl.jena.sparql.path.Path,long,long)>(r0, $l4, $l5);

        r12 = $r1;

        $z0 = r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        if $z0 != 0 goto label4;

        r11 = $r1;

        r12 = r0;

     label4:
        $r4 = r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r4, r11, r3);

     label5:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r9 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r8, r12, r7);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r9, r10);

        goto label5;

     label6:
        return;
    }

    protected void doFixedLengthPath(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node, long, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        java.util.Collection r10;
        long l0, $l2;
        com.hp.hpl.jena.graph.Node r2, r7;
        com.hp.hpl.jena.sparql.path.P_FixedLength $r5;
        com.hp.hpl.jena.sparql.path.Path r1;
        byte $b1;
        java.lang.Object $r6;
        org.apache.jena.atlas.iterator.Iter $r4, $r9;
        com.hp.hpl.jena.graph.Graph $r3, $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        l0 := @parameter2: long;

        r10 := @parameter3: java.util.Collection;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r3, r1, r2);

        $l2 = staticinvoke <com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: long dec(long)>(l0);

        $r5 = new com.hp.hpl.jena.sparql.path.P_FixedLength;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.path.P_FixedLength: void <init>(com.hp.hpl.jena.sparql.path.Path,long)>(r1, $l2);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: com.hp.hpl.jena.graph.Graph graph>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: org.apache.jena.atlas.iterator.Iter eval(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r8, $r5, r7);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: void fill(java.util.Iterator,java.util.Collection)>($r9, r10);

        goto label2;

     label3:
        return;
    }

    protected void flipDirection()
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        $z0 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode> = $z1;

        return;
    }

    protected boolean direction()
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        $z0 = r0.<com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL: boolean forwardMode>;

        return $z0;
    }

    protected java.util.Collection collector()
    {
        com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL r1;
        java.util.ArrayList $r0;

        r1 := @this: com.hp.hpl.jena.sparql.path.eval.PathEngineSPARQL;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }
}
