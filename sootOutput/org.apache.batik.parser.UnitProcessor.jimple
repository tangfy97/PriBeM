public abstract class org.apache.batik.parser.UnitProcessor extends java.lang.Object
{
    public static final short HORIZONTAL_LENGTH;
    public static final short VERTICAL_LENGTH;
    public static final short OTHER_LENGTH;
    static final double SQRT2;

    protected void <init>()
    {
        org.apache.batik.parser.UnitProcessor r0;

        r0 := @this: org.apache.batik.parser.UnitProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float svgToObjectBoundingBox(java.lang.String, java.lang.String, short, org.apache.batik.parser.UnitProcessor$Context) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.UnitProcessor$Context r3;
        org.apache.batik.parser.UnitProcessor$UnitResolver $r1;
        org.apache.batik.parser.LengthParser $r0;
        short s0, $s1;
        float $f0, $f1;
        java.lang.String r2, r4;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        r3 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $r0 = new org.apache.batik.parser.LengthParser;

        specialinvoke $r0.<org.apache.batik.parser.LengthParser: void <init>()>();

        $r1 = new org.apache.batik.parser.UnitProcessor$UnitResolver;

        specialinvoke $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.parser.LengthParser: void setLengthHandler(org.apache.batik.parser.LengthHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r2);

        $f0 = $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: float value>;

        $s1 = $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: short unit>;

        $f1 = staticinvoke <org.apache.batik.parser.UnitProcessor: float svgToObjectBoundingBox(float,short,short,org.apache.batik.parser.UnitProcessor$Context)>($f0, $s1, s0, r3);

        return $f1;
    }

    public static float svgToObjectBoundingBox(float, short, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r0;
        java.lang.IllegalArgumentException $r2;
        short s0, s1;
        int $i2;
        float f0, $f1, $f2;

        f0 := @parameter0: float;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        r0 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $i2 = (int) s0;

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            default: goto label4;
        };

     label1:
        return f0;

     label2:
        $f2 = f0 / 100.0F;

        return $f2;

     label3:
        $f1 = staticinvoke <org.apache.batik.parser.UnitProcessor: float svgToUserSpace(float,short,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s0, s1, r0);

        return $f1;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length has unknown type");

        throw $r2;
    }

    public static float svgToUserSpace(java.lang.String, java.lang.String, short, org.apache.batik.parser.UnitProcessor$Context) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.UnitProcessor$Context r3;
        org.apache.batik.parser.UnitProcessor$UnitResolver $r1;
        org.apache.batik.parser.LengthParser $r0;
        short s0, $s1;
        float $f0, $f1;
        java.lang.String r2, r4;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        r3 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $r0 = new org.apache.batik.parser.LengthParser;

        specialinvoke $r0.<org.apache.batik.parser.LengthParser: void <init>()>();

        $r1 = new org.apache.batik.parser.UnitProcessor$UnitResolver;

        specialinvoke $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.parser.LengthParser: void setLengthHandler(org.apache.batik.parser.LengthHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r2);

        $f0 = $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: float value>;

        $s1 = $r1.<org.apache.batik.parser.UnitProcessor$UnitResolver: short unit>;

        $f1 = staticinvoke <org.apache.batik.parser.UnitProcessor: float svgToUserSpace(float,short,short,org.apache.batik.parser.UnitProcessor$Context)>($f0, $s1, s0, r3);

        return $f1;
    }

    public static float svgToUserSpace(float, short, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        short s0, s1;
        int $i2;
        org.apache.batik.parser.UnitProcessor$Context r0;
        java.lang.IllegalArgumentException $r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;

        f0 := @parameter0: float;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        r0 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $i2 = (int) s0;

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label09;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label01;
            case 6: goto label03;
            case 7: goto label02;
            case 8: goto label04;
            case 9: goto label05;
            case 10: goto label06;
            default: goto label10;
        };

     label01:
        return f0;

     label02:
        $f12 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f13 = f0 / $f12;

        return $f13;

     label03:
        $f14 = f0 * 10.0F;

        $f15 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f16 = $f14 / $f15;

        return $f16;

     label04:
        $f9 = f0 * 25.4F;

        $f10 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f11 = $f9 / $f10;

        return $f11;

     label05:
        $f5 = f0 * 25.4F;

        $f6 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f7 = 72.0F * $f6;

        $f8 = $f5 / $f7;

        return $f8;

     label06:
        $f1 = f0 * 25.4F;

        $f2 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f3 = 6.0F * $f2;

        $f4 = $f1 / $f3;

        return $f4;

     label07:
        $f18 = staticinvoke <org.apache.batik.parser.UnitProcessor: float emsToPixels(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f18;

     label08:
        $f17 = staticinvoke <org.apache.batik.parser.UnitProcessor: float exsToPixels(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f17;

     label09:
        $f19 = staticinvoke <org.apache.batik.parser.UnitProcessor: float percentagesToPixels(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f19;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length has unknown type");

        throw $r2;
    }

    public static float userSpaceToSVG(float, short, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        short s0, s1;
        int $i2;
        org.apache.batik.parser.UnitProcessor$Context r0;
        java.lang.IllegalArgumentException $r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;

        f0 := @parameter0: float;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        r0 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $i2 = (int) s0;

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label09;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label01;
            case 6: goto label03;
            case 7: goto label02;
            case 8: goto label04;
            case 9: goto label05;
            case 10: goto label06;
            default: goto label10;
        };

     label01:
        return f0;

     label02:
        $f12 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f13 = f0 * $f12;

        return $f13;

     label03:
        $f14 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f15 = f0 * $f14;

        $f16 = $f15 / 10.0F;

        return $f16;

     label04:
        $f9 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f10 = f0 * $f9;

        $f11 = $f10 / 25.4F;

        return $f11;

     label05:
        $f5 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f6 = 72.0F * $f5;

        $f7 = f0 * $f6;

        $f8 = $f7 / 25.4F;

        return $f8;

     label06:
        $f1 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getPixelUnitToMillimeter()>();

        $f2 = 6.0F * $f1;

        $f3 = f0 * $f2;

        $f4 = $f3 / 25.4F;

        return $f4;

     label07:
        $f18 = staticinvoke <org.apache.batik.parser.UnitProcessor: float pixelsToEms(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f18;

     label08:
        $f17 = staticinvoke <org.apache.batik.parser.UnitProcessor: float pixelsToExs(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f17;

     label09:
        $f19 = staticinvoke <org.apache.batik.parser.UnitProcessor: float pixelsToPercentages(float,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, r0);

        return $f19;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length has unknown type");

        throw $r2;
    }

    protected static float percentagesToPixels(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        short s0;
        int $i1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, d10;
        org.apache.batik.parser.UnitProcessor$Context r0;
        float $f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        f2 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        if $i1 != 2 goto label1;

        $f7 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportWidth()>();

        $f8 = $f7 * f2;

        $f9 = $f8 / 100.0F;

        return $f9;

     label1:
        if s0 != 1 goto label2;

        $f4 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportHeight()>();

        $f5 = $f4 * f2;

        $f6 = $f5 / 100.0F;

        return $f6;

     label2:
        $f0 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportWidth()>();

        d10 = (double) $f0;

        $f1 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportHeight()>();

        d0 = (double) $f1;

        $d2 = d10 * d10;

        $d1 = d0 * d0;

        $d3 = $d2 + $d1;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $d5 = <org.apache.batik.parser.UnitProcessor: double SQRT2>;

        d6 = $d4 / $d5;

        $d7 = (double) f2;

        $d8 = d6 * $d7;

        $d9 = $d8 / 100.0;

        $f3 = (float) $d9;

        return $f3;
    }

    protected static float pixelsToPercentages(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        short s0;
        int $i1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, d10;
        org.apache.batik.parser.UnitProcessor$Context r0;
        float $f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        f2 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        if $i1 != 2 goto label1;

        $f7 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportWidth()>();

        $f8 = f2 * 100.0F;

        $f9 = $f8 / $f7;

        return $f9;

     label1:
        if s0 != 1 goto label2;

        $f4 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportHeight()>();

        $f5 = f2 * 100.0F;

        $f6 = $f5 / $f4;

        return $f6;

     label2:
        $f0 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportWidth()>();

        d10 = (double) $f0;

        $f1 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getViewportHeight()>();

        d0 = (double) $f1;

        $d2 = d10 * d10;

        $d1 = d0 * d0;

        $d3 = $d2 + $d1;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $d5 = <org.apache.batik.parser.UnitProcessor: double SQRT2>;

        d6 = $d4 / $d5;

        $d7 = (double) f2;

        $d8 = $d7 * 100.0;

        $d9 = $d8 / d6;

        $f3 = (float) $d9;

        return $f3;
    }

    protected static float pixelsToEms(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r0;
        short s0;
        float f0, $f1, $f2;

        f0 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $f1 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getFontSize()>();

        $f2 = f0 / $f1;

        return $f2;
    }

    protected static float emsToPixels(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r0;
        short s0;
        float f0, $f1, $f2;

        f0 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $f1 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getFontSize()>();

        $f2 = f0 * $f1;

        return $f2;
    }

    protected static float pixelsToExs(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r0;
        short s0;
        float $f0, f1, $f2, $f3, $f4;

        f1 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $f0 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getXHeight()>();

        $f2 = f1 / $f0;

        $f3 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getFontSize()>();

        $f4 = $f2 / $f3;

        return $f4;
    }

    protected static float exsToPixels(float, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r0;
        short s0;
        float $f0, f1, $f2, $f3, $f4;

        f1 := @parameter0: float;

        s0 := @parameter1: short;

        r0 := @parameter2: org.apache.batik.parser.UnitProcessor$Context;

        $f0 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getXHeight()>();

        $f2 = f1 * $f0;

        $f3 = interfaceinvoke r0.<org.apache.batik.parser.UnitProcessor$Context: float getFontSize()>();

        $f4 = $f2 * $f3;

        return $f4;
    }

    static void <clinit>()
    {
        double $d0;

        <org.apache.batik.parser.UnitProcessor: short OTHER_LENGTH> = 0;

        <org.apache.batik.parser.UnitProcessor: short VERTICAL_LENGTH> = 1;

        <org.apache.batik.parser.UnitProcessor: short HORIZONTAL_LENGTH> = 2;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        <org.apache.batik.parser.UnitProcessor: double SQRT2> = $d0;

        return;
    }
}
