public abstract class org.apache.batik.dom.AbstractText extends org.apache.batik.dom.AbstractCharacterData implements org.w3c.dom.Text
{

    public void <init>()
    {
        org.apache.batik.dom.AbstractText r0;

        r0 := @this: org.apache.batik.dom.AbstractText;

        specialinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void <init>()>();

        return;
    }

    public org.w3c.dom.Text splitText(int) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Text $r7;
        java.lang.Object[] $r2, $r10, $r12;
        java.lang.Integer $r16, $r17;
        short $s2;
        org.w3c.dom.DOMException $r4, $r11, $r15;
        org.w3c.dom.Node $r5, $r8;
        org.apache.batik.dom.AbstractText r0;
        int i0, $i1, $i3;
        java.lang.String $r1, $r6, $r9, $r14;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractText;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r12 = newarray (java.lang.Object)[2];

        $r16 = new java.lang.Integer;

        $s2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s2;

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>($i3);

        $r12[0] = $r16;

        $r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r12[1] = $r14;

        $r15 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r12);

        throw $r15;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        if i0 < 0 goto label2;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 < $i1 goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>(i0);

        $r2[0] = $r17;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "offset", $r2);

        throw $r4;

     label3:
        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        if $r5 != null goto label4;

        $r10 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "need.parent", $r10);

        throw $r11;

     label4:
        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        $r7 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Text createTextNode(java.lang.String)>($r6);

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getNextSibling()>();

        if $r8 == null goto label5;

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r7, $r8);

        goto label6;

     label5:
        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

     label6:
        $r9 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r9);

        return $r7;
    }

    protected org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)
    {
        short $s0, $s1, $s2;
        org.w3c.dom.Node r0, r2, r3, r4;
        org.apache.batik.dom.AbstractText r1;
        int $i3, $i4, $i5, $i6;

        r1 := @this: org.apache.batik.dom.AbstractText;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label2;

     label1:
        r4 = r3;

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r2 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

     label2:
        if r2 != null goto label4;

        if r3 == null goto label4;

        $s2 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if $i3 == 5 goto label1;

        goto label4;

     label3:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

     label4:
        if r2 == null goto label5;

        $s1 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s1;

        if $i4 == 5 goto label3;

     label5:
        if r2 != null goto label6;

        return null;

     label6:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s0;

        if $i5 == 3 goto label7;

        $i6 = (int) $s0;

        if $i6 != 4 goto label8;

     label7:
        return r2;

     label8:
        return null;
    }

    protected org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)
    {
        short $s0, $s1, $s2;
        org.w3c.dom.Node r0, r2, r3, r4;
        org.apache.batik.dom.AbstractText r1;
        int $i3, $i4, $i5, $i6;

        r1 := @this: org.apache.batik.dom.AbstractText;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label2;

     label1:
        r4 = r3;

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r2 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r2 != null goto label4;

        if r3 == null goto label4;

        $s2 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if $i3 == 5 goto label1;

        goto label4;

     label3:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label4:
        if r2 == null goto label5;

        $s1 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s1;

        if $i4 == 5 goto label3;

     label5:
        if r2 != null goto label6;

        return null;

     label6:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s0;

        if $i5 == 3 goto label7;

        $i6 = (int) $s0;

        if $i6 != 4 goto label8;

     label7:
        return r2;

     label8:
        return null;
    }

    public java.lang.String getWholeText()
    {
        java.lang.StringBuffer $r0;
        org.w3c.dom.Node r5, r6;
        org.apache.batik.dom.AbstractText r1;
        java.lang.String $r2, $r3, $r4;

        r1 := @this: org.apache.batik.dom.AbstractText;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        r5 = r1;

        goto label2;

     label1:
        $r2 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, $r2);

        r5 = virtualinvoke r1.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r5);

     label2:
        if r5 != null goto label1;

        r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r1);

        goto label4;

     label3:
        $r3 = interfaceinvoke r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r6);

     label4:
        if r6 != null goto label3;

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public boolean isElementContentWhitespace()
    {
        char $c1;
        short $s2;
        org.w3c.dom.Element $r4;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractText r0;
        int $i0, i3;
        java.lang.String $r1, $r2, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.dom.AbstractText;

        $r1 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i3 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < $i0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        $s2 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 1 goto label6;

        $r4 = (org.w3c.dom.Element) $r3;

        $r5 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLSpace(org.w3c.dom.Element)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z1 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        return 1;
    }

    public org.w3c.dom.Text replaceWholeText(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Text $r11;
        java.lang.Object[] $r1, $r5;
        java.lang.Integer $r18, $r19;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r13, r15;
        org.w3c.dom.DOMException $r4, $r8;
        org.w3c.dom.Node $r9, r12, r14, r16, r17;
        org.apache.batik.dom.AbstractText r0;
        int $i2, $i3;
        java.lang.String $r3, $r7, r10;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.dom.AbstractText;

        r10 := @parameter0: java.lang.String;

        r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r0);

        goto label03;

     label01:
        r13 = (org.apache.batik.dom.AbstractNode) r12;

        $z0 = virtualinvoke r13.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label02;

        $r1 = newarray (java.lang.Object)[2];

        $r18 = new java.lang.Integer;

        $s0 = interfaceinvoke r12.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>($i2);

        $r1[0] = $r18;

        $r3 = interfaceinvoke r12.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r1);

        throw $r4;

     label02:
        r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r12);

     label03:
        if r12 != null goto label01;

        r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r0);

        goto label06;

     label04:
        r15 = (org.apache.batik.dom.AbstractNode) r14;

        $z1 = virtualinvoke r15.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z1 == 0 goto label05;

        $r5 = newarray (java.lang.Object)[2];

        $r19 = new java.lang.Integer;

        $s1 = interfaceinvoke r14.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s1;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i3);

        $r5[0] = $r19;

        $r7 = interfaceinvoke r14.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r5[1] = $r7;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r5);

        throw $r8;

     label05:
        r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r14);

     label06:
        if r14 != null goto label04;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        r16 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r0);

        goto label08;

     label07:
        interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r16);

        r16 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getPreviousLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r16);

     label08:
        if r16 != null goto label07;

        r17 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r0);

        goto label10;

     label09:
        interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r17);

        r17 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Node getNextLogicallyAdjacentTextNode(org.w3c.dom.Node)>(r17);

     label10:
        if r17 != null goto label09;

        $z2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z2 == 0 goto label11;

        $r11 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: org.w3c.dom.Text createTextNode(java.lang.String)>(r10);

        interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>($r11, r0);

        return $r11;

     label11:
        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>(r10);

        return r0;
    }

    public java.lang.String getTextContent()
    {
        org.apache.batik.dom.AbstractText r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractText;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractText: boolean isElementContentWhitespace()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        return $r1;
    }

    protected abstract org.w3c.dom.Text createTextNode(java.lang.String);
}
