class com.sun.lwuit.html.HTMLTableModel extends java.lang.Object implements com.sun.lwuit.table.TableModel
{
    java.util.Vector rows;
    java.util.Vector headers;
    int maxColumn;
    java.util.Vector currentRow;
    java.util.Hashtable constraints;
    private com.sun.lwuit.util.EventDispatcher dispatcher;

    void <init>()
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1, $r2, $r3;
        com.sun.lwuit.util.EventDispatcher $r5;
        java.util.Hashtable $r4;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector headers> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow> = $r3;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Hashtable constraints> = $r4;

        $r5 = new com.sun.lwuit.util.EventDispatcher;

        specialinvoke $r5.<com.sun.lwuit.util.EventDispatcher: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: com.sun.lwuit.util.EventDispatcher dispatcher> = $r5;

        return;
    }

    void addCell(com.sun.lwuit.Component, boolean, com.sun.lwuit.html.CellConstraint)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        com.sun.lwuit.Component r1;
        java.util.Vector $r2, $r3, $r6, $r7;
        com.sun.lwuit.html.CellConstraint r4;
        int $i0, $i1, $i2;
        java.util.Hashtable $r5;
        boolean z0;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        r1 := @parameter0: com.sun.lwuit.Component;

        z0 := @parameter1: boolean;

        r4 := @parameter2: com.sun.lwuit.html.CellConstraint;

        if z0 == 0 goto label1;

        $r7 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector headers>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label1:
        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $r3 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        $i1 = r0.<com.sun.lwuit.html.HTMLTableModel: int maxColumn>;

        if $i0 <= $i1 goto label2;

        $r6 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow>;

        $i2 = virtualinvoke $r6.<java.util.Vector: int size()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: int maxColumn> = $i2;

     label2:
        if r4 == null goto label3;

        $r5 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Hashtable constraints>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label3:
        return;
    }

    void setAlignToAll(boolean, int)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Enumeration $r2;
        com.sun.lwuit.html.CellConstraint r4;
        int i0;
        java.lang.Object $r3;
        java.util.Hashtable $r1;
        boolean $z0, z1;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        z1 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Hashtable constraints>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (com.sun.lwuit.html.CellConstraint) $r3;

        if z1 == 0 goto label2;

        virtualinvoke r4.<com.sun.lwuit.html.CellConstraint: void setHorizontalAlign(int)>(i0);

        goto label3;

     label2:
        virtualinvoke r4.<com.sun.lwuit.html.CellConstraint: void setVerticalAlign(int)>(i0);

     label3:
        goto label1;

     label4:
        return;
    }

    com.sun.lwuit.html.CellConstraint getConstraint(java.lang.Object)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        com.sun.lwuit.html.CellConstraint $r4;
        java.lang.Object r1, $r3;
        java.util.Hashtable $r2;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Hashtable constraints>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.sun.lwuit.html.CellConstraint) $r3;

        return $r4;
    }

    boolean isHeader(java.lang.Object)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector headers>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    void commitRow()
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1, $r2, $r3;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows>;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow> = $r3;

        return;
    }

    void commitRowIfNotEmpty()
    {
        int $i0;
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector currentRow>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 <= 0 goto label1;

        virtualinvoke r0.<com.sun.lwuit.html.HTMLTableModel: void commitRow()>();

     label1:
        return;
    }

    public int getRowCount()
    {
        int $i0;
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public int getColumnCount()
    {
        int $i0;
        com.sun.lwuit.html.HTMLTableModel r0;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        $i0 = r0.<com.sun.lwuit.html.HTMLTableModel: int maxColumn>;

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        int i0;
        com.sun.lwuit.html.HTMLTableModel r0;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        i0 := @parameter0: int;

        return "";
    }

    public boolean isCellEditable(int, int)
    {
        int i0, i1;
        com.sun.lwuit.html.HTMLTableModel r0;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 0;
    }

    public java.lang.Object getValueAt(int, int)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1, $r2, r4;
        int i0, $i1, i2, $i3;
        java.lang.Object $r3, $r5;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r4 = (java.util.Vector) $r3;

        $i3 = virtualinvoke r4.<java.util.Vector: int size()>();

        if i2 < $i3 goto label2;

        return null;

     label2:
        $r5 = virtualinvoke r4.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        return $r5;
    }

    public void setValueAt(int, int, java.lang.Object)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        java.util.Vector $r1, r3;
        int i0, i1;
        java.lang.Object $r2, r4;
        com.sun.lwuit.util.EventDispatcher $r5;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.Object;

        $r1 = r0.<com.sun.lwuit.html.HTMLTableModel: java.util.Vector rows>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r3 = (java.util.Vector) $r2;

        virtualinvoke r3.<java.util.Vector: void removeElementAt(int)>(i1);

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r4, i1);

        $r5 = r0.<com.sun.lwuit.html.HTMLTableModel: com.sun.lwuit.util.EventDispatcher dispatcher>;

        virtualinvoke $r5.<com.sun.lwuit.util.EventDispatcher: void fireDataChangeEvent(int,int)>(i1, i0);

        return;
    }

    public void addDataChangeListener(com.sun.lwuit.events.DataChangedListener)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        com.sun.lwuit.events.DataChangedListener r1;
        com.sun.lwuit.util.EventDispatcher $r2;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        r1 := @parameter0: com.sun.lwuit.events.DataChangedListener;

        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: com.sun.lwuit.util.EventDispatcher dispatcher>;

        virtualinvoke $r2.<com.sun.lwuit.util.EventDispatcher: void addListener(java.lang.Object)>(r1);

        return;
    }

    public void removeDataChangeListener(com.sun.lwuit.events.DataChangedListener)
    {
        com.sun.lwuit.html.HTMLTableModel r0;
        com.sun.lwuit.events.DataChangedListener r1;
        com.sun.lwuit.util.EventDispatcher $r2;

        r0 := @this: com.sun.lwuit.html.HTMLTableModel;

        r1 := @parameter0: com.sun.lwuit.events.DataChangedListener;

        $r2 = r0.<com.sun.lwuit.html.HTMLTableModel: com.sun.lwuit.util.EventDispatcher dispatcher>;

        virtualinvoke $r2.<com.sun.lwuit.util.EventDispatcher: void removeListener(java.lang.Object)>(r1);

        return;
    }
}
