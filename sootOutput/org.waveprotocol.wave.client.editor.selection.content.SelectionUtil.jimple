public final class org.waveprotocol.wave.client.editor.selection.content.SelectionUtil extends java.lang.Object
{

    public static void placeCaretBeforeElement(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r3;
        org.waveprotocol.wave.model.document.util.Point$El $r4;
        org.waveprotocol.wave.model.document.util.Point $r5;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, r1);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r2, $r4);

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r5);

        return;
    }

    public static void placeCaretAfterElement(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r4;
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r3;
        org.waveprotocol.wave.model.document.util.Point$El $r5;
        org.waveprotocol.wave.model.document.util.Point $r6;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r2, $r5);

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r6);

        return;
    }

    public static org.waveprotocol.wave.model.document.util.FocusedPointRange filterNonContentSelection(org.waveprotocol.wave.model.document.util.FocusedPointRange)
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange r9;
        com.google.gwt.core.client.JavaScriptObject $r3;
        com.google.gwt.dom.client.Element r10;
        java.lang.Object $r1, $r7;
        java.lang.String $r6;
        com.google.gwt.dom.client.Node $r2, $r8;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r4, $r5;
        org.waveprotocol.wave.model.document.util.Point $r0;
        boolean $z0, $z1, $z2, $z3;

        r9 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedPointRange;

        if r9 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke r9.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = (com.google.gwt.dom.client.Node) $r7;

        r10 = virtualinvoke $r8.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        goto label3;

     label2:
        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r2 = (com.google.gwt.dom.client.Node) $r1;

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r10 = (com.google.gwt.dom.client.Element) $r3;

     label3:
        $z3 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean hasBackReference(com.google.gwt.dom.client.Element)>(r10);

        if $z3 != 0 goto label6;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.FilteredView$Skip getTransparency(com.google.gwt.dom.client.Element)>(r10);

        $r5 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        if $r4 == $r5 goto label4;

        $r6 = <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String COMPLEX_IMPLEMENTATION_MARKER>;

        $z2 = virtualinvoke r10.<com.google.gwt.dom.client.Element: boolean getPropertyBoolean(java.lang.String)>($r6);

        if $z2 == 0 goto label5;

     label4:
        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean mayContainSelectionEvenWhenDeep(com.google.gwt.dom.client.Element)>(r10);

        if $z1 != 0 goto label5;

        r9 = null;

        goto label6;

     label5:
        r10 = virtualinvoke r10.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        goto label3;

     label6:
        return r9;
    }

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionUtil r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
