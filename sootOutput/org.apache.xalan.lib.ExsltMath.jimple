public class org.apache.xalan.lib.ExsltMath extends org.apache.xalan.lib.ExsltBase
{
    private static java.lang.String PI;
    private static java.lang.String E;
    private static java.lang.String SQRRT2;
    private static java.lang.String LN2;
    private static java.lang.String LN10;
    private static java.lang.String LOG2E;
    private static java.lang.String SQRT1_2;

    public void <init>()
    {
        org.apache.xalan.lib.ExsltMath r0;

        r0 := @this: org.apache.xalan.lib.ExsltMath;

        specialinvoke r0.<org.apache.xalan.lib.ExsltBase: void <init>()>();

        return;
    }

    public static double max(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0;
        byte $b1;
        org.w3c.dom.Node $r1;
        int $i0, i2, $i3, $i4;
        double $d0, d1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.NodeList;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        d1 = -1.7976931348623157E308;

        i2 = 0;

        goto label6;

     label3:
        $r1 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltBase: double toNumber(org.w3c.dom.Node)>($r1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        return #NaN;

     label4:
        $b1 = $d0 cmpl d1;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label5;

        d1 = $d0;

     label5:
        i2 = i2 + 1;

     label6:
        $i3 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if i2 < $i3 goto label3;

        return d1;
    }

    public static double min(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0;
        byte $b1;
        org.w3c.dom.Node $r1;
        int $i0, i2, $i3, $i4;
        double $d0, d1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.NodeList;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        d1 = 1.7976931348623157E308;

        i2 = 0;

        goto label6;

     label3:
        $r1 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltBase: double toNumber(org.w3c.dom.Node)>($r1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        return #NaN;

     label4:
        $b1 = $d0 cmpg d1;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label5;

        d1 = $d0;

     label5:
        i2 = i2 + 1;

     label6:
        $i3 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if i2 < $i3 goto label3;

        return d1;
    }

    public static org.w3c.dom.NodeList highest(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0;
        byte $b0;
        org.w3c.dom.Node $r2;
        int i1, $i2;
        org.apache.xpath.NodeSet $r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.NodeList;

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltMath: double max(org.w3c.dom.NodeList)>(r0);

        $r1 = new org.apache.xpath.NodeSet;

        specialinvoke $r1.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r1.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        i1 = 0;

        goto label4;

     label2:
        $r2 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $d1 = staticinvoke <org.apache.xalan.lib.ExsltBase: double toNumber(org.w3c.dom.Node)>($r2);

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        virtualinvoke $r1.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r2);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label2;

        return $r1;
    }

    public static org.w3c.dom.NodeList lowest(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0;
        byte $b0;
        org.w3c.dom.Node $r2;
        int i1, $i2;
        org.apache.xpath.NodeSet $r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.NodeList;

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltMath: double min(org.w3c.dom.NodeList)>(r0);

        $r1 = new org.apache.xpath.NodeSet;

        specialinvoke $r1.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r1.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        i1 = 0;

        goto label4;

     label2:
        $r2 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $d1 = staticinvoke <org.apache.xalan.lib.ExsltBase: double toNumber(org.w3c.dom.Node)>($r2);

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        virtualinvoke $r1.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r2);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label2;

        return $r1;
    }

    public static double abs(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        return $d1;
    }

    public static double acos(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>(d0);

        return $d1;
    }

    public static double asin(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>(d0);

        return $d1;
    }

    public static double atan(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double atan(double)>(d0);

        return $d1;
    }

    public static double atan2(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>(d0, d1);

        return $d2;
    }

    public static double cos(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        return $d1;
    }

    public static double exp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>(d0);

        return $d1;
    }

    public static double log(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(d0);

        return $d1;
    }

    public static double power(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d1);

        return $d2;
    }

    public static double random()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        return $d0;
    }

    public static double sin(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        return $d1;
    }

    public static double sqrt(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        return $d1;
    }

    public static double tan(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double tan(double)>(d0);

        return $d1;
    }

    public static double constant(java.lang.String, double)
    {
        java.lang.Double $r1, $r2;
        int $i0, $i1;
        java.lang.String r0, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        double d0, $d1;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r3 = null;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PI");

        if $z0 == 0 goto label1;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String PI>;

        goto label7;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("E");

        if $z1 == 0 goto label2;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String E>;

        goto label7;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SQRRT2");

        if $z2 == 0 goto label3;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String SQRRT2>;

        goto label7;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LN2");

        if $z3 == 0 goto label4;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String LN2>;

        goto label7;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LN10");

        if $z4 == 0 goto label5;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String LN10>;

        goto label7;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LOG2E");

        if $z5 == 0 goto label6;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String LOG2E>;

        goto label7;

     label6:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SQRT1_2");

        if $z6 == 0 goto label7;

        r3 = <org.apache.xalan.lib.ExsltMath: java.lang.String SQRT1_2>;

     label7:
        if r3 == null goto label9;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        $i0 = virtualinvoke $r1.<java.lang.Double: int intValue()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 > $i1 goto label8;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label8:
        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(java.lang.String)>(r3);

        $d1 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d1;

     label9:
        return #NaN;
    }

    static void <clinit>()
    {
        <org.apache.xalan.lib.ExsltMath: java.lang.String PI> = "3.1415926535897932384626433832795028841971693993751";

        <org.apache.xalan.lib.ExsltMath: java.lang.String E> = "2.71828182845904523536028747135266249775724709369996";

        <org.apache.xalan.lib.ExsltMath: java.lang.String SQRRT2> = "1.41421356237309504880168872420969807856967187537694";

        <org.apache.xalan.lib.ExsltMath: java.lang.String LN2> = "0.69314718055994530941723212145817656807550013436025";

        <org.apache.xalan.lib.ExsltMath: java.lang.String LN10> = "2.302585092994046";

        <org.apache.xalan.lib.ExsltMath: java.lang.String LOG2E> = "1.4426950408889633";

        <org.apache.xalan.lib.ExsltMath: java.lang.String SQRT1_2> = "0.7071067811865476";

        return;
    }
}
