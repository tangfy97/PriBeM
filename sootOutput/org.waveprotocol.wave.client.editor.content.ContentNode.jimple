public abstract class org.waveprotocol.wave.client.editor.content.ContentNode extends java.lang.Object implements org.waveprotocol.wave.model.document.Doc$N, org.waveprotocol.wave.client.common.util.VolatileComparable, org.waveprotocol.wave.client.editor.content.MutatingNode
{
    protected static org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private final org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context;
    private com.google.gwt.dom.client.Node implNodelet;
    private org.waveprotocol.wave.client.editor.content.ContentElement parent;
    private org.waveprotocol.wave.client.editor.content.ContentNode next;
    private org.waveprotocol.wave.client.editor.content.ContentNode prev;
    protected static final int MAX_REPAIR_ATTEMPTS;
    private org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer;
    static final boolean $assertionsDisabled;

    public void <init>(com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r1;
        com.google.gwt.dom.client.Node r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node implNodelet> = r2;

        return;
    }

    public com.google.gwt.dom.client.Node getImplNodelet()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node implNodelet>;

        return $r1;
    }

    public com.google.gwt.dom.client.Node getImplNodeletRightwards()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodeletRightwards(org.waveprotocol.wave.client.editor.content.ContentNode)>(null);

        return $r1;
    }

    public com.google.gwt.dom.client.Node getImplNodeletRightwards(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r2, r6;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        java.lang.AssertionError $r5;
        java.lang.Object $r4;
        com.google.gwt.dom.client.Node $r3, r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isContentAttached()>();

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        r6 = r0;

        r7 = null;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

     label2:
        if r6 == r2 goto label4;

        $r3 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        r7 = $r3;

        if $r3 == null goto label3;

        goto label4;

     label3:
        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r6);

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        goto label2;

     label4:
        return r7;
    }

    public com.google.gwt.dom.client.Node getNextImplNodeletRightwards()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getNextImplNodeletRightwards(org.waveprotocol.wave.client.editor.content.ContentNode)>(null);

        return $r1;
    }

    public com.google.gwt.dom.client.Node getNextImplNodeletRightwards(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r1, r2;
        com.google.gwt.dom.client.Node $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodeletRightwards(org.waveprotocol.wave.client.editor.content.ContentNode)>(r2);

     label2:
        return $r3;
    }

    public com.google.gwt.dom.client.Node normaliseImpl()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        return $r1;
    }

    void setImplNodelet(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: com.google.gwt.dom.client.Node;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node implNodelet> = r1;

        return;
    }

    void breakBackRef(boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isPersistent()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        return null;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getLastChild()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        return null;
    }

    void setNext(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next> = r1;

        return;
    }

    void setPrev(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev> = r1;

        return;
    }

    void setParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent> = r1;

        return;
    }

    org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer>;

        return $r1;
    }

    void setIndexingContainer(org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer> = r1;

        return;
    }

    final void removeFromShadowTree()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r1, $r2, $r3, $r4, $r5, $r7, $r10, $r12;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6, $r8, $r9, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev>;

        if $r1 != null goto label1;

        $r9 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        if $r9 == null goto label2;

        $r11 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next>;

        virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentElement: void setFirstChild(org.waveprotocol.wave.client.editor.content.ContentNode)>($r10);

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next>;

        $r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next> = $r2;

     label2:
        $r12 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next>;

        if $r12 != null goto label3;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        if $r6 == null goto label4;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentElement: void setLastChild(org.waveprotocol.wave.client.editor.content.ContentNode)>($r7);

        goto label4;

     label3:
        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev>;

        $r5.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev> = $r4;

     label4:
        return;
    }

    final void clearNodeLinks()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode next> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode prev> = null;

        return;
    }

    public abstract short getNodeType();

    public abstract boolean isElement();

    public abstract boolean isTextNode();

    public abstract org.waveprotocol.wave.client.editor.content.ContentTextNode asText();

    public abstract org.waveprotocol.wave.client.editor.content.ContentElement asElement();

    public boolean isRendered()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        com.google.gwt.dom.client.Node $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r1 != null goto label1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isRendered()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    final org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        return $r1;
    }

    public final org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        return $r1;
    }

    public final org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r2;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        return $r3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r3;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        return $r3;
    }

    public final org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.CMutableDocument document()>();

        return $r2;
    }

    public final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r2;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        return $r3;
    }

    final org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.extract.Repairer $r3;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        return $r3;
    }

    final org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r2;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()>();

        return $r3;
    }

    public final org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.model.document.indexed.LocationMapper locationMapper()>();

        return $r2;
    }

    public final boolean inEditMode()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: boolean isEditing()>();

        return $z0;
    }

    public final java.lang.String getEditorUniqueString()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: java.lang.String getDocumentId()>();

        return $r2;
    }

    public final org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r2;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()>();

        return $r3;
    }

    public final org.waveprotocol.wave.client.editor.content.ContentElement getElementByName(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ContentElement getElementByName(java.lang.String)>(r1);

        return $r3;
    }

    public abstract boolean isConsistent();

    public abstract void revertImplementation();

    public java.lang.String toString()
    {
        java.lang.Throwable $r20;
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.document.util.Pretty $r5, $r10;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r6;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r12, $r19, r21, $r22;
        org.waveprotocol.wave.client.editor.content.ContentView $r11;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r7;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r8;
        java.lang.Class $r1;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18;
        com.google.gwt.dom.client.Node $r4, $r9;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1);

        r21 = "destroyed";

     label1:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r4 != null goto label2;

        $r22 = "null";

        goto label3;

     label2:
        $r5 = new org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.util.Pretty: void <init>()>();

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()>();

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns: org.waveprotocol.wave.client.editor.impl.HtmlView getFullHtmlView()>();

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r22 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r8, $r9);

     label3:
        r21 = $r22;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

     label6:
        $r10 = new org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke $r10.<org.waveprotocol.wave.model.document.util.Pretty: void <init>()>();

        $r11 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r12 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r11, r0);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        return;
    }

    public void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        return;
    }

    public void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        return;
    }

    public void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        return;
    }

    public void onAttributeModified(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void onDescendantsMutated()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        return;
    }

    public void onEmptied()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        return;
    }

    void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.RuntimeException r1;
        java.lang.AssertionError $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.RuntimeException;

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        throw r1;

     label4:
        $z1 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z1 == 0 goto label5;

        throw r1;

     label5:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void noteErrorOnMutationEvent(java.lang.Exception)>(r1);

        return;

        catch java.lang.AssertionError from label1 to label2 with label3;
    }

    protected final void notifyAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r2, $r3;
        java.lang.RuntimeException $r4;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        z0 := @parameter1: boolean;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)>($r4);

     label4:
        if z0 == 0 goto label5;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement parent>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    protected final void notifyRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.RuntimeException $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)>($r3);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void noteErrorWithImplMutation(java.lang.Exception)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r8;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        java.lang.Exception r3;
        org.waveprotocol.wave.client.editor.content.ContentNode$1 $r7;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r6;

        r8 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter0: java.lang.Exception;

        $r0 = <org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Scheduling revert.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r6);

        $r7 = new org.waveprotocol.wave.client.editor.content.ContentNode$1;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentNode$1: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode)>(r8);

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r7);

        return;
    }

    void noteErrorOnMutationEvent(java.lang.Exception)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r12;
        org.waveprotocol.wave.common.logging.Logger $r1;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        java.lang.Exception r4;
        java.lang.StringBuilder $r2, $r3, $r5, $r8, $r9, $r10;
        java.lang.String $r6, $r11;
        boolean $z0;

        r12 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter0: java.lang.Exception;

        $r0 = <org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noteErrorOnMutationEvent: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r6);

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noteErrorOnMutationEvent: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label1:
        return;
    }

    void implInsertBefore(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, r2, r3, r6;
        com.google.gwt.dom.client.Element r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.RuntimeException $r5;

        r6 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter4: com.google.gwt.dom.client.Element;

     label1:
        staticinvoke <org.waveprotocol.wave.client.editor.content.ContentNode: void staticImplInsertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r0, r1, r2, r3, r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.RuntimeException: void printStackTrace()>();

        virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: void noteErrorWithImplMutation(java.lang.Exception)>($r5);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static void staticImplInsertBefore(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r4, r6, r18, r19, r20;
        java.lang.AssertionError $r11;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r14, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r8;
        com.google.gwt.dom.client.Element $r2, r3, $r9, $r10, r16;
        com.google.gwt.dom.client.Node $r5, $r7, $r12, $r13, r17;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r6 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter4: com.google.gwt.dom.client.Element;

        if r0 == null goto label01;

        $r14 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r15 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r14 != $r15 goto label02;

     label01:
        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "invalid toExcl");

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        r16 = $r2;

        if $r2 == null goto label13;

        r17 = null;

        r18 = r6;

     label04:
        if r18 == null goto label06;

        $r12 = virtualinvoke r18.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r12 == null goto label05;

        $r13 = virtualinvoke r18.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $z2 = virtualinvoke $r13.<com.google.gwt.dom.client.Node: boolean hasParentElement()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "implNodelet not attached");

        r17 = virtualinvoke r18.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        goto label06;

     label05:
        r18 = virtualinvoke r18.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label04;

     label06:
        if r17 == null goto label08;

        $z1 = <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label07;

        $r10 = virtualinvoke r17.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        if $r10 == $r2 goto label07;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label07:
        $r9 = virtualinvoke r17.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        r16 = $r9;

        if $r9 != null goto label08;

        return;

     label08:
        r19 = r4;

     label09:
        if r19 == r0 goto label12;

        $z0 = virtualinvoke r19.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label10;

        $r8 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r19;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text normaliseImpl()>();

     label10:
        $r7 = virtualinvoke r19.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r7 == null goto label11;

        virtualinvoke r16.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node insertBefore(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r7, r17);

     label11:
        r19 = virtualinvoke r19.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label09;

     label12:
        goto label16;

     label13:
        if r3 == null goto label16;

        r20 = r4;

     label14:
        if r20 == r0 goto label16;

        $r5 = virtualinvoke r20.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r5 == null goto label15;

        virtualinvoke $r5.<com.google.gwt.dom.client.Node: void removeFromParent()>();

     label15:
        r20 = virtualinvoke r20.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label14;

     label16:
        return;
    }

    public boolean isComparable()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isContentAttached()>();

        return $z0;
    }

    public int compareTo(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r2, r6, r7, r8, r9, r10, r11, r12;
        java.util.HashMap $r14;
        java.lang.AssertionError $r15;
        int $i1, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isComparable()>();

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isComparable()>();

        if $z1 != 0 goto label02;

     label01:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot compare unattached nodes");

        throw $r13;

     label02:
        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r6 = null;

        r7 = null;

        r8 = r0;

        r9 = r2;

        if r0 == r2 goto label03;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label04;

     label03:
        return 0;

     label04:
        $z3 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentTextNode;

        if $z3 == 0 goto label05;

        r6 = r0;

        r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

     label05:
        $z4 = r2 instanceof org.waveprotocol.wave.client.editor.content.ContentTextNode;

        if $z4 == 0 goto label06;

        r7 = r2;

        r9 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

     label06:
        if r8 == null goto label07;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r6);

        r6 = r8;

        r8 = virtualinvoke r8.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label06;

     label07:
        r10 = r9;

     label08:
        $z5 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z5 != 0 goto label10;

        r7 = r10;

        $z7 = <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled>;

        if $z7 != 0 goto label09;

        if r10 != null goto label09;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("Incomparable nodes!");

        throw $r15;

     label09:
        r10 = virtualinvoke r10.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label08;

     label10:
        $r4 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        if r11 != null goto label11;

        $i1 = (int) -1;

        return $i1;

     label11:
        if r7 != null goto label12;

        return 1;

     label12:
        r12 = r11;

     label13:
        if r12 == null goto label15;

        $z6 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z6 == 0 goto label14;

        return 1;

     label14:
        r12 = virtualinvoke r12.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        goto label13;

     label15:
        $i3 = (int) -1;

        return $i3;
    }

    public boolean isContentAttached()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3, $r4, r5;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label2;

     label1:
        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r0;

     label2:
        r5 = $r4;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r2;

     label3:
        if r5 == $r3 goto label5;

        if r5 != null goto label4;

        return 0;

     label4:
        r5 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label3;

     label5:
        return 1;
    }

    public boolean isImplAttached()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        com.google.gwt.dom.client.Node $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.gwt.dom.client.Node: boolean hasParentElement()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void debugAssertHealthy()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        return;
    }

    boolean isOrIsAncestorOf(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

     label1:
        if r1 == null goto label3;

        if r0 != r1 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label1;

     label3:
        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: int compareTo(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return $i0;
    }

    public volatile void onChildRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return;
    }

    public volatile void onChildAdded(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return;
    }

    public volatile void onRemovedFromParent(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    public volatile void onAddedToParent(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.debug.logger.DomLogger $r2;
        java.lang.Class $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.content.ContentNode: int MAX_REPAIR_ATTEMPTS> = 50;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentNode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentNode: boolean $assertionsDisabled> = $z1;

        $r2 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r2.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("editor-node");

        $r3 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r2;

        <org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r3;

        return;
    }
}
