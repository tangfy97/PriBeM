public class org.apache.jena.fuseki.migrate.GraphLoadUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.fuseki.migrate.GraphLoadUtils r0;

        r0 := @this: org.apache.jena.fuseki.migrate.GraphLoadUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.rdf.model.Model readModel(java.lang.String, int)
    {
        int i0;
        com.hp.hpl.jena.rdf.model.Model $r2;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        staticinvoke <org.apache.jena.fuseki.migrate.GraphLoadUtils: void readUtil(com.hp.hpl.jena.graph.Graph,java.lang.String,int)>($r0, r1, i0);

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>($r0);

        return $r2;
    }

    public static void loadModel(com.hp.hpl.jena.rdf.model.Model, java.lang.String, int)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        int i0;
        java.lang.String r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.fuseki.migrate.GraphLoadUtils: void readUtil(com.hp.hpl.jena.graph.Graph,java.lang.String,int)>($r1, r2, i0);

        return;
    }

    public static com.hp.hpl.jena.graph.Graph readGraph(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        staticinvoke <org.apache.jena.fuseki.migrate.GraphLoadUtils: void readUtil(com.hp.hpl.jena.graph.Graph,java.lang.String,int)>($r0, r1, i0);

        return $r0;
    }

    public static void loadGraph(com.hp.hpl.jena.graph.Graph, java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <org.apache.jena.fuseki.migrate.GraphLoadUtils: void readUtil(com.hp.hpl.jena.graph.Graph,java.lang.String,int)>(r0, r1, i0);

        return;
    }

    private static void readUtil(com.hp.hpl.jena.graph.Graph, java.lang.String, int)
    {
        org.apache.jena.atlas.web.TypedInputStream $r5;
        org.apache.jena.riot.system.StreamRDF $r1;
        long $l1;
        org.apache.jena.riot.stream.StreamManager $r4;
        int i0;
        org.apache.jena.fuseki.migrate.SinkRDFLimited $r2;
        java.lang.String r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>(r0);

        $r2 = new org.apache.jena.fuseki.migrate.SinkRDFLimited;

        $l1 = (long) i0;

        specialinvoke $r2.<org.apache.jena.fuseki.migrate.SinkRDFLimited: void <init>(org.apache.jena.riot.system.StreamRDF,long)>($r1, $l1);

        $r4 = <org.apache.jena.fuseki.Fuseki: org.apache.jena.riot.stream.StreamManager webStreamManager>;

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.stream.StreamManager: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String)>(r3);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String)>($r2, $r5, r3);

        return;
    }
}
