public abstract class org.springframework.aop.target.AbstractPrototypeBasedTargetSource extends org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource
{

    public void <init>()
    {
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        specialinvoke r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void <init>()>();

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.BeanDefinitionStoreException $r3;
        org.springframework.beans.factory.BeanFactory r1;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        specialinvoke r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>(r1);

        $r2 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $z0 = interfaceinvoke r1.<org.springframework.beans.factory.BeanFactory: boolean isPrototype(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot use prototype-based TargetSource against non-prototype bean with name \'");

        $r5 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': instances would not be independent");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;
    }

    protected java.lang.Object newPrototypeInstance() throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.BeanFactory $r2;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r3, $r7, $r10;
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        $r1 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating new instance of bean \'");

        $r7 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.springframework.beans.factory.BeanFactory getBeanFactory()>();

        $r3 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $r4 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r3);

        return $r4;
    }

    protected void destroyPrototypeInstance(java.lang.Object)
    {
        java.lang.Throwable $r14;
        java.lang.String $r7, $r10, $r13, $r17, $r20;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.BeanFactory $r2, $r5;
        org.springframework.beans.factory.DisposableBean $r4;
        org.apache.commons.logging.Log $r1, $r9, $r16;
        java.lang.Object r3;
        java.lang.StringBuilder $r8, $r11, $r12, $r15, $r18, $r19;
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r0;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r6;

        r0 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destroying instance of bean \'");

        $r10 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.springframework.beans.factory.BeanFactory getBeanFactory()>();

        $z1 = $r2 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.springframework.beans.factory.BeanFactory getBeanFactory()>();

        $r6 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r5;

        $r7 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        interfaceinvoke $r6.<org.springframework.beans.factory.config.ConfigurableBeanFactory: void destroyBean(java.lang.String,java.lang.Object)>($r7, r3);

        goto label6;

     label2:
        $z2 = r3 instanceof org.springframework.beans.factory.DisposableBean;

        if $z2 == 0 goto label6;

     label3:
        $r4 = (org.springframework.beans.factory.DisposableBean) r3;

        interfaceinvoke $r4.<org.springframework.beans.factory.DisposableBean: void destroy()>();

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r16 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t invoke destroy method of bean with name \'");

        $r17 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.String getTargetBeanName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r20, $r14);

     label6:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r2;
        java.io.NotSerializableException $r0;
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r1;

        r1 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        r2 := @parameter0: java.io.ObjectInputStream;

        $r0 = new java.io.NotSerializableException;

        specialinvoke $r0.<java.io.NotSerializableException: void <init>(java.lang.String)>("A prototype-based TargetSource itself is not deserializable - just a disconnected SingletonTargetSource is");

        throw $r0;
    }

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        java.lang.String $r8, $r14, $r20;
        boolean $z0;
        org.springframework.aop.target.SingletonTargetSource $r2;
        java.io.NotSerializableException $r15;
        java.lang.Exception $r9;
        org.apache.commons.logging.Log $r1, $r5, $r11;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r10, $r12, $r13, $r16, $r17, $r18, $r19;
        org.springframework.aop.target.AbstractPrototypeBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractPrototypeBasedTargetSource;

        $r1 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Disconnecting TargetSource [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label1:
        $r2 = new org.springframework.aop.target.SingletonTargetSource;

        $r3 = virtualinvoke r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: java.lang.Object getTarget()>();

        specialinvoke $r2.<org.springframework.aop.target.SingletonTargetSource: void <init>(java.lang.Object)>($r3);

     label2:
        return $r2;

     label3:
        $r9 := @caughtexception;

        $r11 = r0.<org.springframework.aop.target.AbstractPrototypeBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot get target for disconnecting TargetSource [");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r14, $r9);

        $r15 = new java.io.NotSerializableException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot get target for disconnecting TargetSource [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.NotSerializableException: void <init>(java.lang.String)>($r20);

        throw $r15;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
