abstract class org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate extends org.apache.lucene.util.ArrayUtil$ArraySorterTemplate
{
    private final int threshold;
    private final java.lang.Object[] tmp;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.Object[], float)
    {
        java.lang.Object[] r1, $r2, r3;
        org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate r0;
        int $i0, $i1, $i2;
        float f0, $f1, $f2;

        r0 := @this: org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate;

        r1 := @parameter0: java.lang.Object[];

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.lucene.util.ArrayUtil$ArraySorterTemplate: void <init>(java.lang.Object[])>(r1);

        $i0 = lengthof r1;

        $f1 = (float) $i0;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: int threshold> = $i1;

        $i2 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: int threshold>;

        $r2 = newarray (java.lang.Object)[$i2];

        r3 = (java.lang.Object[]) $r2;

        r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] tmp> = r3;

        return;
    }

    private void mergeWithExtraMemory(int, int, int, int, int)
    {
        boolean $z0;
        java.lang.Object[] $r1, $r2, $r4, $r6, $r7, $r8, $r11, $r13, $r14, $r16;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate r0;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        java.lang.Object $r5, $r9, $r10, $r12, $r15;

        r0 := @this: org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i5 := @parameter2: int;

        i1 := @parameter3: int;

        i11 := @parameter4: int;

        $r2 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $r1 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] tmp>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, 0, i1);

        i12 = 0;

        i13 = i2;

        i14 = i0;

     label1:
        if i12 >= i1 goto label3;

        if i13 >= i5 goto label3;

        $r7 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] tmp>;

        $r10 = $r7[i12];

        $r8 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $r9 = $r8[i13];

        $i6 = virtualinvoke r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: int compare(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $i6 > 0 goto label2;

        $r16 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $i9 = i14;

        i14 = i14 + 1;

        $r14 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] tmp>;

        $i10 = i12;

        i12 = i12 + 1;

        $r15 = $r14[$i10];

        $r16[$i9] = $r15;

        goto label1;

     label2:
        $r13 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $i7 = i14;

        i14 = i14 + 1;

        $r11 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $i8 = i13;

        i13 = i13 + 1;

        $r12 = $r11[$i8];

        $r13[$i7] = $r12;

        goto label1;

     label3:
        if i12 >= i1 goto label4;

        $r6 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] a>;

        $i3 = i14;

        i14 = i14 + 1;

        $r4 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: java.lang.Object[] tmp>;

        $i4 = i12;

        i12 = i12 + 1;

        $r5 = $r4[$i4];

        $r6[$i3] = $r5;

        goto label3;

     label4:
        $z0 = <org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if i13 == i14 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        return;
    }

    protected void merge(int, int, int, int, int)
    {
        int i0, $i1, i2, i3, i4, i5;
        org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate r0;

        r0 := @this: org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i5 := @parameter4: int;

        $i1 = r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: int threshold>;

        if i0 > $i1 goto label1;

        specialinvoke r0.<org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: void mergeWithExtraMemory(int,int,int,int,int)>(i2, i3, i4, i0, i5);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.lucene.util.ArrayUtil$ArraySorterTemplate: void merge(int,int,int,int,int)>(i2, i3, i4, i0, i5);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/ArrayUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.ArrayUtil$ArrayMergeSorterTemplate: boolean $assertionsDisabled> = $z1;

        return;
    }
}
