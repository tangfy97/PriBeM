public final class minsolver.ucore.MinHybridStrategy extends java.lang.Object implements kodkod.engine.satlab.ReductionStrategy
{
    private final kodkod.util.ints.IntSet topVars;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/ucore/MinHybridStrategy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.ucore.MinHybridStrategy: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(minsolver.fol2sat.MinTranslationLog)
    {
        minsolver.ucore.MinHybridStrategy r0;
        minsolver.fol2sat.MinTranslationLog r1;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: minsolver.ucore.MinHybridStrategy;

        r1 := @parameter0: minsolver.fol2sat.MinTranslationLog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <minsolver.ucore.MinStrategyUtils: kodkod.util.ints.IntSet rootVars(minsolver.fol2sat.MinTranslationLog)>(r1);

        r0.<minsolver.ucore.MinHybridStrategy: kodkod.util.ints.IntSet topVars> = $r2;

        return;
    }

    public kodkod.util.ints.IntSet next(kodkod.engine.satlab.ResolutionTrace)
    {
        java.lang.AssertionError $r12;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        kodkod.engine.satlab.ResolutionTrace r2;
        java.util.Iterator $r4;
        kodkod.util.ints.IntSet $r1, $r3, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        kodkod.engine.satlab.Clause r6;
        minsolver.ucore.MinHybridStrategy r0;
        java.lang.Object $r5;

        r0 := @this: minsolver.ucore.MinHybridStrategy;

        r2 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r1 = r0.<minsolver.ucore.MinHybridStrategy: kodkod.util.ints.IntSet topVars>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r15 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r15;

     label1:
        $r3 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $r4 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator iterator(kodkod.util.ints.IntSet)>($r3);

        goto label4;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.engine.satlab.Clause) $r5;

        $i0 = virtualinvoke r6.<kodkod.engine.satlab.Clause: int maxVariable()>();

        $r7 = r0.<minsolver.ucore.MinHybridStrategy: kodkod.util.ints.IntSet topVars>;

        $z1 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: boolean remove(int)>($i0);

        if $z1 == 0 goto label4;

        $r8 = staticinvoke <minsolver.ucore.MinHybridStrategy: kodkod.util.ints.IntSet coreClausesWithMaxVar(kodkod.engine.satlab.ResolutionTrace,int)>(r2, $i0);

        $z2 = <minsolver.ucore.MinHybridStrategy: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z4 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z4 == 0 goto label3;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        $i1 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: int size()>();

        $i2 = $i1 - 1;

        $r9 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet singleton(int)>($i2);

        $r10 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet reachable(kodkod.util.ints.IntSet)>($r9);

        $r11 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet backwardReachable(kodkod.util.ints.IntSet)>($r8);

        interfaceinvoke $r10.<kodkod.util.ints.IntSet: boolean removeAll(kodkod.util.ints.IntCollection)>($r11);

        $z3 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        return $r10;

     label4:
        $z5 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label2;

        $r13 = r0.<minsolver.ucore.MinHybridStrategy: kodkod.util.ints.IntSet topVars>;

        interfaceinvoke $r13.<kodkod.util.ints.IntSet: void clear()>();

        $r14 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r14;
    }

    private static kodkod.util.ints.IntSet coreClausesWithMaxVar(kodkod.engine.satlab.ResolutionTrace, int)
    {
        kodkod.engine.satlab.ResolutionTrace r0;
        java.util.Iterator $r3;
        kodkod.util.ints.IntSet $r1;
        kodkod.engine.satlab.Clause r6;
        kodkod.util.ints.IntBitSet $r2;
        kodkod.util.ints.IntIterator $r4;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        i4 := @parameter1: int;

        $r1 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $r2 = new kodkod.util.ints.IntBitSet;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int max()>();

        $i1 = $i0 + 1;

        specialinvoke $r2.<kodkod.util.ints.IntBitSet: void <init>(int)>($i1);

        $r3 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator iterator(kodkod.util.ints.IntSet)>($r1);

        $r4 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.engine.satlab.Clause) $r5;

        $i2 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        $i3 = virtualinvoke r6.<kodkod.engine.satlab.Clause: int maxVariable()>();

        if $i3 != i4 goto label2;

        interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>($i2);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r2;
    }
}
