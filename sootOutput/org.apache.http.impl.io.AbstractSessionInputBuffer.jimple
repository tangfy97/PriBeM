public abstract class org.apache.http.impl.io.AbstractSessionInputBuffer extends java.lang.Object implements org.apache.http.io.SessionInputBuffer, org.apache.http.io.BufferInfo
{
    private static final java.nio.charset.Charset ASCII;
    private java.io.InputStream instream;
    private byte[] buffer;
    private int bufferpos;
    private int bufferlen;
    private org.apache.http.util.ByteArrayBuffer linebuffer;
    private java.nio.charset.Charset charset;
    private java.nio.charset.CharsetDecoder decoder;
    private java.nio.CharBuffer cbuf;
    private boolean ascii;
    private int maxLineLen;
    private int minChunkLimit;
    private org.apache.http.impl.io.HttpTransportMetricsImpl metrics;
    private java.nio.charset.CodingErrorAction onMalformedInputAction;
    private java.nio.charset.CodingErrorAction onUnMappableInputAction;

    public void <init>()
    {
        int $i1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = null;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = 1;

        $i1 = (int) -1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = $i1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int minChunkLimit> = 512;

        return;
    }

    protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams)
    {
        byte[] $r3;
        java.nio.charset.Charset $r6, $r7, $r8;
        java.nio.charset.CodingErrorAction $r10, $r11;
        int i0, $i1, $i2, $i4;
        java.lang.String $r5;
        boolean $z0;
        org.apache.http.util.ByteArrayBuffer $r18;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r9;
        org.apache.http.impl.io.AbstractSessionInputBuffer r2;
        java.lang.IllegalArgumentException $r15, $r16, $r17;
        org.apache.http.params.HttpParams r1;
        java.io.InputStream r0;

        r2 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.http.params.HttpParams;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r15;

     label1:
        if i0 > 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size may not be negative or zero");

        throw $r16;

     label2:
        if r1 != null goto label3;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r17;

     label3:
        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream> = r0;

        $r3 = newarray (byte)[i0];

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer> = $r3;

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = 0;

        $r18 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r18.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>(i0);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = $r18;

        $r5 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>(r1);

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r5);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.Charset charset> = $r6;

        $r8 = r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.Charset charset>;

        $r7 = <org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.Charset ASCII>;

        $z0 = virtualinvoke $r8.<java.nio.charset.Charset: boolean equals(java.lang.Object)>($r7);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = $z0;

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder> = null;

        $i4 = (int) -1;

        $i1 = interfaceinvoke r1.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", $i4);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = $i1;

        $i2 = interfaceinvoke r1.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.min-chunk-limit", 512);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: int minChunkLimit> = $i2;

        $r9 = virtualinvoke r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl createTransportMetrics()>();

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics> = $r9;

        $r10 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams)>(r1);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CodingErrorAction onMalformedInputAction> = $r10;

        $r11 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.nio.charset.CodingErrorAction getUnmappableInputAction(org.apache.http.params.HttpParams)>(r1);

        r2.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CodingErrorAction onUnMappableInputAction> = $r11;

        return;
    }

    protected org.apache.http.impl.io.HttpTransportMetricsImpl createTransportMetrics()
    {
        org.apache.http.impl.io.HttpTransportMetricsImpl $r0;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r0 = new org.apache.http.impl.io.HttpTransportMetricsImpl;

        specialinvoke $r0.<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>();

        return $r0;
    }

    public int capacity()
    {
        int $i0;
        byte[] $r1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int length()
    {
        int $i0, $i1, $i2;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public int available()
    {
        int $i0, $i1, $i2;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int capacity()>();

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int length()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    protected int fillBuffer() throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r6;
        long $l2;
        int $i0, $i1, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i12, $i14;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        java.io.InputStream $r5;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        if $i0 <= 0 goto label2;

        $i4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i6 = $i4 - $i3;

        if i6 <= 0 goto label1;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r2, 0, i6);

     label1:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = i6;

     label2:
        $i7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i8 = lengthof $r4;

        $i9 = $i8 - $i7;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream>;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i10 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r6, $i7, $i9);

        $i12 = (int) -1;

        if $i10 != $i12 goto label3;

        $i14 = (int) -1;

        return $i14;

     label3:
        $i1 = $i7 + $i10;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = $i1;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l2 = (long) $i10;

        virtualinvoke $r1.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l2);

        return $i10;
    }

    protected boolean hasBufferedData()
    {
        int $i0, $i1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        short $s3, $s9;
        byte $b2;
        int $i0, $i1, $i4, $i6, $i8, $i10;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

     label1:
        $z0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        $i6 = (int) -1;

        if $i4 != $i6 goto label1;

        $i8 = (int) -1;

        return $i8;

     label2:
        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i1 = $i0 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

        $b2 = $r1[$i0];

        $s9 = (short) $b2;

        $s3 = $s9 & 255;

        $i10 = (int) $s3;

        return $i10;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0, $r2, $r5;
        long $l12;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        boolean $z0, $z1;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r4;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;
        java.io.InputStream $r3;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r0 := @parameter0: byte[];

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 == 0 goto label2;

        $i14 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i13 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i15 = $i14 - $i13;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i15);

        $r5 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i17 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i17, r0, i6, $i16);

        $i18 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i19 = $i18 + $i16;

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i19;

        return $i16;

     label2:
        $i1 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int minChunkLimit>;

        if i0 <= $i1 goto label4;

        $r3 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream>;

        $i11 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r0, i6, i0);

        if $i11 <= 0 goto label3;

        $r4 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l12 = (long) $i11;

        virtualinvoke $r4.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l12);

     label3:
        return $i11;

     label4:
        $z1 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 != 0 goto label6;

        $i10 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        $i21 = (int) -1;

        if $i10 != $i21 goto label5;

        $i23 = (int) -1;

        return $i23;

     label5:
        goto label4;

     label6:
        $i3 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i2 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i4 = $i3 - $i2;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i4);

        $r2 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i7 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i7, r0, i6, $i5);

        $i8 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i9 = $i8 + $i5;

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i9;

        return $i5;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r0;
        int $i0, $i1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>(r0, 0, $i0);

        return $i1;
    }

    private int locateLF()
    {
        byte[] $r1;
        byte $b1;
        int $i0, i2, $i3, $i5;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        i2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

     label1:
        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if i2 >= $i0 goto label3;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $b1 = $r1[i2];

        $i3 = (int) $b1;

        if $i3 != 10 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i5 = (int) -1;

        return $i5;
    }

    public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        byte[] $r5, $r8;
        org.apache.http.util.ByteArrayBuffer $r2, $r3, $r6, $r7, $r9;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, $i19, $i21, $i23, $i25;
        java.io.IOException $r12;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;
        java.lang.IllegalArgumentException $r11;
        org.apache.http.util.CharArrayBuffer r0;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r11;

     label1:
        i14 = 0;

        z3 = 1;

     label2:
        if z3 == 0 goto label8;

        $i1 = specialinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int locateLF()>();

        $i19 = (int) -1;

        if $i1 == $i19 goto label4;

        $r7 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z2 = virtualinvoke $r7.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $i13 = specialinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)>(r0, $i1);

        return $i13;

     label3:
        z3 = 0;

        $i10 = $i1 + 1;

        $i9 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i15 = $i10 - $i9;

        $r9 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r8 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i11 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r9.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r8, $i11, i15);

        $i12 = $i1 + 1;

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i12;

        goto label6;

     label4:
        $z1 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 == 0 goto label5;

        $i6 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i5 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i16 = $i6 - $i5;

        $r6 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r5 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i7 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r5, $i7, i16);

        $i8 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i8;

     label5:
        $i2 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        i14 = $i2;

        $i21 = (int) -1;

        if $i2 != $i21 goto label6;

        z3 = 0;

     label6:
        $i17 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i17 <= 0 goto label7;

        $r3 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i3 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i4 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i3 < $i4 goto label7;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r12;

     label7:
        goto label2;

     label8:
        $i23 = (int) -1;

        if i14 != $i23 goto label9;

        $r2 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z0 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $i25 = (int) -1;

        return $i25;

     label9:
        $i0 = specialinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)>(r0);

        return $i0;
    }

    private int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        byte[] $r3;
        java.nio.ByteBuffer $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9;
        org.apache.http.util.ByteArrayBuffer $r1, $r2, $r6, $r7, $r8, $r9;
        boolean $z0;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r5;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r5 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i0 = virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: int length()>();

        i5 = $i0;

        if $i0 <= 0 goto label2;

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i1 = $i0 - 1;

        $i2 = virtualinvoke $r8.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i1);

        if $i2 != 10 goto label1;

        $i7 = (int) -1;

        i5 = $i0 + $i7;

     label1:
        if i5 <= 0 goto label2;

        $r9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i3 = i5 - 1;

        $i4 = virtualinvoke $r9.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i3);

        if $i4 != 13 goto label2;

        $i9 = (int) -1;

        i5 = i5 + $i9;

     label2:
        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke r5.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>($r7, 0, i5);

        goto label4;

     label3:
        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r3 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r3, 0, i5);

        i5 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)>(r5, $r4);

     label4:
        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: void clear()>();

        return i5;
    }

    private int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer, int) throws java.io.IOException
    {
        byte[] $r1, $r4, $r5;
        java.nio.ByteBuffer $r2;
        byte $b3;
        int i0, $i1, $i2, i4, $i5, i6, $i7, $i9;
        boolean $z0;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r3;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r3 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i4 := @parameter1: int;

        i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i1 = i4 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

        if i4 <= i0 goto label1;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i2 = i4 - 1;

        $b3 = $r5[$i2];

        $i7 = (int) $b3;

        if $i7 != 13 goto label1;

        $i9 = (int) -1;

        i4 = i4 + $i9;

     label1:
        $i5 = i4 - i0;

        i6 = $i5;

        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r4, i0, $i5);

        goto label3;

     label2:
        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, i0, $i5);

        i6 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)>(r3, $r2);

     label3:
        return i6;
    }

    private int appendDecoded(org.apache.http.util.CharArrayBuffer, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        java.nio.charset.CoderResult $r7, $r12;
        java.nio.charset.Charset $r14;
        java.nio.charset.CodingErrorAction $r16, $r18;
        int $i0, $i1, i2, i3;
        boolean $z0, $z1;
        java.nio.CharBuffer $r3, $r5, $r9, $r10, $r13;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;
        java.nio.charset.CharsetDecoder $r2, $r4, $r6, $r11, $r15, $r17, $r19;
        org.apache.http.util.CharArrayBuffer r8;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r8 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r0 := @parameter1: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        if $r2 != null goto label2;

        $r14 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.Charset charset>;

        $r15 = virtualinvoke $r14.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder> = $r15;

        $r17 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        $r16 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CodingErrorAction onMalformedInputAction>;

        virtualinvoke $r17.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r16);

        $r19 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        $r18 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CodingErrorAction onUnMappableInputAction>;

        virtualinvoke $r19.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r18);

     label2:
        $r3 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        if $r3 != null goto label3;

        $r13 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf> = $r13;

     label3:
        $r4 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        i2 = 0;

     label4:
        $z1 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label5;

        $r11 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        $r10 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        $r12 = virtualinvoke $r11.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r0, $r10, 1);

        $i1 = specialinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)>($r12, r8, r0);

        i2 = i2 + $i1;

        goto label4;

     label5:
        $r6 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.CharsetDecoder decoder>;

        $r5 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        $r7 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>($r5);

        $i0 = specialinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)>($r7, r8, r0);

        i3 = i2 + $i0;

        $r9 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        virtualinvoke $r9.<java.nio.CharBuffer: java.nio.Buffer clear()>();

        return i3;
    }

    private int handleDecodingResult(java.nio.charset.CoderResult, org.apache.http.util.CharArrayBuffer, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.CharBuffer $r2, $r3, $r4, $r6, $r8;
        char $c1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;
        java.nio.ByteBuffer r7;
        org.apache.http.util.CharArrayBuffer r5;
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0, $z1;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r0 := @parameter0: java.nio.charset.CoderResult;

        r5 := @parameter1: org.apache.http.util.CharArrayBuffer;

        r7 := @parameter2: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.nio.charset.CoderResult: void throwException()>();

     label1:
        $r2 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r3 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        $i0 = virtualinvoke $r3.<java.nio.CharBuffer: int remaining()>();

     label2:
        $r8 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        $z1 = virtualinvoke $r8.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label3;

        $r6 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        $c1 = virtualinvoke $r6.<java.nio.CharBuffer: char get()>();

        virtualinvoke r5.<org.apache.http.util.CharArrayBuffer: void append(char)>($c1);

        goto label2;

     label3:
        $r4 = r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.CharBuffer cbuf>;

        virtualinvoke $r4.<java.nio.CharBuffer: java.nio.CharBuffer compact()>();

        return $i0;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.http.util.CharArrayBuffer $r3;
        int $i0, $i2;
        org.apache.http.impl.io.AbstractSessionInputBuffer r1;
        java.lang.String $r2;

        r1 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r3 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        $i0 = virtualinvoke r1.<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r3);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r2 = virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r2;

     label1:
        return null;
    }

    public org.apache.http.io.HttpTransportMetrics getMetrics()
    {
        org.apache.http.impl.io.HttpTransportMetricsImpl $r1;
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        return $r1;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.http.impl.io.AbstractSessionInputBuffer: java.nio.charset.Charset ASCII> = $r0;

        return;
    }
}
