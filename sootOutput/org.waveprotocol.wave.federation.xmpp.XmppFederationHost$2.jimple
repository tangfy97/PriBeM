class org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2 extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener
{
    final org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback;
    final org.xmpp.packet.IQ val$request;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationHost this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost, org.waveprotocol.wave.federation.xmpp.PacketCallback, org.xmpp.packet.IQ)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2 r0;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r1;
        org.xmpp.packet.IQ r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r3 := @parameter2: org.xmpp.packet.IQ;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.waveprotocol.wave.federation.xmpp.XmppFederationHost this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.xmpp.packet.IQ val$request> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2 r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback>;

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1);

        return;
    }

    public void onSuccess(java.util.List, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, long)
    {
        byte[] $r19;
        long l0, $l1;
        byte $b2;
        int $i3;
        java.lang.String $r9, $r12, $r20;
        boolean $z0, $z1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2 r0;
        java.util.Iterator $r6;
        com.google.protobuf.ByteString r16;
        java.util.List r5;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r8;
        org.dom4j.Element $r3, $r4, $r10, $r11, $r13, $r14, $r17, $r18;
        java.lang.Object $r15;
        org.xmpp.packet.IQ $r1, $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r7;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2;

        r5 := @parameter0: java.util.List;

        r7 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        l0 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.xmpp.packet.IQ val$request>;

        $r2 = staticinvoke <org.xmpp.packet.IQ: org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)>($r1);

        $r3 = virtualinvoke $r2.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("items");

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.google.protobuf.ByteString) $r15;

        $r17 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r18 = interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("applied-delta", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r19 = virtualinvoke r16.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r20 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(byte[])>($r19);

        interfaceinvoke $r18.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r20);

        goto label1;

     label2:
        if r7 == null goto label3;

        $z1 = virtualinvoke r7.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: boolean hasVersion()>();

        if $z1 == 0 goto label3;

        $l1 = virtualinvoke r7.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $r13 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r14 = interfaceinvoke $r13.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("commit-notice", "http://waveprotocol.org/protocol/0.2/waveserver");

        interfaceinvoke $r14.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("version", $r12);

     label3:
        $b2 = l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label4;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r10 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r11 = interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("history-truncated", "http://waveprotocol.org/protocol/0.2/waveserver");

        interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("version", $r9);

     label4:
        $r8 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback>;

        interfaceinvoke $r8.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>($r2);

        return;
    }
}
