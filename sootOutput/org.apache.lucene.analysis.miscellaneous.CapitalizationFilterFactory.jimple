public class org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory
{
    public static final java.lang.String KEEP;
    public static final java.lang.String KEEP_IGNORE_CASE;
    public static final java.lang.String OK_PREFIX;
    public static final java.lang.String MIN_WORD_LENGTH;
    public static final java.lang.String MAX_WORD_COUNT;
    public static final java.lang.String MAX_TOKEN_LENGTH;
    public static final java.lang.String ONLY_FIRST_WORD;
    public static final java.lang.String FORCE_FIRST_LETTER;
    org.apache.lucene.analysis.util.CharArraySet keep;
    java.util.Collection okPrefix;
    final int minWordLength;
    final int maxWordCount;
    final int maxTokenLength;
    final boolean onlyFirstWord;
    final boolean forceFirstLetter;

    public void <init>(java.util.Map)
    {
        java.util.ArrayList $r10;
        org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory r0;
        java.util.Map r1;
        int $i0, $i1, $i2;
        java.lang.String $r9, r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r11;
        java.util.Collection $r14;
        java.util.Set $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.lucene.util.Version $r17;
        java.util.List $r2;
        char[] $r15;
        org.apache.lucene.analysis.util.CharArraySet $r16, $r18;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.Object $r12;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Collection okPrefix> = $r2;

        virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: void assureMatchVersion()>();

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "keepIgnoreCase", 0);

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Set getSet(java.util.Map,java.lang.String)>(r1, "keep");

        if $r3 == null goto label1;

        $r16 = new org.apache.lucene.analysis.util.CharArraySet;

        $r17 = r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        specialinvoke $r16.<org.apache.lucene.analysis.util.CharArraySet: void <init>(org.apache.lucene.util.Version,int,boolean)>($r17, 10, $z0);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: org.apache.lucene.analysis.util.CharArraySet keep> = $r16;

        $r18 = r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: org.apache.lucene.analysis.util.CharArraySet keep>;

        virtualinvoke $r18.<org.apache.lucene.analysis.util.CharArraySet: boolean addAll(java.util.Collection)>($r3);

     label1:
        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Set getSet(java.util.Map,java.lang.String)>(r1, "okPrefix");

        if $r4 == null goto label3;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Collection okPrefix> = $r10;

        $r11 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r14 = r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Collection okPrefix>;

        $r15 = virtualinvoke r13.<java.lang.String: char[] toCharArray()>();

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r15);

        goto label2;

     label3:
        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minWordLength", 0);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int minWordLength> = $i0;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "maxWordCount", 2147483647);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int maxWordCount> = $i1;

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "maxTokenLength", 2147483647);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int maxTokenLength> = $i2;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "onlyFirstWord", 1);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean onlyFirstWord> = $z1;

        $z2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "forceFirstLetter", 1);

        r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean forceFirstLetter> = $z2;

        $z3 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        return;
    }

    public org.apache.lucene.analysis.miscellaneous.CapitalizationFilter create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.miscellaneous.CapitalizationFilter $r0;
        org.apache.lucene.analysis.TokenStream r1;
        java.util.Collection $r3;
        org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory r2;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.util.CharArraySet $r4;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.miscellaneous.CapitalizationFilter;

        $z1 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean onlyFirstWord>;

        $r4 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: org.apache.lucene.analysis.util.CharArraySet keep>;

        $z0 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: boolean forceFirstLetter>;

        $r3 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.util.Collection okPrefix>;

        $i2 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int minWordLength>;

        $i1 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int maxWordCount>;

        $i0 = r2.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: int maxTokenLength>;

        specialinvoke $r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilter: void <init>(org.apache.lucene.analysis.TokenStream,boolean,org.apache.lucene.analysis.util.CharArraySet,boolean,java.util.Collection,int,int,int)>(r1, $z1, $r4, $z0, $r3, $i2, $i1, $i0);

        return $r0;
    }

    public volatile org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.miscellaneous.CapitalizationFilter $r2;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: org.apache.lucene.analysis.miscellaneous.CapitalizationFilter create(org.apache.lucene.analysis.TokenStream)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String FORCE_FIRST_LETTER> = "forceFirstLetter";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String ONLY_FIRST_WORD> = "onlyFirstWord";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String MAX_TOKEN_LENGTH> = "maxTokenLength";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String MAX_WORD_COUNT> = "maxWordCount";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String MIN_WORD_LENGTH> = "minWordLength";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String OK_PREFIX> = "okPrefix";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String KEEP_IGNORE_CASE> = "keepIgnoreCase";

        <org.apache.lucene.analysis.miscellaneous.CapitalizationFilterFactory: java.lang.String KEEP> = "keep";

        return;
    }
}
