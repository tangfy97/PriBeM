public class org.waveprotocol.box.server.util.BlockingSuccessFailCallback extends java.lang.Object implements org.waveprotocol.box.server.util.SuccessFailCallback
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final java.util.concurrent.atomic.AtomicReference successResult;
    private final java.util.concurrent.atomic.AtomicReference failureResult;
    private final java.util.concurrent.CountDownLatch awaitLatch;
    private final java.lang.String description;

    private void <init>(java.lang.String)
    {
        java.util.concurrent.CountDownLatch $r3;
        org.waveprotocol.box.server.util.BlockingSuccessFailCallback r0;
        java.lang.String r4;
        java.util.concurrent.atomic.AtomicReference $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.util.BlockingSuccessFailCallback;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference successResult> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference failureResult> = $r2;

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.CountDownLatch awaitLatch> = $r3;

        r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description> = r4;

        return;
    }

    public static org.waveprotocol.box.server.util.BlockingSuccessFailCallback create()
    {
        java.lang.Throwable $r0;
        java.lang.StackTraceElement[] $r1;
        int $i0;
        java.lang.StackTraceElement r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r11, $r12;
        org.waveprotocol.box.server.util.BlockingSuccessFailCallback $r3;
        java.lang.String $r6, $r9, $r13;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        r2 = $r1[1];

        $r3 = new org.waveprotocol.box.server.util.BlockingSuccessFailCallback;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created at ");

        $r6 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke r2.<java.lang.StackTraceElement: int getLineNumber()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: void <init>(java.lang.String)>($r13);

        return $r3;
    }

    public org.waveprotocol.wave.model.util.Pair await(long, java.util.concurrent.TimeUnit)
    {
        java.lang.IllegalStateException $r32;
        org.waveprotocol.wave.util.logging.Log $r4, $r17, $r27;
        boolean $z0;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r8, $r9, $r16, $r19, $r20, $r21, $r22, $r23, $r26, $r29, $r30;
        long $l0, l1, $l2, $l3;
        java.util.concurrent.atomic.AtomicReference $r11, $r13;
        java.lang.String $r5, $r10, $r18, $r24, $r28, $r31;
        org.waveprotocol.wave.model.util.Pair $r15;
        java.util.concurrent.TimeUnit r1;
        java.lang.InterruptedException $r25;
        java.lang.Object $r12, $r14;
        org.waveprotocol.box.server.util.BlockingSuccessFailCallback r0;

        r0 := @this: org.waveprotocol.box.server.util.BlockingSuccessFailCallback;

        l1 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.CountDownLatch awaitLatch>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l1, r1);

        if $z0 != 0 goto label3;

        $r17 = <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description>;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": timed out while waiting for ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r24);

     label2:
        return null;

     label3:
        $r4 = <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": await took ");

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - $l0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r10);

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

        $r27 = <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description>;

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": interrupted while waiting");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r31, $r25);

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r25);

        throw $r32;

     label6:
        $r11 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference successResult>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r13 = r0.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference failureResult>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.util.Pair: org.waveprotocol.wave.model.util.Pair of(java.lang.Object,java.lang.Object)>($r12, $r14);

        return $r15;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public void onFailure(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference $r10, $r12;
        org.waveprotocol.wave.util.logging.Log $r1;
        java.lang.String $r3, $r9;
        boolean $z0, $z1, $z2;
        java.util.concurrent.CountDownLatch $r14;
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8;
        java.lang.Object r6, $r11, $r13;
        org.waveprotocol.box.server.util.BlockingSuccessFailCallback r2;

        r2 := @this: org.waveprotocol.box.server.util.BlockingSuccessFailCallback;

        r6 := @parameter0: java.lang.Object;

        $r1 = <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description>;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": onFailure(");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r9);

        if r6 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r10 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference failureResult>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r6);

        if $r11 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r12 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference successResult>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r13 != null goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z2);

        $r14 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.CountDownLatch awaitLatch>;

        virtualinvoke $r14.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onSuccess(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference $r10, $r11, $r13;
        org.waveprotocol.wave.util.logging.Log $r1;
        java.lang.String $r3, $r9;
        boolean $z0, $z1, $z2;
        java.util.concurrent.CountDownLatch $r15;
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8;
        java.lang.Object r6, $r12, $r14;
        org.waveprotocol.box.server.util.BlockingSuccessFailCallback r2;

        r2 := @this: org.waveprotocol.box.server.util.BlockingSuccessFailCallback;

        r6 := @parameter0: java.lang.Object;

        $r1 = <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.lang.String description>;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": onSuccess(");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r9);

        $r10 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference successResult>;

        if $r10 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r11 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference successResult>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r6);

        if $r12 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r13 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.atomic.AtomicReference failureResult>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r14 != null goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z2);

        $r15 = r2.<org.waveprotocol.box.server.util.BlockingSuccessFailCallback: java.util.concurrent.CountDownLatch awaitLatch>;

        virtualinvoke $r15.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/util/BlockingSuccessFailCallback;");

        <org.waveprotocol.box.server.util.BlockingSuccessFailCallback: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
