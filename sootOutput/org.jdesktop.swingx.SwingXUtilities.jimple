public final class org.jdesktop.swingx.SwingXUtilities extends java.lang.Object
{
    private static java.lang.String STYLESHEET;

    private void <init>()
    {
        org.jdesktop.swingx.SwingXUtilities r0;

        r0 := @this: org.jdesktop.swingx.SwingXUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void updateMnemonicBinding(javax.swing.JComponent, java.lang.String)
    {
        javax.swing.JComponent r0;
        java.lang.String r1;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void updateMnemonicBinding(javax.swing.JComponent,java.lang.String,java.lang.String)>(r0, r1, null);

        return;
    }

    public static void updateMnemonicBinding(javax.swing.JComponent, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.Integer $r6;
        javax.swing.plaf.ComponentInputMapUIResource $r13;
        int $i0;
        java.lang.String r9, r11;
        java.lang.reflect.Method $r3;
        javax.swing.JComponent r0;
        javax.swing.KeyStroke $r8, $r10, $r12;
        java.lang.Class[] $r2;
        java.lang.RuntimeException $r16;
        java.lang.IllegalArgumentException $r15;
        java.lang.Exception $r14;
        java.lang.Class $r1;
        java.lang.Object $r5;
        javax.swing.InputMap $r7, r17;

        r0 := @parameter0: javax.swing.JComponent;

        r9 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getMnemonic", $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label2:
        goto label5;

     label3:
        $r16 := @caughtexception;

        throw $r16;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("unable to access mnemonic", $r14);

        throw $r15;

     label5:
        $r7 = staticinvoke <javax.swing.SwingUtilities: javax.swing.InputMap getUIInputMap(javax.swing.JComponent,int)>(r0, 2);

        r17 = $r7;

        if $i0 == 0 goto label7;

        if $r7 != null goto label6;

        $r13 = new javax.swing.plaf.ComponentInputMapUIResource;

        specialinvoke $r13.<javax.swing.plaf.ComponentInputMapUIResource: void <init>(javax.swing.JComponent)>(r0);

        r17 = $r13;

        staticinvoke <javax.swing.SwingUtilities: void replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)>(r0, 2, $r13);

     label6:
        virtualinvoke r17.<javax.swing.InputMap: void clear()>();

        $r8 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int,boolean)>($i0, 8, 0);

        virtualinvoke r17.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r8, r9);

        $r10 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int,boolean)>($i0, 8, 1);

        virtualinvoke r17.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r10, r11);

        $r12 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int,boolean)>($i0, 0, 1);

        virtualinvoke r17.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r12, r11);

        goto label8;

     label7:
        if $r7 == null goto label8;

        virtualinvoke $r7.<javax.swing.InputMap: void clear()>();

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static java.awt.Component[] getChildren(java.awt.Component)
    {
        java.awt.Component r0, $r5;
        javax.swing.MenuElement $r2, $r4;
        javax.swing.MenuElement[] $r3;
        int $i0, $i1, i2;
        java.awt.Component[] r6;
        java.awt.Container $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        r6 = null;

        $z0 = r0 instanceof javax.swing.MenuElement;

        if $z0 == 0 goto label3;

        $r2 = (javax.swing.MenuElement) r0;

        $r3 = interfaceinvoke $r2.<javax.swing.MenuElement: javax.swing.MenuElement[] getSubElements()>();

        $i0 = lengthof $r3;

        r6 = newarray (java.awt.Component)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r4 = $r3[i2];

        $r5 = interfaceinvoke $r4.<javax.swing.MenuElement: java.awt.Component getComponent()>();

        r6[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $z1 = r0 instanceof java.awt.Container;

        if $z1 == 0 goto label4;

        $r1 = (java.awt.Container) r0;

        r6 = virtualinvoke $r1.<java.awt.Container: java.awt.Component[] getComponents()>();

     label4:
        return r6;
    }

    public static void setComponentTreeEnabled(java.awt.Component, boolean)
    {
        java.awt.Component[] $r1;
        int $i0, i1;
        java.awt.Component r0, $r2;
        boolean z0;

        r0 := @parameter0: java.awt.Component;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<java.awt.Component: void setEnabled(boolean)>(z0);

        $r1 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: java.awt.Component[] getChildren(java.awt.Component)>(r0);

        if $r1 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = $r1[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setComponentTreeEnabled(java.awt.Component,boolean)>($r2, z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setComponentTreeLocale(java.awt.Component, java.util.Locale)
    {
        java.util.Locale r1;
        java.awt.Component[] $r2;
        int $i0, i1;
        java.awt.Component r0, $r3;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.util.Locale;

        virtualinvoke r0.<java.awt.Component: void setLocale(java.util.Locale)>(r1);

        $r2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: java.awt.Component[] getChildren(java.awt.Component)>(r0);

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = $r2[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setComponentTreeLocale(java.awt.Component,java.util.Locale)>($r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setComponentTreeBackground(java.awt.Component, java.awt.Color)
    {
        java.awt.Color r1;
        java.awt.Component[] $r2;
        int $i0, i1;
        java.awt.Component r0, $r3;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Color;

        virtualinvoke r0.<java.awt.Component: void setBackground(java.awt.Color)>(r1);

        $r2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: java.awt.Component[] getChildren(java.awt.Component)>(r0);

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = $r2[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setComponentTreeBackground(java.awt.Component,java.awt.Color)>($r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setComponentTreeForeground(java.awt.Component, java.awt.Color)
    {
        java.awt.Color r1;
        java.awt.Component[] $r2;
        int $i0, i1;
        java.awt.Component r0, $r3;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Color;

        virtualinvoke r0.<java.awt.Component: void setForeground(java.awt.Color)>(r1);

        $r2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: java.awt.Component[] getChildren(java.awt.Component)>(r0);

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = $r2[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setComponentTreeForeground(java.awt.Component,java.awt.Color)>($r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setComponentTreeFont(java.awt.Component, java.awt.Font)
    {
        java.awt.Font r1;
        java.awt.Component[] $r2;
        int $i0, i1;
        java.awt.Component r0, $r3;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Font;

        virtualinvoke r0.<java.awt.Component: void setFont(java.awt.Font)>(r1);

        $r2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: java.awt.Component[] getChildren(java.awt.Component)>(r0);

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = $r2[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setComponentTreeFont(java.awt.Component,java.awt.Font)>($r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setHtmlFont(javax.swing.text.html.HTMLDocument, java.awt.Font)
    {
        java.lang.IllegalStateException $r12;
        javax.swing.text.html.StyleSheet $r9;
        java.lang.Object[] $r0;
        java.awt.Font r1;
        java.io.IOException $r11;
        java.lang.Integer $r4, $r6;
        javax.swing.text.html.HTMLDocument r8;
        java.io.StringReader $r10;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r5, $r7;

        r8 := @parameter0: javax.swing.text.html.HTMLDocument;

        r1 := @parameter1: java.awt.Font;

        $r2 = <org.jdesktop.swingx.SwingXUtilities: java.lang.String STYLESHEET>;

        $r0 = newarray (java.lang.Object)[4];

        $r3 = virtualinvoke r1.<java.awt.Font: java.lang.String getName()>();

        $r0[0] = $r3;

        $i0 = virtualinvoke r1.<java.awt.Font: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[1] = $r4;

        $r5 = virtualinvoke r1.<java.awt.Font: java.lang.String getName()>();

        $r0[2] = $r5;

        $i1 = virtualinvoke r1.<java.awt.Font: int getSize()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r0);

     label1:
        $r9 = virtualinvoke r8.<javax.swing.text.html.HTMLDocument: javax.swing.text.html.StyleSheet getStyleSheet()>();

        $r10 = new java.io.StringReader;

        specialinvoke $r10.<java.io.StringReader: void <init>(java.lang.String)>($r7);

        virtualinvoke $r9.<javax.swing.text.html.StyleSheet: void loadRules(java.io.Reader,java.net.URL)>($r10, null);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void updateAllComponentTreeUIs()
    {
        java.awt.Window[] $r0;
        java.awt.Window r1;
        int i0, i1;

        $r0 = staticinvoke <java.awt.Window: java.awt.Window[] getWindows()>();

        i0 = lengthof $r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = $r0[i1];

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void updateAllComponentTreeUIs(java.awt.Window)
    {
        java.awt.Window[] $r1;
        java.awt.Window r0, r2;
        int i0, i1;

        r0 := @parameter0: java.awt.Window;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>(r0);

        $r1 = virtualinvoke r0.<java.awt.Window: java.awt.Window[] getOwnedWindows()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void updateAllComponentTreeUIs(java.awt.Window)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.Object getAncestor(java.lang.Class, java.awt.Component)
    {
        javax.swing.JPopupMenu $r2;
        java.lang.Class r0;
        java.awt.Component r1, r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.awt.Component;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        r3 = virtualinvoke r1.<java.awt.Component: java.awt.Container getParent()>();

     label3:
        if r3 == null goto label6;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 != 0 goto label6;

        $z1 = r3 instanceof javax.swing.JPopupMenu;

        if $z1 == 0 goto label4;

        $r2 = (javax.swing.JPopupMenu) r3;

        $r4 = virtualinvoke $r2.<javax.swing.JPopupMenu: java.awt.Component getInvoker()>();

        goto label5;

     label4:
        $r4 = virtualinvoke r3.<java.awt.Component: java.awt.Container getParent()>();

     label5:
        r3 = $r4;

        goto label3;

     label6:
        return r3;
    }

    public static boolean isDescendingFrom(java.awt.Component, java.awt.Component)
    {
        javax.swing.JPopupMenu $r1;
        java.awt.Component r0, $r2, r3;
        boolean $z0;

        r3 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.awt.Component;

     label1:
        if r3 == null goto label4;

        $z0 = r3 instanceof javax.swing.JPopupMenu;

        if $z0 == 0 goto label2;

        $r1 = (javax.swing.JPopupMenu) r3;

        $r2 = virtualinvoke $r1.<javax.swing.JPopupMenu: java.awt.Component getInvoker()>();

        r3 = $r2;

        if $r2 != null goto label2;

        return 0;

     label2:
        if r3 != r0 goto label3;

        return 1;

     label3:
        r3 = virtualinvoke r3.<java.awt.Component: java.awt.Container getParent()>();

        goto label1;

     label4:
        return 0;
    }

    static javax.swing.RepaintManager getTranslucentRepaintManager(javax.swing.RepaintManager)
    {
        org.jdesktop.swingx.ForwardingRepaintManager $r2;
        org.jdesktop.swingx.RepaintManagerX $r5;
        javax.swing.RepaintManager r0, r3, $r4;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r0 := @parameter0: javax.swing.RepaintManager;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r1 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/jdesktop/swingx/TranslucentRepaintManager;");

        if $z0 != 0 goto label3;

        $z1 = r3 instanceof org.jdesktop.swingx.ForwardingRepaintManager;

        if $z1 == 0 goto label2;

        $r2 = (org.jdesktop.swingx.ForwardingRepaintManager) r3;

        r3 = virtualinvoke $r2.<org.jdesktop.swingx.ForwardingRepaintManager: javax.swing.RepaintManager getDelegateManager()>();

        goto label1;

     label2:
        r3 = null;

        goto label1;

     label3:
        if r3 != null goto label4;

        $r5 = new org.jdesktop.swingx.RepaintManagerX;

        $r4 = $r5;

        specialinvoke $r5.<org.jdesktop.swingx.RepaintManagerX: void <init>(javax.swing.RepaintManager)>(r0);

        goto label5;

     label4:
        $r4 = r0;

     label5:
        return $r4;
    }

    public static boolean isUIInstallable(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static void setLeadAnchorWithoutSelection(javax.swing.ListSelectionModel, int, int)
    {
        javax.swing.ListSelectionModel r0;
        int i0, i1, $i3, $i5, $i7, $i9;
        boolean $z0;

        r0 := @parameter0: javax.swing.ListSelectionModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = (int) -1;

        if i1 != $i3 goto label1;

        i1 = i0;

     label1:
        $i5 = (int) -1;

        if i0 != $i5 goto label2;

        $i7 = (int) -1;

        interfaceinvoke r0.<javax.swing.ListSelectionModel: void setAnchorSelectionIndex(int)>($i7);

        $i9 = (int) -1;

        interfaceinvoke r0.<javax.swing.ListSelectionModel: void setLeadSelectionIndex(int)>($i9);

        goto label5;

     label2:
        $z0 = interfaceinvoke r0.<javax.swing.ListSelectionModel: boolean isSelectedIndex(int)>(i0);

        if $z0 == 0 goto label3;

        interfaceinvoke r0.<javax.swing.ListSelectionModel: void addSelectionInterval(int,int)>(i0, i0);

        goto label4;

     label3:
        interfaceinvoke r0.<javax.swing.ListSelectionModel: void removeSelectionInterval(int,int)>(i0, i0);

     label4:
        interfaceinvoke r0.<javax.swing.ListSelectionModel: void setAnchorSelectionIndex(int)>(i1);

     label5:
        return;
    }

    public static boolean shouldIgnore(java.awt.event.MouseEvent, javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        java.awt.event.MouseEvent r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.awt.event.MouseEvent;

        r0 := @parameter1: javax.swing.JComponent;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <javax.swing.SwingUtilities: boolean isLeftMouseButton(java.awt.event.MouseEvent)>(r1);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<java.awt.event.MouseEvent: boolean isConsumed()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static int loc2IndexFileList(javax.swing.JList, java.awt.Point)
    {
        javax.swing.JList r0;
        java.awt.Point r1;
        int $i0, i1, $i3, $i5;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.swing.JList;

        r1 := @parameter1: java.awt.Point;

        $i0 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>(r1);

        i1 = $i0;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r2 = virtualinvoke r0.<javax.swing.JList: java.lang.Object getClientProperty(java.lang.Object)>("List.isFileList");

        $z0 = $r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Boolean) $r2;

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean pointIsInActualBounds(javax.swing.JList,int,java.awt.Point)>(r0, $i0, r1);

        if $z2 != 0 goto label1;

        $i5 = (int) -1;

        i1 = $i5;

     label1:
        return i1;
    }

    private static boolean pointIsInActualBounds(javax.swing.JList, int, java.awt.Point)
    {
        java.awt.Rectangle $r6;
        java.awt.Point r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        javax.swing.JList r0;
        java.awt.Component $r4;
        java.awt.ComponentOrientation $r7;
        javax.swing.ListCellRenderer $r1;
        java.awt.Dimension $r5;
        java.lang.Object $r3;
        javax.swing.ListModel $r2;

        r0 := @parameter0: javax.swing.JList;

        i0 := @parameter1: int;

        r8 := @parameter2: java.awt.Point;

        $r1 = virtualinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        $r2 = virtualinvoke r0.<javax.swing.JList: javax.swing.ListModel getModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i0);

        $r4 = interfaceinvoke $r1.<javax.swing.ListCellRenderer: java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)>(r0, $r3, i0, 0, 0);

        $r5 = virtualinvoke $r4.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        $r6 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>(i0, i0);

        $r7 = virtualinvoke $r4.<java.awt.Component: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r7.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 != 0 goto label1;

        $i5 = $r6.<java.awt.Rectangle: int x>;

        $i3 = $r6.<java.awt.Rectangle: int width>;

        $i2 = $r5.<java.awt.Dimension: int width>;

        $i4 = $i3 - $i2;

        $i6 = $i5 + $i4;

        $r6.<java.awt.Rectangle: int x> = $i6;

     label1:
        $i1 = $r5.<java.awt.Dimension: int width>;

        $r6.<java.awt.Rectangle: int width> = $i1;

        $z1 = virtualinvoke $r6.<java.awt.Rectangle: boolean contains(java.awt.Point)>(r8);

        return $z1;
    }

    public static void adjustFocus(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        boolean $z0, $z1;

        r0 := @parameter0: javax.swing.JComponent;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean hasFocus()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<javax.swing.JComponent: boolean isRequestFocusEnabled()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<javax.swing.JComponent: void requestFocus()>();

     label1:
        return;
    }

    public static int convertModifiersToDropAction(int, int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i6 = 0;

        $i1 = i0 & 192;

        lookupswitch($i1)
        {
            case 64: goto label3;
            case 128: goto label2;
            case 192: goto label1;
            default: goto label4;
        };

     label1:
        i6 = 1073741824;

        goto label8;

     label2:
        i6 = 1;

        goto label8;

     label3:
        i6 = 2;

        goto label8;

     label4:
        $i3 = i2 & 2;

        if $i3 == 0 goto label5;

        i6 = 2;

        goto label8;

     label5:
        $i4 = i2 & 1;

        if $i4 == 0 goto label6;

        i6 = 1;

        goto label8;

     label6:
        $i5 = i2 & 1073741824;

        if $i5 != 0 goto label7;

        goto label8;

     label7:
        i6 = 1073741824;

     label8:
        $i7 = i6 & i2;

        return $i7;
    }

    static void <clinit>()
    {
        <org.jdesktop.swingx.SwingXUtilities: java.lang.String STYLESHEET> = "body { margin-top: 0; margin-bottom: 0; margin-left: 0; margin-right: 0; font-family: %s; font-size: %dpt;  }a, p, li { margin-top: 0; margin-bottom: 0; margin-left: 0; margin-right: 0; font-family: %s; font-size: %dpt;  }";

        return;
    }
}
