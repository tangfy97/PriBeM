class ucar.util.prefs.Bean$BeanParser extends java.lang.Object
{
    private static boolean debugBean;
    private static java.util.HashMap parsers;
    private java.util.TreeMap properties;
    private java.lang.Object[] args;

    static ucar.util.prefs.Bean$BeanParser getParser(java.lang.Class)
    {
        ucar.util.prefs.Bean$BeanParser $r3, $r4, r6;
        java.lang.Class r0;
        java.util.HashMap $r1, $r5;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <ucar.util.prefs.Bean$BeanParser: java.util.HashMap parsers>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (ucar.util.prefs.Bean$BeanParser) $r2;

        r6 = $r3;

        if null != $r3 goto label1;

        $r4 = new ucar.util.prefs.Bean$BeanParser;

        specialinvoke $r4.<ucar.util.prefs.Bean$BeanParser: void <init>(java.lang.Class)>(r0);

        r6 = $r4;

        $r5 = <ucar.util.prefs.Bean$BeanParser: java.util.HashMap parsers>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label1:
        return r6;
    }

    void <init>(java.lang.Class)
    {
        java.beans.PropertyDescriptor[] $r4;
        java.lang.reflect.Method $r6, $r8;
        boolean $z0, $z1;
        java.beans.IntrospectionException $r26;
        java.beans.PropertyDescriptor $r5, $r7, $r9, $r12, $r16;
        java.lang.StringBuilder $r13, $r15, $r18, $r20, $r22, $r24;
        java.lang.Object[] $r2;
        java.beans.BeanInfo r27;
        int i0, $i1;
        java.lang.String $r11, $r17, $r19, $r23, $r25;
        java.io.PrintStream $r14, $r21;
        java.util.TreeMap $r1, $r10;
        ucar.util.prefs.Bean$BeanParser r0;
        java.lang.Class r3;

        r0 := @this: ucar.util.prefs.Bean$BeanParser;

        r3 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<ucar.util.prefs.Bean$BeanParser: java.util.TreeMap properties> = $r1;

        $r2 = newarray (java.lang.Object)[1];

        r0.<ucar.util.prefs.Bean$BeanParser: java.lang.Object[] args> = $r2;

        r27 = null;

     label1:
        r27 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>(r3, class "Ljava/lang/Object;");

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.beans.IntrospectionException: void printStackTrace()>();

     label4:
        $z0 = <ucar.util.prefs.Bean$BeanParser: boolean debugBean>;

        if $z0 == 0 goto label5;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bean ");

        $r23 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25);

     label5:
        $r4 = interfaceinvoke r27.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i0 = 0;

     label6:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label8;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r6 == null goto label7;

        $r7 = $r4[i0];

        $r8 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r8 == null goto label7;

        $r10 = r0.<ucar.util.prefs.Bean$BeanParser: java.util.TreeMap properties>;

        $r9 = $r4[i0];

        $r11 = virtualinvoke $r9.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r12 = $r4[i0];

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $z1 = <ucar.util.prefs.Bean$BeanParser: boolean debugBean>;

        if $z1 == 0 goto label7;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" property ");

        $r16 = $r4[i0];

        $r17 = virtualinvoke $r16.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label7:
        i0 = i0 + 1;

        goto label6;

     label8:
        return;

        catch java.beans.IntrospectionException from label1 to label2 with label3;
    }

    void writeProperties(java.lang.Object, java.io.PrintWriter) throws java.io.IOException
    {
        java.util.Date $r21;
        java.lang.Long $r20;
        java.lang.reflect.Method $r6;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintWriter r10;
        java.lang.IllegalAccessException $r23;
        java.util.Collection $r2;
        java.lang.reflect.InvocationTargetException $r24;
        java.beans.PropertyDescriptor r5;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r17, $r18, $r26, $r28, $r29, $r30, $r31;
        java.lang.Object[] $r8;
        long $l0;
        java.lang.String $r14, $r19, $r22, $r27, $r32;
        java.io.PrintStream $r12;
        java.util.Iterator $r3;
        java.util.TreeMap $r1;
        ucar.util.prefs.Bean$BeanParser r0;
        java.lang.Object $r4, r7, $r9, r25;

        r0 := @this: ucar.util.prefs.Bean$BeanParser;

        r7 := @parameter0: java.lang.Object;

        r10 := @parameter1: java.io.PrintWriter;

        $r1 = r0.<ucar.util.prefs.Bean$BeanParser: java.util.TreeMap properties>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.beans.PropertyDescriptor) $r4;

        $r6 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

     label02:
        $r8 = (java.lang.Object[]) null;

        $r9 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8);

        r25 = $r9;

        if $r9 != null goto label04;

     label03:
        goto label01;

     label04:
        $z0 = $r9 instanceof java.lang.String;

        if $z0 == 0 goto label05;

        $r22 = (java.lang.String) $r9;

        r25 = staticinvoke <ucar.util.prefs.XMLStore: java.lang.String quote(java.lang.String)>($r22);

        goto label06;

     label05:
        $z1 = $r9 instanceof java.util.Date;

        if $z1 == 0 goto label06;

        $r20 = new java.lang.Long;

        $r21 = (java.util.Date) $r9;

        $l0 = virtualinvoke $r21.<java.util.Date: long getTime()>();

        specialinvoke $r20.<java.lang.Long: void <init>(long)>($l0);

        r25 = $r20;

     label06:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.io.PrintWriter: void print(java.lang.String)>($r32);

        $z3 = <ucar.util.prefs.Bean$BeanParser: boolean debugBean>;

        if $z3 == 0 goto label07;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" property get ");

        $r14 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label07:
        goto label10;

     label08:
        $r24 := @caughtexception;

        goto label10;

     label09:
        $r23 := @caughtexception;

     label10:
        goto label01;

     label11:
        return;

        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label04 to label07 with label08;
        catch java.lang.IllegalAccessException from label02 to label03 with label09;
        catch java.lang.IllegalAccessException from label04 to label07 with label09;
    }

    void readProperties(java.lang.Object, org.xml.sax.Attributes)
    {
        java.lang.Object[] $r12, $r14;
        org.xml.sax.Attributes r7;
        java.lang.String $r8, $r9, $r18, $r24;
        java.lang.reflect.Method $r6;
        boolean $z0, $z1;
        java.io.PrintStream $r16;
        java.lang.IllegalAccessException $r25;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.NumberFormatException $r27;
        java.lang.reflect.InvocationTargetException $r26;
        java.util.TreeMap $r1;
        java.beans.PropertyDescriptor r5;
        ucar.util.prefs.Bean$BeanParser r0;
        java.lang.Object $r4, $r11, r13;
        java.lang.Class $r10;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: ucar.util.prefs.Bean$BeanParser;

        r13 := @parameter0: java.lang.Object;

        r7 := @parameter1: org.xml.sax.Attributes;

        $r1 = r0.<ucar.util.prefs.Bean$BeanParser: java.util.TreeMap properties>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.beans.PropertyDescriptor) $r4;

        $r6 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

     label02:
        $r8 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r9 = interfaceinvoke r7.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>($r8);

        $r10 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $r11 = specialinvoke r0.<ucar.util.prefs.Bean$BeanParser: java.lang.Object getArgument(java.lang.Class,java.lang.String)>($r10, $r9);

        $z1 = <ucar.util.prefs.Bean$BeanParser: boolean debugBean>;

        if $z1 == 0 goto label03;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" property set ");

        $r18 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r24);

     label03:
        if $r11 != null goto label05;

     label04:
        return;

     label05:
        $r12 = r0.<ucar.util.prefs.Bean$BeanParser: java.lang.Object[] args>;

        $r12[0] = $r11;

        $r14 = r0.<ucar.util.prefs.Bean$BeanParser: java.lang.Object[] args>;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r13, $r14);

     label06:
        goto label10;

     label07:
        $r27 := @caughtexception;

        goto label10;

     label08:
        $r26 := @caughtexception;

        goto label10;

     label09:
        $r25 := @caughtexception;

     label10:
        goto label01;

     label11:
        return;

        catch java.lang.NumberFormatException from label02 to label04 with label07;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.reflect.InvocationTargetException from label02 to label04 with label08;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label08;
        catch java.lang.IllegalAccessException from label02 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
    }

    private java.lang.Object getArgument(java.lang.Class, java.lang.String)
    {
        java.lang.Float $r13;
        java.lang.Double $r15;
        java.util.Date $r9;
        long $l0;
        java.lang.Integer $r16;
        java.lang.Long $r11;
        java.lang.Short $r12;
        java.lang.Boolean $r14;
        java.lang.String r8;
        java.lang.Byte $r10;
        ucar.util.prefs.Bean$BeanParser r17;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r17 := @this: ucar.util.prefs.Bean$BeanParser;

        r0 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        if r0 != class "Ljava/lang/String;" goto label1;

        return r8;

     label1:
        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label2;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r8);

        return $r16;

     label2:
        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r2 goto label3;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r8);

        return $r15;

     label3:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label4;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r8);

        return $r14;

     label4:
        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r4 goto label5;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(r8);

        return $r13;

     label5:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r5 goto label6;

        $r12 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>(r8);

        return $r12;

     label6:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r6 goto label7;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r8);

        return $r11;

     label7:
        $r7 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r7 goto label8;

        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>(r8);

        return $r10;

     label8:
        if r0 != class "Ljava/util/Date;" goto label9;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r8);

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>(long)>($l0);

        return $r9;

     label9:
        return null;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <ucar.util.prefs.Bean$BeanParser: boolean debugBean> = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <ucar.util.prefs.Bean$BeanParser: java.util.HashMap parsers> = $r0;

        return;
    }
}
