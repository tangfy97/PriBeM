public class org.apache.cxf.jaxrs.model.MethodDispatcher extends java.lang.Object
{
    private java.util.Map oriToMethod;
    private java.util.Map methodToOri;
    private java.util.concurrent.ConcurrentHashMap proxyMethodMap;

    public void <init>()
    {
        java.util.LinkedHashMap $r1, $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map methodToOri> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.concurrent.ConcurrentHashMap proxyMethodMap> = $r3;

        return;
    }

    void <init>(org.apache.cxf.jaxrs.model.MethodDispatcher, org.apache.cxf.jaxrs.model.ClassResourceInfo)
    {
        org.apache.cxf.jaxrs.model.OperationResourceInfo r8, $r9;
        java.util.LinkedHashMap $r1, $r2;
        java.util.Map $r11, $r13;
        java.lang.reflect.Method $r12, $r14;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Set $r5;
        org.apache.cxf.jaxrs.model.ClassResourceInfo r10;
        java.lang.Object $r7;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0, r4;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r4 := @parameter0: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r10 := @parameter1: org.apache.cxf.jaxrs.model.ClassResourceInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map methodToOri> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.concurrent.ConcurrentHashMap proxyMethodMap> = $r3;

        $r5 = virtualinvoke r4.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.cxf.jaxrs.model.OperationResourceInfo) $r7;

        $r9 = new org.apache.cxf.jaxrs.model.OperationResourceInfo;

        specialinvoke $r9.<org.apache.cxf.jaxrs.model.OperationResourceInfo: void <init>(org.apache.cxf.jaxrs.model.OperationResourceInfo,org.apache.cxf.jaxrs.model.ClassResourceInfo)>(r8, r10);

        $r11 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod>;

        $r12 = virtualinvoke $r9.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        $r13 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map methodToOri>;

        $r14 = virtualinvoke $r9.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r9);

        goto label1;

     label2:
        return;
    }

    public transient void bind(org.apache.cxf.jaxrs.model.OperationResourceInfo, java.lang.reflect.Method[])
    {
        org.apache.cxf.jaxrs.model.OperationResourceInfo r3;
        java.lang.reflect.Method[] r0;
        java.util.Map $r4, $r6;
        int i0, i1;
        java.lang.reflect.Method r1, r5;
        org.apache.cxf.jaxrs.model.MethodDispatcher r2;

        r2 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r3 := @parameter0: org.apache.cxf.jaxrs.model.OperationResourceInfo;

        r0 := @parameter1: java.lang.reflect.Method[];

        r1 = r0[0];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r0[i1];

        $r6 = r2.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map methodToOri>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r2.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        return;
    }

    public org.apache.cxf.jaxrs.model.OperationResourceInfo getOperationResourceInfo(java.lang.reflect.Method)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.cxf.jaxrs.model.OperationResourceInfo $r4;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map methodToOri>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.cxf.jaxrs.model.OperationResourceInfo) $r3;

        return $r4;
    }

    public java.util.Set getOperationResourceInfos()
    {
        java.util.Set $r2;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        $r1 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.reflect.Method getMethod(org.apache.cxf.jaxrs.model.OperationResourceInfo)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.cxf.jaxrs.model.OperationResourceInfo r1;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;
        java.lang.reflect.Method $r4;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r1 := @parameter0: org.apache.cxf.jaxrs.model.OperationResourceInfo;

        $r2 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Map oriToMethod>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    public java.lang.reflect.Method getProxyMethod(java.lang.reflect.Method)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;
        java.lang.reflect.Method r1, $r4;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.concurrent.ConcurrentHashMap proxyMethodMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    public void addProxyMethod(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.cxf.jaxrs.model.MethodDispatcher r0;
        java.lang.reflect.Method r1, r2;

        r0 := @this: org.apache.cxf.jaxrs.model.MethodDispatcher;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        $r3 = r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.concurrent.ConcurrentHashMap proxyMethodMap>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }
}
