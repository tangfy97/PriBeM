public class org.apache.commons.httpclient.HttpConstants extends java.lang.Object
{
    public static final java.lang.String HTTP_ELEMENT_CHARSET;
    public static final java.lang.String DEFAULT_CONTENT_CHARSET;
    private static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$HttpConstants;

    public void <init>()
    {
        org.apache.commons.httpclient.HttpConstants r0;

        r0 := @this: org.apache.commons.httpclient.HttpConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] getBytes(java.lang.String)
    {
        byte[] $r1, $r5;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.logging.Log $r4, $r6;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: US-ASCII. System default encoding used");

     label4:
        $r5 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        return $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getString(byte[], int, int)
    {
        byte[] r0;
        java.lang.IllegalArgumentException $r2;
        int i0, i1;
        org.apache.commons.logging.Log $r4, $r6;
        java.lang.String $r1, $r5;
        java.io.UnsupportedEncodingException $r3;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i0, i1, "US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: US-ASCII. System default encoding used");

     label4:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int)>(r0, i0, i1);

        return $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getString(byte[])
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] getContentBytes(java.lang.String, java.lang.String)
    {
        byte[] $r4, $r8, $r16;
        java.lang.StringBuffer $r9, $r11, $r12, $r13;
        java.lang.String r0, $r14, r15;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        org.apache.commons.logging.Log $r3, $r5, $r7, $r10;
        java.io.UnsupportedEncodingException $r2, $r6;

        r0 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r1;

     label1:
        if r15 == null goto label2;

        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        r15 = "ISO-8859-1";

     label3:
        $r16 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r15);

     label4:
        return $r16;

     label5:
        $r6 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label6;

        $r10 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". HTTP default encoding used");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r14);

     label6:
        $r8 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label7:
        return $r8;

     label8:
        $r2 := @caughtexception;

        $r3 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label9;

        $r5 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: ISO-8859-1. System encoding used");

     label9:
        $r4 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        return $r4;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
        catch java.io.UnsupportedEncodingException from label6 to label7 with label8;
    }

    public static java.lang.String getContentString(byte[], int, int, java.lang.String)
    {
        byte[] r0;
        java.lang.StringBuffer $r9, $r11, $r12, $r13;
        int i0, i1;
        java.lang.String $r4, $r8, $r14, r15, $r16;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        org.apache.commons.logging.Log $r3, $r5, $r7, $r10;
        java.io.UnsupportedEncodingException $r2, $r6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r15 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r1;

     label1:
        if r15 == null goto label2;

        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        r15 = "ISO-8859-1";

     label3:
        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i0, i1, r15);

     label4:
        return $r16;

     label5:
        $r6 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label6;

        $r10 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Default HTTP encoding used");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r14);

     label6:
        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i0, i1, "ISO-8859-1");

     label7:
        return $r8;

     label8:
        $r2 := @caughtexception;

        $r3 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label9;

        $r5 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: ISO-8859-1. System encoding used");

     label9:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r0, i0, i1);

        return $r4;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
        catch java.io.UnsupportedEncodingException from label6 to label7 with label8;
    }

    public static java.lang.String getContentString(byte[], java.lang.String)
    {
        byte[] r0;
        int $i0;
        java.lang.String r1, $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        $i0 = lengthof r0;

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],int,int,java.lang.String)>(r0, 0, $i0, r1);

        return $r2;
    }

    public static byte[] getContentBytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: byte[] getContentBytes(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String getContentString(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],int,int,java.lang.String)>(r0, i0, i1, null);

        return $r1;
    }

    public static java.lang.String getContentString(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static byte[] getAsciiBytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        java.lang.RuntimeException $r4;
        java.lang.IllegalArgumentException $r2;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getAsciiString(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.lang.String $r1;
        java.lang.RuntimeException $r4;
        java.lang.IllegalArgumentException $r2;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i0, i1, "US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getAsciiString(byte[])
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getAsciiString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.HttpConstants: java.lang.String DEFAULT_CONTENT_CHARSET> = "ISO-8859-1";

        <org.apache.commons.httpclient.HttpConstants: java.lang.String HTTP_ELEMENT_CHARSET> = "US-ASCII";

        $r0 = <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpConstants");

        <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
