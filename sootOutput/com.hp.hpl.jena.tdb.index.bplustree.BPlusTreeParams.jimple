public final class com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams extends java.lang.Object
{
    public static boolean CheckingTree;
    public static boolean CheckingNode;
    public static boolean CheckingConcurrency;
    public static final java.lang.String NS;
    public static final java.lang.String ParamOrder;
    public static final java.lang.String ParamKeyLength;
    public static final java.lang.String ParamValueLength;
    public static final java.lang.String ParamBlockSize;
    public static boolean DumpTree;
    public static boolean Logging;
    private static final int Gap;
    public static final int RootId;
    public static final int RootParent;
    public static final int NoParent;
    final int order;
    final com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory;
    final com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory;
    final int MaxRec;
    final int MaxPtr;
    final int MinRec;
    final int MinPtr;
    final int SplitIndex;
    final int HighRec;
    final int HighPtr;
    static int BlockHeaderSize;

    public static void checkAll()
    {
        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree> = 1;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode> = 1;

        return;
    }

    public static void infoAll()
    {
        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree> = 1;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean Logging> = 1;

        return;
    }

    static final boolean logging(org.slf4j.Logger)
    {
        org.slf4j.Logger r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.slf4j.Logger;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean Logging>;

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r2, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r12;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r3, $r5;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $r0 = newarray (java.lang.Object)[8];

        $i0 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int order>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $r3 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory>;

        $i1 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[1] = $r4;

        $r5 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        $i2 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0[2] = $r6;

        $i3 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinRec>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r0[3] = $r7;

        $i4 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxRec>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r0[4] = $r8;

        $i5 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinPtr>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r0[5] = $r9;

        $i6 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r0[6] = $r10;

        $i7 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int SplitIndex>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r0[7] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Order=%d : Records [key=%d, value=%d] : records=[%d,%d] : pointers=[%d,%d] : split=%d", $r0);

        return $r12;
    }

    public static com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams readMeta(com.hp.hpl.jena.tdb.base.file.MetaFile)
    {
        com.hp.hpl.jena.tdb.TDBException $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r4;
        java.lang.NumberFormatException $r5;
        com.hp.hpl.jena.tdb.base.file.MetaFile r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.file.MetaFile;

     label1:
        $r1 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamOrder>;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: int getPropertyAsInteger(java.lang.String)>($r1);

        $r2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamKeyLength>;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: int getPropertyAsInteger(java.lang.String)>($r2);

        $r3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamValueLength>;

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: int getPropertyAsInteger(java.lang.String)>($r3);

        $r4 = new com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: void <init>(int,int,int)>($i0, $i1, $i2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/tdb/index/bplustree/BPlusTreeParams;", "Badly formed metadata for B+Tree");

        $r6 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r6.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Failed to read metadata");

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void addToMetaData(com.hp.hpl.jena.tdb.base.file.MetaFile)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r1;
        com.hp.hpl.jena.tdb.base.file.MetaFile r0;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r3, $r5;
        java.lang.String $r2, $r4, $r6;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.file.MetaFile;

        $r2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamOrder>;

        $i0 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int order>;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: void setProperty(java.lang.String,int)>($r2, $i0);

        $r4 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamKeyLength>;

        $r3 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        $i1 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: void setProperty(java.lang.String,int)>($r4, $i1);

        $r6 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamValueLength>;

        $r5 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        $i2 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: void setProperty(java.lang.String,int)>($r6, $i2);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.MetaFile: void flush()>();

        return;
    }

    public void <init>(int, int, int)
    {
        int i0, i1, i2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new com.hp.hpl.jena.tdb.base.record.RecordFactory;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void <init>(int,int)>(i1, i2);

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: void <init>(int,com.hp.hpl.jena.tdb.base.record.RecordFactory)>(i0, $r1);

        return;
    }

    public void <init>(int, com.hp.hpl.jena.tdb.base.record.RecordFactory)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        java.lang.IllegalArgumentException $r3;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r1, $r2;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BPTree: illegal order (min 2): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int order> = i0;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory> = r1;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory()>();

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory> = $r2;

        $i1 = 2 * i0;

        $i2 = $i1 - 1;

        $i3 = $i2 + 0;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxRec> = $i3;

        $i4 = 2 * i0;

        $i5 = $i4 + 0;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr> = $i5;

        $i6 = i0 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinRec> = $i6;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinPtr> = i0;

        $i7 = i0 - 1;

        $i8 = $i7 + 0;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int SplitIndex> = $i8;

        $i9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $i10 = $i9 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int HighPtr> = $i10;

        $i11 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int HighPtr>;

        $i12 = $i11 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int HighRec> = $i12;

        return;
    }

    public int getOrder()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int order>;

        return $i0;
    }

    public int getPtrLength()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        return 4;
    }

    public int getRecordLength()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        return $i0;
    }

    public com.hp.hpl.jena.tdb.base.record.RecordFactory getRecordFactory()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        return $r1;
    }

    public int getKeyLength()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        return $i0;
    }

    public com.hp.hpl.jena.tdb.base.record.RecordFactory getKeyFactory()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory>;

        return $r1;
    }

    public int getCalcBlockSize()
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int order>;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory recordFactory>;

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int calcBlockSize(int,com.hp.hpl.jena.tdb.base.record.RecordFactory)>($i0, $r1);

        return $i1;
    }

    public static int calcOrder(int, com.hp.hpl.jena.tdb.base.record.RecordFactory)
    {
        int i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        $i2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int calcOrder(int,int)>(i0, $i1);

        return $i2;
    }

    public static int calcOrder(int, int)
    {
        int $i0, i1, $i2, $i3, i4, $i5, $i6, i7, i8, i9;

        i8 := @parameter0: int;

        i1 := @parameter1: int;

        $i0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int BlockHeaderSize>;

        i9 = i8 - $i0;

        $i3 = i9 - i1;

        $i2 = i1 + 4;

        i4 = $i3 / $i2;

        $i5 = i4 + 1;

        $i6 = $i5 - 0;

        i7 = $i6 / 2;

        return i7;
    }

    public static int calcBlockSize(int, com.hp.hpl.jena.tdb.base.record.RecordFactory)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r1;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $r0 = new com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: void <init>(int,com.hp.hpl.jena.tdb.base.record.RecordFactory)>(i0, r1);

        $i1 = virtualinvoke $r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getMaxRec()>();

        $i2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        $i3 = $i1 * $i2;

        $i4 = virtualinvoke $r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getMaxPtr()>();

        $i5 = $i4 * 4;

        i7 = $i3 + $i5;

        $i6 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int BlockHeaderSize>;

        i8 = i7 + $i6;

        return i8;
    }

    public int getMaxRec()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxRec>;

        return $i0;
    }

    public int getMaxPtr()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        return $i0;
    }

    public int getMinRec()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinRec>;

        return $i0;
    }

    public int getMinPtr()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinPtr>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r2, $r5, $r7, $r10, $r12, $r15, $r17, $r20;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r19;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int NoParent> = -99;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int RootParent> = -2;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int RootId> = 0;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int Gap> = 0;

        $z0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean Checking>;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree> = $z0;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode> = 0;

        $z1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean Checking>;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingConcurrency> = $z1;

        $r0 = <com.hp.hpl.jena.tdb.sys.Names: java.lang.String keyNSBPlusTree>;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String NS> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String NS>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".order");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamOrder> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String NS>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".keyLength");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamKeyLength> = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String NS>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".valueLength");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamValueLength> = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String NS>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".blockSize");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: java.lang.String ParamBlockSize> = $r20;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree> = 0;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean Logging> = 0;

        <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int BlockHeaderSize> = 4;

        return;
    }
}
