public class org.jdesktop.swingx.prompt.PromptSupport extends java.lang.Object
{
    public static final java.lang.String PROMPT;
    public static final java.lang.String FOREGROUND;
    public static final java.lang.String BACKGROUND;
    public static final java.lang.String BACKGROUND_PAINTER;
    public static final java.lang.String FOCUS_BEHAVIOR;
    public static final java.lang.String FONT_STYLE;

    public void <init>()
    {
        org.jdesktop.swingx.prompt.PromptSupport r0;

        r0 := @this: org.jdesktop.swingx.prompt.PromptSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void init(java.lang.String, java.awt.Color, java.awt.Color, javax.swing.text.JTextComponent)
    {
        java.awt.Color r1, r2;
        int $i0;
        java.lang.String r0;
        javax.swing.text.JTextComponent r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.awt.Color;

        r2 := @parameter2: java.awt.Color;

        r3 := @parameter3: javax.swing.text.JTextComponent;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        staticinvoke <org.jdesktop.swingx.prompt.PromptSupport: void setPrompt(java.lang.String,javax.swing.text.JTextComponent)>(r0, r3);

     label1:
        if r1 == null goto label2;

        staticinvoke <org.jdesktop.swingx.prompt.PromptSupport: void setForeground(java.awt.Color,javax.swing.text.JTextComponent)>(r1, r3);

     label2:
        if r2 == null goto label3;

        staticinvoke <org.jdesktop.swingx.prompt.PromptSupport: void setBackground(java.awt.Color,javax.swing.text.JTextComponent)>(r2, r3);

     label3:
        return;
    }

    public static org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior getFocusBehavior(javax.swing.text.JTextComponent)
    {
        java.lang.Object $r1;
        org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior r2;
        javax.swing.text.JTextComponent r0;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("focusBehavior");

        r2 = (org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior) $r1;

        if r2 != null goto label1;

        r2 = <org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior: org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior HIDE_PROMPT>;

     label1:
        return r2;
    }

    public static void setFocusBehavior(org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior, javax.swing.text.JTextComponent)
    {
        org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior r1;
        javax.swing.text.JTextComponent r0;
        boolean $z0;

        r1 := @parameter0: org.jdesktop.swingx.prompt.PromptSupport$FocusBehavior;

        r0 := @parameter1: javax.swing.text.JTextComponent;

        virtualinvoke r0.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("focusBehavior", r1);

        $z0 = virtualinvoke r0.<javax.swing.text.JTextComponent: boolean isFocusOwner()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<javax.swing.text.JTextComponent: void repaint()>();

     label1:
        return;
    }

    public static java.lang.String getPrompt(javax.swing.text.JTextComponent)
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        javax.swing.text.JTextComponent r0;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptText");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static void setPrompt(java.lang.String, javax.swing.text.JTextComponent)
    {
        org.jdesktop.swingx.plaf.TextUIWrapper $r0;
        java.lang.String $r2, r3, $r4, $r5;
        javax.swing.text.JTextComponent r1;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.swing.text.JTextComponent;

        $r0 = staticinvoke <org.jdesktop.swingx.plaf.TextUIWrapper: org.jdesktop.swingx.plaf.TextUIWrapper getDefaultWrapper()>();

        virtualinvoke $r0.<org.jdesktop.swingx.plaf.TextUIWrapper: void install(javax.swing.text.JTextComponent,boolean)>(r1, 1);

        $r2 = virtualinvoke r1.<javax.swing.text.JTextComponent: java.lang.String getToolTipText()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke r1.<javax.swing.text.JTextComponent: java.lang.String getToolTipText()>();

        $r5 = staticinvoke <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String getPrompt(javax.swing.text.JTextComponent)>(r1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r1.<javax.swing.text.JTextComponent: void setToolTipText(java.lang.String)>(r3);

     label2:
        virtualinvoke r1.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("promptText", r3);

        virtualinvoke r1.<javax.swing.text.JTextComponent: void repaint()>();

        return;
    }

    public static java.awt.Color getForeground(javax.swing.text.JTextComponent)
    {
        java.awt.Color $r3, $r4;
        java.lang.Object $r1, $r2;
        javax.swing.text.JTextComponent r0;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptForeground");

        if $r1 != null goto label1;

        $r4 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.awt.Color getDisabledTextColor()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptForeground");

        $r3 = (java.awt.Color) $r2;

        return $r3;
    }

    public static void setForeground(java.awt.Color, javax.swing.text.JTextComponent)
    {
        java.awt.Color r1;
        javax.swing.text.JTextComponent r0;

        r1 := @parameter0: java.awt.Color;

        r0 := @parameter1: javax.swing.text.JTextComponent;

        virtualinvoke r0.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("promptForeground", r1);

        virtualinvoke r0.<javax.swing.text.JTextComponent: void repaint()>();

        return;
    }

    public static java.awt.Color getBackground(javax.swing.text.JTextComponent)
    {
        java.awt.Color $r3, $r4;
        java.lang.Object $r1, $r2;
        javax.swing.text.JTextComponent r0;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptBackground");

        if $r1 != null goto label1;

        $r4 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.awt.Color getBackground()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptBackground");

        $r3 = (java.awt.Color) $r2;

        return $r3;
    }

    public static void setBackground(java.awt.Color, javax.swing.text.JTextComponent)
    {
        java.awt.Color r2;
        org.jdesktop.swingx.plaf.TextUIWrapper $r0;
        javax.swing.text.JTextComponent r1;

        r2 := @parameter0: java.awt.Color;

        r1 := @parameter1: javax.swing.text.JTextComponent;

        $r0 = staticinvoke <org.jdesktop.swingx.plaf.TextUIWrapper: org.jdesktop.swingx.plaf.TextUIWrapper getDefaultWrapper()>();

        virtualinvoke $r0.<org.jdesktop.swingx.plaf.TextUIWrapper: void install(javax.swing.text.JTextComponent,boolean)>(r1, 1);

        virtualinvoke r1.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("promptBackground", r2);

        virtualinvoke r1.<javax.swing.text.JTextComponent: void repaint()>();

        return;
    }

    public static org.jdesktop.swingx.painter.Painter getBackgroundPainter(javax.swing.text.JTextComponent)
    {
        java.lang.Object $r1;
        javax.swing.text.JTextComponent r0;
        org.jdesktop.swingx.painter.Painter r2;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptBackgroundPainter");

        r2 = (org.jdesktop.swingx.painter.Painter) $r1;

        if r2 != null goto label1;

        r2 = <org.jdesktop.swingx.painter.Painters: org.jdesktop.swingx.painter.Painter EMPTY_PAINTER>;

     label1:
        return r2;
    }

    public static void setBackgroundPainter(org.jdesktop.swingx.painter.Painter, javax.swing.text.JTextComponent)
    {
        org.jdesktop.swingx.plaf.TextUIWrapper $r0;
        javax.swing.text.JTextComponent r1;
        org.jdesktop.swingx.painter.Painter r2;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter;

        r1 := @parameter1: javax.swing.text.JTextComponent;

        $r0 = staticinvoke <org.jdesktop.swingx.plaf.TextUIWrapper: org.jdesktop.swingx.plaf.TextUIWrapper getDefaultWrapper()>();

        virtualinvoke $r0.<org.jdesktop.swingx.plaf.TextUIWrapper: void install(javax.swing.text.JTextComponent,boolean)>(r1, 1);

        virtualinvoke r1.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("promptBackgroundPainter", r2);

        virtualinvoke r1.<javax.swing.text.JTextComponent: void repaint()>();

        return;
    }

    public static void setFontStyle(java.lang.Integer, javax.swing.text.JTextComponent)
    {
        javax.swing.text.JTextComponent r0;
        java.lang.Integer r1;

        r1 := @parameter0: java.lang.Integer;

        r0 := @parameter1: javax.swing.text.JTextComponent;

        virtualinvoke r0.<javax.swing.text.JTextComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("promptFontStyle", r1);

        virtualinvoke r0.<javax.swing.text.JTextComponent: void revalidate()>();

        virtualinvoke r0.<javax.swing.text.JTextComponent: void repaint()>();

        return;
    }

    public static java.lang.Integer getFontStyle(javax.swing.text.JTextComponent)
    {
        java.lang.Object $r1;
        javax.swing.text.JTextComponent r0;
        java.lang.Integer $r2;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.lang.Object getClientProperty(java.lang.Object)>("promptFontStyle");

        $r2 = (java.lang.Integer) $r1;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String FONT_STYLE> = "promptFontStyle";

        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String FOCUS_BEHAVIOR> = "focusBehavior";

        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String BACKGROUND_PAINTER> = "promptBackgroundPainter";

        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String BACKGROUND> = "promptBackground";

        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String FOREGROUND> = "promptForeground";

        <org.jdesktop.swingx.prompt.PromptSupport: java.lang.String PROMPT> = "promptText";

        return;
    }
}
