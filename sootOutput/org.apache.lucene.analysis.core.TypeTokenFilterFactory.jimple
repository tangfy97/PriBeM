public class org.apache.lucene.analysis.core.TypeTokenFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private final boolean useWhitelist;
    private final boolean enablePositionIncrements;
    private final java.lang.String stopTypesFiles;
    private java.util.Set stopTypes;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.core.TypeTokenFilterFactory r0;
        java.lang.IllegalArgumentException $r3;
        java.util.Map r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, "types");

        r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.lang.String stopTypesFiles> = $r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "enablePositionIncrements", 0);

        r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean enablePositionIncrements> = $z0;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "useWhitelist", 0);

        r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean useWhitelist> = $z1;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.core.TypeTokenFilterFactory r0;
        java.util.Iterator $r4;
        java.util.Set $r10;
        java.util.HashSet $r3;
        java.util.List $r2, $r9;
        int $i0;
        org.apache.lucene.analysis.util.ResourceLoader r7;
        java.lang.Object $r5;
        java.lang.String $r1, r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilterFactory;

        r7 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.lang.String stopTypesFiles>;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.List splitFileNames(java.lang.String)>($r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.Set stopTypes> = $r3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r8 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

        $r9 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r7, $r8);

        $r10 = r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.Set stopTypes>;

        interfaceinvoke $r10.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        goto label1;

     label2:
        return;
    }

    public boolean isEnablePositionIncrements()
    {
        org.apache.lucene.analysis.core.TypeTokenFilterFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilterFactory;

        $z0 = r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean enablePositionIncrements>;

        return $z0;
    }

    public java.util.Set getStopTypes()
    {
        java.util.Set $r1;
        org.apache.lucene.analysis.core.TypeTokenFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilterFactory;

        $r1 = r0.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.Set stopTypes>;

        return $r1;
    }

    public org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.core.TypeTokenFilterFactory r1;
        org.apache.lucene.analysis.core.TypeTokenFilter $r0;
        org.apache.lucene.analysis.TokenStream r2;
        java.util.Set $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.analysis.core.TypeTokenFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.core.TypeTokenFilter;

        $z1 = r1.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean enablePositionIncrements>;

        $r3 = r1.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: java.util.Set stopTypes>;

        $z0 = r1.<org.apache.lucene.analysis.core.TypeTokenFilterFactory: boolean useWhitelist>;

        specialinvoke $r0.<org.apache.lucene.analysis.core.TypeTokenFilter: void <init>(boolean,org.apache.lucene.analysis.TokenStream,java.util.Set,boolean)>($z1, r2, $r3, $z0);

        return $r0;
    }
}
