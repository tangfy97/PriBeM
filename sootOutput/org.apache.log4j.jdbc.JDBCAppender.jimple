public class org.apache.log4j.jdbc.JDBCAppender extends org.apache.log4j.AppenderSkeleton implements org.apache.log4j.Appender
{
    protected java.lang.String databaseURL;
    protected java.lang.String databaseUser;
    protected java.lang.String databasePassword;
    protected java.sql.Connection connection;
    protected java.lang.String sqlStatement;
    protected int bufferSize;
    protected java.util.ArrayList buffer;
    protected java.util.ArrayList removes;
    private boolean locationInfo;

    public void <init>()
    {
        int $i0, $i1;
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseURL> = "jdbc:odbc:myDB";

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseUser> = "me";

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databasePassword> = "mypassword";

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection> = null;

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String sqlStatement> = "";

        r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize> = 1;

        r0.<org.apache.log4j.jdbc.JDBCAppender: boolean locationInfo> = 0;

        $r1 = new java.util.ArrayList;

        $i0 = r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer> = $r1;

        $r2 = new java.util.ArrayList;

        $i1 = r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes> = $r2;

        return;
    }

    public boolean getLocationInfo()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $z0 = r0.<org.apache.log4j.jdbc.JDBCAppender: boolean locationInfo>;

        return $z0;
    }

    public void setLocationInfo(boolean)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        boolean z0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.jdbc.JDBCAppender: boolean locationInfo> = z0;

        return;
    }

    public void append(org.apache.log4j.spi.LoggingEvent)
    {
        int $i0, $i1;
        org.apache.log4j.spi.LoggingEvent r0;
        org.apache.log4j.jdbc.JDBCAppender r1;
        boolean $z0;
        java.util.ArrayList $r2, $r3;

        r1 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r0 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: void getMDCCopy()>();

        $z0 = r1.<org.apache.log4j.jdbc.JDBCAppender: boolean locationInfo>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

     label1:
        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String[] getThrowableStrRep()>();

        $r2 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $r3 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = r1.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        if $i0 < $i1 goto label2;

        virtualinvoke r1.<org.apache.log4j.jdbc.JDBCAppender: void flushBuffer()>();

     label2:
        return;
    }

    protected java.lang.String getLogStatement(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        org.apache.log4j.spi.LoggingEvent r2;
        org.apache.log4j.Layout $r1;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = virtualinvoke r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.Layout getLayout()>();

        $r3 = virtualinvoke $r1.<org.apache.log4j.Layout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r2);

        return $r3;
    }

    protected void execute(java.lang.String) throws java.sql.SQLException
    {
        java.sql.SQLException $r4;
        java.sql.Connection $r1;
        java.sql.Statement $r2, r5;
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String r3;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r3 := @parameter0: java.lang.String;

        r5 = null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection getConnection()>();

        $r2 = interfaceinvoke $r1.<java.sql.Connection: java.sql.Statement createStatement()>();

        r5 = $r2;

        interfaceinvoke $r2.<java.sql.Statement: int executeUpdate(java.lang.String)>(r3);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        if r5 == null goto label4;

        interfaceinvoke r5.<java.sql.Statement: void close()>();

     label4:
        throw $r4;

     label5:
        interfaceinvoke $r2.<java.sql.Statement: void close()>();

        virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: void closeConnection(java.sql.Connection)>($r1);

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected void closeConnection(java.sql.Connection)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.sql.Connection r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r1 := @parameter0: java.sql.Connection;

        return;
    }

    protected java.sql.Connection getConnection() throws java.sql.SQLException
    {
        java.sql.Connection $r2, $r3, $r7;
        java.util.Enumeration $r0;
        org.apache.log4j.jdbc.JDBCAppender r1;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;

        r1 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r0 = staticinvoke <java.sql.DriverManager: java.util.Enumeration getDrivers()>();

        $z0 = interfaceinvoke $r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.apache.log4j.jdbc.JDBCAppender: void setDriver(java.lang.String)>("sun.jdbc.odbc.JdbcOdbcDriver");

     label1:
        $r2 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection>;

        if $r2 != null goto label2;

        $r6 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseURL>;

        $r5 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseUser>;

        $r4 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databasePassword>;

        $r7 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, $r4);

        r1.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection> = $r7;

     label2:
        $r3 = r1.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection>;

        return $r3;
    }

    public void close()
    {
        java.sql.SQLException $r4;
        java.sql.Connection $r1, $r2, $r3;
        org.apache.log4j.jdbc.JDBCAppender r0;
        org.apache.log4j.spi.ErrorHandler $r5;
        boolean $z0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: void flushBuffer()>();

     label1:
        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection>;

        $z0 = interfaceinvoke $r2.<java.sql.Connection: boolean isClosed()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection connection>;

        interfaceinvoke $r3.<java.sql.Connection: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.spi.ErrorHandler errorHandler>;

        interfaceinvoke $r5.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String,java.lang.Exception,int)>("Error closing connection", $r4, 0);

     label4:
        r0.<org.apache.log4j.AppenderSkeleton: boolean closed> = 1;

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public void flushBuffer()
    {
        java.util.ArrayList $r1, $r2, $r3, $r5, $r6, $r7, $r10;
        java.sql.SQLException $r11;
        int $i0;
        java.lang.String $r9;
        boolean $z0;
        java.util.Iterator $r4;
        org.apache.log4j.spi.ErrorHandler $r12;
        org.apache.log4j.spi.LoggingEvent r13;
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.Object $r8;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r2 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes>;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        virtualinvoke $r2.<java.util.ArrayList: void ensureCapacity(int)>($i0);

        $r3 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        $r4 = virtualinvoke $r3.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.log4j.spi.LoggingEvent) $r8;

        $r9 = virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String getLogStatement(org.apache.log4j.spi.LoggingEvent)>(r13);

        virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)>($r9);

        $r10 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

     label3:
        goto label1;

     label4:
        $r11 := @caughtexception;

        $r12 = r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.spi.ErrorHandler errorHandler>;

        interfaceinvoke $r12.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String,java.lang.Exception,int)>("Failed to excute sql", $r11, 2);

        goto label1;

     label5:
        $r6 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        $r5 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes>;

        virtualinvoke $r6.<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>($r5);

        $r7 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

        return;

        catch java.sql.SQLException from label2 to label3 with label4;
    }

    public void finalize()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        virtualinvoke r0.<org.apache.log4j.jdbc.JDBCAppender: void close()>();

        return;
    }

    public boolean requiresLayout()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        return 1;
    }

    public void setSql(java.lang.String)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        org.apache.log4j.Layout $r2, $r3;
        org.apache.log4j.PatternLayout $r4, $r5;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String sqlStatement> = r1;

        $r2 = virtualinvoke r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.Layout getLayout()>();

        if $r2 != null goto label1;

        $r5 = new org.apache.log4j.PatternLayout;

        specialinvoke $r5.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.log4j.AppenderSkeleton: void setLayout(org.apache.log4j.Layout)>($r5);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.Layout getLayout()>();

        $r4 = (org.apache.log4j.PatternLayout) $r3;

        virtualinvoke $r4.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>(r1);

     label2:
        return;
    }

    public java.lang.String getSql()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String sqlStatement>;

        return $r1;
    }

    public void setUser(java.lang.String)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseUser> = r1;

        return;
    }

    public void setURL(java.lang.String)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseURL> = r1;

        return;
    }

    public void setPassword(java.lang.String)
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databasePassword> = r1;

        return;
    }

    public void setBufferSize(int)
    {
        int i0, $i1, $i2;
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        i0 := @parameter0: int;

        r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize> = i0;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList buffer>;

        $i1 = r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        virtualinvoke $r1.<java.util.ArrayList: void ensureCapacity(int)>($i1);

        $r2 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.util.ArrayList removes>;

        $i2 = r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        virtualinvoke $r2.<java.util.ArrayList: void ensureCapacity(int)>($i2);

        return;
    }

    public java.lang.String getUser()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseUser>;

        return $r1;
    }

    public java.lang.String getURL()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databaseURL>;

        return $r1;
    }

    public java.lang.String getPassword()
    {
        org.apache.log4j.jdbc.JDBCAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $r1 = r0.<org.apache.log4j.jdbc.JDBCAppender: java.lang.String databasePassword>;

        return $r1;
    }

    public int getBufferSize()
    {
        int $i0;
        org.apache.log4j.jdbc.JDBCAppender r0;

        r0 := @this: org.apache.log4j.jdbc.JDBCAppender;

        $i0 = r0.<org.apache.log4j.jdbc.JDBCAppender: int bufferSize>;

        return $i0;
    }

    public void setDriver(java.lang.String)
    {
        org.apache.log4j.jdbc.JDBCAppender r2;
        org.apache.log4j.spi.ErrorHandler $r3;
        java.lang.String r0;
        java.lang.Exception $r1;

        r2 := @this: org.apache.log4j.jdbc.JDBCAppender;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = r2.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.spi.ErrorHandler errorHandler>;

        interfaceinvoke $r3.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String,java.lang.Exception,int)>("Failed to load driver", $r1, 0);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
