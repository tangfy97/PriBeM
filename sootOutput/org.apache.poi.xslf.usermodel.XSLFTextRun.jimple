public class org.apache.poi.xslf.usermodel.XSLFTextRun extends java.lang.Object
{
    private final org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r;
    private final org.apache.poi.xslf.usermodel.XSLFTextParagraph _p;

    void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun, org.apache.poi.xslf.usermodel.XSLFTextParagraph)
    {
        org.apache.poi.xslf.usermodel.XSLFTextParagraph r2;
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r1 := @parameter0: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFTextParagraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r> = r1;

        r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p> = r2;

        return;
    }

    org.apache.poi.xslf.usermodel.XSLFTextParagraph getParentParagraph()
    {
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1;
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        return $r1;
    }

    public java.lang.String getText()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        java.lang.String $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: java.lang.String getT()>();

        return $r2;
    }

    java.lang.String getRenderableText()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1;
        char $c1, $c4, $c5;
        int[] $r6;
        java.lang.StringBuffer $r7;
        int $i0, $i2, $i3, i6, $i7;
        java.lang.String $r2, $r5;
        org.apache.poi.xslf.usermodel.TextCap $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: java.lang.String getT()>();

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.TextCap getTextCap()>();

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        i6 = 0;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i6 >= $i0 goto label7;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c1;

        if $i7 != 9 goto label2;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        goto label6;

     label2:
        $r6 = <org.apache.poi.xslf.usermodel.XSLFTextRun$13: int[] $SwitchMap$org$apache$poi$xslf$usermodel$TextCap>;

        $i2 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.TextCap: int ordinal()>();

        $i3 = $r6[$i2];

        lookupswitch($i3)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        goto label6;

     label4:
        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label6;

     label5:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label6:
        i6 = i6 + 1;

        goto label1;

     label7:
        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String tab2space()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        java.lang.Float $r5;
        java.awt.font.TextLayout $r6;
        java.awt.font.TextAttribute $r2, $r4;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r9;
        java.lang.StringBuffer $r10;
        int i0, i1;
        java.lang.String $r3, $r11;
        double $d0, d1, $d2, $d3, $d4;
        java.text.AttributedString $r0;
        java.awt.font.FontRenderContext $r8;
        java.text.AttributedCharacterIterator $r7;
        float $f0, $f1;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new java.text.AttributedString;

        specialinvoke $r0.<java.text.AttributedString: void <init>(java.lang.String)>(" ");

        $r2 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        $r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.lang.String getFontFamily()>();

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r2, $r3);

        $r4 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $d0 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: double getFontSize()>();

        $f0 = (float) $d0;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r4, $r5);

        $r6 = new java.awt.font.TextLayout;

        $r7 = virtualinvoke $r0.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $r8 = new java.awt.font.FontRenderContext;

        specialinvoke $r8.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>(null, 1, 1);

        specialinvoke $r6.<java.awt.font.TextLayout: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)>($r7, $r8);

        $f1 = virtualinvoke $r6.<java.awt.font.TextLayout: float getAdvance()>();

        d1 = (double) $f1;

        $r9 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $d2 = virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: double getDefaultTabSize()>();

        $d3 = $d2 / d1;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i0 = (int) $d4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public void setText(java.lang.String)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        java.lang.String r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: void setT(java.lang.String)>(r1);

        return;
    }

    public org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        return $r1;
    }

    public void setFontColor(java.awt.Color)
    {
        java.awt.Color r4;
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        byte[] $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties r2, $r5;
        byte $b1, $b3, $b5;
        int $i0, $i2, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor $r6;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r4 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetSolidFill()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties getSolidFill()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties addNewSolidFill()>();

     label2:
        r2 = $r5;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSrgbClr()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor getSrgbClr()>();

        goto label4;

     label3:
        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor addNewSrgbClr()>();

     label4:
        $r3 = newarray (byte)[3];

        $i0 = virtualinvoke r4.<java.awt.Color: int getRed()>();

        $b1 = (byte) $i0;

        $r3[0] = $b1;

        $i2 = virtualinvoke r4.<java.awt.Color: int getGreen()>();

        $b3 = (byte) $i2;

        $r3[1] = $b3;

        $i4 = virtualinvoke r4.<java.awt.Color: int getBlue()>();

        $b5 = (byte) $i4;

        $r3[2] = $b5;

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor: void setVal(byte[])>($r3);

        $z2 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetHslClr()>();

        if $z2 == 0 goto label5;

        interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetHslClr()>();

     label5:
        $z3 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetPrstClr()>();

        if $z3 == 0 goto label6;

        interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetPrstClr()>();

     label6:
        $z4 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSchemeClr()>();

        if $z4 == 0 goto label7;

        interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSchemeClr()>();

     label7:
        $z5 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetScrgbClr()>();

        if $z5 == 0 goto label8;

        interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetScrgbClr()>();

     label8:
        $z6 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSysClr()>();

        if $z6 == 0 goto label9;

        interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSysClr()>();

     label9:
        return;
    }

    public java.awt.Color getFontColor()
    {
        java.awt.Color $r12;
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.apache.poi.xslf.usermodel.XSLFTextRun$1 $r9;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1, $r5, $r10;
        org.apache.poi.xslf.usermodel.XSLFSheet $r3;
        org.apache.poi.xslf.usermodel.XSLFTheme $r4;
        int $i0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r7;
        java.lang.Object $r11;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r2, $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTFontReference $r8;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor $r13;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r6 = virtualinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $r7 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()>();

        if $r7 != null goto label1;

        $r13 = null;

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle: org.openxmlformats.schemas.drawingml.x2006.main.CTFontReference getFontRef()>();

        $r13 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTFontReference: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor getSchemeClr()>();

     label2:
        $r9 = new org.apache.poi.xslf.usermodel.XSLFTextRun$1;

        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFTextRun$1: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r0, $i0, $r4, $r13);

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r9);

        $r11 = virtualinvoke $r9.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r12 = (java.awt.Color) $r11;

        return $r12;
    }

    public void setFontSize(double)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        java.lang.IllegalArgumentException $r8;
        byte $b0, $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6;
        double d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetSz()>();

        if $z0 == 0 goto label3;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void unsetSz()>();

        goto label3;

     label1:
        $b1 = d0 cmpg 1.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minimum font size is 1pt but was ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        $d1 = 100.0 * d0;

        $i2 = (int) $d1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setSz(int)>($i2);

     label3:
        return;
    }

    public double getFontSize()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextNormalAutofit $r4;
        java.lang.Double $r9;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1, $r6;
        org.apache.poi.xslf.usermodel.XSLFTextRun$2 $r5;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r2;
        double $d0, $d1, d2, $d3;
        java.lang.Object $r7, $r8;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        d2 = 1.0;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph getParentParagraph()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextNormalAutofit getNormAutofit()>();

        if $r4 == null goto label1;

        $i1 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextNormalAutofit: int getFontScale()>();

        $d1 = (double) $i1;

        d2 = $d1 / 100000.0;

     label1:
        $r5 = new org.apache.poi.xslf.usermodel.XSLFTextRun$2;

        $r6 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFTextRun$2: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r0, $i0);

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r5);

        $r7 = virtualinvoke $r5.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r7 != null goto label2;

        $d3 = -1.0;

        goto label3;

     label2:
        $r8 = virtualinvoke $r5.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d3 = $d0 * d2;

     label3:
        return $d3;
    }

    public double getCharacterSpacing()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        java.lang.Double $r5;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        org.apache.poi.xslf.usermodel.XSLFTextRun$3 $r0;
        int $i0;
        java.lang.Object $r3, $r4;
        double $d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$3;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$3: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $d0 = 0.0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public void setCharacterSpacing(double)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        byte $b0;
        int $i1;
        double d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetSpc()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void unsetSpc()>();

        goto label2;

     label1:
        $d1 = 100.0 * d0;

        $i1 = (int) $d1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setSpc(int)>($i1);

     label2:
        return;
    }

    public void setFontFamily(java.lang.String)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        java.lang.String r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setFontFamily(java.lang.String,byte,byte,boolean)>(r1, -1, -1, 0);

        return;
    }

    public void setFontFamily(java.lang.String, byte, byte, boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        byte b0, b1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont $r3, $r4, r5;
        int $i2, $i4, $i5, $i7;
        java.lang.String r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r2 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        z0 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        if r2 != null goto label03;

        $z3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetLatin()>();

        if $z3 == 0 goto label01;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void unsetLatin()>();

     label01:
        $z4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetCs()>();

        if $z4 == 0 goto label02;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void unsetCs()>();

     label02:
        $z5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetSym()>();

        if $z5 == 0 goto label10;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void unsetSym()>();

        goto label10;

     label03:
        if z0 == 0 goto label06;

        $z2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetSym()>();

        if $z2 == 0 goto label04;

        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont getSym()>();

        goto label05;

     label04:
        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont addNewSym()>();

     label05:
        interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont: void setTypeface(java.lang.String)>(r2);

        goto label10;

     label06:
        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetLatin()>();

        if $z1 == 0 goto label07;

        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont getLatin()>();

        goto label08;

     label07:
        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont addNewLatin()>();

     label08:
        r5 = $r4;

        interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont: void setTypeface(java.lang.String)>(r2);

        $i2 = (int) b0;

        $i4 = (int) -1;

        if $i2 == $i4 goto label09;

        interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont: void setCharset(byte)>(b0);

     label09:
        $i5 = (int) b1;

        $i7 = (int) -1;

        if $i5 == $i7 goto label10;

        interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextFont: void setPitchFamily(byte)>(b1);

     label10:
        return;
    }

    public java.lang.String getFontFamily()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1, $r6;
        org.apache.poi.xslf.usermodel.XSLFTextRun$4 $r5;
        org.apache.poi.xslf.usermodel.XSLFSheet $r3;
        org.apache.poi.xslf.usermodel.XSLFTheme $r4;
        int $i0;
        java.lang.Object $r7;
        java.lang.String $r8;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r5 = new org.apache.poi.xslf.usermodel.XSLFTextRun$4;

        $r6 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFTextRun$4: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int,org.apache.poi.xslf.usermodel.XSLFTheme)>(r0, $i0, $r4);

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r5);

        $r7 = virtualinvoke $r5.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r7;

        return $r8;
    }

    public byte getPitchAndFamily()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1, $r5;
        org.apache.poi.xslf.usermodel.XSLFTextRun$5 $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet $r3;
        byte $b1;
        int $i0;
        java.lang.Object $r6, $r7;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r2;
        java.lang.Byte $r8;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r4 = new org.apache.poi.xslf.usermodel.XSLFTextRun$5;

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFTextRun$5: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r0, $i0);

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r4);

        $r6 = virtualinvoke $r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r6 != null goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $r7 = virtualinvoke $r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r8 = (java.lang.Byte) $r7;

        $b1 = virtualinvoke $r8.<java.lang.Byte: byte byteValue()>();

     label2:
        return $b1;
    }

    public void setStrikethrough(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType$Enum $r2;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        if z0 == 0 goto label1;

        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType: org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType$Enum SNG_STRIKE>;

        goto label2;

     label1:
        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType: org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType$Enum NO_STRIKE>;

     label2:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setStrike(org.openxmlformats.schemas.drawingml.x2006.main.STTextStrikeType$Enum)>($r2);

        return;
    }

    public boolean isStrikethrough()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextRun$6 $r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$6;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$6: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public boolean isSuperscript()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        org.apache.poi.xslf.usermodel.XSLFTextRun$7 $r0;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$7;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$7: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public void setBaselineOffset(double)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        int $i0, $i1;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $i0 = (int) d0;

        $i1 = $i0 * 1000;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setBaseline(int)>($i1);

        return;
    }

    public void setSuperscript(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        boolean z0;
        double $d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $d0 = 30.0;

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setBaselineOffset(double)>($d0);

        return;
    }

    public void setSubscript(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        boolean z0;
        double $d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $d0 = -25.0;

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setBaselineOffset(double)>($d0);

        return;
    }

    public boolean isSubscript()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        org.apache.poi.xslf.usermodel.XSLFTextRun$8 $r0;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$8;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$8: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public org.apache.poi.xslf.usermodel.TextCap getTextCap()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        int $i0;
        java.lang.Object $r3, $r4;
        org.apache.poi.xslf.usermodel.XSLFTextRun$9 $r0;
        org.apache.poi.xslf.usermodel.TextCap $r5;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$9;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$9: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $r5 = <org.apache.poi.xslf.usermodel.TextCap: org.apache.poi.xslf.usermodel.TextCap NONE>;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (org.apache.poi.xslf.usermodel.TextCap) $r4;

     label2:
        return $r5;
    }

    public void setBold(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setB(boolean)>(z0);

        return;
    }

    public boolean isBold()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextRun$10 $r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$10;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$10: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public void setItalic(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setI(boolean)>(z0);

        return;
    }

    public boolean isItalic()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextRun$11 $r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$11;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$11: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public void setUnderline(boolean)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType$Enum $r2;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        if z0 == 0 goto label1;

        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType: org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType$Enum SNG>;

        goto label2;

     label1:
        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType: org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType$Enum NONE>;

     label2:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: void setU(org.openxmlformats.schemas.drawingml.x2006.main.STTextUnderlineType$Enum)>($r2);

        return;
    }

    public boolean isUnderline()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.apache.poi.xslf.usermodel.XSLFTextRun$12 $r0;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextRun$12;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextRun$12: void <init>(org.apache.poi.xslf.usermodel.XSLFTextRun,int)>(r1, $i0);

        specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)>($r0);

        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        if $r3 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.CharacterPropertyFetcher: java.lang.Object getValue()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: boolean isSetRPr()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties addNewRPr()>();

     label2:
        return $r4;
    }

    public java.lang.String toString()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        java.lang.Class $r3;
        java.lang.String $r6, $r8;

        r2 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.lang.String getText()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public org.apache.poi.xslf.usermodel.XSLFHyperlink createHyperlink()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r2;
        org.apache.poi.xslf.usermodel.XSLFHyperlink $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink $r4;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFHyperlink;

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink addNewHlinkClick()>();

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFHyperlink: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink,org.apache.poi.xslf.usermodel.XSLFTextRun)>($r4, r1);

        return $r0;
    }

    public org.apache.poi.xslf.usermodel.XSLFHyperlink getHyperlink()
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r2, $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1, $r4;
        org.apache.poi.xslf.usermodel.XSLFHyperlink $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink $r6;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: boolean isSetHlinkClick()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new org.apache.poi.xslf.usermodel.XSLFHyperlink;

        $r4 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink getHlinkClick()>();

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFHyperlink: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTHyperlink,org.apache.poi.xslf.usermodel.XSLFTextRun)>($r6, r0);

        return $r3;
    }

    private boolean fetchCharacterProperty(org.apache.poi.xslf.model.CharacterPropertyFetcher)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties $r12;
        org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun $r1;
        org.apache.poi.xslf.model.CharacterPropertyFetcher r4;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r2, $r6, $r10;
        org.apache.poi.xslf.usermodel.XSLFSheet $r8;
        int $i0;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r3;
        boolean $z0, $z1, z2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties $r7, $r11;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r5;
        org.apache.poi.xslf.usermodel.XMLSlideShow $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r4 := @parameter0: org.apache.poi.xslf.model.CharacterPropertyFetcher;

        z2 = 0;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun _r>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTRegularTextRun: boolean isSetRPr()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties getRPr()>();

        z2 = virtualinvoke r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: boolean fetch(org.openxmlformats.schemas.drawingml.x2006.main.CTTextCharacterProperties)>($r12);

     label1:
        if z2 != 0 goto label3;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextShape getParentShape()>();

        $z1 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>(r4);

        z2 = $z1;

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()>();

        if $r5 != null goto label2;

        $r8 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XMLSlideShow getSlideShow()>();

        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $i0 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: int getLevel()>();

        $r11 = virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties getDefaultParagraphStyle(int)>($i0);

        if $r11 == null goto label2;

        r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: boolean isFetchingFromMaster> = 1;

        z2 = virtualinvoke r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: boolean fetch(org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties)>($r11);

     label2:
        if z2 != 0 goto label3;

        $r6 = r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: org.apache.poi.xslf.usermodel.XSLFTextParagraph _p>;

        $r7 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties getDefaultMasterStyle()>();

        if $r7 == null goto label3;

        r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: boolean isFetchingFromMaster> = 1;

        z2 = virtualinvoke r4.<org.apache.poi.xslf.model.CharacterPropertyFetcher: boolean fetch(org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties)>($r7);

     label3:
        return z2;
    }

    void copy(org.apache.poi.xslf.usermodel.XSLFTextRun)
    {
        java.awt.Color $r3, $r5;
        org.apache.poi.xslf.usermodel.XSLFTextRun r0, r2;
        byte $b0;
        java.lang.String $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        double $d0, $d1;

        r2 := @this: org.apache.poi.xslf.usermodel.XSLFTextRun;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFTextRun;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.lang.String getFontFamily()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.lang.String getFontFamily()>();

        $z9 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z9 != 0 goto label1;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setFontFamily(java.lang.String)>($r1);

     label1:
        $r5 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.awt.Color getFontColor()>();

        if $r5 == null goto label2;

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: java.awt.Color getFontColor()>();

        $z8 = virtualinvoke $r5.<java.awt.Color: boolean equals(java.lang.Object)>($r3);

        if $z8 != 0 goto label2;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setFontColor(java.awt.Color)>($r5);

     label2:
        $d0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: double getFontSize()>();

        $d1 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: double getFontSize()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label3;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setFontSize(double)>($d0);

     label3:
        $z0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isBold()>();

        $z1 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isBold()>();

        if $z0 == $z1 goto label4;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setBold(boolean)>($z0);

     label4:
        $z2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isItalic()>();

        $z3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isItalic()>();

        if $z2 == $z3 goto label5;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setItalic(boolean)>($z2);

     label5:
        $z4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isUnderline()>();

        $z5 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isUnderline()>();

        if $z4 == $z5 goto label6;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setUnderline(boolean)>($z4);

     label6:
        $z6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isStrikethrough()>();

        $z7 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: boolean isStrikethrough()>();

        if $z6 == $z7 goto label7;

        virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setStrikethrough(boolean)>($z6);

     label7:
        return;
    }
}
