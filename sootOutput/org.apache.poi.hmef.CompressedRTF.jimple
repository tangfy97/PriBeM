public final class org.apache.poi.hmef.CompressedRTF extends org.apache.poi.util.LZWDecompresser
{
    public static final byte[] COMPRESSED_SIGNATURE;
    public static final byte[] UNCOMPRESSED_SIGNATURE;
    public static final int COMPRESSED_SIGNATURE_INT;
    public static final int UNCOMPRESSED_SIGNATURE_INT;
    public static final java.lang.String LZW_RTF_PRELOAD;
    private int compressedSize;
    private int decompressedSize;

    public void <init>()
    {
        org.apache.poi.hmef.CompressedRTF r0;

        r0 := @this: org.apache.poi.hmef.CompressedRTF;

        specialinvoke r0.<org.apache.poi.util.LZWDecompresser: void <init>(boolean,int,boolean)>(1, 2, 1);

        return;
    }

    public void decompress(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r7;
        org.apache.poi.hmef.CompressedRTF r0;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.hmef.CompressedRTF;

        r1 := @parameter0: java.io.InputStream;

        r7 := @parameter1: java.io.OutputStream;

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>(r1);

        r0.<org.apache.poi.hmef.CompressedRTF: int compressedSize> = $i0;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>(r1);

        r0.<org.apache.poi.hmef.CompressedRTF: int decompressedSize> = $i1;

        $i2 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>(r1);

        staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>(r1);

        $i3 = <org.apache.poi.hmef.CompressedRTF: int UNCOMPRESSED_SIGNATURE_INT>;

        if $i2 != $i3 goto label1;

        staticinvoke <org.apache.poi.util.IOUtils: void copy(java.io.InputStream,java.io.OutputStream)>(r1, r7);

        goto label3;

     label1:
        $i4 = <org.apache.poi.hmef.CompressedRTF: int COMPRESSED_SIGNATURE_INT>;

        if $i2 != $i4 goto label2;

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid compression signature ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        specialinvoke r0.<org.apache.poi.util.LZWDecompresser: void decompress(java.io.InputStream,java.io.OutputStream)>(r1, r7);

        return;
    }

    public int getCompressedSize()
    {
        int $i0, $i1;
        org.apache.poi.hmef.CompressedRTF r0;

        r0 := @this: org.apache.poi.hmef.CompressedRTF;

        $i0 = r0.<org.apache.poi.hmef.CompressedRTF: int compressedSize>;

        $i1 = $i0 - 12;

        return $i1;
    }

    public int getDeCompressedSize()
    {
        int $i0;
        org.apache.poi.hmef.CompressedRTF r0;

        r0 := @this: org.apache.poi.hmef.CompressedRTF;

        $i0 = r0.<org.apache.poi.hmef.CompressedRTF: int decompressedSize>;

        return $i0;
    }

    protected int adjustDictionaryOffset(int)
    {
        int i0;
        org.apache.poi.hmef.CompressedRTF r0;

        r0 := @this: org.apache.poi.hmef.CompressedRTF;

        i0 := @parameter0: int;

        return i0;
    }

    protected int populateDictionary(byte[])
    {
        byte[] $r1, r2;
        org.apache.poi.hmef.CompressedRTF r5;
        java.lang.RuntimeException $r4;
        int $i0, $i1;
        java.lang.String $r0;
        java.io.UnsupportedEncodingException $r3;

        r5 := @this: org.apache.poi.hmef.CompressedRTF;

        r2 := @parameter0: byte[];

     label1:
        $r0 = "{\\rtf1\\ansi\\mac\\deff0\\deftab720{\\fonttbl;}{\\f0\\fnil \\froman \\fswiss \\fmodern \\fscript \\fdecor MS Sans SerifSymbolArialTimes New RomanCourier{\\colortbl\\red0\\green0\\blue0\n\r\\par \\pard\\plain\\f0\\fs20\\b\\i\\u\\tab\\tx";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        $i1 = lengthof $r1;

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Your JVM is broken as it doesn\'t support US ASCII");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;
        int $i0, $i1;

        <org.apache.poi.hmef.CompressedRTF: java.lang.String LZW_RTF_PRELOAD> = "{\\rtf1\\ansi\\mac\\deff0\\deftab720{\\fonttbl;}{\\f0\\fnil \\froman \\fswiss \\fmodern \\fscript \\fdecor MS Sans SerifSymbolArialTimes New RomanCourier{\\colortbl\\red0\\green0\\blue0\n\r\\par \\pard\\plain\\f0\\fs20\\b\\i\\u\\tab\\tx";

        $r0 = newarray (byte)[4];

        $r0[0] = 76;

        $r0[1] = 90;

        $r0[2] = 70;

        $r0[3] = 117;

        <org.apache.poi.hmef.CompressedRTF: byte[] COMPRESSED_SIGNATURE> = $r0;

        $r1 = newarray (byte)[4];

        $r1[0] = 77;

        $r1[1] = 69;

        $r1[2] = 76;

        $r1[3] = 65;

        <org.apache.poi.hmef.CompressedRTF: byte[] UNCOMPRESSED_SIGNATURE> = $r1;

        $r2 = <org.apache.poi.hmef.CompressedRTF: byte[] COMPRESSED_SIGNATURE>;

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>($r2);

        <org.apache.poi.hmef.CompressedRTF: int COMPRESSED_SIGNATURE_INT> = $i0;

        $r3 = <org.apache.poi.hmef.CompressedRTF: byte[] UNCOMPRESSED_SIGNATURE>;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>($r3);

        <org.apache.poi.hmef.CompressedRTF: int UNCOMPRESSED_SIGNATURE_INT> = $i1;

        return;
    }
}
