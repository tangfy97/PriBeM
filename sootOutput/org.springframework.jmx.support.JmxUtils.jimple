public abstract class org.springframework.jmx.support.JmxUtils extends java.lang.Object
{
    public static final java.lang.String IDENTITY_OBJECT_NAME_KEY;
    private static final java.lang.String MBEAN_SUFFIX;
    private static final java.lang.String MXBEAN_SUFFIX;
    private static final java.lang.String MXBEAN_ANNOTATION_CLASS_NAME;
    private static final boolean mxBeanAnnotationAvailable;
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r1;
        boolean $z0;

        <org.springframework.jmx.support.JmxUtils: java.lang.String MXBEAN_ANNOTATION_CLASS_NAME> = "javax.management.MXBean";

        <org.springframework.jmx.support.JmxUtils: java.lang.String MXBEAN_SUFFIX> = "MXBean";

        <org.springframework.jmx.support.JmxUtils: java.lang.String MBEAN_SUFFIX> = "MBean";

        <org.springframework.jmx.support.JmxUtils: java.lang.String IDENTITY_OBJECT_NAME_KEY> = "identity";

        $r0 = class "Lorg/springframework/jmx/support/JmxUtils;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("javax.management.MXBean", $r1);

        <org.springframework.jmx.support.JmxUtils: boolean mxBeanAnnotationAvailable> = $z0;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/jmx/support/JmxUtils;");

        <org.springframework.jmx.support.JmxUtils: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void <init>()
    {
        org.springframework.jmx.support.JmxUtils r0;

        r0 := @this: org.springframework.jmx.support.JmxUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.management.MBeanServer locateMBeanServer() throws org.springframework.jmx.MBeanServerNotFoundException
    {
        javax.management.MBeanServer $r0;

        $r0 = staticinvoke <org.springframework.jmx.support.JmxUtils: javax.management.MBeanServer locateMBeanServer(java.lang.String)>(null);

        return $r0;
    }

    public static javax.management.MBeanServer locateMBeanServer(java.lang.String) throws org.springframework.jmx.MBeanServerNotFoundException
    {
        java.lang.SecurityException $r24;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r5, $r8, $r9, $r11, $r12, $r13, $r16, $r18, $r19, $r21, $r22, $r23;
        org.springframework.jmx.MBeanServerNotFoundException $r7, $r25;
        java.util.ArrayList $r14;
        javax.management.MBeanServer r26;
        int $i0, $i1;
        java.lang.String r0, $r1, $r6, $r10, $r20, $r27, $r29;
        org.apache.commons.logging.Log $r2, $r4, $r15, $r17;
        java.lang.Object $r28;

        r0 := @parameter0: java.lang.String;

        r26 = null;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label04;

        $r14 = staticinvoke <javax.management.MBeanServerFactory: java.util.ArrayList findMBeanServer(java.lang.String)>(r0);

        if $r14 == null goto label04;

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i0 <= 0 goto label04;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i1 <= 1 goto label03;

        $r15 = <org.springframework.jmx.support.JmxUtils: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label03;

        $r17 = <org.springframework.jmx.support.JmxUtils: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found more than one MBeanServer instance");

        if r0 == null goto label01;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>(" with agent id [");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label02;

     label01:
        $r27 = "";

     label02:
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Returning first from list.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r20);

     label03:
        $r28 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        r26 = (javax.management.MBeanServer) $r28;

     label04:
        if r26 != null goto label08;

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z2 != 0 goto label08;

     label05:
        r26 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

     label06:
        goto label08;

     label07:
        $r24 := @caughtexception;

        $r25 = new org.springframework.jmx.MBeanServerNotFoundException;

        specialinvoke $r25.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("No specific MBeanServer found, and not allowed to obtain the Java platform MBeanServer", $r24);

        throw $r25;

     label08:
        if r26 != null goto label11;

        $r7 = new org.springframework.jmx.MBeanServerNotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate an MBeanServer instance");

        if r0 == null goto label09;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(" with agent id [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r29 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label09:
        $r29 = "";

     label10:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label11:
        $r2 = <org.springframework.jmx.support.JmxUtils: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label12;

        $r4 = <org.springframework.jmx.support.JmxUtils: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found MBeanServer: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label12:
        return r26;

        catch java.lang.SecurityException from label05 to label06 with label07;
    }

    public static java.lang.Class[] parameterInfoToTypes(javax.management.MBeanParameterInfo[]) throws java.lang.ClassNotFoundException
    {
        java.lang.Class[] $r2;
        java.lang.ClassLoader $r1;
        javax.management.MBeanParameterInfo[] r0;

        r0 := @parameter0: javax.management.MBeanParameterInfo[];

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r2 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class[] parameterInfoToTypes(javax.management.MBeanParameterInfo[],java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Class[] parameterInfoToTypes(javax.management.MBeanParameterInfo[], java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        javax.management.MBeanParameterInfo $r1;
        java.lang.Class[] r5;
        javax.management.MBeanParameterInfo[] r0;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r4;
        java.lang.String $r2;
        java.lang.ClassLoader r3;

        r0 := @parameter0: javax.management.MBeanParameterInfo[];

        r3 := @parameter1: java.lang.ClassLoader;

        r5 = (java.lang.Class[]) null;

        if r0 == null goto label3;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label3;

        $i1 = lengthof r0;

        r5 = newarray (java.lang.Class)[$i1];

        i3 = 0;

        goto label2;

     label1:
        $r1 = r0[i3];

        $r2 = virtualinvoke $r1.<javax.management.MBeanParameterInfo: java.lang.String getType()>();

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r2, r3);

        r5[i3] = $r4;

        i3 = i3 + 1;

     label2:
        $i2 = lengthof r0;

        if i3 < $i2 goto label1;

     label3:
        return r5;
    }

    public static java.lang.String[] getMethodSignature(java.lang.reflect.Method)
    {
        java.lang.Class[] $r1;
        java.lang.String[] r2;
        int $i0, $i1, i2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r3 = $r1[i2];

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r2[i2] = $r4;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof $r1;

        if i2 < $i1 goto label1;

        return r2;
    }

    public static java.lang.String getAttributeName(java.beans.PropertyDescriptor, boolean)
    {
        java.beans.PropertyDescriptor r0;
        java.lang.String $r1, $r2, $r3;
        boolean z0;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>($r2);

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        return $r1;
    }

    public static javax.management.ObjectName appendIdentityToObjectName(javax.management.ObjectName, java.lang.Object) throws javax.management.MalformedObjectNameException
    {
        java.lang.Object r2;
        javax.management.ObjectName r0, $r5;
        java.lang.String $r3, $r4;
        java.util.Hashtable $r1;

        r0 := @parameter0: javax.management.ObjectName;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<javax.management.ObjectName: java.util.Hashtable getKeyPropertyList()>();

        $r3 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)>(r2);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("identity", $r3);

        $r4 = virtualinvoke r0.<javax.management.ObjectName: java.lang.String getDomain()>();

        $r5 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.String,java.util.Hashtable)>($r4, $r1);

        return $r5;
    }

    public static java.lang.Class getClassToExpose(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.lang.Class getClassToExpose(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Class)>(r0);

        return $r1;
    }

    public static boolean isMBean(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label2;

        $r1 = class "Ljavax/management/DynamicMBean;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMBeanInterface(java.lang.Class)>(r0);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMXBeanInterface(java.lang.Class)>(r0);

        if $r3 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.lang.Class getMBeanInterface(java.lang.Class)
    {
        java.lang.Class[] $r7;
        int i0, i1;
        java.lang.Class r0, $r1, r8, $r10, $r11;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r3, $r4, $r6, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MBean");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r7;

        i1 = 0;

        goto label5;

     label3:
        r8 = $r7[i1];

        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        return r8;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label3;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r11 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMBeanInterface(java.lang.Class)>($r10);

        return $r11;
    }

    public static java.lang.Class getMXBeanInterface(java.lang.Class)
    {
        java.lang.Class[] $r2;
        int i0, i1;
        java.lang.Boolean $r5;
        java.lang.Class r0, $r1, r3, $r6, $r7;
        java.lang.String $r4;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label6;

     label3:
        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        z1 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("MXBean");

        $z0 = <org.springframework.jmx.support.JmxUtils: boolean mxBeanAnnotationAvailable>;

        if $z0 == 0 goto label4;

        $r5 = staticinvoke <org.springframework.jmx.support.JmxUtils$MXBeanChecker: java.lang.Boolean evaluateMXBeanAnnotation(java.lang.Class)>(r3);

        if $r5 == null goto label4;

        z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label4:
        if z1 == 0 goto label5;

        return r3;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label3;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMXBeanInterface(java.lang.Class)>($r6);

        return $r7;
    }

    public static boolean isMXBeanSupportAvailable()
    {
        boolean $z0;

        $z0 = <org.springframework.jmx.support.JmxUtils: boolean mxBeanAnnotationAvailable>;

        return $z0;
    }
}
