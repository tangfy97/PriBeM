public class com.mycila.inject.internal.asm.xml.ASMContentHandler extends org.xml.sax.helpers.DefaultHandler implements com.mycila.inject.internal.asm.Opcodes
{
    private final java.util.List stack;
    java.lang.String match;
    protected boolean computeMax;
    protected java.io.OutputStream os;
    protected com.mycila.inject.internal.asm.ClassWriter cw;
    protected java.util.Map labels;
    private static final java.lang.String BASE;
    private final com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES;
    static final java.util.Map OPCODES;
    static final java.util.Map TYPES;
    static java.lang.Class class$org$objectweb$asm$Type;

    private static void addOpcode(java.lang.String, int, int)
    {
        java.util.Map $r2;
        int i0, i1;
        java.lang.String r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$Opcode $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = <com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.Map OPCODES>;

        $r1 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$Opcode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Opcode: void <init>(int,int)>(i0, i1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r1);

        return;
    }

    public void <init>(java.io.OutputStream, boolean)
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$MethodRule $r17;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchLabelRule $r39;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule $r27;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameTypeRule $r29, $r31;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueArrayRule $r61;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchRule $r33;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfaceRule $r5;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LabelRule $r41;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule $r53;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueRule $r55;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionRule $r19;
        java.util.ArrayList $r1;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$ClassRule $r3;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationDefaultRule $r23;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueEnumRule $r59;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchLabelRule $r35;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$InnerClassRule $r11;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationRule $r51;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LineNumberRule $r45;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LocalVarRule $r47;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$MaxRule $r49;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$SourceRule $r13;
        boolean z0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionsRule $r21;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$TryCatchRule $r43;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule $r37;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FieldRule $r15;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfacesRule $r7;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$OpcodesRule $r25;
        java.io.OutputStream r63;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$OuterClassRule $r9;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueAnnotationRule $r57;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        r63 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack> = $r1;

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match> = "";

        $r2 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet;

        specialinvoke $r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void <init>()>();

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES> = $r2;

        $r4 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r3 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$ClassRule;

        specialinvoke $r3.<com.mycila.inject.internal.asm.xml.ASMContentHandler$ClassRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class", $r3);

        $r6 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r5 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfaceRule;

        specialinvoke $r5.<com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfaceRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r6.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/interfaces/interface", $r5);

        $r8 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r7 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfacesRule;

        specialinvoke $r7.<com.mycila.inject.internal.asm.xml.ASMContentHandler$InterfacesRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r8.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/interfaces", $r7);

        $r10 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r9 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$OuterClassRule;

        specialinvoke $r9.<com.mycila.inject.internal.asm.xml.ASMContentHandler$OuterClassRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r10.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/outerclass", $r9);

        $r12 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r11 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$InnerClassRule;

        specialinvoke $r11.<com.mycila.inject.internal.asm.xml.ASMContentHandler$InnerClassRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r12.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/innerclass", $r11);

        $r14 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r13 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$SourceRule;

        specialinvoke $r13.<com.mycila.inject.internal.asm.xml.ASMContentHandler$SourceRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r14.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/source", $r13);

        $r16 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r15 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$FieldRule;

        specialinvoke $r15.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FieldRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r16.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/field", $r15);

        $r18 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r17 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$MethodRule;

        specialinvoke $r17.<com.mycila.inject.internal.asm.xml.ASMContentHandler$MethodRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r18.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method", $r17);

        $r20 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r19 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionRule;

        specialinvoke $r19.<com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r20.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/exceptions/exception", $r19);

        $r22 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r21 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionsRule;

        specialinvoke $r21.<com.mycila.inject.internal.asm.xml.ASMContentHandler$ExceptionsRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r22.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/exceptions", $r21);

        $r24 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r23 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationDefaultRule;

        specialinvoke $r23.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationDefaultRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r24.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/annotationDefault", $r23);

        $r26 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r25 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$OpcodesRule;

        specialinvoke $r25.<com.mycila.inject.internal.asm.xml.ASMContentHandler$OpcodesRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r26.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/*", $r25);

        $r28 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r27 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule;

        specialinvoke $r27.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r28.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/frame", $r27);

        $r30 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r29 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameTypeRule;

        specialinvoke $r29.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameTypeRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r30.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/frame/local", $r29);

        $r32 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r31 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameTypeRule;

        specialinvoke $r31.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameTypeRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r32.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/frame/stack", $r31);

        $r34 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r33 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchRule;

        specialinvoke $r33.<com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r34.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/TABLESWITCH", $r33);

        $r36 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r35 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchLabelRule;

        specialinvoke $r35.<com.mycila.inject.internal.asm.xml.ASMContentHandler$TableSwitchLabelRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r36.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/TABLESWITCH/label", $r35);

        $r38 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r37 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule;

        specialinvoke $r37.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r38.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/LOOKUPSWITCH", $r37);

        $r40 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r39 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchLabelRule;

        specialinvoke $r39.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchLabelRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r40.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/LOOKUPSWITCH/label", $r39);

        $r42 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r41 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$LabelRule;

        specialinvoke $r41.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LabelRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r42.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/Label", $r41);

        $r44 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r43 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$TryCatchRule;

        specialinvoke $r43.<com.mycila.inject.internal.asm.xml.ASMContentHandler$TryCatchRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r44.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/TryCatch", $r43);

        $r46 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r45 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$LineNumberRule;

        specialinvoke $r45.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LineNumberRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r46.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/LineNumber", $r45);

        $r48 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r47 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$LocalVarRule;

        specialinvoke $r47.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LocalVarRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r48.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/LocalVar", $r47);

        $r50 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r49 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$MaxRule;

        specialinvoke $r49.<com.mycila.inject.internal.asm.xml.ASMContentHandler$MaxRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r50.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("class/method/code/Max", $r49);

        $r52 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r51 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationRule;

        specialinvoke $r51.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r52.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/annotation", $r51);

        $r54 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r53 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule;

        specialinvoke $r53.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r54.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/parameterAnnotation", $r53);

        $r56 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r55 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueRule;

        specialinvoke $r55.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r56.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/annotationValue", $r55);

        $r58 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r57 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueAnnotationRule;

        specialinvoke $r57.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueAnnotationRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r58.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/annotationValueAnnotation", $r57);

        $r60 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r59 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueEnumRule;

        specialinvoke $r59.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueEnumRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r60.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/annotationValueEnum", $r59);

        $r62 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r61 = new com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueArrayRule;

        specialinvoke $r61.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationValueArrayRule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r0);

        virtualinvoke $r62.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: void add(java.lang.String,java.lang.Object)>("*/annotationValueArray", $r61);

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.io.OutputStream os> = r63;

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: boolean computeMax> = z0;

        return;
    }

    public byte[] toByteArray()
    {
        byte[] $r3;
        com.mycila.inject.internal.asm.ClassWriter $r1, $r2;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.ClassWriter cw>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.ClassWriter cw>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.asm.ClassWriter: byte[] toByteArray()>();

     label2:
        return $r3;
    }

    public final void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule $r12;
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        org.xml.sax.Attributes r11;
        java.lang.String r0, r1, r2, $r5, $r6, $r7, $r8, r13, $r14;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet $r9;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r4;
        java.lang.Object $r10;

        r4 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        r13 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r11 := @parameter3: org.xml.sax.Attributes;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r14 = r1;

        goto label3;

     label2:
        $r14 = r0;

     label3:
        r2 = $r14;

        $r3 = new java.lang.StringBuffer;

        $r5 = r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        $r6 = r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match> = $r7;

        $r9 = r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r8 = r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        $r10 = virtualinvoke $r9.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: java.lang.Object match(java.lang.String)>($r8);

        $r12 = (com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule) $r10;

        if $r12 == null goto label5;

        virtualinvoke $r12.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule: void begin(java.lang.String,org.xml.sax.Attributes)>(r2, r11);

     label5:
        return;
    }

    public final void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule $r9;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r2;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String r0, r1, $r3, $r6, $r7, $r8, r10, $r11;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet $r4;

        r2 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r11 = r1;

        goto label3;

     label2:
        $r11 = r0;

     label3:
        $r4 = r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet RULES>;

        $r3 = r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.asm.xml.ASMContentHandler$RuleSet: java.lang.Object match(java.lang.String)>($r3);

        $r9 = (com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule) $r5;

        if $r9 == null goto label4;

        virtualinvoke $r9.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule: void end(java.lang.String)>($r11);

     label4:
        $r6 = r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        $i0 = virtualinvoke $r6.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 < 0 goto label5;

        $r7 = r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match> = $r8;

        goto label6;

     label5:
        r2.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String match> = "";

     label6:
        return;
    }

    public final void endDocument() throws org.xml.sax.SAXException
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        org.xml.sax.SAXException $r4;
        java.io.IOException $r3;
        java.lang.String $r5;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.io.OutputStream os>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: byte[] toByteArray()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.xml.sax.SAXException;

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>($r5, $r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    final java.lang.Object peek()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack>;

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

     label2:
        return $r3;
    }

    final java.lang.Object pop()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack>;

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

     label2:
        return $r3;
    }

    final void push(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;
        java.lang.String[] r2;
        java.lang.Integer $r3;
        java.util.Map $r4;
        int $i0, i1;
        java.lang.String $r5;

        <com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.String BASE> = "class";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.Map OPCODES> = $r0;

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("NOP", 0, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ACONST_NULL", 1, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_M1", 2, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_0", 3, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_1", 4, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_2", 5, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_3", 6, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_4", 7, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ICONST_5", 8, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LCONST_0", 9, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LCONST_1", 10, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FCONST_0", 11, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FCONST_1", 12, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FCONST_2", 13, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DCONST_0", 14, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DCONST_1", 15, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("BIPUSH", 16, 1);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("SIPUSH", 17, 1);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LDC", 18, 7);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ILOAD", 21, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LLOAD", 22, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FLOAD", 23, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DLOAD", 24, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ALOAD", 25, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IALOAD", 46, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LALOAD", 47, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FALOAD", 48, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DALOAD", 49, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("AALOAD", 50, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("BALOAD", 51, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("CALOAD", 52, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("SALOAD", 53, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ISTORE", 54, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LSTORE", 55, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FSTORE", 56, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DSTORE", 57, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ASTORE", 58, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IASTORE", 79, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LASTORE", 80, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FASTORE", 81, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DASTORE", 82, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("AASTORE", 83, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("BASTORE", 84, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("CASTORE", 85, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("SASTORE", 86, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("POP", 87, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("POP2", 88, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP", 89, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP_X1", 90, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP_X2", 91, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP2", 92, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP2_X1", 93, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DUP2_X2", 94, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("SWAP", 95, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IADD", 96, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LADD", 97, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FADD", 98, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DADD", 99, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ISUB", 100, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LSUB", 101, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FSUB", 102, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DSUB", 103, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IMUL", 104, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LMUL", 105, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FMUL", 106, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DMUL", 107, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IDIV", 108, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LDIV", 109, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FDIV", 110, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DDIV", 111, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IREM", 112, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LREM", 113, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FREM", 114, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DREM", 115, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INEG", 116, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LNEG", 117, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FNEG", 118, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DNEG", 119, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ISHL", 120, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LSHL", 121, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ISHR", 122, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LSHR", 123, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IUSHR", 124, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LUSHR", 125, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IAND", 126, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LAND", 127, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IOR", 128, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LOR", 129, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IXOR", 130, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LXOR", 131, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IINC", 132, 8);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2L", 133, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2F", 134, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2D", 135, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("L2I", 136, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("L2F", 137, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("L2D", 138, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("F2I", 139, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("F2L", 140, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("F2D", 141, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("D2I", 142, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("D2L", 143, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("D2F", 144, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2B", 145, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2C", 146, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("I2S", 147, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LCMP", 148, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FCMPL", 149, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FCMPG", 150, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DCMPL", 151, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DCMPG", 152, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFEQ", 153, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFNE", 154, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFLT", 155, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFGE", 156, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFGT", 157, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFLE", 158, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPEQ", 159, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPNE", 160, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPLT", 161, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPGE", 162, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPGT", 163, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ICMPLE", 164, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ACMPEQ", 165, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IF_ACMPNE", 166, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("GOTO", 167, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("JSR", 168, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("RET", 169, 2);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IRETURN", 172, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("LRETURN", 173, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("FRETURN", 174, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("DRETURN", 175, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ARETURN", 176, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("RETURN", 177, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("GETSTATIC", 178, 4);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("PUTSTATIC", 179, 4);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("GETFIELD", 180, 4);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("PUTFIELD", 181, 4);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INVOKEVIRTUAL", 182, 5);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INVOKESPECIAL", 183, 5);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INVOKESTATIC", 184, 5);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INVOKEINTERFACE", 185, 5);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INVOKEDYNAMIC", 186, 5);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("NEW", 187, 3);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("NEWARRAY", 188, 1);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ANEWARRAY", 189, 3);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ARRAYLENGTH", 190, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("ATHROW", 191, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("CHECKCAST", 192, 3);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("INSTANCEOF", 193, 3);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("MONITORENTER", 194, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("MONITOREXIT", 195, 0);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("MULTIANEWARRAY", 197, 9);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFNULL", 198, 6);

        staticinvoke <com.mycila.inject.internal.asm.xml.ASMContentHandler: void addOpcode(java.lang.String,int,int)>("IFNONNULL", 199, 6);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.Map TYPES> = $r1;

        r2 = <com.mycila.inject.internal.asm.xml.SAXCodeAdapter: java.lang.String[] TYPES>;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r4 = <com.mycila.inject.internal.asm.xml.ASMContentHandler: java.util.Map TYPES>;

        $r5 = r2[i1];

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
