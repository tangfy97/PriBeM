public class com.jhlabs.image.TileImageFilter extends com.jhlabs.image.AbstractBufferedImageOp implements java.io.Serializable
{
    static final long serialVersionUID;
    public static final int FLIP_NONE;
    public static final int FLIP_H;
    public static final int FLIP_V;
    public static final int FLIP_HV;
    public static final int FLIP_180;
    private int width;
    private int height;
    private int tileWidth;
    private int tileHeight;
    private int[][] symmetryMatrix;
    private int symmetryRows;
    private int symmetryCols;

    public void <init>()
    {
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        specialinvoke r0.<com.jhlabs.image.TileImageFilter: void <init>(int,int)>(32, 32);

        return;
    }

    public void <init>(int, int)
    {
        int[][] $r1;
        com.jhlabs.image.TileImageFilter r0;
        int i0, i1;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        $r1 = (int[][]) null;

        r0.<com.jhlabs.image.TileImageFilter: int[][] symmetryMatrix> = $r1;

        r0.<com.jhlabs.image.TileImageFilter: int symmetryRows> = 2;

        r0.<com.jhlabs.image.TileImageFilter: int symmetryCols> = 2;

        r0.<com.jhlabs.image.TileImageFilter: int width> = i0;

        r0.<com.jhlabs.image.TileImageFilter: int height> = i1;

        return;
    }

    public void setWidth(int)
    {
        int i0;
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.TileImageFilter: int width> = i0;

        return;
    }

    public int getWidth()
    {
        int $i0;
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        $i0 = r0.<com.jhlabs.image.TileImageFilter: int width>;

        return $i0;
    }

    public void setHeight(int)
    {
        int i0;
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.TileImageFilter: int height> = i0;

        return;
    }

    public int getHeight()
    {
        int $i0;
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        $i0 = r0.<com.jhlabs.image.TileImageFilter: int height>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.TileImageFilter r2;
        java.awt.Graphics2D $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r4, r6;
        java.awt.image.ColorModel $r3;
        java.awt.image.WritableRaster $r5;

        r2 := @this: com.jhlabs.image.TileImageFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label1;

        $r3 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = new java.awt.image.BufferedImage;

        $i4 = r2.<com.jhlabs.image.TileImageFilter: int width>;

        $i3 = r2.<com.jhlabs.image.TileImageFilter: int height>;

        $r5 = virtualinvoke $r3.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i4, $i3);

        $z0 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, $r5, $z0, null);

        r6 = $r4;

     label1:
        $r1 = virtualinvoke r6.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        i5 = 0;

     label2:
        $i6 = r2.<com.jhlabs.image.TileImageFilter: int height>;

        if i5 >= $i6 goto label5;

        i7 = 0;

     label3:
        $i2 = r2.<com.jhlabs.image.TileImageFilter: int width>;

        if i7 >= $i2 goto label4;

        virtualinvoke $r1.<java.awt.Graphics2D: void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)>(r0, null, i7, i5);

        i7 = i7 + $i0;

        goto label3;

     label4:
        i5 = i5 + $i1;

        goto label2;

     label5:
        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        return r6;
    }

    public void setSymmetryMatrix(int[][])
    {
        int[][] r1;
        int[] $r2;
        com.jhlabs.image.TileImageFilter r0;
        int $i0, $i1;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        r1 := @parameter0: int[][];

        r0.<com.jhlabs.image.TileImageFilter: int[][] symmetryMatrix> = r1;

        $i0 = lengthof r1;

        r0.<com.jhlabs.image.TileImageFilter: int symmetryRows> = $i0;

        $r2 = r1[0];

        $i1 = lengthof $r2;

        r0.<com.jhlabs.image.TileImageFilter: int symmetryCols> = $i1;

        return;
    }

    public int[][] getSymmetryMatrix()
    {
        int[][] $r1;
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        $r1 = r0.<com.jhlabs.image.TileImageFilter: int[][] symmetryMatrix>;

        return $r1;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.TileImageFilter r0;

        r0 := @this: com.jhlabs.image.TileImageFilter;

        return "Tile";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.TileImageFilter: int FLIP_180> = 4;

        <com.jhlabs.image.TileImageFilter: int FLIP_HV> = 3;

        <com.jhlabs.image.TileImageFilter: int FLIP_V> = 2;

        <com.jhlabs.image.TileImageFilter: int FLIP_H> = 1;

        <com.jhlabs.image.TileImageFilter: int FLIP_NONE> = 0;

        <com.jhlabs.image.TileImageFilter: long serialVersionUID> = 4926390225069192478L;

        return;
    }
}
