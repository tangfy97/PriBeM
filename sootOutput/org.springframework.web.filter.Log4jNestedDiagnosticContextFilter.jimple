public class org.springframework.web.filter.Log4jNestedDiagnosticContextFilter extends org.springframework.web.filter.AbstractRequestLoggingFilter
{
    protected final org.apache.log4j.Logger log4jLogger;

    public void <init>()
    {
        org.apache.log4j.Logger $r2;
        java.lang.Class $r1;
        org.springframework.web.filter.Log4jNestedDiagnosticContextFilter r0;

        r0 := @this: org.springframework.web.filter.Log4jNestedDiagnosticContextFilter;

        specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r1);

        r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: org.apache.log4j.Logger log4jLogger> = $r2;

        return;
    }

    protected void beforeRequest(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        org.apache.log4j.Logger $r1, $r5;
        javax.servlet.http.HttpServletRequest r2;
        org.springframework.web.filter.Log4jNestedDiagnosticContextFilter r0;
        java.lang.String $r3, r4;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.Log4jNestedDiagnosticContextFilter;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: org.apache.log4j.Logger log4jLogger>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: org.apache.log4j.Logger log4jLogger>;

        virtualinvoke $r5.<org.apache.log4j.Logger: void debug(java.lang.Object)>(r4);

     label1:
        $r3 = virtualinvoke r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: java.lang.String getNestedDiagnosticContextMessage(javax.servlet.http.HttpServletRequest)>(r2);

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>($r3);

        return;
    }

    protected java.lang.String getNestedDiagnosticContextMessage(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.String $r2;
        org.springframework.web.filter.Log4jNestedDiagnosticContextFilter r0;

        r0 := @this: org.springframework.web.filter.Log4jNestedDiagnosticContextFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: java.lang.String createMessage(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r1, "", "");

        return $r2;
    }

    protected void afterRequest(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        org.apache.log4j.Logger $r1, $r3;
        javax.servlet.http.HttpServletRequest r4;
        org.springframework.web.filter.Log4jNestedDiagnosticContextFilter r0;
        int $i0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.Log4jNestedDiagnosticContextFilter;

        r4 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: java.lang.String;

        staticinvoke <org.apache.log4j.NDC: java.lang.String pop()>();

        $i0 = staticinvoke <org.apache.log4j.NDC: int getDepth()>();

        if $i0 != 0 goto label1;

        staticinvoke <org.apache.log4j.NDC: void remove()>();

     label1:
        $r1 = r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: org.apache.log4j.Logger log4jLogger>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.springframework.web.filter.Log4jNestedDiagnosticContextFilter: org.apache.log4j.Logger log4jLogger>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>(r2);

     label2:
        return;
    }
}
