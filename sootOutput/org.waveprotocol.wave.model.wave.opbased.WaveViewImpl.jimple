public final class org.waveprotocol.wave.model.wave.opbased.WaveViewImpl extends java.lang.Object implements org.waveprotocol.wave.model.wave.opbased.ObservableWaveView
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final java.util.Map wavelets;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final org.waveprotocol.wave.model.wave.ParticipantId viewer;
    private final org.waveprotocol.wave.model.id.IdGenerator idGenerator;
    private final org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator;
    private final org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory factory;
    private final org.waveprotocol.wave.model.id.WaveletId rootId;
    private final org.waveprotocol.wave.model.id.WaveletId userDataId;

    void <init>(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdGenerator, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory r4;
        org.waveprotocol.wave.model.id.WaveId r3;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator r7;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.id.WaveletId $r8, $r10;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.id.IdGenerator r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory;

        r3 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        r6 := @parameter2: org.waveprotocol.wave.model.id.IdGenerator;

        r5 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

        r7 := @parameter4: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId waveId> = r3;

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory factory> = r4;

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ParticipantId viewer> = r5;

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r6;

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator> = r7;

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newConversationRootWaveletId()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId rootId> = $r8;

        $r9 = virtualinvoke r5.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r10 = interfaceinvoke r6.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newUserDataWaveletId(java.lang.String)>($r9);

        r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId userDataId> = $r10;

        return;
    }

    public static org.waveprotocol.wave.model.wave.opbased.WaveViewImpl create(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdGenerator, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory r1;
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator r5;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r0;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.wave.model.id.IdGenerator r3;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        r3 := @parameter2: org.waveprotocol.wave.model.id.IdGenerator;

        r4 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter4: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator;

        $r0 = new org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void <init>(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdGenerator,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)>(r1, r2, r3, r4, r5);

        return $r0;
    }

    public void addWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r9;
        java.util.Map $r2, $r8;
        org.waveprotocol.wave.model.wave.ObservableWavelet r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added multiple wavelets with same id: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r7);

        $r8 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void triggerOnWaveletAdded(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r1);

        return;
    }

    public void removeWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r9;
        java.util.Map $r2, $r8;
        org.waveprotocol.wave.model.wave.ObservableWavelet r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed a wavelet that doesn\'t exist: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r7);

        $r8 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void triggerOnWaveletRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory $r4;
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator $r6;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory factory>;

        $r3 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory: org.waveprotocol.wave.model.wave.ObservableWavelet create(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, r1, $r2);

        $r6 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator>;

        virtualinvoke $r6.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator: void configure(org.waveprotocol.wave.model.wave.Wavelet)>($r5);

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void addWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r5);

        return $r5;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()
    {
        java.lang.IllegalStateException $r4;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId rootId>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Attempted to create duplicate root wavelet", $r3);

        throw $r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.id.IdGenerator $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newConversationWaveletId()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId userDataId>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.ObservableWavelet) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId rootId>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveletId userDataId>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        return $r2;
    }

    public java.lang.Iterable getWavelets()
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.util.Map wavelets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerOnWaveletAdded(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.WaveViewListener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.WaveViewListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.WaveViewListener: void onWaveletAdded(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnWaveletRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.WaveViewListener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.WaveViewListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.WaveViewListener: void onWaveletRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createRoot()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getRoot()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createWavelet()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }
}
