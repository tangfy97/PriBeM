public abstract class org.apache.batik.dom.svg.AbstractSVGAnimatedValue extends java.lang.Object implements org.apache.batik.dom.svg.AnimatedLiveAttributeValue
{
    protected org.apache.batik.dom.svg.AbstractElement element;
    protected java.lang.String namespaceURI;
    protected java.lang.String localName;
    protected boolean hasAnimVal;
    protected java.util.LinkedList listeners;

    public void <init>(org.apache.batik.dom.svg.AbstractElement, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.lang.String r3, r4;
        java.util.LinkedList $r1;
        org.apache.batik.dom.svg.AbstractElement r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        r2 := @parameter0: org.apache.batik.dom.svg.AbstractElement;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.util.LinkedList listeners> = $r1;

        r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element> = r2;

        r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI> = r3;

        r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName> = r4;

        return;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI>;

        return $r1;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName>;

        return $r1;
    }

    public boolean isSpecified()
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.lang.String $r1, $r2;
        org.apache.batik.dom.svg.AbstractElement $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        $z0 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI>;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName>;

        $z1 = virtualinvoke $r3.<org.apache.batik.dom.AbstractElement: boolean hasAttributeNS(java.lang.String,java.lang.String)>($r2, $r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected abstract void updateAnimatedValue(org.apache.batik.anim.values.AnimatableValue);

    public void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        org.apache.batik.dom.svg.AnimatedAttributeListener r1;
        java.util.LinkedList $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        r1 := @parameter0: org.apache.batik.dom.svg.AnimatedAttributeListener;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.util.LinkedList listeners>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.util.LinkedList listeners>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void removeAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        org.apache.batik.dom.svg.AnimatedAttributeListener r1;
        java.util.LinkedList $r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        r1 := @parameter0: org.apache.batik.dom.svg.AnimatedAttributeListener;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.util.LinkedList listeners>;

        virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void fireBaseAttributeListeners()
    {
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.lang.String $r3, $r4;
        org.apache.batik.dom.svg.AbstractElement $r1, $r2;
        org.apache.batik.dom.svg.SVGOMElement $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        $z0 = $r1 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        $r5 = (org.apache.batik.dom.svg.SVGOMElement) $r2;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI>;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.SVGOMElement: void fireBaseAttributeListeners(java.lang.String,java.lang.String)>($r4, $r3);

     label1:
        return;
    }

    protected void fireAnimatedAttributeListeners()
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue r0;
        java.util.LinkedList $r1;
        org.apache.batik.dom.svg.AnimatedAttributeListener r4;
        org.apache.batik.dom.svg.AbstractElement $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGAnimatedValue;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.util.LinkedList listeners>;

        $r2 = virtualinvoke $r1.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.batik.dom.svg.AnimatedAttributeListener) $r3;

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        interfaceinvoke r4.<org.apache.batik.dom.svg.AnimatedAttributeListener: void animatedAttributeChanged(org.w3c.dom.Element,org.apache.batik.dom.svg.AnimatedLiveAttributeValue)>($r5, r0);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public abstract org.apache.batik.anim.values.AnimatableValue getUnderlyingValue(org.apache.batik.dom.anim.AnimationTarget);

    public abstract void attrRemoved(org.w3c.dom.Attr, java.lang.String);

    public abstract void attrModified(org.w3c.dom.Attr, java.lang.String, java.lang.String);

    public abstract void attrAdded(org.w3c.dom.Attr, java.lang.String);
}
