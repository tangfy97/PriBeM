public class groovy.model.ClosureModel extends java.lang.Object implements groovy.model.ValueModel, groovy.model.NestedValueModel
{
    private final groovy.model.ValueModel sourceModel;
    private final groovy.lang.Closure readClosure;
    private final groovy.lang.Closure writeClosure;
    private final java.lang.Class type;
    static java.lang.Class class$java$lang$Object;

    public void <init>(groovy.model.ValueModel, groovy.lang.Closure)
    {
        groovy.model.ValueModel r1;
        groovy.lang.Closure r2;
        groovy.model.ClosureModel r0;

        r0 := @this: groovy.model.ClosureModel;

        r1 := @parameter0: groovy.model.ValueModel;

        r2 := @parameter1: groovy.lang.Closure;

        specialinvoke r0.<groovy.model.ClosureModel: void <init>(groovy.model.ValueModel,groovy.lang.Closure,groovy.lang.Closure)>(r1, r2, null);

        return;
    }

    public void <init>(groovy.model.ValueModel, groovy.lang.Closure, groovy.lang.Closure)
    {
        groovy.model.ValueModel r1;
        groovy.model.ClosureModel r0;
        groovy.lang.Closure r2, r3;
        java.lang.Class $r4, $r5;

        r0 := @this: groovy.model.ClosureModel;

        r1 := @parameter0: groovy.model.ValueModel;

        r2 := @parameter1: groovy.lang.Closure;

        r3 := @parameter2: groovy.lang.Closure;

        $r4 = <groovy.model.ClosureModel: java.lang.Class class$java$lang$Object>;

        if $r4 != null goto label1;

        $r5 = staticinvoke <groovy.model.ClosureModel: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.model.ClosureModel: java.lang.Class class$java$lang$Object> = $r5;

        goto label2;

     label1:
        $r5 = <groovy.model.ClosureModel: java.lang.Class class$java$lang$Object>;

     label2:
        specialinvoke r0.<groovy.model.ClosureModel: void <init>(groovy.model.ValueModel,groovy.lang.Closure,groovy.lang.Closure,java.lang.Class)>(r1, r2, r3, $r5);

        return;
    }

    public void <init>(groovy.model.ValueModel, groovy.lang.Closure, groovy.lang.Closure, java.lang.Class)
    {
        groovy.model.ValueModel r1;
        groovy.model.ClosureModel r0;
        groovy.lang.Closure r2, r3;
        java.lang.Class r4;

        r0 := @this: groovy.model.ClosureModel;

        r1 := @parameter0: groovy.model.ValueModel;

        r2 := @parameter1: groovy.lang.Closure;

        r3 := @parameter2: groovy.lang.Closure;

        r4 := @parameter3: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovy.model.ClosureModel: groovy.model.ValueModel sourceModel> = r1;

        r0.<groovy.model.ClosureModel: groovy.lang.Closure readClosure> = r2;

        r0.<groovy.model.ClosureModel: groovy.lang.Closure writeClosure> = r3;

        r0.<groovy.model.ClosureModel: java.lang.Class type> = r4;

        return;
    }

    public groovy.model.ValueModel getSourceModel()
    {
        groovy.model.ValueModel $r1;
        groovy.model.ClosureModel r0;

        r0 := @this: groovy.model.ClosureModel;

        $r1 = r0.<groovy.model.ClosureModel: groovy.model.ValueModel sourceModel>;

        return $r1;
    }

    public java.lang.Object getValue()
    {
        groovy.model.ValueModel $r1;
        groovy.model.ClosureModel r0;
        groovy.lang.Closure $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: groovy.model.ClosureModel;

        $r1 = r0.<groovy.model.ClosureModel: groovy.model.ValueModel sourceModel>;

        $r2 = interfaceinvoke $r1.<groovy.model.ValueModel: java.lang.Object getValue()>();

        if $r2 == null goto label1;

        $r3 = r0.<groovy.model.ClosureModel: groovy.lang.Closure readClosure>;

        $r4 = virtualinvoke $r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        return $r4;

     label1:
        return null;
    }

    public void setValue(java.lang.Object)
    {
        groovy.model.ValueModel $r2;
        groovy.model.ClosureModel r0;
        java.lang.Object[] $r4;
        groovy.lang.Closure $r1, $r6;
        java.lang.Object $r3, r5;

        r0 := @this: groovy.model.ClosureModel;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<groovy.model.ClosureModel: groovy.lang.Closure writeClosure>;

        if $r1 == null goto label1;

        $r2 = r0.<groovy.model.ClosureModel: groovy.model.ValueModel sourceModel>;

        $r3 = interfaceinvoke $r2.<groovy.model.ValueModel: java.lang.Object getValue()>();

        if $r3 == null goto label1;

        $r6 = r0.<groovy.model.ClosureModel: groovy.lang.Closure writeClosure>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r3;

        $r4[1] = r5;

        virtualinvoke $r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r4);

     label1:
        return;
    }

    public java.lang.Class getType()
    {
        groovy.model.ClosureModel r0;
        java.lang.Class $r1;

        r0 := @this: groovy.model.ClosureModel;

        $r1 = r0.<groovy.model.ClosureModel: java.lang.Class type>;

        return $r1;
    }

    public boolean isEditable()
    {
        groovy.lang.Closure $r1;
        groovy.model.ClosureModel r0;
        boolean $z0;

        r0 := @this: groovy.model.ClosureModel;

        $r1 = r0.<groovy.model.ClosureModel: groovy.lang.Closure writeClosure>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
