public abstract class org.apache.lucene.search.ScoringRewrite extends org.apache.lucene.search.TermCollectingRewrite
{
    public static final org.apache.lucene.search.ScoringRewrite SCORING_BOOLEAN_QUERY_REWRITE;
    public static final org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.search.ScoringRewrite r0;

        r0 := @this: org.apache.lucene.search.ScoringRewrite;

        specialinvoke r0.<org.apache.lucene.search.TermCollectingRewrite: void <init>()>();

        return;
    }

    protected abstract void checkMaxClauseCount(int) throws java.io.IOException;

    public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r1;
        org.apache.lucene.util.BytesRefHash $r5, $r7, $r17;
        org.apache.lucene.index.Term $r14;
        org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector $r2;
        org.apache.lucene.search.MultiTermQuery r4;
        int[] $r9;
        org.apache.lucene.index.TermsEnum $r6;
        boolean $z0;
        org.apache.lucene.search.ScoringRewrite r0;
        org.apache.lucene.util.BytesRef $r16, $r18;
        float $f0, $f1, $f2;
        org.apache.lucene.index.IndexReader r3;
        float[] r11;
        java.lang.AssertionError $r22;
        int $i0, i1, $i2, $i3, $i4, i5;
        java.lang.String $r15;
        org.apache.lucene.index.TermContext $r19, $r20, $r21;
        org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart $r10, $r12;
        org.apache.lucene.index.TermContext[] r13;
        java.util.Comparator $r8;

        r0 := @this: org.apache.lucene.search.ScoringRewrite;

        r3 := @parameter0: org.apache.lucene.index.IndexReader;

        r4 := @parameter1: org.apache.lucene.search.MultiTermQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.ScoringRewrite: org.apache.lucene.search.Query getTopLevelQuery()>();

        $r2 = new org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector;

        specialinvoke $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: void <init>(org.apache.lucene.search.ScoringRewrite)>(r0);

        virtualinvoke r0.<org.apache.lucene.search.ScoringRewrite: void collectTerms(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery,org.apache.lucene.search.TermCollectingRewrite$TermCollector)>(r3, r4, $r2);

        $r5 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.util.BytesRefHash terms>;

        $i0 = virtualinvoke $r5.<org.apache.lucene.util.BytesRefHash: int size()>();

        if $i0 <= 0 goto label3;

        $r7 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.util.BytesRefHash terms>;

        $r6 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.index.TermsEnum termsEnum>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        $r9 = virtualinvoke $r7.<org.apache.lucene.util.BytesRefHash: int[] sort(java.util.Comparator)>($r8);

        $r10 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart array>;

        r11 = $r10.<org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart: float[] boost>;

        $r12 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart array>;

        r13 = $r12.<org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart: org.apache.lucene.index.TermContext[] termState>;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label3;

        i1 = $r9[i5];

        $r14 = new org.apache.lucene.index.Term;

        $r15 = virtualinvoke r4.<org.apache.lucene.search.MultiTermQuery: java.lang.String getField()>();

        $r17 = $r2.<org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector: org.apache.lucene.util.BytesRefHash terms>;

        $r16 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r16.<org.apache.lucene.util.BytesRef: void <init>()>();

        $r18 = virtualinvoke $r17.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRef get(int,org.apache.lucene.util.BytesRef)>(i1, $r16);

        specialinvoke $r14.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r15, $r18);

        $z0 = <org.apache.lucene.search.ScoringRewrite: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i3 = virtualinvoke r3.<org.apache.lucene.index.IndexReader: int docFreq(org.apache.lucene.index.Term)>($r14);

        $r21 = r13[i1];

        $i4 = virtualinvoke $r21.<org.apache.lucene.index.TermContext: int docFreq()>();

        if $i3 == $i4 goto label2;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label2:
        $r19 = r13[i1];

        $i2 = virtualinvoke $r19.<org.apache.lucene.index.TermContext: int docFreq()>();

        $f0 = virtualinvoke r4.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        $f1 = r11[i1];

        $f2 = $f0 * $f1;

        $r20 = r13[i1];

        virtualinvoke r0.<org.apache.lucene.search.ScoringRewrite: void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,int,float,org.apache.lucene.index.TermContext)>($r1, $r14, $i2, $f2, $r20);

        i5 = i5 + 1;

        goto label1;

     label3:
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.lucene.search.ScoringRewrite$1 $r1;
        org.apache.lucene.search.ScoringRewrite$2 $r2;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/ScoringRewrite;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.ScoringRewrite: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.search.ScoringRewrite$1;

        specialinvoke $r1.<org.apache.lucene.search.ScoringRewrite$1: void <init>()>();

        <org.apache.lucene.search.ScoringRewrite: org.apache.lucene.search.ScoringRewrite SCORING_BOOLEAN_QUERY_REWRITE> = $r1;

        $r2 = new org.apache.lucene.search.ScoringRewrite$2;

        specialinvoke $r2.<org.apache.lucene.search.ScoringRewrite$2: void <init>()>();

        <org.apache.lucene.search.ScoringRewrite: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE> = $r2;

        return;
    }
}
