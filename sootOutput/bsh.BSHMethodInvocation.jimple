class bsh.BSHMethodInvocation extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHMethodInvocation r0;

        r0 := @this: bsh.BSHMethodInvocation;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    bsh.BSHAmbiguousName getNameNode()
    {
        bsh.BSHMethodInvocation r0;
        bsh.Node $r1;
        bsh.BSHAmbiguousName $r2;

        r0 := @this: bsh.BSHMethodInvocation;

        $r1 = virtualinvoke r0.<bsh.BSHMethodInvocation: bsh.Node jjtGetChild(int)>(0);

        $r2 = (bsh.BSHAmbiguousName) $r1;

        return $r2;
    }

    bsh.BSHArguments getArgsNode()
    {
        bsh.BSHMethodInvocation r0;
        bsh.BSHArguments $r2;
        bsh.Node $r1;

        r0 := @this: bsh.BSHMethodInvocation;

        $r1 = virtualinvoke r0.<bsh.BSHMethodInvocation: bsh.Node jjtGetChild(int)>(1);

        $r2 = (bsh.BSHArguments) $r1;

        return $r2;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.BSHMethodInvocation r2;
        bsh.BSHArguments $r27;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        bsh.TargetError $r18, $r30;
        bsh.Interpreter r5;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.Throwable $r17;
        java.lang.Object[] $r28;
        bsh.Name $r26;
        bsh.NameSpace $r1, $r4, $r6;
        bsh.UtilEvalError $r10;
        bsh.CallStack r0;
        bsh.BSHAmbiguousName $r3;
        java.lang.StringBuffer $r13, $r14, $r15, $r21, $r22, $r24;
        java.lang.String $r7, $r9, $r16, $r23, $r25;
        bsh.ReflectError $r19;
        bsh.EvalError $r11, $r20;
        bsh.Primitive $r8;
        java.lang.Object $r29;

        r2 := @this: bsh.BSHMethodInvocation;

        r0 := @parameter0: bsh.CallStack;

        r5 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r2.<bsh.BSHMethodInvocation: bsh.BSHAmbiguousName getNameNode()>();

        $r4 = virtualinvoke $r1.<bsh.NameSpace: bsh.NameSpace getParent()>();

        if $r4 == null goto label2;

        $r6 = virtualinvoke $r1.<bsh.NameSpace: bsh.NameSpace getParent()>();

        $z0 = $r6.<bsh.NameSpace: boolean isClass>;

        if $z0 == 0 goto label2;

        $r7 = $r3.<bsh.BSHAmbiguousName: java.lang.String text>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z1 != 0 goto label1;

        $r9 = $r3.<bsh.BSHAmbiguousName: java.lang.String text>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z2 == 0 goto label2;

     label1:
        $r8 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r8;

     label2:
        $r26 = virtualinvoke $r3.<bsh.BSHAmbiguousName: bsh.Name getName(bsh.NameSpace)>($r1);

        $r27 = virtualinvoke r2.<bsh.BSHMethodInvocation: bsh.BSHArguments getArgsNode()>();

        $r28 = virtualinvoke $r27.<bsh.BSHArguments: java.lang.Object[] getArguments(bsh.CallStack,bsh.Interpreter)>(r0, r5);

     label3:
        $r29 = virtualinvoke $r26.<bsh.Name: java.lang.Object invokeMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)>(r5, $r28, r0, r2);

     label4:
        return $r29;

     label5:
        $r19 := @caughtexception;

        $r20 = new bsh.EvalError;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in method invocation: ");

        $r23 = virtualinvoke $r19.<bsh.ReflectError: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r25, r2, r0);

        throw $r20;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method Invocation ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r26);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = virtualinvoke $r12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        z5 = 1;

        $z3 = $r17 instanceof bsh.EvalError;

        if $z3 == 0 goto label8;

        $z4 = $r17 instanceof bsh.TargetError;

        if $z4 == 0 goto label7;

        $r18 = (bsh.TargetError) $r17;

        z5 = virtualinvoke $r18.<bsh.TargetError: boolean inNativeCode()>();

        goto label8;

     label7:
        z5 = 0;

     label8:
        $r30 = new bsh.TargetError;

        specialinvoke $r30.<bsh.TargetError: void <init>(java.lang.String,java.lang.Throwable,bsh.SimpleNode,bsh.CallStack,boolean)>($r16, $r17, r2, r0, z5);

        throw $r30;

     label9:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r2, r0);

        throw $r11;

        catch bsh.ReflectError from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
        catch bsh.UtilEvalError from label3 to label4 with label9;
    }
}
