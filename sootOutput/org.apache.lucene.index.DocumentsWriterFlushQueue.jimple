class org.apache.lucene.index.DocumentsWriterFlushQueue extends java.lang.Object
{
    private final java.util.Queue queue;
    private final java.util.concurrent.atomic.AtomicInteger ticketCount;
    private final java.util.concurrent.locks.ReentrantLock purgeLock;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount> = $r2;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock> = $r3;

        return;
    }

    void addDeletesAndPurge(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.DocumentsWriterDeleteQueue) throws java.io.IOException
    {
        java.lang.Throwable $r6, $r7;
        org.apache.lucene.index.DocumentsWriterDeleteQueue r2;
        org.apache.lucene.index.DocumentsWriter r5;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        org.apache.lucene.index.FrozenBufferedDeletes $r4;
        java.util.Queue $r3;
        org.apache.lucene.index.DocumentsWriterFlushQueue$GlobalDeletesTicket $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r5 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        r2 := @parameter1: org.apache.lucene.index.DocumentsWriterDeleteQueue;

        entermonitor r0;

     label01:
        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void incTickets()>();

     label02:
        $r3 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        $r1 = new org.apache.lucene.index.DocumentsWriterFlushQueue$GlobalDeletesTicket;

        $r4 = virtualinvoke r2.<org.apache.lucene.index.DocumentsWriterDeleteQueue: org.apache.lucene.index.FrozenBufferedDeletes freezeGlobalBuffer(org.apache.lucene.index.DocumentsWriterDeleteQueue$DeleteSlice)>(null);

        specialinvoke $r1.<org.apache.lucene.index.DocumentsWriterFlushQueue$GlobalDeletesTicket: void <init>(org.apache.lucene.index.FrozenBufferedDeletes)>($r4);

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>($r1);

     label03:
        if 1 != 0 goto label07;

        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void decTickets()>();

        goto label07;

     label04:
        $r7 := @caughtexception;

     label05:
        if 0 != 0 goto label06;

        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void decTickets()>();

     label06:
        throw $r7;

     label07:
        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r6 := @caughtexception;

        exitmonitor r0;

     label10:
        throw $r6;

     label11:
        virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void forcePurge(org.apache.lucene.index.DocumentsWriter)>(r5);

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void incTickets()
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    private void decTickets()
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    synchronized org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket addFlushTicket(org.apache.lucene.index.DocumentsWriterPerThread)
    {
        java.lang.Throwable $r5;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        org.apache.lucene.index.FrozenBufferedDeletes $r3;
        java.util.Queue $r4;
        org.apache.lucene.index.DocumentsWriterPerThread r2;
        org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket $r1;
        boolean z0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r2 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThread;

        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void incTickets()>();

        z0 = 0;

     label1:
        $r1 = new org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket;

        $r3 = virtualinvoke r2.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.FrozenBufferedDeletes prepareFlush()>();

        specialinvoke $r1.<org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket: void <init>(org.apache.lucene.index.FrozenBufferedDeletes)>($r3);

        $r4 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        z0 = 1;

     label2:
        if 1 != 0 goto label3;

        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void decTickets()>();

     label3:
        return $r1;

     label4:
        $r5 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void decTickets()>();

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    synchronized void addSegment(org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket, org.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment)
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r2;
        org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket r0;
        org.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment r1;

        r2 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket;

        r1 := @parameter1: org.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment;

        virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket: void setSegment(org.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment)>(r1);

        return;
    }

    synchronized void markTicketFailed(org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket)
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r1;
        org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket r0;

        r1 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket;

        virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue$SegmentFlushTicket: void setFailed()>();

        return;
    }

    boolean hasTickets()
    {
        java.lang.AssertionError $r3;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2, $r6;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ticketCount should be >= 0 but was: ");

        $r6 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r3;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void innerPurge(org.apache.lucene.index.DocumentsWriter) throws java.io.IOException
    {
        java.lang.Throwable $r8, $r9, $r15, $r16;
        java.lang.AssertionError $r5, $r7, $r14;
        org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket r12, $r19, r20;
        org.apache.lucene.index.DocumentsWriter r1;
        java.util.concurrent.atomic.AtomicInteger $r4, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.locks.ReentrantLock $r6;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.lang.Object $r3, $r11, $r18;
        java.util.Queue $r2, $r10, $r17;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r6 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        $z3 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z3 != 0 goto label01;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label01:
        entermonitor r0;

     label02:
        $r17 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        $r18 = interfaceinvoke $r17.<java.util.Queue: java.lang.Object peek()>();

        $r19 = (org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket) $r18;

        if $r19 == null goto label03;

        $z2 = virtualinvoke $r19.<org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket: boolean canPublish()>();

        if $z2 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        exitmonitor r0;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        exitmonitor r0;

     label07:
        throw $r16;

     label08:
        if $z5 == 0 goto label26;

     label09:
        virtualinvoke $r19.<org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket: void publish(org.apache.lucene.index.DocumentsWriter)>(r1);

     label10:
        entermonitor r0;

     label11:
        $r2 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object poll()>();

        r20 = (org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket) $r3;

        $r4 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z1 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z1 != 0 goto label12;

        if r20 == $r19 goto label12;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label12:
        exitmonitor r0;

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        exitmonitor r0;

     label15:
        throw $r15;

     label16:
        goto label25;

     label17:
        $r9 := @caughtexception;

     label18:
        entermonitor r0;

     label19:
        $r10 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>();

        r12 = (org.apache.lucene.index.DocumentsWriterFlushQueue$FlushTicket) $r11;

        $r13 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z4 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z4 != 0 goto label20;

        if r12 == $r19 goto label20;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label20:
        exitmonitor r0;

     label21:
        goto label24;

     label22:
        $r8 := @caughtexception;

        exitmonitor r0;

     label23:
        throw $r8;

     label24:
        throw $r9;

     label25:
        goto label01;

     label26:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label19 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    void forcePurge(org.apache.lucene.index.DocumentsWriter) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.util.concurrent.locks.ReentrantLock $r1, $r3, $r6;
        java.lang.AssertionError $r4;
        org.apache.lucene.index.DocumentsWriter r2;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r2 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void innerPurge(org.apache.lucene.index.DocumentsWriter)>(r2);

     label3:
        $r3 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        $r6 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void tryPurge(org.apache.lucene.index.DocumentsWriter) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.util.concurrent.locks.ReentrantLock $r1, $r3, $r6;
        java.lang.AssertionError $r4;
        org.apache.lucene.index.DocumentsWriter r2;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        r2 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        $z0 = <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        $z1 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z1 == 0 goto label6;

     label2:
        specialinvoke r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: void innerPurge(org.apache.lucene.index.DocumentsWriter)>(r2);

     label3:
        $r3 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        $r6 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.locks.ReentrantLock purgeLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getTicketCount()
    {
        int $i0;
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    synchronized void clear()
    {
        org.apache.lucene.index.DocumentsWriterFlushQueue r0;
        java.util.Queue $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: org.apache.lucene.index.DocumentsWriterFlushQueue;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.Queue queue>;

        interfaceinvoke $r1.<java.util.Queue: void clear()>();

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterFlushQueue: java.util.concurrent.atomic.AtomicInteger ticketCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/DocumentsWriterFlushQueue;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.DocumentsWriterFlushQueue: boolean $assertionsDisabled> = $z1;

        return;
    }
}
