public class org.apache.lucene.index.FieldInfos extends java.lang.Object implements java.lang.Iterable
{
    private final boolean hasFreq;
    private final boolean hasProx;
    private final boolean hasPayloads;
    private final boolean hasOffsets;
    private final boolean hasVectors;
    private final boolean hasNorms;
    private final boolean hasDocValues;
    private final java.util.SortedMap byNumber;
    private final java.util.HashMap byName;
    private final java.util.Collection values;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.FieldInfo[])
    {
        java.lang.Integer $r9;
        org.apache.lucene.index.FieldInfos r0;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r31, $r32, $r34, $r35, $r37, $r38, $r39;
        java.lang.String $r11, $r27, $r29, $r33, $r36, $r40;
        java.util.TreeMap $r1;
        org.apache.lucene.index.FieldInfo r7, r41, r42;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7, z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        org.apache.lucene.index.FieldInfo$IndexOptions $r14, $r15, $r16, $r17, $r18, $r19;
        java.util.Collection $r5, $r6;
        java.util.SortedMap $r4, $r8;
        java.util.HashMap $r2, $r12;
        org.apache.lucene.index.FieldInfo[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.IllegalArgumentException $r20, $r30;
        java.lang.Object $r10, $r13;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        r3 := @parameter0: org.apache.lucene.index.FieldInfo[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.FieldInfos: java.util.HashMap byName> = $r2;

        z2 = 0;

        z3 = 0;

        z4 = 0;

        z5 = 0;

        z6 = 0;

        z7 = 0;

        z8 = 0;

        i0 = lengthof r3;

        i7 = 0;

     label01:
        if i7 >= i0 goto label10;

        r7 = r3[i7];

        $r8 = r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber>;

        $i1 = r7.<org.apache.lucene.index.FieldInfo: int number>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r10 = interfaceinvoke $r8.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        r41 = (org.apache.lucene.index.FieldInfo) $r10;

        if r41 == null goto label02;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate field numbers: ");

        $r33 = r41.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r36 = r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have: ");

        $i6 = r7.<org.apache.lucene.index.FieldInfo: int number>;

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40);

        throw $r30;

     label02:
        $r12 = r0.<org.apache.lucene.index.FieldInfos: java.util.HashMap byName>;

        $r11 = r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r7);

        r42 = (org.apache.lucene.index.FieldInfo) $r13;

        if r42 == null goto label03;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate field names: ");

        $i4 = r42.<org.apache.lucene.index.FieldInfo: int number>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $i5 = r7.<org.apache.lucene.index.FieldInfo: int number>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have: ");

        $r27 = r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r20;

     label03:
        $z0 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean hasVectors()>();

        z2 = z2 | $z0;

        $z9 = z3;

        $z1 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 == 0 goto label04;

        $r18 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r19 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        $i3 = virtualinvoke $r18.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r19);

        if $i3 < 0 goto label04;

        $z10 = 1;

        goto label05;

     label04:
        $z10 = 0;

     label05:
        z3 = $z9 | $z10;

        $z11 = z6;

        $z12 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z12 == 0 goto label06;

        $r16 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r17 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r16 == $r17 goto label06;

        $z13 = 1;

        goto label07;

     label06:
        $z13 = 0;

     label07:
        z6 = $z11 | $z13;

        $z14 = z5;

        $z15 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z15 == 0 goto label08;

        $r14 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r15 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS>;

        $i2 = virtualinvoke $r14.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r15);

        if $i2 < 0 goto label08;

        $z16 = 1;

        goto label09;

     label08:
        $z16 = 0;

     label09:
        z5 = $z14 | $z16;

        $z17 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean hasNorms()>();

        z7 = z7 | $z17;

        $z18 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        z8 = z8 | $z18;

        $z19 = virtualinvoke r7.<org.apache.lucene.index.FieldInfo: boolean hasPayloads()>();

        z4 = z4 | $z19;

        i7 = i7 + 1;

        goto label01;

     label10:
        r0.<org.apache.lucene.index.FieldInfos: boolean hasVectors> = z2;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasProx> = z3;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasPayloads> = z4;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasOffsets> = z5;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasFreq> = z6;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasNorms> = z7;

        r0.<org.apache.lucene.index.FieldInfos: boolean hasDocValues> = z8;

        $r4 = r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber>;

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Collection values()>();

        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r5);

        r0.<org.apache.lucene.index.FieldInfos: java.util.Collection values> = $r6;

        return;
    }

    public boolean hasFreq()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasFreq>;

        return $z0;
    }

    public boolean hasProx()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasProx>;

        return $z0;
    }

    public boolean hasPayloads()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasPayloads>;

        return $z0;
    }

    public boolean hasOffsets()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasOffsets>;

        return $z0;
    }

    public boolean hasVectors()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasVectors>;

        return $z0;
    }

    public boolean hasNorms()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasNorms>;

        return $z0;
    }

    public boolean hasDocValues()
    {
        org.apache.lucene.index.FieldInfos r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = r0.<org.apache.lucene.index.FieldInfos: boolean hasDocValues>;

        return $z0;
    }

    public int size()
    {
        java.util.HashMap $r3;
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2;
        org.apache.lucene.index.FieldInfos r0;
        java.util.SortedMap $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $z0 = <org.apache.lucene.index.FieldInfos: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber>;

        $i1 = interfaceinvoke $r2.<java.util.SortedMap: int size()>();

        $r3 = r0.<org.apache.lucene.index.FieldInfos: java.util.HashMap byName>;

        $i2 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i1 == $i2 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber>;

        $i0 = interfaceinvoke $r1.<java.util.SortedMap: int size()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.lucene.index.FieldInfos r0;
        java.util.Iterator $r2;
        java.util.Collection $r1;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        $r1 = r0.<org.apache.lucene.index.FieldInfos: java.util.Collection values>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)
    {
        org.apache.lucene.index.FieldInfo $r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.lucene.index.FieldInfos r0;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.index.FieldInfos: java.util.HashMap byName>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.lucene.index.FieldInfo) $r3;

        return $r4;
    }

    public org.apache.lucene.index.FieldInfo fieldInfo(int)
    {
        int i0;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Object $r3;
        org.apache.lucene.index.FieldInfos r0;
        java.lang.Integer $r2;
        java.util.SortedMap $r1;

        r0 := @this: org.apache.lucene.index.FieldInfos;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.FieldInfos: java.util.SortedMap byNumber>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.apache.lucene.index.FieldInfo) $r3;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FieldInfos;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FieldInfos: boolean $assertionsDisabled> = $z1;

        return;
    }
}
