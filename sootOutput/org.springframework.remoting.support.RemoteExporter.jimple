public abstract class org.springframework.remoting.support.RemoteExporter extends org.springframework.remoting.support.RemotingSupport
{
    private java.lang.Object service;
    private java.lang.Class serviceInterface;
    private java.lang.Boolean registerTraceInterceptor;
    private java.lang.Object[] interceptors;

    public void <init>()
    {
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        specialinvoke r0.<org.springframework.remoting.support.RemotingSupport: void <init>()>();

        return;
    }

    public void setService(java.lang.Object)
    {
        java.lang.Object r1;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        r1 := @parameter0: java.lang.Object;

        r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object service> = r1;

        return;
    }

    public java.lang.Object getService()
    {
        java.lang.Object $r1;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        $r1 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object service>;

        return $r1;
    }

    public void setServiceInterface(java.lang.Class)
    {
        org.springframework.remoting.support.RemoteExporter r1;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.springframework.remoting.support.RemoteExporter;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serviceInterface\' must be an interface");

        throw $r2;

     label1:
        r1.<org.springframework.remoting.support.RemoteExporter: java.lang.Class serviceInterface> = r0;

        return;
    }

    public java.lang.Class getServiceInterface()
    {
        java.lang.Class $r1;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        $r1 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Class serviceInterface>;

        return $r1;
    }

    public void setRegisterTraceInterceptor(boolean)
    {
        java.lang.Boolean $r1;
        org.springframework.remoting.support.RemoteExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Boolean registerTraceInterceptor> = $r1;

        return;
    }

    public void setInterceptors(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        r1 := @parameter0: java.lang.Object[];

        r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object[] interceptors> = r1;

        return;
    }

    protected void checkService() throws java.lang.IllegalArgumentException
    {
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r2;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object getService()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'service\' is required");

        throw $r2;

     label1:
        return;
    }

    protected void checkServiceInterface() throws java.lang.IllegalArgumentException
    {
        java.lang.String $r5, $r11, $r14, $r21;
        boolean $z0, $z1;
        org.springframework.remoting.support.RemoteExporter r0;
        java.lang.IllegalArgumentException $r3, $r15, $r22;
        java.lang.Class $r1, $r10;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r12, $r13, $r16, $r17, $r18, $r19, $r20;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Class getServiceInterface()>();

        $r2 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object getService()>();

        if $r1 != null goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'serviceInterface\' is required");

        throw $r22;

     label1:
        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Service [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is a String ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rather than an actual service reference: Have you accidentally specified ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the service bean name as value instead of as reference?");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label2:
        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z1 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Service interface [");

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] needs to be implemented by service [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of class [");

        $r10 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r3;

     label3:
        return;
    }

    protected java.lang.Object getProxyForService()
    {
        java.lang.Object[] $r4, $r9, $r10, $r16;
        int $i0, i1;
        java.lang.Boolean $r3, $r15;
        java.lang.String $r14;
        org.springframework.aop.Advisor $r12;
        boolean $z0;
        org.springframework.remoting.support.RemoteExporter r0;
        org.springframework.aop.framework.adapter.AdvisorAdapterRegistry $r8;
        org.springframework.remoting.support.RemoteInvocationTraceInterceptor $r13;
        org.springframework.aop.framework.ProxyFactory $r1;
        java.lang.Class $r2;
        java.lang.Object $r5, $r7, $r11;
        java.lang.ClassLoader $r6;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: void checkService()>();

        virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: void checkServiceInterface()>();

        $r1 = new org.springframework.aop.framework.ProxyFactory;

        specialinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void <init>()>();

        $r2 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Class getServiceInterface()>();

        virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void addInterface(java.lang.Class)>($r2);

        $r3 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Boolean registerTraceInterceptor>;

        if $r3 == null goto label1;

        $r15 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Boolean registerTraceInterceptor>;

        $z0 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        goto label2;

     label1:
        $r4 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object[] interceptors>;

        if $r4 != null goto label3;

     label2:
        $r13 = new org.springframework.remoting.support.RemoteInvocationTraceInterceptor;

        $r14 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.String getExporterName()>();

        specialinvoke $r13.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: void <init>(java.lang.String)>($r14);

        virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void addAdvice(org.aopalliance.aop.Advice)>($r13);

     label3:
        $r16 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object[] interceptors>;

        if $r16 == null goto label6;

        $r8 = staticinvoke <org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry getInstance()>();

        i1 = 0;

        goto label5;

     label4:
        $r10 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object[] interceptors>;

        $r11 = $r10[i1];

        $r12 = interfaceinvoke $r8.<org.springframework.aop.framework.adapter.AdvisorAdapterRegistry: org.springframework.aop.Advisor wrap(java.lang.Object)>($r11);

        virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void addAdvisor(org.springframework.aop.Advisor)>($r12);

        i1 = i1 + 1;

     label5:
        $r9 = r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object[] interceptors>;

        $i0 = lengthof $r9;

        if i1 < $i0 goto label4;

     label6:
        $r5 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.Object getService()>();

        virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void setTarget(java.lang.Object)>($r5);

        virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: void setOpaque(boolean)>(1);

        $r6 = virtualinvoke r0.<org.springframework.remoting.support.RemoteExporter: java.lang.ClassLoader getBeanClassLoader()>();

        $r7 = virtualinvoke $r1.<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>($r6);

        return $r7;
    }

    protected java.lang.String getExporterName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.springframework.remoting.support.RemoteExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteExporter;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r1);

        return $r2;
    }
}
