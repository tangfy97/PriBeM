class groovy.util.slurpersupport.NodeChild$2 extends java.lang.Object implements java.util.Iterator
{
    private boolean hasNext;
    private final groovy.util.slurpersupport.NodeChild this$0;

    void <init>(groovy.util.slurpersupport.NodeChild)
    {
        groovy.util.slurpersupport.NodeChild$2 r0;
        groovy.util.slurpersupport.NodeChild r1;

        r0 := @this: groovy.util.slurpersupport.NodeChild$2;

        r1 := @parameter0: groovy.util.slurpersupport.NodeChild;

        r0.<groovy.util.slurpersupport.NodeChild$2: groovy.util.slurpersupport.NodeChild this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovy.util.slurpersupport.NodeChild$2: boolean hasNext> = 1;

        return;
    }

    public boolean hasNext()
    {
        groovy.util.slurpersupport.NodeChild$2 r0;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChild$2;

        $z0 = r0.<groovy.util.slurpersupport.NodeChild$2: boolean hasNext>;

        return $z0;
    }

    public java.lang.Object next()
    {
        java.lang.Throwable $r2;
        groovy.util.slurpersupport.Node $r3;
        groovy.util.slurpersupport.NodeChild$2 r0;
        groovy.util.slurpersupport.NodeChild $r1;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChild$2;

     label1:
        $z0 = r0.<groovy.util.slurpersupport.NodeChild$2: boolean hasNext>;

        if $z0 == 0 goto label2;

        $r1 = r0.<groovy.util.slurpersupport.NodeChild$2: groovy.util.slurpersupport.NodeChild this$0>;

        $r3 = staticinvoke <groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node access$000(groovy.util.slurpersupport.NodeChild)>($r1);

        goto label3;

     label2:
        $r3 = null;

     label3:
        r0.<groovy.util.slurpersupport.NodeChild$2: boolean hasNext> = 0;

        return $r3;

     label4:
        $r2 := @caughtexception;

     label5:
        r0.<groovy.util.slurpersupport.NodeChild$2: boolean hasNext> = 0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        groovy.util.slurpersupport.NodeChild$2 r1;

        r1 := @this: groovy.util.slurpersupport.NodeChild$2;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
