final class org.apache.lucene.util.packed.BulkOperationPackedSingleBlock extends org.apache.lucene.util.packed.BulkOperation
{
    private static final int BLOCK_COUNT;
    private final int bitsPerValue;
    private final int valueCount;
    private final long mask;

    public void <init>(int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        int i0, $i1;
        long $l2, $l3;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.BulkOperation: void <init>()>();

        r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue> = i0;

        $i1 = 64 / i0;

        r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount> = $i1;

        $l2 = 1L << i0;

        $l3 = $l2 - 1L;

        r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long mask> = $l3;

        return;
    }

    public final int longBlockCount()
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        return 1;
    }

    public final int byteBlockCount()
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        return 8;
    }

    public int longValueCount()
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        int $i0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        return $i0;
    }

    public final int byteValueCount()
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        int $i0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        return $i0;
    }

    private static long readLong(byte[], int)
    {
        byte[] r0;
        byte $b0, $b3, $b8, $b13, $b18, $b23, $b28, $b33;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, $l19, $l20, $l21, $l22, $l24, $l25, $l26, $l27, $l29, $l30, $l31, $l32, $l34, $l35, $l36, $l37;
        int i38, i39, i40, i41, i42, i43, i44, i45;

        r0 := @parameter0: byte[];

        i38 := @parameter1: int;

        i39 = i38 + 1;

        $b0 = r0[i38];

        $l1 = (long) $b0;

        $l2 = $l1 & 255L;

        $l7 = $l2 << 56;

        i40 = i39 + 1;

        $b3 = r0[i39];

        $l4 = (long) $b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 48;

        $l12 = $l7 | $l6;

        i41 = i40 + 1;

        $b8 = r0[i40];

        $l9 = (long) $b8;

        $l10 = $l9 & 255L;

        $l11 = $l10 << 40;

        $l17 = $l12 | $l11;

        i42 = i41 + 1;

        $b13 = r0[i41];

        $l14 = (long) $b13;

        $l15 = $l14 & 255L;

        $l16 = $l15 << 32;

        $l22 = $l17 | $l16;

        i43 = i42 + 1;

        $b18 = r0[i42];

        $l19 = (long) $b18;

        $l20 = $l19 & 255L;

        $l21 = $l20 << 24;

        $l27 = $l22 | $l21;

        i44 = i43 + 1;

        $b23 = r0[i43];

        $l24 = (long) $b23;

        $l25 = $l24 & 255L;

        $l26 = $l25 << 16;

        $l32 = $l27 | $l26;

        i45 = i44 + 1;

        $b28 = r0[i44];

        $l29 = (long) $b28;

        $l30 = $l29 & 255L;

        $l31 = $l30 << 8;

        $l36 = $l32 | $l31;

        $b33 = r0[i45];

        $l34 = (long) $b33;

        $l35 = $l34 & 255L;

        $l37 = $l36 | $l35;

        return $l37;
    }

    private int decode(long, long[], int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long $l0, $l1, $l5, $l6, l7;
        long[] r0;
        int $i2, $i3, $i4, i8, i9, i10;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        l7 := @parameter0: long;

        r0 := @parameter1: long[];

        i8 := @parameter2: int;

        i9 = i8 + 1;

        $l0 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long mask>;

        $l1 = l7 & $l0;

        r0[i8] = $l1;

        i10 = 1;

     label1:
        $i2 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        if i10 >= $i2 goto label2;

        $i3 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        l7 = l7 >>> $i3;

        $i4 = i9;

        i9 = i9 + 1;

        $l5 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long mask>;

        $l6 = l7 & $l5;

        r0[$i4] = $l6;

        i10 = i10 + 1;

        goto label1;

     label2:
        return i9;
    }

    private int decode(long, int[], int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long $l0, $l1, $l6, $l7, l9;
        int[] r0;
        int $i2, $i3, $i4, $i5, $i8, i10, i11, i12;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        l9 := @parameter0: long;

        r0 := @parameter1: int[];

        i10 := @parameter2: int;

        i11 = i10 + 1;

        $l0 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long mask>;

        $l1 = l9 & $l0;

        $i2 = (int) $l1;

        r0[i10] = $i2;

        i12 = 1;

     label1:
        $i3 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        if i12 >= $i3 goto label2;

        $i4 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        l9 = l9 >>> $i4;

        $i5 = i11;

        i11 = i11 + 1;

        $l6 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long mask>;

        $l7 = l9 & $l6;

        $i8 = (int) $l7;

        r0[$i5] = $i8;

        i12 = i12 + 1;

        goto label1;

     label2:
        return i11;
    }

    private long encode(long[], int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long $l4, $l5, l8;
        long[] r0;
        int $i0, $i1, $i2, $i3, i6, i7, i9;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r0 := @parameter0: long[];

        i6 := @parameter1: int;

        i7 = i6 + 1;

        l8 = r0[i6];

        i9 = 1;

     label1:
        $i0 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        if i9 >= $i0 goto label2;

        $i1 = i7;

        i7 = i7 + 1;

        $l4 = r0[$i1];

        $i2 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        $i3 = i9 * $i2;

        $l5 = $l4 << $i3;

        l8 = l8 | $l5;

        i9 = i9 + 1;

        goto label1;

     label2:
        return l8;
    }

    private long encode(int[], int)
    {
        long $l1, $l5, $l8, $l9, l12;
        int[] r0;
        int $i0, $i2, $i3, $i4, $i6, $i7, i10, i11, i13;
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r0 := @parameter0: int[];

        i10 := @parameter1: int;

        i11 = i10 + 1;

        $i0 = r0[i10];

        $l1 = (long) $i0;

        l12 = $l1 & 4294967295L;

        i13 = 1;

     label1:
        $i2 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        if i13 >= $i2 goto label2;

        $i3 = i11;

        i11 = i11 + 1;

        $i4 = r0[$i3];

        $l5 = (long) $i4;

        $l8 = $l5 & 4294967295L;

        $i6 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        $i7 = i13 * $i6;

        $l9 = $l8 << $i7;

        l12 = l12 | $l9;

        i13 = i13 + 1;

        goto label1;

     label2:
        return l12;
    }

    public void decode(long[], int, long[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long l2;
        long[] r0, r2;
        int i0, $i1, i3, i4, i5;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r0 := @parameter0: long[];

        i3 := @parameter1: int;

        r2 := @parameter2: long[];

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i1 = i3;

        i3 = i3 + 1;

        l2 = r0[$i1];

        i4 = specialinvoke r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int decode(long,long[],int)>(l2, r2, i4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void decode(byte[], int, long[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        byte[] r0;
        long $l1;
        long[] r2;
        int i0, i2, i3, i4;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r0 := @parameter0: byte[];

        i2 := @parameter1: int;

        r2 := @parameter2: long[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $l1 = staticinvoke <org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long readLong(byte[],int)>(r0, i2);

        i2 = i2 + 8;

        i3 = specialinvoke r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int decode(long,long[],int)>($l1, r2, i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void decode(long[], int, int[], int, int)
    {
        long l3;
        long[] r1;
        int[] r2;
        int $i0, i1, $i2, $i4, i5, i6, i7;
        java.lang.String $r8;
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r1 := @parameter0: long[];

        i5 := @parameter1: int;

        r2 := @parameter2: int[];

        i6 := @parameter3: int;

        i1 := @parameter4: int;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        if $i0 <= 32 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot decode ");

        $i4 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-bits values into an int[]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        $i2 = i5;

        i5 = i5 + 1;

        l3 = r1[$i2];

        i6 = specialinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int decode(long,int[],int)>(l3, r2, i6);

        i7 = i7 + 1;

        goto label2;

     label3:
        return;
    }

    public void decode(byte[], int, int[], int, int)
    {
        byte[] r1;
        long $l2;
        int[] r2;
        int $i0, i1, $i3, i4, i5, i6;
        java.lang.String $r8;
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        r2 := @parameter2: int[];

        i5 := @parameter3: int;

        i1 := @parameter4: int;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        if $i0 <= 32 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot decode ");

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int bitsPerValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-bits values into an int[]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        i6 = 0;

     label2:
        if i6 >= i1 goto label3;

        $l2 = staticinvoke <org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long readLong(byte[],int)>(r1, i4);

        i4 = i4 + 8;

        i5 = specialinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int decode(long,int[],int)>($l2, r2, i5);

        i6 = i6 + 1;

        goto label2;

     label3:
        return;
    }

    public void encode(long[], int, long[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long $l2;
        long[] r0, r2;
        int i0, $i1, $i3, i4, i5, i6;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r2 := @parameter0: long[];

        i4 := @parameter1: int;

        r0 := @parameter2: long[];

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $i1 = i5;

        i5 = i5 + 1;

        $l2 = specialinvoke r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long encode(long[],int)>(r2, i4);

        r0[$i1] = $l2;

        $i3 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        i4 = i4 + $i3;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void encode(int[], int, long[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r1;
        long $l2;
        long[] r0;
        int[] r2;
        int i0, $i1, $i3, i4, i5, i6;

        r1 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r2 := @parameter0: int[];

        i4 := @parameter1: int;

        r0 := @parameter2: long[];

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $i1 = i5;

        i5 = i5 + 1;

        $l2 = specialinvoke r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long encode(int[],int)>(r2, i4);

        r0[$i1] = $l2;

        $i3 = r1.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        i4 = i4 + $i3;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void encode(long[], int, byte[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        byte[] r2;
        long $l1;
        long[] r1;
        int i0, $i2, i3, i4, i5;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r1 := @parameter0: long[];

        i3 := @parameter1: int;

        r2 := @parameter2: byte[];

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $l1 = specialinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long encode(long[],int)>(r1, i3);

        $i2 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        i3 = i3 + $i2;

        i4 = virtualinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int writeLong(long,byte[],int)>($l1, r2, i4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void encode(int[], int, byte[], int, int)
    {
        org.apache.lucene.util.packed.BulkOperationPackedSingleBlock r0;
        byte[] r2;
        long $l1;
        int[] r1;
        int i0, $i2, i3, i4, i5;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPackedSingleBlock;

        r1 := @parameter0: int[];

        i3 := @parameter1: int;

        r2 := @parameter2: byte[];

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $l1 = specialinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: long encode(int[],int)>(r1, i3);

        $i2 = r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int valueCount>;

        i3 = i3 + $i2;

        i4 = virtualinvoke r0.<org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int writeLong(long,byte[],int)>($l1, r2, i4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.util.packed.BulkOperationPackedSingleBlock: int BLOCK_COUNT> = 1;

        return;
    }
}
