public class jena.schemagen extends java.lang.Object
{
    public static final java.lang.String NS;
    public static final java.lang.String DEFAULT_CONFIG_URI;
    public static final java.lang.String DEFAULT_MARKER;
    public static final java.lang.String DEFAULT_TEMPLATE;
    public static final java.lang.String DEFAULT_INDIVIDUAL_TEMPLATE;
    public static final java.lang.String DEFAULT_RDFS_INDIVIDUAL_TEMPLATE;
    public static final java.lang.String DEFAULT_HEADER_TEMPLATE;
    public static final int COMMENT_LENGTH_LIMIT;
    public static final java.lang.String[] JAVA_KEYWORDS;
    private static java.util.List KEYWORD_LIST;
    protected jena.schemagen$SchemagenOptions m_options;
    protected com.hp.hpl.jena.ontology.OntModel m_source;
    protected java.io.PrintStream m_output;
    protected java.util.List m_replacements;
    protected java.lang.String m_nl;
    protected int m_indentStep;
    protected java.util.Set m_usedNames;
    protected java.util.Map m_resourcesToNames;
    protected java.util.List m_includeURI;

    public void <init>()
    {
        java.util.HashSet $r2;
        jena.schemagen r0;
        java.util.HashMap $r3;
        java.util.ArrayList $r1, $r4;

        r0 := @this: jena.schemagen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<jena.schemagen: java.util.List m_replacements> = $r1;

        r0.<jena.schemagen: java.lang.String m_nl> = "\n";

        r0.<jena.schemagen: int m_indentStep> = 4;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<jena.schemagen: java.util.Set m_usedNames> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<jena.schemagen: java.util.Map m_resourcesToNames> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<jena.schemagen: java.util.List m_includeURI> = $r4;

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.io.PrintStream $r3, $r4, $r8;
        java.lang.Throwable $r6, $r10;
        java.lang.String[] r1;
        jena.schemagen$SchemagenException $r2;
        jena.schemagen $r0;
        java.lang.StringBuilder $r7, $r9, $r12;
        java.lang.String $r5, $r11, $r13;

        r1 := @parameter0: java.lang.String[];

     label1:
        $r0 = new jena.schemagen;

        specialinvoke $r0.<jena.schemagen: void <init>()>();

        virtualinvoke $r0.<jena.schemagen: void go(java.lang.String[])>(r1);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Schemagen failed to run:");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = virtualinvoke $r2.<jena.schemagen$SchemagenException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = virtualinvoke $r2.<jena.schemagen$SchemagenException: java.lang.Throwable getCause()>();

        if $r6 == null goto label4;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caused by: ");

        $r10 = virtualinvoke $r2.<jena.schemagen$SchemagenException: java.lang.Throwable getCause()>();

        $r11 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label4:
        staticinvoke <java.lang.System: void exit(int)>(1);

     label5:
        return;

        catch jena.schemagen$SchemagenException from label1 to label2 with label3;
    }

    protected void go(java.lang.String[])
    {
        jena.schemagen r0;
        jena.schemagen$SchemagenOptionsImpl $r1;
        java.lang.String[] r2;

        r0 := @this: jena.schemagen;

        r2 := @parameter0: java.lang.String[];

        $r1 = new jena.schemagen$SchemagenOptionsImpl;

        specialinvoke $r1.<jena.schemagen$SchemagenOptionsImpl: void <init>(java.lang.String[])>(r2);

        virtualinvoke r0.<jena.schemagen: void go(jena.schemagen$SchemagenOptions)>($r1);

        return;
    }

    protected void go(jena.schemagen$SchemagenOptions)
    {
        jena.schemagen$SchemagenOptions r1, $r2;
        jena.schemagen r0;
        boolean $z0;

        r0 := @this: jena.schemagen;

        r1 := @parameter0: jena.schemagen$SchemagenOptions;

        r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options> = r1;

        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasHelpOption()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<jena.schemagen: void usage()>();

     label1:
        virtualinvoke r0.<jena.schemagen: void processInput()>();

        return;
    }

    protected void processInput()
    {
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        virtualinvoke r0.<jena.schemagen: void addIncludes()>();

        virtualinvoke r0.<jena.schemagen: void determineLanguage()>();

        virtualinvoke r0.<jena.schemagen: void selectInput()>();

        virtualinvoke r0.<jena.schemagen: void selectOutput()>();

        virtualinvoke r0.<jena.schemagen: void setGlobalReplacements()>();

        virtualinvoke r0.<jena.schemagen: void processHeader()>();

        virtualinvoke r0.<jena.schemagen: void writeClassDeclaration()>();

        virtualinvoke r0.<jena.schemagen: void writeInitialDeclarations()>();

        virtualinvoke r0.<jena.schemagen: void writeProperties()>();

        virtualinvoke r0.<jena.schemagen: void writeClasses()>();

        virtualinvoke r0.<jena.schemagen: void writeIndividuals()>();

        virtualinvoke r0.<jena.schemagen: void writeClassClose()>();

        virtualinvoke r0.<jena.schemagen: void processFooter()>();

        virtualinvoke r0.<jena.schemagen: void closeOutput()>();

        return;
    }

    protected void addIncludes()
    {
        java.util.List $r2, $r3;
        jena.schemagen$SchemagenOptions $r1;
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        $r2 = r0.<jena.schemagen: java.util.List m_includeURI>;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r3 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: java.util.List getIncludeOption()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    protected void determineLanguage()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager $r8;
        com.hp.hpl.jena.ontology.OntModelSpec r5;
        jena.schemagen$SchemagenOptions $r1, $r2, $r4, $r9;
        jena.schemagen r0;
        com.hp.hpl.jena.ontology.OntModel $r3, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z2 = interfaceinvoke $r4.<jena.schemagen$SchemagenOptions: boolean hasUseInfOption()>();

        if $z2 == 0 goto label1;

        r5 = <com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.ontology.OntModelSpec RDFS_MEM_RDFS_INF>;

        goto label4;

     label1:
        r5 = <com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.ontology.OntModelSpec RDFS_MEM>;

        goto label4;

     label2:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasUseInfOption()>();

        if $z1 == 0 goto label3;

        r5 = <com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.ontology.OntModelSpec OWL_MEM_RULE_INF>;

        goto label4;

     label3:
        r5 = <com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.ontology.OntModelSpec OWL_MEM>;

     label4:
        $r6 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.ontology.OntModel createOntologyModel(com.hp.hpl.jena.ontology.OntModelSpec,com.hp.hpl.jena.rdf.model.Model)>(r5, null);

        r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source> = $r6;

        $r7 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.OntDocumentManager getDocumentManager()>();

        virtualinvoke $r8.<com.hp.hpl.jena.ontology.OntDocumentManager: void setProcessImports(boolean)>(0);

        $r9 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z3 = interfaceinvoke $r9.<jena.schemagen$SchemagenOptions: boolean hasNoStrictOption()>();

        if $z3 == 0 goto label5;

        $r3 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: void setStrictMode(boolean)>(0);

     label5:
        return;
    }

    protected void selectInput()
    {
        com.hp.hpl.jena.shared.JenaException $r10;
        jena.schemagen$SchemagenOptions $r1, $r2, $r6;
        jena.schemagen r0;
        com.hp.hpl.jena.util.FileManager $r8;
        java.lang.String $r4, $r5, $r7, $r14;
        com.hp.hpl.jena.ontology.OntModel $r9;
        boolean $z0;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasInputOption()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<jena.schemagen: void usage()>();

     label1:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r3 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: com.hp.hpl.jena.rdf.model.Resource getInputOption()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r5 = staticinvoke <jena.schemagen$SchemagenUtils: java.lang.String urlCheck(java.lang.String)>($r4);

        $r6 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r7 = interfaceinvoke $r6.<jena.schemagen$SchemagenOptions: java.lang.String getEncodingOption()>();

     label2:
        $r8 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r9 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        virtualinvoke $r8.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String)>($r9, $r5, $r7);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read input source ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void abort(java.lang.String,java.lang.Exception)>($r14, $r10);

     label5:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label2 to label3 with label4;
    }

    protected void selectOutput()
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Exception $r27;
        java.lang.StringBuilder $r7, $r8, $r10, $r12, $r13, $r17, $r18, $r19, $r21, $r22, $r24, $r25, $r28, $r29, $r30;
        java.lang.String[] $r16;
        jena.schemagen$SchemagenOptions $r1, $r3, $r36;
        jena.schemagen r0;
        int i0, i1;
        java.lang.String $r2, $r4, $r9, $r11, $r14, r20, $r23, $r31, r32, r33;
        java.io.PrintStream $r5, $r26;
        java.io.FileOutputStream $r6;
        java.io.File $r15, $r34, r35;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r2 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: java.lang.String getOutputOption()>();

        r32 = $r2;

        if $r2 != null goto label01;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        r0.<jena.schemagen: java.io.PrintStream m_output> = $r26;

        goto label09;

     label01:
        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getPackagenameOption()>();

        if $r4 == null goto label04;

        r33 = "";

        $r16 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        i0 = lengthof $r16;

        i1 = 0;

     label02:
        if i1 >= i0 goto label03;

        r20 = $r16[i1];

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r23 = <java.io.File: java.lang.String separator>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label02;

     label03:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(r33);

        if $z1 != 0 goto label04;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        r32 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r34 = new java.io.File;

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>(r32);

        r35 = $r34;

        $z2 = virtualinvoke $r34.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label05;

        $z0 = virtualinvoke r32.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z0 != 0 goto label05;

        virtualinvoke $r34.<java.io.File: boolean mkdirs()>();

     label05:
        $z3 = virtualinvoke $r34.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label06;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r9 = <java.io.File: java.lang.String separator>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r0.<jena.schemagen: java.lang.String getClassName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r14);

        r35 = $r15;

     label06:
        $r5 = new java.io.PrintStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r35);

        specialinvoke $r5.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        r0.<jena.schemagen: java.io.PrintStream m_output> = $r5;

     label07:
        goto label09;

     label08:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I/O error while trying to open file for writing: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void abort(java.lang.String,java.lang.Exception)>($r31, $r27);

     label09:
        $r36 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z4 = interfaceinvoke $r36.<jena.schemagen$SchemagenOptions: boolean hasDosOption()>();

        if $z4 == 0 goto label10;

        r0.<jena.schemagen: java.lang.String m_nl> = "\r\n";

     label10:
        return;

        catch java.lang.Exception from label01 to label07 with label08;
    }

    protected void processHeader()
    {
        jena.schemagen$SchemagenOptions $r1, $r2, $r3, $r4, $r6;
        jena.schemagen r0;
        java.lang.String $r5, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasHeaderOption()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r7 = interfaceinvoke $r6.<jena.schemagen$SchemagenOptions: java.lang.String getHeaderOption()>();

        goto label2;

     label1:
        $r7 = "/* CVS $Id: $ */%nl%%package% %nl%%imports% %nl%/**%nl% * Vocabulary definitions from %sourceURI% %nl% * @author Auto-generated by schemagen on %date% %nl% */";

     label2:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasNoheaderOption()>();

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke r0.<jena.schemagen: java.lang.String substitute(java.lang.String)>($r7);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r5);

        goto label5;

     label3:
        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "import com.hp.hpl.jena.rdf.model.*;");

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z2 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: boolean hasOntologyOption()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "import com.hp.hpl.jena.ontology.*;");

     label4:
        $r4 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z3 = interfaceinvoke $r4.<jena.schemagen$SchemagenOptions: boolean hasIncludeSourceOption()>();

        if $z3 == 0 goto label5;

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "import java.io.ByteArrayInputStream;");

     label5:
        return;
    }

    protected void processFooter()
    {
        jena.schemagen$SchemagenOptions $r1;
        jena.schemagen r0;
        java.lang.String $r2, $r3;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r2 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: java.lang.String getFooterOption()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<jena.schemagen: java.lang.String substitute(java.lang.String)>($r2);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r3);

     label1:
        return;
    }

    protected void setGlobalReplacements()
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        jena.schemagen$SchemagenOptions $r4, $r8, $r13;
        jena.schemagen r0;
        java.lang.String $r3, $r5, $r6, $r7, $r10, $r14, $r17, r18;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Resource $r9;
        java.lang.StringBuilder $r11, $r12, $r15, $r16;

        r0 := @this: jena.schemagen;

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd MMM yyyy HH:mm");

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $r3 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r2);

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("date", $r3);

        $r4 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r4.<jena.schemagen$SchemagenOptions: boolean hasPackagenameOption()>();

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $r13 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r14 = interfaceinvoke $r13.<jena.schemagen$SchemagenOptions: java.lang.String getPackagenameOption()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r17 = "";

     label2:
        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("package", $r17);

        $r5 = virtualinvoke r0.<jena.schemagen: java.lang.String getImports()>();

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("imports", $r5);

        $r6 = virtualinvoke r0.<jena.schemagen: java.lang.String getClassName()>();

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("classname", $r6);

        $r7 = r0.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("nl", $r7);

        $r8 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r9 = interfaceinvoke $r8.<jena.schemagen$SchemagenOptions: com.hp.hpl.jena.rdf.model.Resource getInputOption()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        r18 = $r10;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean matches(java.lang.String)>("(file:|[A-Za-z]:).*$");

        if $z1 == 0 goto label3;

        r18 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "\\\\");

     label3:
        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("sourceURI", r18);

        return;
    }

    protected void addReplacementPattern(java.lang.String, java.lang.String)
    {
        jena.schemagen$Replacement $r5;
        jena.schemagen$SchemagenOptions $r3;
        jena.schemagen r2;
        java.lang.String r0, r1, $r4, $r11, $r19, $r20, r21;
        java.util.regex.PatternSyntaxException $r13;
        java.util.List $r7;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r14, $r15, $r16, $r17, $r18;
        java.util.regex.Pattern $r12;

        r2 := @this: jena.schemagen;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label6;

        if r1 == null goto label6;

        $r3 = r2.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getMarkerOption()>();

        if $r4 != null goto label1;

        $r20 = "%";

        goto label2;

     label1:
        $r20 = $r4;

     label2:
        r21 = $r20;

     label3:
        $r7 = r2.<jena.schemagen: java.util.List m_replacements>;

        $r5 = new jena.schemagen$Replacement;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r11);

        specialinvoke $r5.<jena.schemagen$Replacement: void <init>(jena.schemagen,java.util.regex.Pattern,java.lang.String)>(r2, $r12, r0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed regexp pattern ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<jena.schemagen: void abort(java.lang.String,java.lang.Exception)>($r19, $r13);

     label6:
        return;

        catch java.util.regex.PatternSyntaxException from label3 to label4 with label5;
    }

    protected void pop(int)
    {
        java.util.List $r1, $r2;
        int i0, $i1, $i2, i3;
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        i0 := @parameter0: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r2 = r0.<jena.schemagen: java.util.List m_replacements>;

        $r1 = r0.<jena.schemagen: java.util.List m_replacements>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected void closeOutput()
    {
        jena.schemagen r0;
        java.io.PrintStream $r1, $r2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: java.io.PrintStream m_output>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        $r2 = r0.<jena.schemagen: java.io.PrintStream m_output>;

        virtualinvoke $r2.<java.io.PrintStream: void close()>();

        return;
    }

    protected void abort(java.lang.String, java.lang.Exception)
    {
        jena.schemagen$SchemagenException $r0;
        jena.schemagen r3;
        java.lang.String r1;
        java.lang.Exception r2;

        r3 := @this: jena.schemagen;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        $r0 = new jena.schemagen$SchemagenException;

        specialinvoke $r0.<jena.schemagen$SchemagenException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        throw $r0;
    }

    protected void usage()
    {
        jena.schemagen r16;
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r16 := @this: jena.schemagen;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage:");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  java jena.schemagen [options ...]");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Commonly used options include:");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("   -i <input> the source document as a file or URL.");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("   -n <name> the name of the created Java class.");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("   -a <uri> the namespace URI of the source document.");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("   -o <file> the file to write the generated class into.");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("   -o <dir> the directory in which the generated Java class is created.");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("            By default, output goes to stdout.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("   -e <encoding> the encoding of the input document (N3, RDF/XML, etc).");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("   -c <config> a filename or URL for an RDF document containing ");

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("               configuration parameters.");

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println()>();

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("Many other options are available. See the schemagen HOWTO in the ");

        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("Jena documentation for full details.");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    protected java.lang.String substitute(java.lang.String)
    {
        jena.schemagen$Replacement r5;
        java.util.Iterator $r3;
        java.util.List $r2;
        java.util.regex.Matcher $r7;
        jena.schemagen r1;
        java.lang.Object $r4;
        java.lang.String r0, $r8, r9;
        java.util.regex.Pattern $r6;
        boolean $z0;

        r1 := @this: jena.schemagen;

        r0 := @parameter0: java.lang.String;

        r9 = r0;

        $r2 = r1.<jena.schemagen: java.util.List m_replacements>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (jena.schemagen$Replacement) $r4;

        $r6 = r5.<jena.schemagen$Replacement: java.util.regex.Pattern pattern>;

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r9);

        $r8 = r5.<jena.schemagen$Replacement: java.lang.String sub>;

        r9 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r8);

        goto label1;

     label2:
        return r9;
    }

    protected int indentTo(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r1;
        int i0, $i1, i2, i3;
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $i1 = r0.<jena.schemagen: int m_indentStep>;

        i2 = i0 * $i1;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    protected void writeln(int)
    {
        jena.schemagen r0;
        int i0;

        r0 := @this: jena.schemagen;

        i0 := @parameter0: int;

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(i0, "");

        return;
    }

    protected void writeln(int, java.lang.String)
    {
        java.io.PrintStream $r3;
        jena.schemagen r0;
        int i0;
        java.lang.String r1, $r2;

        r0 := @this: jena.schemagen;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(i0, r1);

        $r3 = r0.<jena.schemagen: java.io.PrintStream m_output>;

        $r2 = r0.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r2);

        return;
    }

    protected void write(int, java.lang.String)
    {
        java.io.PrintStream $r2, $r3;
        jena.schemagen r0;
        int i0, $i1, $i2, i3;
        java.lang.String r1;

        r0 := @this: jena.schemagen;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i3 = 0;

     label1:
        $i1 = r0.<jena.schemagen: int m_indentStep>;

        $i2 = $i1 * i0;

        if i3 >= $i2 goto label2;

        $r3 = r0.<jena.schemagen: java.io.PrintStream m_output>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>(" ");

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = r0.<jena.schemagen: java.io.PrintStream m_output>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>(r1);

        return;
    }

    protected java.lang.String getImports()
    {
        java.lang.StringBuffer $r0;
        jena.schemagen r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r1 := @this: jena.schemagen;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import com.hp.hpl.jena.rdf.model.*;");

        $r2 = r1.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $z0 = virtualinvoke r1.<jena.schemagen: boolean useOntology()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import com.hp.hpl.jena.ontology.*;");

        $r5 = r1.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        $z1 = virtualinvoke r1.<jena.schemagen: boolean includeSource()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import java.io.ByteArrayInputStream;");

        $r4 = r1.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.String getClassName()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.StringBuilder $r9, $r12, $r25;
        jena.schemagen$SchemagenOptions $r1, $r2, $r6, $r10, $r13;
        jena.schemagen r0;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i22;
        java.lang.String $r4, $r5, $r7, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, r23, r24;
        char $c1, $c2;
        com.hp.hpl.jena.rdf.model.Resource $r3;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasClassnameOption()>();

        if $z0 == 0 goto label01;

        $r13 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r14 = interfaceinvoke $r13.<jena.schemagen$SchemagenOptions: java.lang.String getClassnameOption()>();

        return $r14;

     label01:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r3 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: com.hp.hpl.jena.rdf.model.Resource getInputOption()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("#");

        if $z1 == 0 goto label02;

        $i17 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i18 = $i17 - 1;

        $r15 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i18);

        goto label03;

     label02:
        $r15 = $r4;

     label03:
        $z2 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>(".daml");

        if $z2 == 0 goto label04;

        $i15 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i16 = $i15 - 5;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i16);

        goto label05;

     label04:
        $r16 = $r15;

     label05:
        $z3 = virtualinvoke $r16.<java.lang.String: boolean endsWith(java.lang.String)>(".owl");

        if $z3 == 0 goto label06;

        $i13 = virtualinvoke $r16.<java.lang.String: int length()>();

        $i14 = $i13 - 4;

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(0, $i14);

        goto label07;

     label06:
        $r17 = $r16;

     label07:
        $z4 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>(".rdf");

        if $z4 == 0 goto label08;

        $i11 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i12 = $i11 - 4;

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int,int)>(0, $i12);

        goto label09;

     label08:
        $r18 = $r17;

     label09:
        $z5 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>(".rdfs");

        if $z5 == 0 goto label10;

        $i9 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i10 = $i9 - 5;

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        goto label11;

     label10:
        $r19 = $r18;

     label11:
        $z6 = virtualinvoke $r19.<java.lang.String: boolean endsWith(java.lang.String)>(".n3");

        if $z6 == 0 goto label12;

        $i7 = virtualinvoke $r19.<java.lang.String: int length()>();

        $i8 = $i7 - 3;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        goto label13;

     label12:
        $r20 = $r19;

     label13:
        $z7 = virtualinvoke $r20.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z7 == 0 goto label14;

        $i5 = virtualinvoke $r20.<java.lang.String: int length()>();

        $i6 = $i5 - 4;

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label15;

     label14:
        $r21 = $r20;

     label15:
        $z8 = virtualinvoke $r21.<java.lang.String: boolean endsWith(java.lang.String)>(".ttl");

        if $z8 == 0 goto label16;

        $i3 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i4 = $i3 - 4;

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        goto label17;

     label16:
        $r22 = $r21;

     label17:
        r23 = $r22;

        $i0 = virtualinvoke $r22.<java.lang.String: int length()>();

        i19 = $i0 - 1;

     label18:
        if i19 <= 0 goto label20;

        $c1 = virtualinvoke r23.<java.lang.String: char charAt(int)>(i19);

        $z10 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPart(char)>($c1);

        if $z10 != 0 goto label19;

        $c2 = virtualinvoke r23.<java.lang.String: char charAt(int)>(i19);

        $i20 = (int) $c2;

        if $i20 == 45 goto label19;

        i19 = i19 + 1;

        goto label20;

     label19:
        $i22 = (int) -1;

        i19 = i19 + $i22;

        goto label18;

     label20:
        $r5 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>(i19);

        r24 = $r5;

        $r6 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z9 = interfaceinvoke $r6.<jena.schemagen$SchemagenOptions: boolean hasClassnameSuffixOption()>();

        if $z9 == 0 goto label21;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r11 = interfaceinvoke $r10.<jena.schemagen$SchemagenOptions: java.lang.String getClassnameSuffixOption()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r24 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $r7 = virtualinvoke r0.<jena.schemagen: java.lang.String asLegalJavaID(java.lang.String,boolean)>(r24, 1);

        return $r7;
    }

    protected boolean useOntology()
    {
        jena.schemagen r0;
        jena.schemagen$SchemagenOptions $r1;
        boolean $z0;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasOntologyOption()>();

        return $z0;
    }

    protected boolean noComments()
    {
        jena.schemagen r0;
        jena.schemagen$SchemagenOptions $r1;
        boolean $z0;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasNoCommentsOption()>();

        return $z0;
    }

    protected boolean includeSource()
    {
        jena.schemagen r0;
        jena.schemagen$SchemagenOptions $r1;
        boolean $z0;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasIncludeSourceOption()>();

        return $z0;
    }

    protected java.lang.String asLegalJavaID(java.lang.String, boolean)
    {
        java.lang.StringBuffer $r0;
        jena.schemagen r12;
        int i3, i5, $i6;
        java.lang.String r1, $r3, $r4, $r11;
        boolean $z0, z1, $z2, $z3;
        java.io.PrintStream $r7;
        java.lang.StringIndexOutOfBoundsException $r5;
        char $c0, $c1, $c2, $c4, $c7;
        java.util.List $r2;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;

        r12 := @this: jena.schemagen;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label01:
        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c0);

        if $z0 != 0 goto label02;

        i3 = i3 + 1;

        goto label01;

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not identify legal Java identifier start character in \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', replacing with __");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return "__";

     label04:
        if z1 == 0 goto label05;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        goto label06;

     label05:
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

     label06:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i5 = i3 + 1;

     label07:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i6 goto label10;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $z3 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c1);

        if $z3 == 0 goto label08;

        $c7 = $c1;

        goto label09;

     label08:
        $c7 = 95;

     label09:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        i5 = i5 + 1;

        goto label07;

     label10:
        $r2 = <jena.schemagen: java.util.List KEYWORD_LIST>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $z2 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z2 == 0 goto label11;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(95);

     label11:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

        catch java.lang.StringIndexOutOfBoundsException from label01 to label02 with label03;
    }

    protected void writeClassDeclaration()
    {
        jena.schemagen$SchemagenOptions $r2, $r3;
        jena.schemagen r0;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: jena.schemagen;

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, "public class ");

        $r1 = virtualinvoke r0.<jena.schemagen: java.lang.String getClassName()>();

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, $r1);

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, " ");

        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasClassdecOption()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getClassdecOption()>();

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, $r4);

     label1:
        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "{");

        return;
    }

    protected void writeClassClose()
    {
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "}");

        return;
    }

    protected void writeInitialDeclarations()
    {
        jena.schemagen$SchemagenOptions $r1, $r2;
        jena.schemagen r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: jena.schemagen;

        virtualinvoke r0.<jena.schemagen: void writeModelDeclaration()>();

        virtualinvoke r0.<jena.schemagen: void writeSource()>();

        virtualinvoke r0.<jena.schemagen: void writeNamespace()>();

        virtualinvoke r0.<jena.schemagen: void writeOntologyVersionInfo()>();

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasDeclarationsOption()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r3 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: java.lang.String getDeclarationsOption()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r3);

     label1:
        return;
    }

    protected void writeModelDeclaration()
    {
        jena.schemagen$SchemagenOptions $r1;
        jena.schemagen r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6, r7;
        boolean $z0, $z1;

        r0 := @this: jena.schemagen;

        $z0 = virtualinvoke r0.<jena.schemagen: boolean useOntology()>();

        if $z0 == 0 goto label2;

        r7 = "OWL";

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z1 == 0 goto label1;

        r7 = "RDFS";

     label1:
        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The ontology model that holds the vocabulary terms</p> */");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_MEM, null );");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, $r6);

        goto label3;

     label2:
        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The RDF model that holds the vocabulary terms</p> */");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "private static Model m_model = ModelFactory.createDefaultModel();");

     label3:
        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

        return;
    }

    protected void writeSource()
    {
        java.io.ByteArrayOutputStream $r1;
        java.util.StringTokenizer $r8;
        jena.schemagen r0;
        int $i0, $i1;
        com.hp.hpl.jena.rdf.model.RDFWriter $r3;
        java.lang.Boolean $r4;
        java.lang.String $r5, $r7, $r9, $r10, r11, $r12;
        com.hp.hpl.jena.ontology.OntModel $r2, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: jena.schemagen;

        $z0 = virtualinvoke r0.<jena.schemagen: boolean includeSource()>();

        if $z0 == 0 goto label6;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.RDFWriter getWriter(java.lang.String)>("Turtle");

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r5 = virtualinvoke $r4.<java.lang.Boolean: java.lang.String toString()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFWriter: java.lang.Object setProperty(java.lang.String,java.lang.Object)>("objectLists", $r5);

        $r6 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.OutputStream,java.lang.String)>($r6, $r1, null);

        $r7 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "private static final String SOURCE = ");

        z3 = 1;

        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r7, "\n");

     label1:
        $z1 = virtualinvoke $r8.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label5;

        $r9 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r11 = $r9;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("\r");

        if $z2 == 0 goto label2;

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r11 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        if z3 == 0 goto label3;

        $r12 = "   ";

        goto label4;

     label3:
        $r12 = " + ";

     label4:
        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(2, $r12);

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, "\"");

        $r10 = specialinvoke r0.<jena.schemagen: java.lang.String protectQuotes(java.lang.String)>(r11);

        virtualinvoke r0.<jena.schemagen: void write(int,java.lang.String)>(0, $r10);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(2, "\\n\"");

        z3 = 0;

        goto label1;

     label5:
        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, ";");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** Read the ontology definition into the source model */ ");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "static { ");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(2, "m_model.read( new ByteArrayInputStream( SOURCE.getBytes() ), null, \"N3\" );");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "}");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, "");

     label6:
        return;
    }

    private java.lang.String protectQuotes(java.lang.String)
    {
        jena.schemagen r3;
        java.lang.String r0, $r1, $r2;

        r3 := @this: jena.schemagen;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\", "\\\\\\\\");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "\\\\\"");

        return $r2;
    }

    protected void writeOntologyVersionInfo()
    {
        jena.schemagen r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r1, $r4, $r7;

        r0 := @this: jena.schemagen;

        $r1 = virtualinvoke r0.<jena.schemagen: java.lang.String getOntologyElementVersionInfo()>();

        if null == $r1 goto label1;

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The ontology\'s owl:versionInfo as a string</p> */");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public static final String VERSION_INFO = \"");

        $r4 = specialinvoke r0.<jena.schemagen: java.lang.String protectQuotes(java.lang.String)>($r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, $r7);

        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

     label1:
        return;
    }

    protected void writeNamespace()
    {
        jena.schemagen r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r1, $r6;

        r0 := @this: jena.schemagen;

        $r1 = virtualinvoke r0.<jena.schemagen: java.lang.String determineNamespaceURI()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The namespace of the vocabulary as a string</p> */");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public static final String NS = \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, $r6);

        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The namespace of the vocabulary as a string</p>");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, " *  @see #NS */");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "public static String getURI() {return NS;}");

        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "/** <p>The namespace of the vocabulary as a resource</p> */");

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, "public static final Resource NAMESPACE = m_model.createResource( NS );");

        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

        return;
    }

    protected java.lang.String determineNamespaceURI()
    {
        java.util.List $r2;
        jena.schemagen r0;
        java.lang.String $r1, r3;

        r0 := @this: jena.schemagen;

        $r1 = virtualinvoke r0.<jena.schemagen: java.lang.String getOptionNamespace()>();

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = virtualinvoke r0.<jena.schemagen: java.lang.String getDefaultPrefixNamespace()>();

     label1:
        if r3 != null goto label2;

        r3 = virtualinvoke r0.<jena.schemagen: java.lang.String getOntologyElementNamespace()>();

     label2:
        if r3 != null goto label3;

        r3 = virtualinvoke r0.<jena.schemagen: java.lang.String guessNamespace()>();

     label3:
        if r3 != null goto label4;

        virtualinvoke r0.<jena.schemagen: void abort(java.lang.String,java.lang.Exception)>("Could not determine the base URI for the input vocabulary", null);

     label4:
        $r2 = r0.<jena.schemagen: java.util.List m_includeURI>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return r3;
    }

    protected java.lang.String getOptionNamespace()
    {
        jena.schemagen$SchemagenOptions $r1, $r2;
        jena.schemagen r0;
        java.lang.String $r4;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasNamespaceOption()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r3 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: com.hp.hpl.jena.rdf.model.Resource getNamespaceOption()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    protected java.lang.String getDefaultPrefixNamespace()
    {
        jena.schemagen r0;
        com.hp.hpl.jena.rdf.model.Model $r4;
        java.lang.String $r2, r5;
        com.hp.hpl.jena.ontology.OntModel $r1, $r3;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.OntModel: java.lang.String getNsPrefixURI(java.lang.String)>("");

        r5 = $r2;

        if $r2 != null goto label1;

        $r3 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.Model getBaseModel()>();

        r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Model: java.lang.String getNsPrefixURI(java.lang.String)>("");

     label1:
        return r5;
    }

    protected java.lang.String getOntologyElementVersionInfo()
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r7, $r13;
        com.hp.hpl.jena.rdf.model.Property $r6, $r12;
        com.hp.hpl.jena.ontology.OntModel $r1, $r4, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.rdf.model.RDFNode $r26, $r29, $r43;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r33, $r35, $r36, $r37;
        com.hp.hpl.jena.rdf.model.Literal $r30;
        jena.schemagen r0;
        java.lang.String $r18, $r21, $r27, $r31, $r38, $r44, r45;
        java.io.PrintStream $r14, $r16, $r22, $r23, $r24, $r32, $r34, $r39, $r40, $r41;
        com.hp.hpl.jena.ontology.Profile $r2;
        com.hp.hpl.jena.rdf.model.Statement $r8, $r25, $r28, $r42;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r9;
        com.hp.hpl.jena.rdf.model.Model $r5, $r11;

        r0 := @this: jena.schemagen;

        r45 = null;

        $r1 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource ONTOLOGY()>();

        if null == $r3 goto label6;

        $r4 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.Model getBaseModel()>();

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r6, $r3);

        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r10 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.Model getBaseModel()>();

        $r12 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property versionInfo>;

        $r13 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r9, $r12, null);

        $z1 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r28 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r29 = interfaceinvoke $r28.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r30 = interfaceinvoke $r29.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.Literal asLiteral()>();

        $r31 = interfaceinvoke $r30.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        r45 = $r31;

        $z3 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r32 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>("Warning: ambiguous owl:versionInfo - there are more than one owl:versionInfo statements.");

        $r34 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Picking first choice: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Other choices are:");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label1:
        $z4 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        $r40 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r40.<java.io.PrintStream: void print(java.lang.String)>(" ");

        $r41 = <java.lang.System: java.io.PrintStream err>;

        $r42 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r43 = interfaceinvoke $r42.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r44 = interfaceinvoke $r43.<com.hp.hpl.jena.rdf.model.RDFNode: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void print(java.lang.String)>($r44);

        goto label1;

     label2:
        $r39 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r39.<java.io.PrintStream: void println()>();

     label3:
        $z5 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("Warning: ambiguous owl:versionInfo - there is more than one owl:Ontology element.");

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Picking first choice: ");

        $r18 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Other choices are:");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label4:
        $z2 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void print(java.lang.String)>(" ");

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r25 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r26 = interfaceinvoke $r25.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r27 = interfaceinvoke $r26.<com.hp.hpl.jena.rdf.model.RDFNode: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void print(java.lang.String)>($r27);

        goto label4;

     label5:
        $r22 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r22.<java.io.PrintStream: void println()>();

     label6:
        return r45;
    }

    protected java.lang.String getOntologyElementNamespace()
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r7;
        com.hp.hpl.jena.rdf.model.Property $r4;
        com.hp.hpl.jena.ontology.OntModel $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r14, $r15, $r16, $r25, $r26, $r29, $r30;
        jena.schemagen r0;
        int $i0, $i1, $i3;
        java.lang.String $r10, $r17, $r23, r27, $r28;
        java.io.PrintStream $r11, $r13, $r18, $r19, $r20, $r21;
        com.hp.hpl.jena.ontology.Profile $r5;
        char $c2;
        com.hp.hpl.jena.rdf.model.Statement $r8, $r22;
        com.hp.hpl.jena.rdf.model.Resource $r6, $r9;
        com.hp.hpl.jena.rdf.model.Model $r2;

        r0 := @this: jena.schemagen;

        r27 = null;

        $r1 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.Model getBaseModel()>();

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource ONTOLOGY()>();

        $r7 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r4, $r6);

        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i1);

        $i3 = (int) $c2;

        $z1 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isNCName(int)>($i3);

        if $z1 == 0 goto label1;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r28 = $r10;

     label2:
        r27 = $r28;

        $z2 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Warning: ambiguous default namespace - there is more than one owl:Ontology element.");

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Picking first choice: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Other choices are:");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label3:
        $z3 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void print(java.lang.String)>(" ");

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r22 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        virtualinvoke $r21.<java.io.PrintStream: void print(java.lang.String)>($r23);

        goto label3;

     label4:
        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println()>();

        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("Use the -a option to specify a particular namespace if required.");

     label5:
        return r27;
    }

    protected java.lang.String guessNamespace()
    {
        java.util.HashMap $r0;
        java.lang.Integer $r13;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r16;
        jena.schemagen r1;
        int $i0, i1;
        java.lang.String r7, $r8, $r9, $r10, $r11, r20;
        com.hp.hpl.jena.ontology.OntModel $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r5;
        com.hp.hpl.jena.rdf.model.RDFNode $r17;
        java.util.Set $r4;
        com.hp.hpl.jena.rdf.model.Statement r19;
        com.hp.hpl.jena.rdf.model.Resource $r15, $r18;
        java.lang.Object $r6, $r12, $r14;

        r1 := @this: jena.schemagen;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = r1.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.StmtIterator listStatements()>();

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        r19 = (com.hp.hpl.jena.rdf.model.Statement) $r14;

        $r15 = interfaceinvoke r19.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        specialinvoke r1.<jena.schemagen: void countNamespace(com.hp.hpl.jena.rdf.model.Resource,java.util.Map)>($r15, $r0);

        $r16 = interfaceinvoke r19.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        specialinvoke r1.<jena.schemagen: void countNamespace(com.hp.hpl.jena.rdf.model.Resource,java.util.Map)>($r16, $r0);

        $r17 = interfaceinvoke r19.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z6 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z6 == 0 goto label2;

        $r18 = interfaceinvoke r19.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        specialinvoke r1.<jena.schemagen: void countNamespace(com.hp.hpl.jena.rdf.model.Resource,java.util.Map)>($r18, $r0);

     label2:
        goto label1;

     label3:
        r20 = null;

        i1 = 0;

        $r4 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <com.hp.hpl.jena.vocabulary.OWL: java.lang.String getURI()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 != 0 goto label5;

        $r9 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label5;

        $r10 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z4 != 0 goto label5;

        $r11 = staticinvoke <com.hp.hpl.jena.vocabulary.XSD: java.lang.String getURI()>();

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z5 != 0 goto label5;

        $r12 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r13 = (java.lang.Integer) $r12;

        $i0 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        if $i0 <= i1 goto label5;

        i1 = $i0;

        r20 = r7;

     label5:
        goto label4;

     label6:
        return r20;
    }

    private void countNamespace(com.hp.hpl.jena.rdf.model.Resource, java.util.Map)
    {
        java.lang.Integer $r3, $r6;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.util.Map r2;
        int $i0, $i1;
        jena.schemagen r5;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0, $z1;

        r5 := @this: jena.schemagen;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: java.util.Map;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label3;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getNameSpace()>();

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (java.lang.Integer) $r4;

        goto label2;

     label1:
        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(0);

     label2:
        $r3 = new java.lang.Integer;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label3:
        return;
    }

    protected void writeProperties()
    {
        jena.schemagen$SchemagenOptions $r1, $r2, $r3;
        jena.schemagen r0;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasNopropertiesOption()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasPropertySectionOption()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getPropertySectionOption()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r4);

     label2:
        $z2 = virtualinvoke r0.<jena.schemagen: boolean useOntology()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<jena.schemagen: void writeObjectProperties()>();

        virtualinvoke r0.<jena.schemagen: void writeDatatypeProperties()>();

        virtualinvoke r0.<jena.schemagen: void writeAnnotationProperties()>();

        virtualinvoke r0.<jena.schemagen: void writeRDFProperties(boolean)>(1);

        goto label4;

     label3:
        virtualinvoke r0.<jena.schemagen: void writeRDFProperties(boolean)>(0);

     label4:
        return;
    }

    protected void writeObjectProperties()
    {
        com.hp.hpl.jena.rdf.model.Resource $r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r6;
        jena.schemagen$SchemagenOptions $r1, $r3, $r9;
        jena.schemagen r0;
        java.lang.Object $r7;
        java.lang.String r2, $r10;
        com.hp.hpl.jena.ontology.OntModel $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasPropTemplateOption()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r10 = interfaceinvoke $r9.<jena.schemagen$SchemagenOptions: java.lang.String getPropTemplateOption()>();

        goto label2;

     label1:
        $r10 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r10;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.util.iterator.ExtendedIterator listObjectProperties()>();

        $r6 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r5);

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r2, "ObjectProperty", "createObjectProperty", "_PROP");

        goto label3;

     label4:
        return;
    }

    protected void writeDatatypeProperties()
    {
        com.hp.hpl.jena.rdf.model.Resource $r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r6;
        jena.schemagen$SchemagenOptions $r1, $r3, $r9;
        jena.schemagen r0;
        java.lang.Object $r7;
        java.lang.String r2, $r10;
        com.hp.hpl.jena.ontology.OntModel $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasPropTemplateOption()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r10 = interfaceinvoke $r9.<jena.schemagen$SchemagenOptions: java.lang.String getPropTemplateOption()>();

        goto label2;

     label1:
        $r10 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r10;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.util.iterator.ExtendedIterator listDatatypeProperties()>();

        $r6 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r5);

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r2, "DatatypeProperty", "createDatatypeProperty", "_PROP");

        goto label3;

     label4:
        return;
    }

    protected void writeAnnotationProperties()
    {
        com.hp.hpl.jena.rdf.model.Resource $r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r6;
        jena.schemagen$SchemagenOptions $r1, $r3, $r9;
        jena.schemagen r0;
        java.lang.Object $r7;
        java.lang.String r2, $r10;
        com.hp.hpl.jena.ontology.OntModel $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasPropTemplateOption()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r10 = interfaceinvoke $r9.<jena.schemagen$SchemagenOptions: java.lang.String getPropTemplateOption()>();

        goto label2;

     label1:
        $r10 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r10;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.util.iterator.ExtendedIterator listAnnotationProperties()>();

        $r6 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r5);

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r2, "AnnotationProperty", "createAnnotationProperty", "_PROP");

        goto label3;

     label4:
        return;
    }

    protected void writeRDFProperties(boolean)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r18;
        com.hp.hpl.jena.rdf.model.Property $r16;
        com.hp.hpl.jena.rdf.model.Resource[] $r5, $r21, r28;
        com.hp.hpl.jena.ontology.OntModel $r17;
        boolean $z0, z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r10, $r12, $r13;
        java.util.ArrayList $r7;
        jena.schemagen$SchemagenOptions $r1, $r4, $r25;
        jena.schemagen r0;
        int i0, $i1;
        java.lang.String r2, r3, $r14, $r26, $r27;
        com.hp.hpl.jena.rdf.model.Statement $r19;
        com.hp.hpl.jena.rdf.model.Resource $r6, $r11, $r15, $r20, $r22, $r23, $r24;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8;
        java.lang.Object $r9;

        r0 := @this: jena.schemagen;

        z1 := @parameter0: boolean;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasPropTemplateOption()>();

        if $z0 == 0 goto label01;

        $r25 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r26 = interfaceinvoke $r25.<jena.schemagen$SchemagenOptions: java.lang.String getPropTemplateOption()>();

        goto label02;

     label01:
        $r26 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label02:
        r2 = $r26;

        if z1 == 0 goto label03;

        $r27 = "OntProperty";

        goto label04;

     label03:
        $r27 = "Property";

     label04:
        r3 = $r27;

        $r4 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z2 = interfaceinvoke $r4.<jena.schemagen$SchemagenOptions: boolean hasLangOwlOption()>();

        if $z2 == 0 goto label05;

        $r21 = newarray (com.hp.hpl.jena.rdf.model.Resource)[3];

        $r22 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Resource ObjectProperty>;

        $r21[0] = $r22;

        $r23 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Resource DatatypeProperty>;

        $r21[1] = $r23;

        $r24 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Property>;

        $r21[2] = $r24;

        r28 = $r21;

        goto label06;

     label05:
        $r5 = newarray (com.hp.hpl.jena.rdf.model.Resource)[1];

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Property>;

        $r5[0] = $r6;

        r28 = $r5;

     label06:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label07:
        $i1 = lengthof r28;

        if i0 >= $i1 goto label10;

        $r17 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r16 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r15 = r28[i0];

        $r18 = interfaceinvoke $r17.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r16, $r15);

     label08:
        $z4 = interfaceinvoke $r18.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r19 = interfaceinvoke $r18.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r20 = interfaceinvoke $r19.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label08;

     label09:
        i0 = i0 + 1;

        goto label07;

     label10:
        $r8 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(java.util.List)>($r7);

     label11:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.hp.hpl.jena.rdf.model.Resource) $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r11, r2, r3, $r14, "_PROP");

        goto label11;

     label12:
        return;
    }

    protected void writeClasses()
    {
        jena.schemagen$SchemagenOptions $r1, $r2, $r3;
        jena.schemagen r0;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasNoclassesOption()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasClassSectionOption()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getClassSectionOption()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r4);

     label2:
        $z2 = virtualinvoke r0.<jena.schemagen: boolean useOntology()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<jena.schemagen: void writeOntClasses()>();

        goto label4;

     label3:
        virtualinvoke r0.<jena.schemagen: void writeRDFClasses()>();

     label4:
        return;
    }

    protected void writeOntClasses()
    {
        com.hp.hpl.jena.rdf.model.Resource $r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r5;
        jena.schemagen$SchemagenOptions $r1, $r8;
        jena.schemagen r0;
        java.lang.Object $r6;
        java.lang.String r2, $r9;
        com.hp.hpl.jena.ontology.OntModel $r3;
        boolean $z0, $z1;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasClassTemplateOption()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r9 = interfaceinvoke $r8.<jena.schemagen$SchemagenOptions: java.lang.String getClassTemplateOption()>();

        goto label2;

     label1:
        $r9 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r9;

        $r3 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.util.iterator.ExtendedIterator listClasses()>();

        $r5 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r4);

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) $r6;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, r2, "OntClass", "createClass", "_CLASS");

        goto label3;

     label4:
        return;
    }

    protected void writeRDFClasses()
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r6;
        jena.schemagen$SchemagenOptions $r1, $r3, $r13;
        com.hp.hpl.jena.rdf.model.Property $r4;
        jena.schemagen r0;
        java.lang.String r2, $r14;
        com.hp.hpl.jena.ontology.OntModel $r5;
        boolean $z0, $z1, $z2;
        jena.schemagen$1 $r7;
        com.hp.hpl.jena.rdf.model.Resource $r12, r15;
        java.util.List $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8, $r10;
        java.lang.Object $r11;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasClassTemplateOption()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r14 = interfaceinvoke $r13.<jena.schemagen$SchemagenOptions: java.lang.String getClassTemplateOption()>();

        goto label2;

     label1:
        $r14 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r14;

        r15 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Resource Class>;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: boolean hasLangRdfsOption()>();

        if $z1 == 0 goto label3;

        r15 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Resource Class>;

     label3:
        $r5 = r0.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r4, r15);

        $r7 = new jena.schemagen$1;

        specialinvoke $r7.<jena.schemagen$1: void <init>(jena.schemagen)>(r0);

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r7);

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.List toList()>();

        $r10 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(java.util.List)>($r9);

     label4:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.hp.hpl.jena.rdf.model.Resource) $r11;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r12, r2, "Resource", "createResource", "_CLASS");

        goto label4;

     label5:
        return;
    }

    protected void writeIndividuals()
    {
        jena.schemagen$SchemagenOptions $r1, $r2, $r3;
        jena.schemagen r0;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasNoindividualsOption()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z1 = interfaceinvoke $r2.<jena.schemagen$SchemagenOptions: boolean hasIndividualsSectionOption()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r4 = interfaceinvoke $r3.<jena.schemagen$SchemagenOptions: java.lang.String getIndividualsSectionOption()>();

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(0, $r4);

     label2:
        $z2 = virtualinvoke r0.<jena.schemagen: boolean useOntology()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<jena.schemagen: void writeOntIndividuals()>();

        goto label4;

     label3:
        virtualinvoke r0.<jena.schemagen: void writeRDFIndividuals()>();

     label4:
        return;
    }

    protected void writeOntIndividuals()
    {
        jena.schemagen$SchemagenOptions $r1, $r17;
        java.util.Map $r9;
        jena.schemagen r0;
        java.lang.String r2, $r13, $r16, $r18, $r20;
        com.hp.hpl.jena.ontology.OntClass $r8;
        boolean $z0, $z1;
        com.hp.hpl.jena.ontology.Individual r7;
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.rdf.model.Resource $r5, r19;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.lang.Object $r4, $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasIndividualTemplateOption()>();

        if $z0 == 0 goto label1;

        $r17 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r18 = interfaceinvoke $r17.<jena.schemagen$SchemagenOptions: java.lang.String getIndividualTemplateOption()>();

        goto label2;

     label1:
        $r18 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\", %valtype% );";

     label2:
        r2 = $r18;

        $r3 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator selectIndividuals()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/Individual;");

        r7 = (com.hp.hpl.jena.ontology.Individual) $r6;

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.ontology.Individual: com.hp.hpl.jena.ontology.OntClass getOntClass()>();

        r19 = $r8;

        if $r8 != null goto label4;

        r19 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Resource Thing>;

     label4:
        $r9 = r0.<jena.schemagen: java.util.Map m_resourcesToNames>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        $r16 = (java.lang.String) $r10;

        if $r16 == null goto label5;

        $r20 = $r16;

        goto label6;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m_model.createClass( \"");

        $r13 = interfaceinvoke r19.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" )");

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("valtype", $r20);

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r7, r2, "Individual", "createIndividual", "_INSTANCE");

        virtualinvoke r0.<jena.schemagen: void pop(int)>(1);

        goto label3;

     label7:
        return;
    }

    protected void writeRDFIndividuals()
    {
        com.hp.hpl.jena.rdf.model.Resource $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        jena.schemagen$SchemagenOptions $r1, $r6;
        jena.schemagen r0;
        java.lang.Object $r4;
        java.lang.String r2, $r7;
        boolean $z0, $z1;

        r0 := @this: jena.schemagen;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasIndividualTemplateOption()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $r7 = interfaceinvoke $r6.<jena.schemagen$SchemagenOptions: java.lang.String getIndividualTemplateOption()>();

        goto label2;

     label1:
        $r7 = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

     label2:
        r2 = $r7;

        $r3 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator selectIndividuals()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        virtualinvoke r0.<jena.schemagen: void writeValue(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, r2, "Resource", "createResource", "_INSTANCE");

        goto label3;

     label4:
        return;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator selectIndividuals()
    {
        java.util.ArrayList $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r2;
        jena.schemagen r1;
        java.lang.String $r10, $r11, $r12, $r13;
        com.hp.hpl.jena.ontology.OntModel $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.Resource $r8, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;

        r1 := @this: jena.schemagen;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, null);

     label1:
        $z9 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z9 == 0 goto label5;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r9 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $z1 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z1 != 0 goto label2;

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r11 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $z6 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z6 != 0 goto label1;

        $r12 = staticinvoke <com.hp.hpl.jena.vocabulary.OWL: java.lang.String getURI()>();

        $z7 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>($r12);

        if $z7 != 0 goto label1;

        $r13 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        $z8 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        if $z8 == 0 goto label2;

        goto label1;

     label2:
        $z2 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r1.<jena.schemagen: boolean isIncluded(com.hp.hpl.jena.rdf.model.Resource)>($r8);

        if $z3 != 0 goto label3;

        $z5 = virtualinvoke r1.<jena.schemagen: boolean isIncluded(com.hp.hpl.jena.rdf.model.Resource)>($r9);

        if $z5 == 0 goto label4;

     label3:
        $z4 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z4 != 0 goto label4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label1;

     label5:
        $r5 = virtualinvoke r1.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(java.util.List)>($r0);

        return $r5;
    }

    protected boolean isIncluded(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.util.List $r3;
        jena.schemagen r2;
        java.lang.Object $r5;
        java.lang.String $r1, $r6;
        boolean $z0, $z1, z2;

        r2 := @this: jena.schemagen;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        z2 = 0;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r3 = r2.<jena.schemagen: java.util.List m_includeURI>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        if z2 != 0 goto label2;

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        goto label1;

     label2:
        return z2;
    }

    protected void writeValue(com.hp.hpl.jena.rdf.model.Resource, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Resource r1;
        jena.schemagen r0;
        java.lang.String r2, r3, r4, r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.schemagen;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r5 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z0 = virtualinvoke r0.<jena.schemagen: boolean filter(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<jena.schemagen: boolean noComments()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<jena.schemagen: boolean hasComment(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 == 0 goto label1;

        $r6 = virtualinvoke r0.<jena.schemagen: java.lang.String getComment(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r7 = virtualinvoke r0.<jena.schemagen: java.lang.String formatComment(java.lang.String)>($r6);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, $r7);

     label1:
        $r8 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("valuri", $r8);

        $r9 = virtualinvoke r0.<jena.schemagen: java.lang.String getValueName(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r1, r2);

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("valname", $r9);

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("valclass", r3);

        virtualinvoke r0.<jena.schemagen: void addReplacementPattern(java.lang.String,java.lang.String)>("valcreator", r4);

        $r10 = virtualinvoke r0.<jena.schemagen: java.lang.String substitute(java.lang.String)>(r5);

        virtualinvoke r0.<jena.schemagen: void writeln(int,java.lang.String)>(1, $r10);

        virtualinvoke r0.<jena.schemagen: void writeln(int)>(1);

        virtualinvoke r0.<jena.schemagen: void pop(int)>(4);

     label2:
        return;
    }

    protected boolean hasComment(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Property $r1;
        jena.schemagen r2;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r2 := @this: jena.schemagen;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property comment>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        return $z0;
    }

    protected java.lang.String getComment(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.StringBuffer $r0;
        com.hp.hpl.jena.rdf.model.Property $r3;
        jena.schemagen r1;
        java.lang.String $r6, $r13, $r15, $r16;
        com.hp.hpl.jena.ontology.OntModel $r4;
        boolean $z0, $z1;
        org.slf4j.Logger $r9;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        com.hp.hpl.jena.rdf.model.Resource r2;
        com.hp.hpl.jena.rdf.model.NodeIterator $r5;
        java.lang.Class $r8;
        java.lang.StringBuilder $r10, $r11, $r12;
        com.hp.hpl.jena.rdf.model.Literal $r14;

        r1 := @this: jena.schemagen;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r4 = r1.<jena.schemagen: com.hp.hpl.jena.ontology.OntModel m_source>;

        $r3 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property comment>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.NodeIterator listObjectsOfProperty(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r2, $r3);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.NodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.NodeIterator: com.hp.hpl.jena.rdf.model.RDFNode nextNode()>();

        $z1 = $r7 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label2;

        $r14 = (com.hp.hpl.jena.rdf.model.Literal) $r7;

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        goto label3;

     label2:
        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r8);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

     label3:
        goto label1;

     label4:
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    protected java.lang.String formatComment(java.lang.String)
    {
        byte $b8;
        java.lang.StringBuffer $r7;
        int $i0, $i2, $i4, i5, i6, $i9;
        jena.schemagen r2;
        java.lang.String r1, $r3, $r4, $r5, $r6;
        boolean $z0, z1, z2, z3, z4, z5, z6;
        char $c1, $c3, c7;

        r2 := @this: jena.schemagen;

        r1 := @parameter0: java.lang.String;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/** <p>");

        z1 = 0;

        z5 = 0;

        i5 = virtualinvoke $r7.<java.lang.StringBuffer: int length()>();

        z2 = 1;

        z4 = 1;

        z3 = 1;

        i6 = 0;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i6 >= $i0 goto label13;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        c7 = $c1;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label03;

        if z5 == 0 goto label02;

        goto label12;

     label02:
        c7 = 32;

        z1 = 1;

        z6 = 1;

        z5 = 1;

        goto label04;

     label03:
        z1 = 0;

        z6 = 0;

        z5 = 0;

     label04:
        if c7 != 92 goto label07;

        i6 = i6 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i9 = (int) $c3;

        lookupswitch($i9)
        {
            case 110: goto label05;
            default: goto label06;
        };

     label05:
        $r5 = r2.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i4 = virtualinvoke r2.<jena.schemagen: int indentTo(int,java.lang.StringBuffer)>(1, $r7);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" *  ");

        i5 = $i4 + 3;

        z2 = 0;

        z4 = 0;

        z3 = 0;

        goto label11;

     label06:
        goto label11;

     label07:
        if c7 != 60 goto label08;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        i5 = i5 + 4;

        goto label11;

     label08:
        if c7 != 62 goto label09;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        i5 = i5 + 4;

        goto label11;

     label09:
        if c7 != 38 goto label10;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        i5 = i5 + 5;

        goto label11;

     label10:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c7);

        i5 = i5 + 1;

     label11:
        if i5 <= 80 goto label12;

        if z6 == 0 goto label12;

        $r4 = r2.<jena.schemagen: java.lang.String m_nl>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i2 = virtualinvoke r2.<jena.schemagen: int indentTo(int,java.lang.StringBuffer)>(1, $r7);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" *  ");

        i5 = $i2 + 3;

        z2 = 0;

        z4 = 0;

        z3 = 0;

     label12:
        i6 = i6 + 1;

        goto label01;

     label13:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</p>");

        if z4 == 0 goto label14;

        $r6 = "";

        goto label15;

     label14:
        $r6 = r2.<jena.schemagen: java.lang.String m_nl>;

     label15:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        if z3 == 0 goto label16;

        $b8 = 0;

        goto label17;

     label16:
        $b8 = 1;

     label17:
        virtualinvoke r2.<jena.schemagen: int indentTo(int,java.lang.StringBuffer)>($b8, $r7);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" */");

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected boolean filter(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r7;
        java.util.Map $r2;
        jena.schemagen$SchemagenOptions $r5;
        com.hp.hpl.jena.rdf.model.Property $r6;
        jena.schemagen r1;
        java.lang.String $r10, r14, $r16, r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Iterator $r4, $r12;
        com.hp.hpl.jena.rdf.model.Statement $r8;
        com.hp.hpl.jena.rdf.model.Resource r0, $r9;
        java.util.List $r3, $r11;
        java.lang.Object $r13, $r15;

        r1 := @this: jena.schemagen;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r2 = r1.<jena.schemagen: java.util.Map m_resourcesToNames>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $r3 = r1.<jena.schemagen: java.util.List m_includeURI>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r15 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z8 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>(r17);

        if $z8 == 0 goto label04;

        return 0;

     label04:
        goto label03;

     label05:
        $r5 = r1.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z3 = interfaceinvoke $r5.<jena.schemagen$SchemagenOptions: boolean hasStrictIndividualsOption()>();

        if $z3 != 0 goto label10;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r6);

     label06:
        $z4 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $z5 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z5 != 0 goto label09;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r11 = r1.<jena.schemagen: java.util.List m_includeURI>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z6 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        $z7 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(r14);

        if $z7 == 0 goto label08;

        return 0;

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        return 1;
    }

    protected java.lang.String getValueName(com.hp.hpl.jena.rdf.model.Resource, java.lang.String)
    {
        jena.schemagen$SchemagenOptions $r1;
        java.util.Map $r5;
        jena.schemagen r0;
        int i0;
        java.lang.String $r3, r8, $r14, r15, $r17;
        boolean $z0, $z1;
        java.util.Set $r4, $r16;
        com.hp.hpl.jena.rdf.model.Resource r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: jena.schemagen;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r8 := @parameter1: java.lang.String;

        $r1 = r0.<jena.schemagen: jena.schemagen$SchemagenOptions m_options>;

        $z0 = interfaceinvoke $r1.<jena.schemagen$SchemagenOptions: boolean hasUcNamesOption()>();

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<jena.schemagen: java.lang.String getUCValueName(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        goto label2;

     label1:
        $r14 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getLocalName()>();

     label2:
        $r3 = virtualinvoke r0.<jena.schemagen: java.lang.String asLegalJavaID(java.lang.String,boolean)>($r14, 0);

        r15 = $r3;

        i0 = 0;

     label3:
        $r16 = r0.<jena.schemagen: java.util.Set m_usedNames>;

        $z1 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>(r15);

        if $z1 == 0 goto label6;

        if i0 != 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        r15 = $r17;

        i0 = i0 + 1;

        goto label3;

     label6:
        $r4 = r0.<jena.schemagen: java.util.Set m_usedNames>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r15);

        $r5 = r0.<jena.schemagen: java.util.Map m_resourcesToNames>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r15);

        return r15;
    }

    protected java.lang.String getUCValueName(com.hp.hpl.jena.rdf.model.Resource)
    {
        char $c1, c2, $c4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.lang.StringBuffer $r0;
        int $i0, i3;
        jena.schemagen r4;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: jena.schemagen;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getLocalName()>();

        c2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c2);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(95);

     label2:
        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        c2 = $c1;

        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(com.hp.hpl.jena.util.iterator.ExtendedIterator)
    {
        java.util.List $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator r1, $r3;
        jena.schemagen r0;

        r0 := @this: jena.schemagen;

        r1 := @parameter0: com.hp.hpl.jena.util.iterator.ExtendedIterator;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.List toList()>();

        $r3 = virtualinvoke r0.<jena.schemagen: com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(java.util.List)>($r2);

        return $r3;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator sorted(java.util.List)
    {
        java.util.List r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.util.Iterator $r3;
        jena.schemagen r2;
        jena.schemagen$2 $r1;

        r2 := @this: jena.schemagen;

        r0 := @parameter0: java.util.List;

        $r1 = new jena.schemagen$2;

        specialinvoke $r1.<jena.schemagen$2: void <init>(jena.schemagen)>(r2);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, $r1);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        java.util.List $r2;

        <jena.schemagen: int COMMENT_LENGTH_LIMIT> = 80;

        <jena.schemagen: java.lang.String DEFAULT_HEADER_TEMPLATE> = "/* CVS $Id: $ */%nl%%package% %nl%%imports% %nl%/**%nl% * Vocabulary definitions from %sourceURI% %nl% * @author Auto-generated by schemagen on %date% %nl% */";

        <jena.schemagen: java.lang.String DEFAULT_RDFS_INDIVIDUAL_TEMPLATE> = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

        <jena.schemagen: java.lang.String DEFAULT_INDIVIDUAL_TEMPLATE> = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\", %valtype% );";

        <jena.schemagen: java.lang.String DEFAULT_TEMPLATE> = "public static final %valclass% %valname% = m_model.%valcreator%( \"%valuri%\" );";

        <jena.schemagen: java.lang.String DEFAULT_MARKER> = "%";

        <jena.schemagen: java.lang.String DEFAULT_CONFIG_URI> = "file:schemagen.rdf";

        <jena.schemagen: java.lang.String NS> = "http://jena.hpl.hp.com/2003/04/schemagen#";

        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        $r0 = newarray (java.lang.String)[50];

        $r0[0] = "abstract";

        $r0[1] = "continue";

        $r0[2] = "for";

        $r0[3] = "new";

        $r0[4] = "switch";

        $r0[5] = "assert";

        $r0[6] = "default";

        $r0[7] = "goto";

        $r0[8] = "package";

        $r0[9] = "synchronized";

        $r0[10] = "boolean";

        $r0[11] = "do";

        $r0[12] = "if";

        $r0[13] = "private";

        $r0[14] = "this";

        $r0[15] = "break";

        $r0[16] = "double";

        $r0[17] = "implements";

        $r0[18] = "protected";

        $r0[19] = "throw";

        $r0[20] = "byte";

        $r0[21] = "else";

        $r0[22] = "import";

        $r0[23] = "public";

        $r0[24] = "throws";

        $r0[25] = "case";

        $r0[26] = "enum";

        $r0[27] = "instanceof";

        $r0[28] = "return";

        $r0[29] = "transient";

        $r0[30] = "catch";

        $r0[31] = "extends";

        $r0[32] = "int";

        $r0[33] = "short";

        $r0[34] = "try";

        $r0[35] = "char";

        $r0[36] = "final";

        $r0[37] = "interface";

        $r0[38] = "static";

        $r0[39] = "void";

        $r0[40] = "class";

        $r0[41] = "finally";

        $r0[42] = "long";

        $r0[43] = "strictfp";

        $r0[44] = "volatile";

        $r0[45] = "const";

        $r0[46] = "float";

        $r0[47] = "native";

        $r0[48] = "super";

        $r0[49] = "while";

        <jena.schemagen: java.lang.String[] JAVA_KEYWORDS> = $r0;

        $r1 = <jena.schemagen: java.lang.String[] JAVA_KEYWORDS>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <jena.schemagen: java.util.List KEYWORD_LIST> = $r2;

        return;
    }
}
