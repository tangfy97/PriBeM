public class org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner extends org.apache.batik.parser.AbstractScanner
{
    public static final int EOF;
    public static final int NAME;
    public static final int COLON;
    public static final int LEFT_SQUARE_BRACKET;
    public static final int RIGHT_SQUARE_BRACKET;
    public static final int LEFT_PARENTHESIS;
    public static final int RIGHT_PARENTHESIS;
    public static final int STRING;
    public static final int NUMBER;
    public static final int ASTERISK;

    public void <init>(java.lang.String)
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.batik.parser.AbstractScanner: void <init>(java.lang.String)>(r1);

        return;
    }

    protected int endGap()
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        byte $b1;
        int $i0, $i3;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        return $b1;
    }

    protected void nextToken() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        org.apache.batik.util.io.NormalizingReader $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i15;
        boolean $z0, $z1, $z2;
        char $c5, $c7, $c13;
        java.io.IOException $r4;
        org.apache.batik.parser.ParseException $r6, $r7;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

     label01:
        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        tableswitch($i0)
        {
            case -1: goto label02;
            case 0: goto label13;
            case 1: goto label13;
            case 2: goto label13;
            case 3: goto label13;
            case 4: goto label13;
            case 5: goto label13;
            case 6: goto label13;
            case 7: goto label13;
            case 8: goto label13;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label13;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label13;
            case 15: goto label13;
            case 16: goto label13;
            case 17: goto label13;
            case 18: goto label13;
            case 19: goto label13;
            case 20: goto label13;
            case 21: goto label13;
            case 22: goto label13;
            case 23: goto label13;
            case 24: goto label13;
            case 25: goto label13;
            case 26: goto label13;
            case 27: goto label13;
            case 28: goto label13;
            case 29: goto label13;
            case 30: goto label13;
            case 31: goto label13;
            case 32: goto label09;
            case 33: goto label13;
            case 34: goto label11;
            case 35: goto label13;
            case 36: goto label13;
            case 37: goto label13;
            case 38: goto label13;
            case 39: goto label10;
            case 40: goto label06;
            case 41: goto label07;
            case 42: goto label08;
            case 43: goto label13;
            case 44: goto label13;
            case 45: goto label13;
            case 46: goto label13;
            case 47: goto label13;
            case 48: goto label12;
            case 49: goto label12;
            case 50: goto label12;
            case 51: goto label12;
            case 52: goto label12;
            case 53: goto label12;
            case 54: goto label12;
            case 55: goto label12;
            case 56: goto label12;
            case 57: goto label12;
            case 58: goto label03;
            case 59: goto label13;
            case 60: goto label13;
            case 61: goto label13;
            case 62: goto label13;
            case 63: goto label13;
            case 64: goto label13;
            case 65: goto label13;
            case 66: goto label13;
            case 67: goto label13;
            case 68: goto label13;
            case 69: goto label13;
            case 70: goto label13;
            case 71: goto label13;
            case 72: goto label13;
            case 73: goto label13;
            case 74: goto label13;
            case 75: goto label13;
            case 76: goto label13;
            case 77: goto label13;
            case 78: goto label13;
            case 79: goto label13;
            case 80: goto label13;
            case 81: goto label13;
            case 82: goto label13;
            case 83: goto label13;
            case 84: goto label13;
            case 85: goto label13;
            case 86: goto label13;
            case 87: goto label13;
            case 88: goto label13;
            case 89: goto label13;
            case 90: goto label13;
            case 91: goto label04;
            case 92: goto label13;
            case 93: goto label05;
            default: goto label13;
        };

     label02:
        r0.<org.apache.batik.parser.AbstractScanner: int type> = 0;

        return;

     label03:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 2;

        return;

     label04:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 3;

        return;

     label05:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 4;

        return;

     label06:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 5;

        return;

     label07:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 6;

        return;

     label08:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = 9;

        return;

     label09:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        $i4 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $c5 = (char) $i4;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c5);

        if $z0 != 0 goto label09;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: void nextToken()>();

        return;

     label10:
        $i2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int string1()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = $i2;

        return;

     label11:
        $i3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int string2()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = $i3;

        return;

     label12:
        $i1 = virtualinvoke r0.<org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int number()>();

        r0.<org.apache.batik.parser.AbstractScanner: int type> = $i1;

        return;

     label13:
        $i6 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $c7 = (char) $i6;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameFirstCharacter(char)>($c7);

        if $z1 == 0 goto label16;

     label14:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        $i10 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $i15 = (int) -1;

        if $i10 == $i15 goto label15;

        $i11 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        if $i11 == 58 goto label15;

        $i12 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $c13 = (char) $i12;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c13);

        if $z2 != 0 goto label14;

     label15:
        r0.<org.apache.batik.parser.AbstractScanner: int type> = 1;

        return;

     label16:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        $r6 = new org.apache.batik.parser.ParseException;

        $r2 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r2.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        $r3 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i9 = virtualinvoke $r3.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r6.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,int,int)>("identifier.character", $i8, $i9);

        throw $r6;

     label17:
        $r4 := @caughtexception;

        $r7 = new org.apache.batik.parser.ParseException;

        specialinvoke $r7.<org.apache.batik.parser.ParseException: void <init>(java.lang.Exception)>($r4);

        throw $r7;

        catch java.io.IOException from label01 to label17 with label17;
    }

    protected int string1() throws java.io.IOException
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        org.apache.batik.util.io.NormalizingReader $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.parser.ParseException $r1;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        r0.<org.apache.batik.parser.AbstractScanner: int start> = $i0;

        goto label1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case -1: goto label2;
            case 39: goto label3;
            default: goto label4;
        };

     label2:
        $r1 = new org.apache.batik.parser.ParseException;

        $r2 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        $r3 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r3.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r1.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,int,int)>("eof", $i2, $i3);

        throw $r1;

     label3:
        goto label5;

     label4:
        goto label1;

     label5:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        return 7;
    }

    protected int string2() throws java.io.IOException
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        org.apache.batik.util.io.NormalizingReader $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.parser.ParseException $r1;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        r0.<org.apache.batik.parser.AbstractScanner: int start> = $i0;

        goto label1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case -1: goto label2;
            case 34: goto label3;
            default: goto label4;
        };

     label2:
        $r1 = new org.apache.batik.parser.ParseException;

        $r2 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        $r3 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r3.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r1.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,int,int)>("eof", $i2, $i3);

        throw $r1;

     label3:
        goto label5;

     label4:
        goto label1;

     label5:
        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        return 7;
    }

    protected int number() throws java.io.IOException
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        org.apache.batik.util.io.NormalizingReader $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.batik.parser.ParseException $r1;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        goto label1;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        tableswitch($i0)
        {
            case 46: goto label2;
            case 47: goto label5;
            case 48: goto label6;
            case 49: goto label6;
            case 50: goto label6;
            case 51: goto label6;
            case 52: goto label6;
            case 53: goto label6;
            case 54: goto label6;
            case 55: goto label6;
            case 56: goto label6;
            case 57: goto label6;
            default: goto label5;
        };

     label2:
        $i1 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        tableswitch($i1)
        {
            case 48: goto label3;
            case 49: goto label3;
            case 50: goto label3;
            case 51: goto label3;
            case 52: goto label3;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label3;
            case 56: goto label3;
            case 57: goto label3;
            default: goto label4;
        };

     label3:
        $i2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int dotNumber()>();

        return $i2;

     label4:
        $r1 = new org.apache.batik.parser.ParseException;

        $r2 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r2.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        $r3 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r1.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,int,int)>("character", $i3, $i4);

        throw $r1;

     label5:
        goto label7;

     label6:
        goto label1;

     label7:
        return 8;
    }

    protected int dotNumber() throws java.io.IOException
    {
        org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner r0;
        int $i0;

        r0 := @this: org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner;

        goto label1;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        tableswitch($i0)
        {
            case 48: goto label3;
            case 49: goto label3;
            case 50: goto label3;
            case 51: goto label3;
            case 52: goto label3;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label3;
            case 56: goto label3;
            case 57: goto label3;
            default: goto label2;
        };

     label2:
        goto label4;

     label3:
        goto label1;

     label4:
        return 8;
    }

    public static void <clinit>()
    {
        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int ASTERISK> = 9;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int NUMBER> = 8;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int STRING> = 7;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int RIGHT_PARENTHESIS> = 6;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int LEFT_PARENTHESIS> = 5;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int RIGHT_SQUARE_BRACKET> = 4;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int LEFT_SQUARE_BRACKET> = 3;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int COLON> = 2;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int NAME> = 1;

        <org.apache.batik.bridge.svg12.XPathSubsetContentSelector$Scanner: int EOF> = 0;

        return;
    }
}
