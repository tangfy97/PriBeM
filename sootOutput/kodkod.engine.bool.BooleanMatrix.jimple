public final class kodkod.engine.bool.BooleanMatrix extends java.lang.Object implements java.lang.Iterable, java.lang.Cloneable
{
    private final kodkod.engine.bool.Dimensions dims;
    private final kodkod.engine.bool.BooleanFactory factory;
    private final kodkod.util.ints.SparseSequence cells;

    private void <init>(kodkod.engine.bool.Dimensions, kodkod.engine.bool.BooleanFactory, kodkod.util.ints.SparseSequence)
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanFactory r2;
        kodkod.engine.bool.Dimensions r1;
        kodkod.util.ints.SparseSequence r3;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r2 := @parameter1: kodkod.engine.bool.BooleanFactory;

        r3 := @parameter2: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims> = r1;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory> = r2;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = r3;

        return;
    }

    private void <init>(kodkod.engine.bool.Dimensions, kodkod.engine.bool.BooleanFactory, kodkod.util.ints.SparseSequence, kodkod.util.ints.SparseSequence)
    {
        kodkod.engine.bool.BooleanConstant $r10;
        kodkod.engine.bool.BooleanFactory r2;
        kodkod.util.ints.IntSet $r11;
        kodkod.util.ints.HomogenousSequence $r9;
        kodkod.util.ints.RangeSequence $r7;
        kodkod.util.ints.SparseSequence r3, r5;
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.util.ints.TreeSequence $r8;
        int $i0;
        kodkod.engine.bool.Dimensions r1;
        java.lang.Class $r4, $r6;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r2 := @parameter1: kodkod.engine.bool.BooleanFactory;

        r3 := @parameter2: kodkod.util.ints.SparseSequence;

        r5 := @parameter3: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims> = r1;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory> = r2;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 != $r6 goto label1;

        if $r4 != class "Lkodkod/util/ints/RangeSequence;" goto label2;

     label1:
        $r7 = new kodkod.util.ints.RangeSequence;

        specialinvoke $r7.<kodkod.util.ints.RangeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r7;

        goto label4;

     label2:
        if $r4 != class "Lkodkod/util/ints/HomogenousSequence;" goto label3;

        $r9 = new kodkod.util.ints.HomogenousSequence;

        $r10 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        $i0 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r11 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i0);

        specialinvoke $r9.<kodkod.util.ints.HomogenousSequence: void <init>(java.lang.Object,kodkod.util.ints.IntSet)>($r10, $r11);

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r9;

        goto label4;

     label3:
        $r8 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r8.<kodkod.util.ints.TreeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r8;

     label4:
        return;
    }

    private transient void <init>(kodkod.engine.bool.Dimensions, kodkod.engine.bool.BooleanMatrix, kodkod.engine.bool.BooleanMatrix[])
    {
        kodkod.engine.bool.BooleanConstant $r15;
        kodkod.util.ints.HomogenousSequence $r14;
        byte $b1, b2, $b5, $b6;
        kodkod.util.ints.TreeSequence $r13;
        int $i0, i3, $i4;
        kodkod.engine.bool.Dimensions r1, $r12;
        boolean $z0;
        kodkod.engine.bool.BooleanMatrix[] r6;
        kodkod.engine.bool.BooleanFactory $r3, $r8, $r9;
        kodkod.util.ints.IntSet $r16;
        kodkod.util.ints.RangeSequence $r17;
        kodkod.util.ints.SparseSequence $r4, $r10;
        kodkod.engine.bool.BooleanMatrix r0, r2, r7;
        java.lang.Class $r5, $r11;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r2 := @parameter1: kodkod.engine.bool.BooleanMatrix;

        r6 := @parameter2: kodkod.engine.bool.BooleanMatrix[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims> = r1;

        $r3 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory> = $r3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        $r4 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 != class "Lkodkod/util/ints/HomogenousSequence;" goto label01;

        $b1 = 1;

        goto label03;

     label01:
        if $r5 != class "Lkodkod/util/ints/TreeSequence;" goto label02;

        $b1 = 2;

        goto label03;

     label02:
        $b1 = 4;

     label03:
        b2 = $b1;

        i3 = 0;

        $i4 = lengthof r6;

        goto label09;

     label04:
        r7 = r6[i3];

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = r7.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r9, $r8);

        if $z0 == 0 goto label05;

        $r12 = r7.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>(r1, $r12);

     label05:
        $r10 = r7.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $b5 = b2;

        if $r11 != class "Lkodkod/util/ints/HomogenousSequence;" goto label06;

        $b6 = 1;

        goto label08;

     label06:
        if $r11 != class "Lkodkod/util/ints/TreeSequence;" goto label07;

        $b6 = 2;

        goto label08;

     label07:
        $b6 = 4;

     label08:
        b2 = $b5 | $b6;

        i3 = i3 + 1;

     label09:
        if i3 < $i4 goto label04;

        tableswitch(b2)
        {
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label10:
        $r14 = new kodkod.util.ints.HomogenousSequence;

        $r15 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        $i0 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r16 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i0);

        specialinvoke $r14.<kodkod.util.ints.HomogenousSequence: void <init>(java.lang.Object,kodkod.util.ints.IntSet)>($r15, $r16);

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r14;

        goto label13;

     label11:
        $r13 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r13.<kodkod.util.ints.TreeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r13;

        goto label13;

     label12:
        $r17 = new kodkod.util.ints.RangeSequence;

        specialinvoke $r17.<kodkod.util.ints.RangeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r17;

     label13:
        return;
    }

    void <init>(kodkod.engine.bool.Dimensions, kodkod.engine.bool.BooleanFactory)
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanFactory r2;
        kodkod.engine.bool.Dimensions r1;
        kodkod.util.ints.RangeSequence $r3;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r2 := @parameter1: kodkod.engine.bool.BooleanFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims> = r1;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory> = r2;

        $r3 = new kodkod.util.ints.RangeSequence;

        specialinvoke $r3.<kodkod.util.ints.RangeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r3;

        return;
    }

    void <init>(kodkod.engine.bool.Dimensions, kodkod.engine.bool.BooleanFactory, kodkod.util.ints.IntSet, kodkod.util.ints.IntSet)
    {
        kodkod.engine.bool.BooleanConstant $r7, $r9;
        kodkod.util.ints.HomogenousSequence $r11;
        kodkod.util.ints.IntIterator $r5;
        int $i0, $i1, $i2, $i3;
        kodkod.engine.bool.Dimensions r1;
        boolean $z0;
        kodkod.engine.bool.BooleanFactory r2;
        kodkod.util.ints.IntSet r3, r4;
        kodkod.util.ints.RangeSequence $r13;
        kodkod.util.ints.ArraySequence $r12;
        kodkod.util.ints.SparseSequence $r6;
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.util.ints.AbstractSparseSequence $r10;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r2 := @parameter1: kodkod.engine.bool.BooleanFactory;

        r4 := @parameter2: kodkod.util.ints.IntSet;

        r3 := @parameter3: kodkod.util.ints.IntSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims> = r1;

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory> = r2;

        $i0 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int size()>();

        $i1 = interfaceinvoke r4.<kodkod.util.ints.IntSet: int size()>();

        if $i0 != $i1 goto label1;

        $r11 = new kodkod.util.ints.HomogenousSequence;

        $r9 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        specialinvoke $r11.<kodkod.util.ints.HomogenousSequence: void <init>(java.lang.Object,kodkod.util.ints.IntSet)>($r9, r3);

        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r11;

        goto label7;

     label1:
        if $i0 == 0 goto label2;

        $i3 = $i1 / $i0;

        if $i3 < 2 goto label3;

     label2:
        $r12 = new kodkod.util.ints.ArraySequence;

        $r10 = $r12;

        specialinvoke $r12.<kodkod.util.ints.ArraySequence: void <init>(kodkod.util.ints.IntSet)>(r4);

        goto label4;

     label3:
        $r13 = new kodkod.util.ints.RangeSequence;

        $r10 = $r13;

        specialinvoke $r13.<kodkod.util.ints.RangeSequence: void <init>()>();

     label4:
        r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells> = $r10;

        $r5 = interfaceinvoke r3.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label6;

     label5:
        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i2 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: int next()>();

        $r7 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        interfaceinvoke $r6.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i2, $r7);

     label6:
        $z0 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

     label7:
        return;
    }

    public final kodkod.engine.bool.Dimensions dimensions()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.Dimensions $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        return $r1;
    }

    public final kodkod.engine.bool.BooleanFactory factory()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanFactory $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        return $r1;
    }

    public final int density()
    {
        int $i0;
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: int size()>();

        return $i0;
    }

    public final java.util.Iterator iterator()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        java.util.Iterator $r2;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        return $r2;
    }

    public final kodkod.util.ints.IntSet denseIndices()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.util.ints.SparseSequence $r1;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        return $r2;
    }

    private final kodkod.engine.bool.BooleanValue maskNull(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanMatrix r1;
        kodkod.engine.bool.BooleanValue r0, $r2;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        r0 := @parameter0: kodkod.engine.bool.BooleanValue;

        if r0 != null goto label1;

        $r2 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    private final kodkod.engine.bool.BooleanValue fastGet(int)
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanValue $r3, $r4;
        int i0;
        java.lang.Object $r2;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i0);

        $r3 = (kodkod.engine.bool.BooleanValue) $r2;

        $r4 = specialinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue maskNull(kodkod.engine.bool.BooleanValue)>($r3);

        return $r4;
    }

    public final kodkod.engine.bool.BooleanValue get(int)
    {
        java.lang.IndexOutOfBoundsException $r6;
        kodkod.engine.bool.BooleanValue $r4, $r5;
        kodkod.util.ints.SparseSequence $r2;
        kodkod.engine.bool.BooleanMatrix r0;
        int i0;
        kodkod.engine.bool.Dimensions $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $z0 = virtualinvoke $r1.<kodkod.engine.bool.Dimensions: boolean validate(int)>(i0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid index.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r2 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r3 = interfaceinvoke $r2.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i0);

        $r4 = (kodkod.engine.bool.BooleanValue) $r3;

        $r5 = specialinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue maskNull(kodkod.engine.bool.BooleanValue)>($r4);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanMatrix not()
    {
        kodkod.engine.bool.BooleanValue r9, $r12;
        kodkod.engine.bool.BooleanConstant $r10, $r13;
        int $i0, i1;
        kodkod.engine.bool.Dimensions $r5, $r6;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.util.ints.SparseSequence $r2, $r3, $r7, $r11, $r14;
        kodkod.engine.bool.BooleanMatrix $r0, r1;
        java.lang.Object $r8;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        $r0 = new kodkod.engine.bool.BooleanMatrix;

        $r5 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r3 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r5, $r4, $r3, $r2);

        i1 = 0;

        $r6 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r6.<kodkod.engine.bool.Dimensions: int capacity()>();

        goto label4;

     label1:
        $r7 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r8 = interfaceinvoke $r7.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i1);

        r9 = (kodkod.engine.bool.BooleanValue) $r8;

        if r9 != null goto label2;

        $r14 = $r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r13 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        interfaceinvoke $r14.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i1, $r13);

        goto label3;

     label2:
        $r10 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r9 == $r10 goto label3;

        $r11 = $r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r12 = virtualinvoke r9.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        interfaceinvoke $r11.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i1, $r12);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label1;

        return $r0;
    }

    private static final void checkFactory(kodkod.engine.bool.BooleanFactory, kodkod.engine.bool.BooleanFactory)
    {
        kodkod.engine.bool.BooleanFactory r0, r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter1: kodkod.engine.bool.BooleanFactory;

        if r0 == r1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible factories: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    private static final void checkDimensions(kodkod.engine.bool.Dimensions, kodkod.engine.bool.Dimensions)
    {
        java.lang.IllegalArgumentException $r2;
        kodkod.engine.bool.Dimensions r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: kodkod.engine.bool.Dimensions;

        r1 := @parameter1: kodkod.engine.bool.Dimensions;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible dimensions: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    public final kodkod.engine.bool.BooleanMatrix and(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue r17, $r20, $r21;
        kodkod.util.ints.IndexedEntry r15;
        int $i0, $i1;
        kodkod.engine.bool.Dimensions $r4, $r5, $r10;
        boolean $z0;
        java.util.Iterator $r13;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r9, $r18;
        kodkod.util.ints.SparseSequence $r7, $r8, r11, $r12;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r6;
        java.lang.Object $r14, $r16, $r19;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r6 = new kodkod.engine.bool.BooleanMatrix;

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r7 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r6.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r10, $r9, $r8, $r7);

        r11 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r12 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r13 = interfaceinvoke $r12.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.util.ints.IndexedEntry) $r14;

        $i0 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: int index()>();

        $r16 = interfaceinvoke r11.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>($i0);

        r17 = (kodkod.engine.bool.BooleanValue) $r16;

        if r17 == null goto label2;

        $i1 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: int index()>();

        $r18 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r19 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r20 = (kodkod.engine.bool.BooleanValue) $r19;

        $r21 = virtualinvoke $r18.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r20, r17);

        specialinvoke $r6.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i1, $r21);

     label2:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r6;
    }

    public final transient kodkod.engine.bool.BooleanMatrix and(kodkod.engine.bool.BooleanMatrix[])
    {
        kodkod.engine.bool.Operator$Nary $r9;
        kodkod.engine.bool.BooleanValue $r11, $r14, $r15, $r18;
        kodkod.engine.bool.BooleanConstant $r16;
        kodkod.engine.bool.BooleanAccumulator $r12;
        kodkod.util.ints.IndexedEntry r7;
        int i0, $i1, $i2, i3;
        kodkod.engine.bool.Dimensions $r3;
        boolean $z0, $z1;
        kodkod.engine.bool.BooleanMatrix[] r2;
        java.util.Iterator $r5;
        kodkod.engine.bool.BooleanFactory $r17;
        kodkod.engine.bool.BooleanValue[] $r8;
        kodkod.util.ints.SparseSequence $r4;
        kodkod.engine.bool.BooleanMatrix $r0, r1, r13;
        java.lang.Object $r6, $r10;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        r2 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        $r0 = new kodkod.engine.bool.BooleanMatrix;

        $r3 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanMatrix,kodkod.engine.bool.BooleanMatrix[])>($r3, r1, r2);

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label6;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kodkod.util.ints.IndexedEntry) $r6;

        $r9 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r8 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r10 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r11 = (kodkod.engine.bool.BooleanValue) $r10;

        $r8[0] = $r11;

        $r12 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r9, $r8);

        i3 = 0;

        i0 = lengthof r2;

        goto label4;

     label2:
        r13 = r2[i3];

        $i1 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: int index()>();

        $r14 = specialinvoke r13.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i1);

        $r15 = virtualinvoke $r12.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r14);

        $r16 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r15 != $r16 goto label3;

        goto label5;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i0 goto label2;

     label5:
        $z0 = virtualinvoke $r12.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z0 != 0 goto label6;

        $i2 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: int index()>();

        $r17 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r18 = virtualinvoke $r17.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r12);

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i2, $r18);

     label6:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r0;
    }

    public final kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue r17, $r20, $r21, $r23, $r29;
        kodkod.engine.bool.Dimensions $r4, $r5, $r10;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r9, $r18;
        kodkod.util.ints.IndexedEntry r30, r31;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Iterator $r13, $r25;
        kodkod.util.ints.SparseSequence $r7, $r8, r11, $r12, $r15, $r24, $r27;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r6;
        java.lang.Object $r14, $r16, $r19, $r22, $r26, $r28;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r6 = new kodkod.engine.bool.BooleanMatrix;

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r7 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r6.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r10, $r9, $r8, $r7);

        r11 = $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r12 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r13 = interfaceinvoke $r12.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r30 = (kodkod.util.ints.IndexedEntry) $r14;

        $r15 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i0 = interfaceinvoke r30.<kodkod.util.ints.IndexedEntry: int index()>();

        $r16 = interfaceinvoke $r15.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>($i0);

        r17 = (kodkod.engine.bool.BooleanValue) $r16;

        if r17 != null goto label2;

        $i2 = interfaceinvoke r30.<kodkod.util.ints.IndexedEntry: int index()>();

        $r22 = interfaceinvoke r30.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r23 = (kodkod.engine.bool.BooleanValue) $r22;

        interfaceinvoke r11.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i2, $r23);

        goto label3;

     label2:
        $i1 = interfaceinvoke r30.<kodkod.util.ints.IndexedEntry: int index()>();

        $r18 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r19 = interfaceinvoke r30.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r20 = (kodkod.engine.bool.BooleanValue) $r19;

        $r21 = virtualinvoke $r18.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r20, r17);

        interfaceinvoke r11.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i1, $r21);

     label3:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r24 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r25 = interfaceinvoke $r24.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r31 = (kodkod.util.ints.IndexedEntry) $r26;

        $r27 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i3 = interfaceinvoke r31.<kodkod.util.ints.IndexedEntry: int index()>();

        $z0 = interfaceinvoke $r27.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i3);

        if $z0 != 0 goto label5;

        $i4 = interfaceinvoke r31.<kodkod.util.ints.IndexedEntry: int index()>();

        $r28 = interfaceinvoke r31.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r29 = (kodkod.engine.bool.BooleanValue) $r28;

        interfaceinvoke r11.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i4, $r29);

     label5:
        $z2 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        return $r6;
    }

    public final transient kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix[])
    {
        kodkod.engine.bool.BooleanValue $r10, $r12, $r13, $r16, $r25, $r28, $r29, $r32;
        kodkod.engine.bool.BooleanConstant $r14, $r30;
        kodkod.engine.bool.Dimensions $r3;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r15, $r31;
        kodkod.engine.bool.Operator$Nary $r8, $r23;
        kodkod.engine.bool.BooleanAccumulator $r11, $r26;
        kodkod.util.ints.IndexedEntry r33, r35;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        kodkod.engine.bool.BooleanMatrix[] r2;
        java.util.Iterator $r5, $r19;
        kodkod.engine.bool.BooleanValue[] $r7, $r22;
        kodkod.util.ints.SparseSequence $r4, $r18, $r21;
        kodkod.engine.bool.BooleanMatrix $r0, r1, $r17, $r27, r34;
        java.lang.Object $r6, $r9, $r20, $r24;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        r2 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        $r0 = new kodkod.engine.bool.BooleanMatrix;

        $r3 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanMatrix,kodkod.engine.bool.BooleanMatrix[])>($r3, r1, r2);

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label06;

     label01:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r33 = (kodkod.util.ints.IndexedEntry) $r6;

        $r8 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r7 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r9 = interfaceinvoke r33.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r10 = (kodkod.engine.bool.BooleanValue) $r9;

        $r7[0] = $r10;

        $r11 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r8, $r7);

        i5 = 0;

        i6 = lengthof r2;

        goto label04;

     label02:
        r34 = r2[i5];

        $i0 = interfaceinvoke r33.<kodkod.util.ints.IndexedEntry: int index()>();

        $r12 = specialinvoke r34.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i0);

        $r13 = virtualinvoke $r11.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r12);

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r13 != $r14 goto label03;

        goto label05;

     label03:
        i5 = i5 + 1;

     label04:
        if i5 < i6 goto label02;

     label05:
        $i1 = interfaceinvoke r33.<kodkod.util.ints.IndexedEntry: int index()>();

        $r15 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r16 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r11);

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i1, $r16);

     label06:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label01;

        i7 = 0;

        i8 = lengthof r2;

        goto label15;

     label07:
        $r17 = r2[i7];

        $r18 = $r17.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r19 = interfaceinvoke $r18.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label14;

     label08:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r35 = (kodkod.util.ints.IndexedEntry) $r20;

        $r21 = $r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i2 = interfaceinvoke r35.<kodkod.util.ints.IndexedEntry: int index()>();

        $z0 = interfaceinvoke $r21.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i2);

        if $z0 == 0 goto label09;

        goto label14;

     label09:
        $r23 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r22 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r24 = interfaceinvoke r35.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r25 = (kodkod.engine.bool.BooleanValue) $r24;

        $r22[0] = $r25;

        $r26 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r23, $r22);

        i9 = i7 + 1;

        goto label12;

     label10:
        $r27 = r2[i9];

        $i3 = interfaceinvoke r35.<kodkod.util.ints.IndexedEntry: int index()>();

        $r28 = specialinvoke $r27.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i3);

        $r29 = virtualinvoke $r26.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r28);

        $r30 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r29 != $r30 goto label11;

        goto label13;

     label11:
        i9 = i9 + 1;

     label12:
        if i9 < i8 goto label10;

     label13:
        $i4 = interfaceinvoke r35.<kodkod.util.ints.IndexedEntry: int index()>();

        $r31 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r32 = virtualinvoke $r31.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r26);

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i4, $r32);

     label14:
        $z2 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label08;

        i7 = i7 + 1;

     label15:
        if i7 < i8 goto label07;

        return $r0;
    }

    public final kodkod.engine.bool.BooleanMatrix cross(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue $r24, $r26, $r27;
        kodkod.engine.bool.BooleanConstant $r28;
        kodkod.engine.bool.Dimensions $r5, $r6, $r7, $r13;
        boolean $z0, $z1, $z2, $z3;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r10, $r22;
        kodkod.util.ints.IndexedEntry r17, r21;
        int $i0, $i1, i2, $i3, $i4;
        java.util.Iterator $r15, $r19;
        kodkod.util.ints.SparseSequence $r8, $r9, $r11, $r12, $r14, $r18, $r29;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r4;
        java.lang.Object $r16, $r20, $r23, $r25;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r4 = new kodkod.engine.bool.BooleanMatrix;

        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r5 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions cross(kodkod.engine.bool.Dimensions)>($r5);

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r8 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r4.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r7, $r10, $r9, $r8);

        $r11 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r11.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r12 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z1 = interfaceinvoke $r12.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return $r4;

     label2:
        $r13 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r13.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r14 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r15 = interfaceinvoke $r14.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label6;

     label3:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (kodkod.util.ints.IndexedEntry) $r16;

        $i1 = interfaceinvoke r17.<kodkod.util.ints.IndexedEntry: int index()>();

        i2 = $i0 * $i1;

        $r18 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r19 = interfaceinvoke $r18.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (kodkod.util.ints.IndexedEntry) $r20;

        $r22 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r23 = interfaceinvoke r17.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r24 = (kodkod.engine.bool.BooleanValue) $r23;

        $r25 = interfaceinvoke r21.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r26 = (kodkod.engine.bool.BooleanValue) $r25;

        $r27 = virtualinvoke $r22.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r24, $r26);

        $r28 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r27 == $r28 goto label5;

        $r29 = $r4.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i3 = interfaceinvoke r21.<kodkod.util.ints.IndexedEntry: int index()>();

        $i4 = i2 + $i3;

        interfaceinvoke $r29.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i4, $r27);

     label5:
        $z3 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

     label6:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return $r4;
    }

    private static int nextCross(kodkod.engine.bool.BooleanMatrix[], kodkod.util.ints.IntIterator[], int[], int)
    {
        kodkod.util.ints.IntIterator $r1, $r6, $r8, $r11;
        int[] r7;
        kodkod.engine.bool.Dimensions $r10;
        kodkod.util.ints.IntIterator[] r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, $i19, $i21;
        kodkod.engine.bool.BooleanMatrix[] r2;
        kodkod.util.ints.IntSet $r5;
        kodkod.util.ints.SparseSequence $r4;
        kodkod.engine.bool.BooleanMatrix $r3, $r9;

        r2 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        r0 := @parameter1: kodkod.util.ints.IntIterator[];

        r7 := @parameter2: int[];

        i13 := @parameter3: int;

        i14 = 1;

        $i0 = lengthof r0;

        i15 = $i0 - 1;

        goto label3;

     label1:
        $r1 = r0[i15];

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i16 = r7[i15];

        $r11 = r0[i15];

        $i7 = interfaceinvoke $r11.<kodkod.util.ints.IntIterator: int next()>();

        r7[i15] = $i7;

        $i8 = i14 * i16;

        $i11 = i13 - $i8;

        $i9 = r7[i15];

        $i10 = i14 * $i9;

        $i12 = $i11 + $i10;

        return $i12;

     label2:
        $r3 = r2[i15];

        $r4 = $r3.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        $r6 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        r0[i15] = $r6;

        i17 = r7[i15];

        $r8 = r0[i15];

        $i1 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: int next()>();

        r7[i15] = $i1;

        $i2 = i14 * i17;

        $i5 = i13 - $i2;

        $i3 = r7[i15];

        $i4 = i14 * $i3;

        i13 = $i5 + $i4;

        $r9 = r2[i15];

        $r10 = $r9.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i6 = virtualinvoke $r10.<kodkod.engine.bool.Dimensions: int capacity()>();

        i14 = i14 * $i6;

        $i19 = (int) -1;

        i15 = i15 + $i19;

     label3:
        if i15 >= 0 goto label1;

        $i21 = (int) -1;

        return $i21;
    }

    private static int initCross(kodkod.engine.bool.BooleanMatrix[], kodkod.util.ints.IntIterator[], int[])
    {
        kodkod.util.ints.IntIterator $r5, $r7;
        int[] r6;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9;
        kodkod.engine.bool.Dimensions $r9;
        kodkod.util.ints.IntIterator[] r1;
        kodkod.engine.bool.BooleanMatrix[] r0;
        kodkod.util.ints.IntSet $r4;
        kodkod.util.ints.SparseSequence $r3;
        kodkod.engine.bool.BooleanMatrix $r2, $r8;

        r0 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        r1 := @parameter1: kodkod.util.ints.IntIterator[];

        r6 := @parameter2: int[];

        i5 = 1;

        i6 = 0;

        $i0 = lengthof r0;

        i7 = $i0 - 1;

        goto label2;

     label1:
        $r2 = r0[i7];

        $r3 = $r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        r1[i7] = $r5;

        $r7 = r1[i7];

        $i1 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: int next()>();

        r6[i7] = $i1;

        $i2 = r6[i7];

        $i3 = i5 * $i2;

        i6 = i6 + $i3;

        $r8 = r0[i7];

        $r9 = $r8.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i4 = virtualinvoke $r9.<kodkod.engine.bool.Dimensions: int capacity()>();

        i5 = i5 * $i4;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label2:
        if i7 >= 0 goto label1;

        return i6;
    }

    public final transient kodkod.engine.bool.BooleanMatrix cross(kodkod.engine.bool.BooleanMatrix[])
    {
        kodkod.engine.bool.BooleanValue $r14, $r17, $r18, $r21;
        kodkod.engine.bool.BooleanConstant $r19;
        int[] r25;
        kodkod.engine.bool.Dimensions $r3, $r6, r22;
        boolean $z0, $z1, $z2, z3, $z4;
        kodkod.util.ints.IntIterator[] r24;
        kodkod.engine.bool.BooleanFactory $r20;
        kodkod.engine.bool.Operator$Nary $r12;
        kodkod.engine.bool.BooleanAccumulator $r15;
        kodkod.util.ints.IndexedEntry r10;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i15;
        kodkod.engine.bool.BooleanMatrix[] r2;
        java.util.Iterator $r8;
        kodkod.engine.bool.BooleanValue[] $r11;
        kodkod.util.ints.SparseSequence $r1, $r4, $r7;
        kodkod.engine.bool.BooleanMatrix r0, $r16, r23, $r26;
        java.lang.Object $r9, $r13;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r2 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        r22 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        z3 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        i9 = 0;

        i10 = lengthof r2;

        goto label04;

     label01:
        r23 = r2[i9];

        $r3 = r23.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        r22 = virtualinvoke r22.<kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions cross(kodkod.engine.bool.Dimensions)>($r3);

        if z3 != 0 goto label02;

        $r4 = r23.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        $z4 = 0;

        goto label03;

     label02:
        $z4 = 1;

     label03:
        z3 = $z4;

        i9 = i9 + 1;

     label04:
        if i9 < i10 goto label01;

        $r26 = new kodkod.engine.bool.BooleanMatrix;

        specialinvoke $r26.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanMatrix,kodkod.engine.bool.BooleanMatrix[])>(r22, r0, r2);

        if z3 == 0 goto label05;

        return $r26;

     label05:
        $i0 = lengthof r2;

        r24 = newarray (kodkod.util.ints.IntIterator)[$i0];

        $i1 = lengthof r2;

        r25 = newarray (int)[$i1];

        $i2 = virtualinvoke r22.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i3 = virtualinvoke $r6.<kodkod.engine.bool.Dimensions: int capacity()>();

        i11 = $i2 / $i3;

        $r7 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r8 = interfaceinvoke $r7.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label14;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kodkod.util.ints.IndexedEntry) $r9;

        $i4 = interfaceinvoke r10.<kodkod.util.ints.IndexedEntry: int index()>();

        i5 = i11 * $i4;

        i12 = staticinvoke <kodkod.engine.bool.BooleanMatrix: int initCross(kodkod.engine.bool.BooleanMatrix[],kodkod.util.ints.IntIterator[],int[])>(r2, r24, r25);

        goto label13;

     label07:
        $r12 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r11 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r13 = interfaceinvoke r10.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r14 = (kodkod.engine.bool.BooleanValue) $r13;

        $r11[0] = $r14;

        $r15 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r12, $r11);

        $i6 = lengthof r2;

        i13 = $i6 - 1;

        goto label10;

     label08:
        $r16 = r2[i13];

        $i7 = r25[i13];

        $r17 = specialinvoke $r16.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i7);

        $r18 = virtualinvoke $r15.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r17);

        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r18 != $r19 goto label09;

        goto label11;

     label09:
        $i15 = (int) -1;

        i13 = i13 + $i15;

     label10:
        if i13 >= 0 goto label08;

     label11:
        $z2 = virtualinvoke $r15.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z2 != 0 goto label12;

        $i8 = i5 + i12;

        $r20 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r21 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r15);

        specialinvoke $r26.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i8, $r21);

     label12:
        i12 = staticinvoke <kodkod.engine.bool.BooleanMatrix: int nextCross(kodkod.engine.bool.BooleanMatrix[],kodkod.util.ints.IntIterator[],int[],int)>(r2, r24, r25, i12);

     label13:
        if i12 >= 0 goto label07;

     label14:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label06;

        return $r26;
    }

    private final void fastSet(int, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanMatrix r2;
        kodkod.engine.bool.BooleanValue r0;
        kodkod.engine.bool.BooleanConstant $r1;
        int i0;
        kodkod.util.ints.SparseSequence $r3, $r4;

        r2 := @this: kodkod.engine.bool.BooleanMatrix;

        i0 := @parameter0: int;

        r0 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r1 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r0 != $r1 goto label1;

        $r4 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.lang.Object remove(int)>(i0);

        goto label2;

     label1:
        $r3 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        interfaceinvoke $r3.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i0, r0);

     label2:
        return;
    }

    public final kodkod.engine.bool.BooleanMatrix dot(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.Operator$Nary $r34;
        kodkod.engine.bool.BooleanAccumulator $r33, $r35, $r45;
        kodkod.util.ints.IndexedEntry r24, r47, r49;
        kodkod.util.ints.SparseSequence $r8, $r9, $r11, $r12, r13, $r16, $r21, $r37, $r42;
        kodkod.engine.bool.BooleanValue r20, $r27, $r28, $r46, r48;
        kodkod.engine.bool.BooleanConstant $r29, $r30, $r32, $r36, $r41;
        kodkod.engine.bool.Dimensions $r5, $r6, $r7, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r10, $r25, $r43;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, i12, $i13;
        java.util.Iterator $r17, $r22, $r38;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r4;
        java.lang.Object $r18, $r19, $r23, $r26, $r31, $r39, $r40, $r44;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r4 = new kodkod.engine.bool.BooleanMatrix;

        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r5 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions dot(kodkod.engine.bool.Dimensions)>($r5);

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r8 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r4.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r7, $r10, $r9, $r8);

        $r11 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r11.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $r12 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z1 = interfaceinvoke $r12.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z1 == 0 goto label02;

     label01:
        return $r4;

     label02:
        r13 = $r4.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r14 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r14.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        $r15 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i1 = virtualinvoke $r15.<kodkod.engine.bool.Dimensions: int capacity()>();

        i2 = $i1 / $i0;

        $r16 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r17 = interfaceinvoke $r16.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label08;

     label03:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r47 = (kodkod.util.ints.IndexedEntry) $r18;

        $i3 = interfaceinvoke r47.<kodkod.util.ints.IndexedEntry: int index()>();

        $r19 = interfaceinvoke r47.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        r20 = (kodkod.engine.bool.BooleanValue) $r19;

        $i4 = $i3 % $i0;

        i5 = $i4 * i2;

        $i6 = i5 + i2;

        i7 = $i6 - 1;

        $r21 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r22 = interfaceinvoke $r21.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator(int,int)>(i5, i7);

        goto label07;

     label04:
        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (kodkod.util.ints.IndexedEntry) $r23;

        $r25 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r26 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r27 = (kodkod.engine.bool.BooleanValue) $r26;

        $r28 = virtualinvoke $r25.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r20, $r27);

        $r29 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r28 == $r29 goto label07;

        $i8 = $i3 / $i0;

        $i9 = $i8 * i2;

        $i10 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: int index()>();

        $i11 = $i10 % i2;

        i12 = $i9 + $i11;

        $r30 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r28 != $r30 goto label05;

        $r36 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        interfaceinvoke r13.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i12, $r36);

        goto label07;

     label05:
        $r31 = interfaceinvoke r13.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i12);

        r48 = (kodkod.engine.bool.BooleanValue) $r31;

        $r32 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r48 == $r32 goto label07;

        if r48 != null goto label06;

        $r34 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r35 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r34);

        r48 = $r35;

        interfaceinvoke r13.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i12, $r35);

     label06:
        $r33 = (kodkod.engine.bool.BooleanAccumulator) r48;

        virtualinvoke $r33.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r28);

     label07:
        $z3 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label04;

     label08:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label03;

        $r37 = $r4.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r38 = interfaceinvoke $r37.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r49 = (kodkod.util.ints.IndexedEntry) $r39;

        $r40 = interfaceinvoke r49.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r41 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r40 == $r41 goto label10;

        $r42 = $r4.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i13 = interfaceinvoke r49.<kodkod.util.ints.IndexedEntry: int index()>();

        $r43 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r44 = interfaceinvoke r49.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r45 = (kodkod.engine.bool.BooleanAccumulator) $r44;

        $r46 = virtualinvoke $r43.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r45);

        interfaceinvoke $r42.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i13, $r46);

     label10:
        $z4 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label09;

        return $r4;
    }

    public final kodkod.engine.bool.BooleanValue subset(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.Operator$Nary $r6;
        kodkod.engine.bool.BooleanValue $r14, $r15, $r16, $r17, $r18, $r22;
        kodkod.engine.bool.BooleanConstant $r19, $r20;
        kodkod.engine.bool.BooleanAccumulator $r7;
        kodkod.util.ints.IndexedEntry r11;
        int $i0;
        kodkod.engine.bool.Dimensions $r4, $r5;
        boolean $z0;
        java.util.Iterator $r9;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r12, $r21;
        kodkod.util.ints.SparseSequence $r8;
        kodkod.engine.bool.BooleanMatrix r0, r1;
        java.lang.Object $r10, $r13;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r6 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r7 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r6);

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r9 = interfaceinvoke $r8.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.util.ints.IndexedEntry) $r10;

        $r12 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r13 = interfaceinvoke r11.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r14 = (kodkod.engine.bool.BooleanValue) $r13;

        $r15 = virtualinvoke $r14.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $i0 = interfaceinvoke r11.<kodkod.util.ints.IndexedEntry: int index()>();

        $r16 = specialinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i0);

        $r17 = virtualinvoke $r12.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r15, $r16);

        $r18 = virtualinvoke $r7.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r17);

        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r18 != $r19 goto label2;

        $r20 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r20;

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r21 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r22 = virtualinvoke $r21.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r7);

        return $r22;
    }

    public final kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanMatrix r0, r1;
        kodkod.engine.bool.BooleanValue $r3, $r4, $r5;
        kodkod.engine.bool.BooleanFactory $r2;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r2 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r3 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue subset(kodkod.engine.bool.BooleanMatrix)>(r1);

        $r4 = virtualinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue subset(kodkod.engine.bool.BooleanMatrix)>(r0);

        $r5 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r3, $r4);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanMatrix difference(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue $r17, $r18, $r19, $r20;
        kodkod.util.ints.IndexedEntry r14;
        int $i0, $i1;
        kodkod.engine.bool.Dimensions $r4, $r5, $r10;
        boolean $z0;
        java.util.Iterator $r12;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r9, $r15;
        kodkod.util.ints.SparseSequence $r7, $r8, $r11;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r6;
        java.lang.Object $r13, $r16;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r6 = new kodkod.engine.bool.BooleanMatrix;

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r7 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r6.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r10, $r9, $r8, $r7);

        $r11 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r12 = interfaceinvoke $r11.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.util.ints.IndexedEntry) $r13;

        $i0 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r15 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r16 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r17 = (kodkod.engine.bool.BooleanValue) $r16;

        $i1 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r18 = specialinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i1);

        $r19 = virtualinvoke $r18.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r20 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r17, $r19);

        specialinvoke $r6.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i0, $r20);

     label2:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r6;
    }

    public final kodkod.engine.bool.BooleanMatrix closure()
    {
        kodkod.util.ints.IndexedEntry r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        kodkod.engine.bool.Dimensions $r1, $r3, $r5;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        kodkod.util.ints.SparseSequence $r4, $r6, $r7;
        kodkod.engine.bool.BooleanMatrix r0, $r8, $r9, r10, $r12;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r1.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        if $i0 != 2 goto label1;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $z0 = virtualinvoke $r3.<kodkod.engine.bool.Dimensions: boolean isSquare()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("#this.diensions != 2 || !this.dimensions.square()");

        throw $r2;

     label2:
        $r4 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z1 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r9;

     label3:
        r10 = r0;

        i6 = 0;

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i1 = virtualinvoke $r5.<kodkod.engine.bool.Dimensions: int dimension(int)>(1);

        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        r11 = interfaceinvoke $r6.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IndexedEntry first()>();

        goto label5;

     label4:
        i6 = i6 + 1;

        $r7 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i2 = interfaceinvoke r11.<kodkod.util.ints.IndexedEntry: int index()>();

        $i3 = $i2 / $i1;

        $i4 = $i3 + 1;

        $i5 = $i4 * $i1;

        r11 = interfaceinvoke $r7.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IndexedEntry ceil(int)>($i5);

     label5:
        if r11 != null goto label4;

        i7 = 1;

        goto label7;

     label6:
        $r8 = virtualinvoke r10.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix dot(kodkod.engine.bool.BooleanMatrix)>(r10);

        r10 = virtualinvoke r10.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)>($r8);

        i7 = i7 * 2;

     label7:
        if i7 < i6 goto label6;

        if r10 != r0 goto label8;

        $r12 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        goto label9;

     label8:
        $r12 = r10;

     label9:
        return $r12;
    }

    public final kodkod.engine.bool.BooleanMatrix transpose()
    {
        kodkod.engine.bool.BooleanValue $r15;
        kodkod.util.ints.IndexedEntry r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        kodkod.engine.bool.Dimensions $r2, $r3, $r7, $r8;
        boolean $z0;
        java.util.Iterator $r10;
        kodkod.engine.bool.BooleanFactory $r6;
        kodkod.util.ints.SparseSequence $r4, $r5, $r9, $r13;
        kodkod.engine.bool.BooleanMatrix $r0, r1;
        java.lang.Object $r11, $r14;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        $r0 = new kodkod.engine.bool.BooleanMatrix;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r3 = virtualinvoke $r2.<kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions transpose()>();

        $r6 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r3, $r6, $r5, $r4);

        $r7 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r7.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        $r8 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i1 = virtualinvoke $r8.<kodkod.engine.bool.Dimensions: int dimension(int)>(1);

        $r9 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r10 = interfaceinvoke $r9.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kodkod.util.ints.IndexedEntry) $r11;

        $r13 = $r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i2 = interfaceinvoke r12.<kodkod.util.ints.IndexedEntry: int index()>();

        $i3 = $i2 % $i1;

        $i4 = $i3 * $i0;

        $i5 = interfaceinvoke r12.<kodkod.util.ints.IndexedEntry: int index()>();

        $i6 = $i5 / $i1;

        $i7 = $i4 + $i6;

        $r14 = interfaceinvoke r12.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r15 = (kodkod.engine.bool.BooleanValue) $r14;

        interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i7, $r15);

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public final kodkod.engine.bool.BooleanMatrix choice(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue r6, r17, $r20, $r21, $r24, $r25, $r31, $r33, $r34;
        kodkod.engine.bool.BooleanConstant $r7, $r8;
        kodkod.engine.bool.Dimensions $r4, $r5, $r11;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r10, $r18, $r22, $r30;
        kodkod.util.ints.IndexedEntry r37, r38;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Iterator $r14, $r27;
        kodkod.util.ints.SparseSequence r12, $r13, $r26, $r29;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r9, $r35, $r36;
        java.lang.Object $r15, $r16, $r19, $r23, $r28, $r32;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r6 := @parameter0: kodkod.engine.bool.BooleanValue;

        r1 := @parameter1: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r7 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r6 != $r7 goto label1;

        $r36 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r36;

     label1:
        $r8 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r6 != $r8 goto label2;

        $r35 = virtualinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r35;

     label2:
        $r9 = new kodkod.engine.bool.BooleanMatrix;

        $r11 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory)>($r11, $r10);

        r12 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r13 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r14 = interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label5;

     label3:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r37 = (kodkod.util.ints.IndexedEntry) $r15;

        $i0 = interfaceinvoke r37.<kodkod.util.ints.IndexedEntry: int index()>();

        $r16 = interfaceinvoke r12.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>($i0);

        r17 = (kodkod.engine.bool.BooleanValue) $r16;

        if r17 != null goto label4;

        $i2 = interfaceinvoke r37.<kodkod.util.ints.IndexedEntry: int index()>();

        $r22 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r23 = interfaceinvoke r37.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r24 = (kodkod.engine.bool.BooleanValue) $r23;

        $r25 = virtualinvoke $r22.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r6, $r24);

        specialinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i2, $r25);

        goto label5;

     label4:
        $i1 = interfaceinvoke r37.<kodkod.util.ints.IndexedEntry: int index()>();

        $r18 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r19 = interfaceinvoke r37.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r20 = (kodkod.engine.bool.BooleanValue) $r19;

        $r21 = virtualinvoke $r18.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r6, $r20, r17);

        specialinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i1, $r21);

     label5:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r26 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r27 = interfaceinvoke $r26.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r38 = (kodkod.util.ints.IndexedEntry) $r28;

        $r29 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i3 = interfaceinvoke r38.<kodkod.util.ints.IndexedEntry: int index()>();

        $z0 = interfaceinvoke $r29.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i3);

        if $z0 != 0 goto label7;

        $i4 = interfaceinvoke r38.<kodkod.util.ints.IndexedEntry: int index()>();

        $r30 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r31 = virtualinvoke r6.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r32 = interfaceinvoke r38.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r33 = (kodkod.engine.bool.BooleanValue) $r32;

        $r34 = virtualinvoke $r30.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r31, $r33);

        specialinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i4, $r34);

     label7:
        $z2 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label6;

        return $r9;
    }

    public final kodkod.engine.bool.BooleanMatrix project(kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Int[] r2;
        kodkod.util.ints.IndexedEntry r36;
        kodkod.util.ints.SparseSequence $r6, $r7, $r22;
        kodkod.engine.bool.BooleanValue $r19, $r20, $r29, $r30, $r31, $r32, r35;
        kodkod.engine.bool.BooleanConstant $r21;
        int[] r10, r11, r12;
        kodkod.engine.bool.Dimensions $r1, $r3, $r4, $r9, $r25;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r8, $r15, $r16, $r26, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, $i24;
        java.util.Iterator $r23;
        kodkod.engine.bool.Int $r13, $r14, $r17, $r18;
        java.lang.IllegalArgumentException $r37, $r38;
        kodkod.engine.bool.BooleanMatrix r0, $r39;
        java.lang.Object $r24, $r28;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r2 := @parameter0: kodkod.engine.bool.Int[];

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $z0 = virtualinvoke $r1.<kodkod.engine.bool.Dimensions: boolean isSquare()>();

        if $z0 != 0 goto label01;

        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!this.dimensions.isSquare()");

        throw $r37;

     label01:
        i0 = lengthof r2;

        if i0 >= 1 goto label02;

        $r38 = new java.lang.IllegalArgumentException;

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("columns.length < 1");

        throw $r38;

     label02:
        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i1 = virtualinvoke $r3.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        $r4 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i1, i0);

        $r39 = new kodkod.engine.bool.BooleanMatrix;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r7 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r6 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r39.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r4, $r8, $r7, $r6);

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i2 = virtualinvoke $r9.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        r10 = newarray (int)[$i2];

        r11 = newarray (int)[i0];

        r12 = newarray (int)[i0];

        i17 = 1;

        i18 = 0;

        goto label08;

     label03:
        $r13 = r2[i18];

        $z1 = virtualinvoke $r13.<kodkod.engine.bool.Int: boolean isConstant()>();

        if $z1 == 0 goto label06;

        $r14 = r2[i18];

        $i3 = virtualinvoke $r14.<kodkod.engine.bool.Int: int value()>();

        if $i3 < 0 goto label04;

        if $i3 < $i2 goto label05;

     label04:
        return $r39;

     label05:
        $i4 = neg $i3;

        r11[i18] = $i4;

        goto label07;

     label06:
        i17 = i17 * $i2;

     label07:
        i18 = i18 + 1;

     label08:
        if i18 < i0 goto label03;

        i19 = 0;

        goto label22;

     label09:
        r35 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        i20 = 0;

        goto label12;

     label10:
        $i5 = r11[i20];

        if $i5 < 0 goto label11;

        $r16 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r17 = r2[i20];

        $r15 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $i6 = r11[i20];

        $r18 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>($i6);

        $r19 = virtualinvoke $r17.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.Int)>($r18);

        $r20 = virtualinvoke $r16.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r35, $r19);

        r35 = $r20;

        $r21 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r20 != $r21 goto label11;

        goto label21;

     label11:
        i20 = i20 + 1;

     label12:
        if i20 < i0 goto label10;

        $r22 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r23 = interfaceinvoke $r22.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label16;

     label13:
        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r36 = (kodkod.util.ints.IndexedEntry) $r24;

        $r25 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i7 = interfaceinvoke r36.<kodkod.util.ints.IndexedEntry: int index()>();

        virtualinvoke $r25.<kodkod.engine.bool.Dimensions: void convert(int,int[])>($i7, r10);

        i21 = 0;

        goto label15;

     label14:
        $i8 = r11[i21];

        $i9 = staticinvoke <java.lang.StrictMath: int abs(int)>($i8);

        $i10 = r10[$i9];

        r12[i21] = $i10;

        i21 = i21 + 1;

     label15:
        if i21 < i0 goto label14;

        $i11 = virtualinvoke $r4.<kodkod.engine.bool.Dimensions: int convert(int[])>(r12);

        $r26 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r27 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r28 = interfaceinvoke r36.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r29 = (kodkod.engine.bool.BooleanValue) $r28;

        $r30 = virtualinvoke $r27.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r29, r35);

        $r31 = specialinvoke $r39.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i11);

        $r32 = virtualinvoke $r26.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r30, $r31);

        specialinvoke $r39.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i11, $r32);

     label16:
        $z2 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label13;

        i22 = i0 - 1;

        goto label20;

     label17:
        $i12 = r11[i22];

        if $i12 < 0 goto label19;

        $i13 = r11[i22];

        $i14 = $i13 + 1;

        if $i14 != $i2 goto label18;

        r11[i22] = 0;

        goto label19;

     label18:
        $i15 = r11[i22];

        $i16 = $i15 + 1;

        r11[i22] = $i16;

        goto label21;

     label19:
        $i24 = (int) -1;

        i22 = i22 + $i24;

     label20:
        if i22 >= 0 goto label17;

     label21:
        i19 = i19 + 1;

     label22:
        if i19 < i17 goto label09;

        return $r39;
    }

    private final kodkod.engine.bool.BooleanValue nand(int, int)
    {
        kodkod.engine.bool.Operator$Nary $r0;
        kodkod.engine.bool.BooleanValue $r8, $r9, $r10, $r14;
        kodkod.engine.bool.BooleanConstant $r11, $r12;
        kodkod.engine.bool.BooleanAccumulator $r1;
        kodkod.util.ints.IndexedEntry $r6;
        int i0, i1, $i2;
        boolean $z0;
        java.util.Iterator $r4;
        kodkod.engine.bool.BooleanFactory $r13;
        kodkod.util.ints.SparseSequence $r3;
        kodkod.engine.bool.BooleanMatrix r2;
        java.lang.Object $r5, $r7;

        r2 := @this: kodkod.engine.bool.BooleanMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r1 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r0);

        $r3 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $i2 = i1 - 1;

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator(int,int)>(i0, $i2);

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kodkod.util.ints.IndexedEntry) $r5;

        $r7 = interfaceinvoke $r6.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke $r8.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r10 = virtualinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r9);

        $r11 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r10 != $r11 goto label2;

        $r12 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r12;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r13 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r14 = virtualinvoke $r13.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r1);

        return $r14;
    }

    public final kodkod.engine.bool.BooleanMatrix override(kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanValue $r21, $r24, $r25, $r26, r28;
        kodkod.engine.bool.Dimensions $r4, $r5, $r11, $r14, $r15;
        boolean $z0, $z1;
        kodkod.engine.bool.BooleanFactory $r2, $r3, $r10, $r20, $r22;
        kodkod.util.ints.IndexedEntry r19;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10, $i12;
        java.util.Iterator $r17;
        kodkod.util.ints.SparseSequence $r6, $r8, $r9, $r12, $r13, $r16;
        kodkod.engine.bool.BooleanMatrix r0, r1, $r27, $r29;
        java.lang.Object $r18, $r23;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        $r3 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkFactory(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanFactory)>($r3, $r2);

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        staticinvoke <kodkod.engine.bool.BooleanMatrix: void checkDimensions(kodkod.engine.bool.Dimensions,kodkod.engine.bool.Dimensions)>($r5, $r4);

        $r6 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r6.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r27 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r27;

     label1:
        $r29 = new kodkod.engine.bool.BooleanMatrix;

        $r11 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r10 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r8 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        specialinvoke $r29.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence,kodkod.util.ints.SparseSequence)>($r11, $r10, $r9, $r8);

        $r13 = $r29.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r12 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: void putAll(kodkod.util.ints.SparseSequence)>($r12);

        $r14 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i0 = virtualinvoke $r14.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r15 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $i1 = virtualinvoke $r15.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        i2 = $i0 / $i1;

        $i12 = (int) -1;

        i10 = $i12;

        r28 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        $r16 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r17 = interfaceinvoke $r16.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (kodkod.util.ints.IndexedEntry) $r18;

        $i3 = interfaceinvoke r19.<kodkod.util.ints.IndexedEntry: int index()>();

        i4 = $i3 / i2;

        if i10 == i4 goto label3;

        i10 = i4;

        $i9 = i4 * i2;

        $i7 = i4 + 1;

        $i8 = $i7 * i2;

        r28 = specialinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue nand(int,int)>($i9, $i8);

     label3:
        $i5 = interfaceinvoke r19.<kodkod.util.ints.IndexedEntry: int index()>();

        $r20 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $i6 = interfaceinvoke r19.<kodkod.util.ints.IndexedEntry: int index()>();

        $r21 = specialinvoke $r29.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue fastGet(int)>($i6);

        $r22 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r23 = interfaceinvoke r19.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r24 = (kodkod.engine.bool.BooleanValue) $r23;

        $r25 = virtualinvoke $r22.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r24, r28);

        $r26 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r21, $r25);

        specialinvoke $r29.<kodkod.engine.bool.BooleanMatrix: void fastSet(int,kodkod.engine.bool.BooleanValue)>($i5, $r26);

     label4:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return $r29;
    }

    public final transient kodkod.engine.bool.BooleanMatrix override(kodkod.engine.bool.BooleanMatrix[])
    {
        java.lang.Object[] $r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        kodkod.engine.bool.BooleanMatrix[] r0, $r1, r3;
        kodkod.engine.bool.BooleanMatrix r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r4 := @this: kodkod.engine.bool.BooleanMatrix;

        r0 := @parameter0: kodkod.engine.bool.BooleanMatrix[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r10 = virtualinvoke r4.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r10;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 + 1;

        $r1 = newarray (kodkod.engine.bool.BooleanMatrix)[$i2];

        $i3 = lengthof r0;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] copy(java.lang.Object[],int,java.lang.Object[],int,int)>(r0, 0, $r1, 1, $i3);

        r3 = (kodkod.engine.bool.BooleanMatrix[]) $r2;

        r3[0] = r4;

        i10 = lengthof r3;

        goto label6;

     label2:
        i4 = i10 - 1;

        i11 = 0;

        goto label4;

     label3:
        $i6 = i11 / 2;

        $r6 = r3[i11];

        $i5 = i11 + 1;

        $r5 = r3[$i5];

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix override(kodkod.engine.bool.BooleanMatrix)>($r5);

        r3[$i6] = $r7;

        i11 = i11 + 2;

     label4:
        if i11 < i4 goto label3;

        $i7 = i4 % 2;

        if $i7 != 0 goto label5;

        $i9 = i4 / 2;

        $r8 = r3[i4];

        r3[$i9] = $r8;

     label5:
        $i8 = i10 / 2;

        i10 = i10 - $i8;

     label6:
        if i10 > 1 goto label2;

        $r9 = r3[0];

        return $r9;
    }

    public final kodkod.engine.bool.Int cardinality()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.engine.bool.Int $r4;
        java.util.Collection $r3;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r2 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r3 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.util.Collection values()>();

        $r4 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int sum(java.util.Collection)>($r3);

        return $r4;
    }

    public final kodkod.engine.bool.BooleanValue some()
    {
        kodkod.engine.bool.Operator$Nary $r0;
        java.util.Iterator $r4;
        kodkod.engine.bool.BooleanValue $r8, $r9, $r13;
        kodkod.engine.bool.BooleanConstant $r10, $r11;
        kodkod.engine.bool.BooleanAccumulator $r1;
        kodkod.engine.bool.BooleanFactory $r12;
        kodkod.util.ints.SparseSequence $r3;
        kodkod.engine.bool.BooleanMatrix r2;
        kodkod.util.ints.IndexedEntry r6;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r2 := @this: kodkod.engine.bool.BooleanMatrix;

        $r0 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r1 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r0);

        $r3 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.util.ints.IndexedEntry) $r5;

        $r7 = interfaceinvoke r6.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r8);

        $r10 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r9 != $r10 goto label2;

        $r11 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        return $r11;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r12 = r2.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r13 = virtualinvoke $r12.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r1);

        return $r13;
    }

    public final kodkod.engine.bool.BooleanValue lone()
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanValue $r10, $r11, $r12, $r13, $r14, $r18, $r21, r23;
        kodkod.engine.bool.BooleanConstant $r15, $r19, $r22;
        kodkod.engine.bool.BooleanAccumulator $r3;
        kodkod.util.ints.IndexedEntry r7;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        kodkod.engine.bool.BooleanFactory $r8, $r16, $r20;
        kodkod.util.ints.SparseSequence $r1, $r4;
        kodkod.engine.bool.BooleanMatrix r0;
        java.lang.Object $r6, $r9, $r17;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r22 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        return $r22;

     label1:
        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r3 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r2);

        r23 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r4 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kodkod.util.ints.IndexedEntry) $r6;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r10 = (kodkod.engine.bool.BooleanValue) $r9;

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r12 = virtualinvoke r23.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r13 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r11, $r12);

        $r14 = virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r13);

        $r15 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r14 != $r15 goto label3;

        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r19;

     label3:
        $r16 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r17 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r18 = (kodkod.engine.bool.BooleanValue) $r17;

        r23 = virtualinvoke $r16.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r23, $r18);

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r20 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r21 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r3);

        return $r21;
    }

    public final kodkod.engine.bool.BooleanValue one()
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanValue $r10, $r11, $r12, $r13, $r14, $r18, $r21, r23;
        kodkod.engine.bool.BooleanConstant $r15, $r19, $r22;
        kodkod.engine.bool.BooleanAccumulator $r3;
        kodkod.util.ints.IndexedEntry r7;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        kodkod.engine.bool.BooleanFactory $r8, $r16, $r20;
        kodkod.util.ints.SparseSequence $r1, $r4;
        kodkod.engine.bool.BooleanMatrix r0;
        java.lang.Object $r6, $r9, $r17;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r22 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r22;

     label1:
        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r3 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r2);

        r23 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r4 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kodkod.util.ints.IndexedEntry) $r6;

        $r8 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r10 = (kodkod.engine.bool.BooleanValue) $r9;

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r12 = virtualinvoke r23.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r13 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r11, $r12);

        $r14 = virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r13);

        $r15 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r14 != $r15 goto label3;

        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r19;

     label3:
        $r16 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r17 = interfaceinvoke r7.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r18 = (kodkod.engine.bool.BooleanValue) $r17;

        r23 = virtualinvoke $r16.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r23, $r18);

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>(r23);

        $r20 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r21 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r3);

        return $r21;
    }

    public final kodkod.engine.bool.BooleanValue none()
    {
        kodkod.engine.bool.BooleanMatrix r0;
        kodkod.engine.bool.BooleanValue $r1, $r2;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue some()>();

        $r2 = virtualinvoke $r1.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        return $r2;
    }

    public final void set(int, kodkod.engine.bool.BooleanValue)
    {
        java.lang.IndexOutOfBoundsException $r7;
        kodkod.engine.bool.BooleanValue r2;
        kodkod.engine.bool.BooleanConstant $r3;
        kodkod.util.ints.SparseSequence $r4, $r5;
        java.lang.NullPointerException $r6;
        kodkod.engine.bool.BooleanMatrix r0;
        int i0;
        kodkod.engine.bool.Dimensions $r1;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        i0 := @parameter0: int;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r1 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $z0 = virtualinvoke $r1.<kodkod.engine.bool.Dimensions: boolean validate(int)>(i0);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("index < 0 || index >= this.dimensions.capacity");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("formula=null");

        throw $r6;

     label2:
        $r3 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r2 != $r3 goto label3;

        $r5 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        interfaceinvoke $r5.<kodkod.util.ints.SparseSequence: java.lang.Object remove(int)>(i0);

        goto label4;

     label3:
        $r4 = r0.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i0, r2);

     label4:
        return;
    }

    public kodkod.engine.bool.BooleanMatrix clone()
    {
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.util.ints.SparseSequence $r2, $r5;
        java.lang.CloneNotSupportedException $r6;
        kodkod.engine.bool.BooleanMatrix $r0, r1;
        java.lang.InternalError $r7;
        kodkod.engine.bool.Dimensions $r3;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

     label1:
        $r0 = new kodkod.engine.bool.BooleanMatrix;

        $r3 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        $r4 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        $r5 = interfaceinvoke $r2.<kodkod.util.ints.SparseSequence: kodkod.util.ints.SparseSequence clone()>();

        specialinvoke $r0.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.SparseSequence)>($r3, $r4, $r5);

     label2:
        return $r0;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.InternalError;

        specialinvoke $r7.<java.lang.InternalError: void <init>()>();

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        kodkod.engine.bool.BooleanMatrix r1;
        java.lang.StringBuilder $r0;
        kodkod.engine.bool.Dimensions $r2;
        java.lang.String $r4;
        kodkod.util.ints.SparseSequence $r3;

        r1 := @this: kodkod.engine.bool.BooleanMatrix;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("dimensions: ");

        $r2 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dims>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", elements: ");

        $r3 = r1.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.SparseSequence cells>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.engine.bool.BooleanMatrix r0, $r1;

        r0 := @this: kodkod.engine.bool.BooleanMatrix;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix clone()>();

        return $r1;
    }
}
