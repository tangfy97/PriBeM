public class org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter extends org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase
{
    private org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator;

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.compound.hyphenation.HyphenationTree, org.apache.lucene.analysis.util.CharArraySet)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.analysis.util.CharArraySet r4;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r3;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter r0;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r4 := @parameter3: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.compound.hyphenation.HyphenationTree,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, r4, 5, 2, 15, 0);

        return;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.compound.hyphenation.HyphenationTree, org.apache.lucene.analysis.util.CharArraySet, int, int, int, boolean)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.util.Version r1;
        int i0, i1, i2;
        org.apache.lucene.analysis.util.CharArraySet r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r4;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter r0;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r4 := @parameter2: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r3 := @parameter3: org.apache.lucene.analysis.util.CharArraySet;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        z0 := @parameter7: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, i0, i1, i2, z0);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator> = r4;

        return;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.compound.hyphenation.HyphenationTree, int, int, int)
    {
        org.apache.lucene.analysis.TokenStream r2;
        int i0, i1, i2;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r3;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter r0;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        specialinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.compound.hyphenation.HyphenationTree,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, null, i0, i1, i2, 0);

        return;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.compound.hyphenation.HyphenationTree)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r3;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter r0;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        specialinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.compound.hyphenation.HyphenationTree,int,int,int)>(r1, r2, r3, 5, 2, 15);

        return;
    }

    public static org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(java.lang.String) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        java.lang.String r1;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(org.xml.sax.InputSource)>($r0);

        return $r2;
    }

    public static org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(java.io.File) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        java.net.URI $r2;
        java.lang.String $r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r4;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new org.xml.sax.InputSource;

        $r2 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String toASCIIString()>();

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.lang.String)>($r3);

        $r4 = staticinvoke <org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(org.xml.sax.InputSource)>($r0);

        return $r4;
    }

    public static org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(org.xml.sax.InputSource) throws java.io.IOException
    {
        org.xml.sax.InputSource r1;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r0;

        r1 := @parameter0: org.xml.sax.InputSource;

        $r0 = new org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        specialinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void <init>()>();

        virtualinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void loadPatterns(org.xml.sax.InputSource)>(r1);

        return $r0;
    }

    protected void decompose()
    {
        int[] $r6;
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken $r9, $r11, $r13, $r20, $r22, $r24, r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.CharSequence $r12, $r23;
        org.apache.lucene.analysis.compound.hyphenation.Hyphenation $r5;
        org.apache.lucene.analysis.util.CharArraySet $r8, $r15, $r18;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r2;
        java.util.LinkedList $r7, $r10, $r21;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter r0;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r1, $r4, $r14, $r17;
        char[] $r3, $r16, $r19;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        $r2 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator>;

        $r1 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r3 = interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $r4 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i0 = interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $r5 = virtualinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.Hyphenation hyphenate(char[],int,int,int,int)>($r3, 0, $i0, 1, 1);

        if $r5 != null goto label01;

        return;

     label01:
        $r6 = virtualinvoke $r5.<org.apache.lucene.analysis.compound.hyphenation.Hyphenation: int[] getHyphenationPoints()>();

        i17 = 0;

     label02:
        $i1 = lengthof $r6;

        if i17 >= $i1 goto label15;

        $i2 = lengthof $r6;

        i3 = $i2 - i17;

        i4 = $r6[i17];

        r25 = null;

        i18 = 1;

     label03:
        if i18 >= i3 goto label13;

        $i5 = i17 + i18;

        $i6 = $r6[$i5];

        i7 = $i6 - i4;

        $i8 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: int maxSubwordSize>;

        if i7 <= $i8 goto label04;

        goto label13;

     label04:
        $i9 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: int minSubwordSize>;

        if i7 >= $i9 goto label05;

        goto label12;

     label05:
        $r8 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        if $r8 == null goto label06;

        $r15 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        $r14 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r16 = interfaceinvoke $r14.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $z2 = virtualinvoke $r15.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(char[],int,int)>($r16, i4, i7);

        if $z2 == 0 goto label09;

     label06:
        $z1 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: boolean onlyLongestMatch>;

        if $z1 == 0 goto label08;

        if r25 == null goto label07;

        $r12 = r25.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: java.lang.CharSequence txt>;

        $i10 = interfaceinvoke $r12.<java.lang.CharSequence: int length()>();

        if $i10 >= i7 goto label12;

        $r13 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r13.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, i7);

        r25 = $r13;

        goto label12;

     label07:
        $r11 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r11.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, i7);

        r25 = $r11;

        goto label12;

     label08:
        $r10 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: java.util.LinkedList tokens>;

        $r9 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r9.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, i7);

        virtualinvoke $r10.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

        goto label12;

     label09:
        $r18 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        $r17 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r19 = interfaceinvoke $r17.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $i11 = i7 - 1;

        $z3 = virtualinvoke $r18.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(char[],int,int)>($r19, i4, $i11);

        if $z3 == 0 goto label12;

        $z4 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: boolean onlyLongestMatch>;

        if $z4 == 0 goto label11;

        if r25 == null goto label10;

        $r23 = r25.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: java.lang.CharSequence txt>;

        $i14 = interfaceinvoke $r23.<java.lang.CharSequence: int length()>();

        $i15 = i7 - 1;

        if $i14 >= $i15 goto label12;

        $r24 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        $i16 = i7 - 1;

        specialinvoke $r24.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, $i16);

        r25 = $r24;

        goto label12;

     label10:
        $r22 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        $i13 = i7 - 1;

        specialinvoke $r22.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, $i13);

        r25 = $r22;

        goto label12;

     label11:
        $r21 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: java.util.LinkedList tokens>;

        $r20 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        $i12 = i7 - 1;

        specialinvoke $r20.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i4, $i12);

        virtualinvoke $r21.<java.util.LinkedList: boolean add(java.lang.Object)>($r20);

     label12:
        i18 = i18 + 1;

        goto label03;

     label13:
        $z0 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: boolean onlyLongestMatch>;

        if $z0 == 0 goto label14;

        if r25 == null goto label14;

        $r7 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: java.util.LinkedList tokens>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r25);

     label14:
        i17 = i17 + 1;

        goto label02;

     label15:
        return;
    }
}
