class org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2 extends groovy.lang.Closure implements org.codehaus.groovy.runtime.GeneratedClosure
{
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Class;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$Command;

    public void <init>(java.lang.Object, java.lang.Object)
    {
        java.lang.Class $r0, $r1, $r5, $r6;
        java.lang.Object r3, r4;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2 r2;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass> = $r6;

        goto label4;

     label3:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        specialinvoke r2.<groovy.lang.Closure: void <init>(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public java.lang.Object doCall(java.lang.Object)
    {
        org.codehaus.groovy.tools.shell.Command $r24;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2 r11;
        boolean $z0;
        org.codehaus.groovy.runtime.GStringImpl $r50;
        java.lang.Object[] $r13, $r18, $r30, $r49, $r51;
        java.lang.String[] $r57;
        java.lang.String $r37;
        groovy.lang.Reference $r1, $r23;
        java.lang.Object r0, $r6, $r7, $r9, $r12, $r14, $r16, $r19, $r20, $r22, $r26, $r27, $r29, $r31, $r32, $r48, $r54, $r55, $r56;
        java.lang.Class $r2, r3, $r4, $r5, $r8, $r10, $r15, $r17, $r21, $r25, $r28, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r52, $r53, $r58;

        r11 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2;

        r0 := @parameter0: java.lang.Object;

        $r1 = new groovy.lang.Reference;

        specialinvoke $r1.<groovy.lang.Reference: void <init>(java.lang.Object)>(r0);

        $r2 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0>;

        if $r2 != null goto label01;

        $r38 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0> = $r38;

        goto label02;

     label01:
        $r38 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$0>;

     label02:
        r3 = $r38;

        $r4 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass>;

        if $r4 != null goto label03;

        $r39 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass> = $r39;

        goto label04;

     label03:
        $r39 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r5 != null goto label05;

        $r40 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r40;

        goto label06;

     label05:
        $r40 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label06:
        $r6 = virtualinvoke $r1.<groovy.lang.Reference: java.lang.Object get()>();

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>($r40, $r6, "text");

        $r8 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$String>;

        if $r8 != null goto label07;

        $r41 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$String> = $r41;

        goto label08;

     label07:
        $r41 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$String>;

     label08:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, $r41);

        $r37 = (java.lang.String) $r9;

        $r10 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r10 != null goto label09;

        $r42 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r42;

        goto label10;

     label09:
        $r42 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label10:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r3, r11, "classLoader");

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = $r37;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r42, $r12, "loadClass", $r13);

        $r15 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$Class>;

        if $r15 != null goto label11;

        $r43 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$Class> = $r43;

        goto label12;

     label11:
        $r43 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$java$lang$Class>;

     label12:
        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r14, $r43);

        $r36 = (java.lang.Class) $r16;

        $r17 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r17 != null goto label13;

        $r44 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r44;

        goto label14;

     label13:
        $r44 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label14:
        $r18 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r3, r11, "shell");

        $r18[0] = $r19;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r44, $r36, "newInstance", $r18);

        $r21 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$Command>;

        if $r21 != null goto label15;

        $r45 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.Command");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$Command> = $r45;

        goto label16;

     label15:
        $r45 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$Command>;

     label16:
        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r20, $r45);

        $r24 = (org.codehaus.groovy.tools.shell.Command) $r22;

        $r23 = new groovy.lang.Reference;

        specialinvoke $r23.<groovy.lang.Reference: void <init>(java.lang.Object)>($r24);

        $r25 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r25 != null goto label17;

        $r46 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r46;

        goto label18;

     label17:
        $r46 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label18:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r3, r11, "log");

        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>($r46, $r26, "debugEnabled");

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r27);

        if $z0 == 0 goto label23;

        $r33 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r33 != null goto label19;

        $r35 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r47 = $r35;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r35;

        goto label20;

     label19:
        $r47 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label20:
        $r48 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r3, r11, "log");

        $r49 = newarray (java.lang.Object)[1];

        $r50 = new org.codehaus.groovy.runtime.GStringImpl;

        $r51 = newarray (java.lang.Object)[2];

        $r34 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r34 != null goto label21;

        $r52 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r53 = $r52;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r52;

        goto label22;

     label21:
        $r53 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label22:
        $r54 = virtualinvoke $r23.<groovy.lang.Reference: java.lang.Object get()>();

        $r55 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>($r53, $r54, "name");

        $r51[0] = $r55;

        $r56 = virtualinvoke $r23.<groovy.lang.Reference: java.lang.Object get()>();

        $r51[1] = $r56;

        $r57 = newarray (java.lang.String)[3];

        $r57[0] = "Created command \'";

        $r57[1] = "\': ";

        $r57[2] = "";

        specialinvoke $r50.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r51, $r57);

        $r49[0] = $r50;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r47, $r48, "debug", $r49);

        goto label23;

     label23:
        $r28 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r28 != null goto label24;

        $r58 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r58;

        goto label25;

     label24:
        $r58 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label25:
        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r3, r11, "shell");

        $r30 = newarray (java.lang.Object)[1];

        $r31 = virtualinvoke $r23.<groovy.lang.Reference: java.lang.Object get()>();

        $r30[0] = $r31;

        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r58, $r29, "leftShift", $r30);

        return $r32;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
