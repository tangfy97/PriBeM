public class org.apache.xalan.lib.sql.XConnection extends java.lang.Object
{
    private static final boolean DEBUG;
    private org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool;
    private java.sql.Connection m_Connection;
    private boolean m_DefaultPoolingEnabled;
    private java.util.Vector m_OpenSQLDocuments;
    private org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr;
    private java.util.Vector m_ParameterList;
    private java.lang.Exception m_Error;
    private org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError;
    private boolean m_FullErrors;
    private org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser;
    private boolean m_IsDefaultPool;
    private boolean m_IsStreamingEnabled;
    private boolean m_InlineVariables;
    private boolean m_IsMultipleResultsEnabled;
    private boolean m_IsStatementCachingEnabled;

    public void <init>()
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        java.util.Vector $r1, $r3;
        org.apache.xalan.lib.sql.XConnection r0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        return;
    }

    public void <init>(org.apache.xalan.extensions.ExpressionContext, java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        java.util.Vector $r1, $r3;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.String r6;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String)>(r5, r6);

        return;
    }

    public void <init>(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r1, $r3;
        java.lang.String r6, r7;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String)>(r5, r6, r7);

        return;
    }

    public void <init>(org.apache.xalan.extensions.ExpressionContext, org.w3c.dom.NodeList)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        java.util.Vector $r1, $r3;
        org.w3c.dom.NodeList r6;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r6 := @parameter1: org.w3c.dom.NodeList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,org.w3c.dom.NodeList)>(r5, r6);

        return;
    }

    public void <init>(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r1, $r3;
        java.lang.String r6, r7, r8, r9;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        r9 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7, r8, r9);

        return;
    }

    public void <init>(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String, org.w3c.dom.Element)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.lib.sql.SQLQueryParser $r4;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r1, $r3;
        org.w3c.dom.Element r8;
        java.lang.String r6, r7;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: org.w3c.dom.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments> = $r1;

        $r2 = new org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList> = $r3;

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = 0;

        $r4 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>()>();

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = $r4;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = 0;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String,org.w3c.dom.Element)>(r5, r6, r7, r8);

        return;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager $r2;
        org.apache.xalan.extensions.ExpressionContext r8;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.IllegalArgumentException $r6;
        java.lang.Exception $r7;
        org.apache.xalan.lib.sql.ConnectionPool $r3, $r4;
        org.apache.xpath.objects.XBooleanStatic $r5, $r9;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r8 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPoolManager: org.apache.xalan.lib.sql.ConnectionPool getPool(java.lang.String)>(r1);

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = $r3;

        $r4 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if $r4 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Pool Name");

        throw $r6;

     label2:
        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 0;

        $r5 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r5.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r5;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r7, r8);

        $r9 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r9.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r9;

        catch java.lang.Exception from label1 to label3 with label3;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String)
    {
        java.util.Properties $r3;
        org.apache.xalan.extensions.ExpressionContext r6;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r5;
        java.sql.SQLException $r8;
        org.apache.xpath.objects.XBooleanStatic $r4, $r7, $r9;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r6 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

     label1:
        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        specialinvoke r0.<org.apache.xalan.lib.sql.XConnection: void init(java.lang.String,java.lang.String,java.util.Properties)>(r1, r2, $r3);

        $r4 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r4.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r4;

     label2:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r8, r6);

        $r9 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r9.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r9;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r5, r6);

        $r7 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r7.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r7;

        catch java.sql.SQLException from label1 to label2 with label2;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, org.w3c.dom.Element)
    {
        org.apache.xalan.extensions.ExpressionContext r4;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r3;
        java.sql.SQLException $r6;
        org.w3c.dom.Element r1;
        org.apache.xpath.objects.XBooleanStatic $r2, $r5, $r7;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r4 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r1 := @parameter1: org.w3c.dom.Element;

     label1:
        specialinvoke r0.<org.apache.xalan.lib.sql.XConnection: void initFromElement(org.w3c.dom.Element)>(r1);

        $r2 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r2.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r2;

     label2:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r6, r4);

        $r7 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r7.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r7;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r3, r4);

        $r5 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r5.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r5;

        catch java.sql.SQLException from label1 to label2 with label2;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r1;
        org.apache.xalan.extensions.ExpressionContext r6;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r5;
        java.sql.SQLException $r8;
        org.w3c.dom.Element $r3;
        org.apache.xpath.objects.XBooleanStatic $r4, $r7, $r9;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r6 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r1 := @parameter1: org.w3c.dom.NodeList;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r3 = (org.w3c.dom.Element) $r2;

        specialinvoke r0.<org.apache.xalan.lib.sql.XConnection: void initFromElement(org.w3c.dom.Element)>($r3);

        $r4 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r4.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r4;

     label2:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r8, r6);

        $r9 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r9.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r9;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r5, r6);

        $r7 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r7.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r7;

        catch java.sql.SQLException from label1 to label2 with label2;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Properties $r0;
        org.apache.xalan.extensions.ExpressionContext r8;
        org.apache.xalan.lib.sql.XConnection r3;
        java.lang.Exception $r7;
        java.sql.SQLException $r10;
        org.apache.xpath.objects.XBooleanStatic $r6, $r9, $r11;
        java.lang.String r1, r2, r4, r5;

        r3 := @this: org.apache.xalan.lib.sql.XConnection;

        r8 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

     label1:
        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("user", r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", r2);

        specialinvoke r3.<org.apache.xalan.lib.sql.XConnection: void init(java.lang.String,java.lang.String,java.util.Properties)>(r4, r5, $r0);

        $r6 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r6.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r6;

     label2:
        $r10 := @caughtexception;

        virtualinvoke r3.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r10, r8);

        $r11 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r11.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r11;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r3.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r7, r8);

        $r9 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r9.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r9;

        catch java.sql.SQLException from label1 to label2 with label2;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String, org.w3c.dom.Element)
    {
        org.apache.xalan.extensions.ExpressionContext r12;
        org.apache.xalan.lib.sql.XConnection r7;
        java.sql.SQLException $r14;
        org.apache.xpath.objects.XBooleanStatic $r10, $r13, $r15;
        org.w3c.dom.Node $r3, $r5;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String $r4, $r6, r8, r9;
        java.util.Properties $r0;
        java.lang.Exception $r11;
        org.w3c.dom.Element r1;

        r7 := @this: org.apache.xalan.lib.sql.XConnection;

        r12 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        r1 := @parameter3: org.w3c.dom.Element;

     label1:
        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r5 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        i1 = i1 + 1;

     label3:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 < $i0 goto label2;

        specialinvoke r7.<org.apache.xalan.lib.sql.XConnection: void init(java.lang.String,java.lang.String,java.util.Properties)>(r8, r9, $r0);

        $r10 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r10.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(1);

        return $r10;

     label4:
        $r14 := @caughtexception;

        virtualinvoke r7.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r14, r12);

        $r15 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r15.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r15;

     label5:
        $r11 := @caughtexception;

        virtualinvoke r7.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.extensions.ExpressionContext)>($r11, r12);

        $r13 = new org.apache.xpath.objects.XBooleanStatic;

        specialinvoke $r13.<org.apache.xpath.objects.XBooleanStatic: void <init>(boolean)>(0);

        return $r13;

        catch java.sql.SQLException from label1 to label4 with label4;
        catch java.lang.Exception from label1 to label4 with label5;
    }

    private void initFromElement(org.w3c.dom.Element) throws java.sql.SQLException
    {
        org.apache.xalan.lib.sql.XConnection r4;
        org.w3c.dom.Node $r2, $r6, $r8, $r9, $r10, $r11, $r12, r15, $r19;
        org.w3c.dom.NamedNodeMap $r5;
        java.lang.String $r3, $r7, r13, r14, r16, r17, r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Properties $r0;
        org.w3c.dom.Element r1;

        r4 := @this: org.apache.xalan.lib.sql.XConnection;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        r13 = "";

        r14 = "";

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        r15 = $r2;

        if null != $r2 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke r15.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("dbdriver");

        if $z0 == 0 goto label2;

        r13 = "";

        $r12 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r12 goto label2;

        r13 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label2:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("dburl");

        if $z1 == 0 goto label3;

        r14 = "";

        $r11 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r11 goto label3;

        r14 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label3:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("password");

        if $z2 == 0 goto label5;

        r16 = "";

        $r10 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r10 goto label4;

        r16 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label4:
        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", r16);

     label5:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("user");

        if $z3 == 0 goto label7;

        r17 = "";

        $r9 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r9 goto label6;

        r17 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label6:
        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("user", r17);

     label7:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("protocol");

        if $z4 == 0 goto label9;

        $r5 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("name");

        if null == $r6 goto label9;

        r18 = "";

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r8 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r8 goto label8;

        r18 = interfaceinvoke $r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label8:
        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r18);

     label9:
        $r19 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r15 = $r19;

        if $r19 != null goto label1;

        specialinvoke r4.<org.apache.xalan.lib.sql.XConnection: void init(java.lang.String,java.lang.String,java.util.Properties)>(r13, r14, $r0);

        return;
    }

    private void init(java.lang.String, java.lang.String, java.util.Properties) throws java.sql.SQLException
    {
        java.lang.Throwable $r19;
        java.sql.Connection $r15, r23;
        org.apache.xalan.lib.sql.XConnection r11;
        java.sql.SQLException $r21;
        org.apache.xalan.lib.sql.ConnectionPool $r13, $r14, $r16, $r20, $r22;
        java.lang.StringBuffer $r3, $r5, $r7, $r8, $r9;
        java.lang.String $r1, $r2, r4, r6, $r10, r24, r25;
        boolean $z0;
        org.apache.xalan.lib.sql.ConnectionPoolManager $r12, $r18;
        java.util.Properties r0;
        org.apache.xalan.lib.sql.DefaultConnectionPool $r17;

        r11 := @this: org.apache.xalan.lib.sql.XConnection;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Properties;

        r23 = null;

        $r1 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("user");

        r24 = $r1;

        if $r1 != null goto label01;

        r24 = "";

     label01:
        $r2 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("password");

        r25 = $r2;

        if $r2 != null goto label02;

        r25 = "";

     label02:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr>;

        $r13 = virtualinvoke $r12.<org.apache.xalan.lib.sql.ConnectionPoolManager: org.apache.xalan.lib.sql.ConnectionPool getPool(java.lang.String)>($r10);

        if $r13 != null goto label04;

        $r17 = new org.apache.xalan.lib.sql.DefaultConnectionPool;

        specialinvoke $r17.<org.apache.xalan.lib.sql.DefaultConnectionPool: void <init>()>();

        virtualinvoke $r17.<org.apache.xalan.lib.sql.DefaultConnectionPool: void setDriver(java.lang.String)>(r4);

        virtualinvoke $r17.<org.apache.xalan.lib.sql.DefaultConnectionPool: void setURL(java.lang.String)>(r6);

        virtualinvoke $r17.<org.apache.xalan.lib.sql.DefaultConnectionPool: void setProtocol(java.util.Properties)>(r0);

        $z0 = r11.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled>;

        if $z0 == 0 goto label03;

        virtualinvoke $r17.<org.apache.xalan.lib.sql.DefaultConnectionPool: void setPoolEnabled(boolean)>(1);

     label03:
        $r18 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPoolManager m_PoolMgr>;

        virtualinvoke $r18.<org.apache.xalan.lib.sql.ConnectionPoolManager: void registerPool(java.lang.String,org.apache.xalan.lib.sql.ConnectionPool)>($r10, $r17);

        r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = $r17;

        goto label05;

     label04:
        r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = $r13;

     label05:
        r11.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool> = 1;

     label06:
        $r14 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        $r15 = interfaceinvoke $r14.<org.apache.xalan.lib.sql.ConnectionPool: java.sql.Connection getConnection()>();

        r23 = $r15;

     label07:
        goto label14;

     label08:
        goto label13;

     label09:
        $r21 := @caughtexception;

        if null == null goto label10;

        $r22 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r22.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnectionOnError(java.sql.Connection)>(null);

        r23 = null;

     label10:
        throw $r21;

     label11:
        $r19 := @caughtexception;

        goto label16;

     label12:
        throw $r19;

     label13:
        return;

     label14:
        if $r15 == null goto label15;

        $r16 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r16.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnection(java.sql.Connection)>($r15);

     label15:
        goto label08;

     label16:
        if r23 == null goto label17;

        $r20 = r11.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r20.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnection(java.sql.Connection)>(r23);

     label17:
        goto label12;

        catch java.sql.SQLException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label11 with label11;
    }

    public org.apache.xalan.lib.sql.ConnectionPool getConnectionPool()
    {
        org.apache.xalan.lib.sql.XConnection r0;
        org.apache.xalan.lib.sql.ConnectionPool $r1;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        return $r1;
    }

    public org.apache.xml.dtm.DTM query(org.apache.xalan.extensions.ExpressionContext, java.lang.String)
    {
        java.lang.Throwable $r8;
        org.apache.xalan.lib.sql.SQLQueryParser $r3, $r4;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.SQLDocument $r6, r11;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r9;
        java.util.Vector $r7;
        org.apache.xalan.lib.sql.ConnectionPool $r1;
        java.lang.String r2;
        java.sql.SQLWarning $r10;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r2 := @parameter1: java.lang.String;

        r11 = null;

     label01:
        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if null != $r1 goto label03;

        goto label13;

     label02:
        return null;

     label03:
        $r3 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r4 = virtualinvoke $r3.<org.apache.xalan.lib.sql.SQLQueryParser: org.apache.xalan.lib.sql.SQLQueryParser parse(org.apache.xalan.lib.sql.XConnection,java.lang.String,int)>(r0, r2, 1);

        $r6 = staticinvoke <org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLDocument getNewDocument(org.apache.xalan.extensions.ExpressionContext)>(r5);

        r11 = $r6;

        virtualinvoke $r6.<org.apache.xalan.lib.sql.SQLDocument: void execute(org.apache.xalan.lib.sql.XConnection,org.apache.xalan.lib.sql.SQLQueryParser)>(r0, $r4);

        $r7 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r6);

     label04:
        goto label14;

     label05:
        goto label12;

     label06:
        $r9 := @caughtexception;

        if r11 == null goto label08;

        $z0 = virtualinvoke r11.<org.apache.xalan.lib.sql.SQLDocument: boolean hasErrors()>();

        if $z0 == 0 goto label07;

        $r10 = virtualinvoke r11.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>($r9, r11, $r10);

     label07:
        virtualinvoke r11.<org.apache.xalan.lib.sql.SQLDocument: void close()>();

        r11 = null;

     label08:
        goto label15;

     label09:
        goto label12;

     label10:
        $r8 := @caughtexception;

        goto label16;

     label11:
        throw $r8;

     label12:
        return r11;

     label13:
        goto label02;

     label14:
        goto label05;

     label15:
        goto label09;

     label16:
        goto label11;

        catch java.lang.Exception from label01 to label04 with label06;
        catch java.lang.Throwable from label01 to label10 with label10;
    }

    public org.apache.xml.dtm.DTM pquery(org.apache.xalan.extensions.ExpressionContext, java.lang.String)
    {
        org.apache.xalan.extensions.ExpressionContext r1;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.String r2;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r1 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xml.dtm.DTM pquery(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public org.apache.xml.dtm.DTM pquery(org.apache.xalan.extensions.ExpressionContext, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r10;
        org.apache.xalan.extensions.ExpressionContext r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r7, $r9;
        org.apache.xalan.lib.sql.ConnectionPool $r1;
        java.lang.String r2, r8;
        java.sql.SQLWarning $r12;
        boolean $z0, $z1;
        org.apache.xalan.lib.sql.SQLQueryParser $r3, $r4;
        org.apache.xalan.lib.sql.SQLDocument $r6, r13;
        java.lang.Exception $r11;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        r13 = null;

     label01:
        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if null != $r1 goto label03;

        goto label14;

     label02:
        return null;

     label03:
        $r3 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r4 = virtualinvoke $r3.<org.apache.xalan.lib.sql.SQLQueryParser: org.apache.xalan.lib.sql.SQLQueryParser parse(org.apache.xalan.lib.sql.XConnection,java.lang.String,int)>(r0, r2, 0);

        $z0 = r0.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables>;

        if $z0 != 0 goto label04;

        specialinvoke r0.<org.apache.xalan.lib.sql.XConnection: void addTypeToData(java.lang.String)>(r8);

        $r9 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        virtualinvoke $r4.<org.apache.xalan.lib.sql.SQLQueryParser: void setParameters(java.util.Vector)>($r9);

     label04:
        $r6 = staticinvoke <org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLDocument getNewDocument(org.apache.xalan.extensions.ExpressionContext)>(r5);

        r13 = $r6;

        virtualinvoke $r6.<org.apache.xalan.lib.sql.SQLDocument: void execute(org.apache.xalan.lib.sql.XConnection,org.apache.xalan.lib.sql.SQLQueryParser)>(r0, $r4);

        $r7 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r6);

     label05:
        goto label15;

     label06:
        goto label13;

     label07:
        $r11 := @caughtexception;

        if r13 == null goto label09;

        $z1 = virtualinvoke r13.<org.apache.xalan.lib.sql.SQLDocument: boolean hasErrors()>();

        if $z1 == 0 goto label08;

        $r12 = virtualinvoke r13.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>($r11, r13, $r12);

     label08:
        virtualinvoke r13.<org.apache.xalan.lib.sql.SQLDocument: void close()>();

        r13 = null;

     label09:
        goto label16;

     label10:
        goto label13;

     label11:
        $r10 := @caughtexception;

        goto label17;

     label12:
        throw $r10;

     label13:
        return r13;

     label14:
        goto label02;

     label15:
        goto label06;

     label16:
        goto label10;

     label17:
        goto label12;

        catch java.lang.Exception from label01 to label05 with label07;
        catch java.lang.Throwable from label01 to label11 with label11;
    }

    private void addTypeToData(java.lang.String)
    {
        org.apache.xalan.lib.sql.XConnection r1;
        java.util.Vector $r2, $r5;
        org.apache.xalan.lib.sql.QueryParameter r7;
        java.util.StringTokenizer $r3;
        int i0;
        java.lang.Object $r6;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.apache.xalan.lib.sql.XConnection;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label4;

        $r2 = r1.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        if $r2 == null goto label4;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0);

        i0 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = r1.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r7 = (org.apache.xalan.lib.sql.QueryParameter) $r6;

        if null == r7 goto label2;

        virtualinvoke r7.<org.apache.xalan.lib.sql.QueryParameter: void setTypeName(java.lang.String)>($r4);

     label2:
        i0 = i0 + 1;

     label3:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

     label4:
        return;
    }

    public void addParameter(java.lang.String)
    {
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void addParameterWithType(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public void addParameterWithType(java.lang.String, java.lang.String)
    {
        java.util.Vector $r4;
        org.apache.xalan.lib.sql.QueryParameter $r1;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.String r2, r3;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r4 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        $r1 = new org.apache.xalan.lib.sql.QueryParameter;

        specialinvoke $r1.<org.apache.xalan.lib.sql.QueryParameter: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        return;
    }

    public void addParameterFromElement(org.w3c.dom.Element)
    {
        org.apache.xalan.lib.sql.XConnection r5;
        org.w3c.dom.Element r0;
        java.util.Vector $r7;
        org.apache.xalan.lib.sql.QueryParameter $r6;
        org.w3c.dom.Node $r2, $r3;
        org.w3c.dom.NamedNodeMap $r1;
        java.lang.String $r4, $r8, r9;

        r5 := @this: org.apache.xalan.lib.sql.XConnection;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("type");

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r3 goto label2;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r9 = $r4;

        if $r4 != null goto label1;

        r9 = "";

     label1:
        $r7 = r5.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        $r6 = new org.apache.xalan.lib.sql.QueryParameter;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        specialinvoke $r6.<org.apache.xalan.lib.sql.QueryParameter: void <init>(java.lang.String,java.lang.String)>(r9, $r8);

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r6);

     label2:
        return;
    }

    public void addParameterFromElement(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0;
        org.w3c.dom.Element $r3;
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.apache.xalan.lib.sql.XConnection r1;

        r1 := @this: org.apache.xalan.lib.sql.XConnection;

        r0 := @parameter0: org.w3c.dom.NodeList;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r3 = (org.w3c.dom.Element) $r2;

        specialinvoke r1.<org.apache.xalan.lib.sql.XConnection: void addParameters(org.w3c.dom.Element)>($r3);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return;
    }

    private void addParameters(org.w3c.dom.Element)
    {
        org.apache.xalan.lib.sql.XConnection r6;
        short $s0;
        org.w3c.dom.Element r0;
        java.util.Vector $r8;
        org.apache.xalan.lib.sql.QueryParameter $r7;
        org.w3c.dom.Node $r1, $r3, $r4, r9, $r12;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String $r5, r10, r11;

        r6 := @this: org.apache.xalan.lib.sql.XConnection;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        r9 = $r1;

        if null != $r1 goto label1;

        return;

     label1:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r2 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("type");

        if $r3 != null goto label2;

        r10 = "string";

        goto label3;

     label2:
        r10 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label3:
        $r4 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if null == $r4 goto label5;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r11 = $r5;

        if $r5 != null goto label4;

        r11 = "";

     label4:
        $r8 = r6.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        $r7 = new org.apache.xalan.lib.sql.QueryParameter;

        specialinvoke $r7.<org.apache.xalan.lib.sql.QueryParameter: void <init>(java.lang.String,java.lang.String)>(r11, r10);

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r7);

     label5:
        $r12 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r9 = $r12;

        if $r12 != null goto label1;

        return;
    }

    public void clearParameters()
    {
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_ParameterList>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        return;
    }

    public void enableDefaultConnectionPool()
    {
        org.apache.xalan.lib.sql.ConnectionPool $r1, $r2;
        org.apache.xalan.lib.sql.XConnection r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 1;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool>;

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPool: void setPoolEnabled(boolean)>(1);

        return;
    }

    public void disableDefaultConnectionPool()
    {
        org.apache.xalan.lib.sql.ConnectionPool $r1, $r2;
        org.apache.xalan.lib.sql.XConnection r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = 0;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool>;

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPool: void setPoolEnabled(boolean)>(0);

        return;
    }

    public void enableStreamingMode()
    {
        org.apache.xalan.lib.sql.XConnection r0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 1;

        return;
    }

    public void disableStreamingMode()
    {
        org.apache.xalan.lib.sql.XConnection r0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r0.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = 0;

        return;
    }

    public org.apache.xml.dtm.DTM getError()
    {
        org.apache.xalan.lib.sql.SQLDocument r4;
        org.apache.xalan.lib.sql.XConnection r0;
        org.apache.xalan.lib.sql.SQLErrorDocument $r1;
        java.util.Vector $r2, $r6;
        int i0, $i1;
        java.lang.Object $r3;
        java.sql.SQLWarning $r5;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        $z0 = r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors>;

        if $z0 == 0 goto label4;

        i0 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r4 = (org.apache.xalan.lib.sql.SQLDocument) $r3;

        $r5 = virtualinvoke r4.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        if $r5 == null goto label2;

        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>(null, r4, $r5);

     label2:
        i0 = i0 + 1;

     label3:
        $r6 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i0 < $i1 goto label1;

     label4:
        $r1 = specialinvoke r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLErrorDocument buildErrorDocument()>();

        return $r1;
    }

    public void close() throws java.sql.SQLException
    {
        java.sql.Connection $r5, $r6;
        org.apache.xalan.lib.sql.SQLDocument r3;
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r8;
        java.util.Vector $r1, $r4, $r9;
        org.apache.xalan.lib.sql.ConnectionPool $r7;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        goto label6;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        r3 = (org.apache.xalan.lib.sql.SQLDocument) $r2;

     label2:
        virtualinvoke r3.<org.apache.xalan.lib.sql.SQLDocument: void close()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        $r4 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        virtualinvoke $r4.<java.util.Vector: void removeElementAt(int)>(0);

     label6:
        $r9 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        if $i0 != 0 goto label1;

        $r5 = r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection>;

        if null == $r5 goto label7;

        $r7 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        $r6 = r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection>;

        interfaceinvoke $r7.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnection(java.sql.Connection)>($r6);

        r0.<org.apache.xalan.lib.sql.XConnection: java.sql.Connection m_Connection> = null;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void close(org.apache.xalan.lib.sql.SQLDocument) throws java.sql.SQLException
    {
        org.apache.xalan.lib.sql.SQLDocument r4, r5;
        org.apache.xalan.lib.sql.XConnection r0;
        java.util.Vector $r1, $r2, $r6;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r5 := @parameter0: org.apache.xalan.lib.sql.SQLDocument;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (org.apache.xalan.lib.sql.SQLDocument) $r3;

        if r4 != r5 goto label2;

        virtualinvoke r4.<org.apache.xalan.lib.sql.SQLDocument: void close()>();

        $r6 = r0.<org.apache.xalan.lib.sql.XConnection: java.util.Vector m_OpenSQLDocuments>;

        virtualinvoke $r6.<java.util.Vector: void removeElementAt(int)>(i1);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label1;

        return;
    }

    private org.apache.xalan.lib.sql.SQLErrorDocument buildErrorDocument()
    {
        org.apache.xalan.extensions.ExpressionContext $r3;
        org.apache.xalan.lib.sql.XConnection r0;
        org.apache.xalan.lib.sql.SQLErrorDocument $r9, r12;
        int $i0, $i1;
        java.sql.SQLWarning $r5;
        org.apache.xpath.XPathContext$XPathExpressionContext $r6;
        boolean $z0;
        org.apache.xalan.lib.sql.SQLDocument $r1, $r2, $r4;
        org.apache.xml.dtm.ref.DTMManagerDefault r8;
        java.lang.Exception $r10, $r11;
        org.apache.xml.dtm.DTMManager $r7;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

        r12 = null;

        $r1 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError>;

        if $r1 == null goto label4;

        $r2 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError>;

        $r3 = virtualinvoke $r2.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext getExpressionContext()>();

        $r4 = r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

     label1:
        $r6 = (org.apache.xpath.XPathContext$XPathExpressionContext) $r3;

        $r7 = virtualinvoke $r6.<org.apache.xpath.XPathContext$XPathExpressionContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r8 = (org.apache.xml.dtm.ref.DTMManagerDefault) $r7;

        $i0 = virtualinvoke r8.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        $r9 = new org.apache.xalan.lib.sql.SQLErrorDocument;

        $i1 = $i0 << 16;

        $r10 = r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error>;

        $z0 = r0.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors>;

        specialinvoke $r9.<org.apache.xalan.lib.sql.SQLErrorDocument: void <init>(org.apache.xml.dtm.DTMManager,int,java.lang.Exception,java.sql.SQLWarning,boolean)>($r7, $i1, $r10, $r5, $z0);

        r12 = $r9;

        virtualinvoke r8.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int)>($r9, $i0);

        r0.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = null;

        r0.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = null;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r12 = null;

     label4:
        return r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setError(java.lang.Exception, org.apache.xalan.extensions.ExpressionContext)
    {
        javax.xml.transform.SourceLocator $r6;
        javax.xml.transform.TransformerException $r3;
        org.apache.xalan.extensions.ExpressionContext r0;
        org.apache.xalan.lib.sql.XConnection r8;
        javax.xml.transform.ErrorListener $r1;
        java.lang.Exception r2, $r7;
        org.apache.xpath.XPathContext $r5;
        java.lang.String $r4;

        r8 := @this: org.apache.xalan.lib.sql.XConnection;

        r2 := @parameter0: java.lang.Exception;

        r0 := @parameter1: org.apache.xalan.extensions.ExpressionContext;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.xalan.extensions.ExpressionContext: javax.xml.transform.ErrorListener getErrorListener()>();

        if $r1 == null goto label2;

        if r2 == null goto label2;

        $r3 = new javax.xml.transform.TransformerException;

        $r4 = virtualinvoke r2.<java.lang.Throwable: java.lang.String toString()>();

        $r5 = interfaceinvoke r0.<org.apache.xalan.extensions.ExpressionContext: org.apache.xpath.XPathContext getXPathContext()>();

        $r6 = virtualinvoke $r5.<org.apache.xpath.XPathContext: javax.xml.transform.SourceLocator getSAXLocator()>();

        specialinvoke $r3.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator,java.lang.Throwable)>($r4, $r6, r2);

        interfaceinvoke $r1.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setError(java.lang.Exception, org.apache.xalan.lib.sql.SQLDocument, java.sql.SQLWarning)
    {
        javax.xml.transform.TransformerException $r15, $r19;
        org.apache.xalan.extensions.ExpressionContext $r1;
        org.apache.xalan.lib.sql.XConnection r2;
        javax.xml.transform.ErrorListener $r3;
        org.apache.xpath.XPathContext $r17, $r21;
        int $i0, $i1, $i2;
        java.sql.SQLWarning r5, $r6, $r9, $r12, r24;
        java.lang.String $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r20;
        javax.xml.transform.SourceLocator $r18, $r22;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.lang.Exception r4, $r23;

        r2 := @this: org.apache.xalan.lib.sql.XConnection;

        r4 := @parameter0: java.lang.Exception;

        r0 := @parameter1: org.apache.xalan.lib.sql.SQLDocument;

        r5 := @parameter2: java.sql.SQLWarning;

        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext getExpressionContext()>();

        r2.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.SQLDocument m_LastSQLDocumentWithError> = r0;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.xalan.extensions.ExpressionContext: javax.xml.transform.ErrorListener getErrorListener()>();

        if $r3 == null goto label2;

        if r4 == null goto label2;

        $r19 = new javax.xml.transform.TransformerException;

        $r20 = virtualinvoke r4.<java.lang.Throwable: java.lang.String toString()>();

        $r21 = interfaceinvoke $r1.<org.apache.xalan.extensions.ExpressionContext: org.apache.xpath.XPathContext getXPathContext()>();

        $r22 = virtualinvoke $r21.<org.apache.xpath.XPathContext: javax.xml.transform.SourceLocator getSAXLocator()>();

        specialinvoke $r19.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator,java.lang.Throwable)>($r20, $r22, r4);

        interfaceinvoke $r3.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r19);

     label2:
        if $r3 == null goto label3;

        if r5 == null goto label3;

        $r15 = new javax.xml.transform.TransformerException;

        $r16 = virtualinvoke r5.<java.lang.Throwable: java.lang.String toString()>();

        $r17 = interfaceinvoke $r1.<org.apache.xalan.extensions.ExpressionContext: org.apache.xpath.XPathContext getXPathContext()>();

        $r18 = virtualinvoke $r17.<org.apache.xpath.XPathContext: javax.xml.transform.SourceLocator getSAXLocator()>();

        specialinvoke $r15.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator,java.lang.Throwable)>($r16, $r18, r5);

        interfaceinvoke $r3.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r15);

     label3:
        if r4 == null goto label4;

        r2.<org.apache.xalan.lib.sql.XConnection: java.lang.Exception m_Error> = r4;

     label4:
        if r5 == null goto label7;

        $r6 = new java.sql.SQLWarning;

        $r7 = virtualinvoke r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r8 = virtualinvoke r5.<java.sql.SQLException: java.lang.String getSQLState()>();

        $i0 = virtualinvoke r5.<java.sql.SQLException: int getErrorCode()>();

        specialinvoke $r6.<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String,int)>($r7, $r8, $i0);

        r24 = virtualinvoke r5.<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()>();

        goto label6;

     label5:
        $r9 = new java.sql.SQLWarning;

        $r10 = virtualinvoke r24.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke r24.<java.sql.SQLException: java.lang.String getSQLState()>();

        $i1 = virtualinvoke r24.<java.sql.SQLException: int getErrorCode()>();

        specialinvoke $r9.<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String,int)>($r10, $r11, $i1);

        virtualinvoke $r6.<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)>($r9);

        r24 = virtualinvoke r24.<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()>();

     label6:
        if r24 != null goto label5;

        $r12 = new java.sql.SQLWarning;

        $r13 = virtualinvoke r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r14 = virtualinvoke r5.<java.sql.SQLException: java.lang.String getSQLState()>();

        $i2 = virtualinvoke r5.<java.sql.SQLException: int getErrorCode()>();

        specialinvoke $r12.<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String,int)>($r13, $r14, $i2);

        virtualinvoke $r6.<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)>($r12);

     label7:
        goto label9;

     label8:
        $r23 := @caughtexception;

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void setFeature(java.lang.String, java.lang.String)
    {
        org.apache.xalan.lib.sql.XConnection r9;
        org.apache.xalan.lib.sql.ConnectionPool $r10, $r11;
        java.lang.String r0, $r1, r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z12, z13, z14, z15;

        r9 := @this: org.apache.xalan.lib.sql.XConnection;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z8 = 0;

        z15 = 0;

        z14 = 0;

        z13 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        z8 = 1;

        z15 = 1;

        z14 = 1;

        z13 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

     label1:
        $r3 = "streaming";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled> = z9;

        goto label9;

     label2:
        $r4 = "inline-variables";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label3;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables> = z13;

        goto label9;

     label3:
        $r5 = "multiple-results";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label4;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled> = z11;

        goto label9;

     label4:
        $r6 = "cache-statements";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z4 == 0 goto label5;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled> = z12;

        goto label9;

     label5:
        $r7 = "default-pool-enabled";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z5 == 0 goto label8;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled> = z10;

        $r10 = r9.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        if $r10 != null goto label6;

        return;

     label6:
        $z7 = r9.<org.apache.xalan.lib.sql.XConnection: boolean m_IsDefaultPool>;

        if $z7 == 0 goto label7;

        return;

     label7:
        $r11 = r9.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r11.<org.apache.xalan.lib.sql.ConnectionPool: void setPoolEnabled(boolean)>(z15);

        goto label9;

     label8:
        $r8 = "full-errors";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z6 == 0 goto label9;

        r9.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors> = z14;

     label9:
        return;
    }

    public java.lang.String getFeature(java.lang.String)
    {
        org.apache.xalan.lib.sql.XConnection r7;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r7 := @this: org.apache.xalan.lib.sql.XConnection;

        r0 := @parameter0: java.lang.String;

        r8 = null;

        $r1 = "streaming";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label03;

        $z11 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStreamingEnabled>;

        if $z11 == 0 goto label01;

        $r9 = "true";

        goto label02;

     label01:
        $r9 = "false";

     label02:
        r8 = $r9;

        goto label18;

     label03:
        $r2 = "inline-variables";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label06;

        $z10 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_InlineVariables>;

        if $z10 == 0 goto label04;

        $r10 = "true";

        goto label05;

     label04:
        $r10 = "false";

     label05:
        r8 = $r10;

        goto label18;

     label06:
        $r3 = "multiple-results";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label09;

        $z9 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_IsMultipleResultsEnabled>;

        if $z9 == 0 goto label07;

        $r11 = "true";

        goto label08;

     label07:
        $r11 = "false";

     label08:
        r8 = $r11;

        goto label18;

     label09:
        $r4 = "cache-statements";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label12;

        $z8 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_IsStatementCachingEnabled>;

        if $z8 == 0 goto label10;

        $r12 = "true";

        goto label11;

     label10:
        $r12 = "false";

     label11:
        r8 = $r12;

        goto label18;

     label12:
        $r5 = "default-pool-enabled";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label15;

        $z7 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_DefaultPoolingEnabled>;

        if $z7 == 0 goto label13;

        $r13 = "true";

        goto label14;

     label13:
        $r13 = "false";

     label14:
        r8 = $r13;

        goto label18;

     label15:
        $r6 = "full-errors";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label18;

        $z6 = r7.<org.apache.xalan.lib.sql.XConnection: boolean m_FullErrors>;

        if $z6 == 0 goto label16;

        $r14 = "true";

        goto label17;

     label16:
        $r14 = "false";

     label17:
        r8 = $r14;

     label18:
        return r8;
    }

    protected void finalize()
    {
        org.apache.xalan.lib.sql.XConnection r0;
        java.lang.Exception $r1;

        r0 := @this: org.apache.xalan.lib.sql.XConnection;

     label1:
        virtualinvoke r0.<org.apache.xalan.lib.sql.XConnection: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.sql.XConnection: boolean DEBUG> = 0;

        return;
    }
}
