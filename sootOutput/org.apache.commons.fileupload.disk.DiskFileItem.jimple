public class org.apache.commons.fileupload.disk.DiskFileItem extends java.lang.Object implements org.apache.commons.fileupload.FileItem, org.apache.commons.fileupload.FileItemHeadersSupport
{
    private static final long serialVersionUID;
    public static final java.lang.String DEFAULT_CHARSET;
    private static final java.lang.String UID;
    private static int counter;
    private java.lang.String fieldName;
    private java.lang.String contentType;
    private boolean isFormField;
    private java.lang.String fileName;
    private long size;
    private int sizeThreshold;
    private java.io.File repository;
    private byte[] cachedContent;
    private transient org.apache.commons.io.output.DeferredFileOutputStream dfos;
    private transient java.io.File tempFile;
    private java.io.File dfosFile;
    private org.apache.commons.fileupload.FileItemHeaders headers;
    static java.lang.Class class$org$apache$commons$fileupload$disk$DiskFileItem;

    public void <init>(java.lang.String, java.lang.String, boolean, java.lang.String, int, java.io.File)
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        int i0;
        java.lang.String r1, r2, r3;
        java.io.File r4;
        boolean z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r4 := @parameter5: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: long size> = -1L;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String fieldName> = r1;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String contentType> = r2;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isFormField> = z0;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String fileName> = r3;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: int sizeThreshold> = i0;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File repository> = r4;

        return;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        byte[] $r1, $r3, $r5;
        org.apache.commons.io.output.DeferredFileOutputStream $r4, $r7;
        java.io.FileInputStream $r6;
        java.io.File $r8;
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.io.ByteArrayInputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $z0 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isInMemory()>();

        if $z0 != 0 goto label1;

        $r6 = new java.io.FileInputStream;

        $r7 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r8 = virtualinvoke $r7.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r8);

        return $r6;

     label1:
        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        if $r1 != null goto label2;

        $r4 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r5 = virtualinvoke $r4.<org.apache.commons.io.output.DeferredFileOutputStream: byte[] getData()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = $r5;

     label2:
        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        return $r2;
    }

    public java.lang.String getContentType()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String contentType>;

        return $r1;
    }

    public java.lang.String getCharSet()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r1;
        org.apache.commons.fileupload.ParameterParser $r0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r2, $r5;

        r1 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r0 = new org.apache.commons.fileupload.ParameterParser;

        specialinvoke $r0.<org.apache.commons.fileupload.ParameterParser: void <init>()>();

        virtualinvoke $r0.<org.apache.commons.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);

        $r2 = virtualinvoke r1.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String getContentType()>();

        $r3 = virtualinvoke $r0.<org.apache.commons.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>($r2, 59);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public java.lang.String getName()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String fileName>;

        $r2 = staticinvoke <org.apache.commons.fileupload.util.Streams: java.lang.String checkFileName(java.lang.String)>($r1);

        return $r2;
    }

    public boolean isInMemory()
    {
        byte[] $r1;
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.io.output.DeferredFileOutputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $z0 = virtualinvoke $r2.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();

        return $z0;
    }

    public long getSize()
    {
        byte[] $r1, $r6, $r7;
        long $l0, $l2, $l4, $l6, $l7;
        byte $b1;
        int $i3, $i5, $i8;
        boolean $z0;
        org.apache.commons.io.output.DeferredFileOutputStream $r2, $r3, $r5;
        java.io.File $r4;
        org.apache.commons.fileupload.disk.DiskFileItem r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $l0 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: long size>;

        $b1 = $l0 cmp 0L;

        $i8 = (int) $b1;

        if $i8 < 0 goto label1;

        $l7 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: long size>;

        return $l7;

     label1:
        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        if $r1 == null goto label2;

        $r7 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        $i5 = lengthof $r7;

        $l6 = (long) $i5;

        return $l6;

     label2:
        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $z0 = virtualinvoke $r2.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r6 = virtualinvoke $r5.<org.apache.commons.io.output.DeferredFileOutputStream: byte[] getData()>();

        $i3 = lengthof $r6;

        $l4 = (long) $i3;

        return $l4;

     label3:
        $r3 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r4 = virtualinvoke $r3.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

        $l2 = virtualinvoke $r4.<java.io.File: long length()>();

        return $l2;
    }

    public byte[] get()
    {
        java.lang.Throwable $r9;
        byte[] $r4, $r5, $r7, r13;
        long $l0;
        int $i1;
        boolean $z0;
        org.apache.commons.io.output.DeferredFileOutputStream $r2, $r6;
        java.io.IOException $r8, $r10, $r11, $r12;
        java.io.FileInputStream $r1, r14;
        java.io.File $r3;
        org.apache.commons.fileupload.disk.DiskFileItem r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $z0 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isInMemory()>();

        if $z0 == 0 goto label02;

        $r4 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        if $r4 != null goto label01;

        $r6 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r7 = virtualinvoke $r6.<org.apache.commons.io.output.DeferredFileOutputStream: byte[] getData()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = $r7;

     label01:
        $r5 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        return $r5;

     label02:
        $l0 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: long getSize()>();

        $i1 = (int) $l0;

        r13 = newarray (byte)[$i1];

        r14 = null;

     label03:
        $r1 = new java.io.FileInputStream;

        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r3 = virtualinvoke $r2.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        r14 = $r1;

        virtualinvoke $r1.<java.io.FileInputStream: int read(byte[])>(r13);

     label04:
        if $r1 == null goto label19;

     label05:
        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

     label06:
        goto label19;

     label07:
        $r12 := @caughtexception;

        goto label19;

     label08:
        $r11 := @caughtexception;

        r13 = null;

     label09:
        if r14 == null goto label19;

     label10:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label11:
        goto label19;

     label12:
        $r10 := @caughtexception;

        goto label19;

     label13:
        $r9 := @caughtexception;

     label14:
        if r14 == null goto label18;

     label15:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r8 := @caughtexception;

     label18:
        throw $r9;

     label19:
        return r13;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label03 to label04 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public java.lang.String getString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2;
        org.apache.commons.fileupload.disk.DiskFileItem r1;
        java.lang.String $r0, r3;

        r1 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] get()>();

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, r3);

        return $r0;
    }

    public java.lang.String getString()
    {
        byte[] $r1;
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.lang.String $r2, $r3, $r5, r6;
        java.io.UnsupportedEncodingException $r4;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] get()>();

        $r2 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String getCharSet()>();

        r6 = $r2;

        if $r2 != null goto label1;

        r6 = "ISO-8859-1";

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, r6);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r1);

        return $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void write(java.io.File) throws java.lang.Exception
    {
        java.lang.Throwable $r12, $r15;
        byte[] $r9;
        java.io.BufferedInputStream $r4, r17;
        long $l0;
        java.io.BufferedOutputStream $r6, r18;
        boolean $z0, $z1;
        java.io.FileOutputStream $r7, $r8, r16;
        java.io.IOException $r10, $r11, $r13, $r14;
        java.io.FileInputStream $r5;
        java.io.File $r1, r3;
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.fileupload.FileUploadException $r2;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r3 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isInMemory()>();

        if $z0 == 0 goto label07;

        r16 = null;

     label01:
        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        r16 = $r8;

        $r9 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] get()>();

        virtualinvoke $r8.<java.io.FileOutputStream: void write(byte[])>($r9);

     label02:
        if $r8 == null goto label06;

        virtualinvoke $r8.<java.io.FileOutputStream: void close()>();

        goto label06;

     label03:
        $r15 := @caughtexception;

     label04:
        if r16 == null goto label05;

        virtualinvoke r16.<java.io.FileOutputStream: void close()>();

     label05:
        throw $r15;

     label06:
        goto label29;

     label07:
        $r1 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();

        if $r1 == null goto label28;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: long size> = $l0;

        $z1 = virtualinvoke $r1.<java.io.File: boolean renameTo(java.io.File)>(r3);

        if $z1 != 0 goto label29;

        r17 = null;

        r18 = null;

     label08:
        $r4 = new java.io.BufferedInputStream;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r5);

        r17 = $r4;

        $r6 = new java.io.BufferedOutputStream;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r7);

        r18 = $r6;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r4, $r6);

     label09:
        if $r4 == null goto label13;

     label10:
        virtualinvoke $r4.<java.io.BufferedInputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

     label13:
        if $r6 == null goto label27;

     label14:
        virtualinvoke $r6.<java.io.BufferedOutputStream: void close()>();

     label15:
        goto label27;

     label16:
        $r13 := @caughtexception;

        goto label27;

     label17:
        $r12 := @caughtexception;

     label18:
        if r17 == null goto label22;

     label19:
        virtualinvoke r17.<java.io.BufferedInputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r11 := @caughtexception;

     label22:
        if r18 == null goto label26;

     label23:
        virtualinvoke r18.<java.io.BufferedOutputStream: void close()>();

     label24:
        goto label26;

     label25:
        $r10 := @caughtexception;

     label26:
        throw $r12;

     label27:
        goto label29;

     label28:
        $r2 = new org.apache.commons.fileupload.FileUploadException;

        specialinvoke $r2.<org.apache.commons.fileupload.FileUploadException: void <init>(java.lang.String)>("Cannot write uploaded file to disk!");

        throw $r2;

     label29:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void delete()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = null;

        $r1 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    public java.lang.String getFieldName()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String fieldName>;

        return $r1;
    }

    public void setFieldName(java.lang.String)
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String fieldName> = r1;

        return;
    }

    public boolean isFormField()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $z0 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isFormField>;

        return $z0;
    }

    public void setFormField(boolean)
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        boolean z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isFormField> = z0;

        return;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.io.output.DeferredFileOutputStream $r1, $r2, $r4;
        int $i0;
        java.io.File $r3;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getTempFile()>();

        $r4 = new org.apache.commons.io.output.DeferredFileOutputStream;

        $i0 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: int sizeThreshold>;

        specialinvoke $r4.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File)>($i0, $r3);

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        return $r2;
    }

    public java.io.File getStoreLocation()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.io.output.DeferredFileOutputStream $r1, $r2;
        java.io.File $r3;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r3 = virtualinvoke $r2.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

     label2:
        return $r3;
    }

    protected void finalize()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.io.output.DeferredFileOutputStream $r1;
        java.io.File $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r2 = virtualinvoke $r1.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    protected java.io.File getTempFile()
    {
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r7, $r10, $r13;
        java.io.File $r1, $r11, $r12, r14, $r15;
        org.apache.commons.fileupload.disk.DiskFileItem r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File tempFile>;

        if $r1 != null goto label2;

        r14 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File repository>;

        if r14 != null goto label1;

        $r12 = new java.io.File;

        $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        r14 = $r12;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("upload_");

        $r4 = <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String UID>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");

        $r7 = staticinvoke <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String getUniqueId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".tmp");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r14, $r10);

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File tempFile> = $r11;

     label2:
        $r15 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File tempFile>;

        return $r15;
    }

    private static java.lang.String getUniqueId()
    {
        java.lang.Throwable $r6;
        java.lang.StringBuffer $r2, $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.Class $r0, $r7, r8;
        java.lang.String $r1, $r5, r9;

        $r0 = <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.Class class$org$apache$commons$fileupload$disk$DiskFileItem>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.Class class$(java.lang.String)>("org.apache.commons.fileupload.disk.DiskFileItem");

        <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.Class class$org$apache$commons$fileupload$disk$DiskFileItem> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.Class class$org$apache$commons$fileupload$disk$DiskFileItem>;

     label2:
        r8 = $r7;

        entermonitor $r7;

     label3:
        $i0 = <org.apache.commons.fileupload.disk.DiskFileItem: int counter>;

        $i1 = $i0 + 1;

        <org.apache.commons.fileupload.disk.DiskFileItem: int counter> = $i1;

        exitmonitor $r7;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor r8;

     label6:
        throw $r6;

     label7:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        r9 = $r1;

        if $i0 >= 100000000 goto label8;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("00000000");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        r9 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i2);

     label8:
        return r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String toString()
    {
        long $l0;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r3, $r7, $r15, $r17;
        boolean $z0;
        java.io.File $r6;
        org.apache.commons.fileupload.disk.DiskFileItem r2;

        r2 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name=");

        $r3 = virtualinvoke r2.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", StoreLocation=");

        $r6 = virtualinvoke r2.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", size=");

        $l0 = virtualinvoke r2.<org.apache.commons.fileupload.disk.DiskFileItem: long getSize()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("bytes, ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isFormField=");

        $z0 = virtualinvoke r2.<org.apache.commons.fileupload.disk.DiskFileItem: boolean isFormField()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", FieldName=");

        $r15 = virtualinvoke r2.<org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String getFieldName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        byte[] $r5;
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.io.output.DeferredFileOutputStream $r1, $r2;
        java.io.ObjectOutputStream r4;
        java.io.File $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r4 := @parameter0: java.io.ObjectOutputStream;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $z0 = virtualinvoke $r1.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] get()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = $r5;

        goto label2;

     label1:
        r0.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = null;

        $r2 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.io.output.DeferredFileOutputStream dfos>;

        $r3 = virtualinvoke $r2.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File getFile()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File dfosFile> = $r3;

     label2:
        virtualinvoke r4.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.OutputStream $r2;
        byte[] $r3, $r7;
        java.io.ObjectInputStream r0;
        java.io.FileInputStream $r4;
        java.io.File $r5, $r6;
        org.apache.commons.fileupload.disk.DiskFileItem r1;

        r1 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.OutputStream getOutputStream()>();

        $r3 = r1.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        if $r3 == null goto label1;

        $r7 = r1.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r7);

        goto label2;

     label1:
        $r4 = new java.io.FileInputStream;

        $r5 = r1.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File dfosFile>;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r4, $r2);

        $r6 = r1.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File dfosFile>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        r1.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File dfosFile> = null;

     label2:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        r1.<org.apache.commons.fileupload.disk.DiskFileItem: byte[] cachedContent> = null;

        return;
    }

    public org.apache.commons.fileupload.FileItemHeaders getHeaders()
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.fileupload.FileItemHeaders $r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.fileupload.FileItemHeaders headers>;

        return $r1;
    }

    public void setHeaders(org.apache.commons.fileupload.FileItemHeaders)
    {
        org.apache.commons.fileupload.disk.DiskFileItem r0;
        org.apache.commons.fileupload.FileItemHeaders r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItem;

        r1 := @parameter0: org.apache.commons.fileupload.FileItemHeaders;

        r0.<org.apache.commons.fileupload.disk.DiskFileItem: org.apache.commons.fileupload.FileItemHeaders headers> = r1;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String $r1, $r2, $r3;
        java.rmi.server.UID $r0;

        <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String DEFAULT_CHARSET> = "ISO-8859-1";

        <org.apache.commons.fileupload.disk.DiskFileItem: long serialVersionUID> = 2237570099615271025L;

        $r0 = new java.rmi.server.UID;

        specialinvoke $r0.<java.rmi.server.UID: void <init>()>();

        $r1 = virtualinvoke $r0.<java.rmi.server.UID: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(58, 95);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        <org.apache.commons.fileupload.disk.DiskFileItem: java.lang.String UID> = $r3;

        <org.apache.commons.fileupload.disk.DiskFileItem: int counter> = 0;

        return;
    }
}
