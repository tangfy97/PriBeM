public class org.springframework.util.PropertyPlaceholderHelper extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private static final java.util.Map wellKnownSimplePrefixes;
    private final java.lang.String placeholderPrefix;
    private final java.lang.String placeholderSuffix;
    private final java.lang.String simplePrefix;
    private final java.lang.String valueSeparator;
    private final boolean ignoreUnresolvablePlaceholders;

    static void <clinit>()
    {
        java.util.Map $r2, $r3, $r4;
        org.apache.commons.logging.Log $r0;
        java.util.HashMap $r1;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/util/PropertyPlaceholderHelper;");

        <org.springframework.util.PropertyPlaceholderHelper: org.apache.commons.logging.Log logger> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(4);

        <org.springframework.util.PropertyPlaceholderHelper: java.util.Map wellKnownSimplePrefixes> = $r1;

        $r2 = <org.springframework.util.PropertyPlaceholderHelper: java.util.Map wellKnownSimplePrefixes>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("}", "{");

        $r3 = <org.springframework.util.PropertyPlaceholderHelper: java.util.Map wellKnownSimplePrefixes>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("]", "[");

        $r4 = <org.springframework.util.PropertyPlaceholderHelper: java.util.Map wellKnownSimplePrefixes>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(")", "(");

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.springframework.util.PropertyPlaceholderHelper r0;
        java.lang.String r1, r2;

        r0 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.util.PropertyPlaceholderHelper: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, null, 1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.springframework.util.PropertyPlaceholderHelper r0;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.String r1, r2, $r3, r6, $r7, r8, $r9;
        boolean z0, $z1;

        r0 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "placeholderPrefix must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "placeholderSuffix must not be null");

        r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix> = r1;

        r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix> = r2;

        $r4 = <org.springframework.util.PropertyPlaceholderHelper: java.util.Map wellKnownSimplePrefixes>;

        $r3 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label1;

        $r9 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(r6);

        if $z1 == 0 goto label1;

        r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String simplePrefix> = r6;

        goto label2;

     label1:
        $r7 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String simplePrefix> = $r7;

     label2:
        r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String valueSeparator> = r8;

        r0.<org.springframework.util.PropertyPlaceholderHelper: boolean ignoreUnresolvablePlaceholders> = z0;

        return;
    }

    public java.lang.String replacePlaceholders(java.lang.String, java.util.Properties)
    {
        org.springframework.util.PropertyPlaceholderHelper r1;
        java.util.Properties r0;
        org.springframework.util.PropertyPlaceholderHelper$1 $r3;
        java.lang.String r2, $r4;

        r1 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Properties;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Argument \'properties\' must not be null.");

        $r3 = new org.springframework.util.PropertyPlaceholderHelper$1;

        specialinvoke $r3.<org.springframework.util.PropertyPlaceholderHelper$1: void <init>(org.springframework.util.PropertyPlaceholderHelper,java.util.Properties)>(r1, r0);

        $r4 = virtualinvoke r1.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)>(r2, $r3);

        return $r4;
    }

    public java.lang.String replacePlaceholders(java.lang.String, org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)
    {
        java.util.HashSet $r3;
        org.springframework.util.PropertyPlaceholderHelper r1;
        org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver r2;
        java.lang.String r0, $r4;

        r1 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Argument \'value\' must not be null.");

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = virtualinvoke r1.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String parseStringValue(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver,java.util.Set)>(r0, r2, $r3);

        return $r4;
    }

    protected java.lang.String parseStringValue(java.lang.String, org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver, java.util.Set)
    {
        boolean $z0, $z1, $z2;
        org.springframework.util.PropertyPlaceholderHelper r2;
        java.util.Set r6;
        java.lang.StringBuilder $r12, $r13, $r23, $r24, $r34, $r35, $r39, $r40, $r42, $r43;
        org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14, $i16, $i18, $i20;
        java.lang.String r1, $r3, $r4, $r5, $r8, $r9, $r14, $r15, $r16, $r17, $r18, $r20, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r36, $r37, r38;
        java.lang.IllegalArgumentException $r41, $r44;
        org.apache.commons.logging.Log $r19, $r22;

        r2 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver;

        r6 := @parameter2: java.util.Set;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        i12 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>($r3);

        goto label9;

     label1:
        $i0 = specialinvoke r2.<org.springframework.util.PropertyPlaceholderHelper: int findPlaceholderEndIndex(java.lang.CharSequence,int)>($r39, i12);

        $i14 = (int) -1;

        if $i0 == $i14 goto label8;

        $r4 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = i12 + $i1;

        $r5 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i2, $i0);

        $z0 = interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r41 = new java.lang.IllegalArgumentException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Circular placeholder reference \'");

        $r34 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in property definitions");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r41;

     label2:
        $r8 = virtualinvoke r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String parseStringValue(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver,java.util.Set)>($r5, r7, r6);

        $r9 = interfaceinvoke r7.<org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver: java.lang.String resolvePlaceholder(java.lang.String)>($r8);

        r38 = $r9;

        if $r9 != null goto label3;

        $r26 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String valueSeparator>;

        if $r26 == null goto label3;

        $r27 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String valueSeparator>;

        $i9 = virtualinvoke $r8.<java.lang.String: int indexOf(java.lang.String)>($r27);

        $i16 = (int) -1;

        if $i9 == $i16 goto label3;

        $r28 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        $r29 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String valueSeparator>;

        $i10 = virtualinvoke $r29.<java.lang.String: int length()>();

        $i11 = $i9 + $i10;

        $r30 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i11);

        $r31 = interfaceinvoke r7.<org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver: java.lang.String resolvePlaceholder(java.lang.String)>($r28);

        r38 = $r31;

        if $r31 != null goto label3;

        r38 = $r30;

     label3:
        if r38 == null goto label5;

        $r17 = virtualinvoke r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String parseStringValue(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver,java.util.Set)>(r38, r7, r6);

        $r18 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix>;

        $i5 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i6 = $i0 + $i5;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i12, $i6, $r17);

        $r19 = <org.springframework.util.PropertyPlaceholderHelper: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z2 == 0 goto label4;

        $r22 = <org.springframework.util.PropertyPlaceholderHelper: org.apache.commons.logging.Log logger>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("Resolved placeholder \'");

        $r23 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r25);

     label4:
        $r20 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        $i7 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i8 = i12 + $i7;

        i12 = virtualinvoke $r39.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>($r20, $i8);

        goto label7;

     label5:
        $z1 = r2.<org.springframework.util.PropertyPlaceholderHelper: boolean ignoreUnresolvablePlaceholders>;

        if $z1 == 0 goto label6;

        $r16 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        $r15 = r2.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix>;

        $i3 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i4 = $i0 + $i3;

        i12 = virtualinvoke $r39.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>($r16, $i4);

        goto label7;

     label6:
        $r44 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not resolve placeholder \'");

        $r12 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r44;

     label7:
        interfaceinvoke r6.<java.util.Set: boolean remove(java.lang.Object)>($r8);

        goto label9;

     label8:
        $i18 = (int) -1;

        i12 = $i18;

     label9:
        $i20 = (int) -1;

        if i12 != $i20 goto label1;

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r37;
    }

    private int findPlaceholderEndIndex(java.lang.CharSequence, int)
    {
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i8, $i10;
        java.lang.String $r1, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;
        org.springframework.util.PropertyPlaceholderHelper r0;
        java.lang.CharSequence r2;

        r0 := @this: org.springframework.util.PropertyPlaceholderHelper;

        r2 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r1 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderPrefix>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i4 = i0 + $i1;

        i5 = 0;

        goto label5;

     label1:
        $r3 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean substringMatch(java.lang.CharSequence,int,java.lang.CharSequence)>(r2, i4, $r3);

        if $z0 == 0 goto label3;

        if i5 <= 0 goto label2;

        $i8 = (int) -1;

        i5 = i5 + $i8;

        $r6 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String placeholderSuffix>;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        i4 = i4 + $i3;

        goto label5;

     label2:
        return i4;

     label3:
        $r4 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String simplePrefix>;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean substringMatch(java.lang.CharSequence,int,java.lang.CharSequence)>(r2, i4, $r4);

        if $z1 == 0 goto label4;

        i5 = i5 + 1;

        $r5 = r0.<org.springframework.util.PropertyPlaceholderHelper: java.lang.String simplePrefix>;

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        i4 = i4 + $i2;

        goto label5;

     label4:
        i4 = i4 + 1;

     label5:
        $i6 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i4 < $i6 goto label1;

        $i10 = (int) -1;

        return $i10;
    }
}
