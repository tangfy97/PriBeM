public class org.bouncycastle.util.test.FixedSecureRandom extends java.security.SecureRandom
{
    private byte[] _data;
    private int _index;
    private int _intPad;

    public void <init>(byte[])
    {
        byte[] r2;
        byte[][] $r1;
        org.bouncycastle.util.test.FixedSecureRandom r0;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        r2 := @parameter0: byte[];

        $r1 = newarray (byte[])[1];

        $r1[0] = r2;

        specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>(0, $r1);

        return;
    }

    public void <init>(byte[][])
    {
        byte[][] r1;
        org.bouncycastle.util.test.FixedSecureRandom r0;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        r1 := @parameter0: byte[][];

        specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>(0, r1);

        return;
    }

    public void <init>(boolean, byte[])
    {
        byte[] r2;
        byte[][] $r1;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        boolean z0;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        z0 := @parameter0: boolean;

        r2 := @parameter1: byte[];

        $r1 = newarray (byte[])[1];

        $r1[0] = r2;

        specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>(z0, $r1);

        return;
    }

    public void <init>(boolean, byte[][])
    {
        byte[] $r3, $r4, $r5;
        java.io.ByteArrayOutputStream $r1;
        java.io.IOException $r6;
        java.lang.IllegalArgumentException $r7;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        byte[][] r2;
        int $i0, $i1, $i2, i3;
        boolean z0;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        z0 := @parameter0: boolean;

        r2 := @parameter1: byte[][];

        specialinvoke r0.<java.security.SecureRandom: void <init>()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        i3 = 0;

     label1:
        $i0 = lengthof r2;

        if i3 == $i0 goto label6;

     label2:
        $r5 = r2[i3];

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[])>($r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t save value array.");

        throw $r7;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r3 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.bouncycastle.util.test.FixedSecureRandom: byte[] _data> = $r3;

        if z0 == 0 goto label7;

        $r4 = r0.<org.bouncycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i1 = lengthof $r4;

        $i2 = $i1 % 4;

        r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad> = $i2;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void nextBytes(byte[])
    {
        byte[] r1, $r2;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.bouncycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i1 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index>;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, r1, 0, $i0);

        $i3 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index>;

        $i2 = lengthof r1;

        $i4 = $i3 + $i2;

        r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index> = $i4;

        return;
    }

    public int nextInt()
    {
        org.bouncycastle.util.test.FixedSecureRandom r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        $i0 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i1 = $i0 << 24;

        i13 = 0 | $i1;

        $i2 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i3 = $i2 << 16;

        i14 = i13 | $i3;

        $i4 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad>;

        if $i4 != 2 goto label1;

        $i11 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad>;

        $i12 = $i11 - 1;

        r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad> = $i12;

        goto label2;

     label1:
        $i5 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i6 = $i5 << 8;

        i14 = i14 | $i6;

     label2:
        $i7 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad>;

        if $i7 != 1 goto label3;

        $i9 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad>;

        $i10 = $i9 - 1;

        r0.<org.bouncycastle.util.test.FixedSecureRandom: int _intPad> = $i10;

        goto label4;

     label3:
        $i8 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        i14 = i14 | $i8;

     label4:
        return i14;
    }

    public long nextLong()
    {
        long $l1, $l2, $l4, $l5, $l7, $l8, $l10, $l11, $l13, $l14, $l16, $l17, $l19, $l20, $l22, l23, l24, l25, l26, l27, l28, l29, l30;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        int $i0, $i3, $i6, $i9, $i12, $i15, $i18, $i21;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        $i0 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l1 = (long) $i0;

        $l2 = $l1 << 56;

        l23 = 0L | $l2;

        $i3 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l4 = (long) $i3;

        $l5 = $l4 << 48;

        l24 = l23 | $l5;

        $i6 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l7 = (long) $i6;

        $l8 = $l7 << 40;

        l25 = l24 | $l8;

        $i9 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l10 = (long) $i9;

        $l11 = $l10 << 32;

        l26 = l25 | $l11;

        $i12 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l13 = (long) $i12;

        $l14 = $l13 << 24;

        l27 = l26 | $l14;

        $i15 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l16 = (long) $i15;

        $l17 = $l16 << 16;

        l28 = l27 | $l17;

        $i18 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l19 = (long) $i18;

        $l20 = $l19 << 8;

        l29 = l28 | $l20;

        $i21 = specialinvoke r0.<org.bouncycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l22 = (long) $i21;

        l30 = l29 | $l22;

        return l30;
    }

    public boolean isExhausted()
    {
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        $i1 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index>;

        $r1 = r0.<org.bouncycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int nextValue()
    {
        byte[] $r1;
        org.bouncycastle.util.test.FixedSecureRandom r0;
        short $s3, $s4;
        byte $b2;
        int $i0, $i1, $i5;

        r0 := @this: org.bouncycastle.util.test.FixedSecureRandom;

        $r1 = r0.<org.bouncycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i0 = r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index>;

        $i1 = $i0 + 1;

        r0.<org.bouncycastle.util.test.FixedSecureRandom: int _index> = $i1;

        $b2 = $r1[$i0];

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        return $i5;
    }
}
