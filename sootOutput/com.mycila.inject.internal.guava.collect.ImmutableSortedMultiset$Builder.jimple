public class com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder extends com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder
{
    private final java.util.Comparator comparator;

    public void <init>(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.TreeMultiset $r2;
        java.lang.Object $r3;
        java.util.Comparator r1, $r4;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.TreeMultiset: com.mycila.inject.internal.guava.collect.TreeMultiset create(java.util.Comparator)>(r1);

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: void <init>(com.mycila.inject.internal.guava.collect.Multiset)>($r2);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.util.Comparator) $r3;

        r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator> = $r4;

        return;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder add(java.lang.Object)>(r1);

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int)>(r1, i0);

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int)>(r1, i0);

        return r0;
    }

    public transient com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder add(java.lang.Object[])>(r1);

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Iterable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable)>(r1);

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addAll(java.util.Iterator)>(r1);

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset build()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset $r3;
        com.mycila.inject.internal.guava.collect.Multiset $r1;
        java.util.Comparator $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.Multiset contents>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r2, $r1);

        return $r3;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset build()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset build()>();

        return $r1;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Iterator;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;
        java.lang.Iterable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder add(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder setCount(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object,int)>(r1, i0);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addCopies(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int)>(r1, i0);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection build()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset build()>();

        return $r1;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Iterator;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;
        java.lang.Iterable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection$Builder add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>(r1);

        return $r2;
    }
}
