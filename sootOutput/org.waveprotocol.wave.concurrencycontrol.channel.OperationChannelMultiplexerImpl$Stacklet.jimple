class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel$Listener
{
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel;
    private final org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel;
    private boolean firstMessageReceived;
    private boolean dropAdditionalSnapshot;

    private void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel, org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean firstMessageReceived> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean dropAdditionalSnapshot> = z0;

        return;
    }

    public void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r1;
        org.waveprotocol.wave.model.version.HashedVersion r2, r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean firstMessageReceived>;

        if $z0 != 0 goto label1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean firstMessageReceived> = 1;

        goto label2;

     label1:
        $z1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean dropAdditionalSnapshot>;

        if $z1 == 0 goto label2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean dropAdditionalSnapshot> = 0;

        return;

     label2:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel: void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r2, r3);

        return;
    }

    public void onWaveletUpdate(java.util.List, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        java.util.List r1;
        org.waveprotocol.wave.model.version.HashedVersion r2, r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean firstMessageReceived>;

        if $z0 != 0 goto label1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean firstMessageReceived> = 1;

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel: void onWaveletUpdate(java.util.List,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r2, r3);

        return;
    }

    public void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel>;

        interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel: void reset(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver)>($r1);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel>;

        interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel: void reset()>();

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel deltaChannel>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel: void reset(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver)>(null);

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel>;

        interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel: void close()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel getOperationChannel()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel opChannel>;

        return $r1;
    }

    public boolean isExpectingSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean dropAdditionalSnapshot>;

        return $z0;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel, org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel, boolean, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r0;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1 r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel,org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel,boolean)>(r1, r2, z0);

        return;
    }
}
