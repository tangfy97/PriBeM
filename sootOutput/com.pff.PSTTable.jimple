class com.pff.PSTTable extends java.lang.Object
{
    protected java.lang.String tableType;
    protected byte tableTypeByte;
    protected int hidUserRoot;
    protected java.lang.Long[] arrayBlocks;
    protected int sizeOfItemKey;
    protected int sizeOfItemValue;
    protected int hidRoot;
    protected int numberOfKeys;
    protected int numberOfIndexLevels;
    private com.pff.PSTNodeInputStream in;
    private java.util.HashMap subNodeDescriptorItems;
    protected java.lang.String description;

    protected void <init>(com.pff.PSTNodeInputStream, java.util.HashMap) throws com.pff.PSTException, java.io.IOException
    {
        byte[] r4, r46;
        byte $b0, $b1, $b2, $b35;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r40, $r41, $r50, $r51, $r55, $r57, $r61, $r63, $r65;
        com.pff.PSTNodeInputStream r2, $r6, $r7, $r8, $r9, $r10, $r43, $r44, $r45, $r47;
        long $l3, $l6, $l15, $l19, $l22, $l25, $l28, $l30, $l33, $l36;
        java.lang.String $r12, $r15, $r21, $r27, $r33, $r39, $r42, $r52, $r56, $r58;
        com.pff.PSTTable$NodeInfo $r5;
        com.pff.PSTException $r60, $r62, $r64;
        java.util.HashMap r1;
        int $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i31, $i32, $i34, i37, $i38, $i40, $i41;
        java.lang.Long[] $r3;
        com.pff.PSTTable r0;

        r0 := @this: com.pff.PSTTable;

        r2 := @parameter0: com.pff.PSTNodeInputStream;

        r1 := @parameter1: java.util.HashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.pff.PSTTable: java.lang.Long[] arrayBlocks> = null;

        r0.<com.pff.PSTTable: int numberOfKeys> = 0;

        r0.<com.pff.PSTTable: int numberOfIndexLevels> = 0;

        r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems> = null;

        r0.<com.pff.PSTTable: java.lang.String description> = "";

        r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems> = r1;

        r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in> = r2;

        $r3 = virtualinvoke r2.<com.pff.PSTNodeInputStream: java.lang.Long[] getBlockOffsets()>();

        r0.<com.pff.PSTTable: java.lang.Long[] arrayBlocks> = $r3;

        virtualinvoke r2.<com.pff.PSTNodeInputStream: void seek(long)>(0L);

        r4 = newarray (byte)[4];

        virtualinvoke r2.<com.pff.PSTNodeInputStream: int read(byte[])>(r4);

        $b0 = r4[2];

        $i38 = (int) $b0;

        $i40 = (int) -20;

        if $i38 == $i40 goto label1;

        staticinvoke <com.pff.PSTObject: byte[] decode(byte[])>(r4);

        staticinvoke <com.pff.PSTObject: void printHexFormatted(byte[],boolean)>(r4, 1);

        $r60 = new com.pff.PSTException;

        specialinvoke $r60.<com.pff.PSTException: void <init>(java.lang.String)>("Unable to parse table, bad table type...");

        throw $r60;

     label1:
        $b1 = r4[3];

        r0.<com.pff.PSTTable: byte tableTypeByte> = $b1;

        $b2 = r0.<com.pff.PSTTable: byte tableTypeByte>;

        $i41 = (int) $b2;

        lookupswitch($i41)
        {
            case -68: goto label3;
            case 124: goto label2;
            default: goto label4;
        };

     label2:
        r0.<com.pff.PSTTable: java.lang.String tableType> = "7c";

        goto label5;

     label3:
        r0.<com.pff.PSTTable: java.lang.String tableType> = "bc";

        goto label5;

     label4:
        $r62 = new com.pff.PSTException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse table, bad table type.  Unknown identifier: 0x");

        $b35 = r4[3];

        $l36 = (long) $b35;

        $r56 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l36);

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<com.pff.PSTException: void <init>(java.lang.String)>($r58);

        throw $r62;

     label5:
        $l3 = virtualinvoke r2.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>(4L, 4);

        $i4 = (int) $l3;

        r0.<com.pff.PSTTable: int hidUserRoot> = $i4;

        $r5 = virtualinvoke r0.<com.pff.PSTTable: com.pff.PSTTable$NodeInfo getNodeInfo(int)>(32);

        $r6 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i5 = $r5.<com.pff.PSTTable$NodeInfo: int startOffset>;

        $l6 = (long) $i5;

        virtualinvoke $r6.<com.pff.PSTNodeInputStream: void seek(long)>($l6);

        $r7 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i7 = virtualinvoke $r7.<com.pff.PSTNodeInputStream: int read()>();

        $i34 = $i7 & 255;

        if $i34 == 181 goto label6;

        $r43 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i29 = $r5.<com.pff.PSTTable$NodeInfo: int startOffset>;

        $l30 = (long) $i29;

        virtualinvoke $r43.<com.pff.PSTNodeInputStream: void seek(long)>($l30);

        $r44 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i31 = virtualinvoke $r44.<com.pff.PSTNodeInputStream: int read()>();

        i37 = $i31 & 255;

        $r45 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i32 = $r5.<com.pff.PSTTable$NodeInfo: int startOffset>;

        $l33 = (long) $i32;

        virtualinvoke $r45.<com.pff.PSTNodeInputStream: void seek(long)>($l33);

        r46 = newarray (byte)[1024];

        $r47 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        virtualinvoke $r47.<com.pff.PSTNodeInputStream: int read(byte[])>(r46);

        staticinvoke <com.pff.PSTObject: void printHexFormatted(byte[],boolean)>(r46, 1);

        $r64 = new com.pff.PSTException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse table, can\'t find BTHHEADER header information: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i37);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<com.pff.PSTException: void <init>(java.lang.String)>($r52);

        throw $r64;

     label6:
        $r8 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i8 = virtualinvoke $r8.<com.pff.PSTNodeInputStream: int read()>();

        $i9 = $i8 & 255;

        r0.<com.pff.PSTTable: int sizeOfItemKey> = $i9;

        $r9 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i10 = virtualinvoke $r9.<com.pff.PSTNodeInputStream: int read()>();

        $i11 = $i10 & 255;

        r0.<com.pff.PSTTable: int sizeOfItemValue> = $i11;

        $r10 = $r5.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i12 = virtualinvoke $r10.<com.pff.PSTNodeInputStream: int read()>();

        $i13 = $i12 & 255;

        r0.<com.pff.PSTTable: int numberOfIndexLevels> = $i13;

        $i14 = r0.<com.pff.PSTTable: int numberOfIndexLevels>;

        if $i14 == 0 goto label7;

     label7:
        $l15 = virtualinvoke $r5.<com.pff.PSTTable$NodeInfo: long seekAndReadLong(long,int)>(4L, 4);

        $i16 = (int) $l15;

        r0.<com.pff.PSTTable: int hidRoot> = $i16;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<com.pff.PSTTable: java.lang.String description>;

        $r13 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table (");

        $r15 = r0.<com.pff.PSTTable: java.lang.String tableType>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hidUserRoot: ");

        $i17 = r0.<com.pff.PSTTable: int hidUserRoot>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - 0x");

        $i18 = r0.<com.pff.PSTTable: int hidUserRoot>;

        $l19 = (long) $i18;

        $r21 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l19);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size Of Keys: ");

        $i20 = r0.<com.pff.PSTTable: int sizeOfItemKey>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - 0x");

        $i21 = r0.<com.pff.PSTTable: int sizeOfItemKey>;

        $l22 = (long) $i21;

        $r27 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l22);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size Of Values: ");

        $i23 = r0.<com.pff.PSTTable: int sizeOfItemValue>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - 0x");

        $i24 = r0.<com.pff.PSTTable: int sizeOfItemValue>;

        $l25 = (long) $i24;

        $r33 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l25);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hidRoot: ");

        $i26 = r0.<com.pff.PSTTable: int hidRoot>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - 0x");

        $i27 = r0.<com.pff.PSTTable: int hidRoot>;

        $l28 = (long) $i27;

        $r39 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l28);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.pff.PSTTable: java.lang.String description> = $r42;

        return;
    }

    protected void releaseRawData()
    {
        com.pff.PSTTable r0;

        r0 := @this: com.pff.PSTTable;

        r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems> = null;

        return;
    }

    public int getRowCount()
    {
        int $i0;
        com.pff.PSTTable r0;

        r0 := @this: com.pff.PSTTable;

        $i0 = r0.<com.pff.PSTTable: int numberOfKeys>;

        return $i0;
    }

    protected com.pff.PSTTable$NodeInfo getNodeInfo(int) throws com.pff.PSTException, java.io.IOException
    {
        java.lang.Integer $r11, $r16, $r21, $r33, $r35, $r46;
        java.lang.Long $r14;
        com.pff.PSTFile $r39;
        java.lang.StringBuilder $r19, $r23, $r26, $r27, $r29, $r53, $r54;
        com.pff.PSTNodeInputStream $r3, $r4, $r5, $r6, $r8, $r38, $r42, $r50;
        java.lang.Object[] $r10, $r15, $r20, $r45;
        long $l4, $l5, $l7, $l8, $l12, $l13, $l17, $l18, $l25;
        java.lang.String $r12, $r17, $r22, $r24, $r30, $r47;
        java.io.IOException $r43;
        com.pff.PSTTable$NodeInfo $r49, $r51, $r57;
        boolean $z0;
        com.pff.PSTException $r52, $r55, $r56;
        java.util.HashMap $r1, $r32, $r34;
        int i0, $i1, $i2, $i3, $i6, $i9, $i10, $i11, $i14, i15, $i16, $i19, i20, $i21, $i22, $i23, $i24, $i26, i27, i28, i29, i30, $i32;
        com.pff.PSTDescriptorItem r48;
        java.lang.Long[] $r2, $r13, $r28;
        java.lang.Object $r36;
        com.pff.PSTTable r0;

        r0 := @this: com.pff.PSTTable;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        $r49 = new com.pff.PSTTable$NodeInfo;

        $r42 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        specialinvoke $r49.<com.pff.PSTTable$NodeInfo: void <init>(com.pff.PSTTable,int,int,com.pff.PSTNodeInputStream)>(r0, 0, 0, $r42);

        return $r49;

     label01:
        $r1 = r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems>;

        if $r1 == null goto label06;

        $r32 = r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r32.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r33);

        if $z0 == 0 goto label06;

        $r34 = r0.<com.pff.PSTTable: java.util.HashMap subNodeDescriptorItems>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r36 = virtualinvoke $r34.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r35);

        r48 = (com.pff.PSTDescriptorItem) $r36;

     label02:
        $r50 = new com.pff.PSTNodeInputStream;

        $r38 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        $r39 = virtualinvoke $r38.<com.pff.PSTNodeInputStream: com.pff.PSTFile getPSTFile()>();

        specialinvoke $r50.<com.pff.PSTNodeInputStream: void <init>(com.pff.PSTFile,com.pff.PSTDescriptorItem)>($r39, r48);

        $r51 = new com.pff.PSTTable$NodeInfo;

        $l25 = virtualinvoke $r50.<com.pff.PSTNodeInputStream: long length()>();

        $i26 = (int) $l25;

        specialinvoke $r51.<com.pff.PSTTable$NodeInfo: void <init>(com.pff.PSTTable,int,int,com.pff.PSTNodeInputStream)>(r0, 0, $i26, $r50);

     label03:
        goto label05;

     label04:
        $r43 := @caughtexception;

        $r52 = new com.pff.PSTException;

        $r45 = newarray (java.lang.Object)[1];

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r45[0] = $r46;

        $r47 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("IOException reading subNode: 0x%08X", $r45);

        specialinvoke $r52.<com.pff.PSTException: void <init>(java.lang.String)>($r47);

        throw $r52;

     label05:
        return $r51;

     label06:
        $i1 = i0 & 31;

        if $i1 == 0 goto label07;

        return null;

     label07:
        i27 = i0 >>> 16;

        $r2 = r0.<com.pff.PSTTable: java.lang.Long[] arrayBlocks>;

        $i2 = lengthof $r2;

        if i27 <= $i2 goto label08;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("getNodeInfo: block doesn\'t exist! hnid = 0x%08X\n", $r15);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r20 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27);

        $r20[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("getNodeInfo: block doesn\'t exist! whichBlock = 0x%08X\n", $r20);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = r0.<com.pff.PSTTable: java.lang.Long[] arrayBlocks>;

        $i24 = lengthof $r28;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new com.pff.PSTException;

        specialinvoke $r55.<com.pff.PSTException: void <init>(java.lang.String)>($r30);

        throw $r55;

     label08:
        $i32 = (int) 65535;

        $i3 = i0 & $i32;

        i28 = $i3 >> 5;

        i29 = 0;

        if i27 <= 0 goto label09;

        $r13 = r0.<com.pff.PSTTable: java.lang.Long[] arrayBlocks>;

        $i21 = i27 - 1;

        $r14 = $r13[$i21];

        i29 = virtualinvoke $r14.<java.lang.Long: int intValue()>();

     label09:
        $r3 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        $l4 = (long) i29;

        $l5 = virtualinvoke $r3.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>($l4, 2);

        $i6 = (int) $l5;

        $i22 = $i6 + i29;

        $r4 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        $l7 = (long) $i22;

        $l8 = virtualinvoke $r4.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>($l7, 2);

        $i23 = (int) $l8;

        $i9 = $i23 + 1;

        if i28 < $i9 goto label10;

        $r56 = new com.pff.PSTException;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("getNodeInfo: node index doesn\'t exist! nid = 0x%08X\n", $r10);

        specialinvoke $r56.<com.pff.PSTException: void <init>(java.lang.String)>($r12);

        throw $r56;

     label10:
        $i10 = 2 * i28;

        $i11 = $i10 + 2;

        i30 = $i22 + $i11;

        $r5 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        $l12 = (long) i30;

        $l13 = virtualinvoke $r5.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>($l12, 2);

        $i14 = (int) $l13;

        i15 = $i14 + i29;

        $r6 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        $i16 = i30 + 2;

        $l17 = (long) $i16;

        $l18 = virtualinvoke $r6.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>($l17, 2);

        $i19 = (int) $l18;

        i20 = $i19 + i29;

        $r57 = new com.pff.PSTTable$NodeInfo;

        $r8 = r0.<com.pff.PSTTable: com.pff.PSTNodeInputStream in>;

        specialinvoke $r57.<com.pff.PSTTable$NodeInfo: void <init>(com.pff.PSTTable,int,int,com.pff.PSTNodeInputStream)>(r0, i15, i20, $r8);

        return $r57;

        catch java.io.IOException from label02 to label03 with label04;
    }
}
