public class org.sat4j.tools.MultiTracing extends java.lang.Object implements org.sat4j.specs.SearchListener
{
    private static final long serialVersionUID;
    private final java.util.Collection listeners;

    public transient void <init>(org.sat4j.specs.SearchListener[])
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.List $r4;
        org.sat4j.specs.SearchListener[] r2;
        java.util.Collection $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r2 := @parameter0: org.sat4j.specs.SearchListener[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners> = $r1;

        $r3 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void <init>(java.util.List)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.List r2;
        java.util.Collection $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners> = $r1;

        $r3 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>(r2);

        return;
    }

    public void assuming(int)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void assuming(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void propagating(int, org.sat4j.specs.IConstr)
    {
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        org.sat4j.specs.IConstr r5;
        org.sat4j.tools.MultiTracing r0;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        r5 := @parameter1: org.sat4j.specs.IConstr;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void propagating(int,org.sat4j.specs.IConstr)>(i0, r5);

        goto label1;

     label2:
        return;
    }

    public void backtracking(int)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void backtracking(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void adding(int)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void adding(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void learn(org.sat4j.specs.IConstr)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        org.sat4j.specs.IConstr r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: org.sat4j.specs.IConstr;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void learn(org.sat4j.specs.IConstr)>(r5);

        goto label1;

     label2:
        return;
    }

    public void delete(int[])
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        int[] r5;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: int[];

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void delete(int[])>(r5);

        goto label1;

     label2:
        return;
    }

    public void conflictFound(org.sat4j.specs.IConstr, int, int)
    {
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        org.sat4j.specs.IConstr r5;
        org.sat4j.tools.MultiTracing r0;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: org.sat4j.specs.IConstr;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void conflictFound(org.sat4j.specs.IConstr,int,int)>(r5, i0, i1);

        goto label1;

     label2:
        return;
    }

    public void conflictFound(int)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void conflictFound(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void solutionFound(int[])
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        int[] r5;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: int[];

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void solutionFound(int[])>(r5);

        goto label1;

     label2:
        return;
    }

    public void beginLoop()
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void beginLoop()>();

        goto label1;

     label2:
        return;
    }

    public void start()
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void start()>();

        goto label1;

     label2:
        return;
    }

    public void end(org.sat4j.specs.Lbool)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;
        org.sat4j.specs.Lbool r5;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: org.sat4j.specs.Lbool;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void end(org.sat4j.specs.Lbool)>(r5);

        goto label1;

     label2:
        return;
    }

    public void restarting()
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void restarting()>();

        goto label1;

     label2:
        return;
    }

    public void backjump(int)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void backjump(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void init(org.sat4j.specs.ISolverService)
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        org.sat4j.specs.ISolverService r5;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        r5 := @parameter0: org.sat4j.specs.ISolverService;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void init(org.sat4j.specs.ISolverService)>(r5);

        goto label1;

     label2:
        return;
    }

    public void cleaning()
    {
        org.sat4j.tools.MultiTracing r0;
        java.util.Iterator $r2;
        org.sat4j.specs.SearchListener r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.sat4j.tools.MultiTracing;

        $r1 = r0.<org.sat4j.tools.MultiTracing: java.util.Collection listeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.SearchListener) $r3;

        interfaceinvoke r4.<org.sat4j.specs.SearchListener: void cleaning()>();

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.sat4j.tools.MultiTracing: long serialVersionUID> = 1L;

        return;
    }
}
