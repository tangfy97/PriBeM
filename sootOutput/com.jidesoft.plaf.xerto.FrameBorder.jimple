public class com.jidesoft.plaf.xerto.FrameBorder extends java.lang.Object implements javax.swing.border.Border, javax.swing.plaf.UIResource
{
    private static final java.awt.Insets INSETS;

    public void <init>()
    {
        com.jidesoft.plaf.xerto.FrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.FrameBorder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.awt.Insets getBorderInsets(java.awt.Component)
    {
        java.awt.Insets $r0;
        com.jidesoft.plaf.xerto.FrameBorder r1;
        java.awt.Component r2;

        r1 := @this: com.jidesoft.plaf.xerto.FrameBorder;

        r2 := @parameter0: java.awt.Component;

        $r0 = <com.jidesoft.plaf.xerto.FrameBorder: java.awt.Insets INSETS>;

        return $r0;
    }

    public boolean isBorderOpaque()
    {
        com.jidesoft.plaf.xerto.FrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.FrameBorder;

        return 0;
    }

    public void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int)
    {
        java.awt.Color $r1, $r2, $r3, $r4, $r9, $r11;
        java.awt.Component r5;
        java.lang.String $r7, $r8;
        java.awt.Container $r10;
        com.jidesoft.plaf.xerto.FrameBorder r12;
        boolean $z0;
        java.awt.Graphics r0;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59;
        javax.swing.JComponent $r6;

        r12 := @this: com.jidesoft.plaf.xerto.FrameBorder;

        r5 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.awt.Graphics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i3 = i0 + i2;

        $i4 = $i3 - 3;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, i1, $i4, i1);

        $i6 = i1 + i5;

        $i7 = $i6 - 3;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, i1, i0, $i7);

        $i8 = i0 + i2;

        $i13 = $i8 - 3;

        $i9 = i0 + i2;

        $i12 = $i9 - 3;

        $i10 = i1 + i5;

        $i11 = $i10 - 3;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i13, i1, $i12, $i11);

        $i14 = i1 + i5;

        $i19 = $i14 - 3;

        $i15 = i0 + i2;

        $i18 = $i15 - 3;

        $i16 = i1 + i5;

        $i17 = $i16 - 3;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, $i19, $i18, $i17);

        $r2 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i20 = i0 + i2;

        $i21 = $i20 - 2;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i21, i1, 2, 2);

        $i22 = i1 + i5;

        $i23 = $i22 - 2;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(i0, $i23, 2, 2);

        $r3 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlMidShadowColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i24 = i0 + i2;

        $i30 = $i24 - 2;

        $i29 = i1 + 1;

        $i25 = i0 + i2;

        $i28 = $i25 - 2;

        $i26 = i1 + i5;

        $i27 = $i26 - 2;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i30, $i29, $i28, $i27);

        $i37 = i0 + 1;

        $i31 = i1 + i5;

        $i36 = $i31 - 2;

        $i32 = i0 + i2;

        $i35 = $i32 - 2;

        $i33 = i1 + i5;

        $i34 = $i33 - 2;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i37, $i36, $i35, $i34);

        $r4 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlLightShadowColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        $i38 = i0 + i2;

        $i44 = $i38 - 1;

        $i43 = i1 + 2;

        $i39 = i0 + i2;

        $i42 = $i39 - 1;

        $i40 = i1 + i5;

        $i41 = $i40 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i44, $i43, $i42, $i41);

        $r7 = "DockableFrameUI";

        $r6 = (javax.swing.JComponent) r5;

        $r8 = virtualinvoke $r6.<javax.swing.JComponent: java.lang.String getUIClassID()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r5.<java.awt.Component: java.awt.Container getParent()>();

        $i52 = virtualinvoke $r10.<java.awt.Container: int getComponentCount()>();

        if $i52 <= 1 goto label1;

        $r11 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.selectedTabBackground");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r11);

        $i59 = i0 + 2;

        $i53 = i1 + i5;

        $i58 = $i53 - 1;

        $i54 = i0 + i2;

        $i57 = $i54 - 2;

        $i55 = i1 + i5;

        $i56 = $i55 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i59, $i58, $i57, $i56);

        goto label2;

     label1:
        $r9 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlLightShadowColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r9);

        $i51 = i0 + 2;

        $i45 = i1 + i5;

        $i50 = $i45 - 1;

        $i46 = i0 + i2;

        $i49 = $i46 - 1;

        $i47 = i1 + i5;

        $i48 = $i47 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i51, $i50, $i49, $i48);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.awt.Insets $r0;

        $r0 = new java.awt.Insets;

        specialinvoke $r0.<java.awt.Insets: void <init>(int,int,int,int)>(1, 1, 3, 3);

        <com.jidesoft.plaf.xerto.FrameBorder: java.awt.Insets INSETS> = $r0;

        return;
    }
}
