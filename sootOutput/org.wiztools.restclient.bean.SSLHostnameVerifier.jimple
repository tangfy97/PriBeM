public final enum class org.wiztools.restclient.bean.SSLHostnameVerifier extends java.lang.Enum
{
    public static final enum org.wiztools.restclient.bean.SSLHostnameVerifier STRICT;
    public static final enum org.wiztools.restclient.bean.SSLHostnameVerifier BROWSER_COMPATIBLE;
    public static final enum org.wiztools.restclient.bean.SSLHostnameVerifier ALLOW_ALL;
    private java.lang.String displayName;
    private static final org.wiztools.restclient.bean.SSLHostnameVerifier[] $VALUES;

    public static org.wiztools.restclient.bean.SSLHostnameVerifier[] values()
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.wiztools.restclient.bean.SSLHostnameVerifier[]) $r1;

        return $r2;
    }

    public static org.wiztools.restclient.bean.SSLHostnameVerifier valueOf(java.lang.String)
    {
        java.lang.String r0;
        org.wiztools.restclient.bean.SSLHostnameVerifier $r2;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/wiztools/restclient/bean/SSLHostnameVerifier;", r0);

        $r2 = (org.wiztools.restclient.bean.SSLHostnameVerifier) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier r0;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: org.wiztools.restclient.bean.SSLHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.wiztools.restclient.bean.SSLHostnameVerifier: java.lang.String displayName> = r2;

        return;
    }

    public java.lang.String toString()
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier r0;
        java.lang.String $r1;

        r0 := @this: org.wiztools.restclient.bean.SSLHostnameVerifier;

        $r1 = r0.<org.wiztools.restclient.bean.SSLHostnameVerifier: java.lang.String displayName>;

        return $r1;
    }

    public static org.wiztools.restclient.bean.SSLHostnameVerifier[] getAll()
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier[] $r0;
        org.wiztools.restclient.bean.SSLHostnameVerifier $r1, $r2, $r3;

        $r0 = newarray (org.wiztools.restclient.bean.SSLHostnameVerifier)[3];

        $r1 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier STRICT>;

        $r0[0] = $r1;

        $r2 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier BROWSER_COMPATIBLE>;

        $r0[1] = $r2;

        $r3 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier ALLOW_ALL>;

        $r0[2] = $r3;

        return $r0;
    }

    static void <clinit>()
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier[] $r3;
        org.wiztools.restclient.bean.SSLHostnameVerifier $r0, $r1, $r2, $r4, $r5, $r6;

        $r0 = new org.wiztools.restclient.bean.SSLHostnameVerifier;

        specialinvoke $r0.<org.wiztools.restclient.bean.SSLHostnameVerifier: void <init>(java.lang.String,int,java.lang.String)>("STRICT", 0, "Strict");

        <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier STRICT> = $r0;

        $r1 = new org.wiztools.restclient.bean.SSLHostnameVerifier;

        specialinvoke $r1.<org.wiztools.restclient.bean.SSLHostnameVerifier: void <init>(java.lang.String,int,java.lang.String)>("BROWSER_COMPATIBLE", 1, "Browser Compatible");

        <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier BROWSER_COMPATIBLE> = $r1;

        $r2 = new org.wiztools.restclient.bean.SSLHostnameVerifier;

        specialinvoke $r2.<org.wiztools.restclient.bean.SSLHostnameVerifier: void <init>(java.lang.String,int,java.lang.String)>("ALLOW_ALL", 2, "Allow All");

        <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier ALLOW_ALL> = $r2;

        $r3 = newarray (org.wiztools.restclient.bean.SSLHostnameVerifier)[3];

        $r4 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier STRICT>;

        $r3[0] = $r4;

        $r5 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier BROWSER_COMPATIBLE>;

        $r3[1] = $r5;

        $r6 = <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier ALLOW_ALL>;

        $r3[2] = $r6;

        <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier[] $VALUES> = $r3;

        return;
    }
}
