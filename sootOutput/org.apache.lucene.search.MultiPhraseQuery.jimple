public class org.apache.lucene.search.MultiPhraseQuery extends org.apache.lucene.search.Query
{
    private java.lang.String field;
    private java.util.ArrayList termArrays;
    private java.util.ArrayList positions;
    private int slop;

    public void <init>()
    {
        org.apache.lucene.search.MultiPhraseQuery r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions> = $r2;

        r0.<org.apache.lucene.search.MultiPhraseQuery: int slop> = 0;

        return;
    }

    public void setSlop(int)
    {
        int i0;
        org.apache.lucene.search.MultiPhraseQuery r0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.search.MultiPhraseQuery: int slop> = i0;

        return;
    }

    public int getSlop()
    {
        int $i0;
        org.apache.lucene.search.MultiPhraseQuery r0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        $i0 = r0.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        return $i0;
    }

    public void add(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.Term[] $r1;
        org.apache.lucene.search.MultiPhraseQuery r0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $r1 = newarray (org.apache.lucene.index.Term)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[])>($r1);

        return;
    }

    public void add(org.apache.lucene.index.Term[])
    {
        java.lang.Integer $r6;
        java.util.ArrayList $r1, $r3, $r4;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r5;
        org.apache.lucene.index.Term[] r2;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r2 := @parameter0: org.apache.lucene.index.Term[];

        i4 = 0;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $r3 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 1;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r6 = (java.lang.Integer) $r5;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        i4 = $i3 + 1;

     label1:
        virtualinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>(r2, i4);

        return;
    }

    public void add(org.apache.lucene.index.Term[], int)
    {
        org.apache.lucene.index.Term $r6, $r15, $r18;
        java.lang.Integer $r5;
        java.util.ArrayList $r1, $r3, $r4;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, i1, i2, $i3;
        org.apache.lucene.index.Term[] r2;
        java.lang.String $r7, $r8, $r12, $r17, $r19;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r16;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r2 := @parameter0: org.apache.lucene.index.Term[];

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        $r18 = r2[0];

        $r19 = virtualinvoke $r18.<org.apache.lucene.index.Term: java.lang.String field()>();

        r0.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field> = $r19;

     label1:
        i2 = 0;

     label2:
        $i3 = lengthof r2;

        if i2 >= $i3 goto label4;

        $r6 = r2[i2];

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r8 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All phrase terms must be in the same field (");

        $r12 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = r2[i2];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r3 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return;
    }

    public java.util.List getTermArrays()
    {
        java.util.List $r2;
        org.apache.lucene.search.MultiPhraseQuery r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public int[] getPositions()
    {
        java.lang.Integer $r6;
        java.util.ArrayList $r1, $r3, $r4;
        int[] r2;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (java.lang.Integer) $r5;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public void extractTerms(java.util.Set)
    {
        java.util.Iterator $r2;
        org.apache.lucene.index.Term r5;
        java.util.Set r6;
        java.util.ArrayList $r1;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int i0, i1;
        java.lang.Object $r3;
        org.apache.lucene.index.Term[] r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r6 := @parameter0: java.util.Set;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.Term[]) $r3;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r5 = r4[i1];

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>(r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)
    {
        org.apache.lucene.index.Term $r7;
        java.util.ArrayList $r1, $r2, $r3;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, $i1, i2;
        org.apache.lucene.index.Term[] r11;
        org.apache.lucene.search.BooleanClause$Occur $r8;
        boolean $z0;
        org.apache.lucene.search.TermQuery $r6;
        org.apache.lucene.search.BooleanQuery $r5, $r9;
        float $f0, $f1;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader r10;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r10 := @parameter0: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r9 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r9.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $f1 = virtualinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        virtualinvoke $r9.<org.apache.lucene.search.BooleanQuery: void setBoost(float)>($f1);

        return $r9;

     label1:
        $r2 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label4;

        $r3 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r11 = (org.apache.lucene.index.Term[]) $r4;

        $r5 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r5.<org.apache.lucene.search.BooleanQuery: void <init>(boolean)>(1);

        i2 = 0;

     label2:
        $i1 = lengthof r11;

        if i2 >= $i1 goto label3;

        $r6 = new org.apache.lucene.search.TermQuery;

        $r7 = r11[i2];

        specialinvoke $r6.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r7);

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r5.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r6, $r8);

        i2 = i2 + 1;

        goto label2;

     label3:
        $f0 = virtualinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        virtualinvoke $r5.<org.apache.lucene.search.BooleanQuery: void setBoost(float)>($f0);

        return $r5;

     label4:
        return r0;
    }

    public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight $r0;
        org.apache.lucene.search.MultiPhraseQuery r1;
        org.apache.lucene.search.IndexSearcher r2;

        r1 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r2 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r0 = new org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight;

        specialinvoke $r0.<org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight: void <init>(org.apache.lucene.search.MultiPhraseQuery,org.apache.lucene.search.IndexSearcher)>(r1, r2);

        return $r0;
    }

    public final java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.index.Term $r11, $r13;
        java.lang.Integer $r10;
        org.apache.lucene.index.Term[] r7;
        boolean $z0, z1, $z2;
        float $f0;
        java.lang.StringBuilder $r19;
        java.util.ArrayList $r8, $r17;
        org.apache.lucene.search.MultiPhraseQuery r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13;
        java.lang.String $r2, $r3, $r4, $r5, $r12, $r14, r15, $r16;
        java.util.Iterator $r18;
        java.lang.Object $r6, $r9;

        r1 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r15 := @parameter0: java.lang.String;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        if $r2 == null goto label01;

        $r16 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z0 != 0 goto label02;

     label01:
        $r3 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label02:
        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        i8 = 0;

        $r17 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r18 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

        $i13 = (int) -1;

        i9 = $i13;

        z1 = 1;

     label03:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r6 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.index.Term[]) $r6;

        $r8 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if z1 == 0 goto label04;

        z1 = 0;

        goto label06;

     label04:
        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i10 = 1;

     label05:
        $i3 = $i2 - i9;

        if i10 >= $i3 goto label06;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("? ");

        i10 = i10 + 1;

        goto label05;

     label06:
        $i4 = lengthof r7;

        if $i4 <= 1 goto label10;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i11 = 0;

     label07:
        $i5 = lengthof r7;

        if i11 >= $i5 goto label09;

        $r13 = r7[i11];

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.Term: java.lang.String text()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $i6 = lengthof r7;

        $i7 = $i6 - 1;

        if i11 >= $i7 goto label08;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label08:
        i11 = i11 + 1;

        goto label07;

     label09:
        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label11;

     label10:
        $r11 = r7[0];

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.Term: java.lang.String text()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

     label11:
        i9 = $i2;

        i8 = i8 + 1;

        goto label03;

     label12:
        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $i0 = r1.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        if $i0 == 0 goto label13;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $i1 = r1.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

     label13:
        $f0 = virtualinvoke r1.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        $r4 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.ArrayList $r3, $r4, $r5, $r6;
        byte $b0;
        org.apache.lucene.search.MultiPhraseQuery r1, r2;
        int $i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1;
        java.lang.Object r0;

        r2 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.search.MultiPhraseQuery;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.lucene.search.MultiPhraseQuery) r0;

        $f0 = virtualinvoke r2.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        $f1 = virtualinvoke r1.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label2;

        $i2 = r2.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        $i1 = r1.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        if $i2 != $i1 goto label2;

        $r4 = r2.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r3 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $z1 = specialinvoke r2.<org.apache.lucene.search.MultiPhraseQuery: boolean termArraysEquals(java.util.List,java.util.List)>($r4, $r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $r5 = r1.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $z2 = virtualinvoke $r6.<java.util.ArrayList: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        java.util.ArrayList $r1;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: float getBoost()>();

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i1 = r0.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        $i2 = $i0 ^ $i1;

        $i3 = specialinvoke r0.<org.apache.lucene.search.MultiPhraseQuery: int termArraysHashCode()>();

        $i4 = $i2 ^ $i3;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        $i5 = virtualinvoke $r1.<java.util.ArrayList: int hashCode()>();

        $i6 = $i4 ^ $i5;

        $i7 = $i6 ^ 1254510867;

        return $i7;
    }

    private int termArraysHashCode()
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r1;
        org.apache.lucene.search.MultiPhraseQuery r0;
        int $i0, i1, $i2;
        java.lang.Object $r3;
        org.apache.lucene.index.Term[] r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.MultiPhraseQuery;

        i1 = 1;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.Term[]) $r3;

        $i0 = 31 * i1;

        if r4 != null goto label2;

        $i2 = 0;

        goto label3;

     label2:
        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(r4);

     label3:
        i1 = $i0 + $i2;

        goto label1;

     label4:
        return i1;
    }

    private boolean termArraysEquals(java.util.List, java.util.List)
    {
        java.util.ListIterator $r2, $r3;
        java.util.List r0, r1;
        org.apache.lucene.search.MultiPhraseQuery r8;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        org.apache.lucene.index.Term[] r5, r7;
        boolean $z0, $z1;

        r8 := @this: org.apache.lucene.search.MultiPhraseQuery;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.Term[]) $r4;

        $r6 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.index.Term[]) $r6;

        if r5 != null goto label3;

        if r7 != null goto label4;

        goto label5;

     label3:
        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r5, r7);

        if $z1 != 0 goto label5;

     label4:
        return 0;

     label5:
        goto label2;

     label6:
        return 1;
    }

    static java.util.ArrayList access$000(org.apache.lucene.search.MultiPhraseQuery)
    {
        org.apache.lucene.search.MultiPhraseQuery r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.apache.lucene.search.MultiPhraseQuery;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList termArrays>;

        return $r1;
    }

    static java.lang.String access$100(org.apache.lucene.search.MultiPhraseQuery)
    {
        java.lang.String $r1;
        org.apache.lucene.search.MultiPhraseQuery r0;

        r0 := @parameter0: org.apache.lucene.search.MultiPhraseQuery;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.lang.String field>;

        return $r1;
    }

    static java.util.ArrayList access$200(org.apache.lucene.search.MultiPhraseQuery)
    {
        org.apache.lucene.search.MultiPhraseQuery r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.apache.lucene.search.MultiPhraseQuery;

        $r1 = r0.<org.apache.lucene.search.MultiPhraseQuery: java.util.ArrayList positions>;

        return $r1;
    }

    static int access$300(org.apache.lucene.search.MultiPhraseQuery)
    {
        int $i0;
        org.apache.lucene.search.MultiPhraseQuery r0;

        r0 := @parameter0: org.apache.lucene.search.MultiPhraseQuery;

        $i0 = r0.<org.apache.lucene.search.MultiPhraseQuery: int slop>;

        return $i0;
    }
}
