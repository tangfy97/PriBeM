final class com.google.inject.internal.util.$LineNumbers extends java.lang.Object
{
    private final java.lang.Class type;
    private final java.util.Map lines;
    private java.lang.String source;
    private int firstLine;

    public void <init>(java.lang.Class) throws java.io.IOException
    {
        java.util.HashMap $r1;
        com.google.inject.internal.asm.$ClassReader $r11;
        com.google.inject.internal.util.$LineNumbers$LineNumberReader $r12;
        com.google.inject.internal.util.$LineNumbers r0;
        java.lang.Class r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.String $r5, $r6, $r9;
        boolean $z0;
        java.io.InputStream $r10;

        r0 := @this: com.google.inject.internal.util.$LineNumbers;

        r2 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.inject.internal.util.$LineNumbers: java.util.Map lines> = $r1;

        r0.<com.google.inject.internal.util.$LineNumbers: int firstLine> = 2147483647;

        r0.<com.google.inject.internal.util.$LineNumbers: java.lang.Class type> = r2;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r2.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r9);

        if $r10 == null goto label1;

        $r11 = new com.google.inject.internal.asm.$ClassReader;

        specialinvoke $r11.<com.google.inject.internal.asm.$ClassReader: void <init>(java.io.InputStream)>($r10);

        $r12 = new com.google.inject.internal.util.$LineNumbers$LineNumberReader;

        specialinvoke $r12.<com.google.inject.internal.util.$LineNumbers$LineNumberReader: void <init>(com.google.inject.internal.util.$LineNumbers,com.google.inject.internal.util.$LineNumbers$1)>(r0, null);

        virtualinvoke $r11.<com.google.inject.internal.asm.$ClassReader: void accept(com.google.inject.internal.asm.$ClassVisitor,int)>($r12, 4);

     label1:
        return;
    }

    public java.lang.String getSource()
    {
        com.google.inject.internal.util.$LineNumbers r0;
        java.lang.String $r1;

        r0 := @this: com.google.inject.internal.util.$LineNumbers;

        $r1 = r0.<com.google.inject.internal.util.$LineNumbers: java.lang.String source>;

        return $r1;
    }

    public java.lang.Integer getLineNumber(java.lang.reflect.Member)
    {
        java.lang.Object[] $r4;
        java.lang.reflect.Member r1;
        java.lang.Integer $r10;
        com.google.inject.internal.util.$LineNumbers r0;
        java.util.Map $r7;
        java.lang.Class $r2, $r3, $r5, $r6;
        java.lang.Object $r9;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$LineNumbers;

        r1 := @parameter0: java.lang.reflect.Member;

        $r2 = r0.<com.google.inject.internal.util.$LineNumbers: java.lang.Class type>;

        $r3 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r1;

        $r5 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r4[1] = $r5;

        $r6 = r0.<com.google.inject.internal.util.$LineNumbers: java.lang.Class type>;

        $r4[2] = $r6;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Member %s belongs to %s, not %s", $r4);

        $r7 = r0.<com.google.inject.internal.util.$LineNumbers: java.util.Map lines>;

        $r8 = specialinvoke r0.<com.google.inject.internal.util.$LineNumbers: java.lang.String memberKey(java.lang.reflect.Member)>(r1);

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Integer) $r9;

        return $r10;
    }

    public int getFirstLine()
    {
        int $i0, $i1;
        com.google.inject.internal.util.$LineNumbers r0;

        r0 := @this: com.google.inject.internal.util.$LineNumbers;

        $i0 = r0.<com.google.inject.internal.util.$LineNumbers: int firstLine>;

        if $i0 != 2147483647 goto label1;

        $i1 = 1;

        goto label2;

     label1:
        $i1 = r0.<com.google.inject.internal.util.$LineNumbers: int firstLine>;

     label2:
        return $i1;
    }

    private java.lang.String memberKey(java.lang.reflect.Member)
    {
        java.lang.reflect.Constructor $r9;
        int i0, i1;
        java.lang.String $r6, $r12, $r14, $r16, $r19, $r21, $r22;
        java.lang.reflect.Method $r18;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Member r0;
        java.lang.Class[] $r10;
        java.lang.IllegalArgumentException $r1;
        com.google.inject.internal.util.$LineNumbers r23;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r11, $r15, $r17, $r20;
        java.lang.Class $r4, r13;

        r23 := @this: com.google.inject.internal.util.$LineNumbers;

        r0 := @parameter0: java.lang.reflect.Member;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "member");

        $z0 = r0 instanceof java.lang.reflect.Field;

        if $z0 == 0 goto label1;

        $r22 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        return $r22;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = (java.lang.reflect.Method) r0;

        $r19 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label2:
        $z2 = r0 instanceof java.lang.reflect.Constructor;

        if $z2 == 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<init>(");

        $r9 = (java.lang.reflect.Constructor) r0;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r10;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r13 = $r10[i1];

        $r14 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getDescriptor(java.lang.Class)>(r13);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported implementation class for Member, ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    static java.lang.String access$102(com.google.inject.internal.util.$LineNumbers, java.lang.String)
    {
        com.google.inject.internal.util.$LineNumbers r0;
        java.lang.String r1;

        r0 := @parameter0: com.google.inject.internal.util.$LineNumbers;

        r1 := @parameter1: java.lang.String;

        r0.<com.google.inject.internal.util.$LineNumbers: java.lang.String source> = r1;

        return r1;
    }

    static int access$200(com.google.inject.internal.util.$LineNumbers)
    {
        int $i0;
        com.google.inject.internal.util.$LineNumbers r0;

        r0 := @parameter0: com.google.inject.internal.util.$LineNumbers;

        $i0 = r0.<com.google.inject.internal.util.$LineNumbers: int firstLine>;

        return $i0;
    }

    static int access$202(com.google.inject.internal.util.$LineNumbers, int)
    {
        int i0;
        com.google.inject.internal.util.$LineNumbers r0;

        r0 := @parameter0: com.google.inject.internal.util.$LineNumbers;

        i0 := @parameter1: int;

        r0.<com.google.inject.internal.util.$LineNumbers: int firstLine> = i0;

        return i0;
    }

    static java.util.Map access$300(com.google.inject.internal.util.$LineNumbers)
    {
        com.google.inject.internal.util.$LineNumbers r0;
        java.util.Map $r1;

        r0 := @parameter0: com.google.inject.internal.util.$LineNumbers;

        $r1 = r0.<com.google.inject.internal.util.$LineNumbers: java.util.Map lines>;

        return $r1;
    }
}
