public final class org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl extends org.apache.xmlbeans.impl.jam.internal.elements.MemberImpl implements org.apache.xmlbeans.impl.jam.mutable.MField
{
    private org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef;

    void <init>(java.lang.String, org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl, java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        java.lang.String r2, r3;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.MemberImpl: void <init>(org.apache.xmlbeans.impl.jam.internal.elements.ElementImpl)>(r1);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.MemberImpl: void setSimpleName(java.lang.String)>(r2);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.QualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>(r3, r1);

        r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef> = $r4;

        return;
    }

    public void setType(org.apache.xmlbeans.impl.jam.JClass)
    {
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r2;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        org.apache.xmlbeans.impl.jam.JClass r0;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.JClass;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null type");

        throw $r3;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.DirectJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(org.apache.xmlbeans.impl.jam.JClass)>(r0);

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef> = $r2;

        return;
    }

    public void setType(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        java.lang.String r0;
        org.apache.xmlbeans.impl.jam.JClass $r2;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r3;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null qcname");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r3 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r2;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.QualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>(r0, $r3);

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef> = $r4;

        return;
    }

    public void setUnqualifiedType(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        java.lang.String r0;
        org.apache.xmlbeans.impl.jam.JClass $r2;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r3;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null ucname");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r3 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r2;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>(r0, $r3);

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef> = $r4;

        return;
    }

    public org.apache.xmlbeans.impl.jam.JClass getType()
    {
        java.lang.IllegalStateException $r4;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r1, $r2;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        org.apache.xmlbeans.impl.jam.JClass $r3;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef mTypeClassRef>;

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef: org.apache.xmlbeans.impl.jam.JClass getRefClass()>();

        return $r3;
    }

    public boolean isFinal()
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        return $z0;
    }

    public boolean isStatic()
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }

    public boolean isVolatile()
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>($i0);

        return $z0;
    }

    public boolean isTransient()
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        return $z0;
    }

    public void accept(org.apache.xmlbeans.impl.jam.visitor.MVisitor)
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        org.apache.xmlbeans.impl.jam.visitor.MVisitor r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.visitor.MVisitor;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.visitor.MVisitor: void visit(org.apache.xmlbeans.impl.jam.mutable.MField)>(r1);

        return;
    }

    public void accept(org.apache.xmlbeans.impl.jam.visitor.JVisitor)
    {
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        org.apache.xmlbeans.impl.jam.visitor.JVisitor r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.visitor.JVisitor;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.visitor.JVisitor: void visit(org.apache.xmlbeans.impl.jam.JField)>(r1);

        return;
    }

    public java.lang.String getQualifiedName()
    {
        java.io.StringWriter $r0;
        org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl r1;
        org.apache.xmlbeans.impl.jam.JClass $r3, $r5;
        int $i0;
        java.lang.String $r2, $r4, $r6, $r7, $r8;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: int getModifiers()>();

        $r2 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r2);

        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(32);

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r4);

        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(32);

        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r6);

        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(46);

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.FieldImpl: java.lang.String getSimpleName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r8;
    }
}
