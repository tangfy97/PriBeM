public final class com.sun.xml.bind.v2.bytecode.ClassTailor extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.sun.xml.bind.v2.bytecode.ClassTailor r0;

        r0 := @this: com.sun.xml.bind.v2.bytecode.ClassTailor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toVMClassName(java.lang.Class)
    {
        java.lang.AssertionError $r4;
        java.lang.Class r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.sun.xml.bind.v2.bytecode.ClassTailor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(r0);

        return $r3;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r2;
    }

    public static java.lang.String toVMTypeName(java.lang.Class)
    {
        java.lang.String $r3, $r4, $r7, $r17, $r21, $r23;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r16;
        java.lang.Class r0, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r18, $r19, $r22;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label01;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r20 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r21 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;

     label01:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label10;

        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r8 goto label02;

        return "Z";

     label02:
        $r9 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r9 goto label03;

        return "C";

     label03:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r10 goto label04;

        return "B";

     label04:
        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r11 goto label05;

        return "D";

     label05:
        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r12 goto label06;

        return "F";

     label06:
        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r13 goto label07;

        return "I";

     label07:
        $r14 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r14 goto label08;

        return "J";

     label08:
        $r15 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r15 goto label09;

        return "S";

     label09:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label10:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static transient byte[] tailor(java.lang.Class, java.lang.String, java.lang.String[])
    {
        byte[] $r10;
        java.lang.String[] r9;
        java.lang.Class r0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r1, $r6, r8;
        java.lang.ClassLoader $r2;
        java.io.InputStream $r7;

        r0 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String[];

        $r1 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(r0);

        $r2 = staticinvoke <com.sun.xml.bind.v2.bytecode.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

        $r10 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: byte[] tailor(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String[])>($r7, $r1, r8, r9);

        return $r10;
    }

    public static transient byte[] tailor(java.io.InputStream, java.lang.String, java.lang.String, java.lang.String[])
    {
        byte[] $r4, r19;
        byte $b3;
        java.io.DataOutputStream $r22;
        boolean $z0, $z1;
        java.util.logging.Logger $r17;
        java.lang.StringBuilder $r12, $r13, $r23;
        java.io.DataInputStream $r20;
        java.io.ByteArrayOutputStream $r21;
        long $l0, $l6;
        java.lang.String[] r7;
        java.util.logging.Level $r16;
        short $s1, $s5;
        int $i2, $i4, $i7, $i8, $i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String $r5, r6, $r8, r9, $r14, r18;
        java.io.IOException $r15;
        java.lang.IllegalArgumentException $r24;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String[];

        $r20 = new java.io.DataInputStream;

        specialinvoke $r20.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

     label01:
        $r21 = new java.io.ByteArrayOutputStream;

        specialinvoke $r21.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $r22 = new java.io.DataOutputStream;

        specialinvoke $r22.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r21);

        $l0 = virtualinvoke $r20.<java.io.DataInputStream: long readLong()>();

        virtualinvoke $r22.<java.io.DataOutputStream: void writeLong(long)>($l0);

        $s1 = virtualinvoke $r20.<java.io.DataInputStream: short readShort()>();

        $i12 = (int) $s1;

        virtualinvoke $r22.<java.io.DataOutputStream: void writeShort(int)>($i12);

        i10 = 0;

     label02:
        $i13 = (int) $s1;

        if i10 >= $i13 goto label15;

        $b3 = virtualinvoke $r20.<java.io.DataInputStream: byte readByte()>();

        $i14 = (int) $b3;

        virtualinvoke $r22.<java.io.DataOutputStream: void writeByte(int)>($i14);

        $i15 = (int) $b3;

        tableswitch($i15)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label13;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label10;
            case 7: goto label11;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label12;
            case 11: goto label12;
            case 12: goto label12;
            default: goto label13;
        };

     label03:
        goto label14;

     label04:
        $r5 = virtualinvoke $r20.<java.io.DataInputStream: java.lang.String readUTF()>();

        r18 = $r5;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label05;

        r18 = r9;

        goto label08;

     label05:
        i11 = 0;

     label06:
        $i8 = lengthof r7;

        if i11 >= $i8 goto label08;

        $r8 = r7[i11];

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label07;

        $i9 = i11 + 1;

        r18 = r7[$i9];

        goto label08;

     label07:
        i11 = i11 + 2;

        goto label06;

     label08:
        virtualinvoke $r22.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r18);

        goto label14;

     label09:
        $i7 = virtualinvoke $r20.<java.io.DataInputStream: int readInt()>();

        virtualinvoke $r22.<java.io.DataOutputStream: void writeInt(int)>($i7);

        goto label14;

     label10:
        i10 = i10 + 1;

        $l6 = virtualinvoke $r20.<java.io.DataInputStream: long readLong()>();

        virtualinvoke $r22.<java.io.DataOutputStream: void writeLong(long)>($l6);

        goto label14;

     label11:
        $s5 = virtualinvoke $r20.<java.io.DataInputStream: short readShort()>();

        $i16 = (int) $s5;

        virtualinvoke $r22.<java.io.DataOutputStream: void writeShort(int)>($i16);

        goto label14;

     label12:
        $i4 = virtualinvoke $r20.<java.io.DataInputStream: int readInt()>();

        virtualinvoke $r22.<java.io.DataOutputStream: void writeInt(int)>($i4);

        goto label14;

     label13:
        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown constant type ");

        $i17 = (int) $b3;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r24;

     label14:
        i10 = i10 + 1;

        goto label02;

     label15:
        r19 = newarray (byte)[512];

     label16:
        $i2 = virtualinvoke $r20.<java.io.DataInputStream: int read(byte[])>(r19);

        if $i2 <= 0 goto label17;

        virtualinvoke $r22.<java.io.DataOutputStream: void write(byte[],int,int)>(r19, 0, $i2);

        goto label16;

     label17:
        virtualinvoke $r20.<java.io.DataInputStream: void close()>();

        virtualinvoke $r22.<java.io.DataOutputStream: void close()>();

        $r4 = virtualinvoke $r21.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label18:
        return $r4;

     label19:
        $r15 := @caughtexception;

        $r17 = <com.sun.xml.bind.v2.bytecode.ClassTailor: java.util.logging.Logger logger>;

        $r16 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r17.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r16, "failed to tailor", $r15);

        return null;

        catch java.io.IOException from label01 to label18 with label19;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.util.logging.Logger $r1;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/bytecode/ClassTailor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.bytecode.ClassTailor: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.bytecode.ClassTailor: java.util.logging.Logger logger> = $r1;

        return;
    }
}
