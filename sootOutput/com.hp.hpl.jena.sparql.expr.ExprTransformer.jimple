public class com.hp.hpl.jena.sparql.expr.ExprTransformer extends java.lang.Object
{
    private static com.hp.hpl.jena.sparql.expr.ExprTransformer singleton;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprTransformer get()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer $r0;

        $r0 = <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprTransformer singleton>;

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.expr.Expr r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformer $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprTransformer get()>();

        $r3 = specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transformation(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.expr.ExprList r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformer $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprTransformer get()>();

        $r3 = specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprList transformation(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        return $r3;
    }

    private com.hp.hpl.jena.sparql.expr.Expr transformation(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor $r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.expr.Expr r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprTransformer r2;

        r2 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void <init>(com.hp.hpl.jena.sparql.expr.ExprTransform)>(r1);

        $r4 = specialinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transformation(com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r3);

        return $r4;
    }

    private com.hp.hpl.jena.sparql.expr.ExprList transformation(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor $r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.expr.Expr r6, $r8;
        com.hp.hpl.jena.sparql.expr.ExprList $r2, r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformer r7;
        java.lang.Object $r5;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void <init>(com.hp.hpl.jena.sparql.expr.ExprTransform)>(r1);

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.expr.Expr) $r5;

        $r8 = specialinvoke r7.<com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transformation(com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r6);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r8);

        goto label1;

     label2:
        return $r2;
    }

    private com.hp.hpl.jena.sparql.expr.Expr transformation(com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.Expr r1, $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformer r3;

        r3 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprWalker: void walk(com.hp.hpl.jena.sparql.expr.ExprVisitor,com.hp.hpl.jena.sparql.expr.Expr)>(r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr result()>();

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer $r0;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprTransformer;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer: void <init>()>();

        <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprTransformer singleton> = $r0;

        return;
    }
}
