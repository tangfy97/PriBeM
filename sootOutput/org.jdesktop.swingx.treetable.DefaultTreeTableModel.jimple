public class org.jdesktop.swingx.treetable.DefaultTreeTableModel extends org.jdesktop.swingx.treetable.AbstractTreeTableModel
{
    protected java.util.List columnIdentifiers;
    private boolean useAutoCalculatedIdentifiers;

    public void <init>()
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void <init>(org.jdesktop.swingx.treetable.TreeTableNode)>(null);

        return;
    }

    public void <init>(org.jdesktop.swingx.treetable.TreeTableNode)
    {
        org.jdesktop.swingx.treetable.TreeTableNode r1;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void <init>(org.jdesktop.swingx.treetable.TreeTableNode,java.util.List)>(r1, null);

        return;
    }

    public void <init>(org.jdesktop.swingx.treetable.TreeTableNode, java.util.List)
    {
        org.jdesktop.swingx.treetable.TreeTableNode r1;
        java.util.List r2;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.jdesktop.swingx.treetable.AbstractTreeTableModel: void <init>(java.lang.Object)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void setColumnIdentifiers(java.util.List)>(r2);

        return;
    }

    private boolean isValidTreeTableNode(java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r1;
        org.jdesktop.swingx.treetable.TreeTableNode r3;
        java.lang.Object r0, $r2;
        boolean $z0, z1, $z2;

        r1 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r0 := @parameter0: java.lang.Object;

        z1 = 0;

        $z0 = r0 instanceof org.jdesktop.swingx.treetable.TreeTableNode;

        if $z0 == 0 goto label4;

        r3 = (org.jdesktop.swingx.treetable.TreeTableNode) r0;

     label1:
        if z1 != 0 goto label4;

        if r3 == null goto label4;

        $r2 = r1.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root>;

        if r3 != $r2 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z2;

        r3 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getParent()>();

        goto label1;

     label4:
        return z1;
    }

    public void setColumnIdentifiers(java.util.List)
    {
        java.util.List r1, $r4;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        org.jdesktop.swingx.treetable.TreeTableNode $r3;
        org.jdesktop.swingx.tree.TreeModelSupport $r2;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.util.List;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean useAutoCalculatedIdentifiers> = $z1;

        $z0 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean useAutoCalculatedIdentifiers>;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode getRoot()>();

        $r4 = staticinvoke <org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.util.List getAutoCalculatedIdentifiers(org.jdesktop.swingx.treetable.TreeTableNode)>($r3);

        goto label4;

     label3:
        $r4 = r1;

     label4:
        r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.util.List columnIdentifiers> = $r4;

        $r2 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        virtualinvoke $r2.<org.jdesktop.swingx.tree.TreeModelSupport: void fireNewRoot()>();

        return;
    }

    private static java.util.List getAutoCalculatedIdentifiers(org.jdesktop.swingx.treetable.TreeTableNode)
    {
        int $i0, i1;
        org.jdesktop.swingx.treetable.TreeTableNode r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label2;

        i1 = 0;

        $i0 = interfaceinvoke r1.<org.jdesktop.swingx.treetable.TreeTableNode: int getColumnCount()>();

     label1:
        if i1 >= $i0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(null);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.jdesktop.swingx.treetable.TreeTableNode getRoot()
    {
        org.jdesktop.swingx.treetable.TreeTableNode $r2;
        java.lang.Object $r1;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        $r1 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root>;

        $r2 = (org.jdesktop.swingx.treetable.TreeTableNode) $r1;

        return $r2;
    }

    public java.lang.Object getValueAt(java.lang.Object, int)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        java.lang.IllegalArgumentException $r2, $r5;
        int i0, $i1, $i2;
        org.jdesktop.swingx.treetable.TreeTableNode r3;
        java.lang.Object r1, $r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node must be a valid node managed by this model");

        throw $r5;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: int getColumnCount()>();

        if i0 < $i1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column must be a valid index");

        throw $r2;

     label3:
        r3 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $i2 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: int getColumnCount()>();

        if i0 < $i2 goto label4;

        return null;

     label4:
        $r4 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: java.lang.Object getValueAt(int)>(i0);

        return $r4;
    }

    public void setValueAt(java.lang.Object, java.lang.Object, int)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        javax.swing.tree.TreePath $r5;
        org.jdesktop.swingx.treetable.TreeTableNode[] $r7;
        java.lang.IllegalArgumentException $r2, $r8;
        org.jdesktop.swingx.tree.TreeModelSupport $r6;
        int i0, $i1, $i2;
        org.jdesktop.swingx.treetable.TreeTableNode r3;
        java.lang.Object r1, r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node must be a valid node managed by this model");

        throw $r8;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: int getColumnCount()>();

        if i0 < $i1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column must be a valid index");

        throw $r2;

     label3:
        r3 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $i2 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: int getColumnCount()>();

        if i0 >= $i2 goto label4;

        interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: void setValueAt(java.lang.Object,int)>(r4, i0);

        $r6 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        $r5 = new javax.swing.tree.TreePath;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)>(r3);

        specialinvoke $r5.<javax.swing.tree.TreePath: void <init>(java.lang.Object[])>($r7);

        virtualinvoke $r6.<org.jdesktop.swingx.tree.TreeModelSupport: void firePathChanged(javax.swing.tree.TreePath)>($r5);

     label4:
        return;
    }

    public int getColumnCount()
    {
        int $i0;
        java.util.List $r1;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        $r1 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.util.List columnIdentifiers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        java.util.List $r1, $r2;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        int i0, $i1;
        java.lang.Object r3;
        java.lang.String $r4;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        i0 := @parameter0: int;

        r3 = null;

        $r1 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.util.List columnIdentifiers>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label1;

        if i0 < 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.util.List columnIdentifiers>;

        r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

     label1:
        if r3 != null goto label2;

        $r4 = specialinvoke r0.<org.jdesktop.swingx.treetable.AbstractTreeTableModel: java.lang.String getColumnName(int)>(i0);

        goto label3;

     label2:
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

     label3:
        return $r4;
    }

    public java.lang.Object getChild(java.lang.Object, int)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        int i0;
        org.jdesktop.swingx.treetable.TreeTableNode $r2, $r3;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parent must be a TreeTableNode managed by this model");

        throw $r4;

     label1:
        $r2 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $r3 = interfaceinvoke $r2.<org.jdesktop.swingx.treetable.TreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getChildAt(int)>(i0);

        return $r3;
    }

    public int getChildCount(java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        int $i0;
        org.jdesktop.swingx.treetable.TreeTableNode $r2;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parent must be a TreeTableNode managed by this model");

        throw $r3;

     label1:
        $r2 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $i0 = interfaceinvoke $r2.<org.jdesktop.swingx.treetable.TreeTableNode: int getChildCount()>();

        return $i0;
    }

    public int getIndexOfChild(java.lang.Object, java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        int $i0, $i2;
        org.jdesktop.swingx.treetable.TreeTableNode $r3, $r4;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

     label1:
        $i2 = (int) -1;

        return $i2;

     label2:
        $r4 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $r3 = (org.jdesktop.swingx.treetable.TreeTableNode) r2;

        $i0 = interfaceinvoke $r4.<org.jdesktop.swingx.treetable.TreeTableNode: int getIndex(javax.swing.tree.TreeNode)>($r3);

        return $i0;
    }

    public boolean isCellEditable(java.lang.Object, int)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        java.lang.IllegalArgumentException $r2, $r4;
        int i0, $i1, $i2;
        org.jdesktop.swingx.treetable.TreeTableNode r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node must be a valid node managed by this model");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: int getColumnCount()>();

        if i0 < $i1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column must be a valid index");

        throw $r2;

     label3:
        r3 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $i2 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: int getColumnCount()>();

        if i0 < $i2 goto label4;

        return 0;

     label4:
        $z1 = interfaceinvoke r3.<org.jdesktop.swingx.treetable.TreeTableNode: boolean isEditable(int)>(i0);

        return $z1;
    }

    public boolean isLeaf(java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        org.jdesktop.swingx.treetable.TreeTableNode $r2;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean isValidTreeTableNode(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node must be a TreeTableNode managed by this model");

        throw $r3;

     label1:
        $r2 = (org.jdesktop.swingx.treetable.TreeTableNode) r1;

        $z1 = interfaceinvoke $r2.<org.jdesktop.swingx.treetable.TreeTableNode: boolean isLeaf()>();

        return $z1;
    }

    public org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)
    {
        java.lang.Object[] $r6;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r2;
        org.jdesktop.swingx.treetable.TreeTableNode[] $r5, $r7;
        java.util.ArrayList $r0;
        org.jdesktop.swingx.treetable.TreeTableNode r1, r8;
        java.lang.Object $r3, $r4;

        r2 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r8 = r1;

     label1:
        $r3 = r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root>;

        if r8 == $r3 goto label2;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r8);

        r8 = interfaceinvoke r8.<org.jdesktop.swingx.treetable.TreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getParent()>();

        goto label1;

     label2:
        $r4 = r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root>;

        if r8 != $r4 goto label3;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r8);

     label3:
        $r5 = newarray (org.jdesktop.swingx.treetable.TreeTableNode)[0];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.jdesktop.swingx.treetable.TreeTableNode[]) $r6;

        return $r7;
    }

    public void setRoot(org.jdesktop.swingx.treetable.TreeTableNode)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        org.jdesktop.swingx.treetable.TreeTableNode r1;
        org.jdesktop.swingx.tree.TreeModelSupport $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root> = r1;

        $z0 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: boolean useAutoCalculatedIdentifiers>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void setColumnIdentifiers(java.util.List)>(null);

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        virtualinvoke $r2.<org.jdesktop.swingx.tree.TreeModelSupport: void fireNewRoot()>();

     label2:
        return;
    }

    public void insertNodeInto(org.jdesktop.swingx.treetable.MutableTreeTableNode, org.jdesktop.swingx.treetable.MutableTreeTableNode, int)
    {
        org.jdesktop.swingx.treetable.MutableTreeTableNode r0, r1;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r2;
        javax.swing.tree.TreePath $r3;
        int i0;
        org.jdesktop.swingx.treetable.TreeTableNode[] $r5;
        org.jdesktop.swingx.tree.TreeModelSupport $r4;

        r2 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r1 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        r0 := @parameter1: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        i0 := @parameter2: int;

        interfaceinvoke r0.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode,int)>(r1, i0);

        $r4 = r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        $r3 = new javax.swing.tree.TreePath;

        $r5 = virtualinvoke r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)>(r0);

        specialinvoke $r3.<javax.swing.tree.TreePath: void <init>(java.lang.Object[])>($r5);

        virtualinvoke $r4.<org.jdesktop.swingx.tree.TreeModelSupport: void fireChildAdded(javax.swing.tree.TreePath,int,java.lang.Object)>($r3, i0, r1);

        return;
    }

    public void removeNodeFromParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)
    {
        org.jdesktop.swingx.treetable.MutableTreeTableNode r0, r2;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r3;
        javax.swing.tree.TreePath $r4;
        org.jdesktop.swingx.treetable.TreeTableNode[] $r6;
        org.jdesktop.swingx.tree.TreeModelSupport $r5;
        java.lang.IllegalArgumentException $r7;
        int $i0;
        org.jdesktop.swingx.treetable.TreeTableNode $r1;

        r3 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r0 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        $r1 = interfaceinvoke r0.<org.jdesktop.swingx.treetable.MutableTreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getParent()>();

        r2 = (org.jdesktop.swingx.treetable.MutableTreeTableNode) $r1;

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node does not have a parent.");

        throw $r7;

     label1:
        $i0 = interfaceinvoke r2.<org.jdesktop.swingx.treetable.MutableTreeTableNode: int getIndex(javax.swing.tree.TreeNode)>(r0);

        interfaceinvoke r0.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void removeFromParent()>();

        $r5 = r3.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        $r4 = new javax.swing.tree.TreePath;

        $r6 = virtualinvoke r3.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)>(r2);

        specialinvoke $r4.<javax.swing.tree.TreePath: void <init>(java.lang.Object[])>($r6);

        virtualinvoke $r5.<org.jdesktop.swingx.tree.TreeModelSupport: void fireChildRemoved(javax.swing.tree.TreePath,int,java.lang.Object)>($r4, $i0, r0);

        return;
    }

    public void valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r2;
        javax.swing.tree.TreePath r0;
        org.jdesktop.swingx.tree.TreeModelSupport $r7;
        java.lang.IllegalArgumentException $r8;
        org.jdesktop.swingx.treetable.TreeTableNode r5;
        java.lang.Object $r1, $r3, $r4, r6;

        r2 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r0 := @parameter0: javax.swing.tree.TreePath;

        r6 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getPathComponent(int)>(0);

        $r3 = r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: java.lang.Object root>;

        if $r1 == $r3 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid path");

        throw $r8;

     label1:
        $r4 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        r5 = (org.jdesktop.swingx.treetable.TreeTableNode) $r4;

        interfaceinvoke r5.<org.jdesktop.swingx.treetable.TreeTableNode: void setUserObject(java.lang.Object)>(r6);

        $r7 = r2.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.tree.TreeModelSupport modelSupport>;

        virtualinvoke $r7.<org.jdesktop.swingx.tree.TreeModelSupport: void firePathChanged(javax.swing.tree.TreePath)>(r0);

        return;
    }

    public void setUserObject(org.jdesktop.swingx.treetable.TreeTableNode, java.lang.Object)
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;
        javax.swing.tree.TreePath $r1;
        org.jdesktop.swingx.treetable.TreeTableNode r2;
        org.jdesktop.swingx.treetable.TreeTableNode[] $r3;
        java.lang.Object r4;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        r2 := @parameter0: org.jdesktop.swingx.treetable.TreeTableNode;

        r4 := @parameter1: java.lang.Object;

        $r1 = new javax.swing.tree.TreePath;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)>(r2);

        specialinvoke $r1.<javax.swing.tree.TreePath: void <init>(java.lang.Object[])>($r3);

        virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)>($r1, r4);

        return;
    }

    public volatile java.lang.Object getRoot()
    {
        org.jdesktop.swingx.treetable.TreeTableNode $r1;
        org.jdesktop.swingx.treetable.DefaultTreeTableModel r0;

        r0 := @this: org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: org.jdesktop.swingx.treetable.TreeTableNode getRoot()>();

        return $r1;
    }
}
