public class org.apache.log4j.jmx.Agent extends java.lang.Object
{
    static org.apache.log4j.Logger log;
    static java.lang.Class class$org$apache$log4j$jmx$Agent;

    public void <init>()
    {
        org.apache.log4j.jmx.Agent r0;

        r0 := @this: org.apache.log4j.jmx.Agent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object createServer()
    {
        java.lang.IllegalAccessException $r2;
        java.lang.RuntimeException $r3, $r6, $r9;
        java.lang.InstantiationException $r5;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.ClassNotFoundException $r8;
        java.lang.String $r4, $r7, $r10;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.jdmk.comm.HtmlAdapterServer");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label6:
        return $r1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    private static void startServer(java.lang.Object)
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException $r8;
        java.lang.Thread $r14;
        java.lang.String $r7, $r10, $r17;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r5;
        java.lang.Class[] $r2;
        java.lang.RuntimeException $r6, $r9, $r13, $r15, $r16;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

     label01:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("start", $r2);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

     label02:
        goto label10;

     label03:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r12 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label04;

        $r15 = (java.lang.RuntimeException) $r12;

        throw $r15;

     label04:
        if $r12 == null goto label07;

        $z1 = $r12 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label05;

        $z2 = $r12 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label06;

     label05:
        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

     label06:
        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label07:
        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>()>();

        throw $r13;

     label08:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label09:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label10:
        return;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label01 to label02 with label08;
        catch java.lang.IllegalAccessException from label01 to label02 with label09;
    }

    public void start()
    {
        org.apache.log4j.jmx.Agent r11;
        javax.management.ObjectName $r3, $r6;
        java.lang.RuntimeException $r7;
        org.apache.log4j.Logger $r2, $r4, $r8, $r10;
        org.apache.log4j.jmx.HierarchyDynamicMBean $r5;
        javax.management.JMException $r9;
        javax.management.MBeanServer $r0;
        java.lang.Object $r1;

        r11 := @this: org.apache.log4j.jmx.Agent;

        $r0 = staticinvoke <javax.management.MBeanServerFactory: javax.management.MBeanServer createMBeanServer()>();

        $r1 = staticinvoke <org.apache.log4j.jmx.Agent: java.lang.Object createServer()>();

     label1:
        $r2 = <org.apache.log4j.jmx.Agent: org.apache.log4j.Logger log>;

        virtualinvoke $r2.<org.apache.log4j.Category: void info(java.lang.Object)>("Registering HtmlAdaptorServer instance.");

        $r3 = new javax.management.ObjectName;

        specialinvoke $r3.<javax.management.ObjectName: void <init>(java.lang.String)>("Adaptor:name=html,port=8082");

        interfaceinvoke $r0.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r1, $r3);

        $r4 = <org.apache.log4j.jmx.Agent: org.apache.log4j.Logger log>;

        virtualinvoke $r4.<org.apache.log4j.Category: void info(java.lang.Object)>("Registering HierarchyDynamicMBean instance.");

        $r5 = new org.apache.log4j.jmx.HierarchyDynamicMBean;

        specialinvoke $r5.<org.apache.log4j.jmx.HierarchyDynamicMBean: void <init>()>();

        $r6 = new javax.management.ObjectName;

        specialinvoke $r6.<javax.management.ObjectName: void <init>(java.lang.String)>("log4j:hiearchy=default");

        interfaceinvoke $r0.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r5, $r6);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        $r10 = <org.apache.log4j.jmx.Agent: org.apache.log4j.Logger log>;

        virtualinvoke $r10.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Problem while registering MBeans instances.", $r9);

        return;

     label4:
        $r7 := @caughtexception;

        $r8 = <org.apache.log4j.jmx.Agent: org.apache.log4j.Logger log>;

        virtualinvoke $r8.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Problem while registering MBeans instances.", $r7);

        return;

     label5:
        staticinvoke <org.apache.log4j.jmx.Agent: void startServer(java.lang.Object)>($r1);

        return;

        catch javax.management.JMException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        $r0 = <org.apache.log4j.jmx.Agent: java.lang.Class class$org$apache$log4j$jmx$Agent>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.jmx.Agent: java.lang.Class class$(java.lang.String)>("org.apache.log4j.jmx.Agent");

        <org.apache.log4j.jmx.Agent: java.lang.Class class$org$apache$log4j$jmx$Agent> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.jmx.Agent: java.lang.Class class$org$apache$log4j$jmx$Agent>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.jmx.Agent: org.apache.log4j.Logger log> = $r1;

        return;
    }
}
