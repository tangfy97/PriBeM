public class org.eclipse.jetty.servlet.FilterMapping extends java.lang.Object implements org.eclipse.jetty.util.component.Dumpable
{
    public static final int DEFAULT;
    public static final int REQUEST;
    public static final int FORWARD;
    public static final int INCLUDE;
    public static final int ERROR;
    public static final int ASYNC;
    public static final int ALL;
    private int _dispatches;
    private java.lang.String _filterName;
    private transient org.eclipse.jetty.servlet.FilterHolder _holder;
    private java.lang.String[] _pathSpecs;
    private java.lang.String[] _servletNames;

    public static javax.servlet.DispatcherType dispatch(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r6;
        javax.servlet.DispatcherType $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        $r1 = "request";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r11 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType REQUEST>;

        return $r11;

     label1:
        $r2 = "forward";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r10 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType FORWARD>;

        return $r10;

     label2:
        $r3 = "include";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r9 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType INCLUDE>;

        return $r9;

     label3:
        $r4 = "error";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        $r8 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType ERROR>;

        return $r8;

     label4:
        $r5 = "async";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label5;

        $r7 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType ASYNC>;

        return $r7;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r6;
    }

    public static int dispatch(javax.servlet.DispatcherType)
    {
        int[] $r1;
        int $i0, $i1;
        javax.servlet.DispatcherType r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: javax.servlet.DispatcherType;

        $r1 = <org.eclipse.jetty.servlet.FilterMapping$1: int[] $SwitchMap$javax$servlet$DispatcherType>;

        $i0 = virtualinvoke r0.<javax.servlet.DispatcherType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return 1;

     label2:
        return 16;

     label3:
        return 2;

     label4:
        return 4;

     label5:
        return 8;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r0.<javax.servlet.DispatcherType: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public void <init>()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = 0;

        return;
    }

    boolean appliesTo(java.lang.String, int)
    {
        java.lang.String[] $r1, $r2, $r4;
        int i0, $i1, i2;
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String $r3, r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.servlet.FilterMapping: boolean appliesTo(int)>(i0);

        if $z0 == 0 goto label3;

        i2 = 0;

     label1:
        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs>;

        $i1 = lengthof $r1;

        if i2 >= $i1 goto label3;

        $r2 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs>;

        $r3 = $r2[i2];

        if $r3 == null goto label2;

        $r4 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs>;

        $r6 = $r4[i2];

        $z1 = staticinvoke <org.eclipse.jetty.http.PathMap: boolean match(java.lang.String,java.lang.String,boolean)>($r6, r5, 1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean appliesTo(int)
    {
        org.eclipse.jetty.servlet.FilterHolder $r1;
        int $i0, i1, $i2, $i3;
        org.eclipse.jetty.servlet.FilterMapping r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        i1 := @parameter0: int;

        $i0 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        if $i0 != 0 goto label4;

        if i1 == 1 goto label1;

        if i1 != 16 goto label2;

        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: org.eclipse.jetty.servlet.FilterHolder _holder>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.servlet.FilterHolder: boolean isAsyncSupported()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i2 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i3 = $i2 & i1;

        if $i3 == 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public java.lang.String getFilterName()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String _filterName>;

        return $r1;
    }

    org.eclipse.jetty.servlet.FilterHolder getFilterHolder()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        org.eclipse.jetty.servlet.FilterHolder $r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: org.eclipse.jetty.servlet.FilterHolder _holder>;

        return $r1;
    }

    public java.lang.String[] getPathSpecs()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] $r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs>;

        return $r1;
    }

    public void setDispatcherTypes(java.util.EnumSet)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.EnumSet r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jetty.servlet.FilterMapping r0;
        javax.servlet.DispatcherType $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r1 := @parameter0: java.util.EnumSet;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = 0;

        if r1 == null goto label5;

        $r2 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType ERROR>;

        $z0 = virtualinvoke r1.<java.util.EnumSet: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $i8 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i9 = $i8 | 8;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = $i9;

     label1:
        $r3 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType FORWARD>;

        $z1 = virtualinvoke r1.<java.util.EnumSet: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $i6 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i7 = $i6 | 2;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = $i7;

     label2:
        $r4 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType INCLUDE>;

        $z2 = virtualinvoke r1.<java.util.EnumSet: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        $i4 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i5 = $i4 | 4;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = $i5;

     label3:
        $r5 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType REQUEST>;

        $z3 = virtualinvoke r1.<java.util.EnumSet: boolean contains(java.lang.Object)>($r5);

        if $z3 == 0 goto label4;

        $i2 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i3 = $i2 | 1;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = $i3;

     label4:
        $r6 = <javax.servlet.DispatcherType: javax.servlet.DispatcherType ASYNC>;

        $z4 = virtualinvoke r1.<java.util.EnumSet: boolean contains(java.lang.Object)>($r6);

        if $z4 == 0 goto label5;

        $i0 = r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $i1 = $i0 | 16;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = $i1;

     label5:
        return;
    }

    public void setDispatches(int)
    {
        int i0;
        org.eclipse.jetty.servlet.FilterMapping r0;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches> = i0;

        return;
    }

    public void setFilterName(java.lang.String)
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String _filterName> = r1;

        return;
    }

    void setFilterHolder(org.eclipse.jetty.servlet.FilterHolder)
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String $r2;
        org.eclipse.jetty.servlet.FilterHolder r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r1 := @parameter0: org.eclipse.jetty.servlet.FilterHolder;

        r0.<org.eclipse.jetty.servlet.FilterMapping: org.eclipse.jetty.servlet.FilterHolder _holder> = r1;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.servlet.FilterHolder: java.lang.String getName()>();

        virtualinvoke r0.<org.eclipse.jetty.servlet.FilterMapping: void setFilterName(java.lang.String)>($r2);

        return;
    }

    public void setPathSpecs(java.lang.String[])
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r1 := @parameter0: java.lang.String[];

        r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs> = r1;

        return;
    }

    public void setPathSpec(java.lang.String)
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs> = $r1;

        return;
    }

    public java.lang.String[] getServletNames()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] $r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r1 = r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _servletNames>;

        return $r1;
    }

    public void setServletNames(java.lang.String[])
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r1 := @parameter0: java.lang.String[];

        r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _servletNames> = r1;

        return;
    }

    public void setServletName(java.lang.String)
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        r0.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _servletNames> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r2, $r6;
        int $i0;
        java.lang.String $r12, $r14;
        java.util.List $r3, $r7;
        org.eclipse.jetty.servlet.FilterMapping r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r10, $r11, $r13;

        r1 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _pathSpecs>;

        $r3 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = r1.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String[] _servletNames>;

        $r7 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==");

        $i0 = r1.<org.eclipse.jetty.servlet.FilterMapping: int _dispatches>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=>");

        $r12 = r1.<org.eclipse.jetty.servlet.FilterMapping: java.lang.String _filterName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException
    {
        java.lang.Appendable r0, $r3;
        org.eclipse.jetty.servlet.FilterMapping r1;
        java.lang.String $r2, r4;

        r1 := @this: org.eclipse.jetty.servlet.FilterMapping;

        r0 := @parameter0: java.lang.Appendable;

        r4 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r3 = interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

        interfaceinvoke $r3.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\n");

        return;
    }

    public java.lang.String dump()
    {
        org.eclipse.jetty.servlet.FilterMapping r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.FilterMapping;

        $r1 = staticinvoke <org.eclipse.jetty.util.component.AggregateLifeCycle: java.lang.String dump(org.eclipse.jetty.util.component.Dumpable)>(r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.eclipse.jetty.servlet.FilterMapping: int ALL> = 31;

        <org.eclipse.jetty.servlet.FilterMapping: int ASYNC> = 16;

        <org.eclipse.jetty.servlet.FilterMapping: int ERROR> = 8;

        <org.eclipse.jetty.servlet.FilterMapping: int INCLUDE> = 4;

        <org.eclipse.jetty.servlet.FilterMapping: int FORWARD> = 2;

        <org.eclipse.jetty.servlet.FilterMapping: int REQUEST> = 1;

        <org.eclipse.jetty.servlet.FilterMapping: int DEFAULT> = 0;

        return;
    }
}
