public class com.hp.hpl.jena.sparql.function.CastXSD_Boolean$Instance extends com.hp.hpl.jena.sparql.function.CastXSD$Instance
{

    void <init>(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.function.CastXSD_Boolean$Instance r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.CastXSD_Boolean$Instance;

        r1 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: void <init>(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r1);

        return;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4, $r5, $r6, $r9, $r10, $r13, $r14;
        java.math.BigDecimal $r11, $r12;
        byte $b0;
        int $i1, $i2;
        java.math.BigInteger $r7, $r8;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r3;
        com.hp.hpl.jena.sparql.function.CastXSD_Boolean$Instance r1;
        float $f0;

        r1 := @this: com.hp.hpl.jena.sparql.function.CastXSD_Boolean$Instance;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter2: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z0 == 0 goto label10;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z2 != 0 goto label01;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z5 == 0 goto label06;

     label01:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z3 == 0 goto label02;

        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        goto label03;

     label02:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $d0 = (double) $f0;

     label03:
        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label04;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z4 == 0 goto label05;

     label04:
        $r5 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r5;

     label05:
        $r6 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r6;

     label06:
        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z6 == 0 goto label08;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r12 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i2 = virtualinvoke $r11.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r12);

        if $i2 != 0 goto label07;

        $r14 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r14;

     label07:
        $r13 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r13;

     label08:
        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z7 == 0 goto label10;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i1 != 0 goto label09;

        $r10 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r10;

     label09:
        $r9 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r9;

     label10:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z1 == 0 goto label11;

        return r0;

     label11:
        $r4 = specialinvoke r1.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r2, r0, r3);

        return $r4;
    }
}
