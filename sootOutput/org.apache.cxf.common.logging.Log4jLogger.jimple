public class org.apache.cxf.common.logging.Log4jLogger extends org.apache.cxf.common.logging.AbstractDelegatingLogger
{
    private static final java.util.Map TO_LOG4J;
    private static final org.apache.log4j.Level TRACE;
    private final org.apache.log4j.Logger log;

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.log4j.Logger $r3;
        org.apache.cxf.common.logging.Log4jLogger r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r1);

        r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log> = $r3;

        return;
    }

    public java.util.logging.Level getLevel()
    {
        org.apache.log4j.Logger $r1;
        org.apache.cxf.common.logging.Log4jLogger r0;
        org.apache.log4j.Level $r2;
        java.util.logging.Level $r3;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        $r1 = r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.Level getEffectiveLevel()>();

        if $r2 == null goto label1;

        $r3 = specialinvoke r0.<org.apache.cxf.common.logging.Log4jLogger: java.util.logging.Level fromL4J(org.apache.log4j.Level)>($r2);

        return $r3;

     label1:
        return null;
    }

    public void setLevel(java.util.logging.Level) throws java.lang.SecurityException
    {
        org.apache.log4j.Logger $r3;
        org.apache.cxf.common.logging.Log4jLogger r0;
        java.util.Map $r2;
        org.apache.log4j.Level $r5;
        java.lang.Object $r4;
        java.util.logging.Level r1;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r1 := @parameter0: java.util.logging.Level;

        $r3 = r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r2 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.apache.log4j.Level) $r4;

        virtualinvoke $r3.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r5);

        return;
    }

    public synchronized void addHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        org.apache.log4j.Logger $r3;
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper $r4;
        org.apache.log4j.Appender $r5;
        org.apache.cxf.common.logging.Log4jLogger r0;
        java.util.logging.Handler r2;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r2 := @parameter0: java.util.logging.Handler;

        $r3 = r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r4 = new org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        specialinvoke $r4.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: void <init>(org.apache.cxf.common.logging.Log4jLogger,java.util.logging.Handler)>(r0, r2);

        $r5 = (org.apache.log4j.Appender) $r4;

        virtualinvoke $r3.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r5);

        return;
    }

    public synchronized void removeHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        org.apache.log4j.Logger $r2;
        org.apache.cxf.common.logging.Log4jLogger r0;
        int $i0;
        java.lang.StringBuilder $r1, $r3, $r5;
        java.lang.String $r6;
        java.util.logging.Handler r4;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r4 := @parameter0: java.util.logging.Handler;

        $r2 = r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HandlerWrapper-");

        $i0 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.log4j.Logger: void removeAppender(java.lang.String)>($r6);

        return;
    }

    public synchronized java.util.logging.Handler[] getHandlers()
    {
        java.lang.Object[] $r5;
        java.util.Enumeration $r3;
        java.util.logging.Handler[] $r4, $r6;
        java.util.ArrayList $r0;
        org.apache.log4j.Logger $r2;
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper $r9;
        org.apache.log4j.Appender r8;
        org.apache.cxf.common.logging.Log4jLogger r1;
        int $i0;
        java.lang.Object $r7;
        java.util.logging.Handler $r10;
        boolean $z0, $z1;

        r1 := @this: org.apache.cxf.common.logging.Log4jLogger;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (org.apache.log4j.Appender) $r7;

        $z1 = r8 instanceof org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        if $z1 == 0 goto label2;

        $r9 = (org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper) r8;

        $r10 = virtualinvoke $r9.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler getHandler()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        goto label1;

     label3:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r4 = newarray (java.util.logging.Handler)[$i0];

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.util.logging.Handler[]) $r5;

        return $r6;
    }

    protected void internalLogFormatted(java.lang.String, java.util.logging.LogRecord)
    {
        java.lang.Throwable $r10;
        java.util.logging.LogRecord r4;
        java.util.logging.Level $r6;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Priority $r9;
        org.apache.cxf.common.logging.Log4jLogger r0;
        java.util.Map $r5;
        java.lang.Class $r1;
        java.lang.Object $r7;
        java.lang.String $r3, r8;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r8 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.logging.LogRecord;

        $r2 = r0.<org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Logger log>;

        $r1 = class "Lorg/apache/cxf/common/logging/AbstractDelegatingLogger;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r6 = virtualinvoke r4.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (org.apache.log4j.Priority) $r7;

        $r10 = virtualinvoke r4.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r3, $r9, r8, $r10);

        return;
    }

    private java.util.logging.Level fromL4J(org.apache.log4j.Level)
    {
        org.apache.cxf.common.logging.Log4jLogger r2;
        org.apache.log4j.Level r0, $r1;
        int $i0, $i1, $i2;
        java.util.logging.Level r3;

        r2 := @this: org.apache.cxf.common.logging.Log4jLogger;

        r0 := @parameter0: org.apache.log4j.Level;

        r3 = null;

        $i0 = virtualinvoke r0.<org.apache.log4j.Level: int toInt()>();

        lookupswitch($i0)
        {
            case -2147483648: goto label1;
            case 10000: goto label6;
            case 20000: goto label5;
            case 30000: goto label4;
            case 40000: goto label3;
            case 50000: goto label2;
            case 2147483647: goto label7;
            default: goto label8;
        };

     label1:
        r3 = <java.util.logging.Level: java.util.logging.Level ALL>;

        goto label9;

     label2:
        r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        goto label9;

     label3:
        r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        goto label9;

     label4:
        r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        goto label9;

     label5:
        r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        goto label9;

     label6:
        r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        goto label9;

     label7:
        r3 = <java.util.logging.Level: java.util.logging.Level OFF>;

        goto label9;

     label8:
        $i1 = virtualinvoke r0.<org.apache.log4j.Level: int toInt()>();

        $r1 = <org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Level TRACE>;

        $i2 = virtualinvoke $r1.<org.apache.log4j.Level: int toInt()>();

        if $i1 != $i2 goto label9;

        r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

     label9:
        return r3;
    }

    private static void getFullInfoForLogUtils(java.util.logging.LogRecord, java.lang.String)
    {
        java.lang.Thread $r0;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.StackTraceElement $r4, $r7, $r9, $r12;
        java.lang.String $r3, $r5, $r8, $r10, r11, $r13;
        boolean $z0, $z1;
        java.util.logging.LogRecord r6;
        java.lang.StackTraceElement[] $r1;
        java.lang.Class $r2;

        r6 := @parameter0: java.util.logging.LogRecord;

        r11 := @parameter1: java.lang.String;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r1;

        i3 = $i0 - 2;

     label1:
        if i3 < 0 goto label4;

        $r2 = class "Lorg/apache/cxf/common/logging/LogUtils;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = $r1[i3];

        $r5 = virtualinvoke $r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r12 = $r1[i3];

        $r13 = virtualinvoke $r12.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label3;

     label2:
        $i1 = i3 + 1;

        $r7 = $r1[$i1];

        $r8 = virtualinvoke $r7.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r8);

        $i2 = i3 + 1;

        $r9 = $r1[$i2];

        $r10 = virtualinvoke $r9.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r10);

        return;

     label3:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label4:
        return;
    }

    static java.util.logging.Level access$000(org.apache.cxf.common.logging.Log4jLogger, org.apache.log4j.Level)
    {
        org.apache.cxf.common.logging.Log4jLogger r0;
        org.apache.log4j.Level r1;
        java.util.logging.Level $r2;

        r0 := @parameter0: org.apache.cxf.common.logging.Log4jLogger;

        r1 := @parameter1: org.apache.log4j.Level;

        $r2 = specialinvoke r0.<org.apache.cxf.common.logging.Log4jLogger: java.util.logging.Level fromL4J(org.apache.log4j.Level)>(r1);

        return $r2;
    }

    static void access$100(java.util.logging.LogRecord, java.lang.String)
    {
        java.lang.String r1;
        java.util.logging.LogRecord r0;

        r0 := @parameter0: java.util.logging.LogRecord;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.cxf.common.logging.Log4jLogger: void getFullInfoForLogUtils(java.util.logging.LogRecord,java.lang.String)>(r0, r1);

        return;
    }

    static java.util.Map access$200()
    {
        java.util.Map $r0;

        $r0 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.log4j.Level $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, r32;
        java.util.Map $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30;
        java.lang.Throwable $r31;
        java.util.HashMap $r0;
        java.util.logging.Level $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        java.lang.reflect.Field $r2;
        java.lang.Class $r1;
        java.lang.Object $r3;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J> = $r0;

        r32 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

     label1:
        $r1 = class "Lorg/apache/log4j/Level;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TRACE");

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r32 = (org.apache.log4j.Level) $r3;

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

     label4:
        <org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Level TRACE> = r32;

        $r6 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r5 = <java.util.logging.Level: java.util.logging.Level ALL>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r9 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r8 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r12 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r10 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r10);

        $r15 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r14 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r13 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r13);

        $r18 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r17 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $r16 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

        $r21 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r20 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r19 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r19);

        $r24 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r23 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r22 = <org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Level TRACE>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22);

        $r27 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r26 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r25 = <org.apache.cxf.common.logging.Log4jLogger: org.apache.log4j.Level TRACE>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r25);

        $r30 = <org.apache.cxf.common.logging.Log4jLogger: java.util.Map TO_LOG4J>;

        $r29 = <java.util.logging.Level: java.util.logging.Level OFF>;

        $r28 = <org.apache.log4j.Level: org.apache.log4j.Level OFF>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r28);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
