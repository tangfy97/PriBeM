public class org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox extends org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl
{

    public void <init>(org.waveprotocol.wave.model.document.util.ElementStyleView)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox r0;
        org.waveprotocol.wave.model.document.util.ElementStyleView r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.ElementStyleView;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void <init>(org.waveprotocol.wave.model.document.util.ElementStyleView)>(r1);

        return;
    }

    protected void processTextNodeInner(java.lang.Object, java.lang.Object)
    {
        int $i0, $i2, $i3, i5, $i6, $i7;
        java.lang.String $r3, $r4, $r13, r14;
        boolean $z0, $z1, $z2, $z3, z4;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox r0;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2, $r5, $r9, $r11;
        char $c1, $c4;
        java.lang.Object r1, $r6, r7, $r10, $r12;
        java.lang.StringBuilder $r15;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox;

        r1 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getData(java.lang.Object)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(10, 32);

        $r5 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        if r7 == null goto label01;

        $r11 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object asText(java.lang.Object)>(r7);

        if $r12 == null goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $r6 == null goto label04;

        $r9 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object asText(java.lang.Object)>($r6);

        if $r10 == null goto label05;

     label04:
        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        $r13 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: java.lang.String trimWhitespace(java.lang.String,boolean,boolean)>($r4, $z1, $z2);

        r14 = $r13;

        $z3 = virtualinvoke $r13.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label13;

        $r15 = new java.lang.StringBuilder;

        $i2 = virtualinvoke $r13.<java.lang.String: int length()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i2);

        z4 = 0;

        i5 = 0;

     label07:
        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        if i5 >= $i3 goto label12;

        $c4 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 != 32 goto label09;

        if z4 == 0 goto label08;

        goto label11;

     label08:
        z4 = 1;

        goto label10;

     label09:
        z4 = 0;

     label10:
        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $z0 = virtualinvoke r14.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label15;

        $i0 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i0 != 1 goto label14;

        $c1 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 != 32 goto label14;

        goto label15;

     label14:
        virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: void addTextToken(java.lang.String)>(r14);

     label15:
        return;
    }

    private static java.lang.String trimWhitespace(java.lang.String, boolean, boolean)
    {
        char $c0, $c2;
        int $i1, i3, $i4, i5, $i6, $i7, $i9;
        java.lang.String r0, $r1;
        boolean $z0, z1, z2;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i3 = 0;

        if z1 == 0 goto label4;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i6 = (int) $c2;

        if $i6 == 32 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = $i4;

        if z2 == 0 goto label7;

        i5 = $i4 - 1;

     label5:
        if i5 < i3 goto label7;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i7 = (int) $c0;

        if $i7 == 32 goto label6;

        i5 = i5 + 1;

        goto label7;

     label6:
        $i9 = (int) -1;

        i5 = i5 + $i9;

        goto label5;

     label7:
        if i3 < i5 goto label8;

        return "";

     label8:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i5);

        return $r1;
    }
}
