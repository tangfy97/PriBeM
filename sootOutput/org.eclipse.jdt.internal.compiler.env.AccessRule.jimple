public class org.eclipse.jdt.internal.compiler.env.AccessRule extends java.lang.Object
{
    public static final int IgnoreIfBetter;
    public char[] pattern;
    public int problemId;

    public void <init>(char[], int)
    {
        int i0;
        char[] r1;
        org.eclipse.jdt.internal.compiler.env.AccessRule r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: void <init>(char[],int,boolean)>(r1, i0, 0);

        return;
    }

    public void <init>(char[], int, boolean)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRule r0;
        int i0, $i1;
        char[] r1;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: char[] pattern> = r1;

        if z0 == 0 goto label1;

        $i1 = i0 | 33554432;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId> = $i1;

        return;
    }

    public int hashCode()
    {
        org.eclipse.jdt.internal.compiler.env.AccessRule r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId>;

        $i1 = $i0 * 17;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: char[] pattern>;

        $i2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int hashCode(char[])>($r1);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRule r1, r2;
        int $i0, $i1;
        char[] $r3, $r4;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.eclipse.jdt.internal.compiler.env.AccessRule;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.eclipse.jdt.internal.compiler.env.AccessRule) r0;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        $r4 = r2.<org.eclipse.jdt.internal.compiler.env.AccessRule: char[] pattern>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.env.AccessRule: char[] pattern>;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r4, $r3);

        return $z1;
    }

    public int getProblemId()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.env.AccessRule r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId>;

        $i1 = $i0 & -33554433;

        return $i1;
    }

    public boolean ignoreIfBetter()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.env.AccessRule r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.env.AccessRule: int problemId>;

        $i1 = $i0 & 33554432;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.env.AccessRule r1;
        java.lang.StringBuffer $r0;
        int $i0;
        char[] $r2;
        java.lang.String $r3;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.env.AccessRule;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pattern=");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.env.AccessRule: char[] pattern>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        $i0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.env.AccessRule: int getProblemId()>();

        lookupswitch($i0)
        {
            case 16777496: goto label2;
            case 16777523: goto label1;
            default: goto label3;
        };

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (NON ACCESSIBLE");

        goto label4;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (DISCOURAGED");

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (ACCESSIBLE");

     label4:
        $z0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.env.AccessRule: boolean ignoreIfBetter()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" | IGNORE IF BETTER");

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.env.AccessRule: int IgnoreIfBetter> = 33554432;

        return;
    }
}
