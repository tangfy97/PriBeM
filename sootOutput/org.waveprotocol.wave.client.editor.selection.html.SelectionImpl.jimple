abstract class org.waveprotocol.wave.client.editor.selection.html.SelectionImpl extends java.lang.Object
{
    static org.waveprotocol.wave.common.logging.LoggerBundle logger;

    void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract boolean selectionExists();

    abstract org.waveprotocol.wave.model.document.util.FocusedPointRange get();

    abstract org.waveprotocol.wave.model.document.util.PointRange getOrdered();

    abstract boolean isOrdered();

    abstract void set(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point);

    abstract void set(org.waveprotocol.wave.model.document.util.Point);

    abstract void clear();

    abstract void saveSelection();

    abstract void restoreSelection();

    static void <clinit>()
    {
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        <org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r0;

        return;
    }
}
