public abstract class com.mongodb.util.ThreadPool extends java.lang.Object
{
    final java.lang.String _name;
    final int _maxThreads;
    private final java.util.concurrent.atomic.AtomicInteger _inProgress;
    private final java.util.List _threads;
    private final java.util.concurrent.BlockingQueue _queue;
    private final com.mongodb.util.ThreadPool$MyThreadGroup _myThreadGroup;

    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @this: com.mongodb.util.ThreadPool;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.mongodb.util.ThreadPool: void <init>(java.lang.String,int,int)>(r1, i0, 2147483647);

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.List $r7;
        java.util.Vector $r2;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0, i1;
        java.lang.String r3;
        com.mongodb.util.ThreadPool$MyThreadGroup $r5;
        com.mongodb.util.ThreadPool r0;
        com.mongodb.util.ThreadPool$MyThread $r6;

        r0 := @this: com.mongodb.util.ThreadPool;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.mongodb.util.ThreadPool: java.util.concurrent.atomic.AtomicInteger _inProgress> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<com.mongodb.util.ThreadPool: java.util.List _threads> = $r2;

        r0.<com.mongodb.util.ThreadPool: java.lang.String _name> = r3;

        r0.<com.mongodb.util.ThreadPool: int _maxThreads> = i0;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i1);

        r0.<com.mongodb.util.ThreadPool: java.util.concurrent.BlockingQueue _queue> = $r4;

        $r5 = new com.mongodb.util.ThreadPool$MyThreadGroup;

        specialinvoke $r5.<com.mongodb.util.ThreadPool$MyThreadGroup: void <init>(com.mongodb.util.ThreadPool)>(r0);

        r0.<com.mongodb.util.ThreadPool: com.mongodb.util.ThreadPool$MyThreadGroup _myThreadGroup> = $r5;

        $r7 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        $r6 = new com.mongodb.util.ThreadPool$MyThread;

        specialinvoke $r6.<com.mongodb.util.ThreadPool$MyThread: void <init>(com.mongodb.util.ThreadPool)>(r0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public abstract void handle(java.lang.Object) throws java.lang.Exception;

    public abstract void handleError(java.lang.Object, java.lang.Exception);

    public int queueSize()
    {
        int $i0;
        java.util.concurrent.BlockingQueue $r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @this: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.BlockingQueue _queue>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>();

        return $i0;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.BlockingQueue $r1, $r8;
        java.util.List $r2, $r5, $r7;
        java.util.concurrent.atomic.AtomicInteger $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object r3;
        com.mongodb.util.ThreadPool r0;
        com.mongodb.util.ThreadPool$MyThread $r4;
        boolean $z0;

        r0 := @this: com.mongodb.util.ThreadPool;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.BlockingQueue _queue>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>();

        if $i0 > 0 goto label1;

        $r6 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.atomic.AtomicInteger _inProgress>;

        $i3 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r7 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i3 != $i4 goto label2;

     label1:
        $r2 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = r0.<com.mongodb.util.ThreadPool: int _maxThreads>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        $r4 = new com.mongodb.util.ThreadPool$MyThread;

        specialinvoke $r4.<com.mongodb.util.ThreadPool$MyThread: void <init>(com.mongodb.util.ThreadPool)>(r0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        $r8 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.BlockingQueue _queue>;

        $z0 = interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r3);

        return $z0;
    }

    public int inProgress()
    {
        int $i0;
        com.mongodb.util.ThreadPool r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.atomic.AtomicInteger _inProgress>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public int numThreads()
    {
        int $i0;
        java.util.List $r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @this: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    static java.util.List access$000(com.mongodb.util.ThreadPool)
    {
        java.util.List $r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @parameter0: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.List _threads>;

        return $r1;
    }

    static com.mongodb.util.ThreadPool$MyThreadGroup access$100(com.mongodb.util.ThreadPool)
    {
        com.mongodb.util.ThreadPool$MyThreadGroup $r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @parameter0: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: com.mongodb.util.ThreadPool$MyThreadGroup _myThreadGroup>;

        return $r1;
    }

    static java.util.concurrent.BlockingQueue access$200(com.mongodb.util.ThreadPool)
    {
        java.util.concurrent.BlockingQueue $r1;
        com.mongodb.util.ThreadPool r0;

        r0 := @parameter0: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.BlockingQueue _queue>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$300(com.mongodb.util.ThreadPool)
    {
        com.mongodb.util.ThreadPool r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: com.mongodb.util.ThreadPool;

        $r1 = r0.<com.mongodb.util.ThreadPool: java.util.concurrent.atomic.AtomicInteger _inProgress>;

        return $r1;
    }
}
