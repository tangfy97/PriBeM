public class com.jidesoft.plaf.xerto.XertoMetalUtils extends com.jidesoft.plaf.vsnet.VsnetLookAndFeelExtension
{

    public void <init>()
    {
        com.jidesoft.plaf.xerto.XertoMetalUtils r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoMetalUtils;

        specialinvoke r0.<com.jidesoft.plaf.vsnet.VsnetLookAndFeelExtension: void <init>()>();

        return;
    }

    public static void initClassDefaultsWithMenu(javax.swing.UIDefaults)
    {
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <com.jidesoft.plaf.vsnet.VsnetLookAndFeelExtension: void initClassDefaultsWithMenu(javax.swing.UIDefaults)>(r0);

        staticinvoke <com.jidesoft.plaf.xerto.XertoMetalUtils: void initClassDefaultsForXerto(javax.swing.UIDefaults)>(r0);

        return;
    }

    public static void initClassDefaults(javax.swing.UIDefaults)
    {
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <com.jidesoft.plaf.vsnet.VsnetLookAndFeelExtension: void initClassDefaults(javax.swing.UIDefaults)>(r0);

        staticinvoke <com.jidesoft.plaf.xerto.XertoMetalUtils: void initClassDefaultsForXerto(javax.swing.UIDefaults)>(r0);

        return;
    }

    private static void initClassDefaultsForXerto(javax.swing.UIDefaults)
    {
        int $i0, $i1, $i2;
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        $i0 = staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: int getProductsUsed()>();

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("RangeSliderUI", "com.jidesoft.plaf.metal.MetalRangeSliderUI");

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("CollapsiblePaneUI", "com.jidesoft.plaf.xerto.XertoCollapsiblePaneUI");

     label1:
        $i2 = $i0 & 1;

        if $i2 == 0 goto label2;

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("SidePaneUI", "com.jidesoft.plaf.xerto.XertoSidePaneUI");

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("DockableFrameUI", "com.jidesoft.plaf.xerto.XertoDockableFrameUI");

     label2:
        return;
    }

    public static void initComponentDefaultsWithMenu(javax.swing.UIDefaults)
    {
        java.awt.Color $r7, $r8, $r10, $r11, $r13, $r14, $r19, $r26, $r33, $r42, $r56;
        java.lang.Integer $r22, $r29, $r38, $r39, $r40, $r48, $r49, $r50;
        javax.swing.border.Border $r20, $r27, $r31, $r34, $r43, $r44, $r57, $r58;
        javax.swing.border.CompoundBorder $r45, $r59;
        com.jidesoft.plaf.basic.ThemePainter $r52, $r55;
        javax.swing.UIDefaults r4;
        javax.swing.plaf.ColorUIResource $r6, $r9, $r12;
        com.jidesoft.icons.MenuCheckIcon $r16, $r23, $r36, $r46;
        javax.swing.plaf.InsetsUIResource $r21, $r28, $r35, $r51;
        java.awt.Toolkit $r0;
        java.lang.Object[] $r15;
        javax.swing.plaf.BorderUIResource $r18, $r25, $r30, $r32, $r41, $r53;
        javax.swing.ImageIcon $r17, $r24, $r37, $r47;
        java.lang.Object $r1, $r2, $r3, $r5, $r54;

        r4 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("shadingtheme", "true");

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlHighlight");

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r5 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getMenuFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r4);

        $r6 = new javax.swing.plaf.ColorUIResource;

        $r7 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r8 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getMenuSelectionColor(java.awt.Color)>($r7);

        specialinvoke $r6.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r8);

        $r9 = new javax.swing.plaf.ColorUIResource;

        $r10 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r11 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getMenuBackgroundColor(java.awt.Color)>($r10);

        specialinvoke $r9.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r11);

        $r12 = new javax.swing.plaf.ColorUIResource;

        $r13 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r14 = virtualinvoke $r13.<java.awt.Color: java.awt.Color brighter()>();

        specialinvoke $r12.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r14);

        $r15 = newarray (java.lang.Object)[96];

        $r15[0] = "PopupMenuSeparator.foreground";

        $r15[1] = $r12;

        $r15[2] = "PopupMenuSeparator.background";

        $r15[3] = $r9;

        $r15[4] = "CheckBoxMenuItem.checkIcon";

        $r16 = new com.jidesoft.icons.MenuCheckIcon;

        $r17 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r16.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r17);

        $r15[5] = $r16;

        $r15[6] = "CheckBoxMenuItem.selectionBackground";

        $r15[7] = $r6;

        $r15[8] = "CheckBoxMenuItem.selectionForeground";

        $r15[9] = $r3;

        $r15[10] = "CheckBoxMenuItem.acceleratorSelectionForeground";

        $r15[11] = $r3;

        $r15[12] = "CheckBoxMenuItem.mouseHoverBackground";

        $r15[13] = $r6;

        $r15[14] = "CheckBoxMenuItem.mouseHoverBorder";

        $r18 = new javax.swing.plaf.BorderUIResource;

        $r19 = new java.awt.Color;

        specialinvoke $r19.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r20 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r19);

        specialinvoke $r18.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r20);

        $r15[15] = $r18;

        $r15[16] = "CheckBoxMenuItem.margin";

        $r21 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r21.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 0, 3, 0);

        $r15[17] = $r21;

        $r15[18] = "CheckBoxMenuItem.font";

        $r15[19] = $r5;

        $r15[20] = "CheckBoxMenuItem.acceleratorFont";

        $r15[21] = $r5;

        $r15[22] = "CheckBoxMenuItem.textIconGap";

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r15[23] = $r22;

        $r15[24] = "RadioButtonMenuItem.checkIcon";

        $r23 = new com.jidesoft.icons.MenuCheckIcon;

        $r24 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r23.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r24);

        $r15[25] = $r23;

        $r15[26] = "RadioButtonMenuItem.selectionBackground";

        $r15[27] = $r6;

        $r15[28] = "RadioButtonMenuItem.selectionForeground";

        $r15[29] = $r3;

        $r15[30] = "RadioButtonMenuItem.acceleratorSelectionForeground";

        $r15[31] = $r3;

        $r15[32] = "RadioButtonMenuItem.mouseHoverBackground";

        $r15[33] = $r6;

        $r15[34] = "RadioButtonMenuItem.mouseHoverBorder";

        $r25 = new javax.swing.plaf.BorderUIResource;

        $r26 = new java.awt.Color;

        specialinvoke $r26.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r27 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r26);

        specialinvoke $r25.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r27);

        $r15[35] = $r25;

        $r15[36] = "RadioButtonMenuItem.margin";

        $r28 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r28.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 0, 3, 0);

        $r15[37] = $r28;

        $r15[38] = "RadioButtonMenuItem.font";

        $r15[39] = $r5;

        $r15[40] = "RadioButtonMenuItem.acceleratorFont";

        $r15[41] = $r5;

        $r15[42] = "RadioButtonMenuItem.textIconGap";

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r15[43] = $r29;

        $r15[44] = "MenuBar.border";

        $r30 = new javax.swing.plaf.BorderUIResource;

        $r31 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(2, 2, 2, 2);

        specialinvoke $r30.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r31);

        $r15[45] = $r30;

        $r15[46] = "Menu.selectionBackground";

        $r15[47] = $r6;

        $r15[48] = "Menu.selectionForeground";

        $r15[49] = $r3;

        $r15[50] = "Menu.mouseHoverBackground";

        $r15[51] = $r6;

        $r15[52] = "Menu.mouseHoverBorder";

        $r32 = new javax.swing.plaf.BorderUIResource;

        $r33 = new java.awt.Color;

        specialinvoke $r33.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r34 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r33);

        specialinvoke $r32.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r34);

        $r15[53] = $r32;

        $r15[54] = "Menu.margin";

        $r35 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r35.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(2, 7, 1, 7);

        $r15[55] = $r35;

        $r15[56] = "Menu.checkIcon";

        $r36 = new com.jidesoft.icons.MenuCheckIcon;

        $r37 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r36.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r37);

        $r15[57] = $r36;

        $r15[58] = "Menu.textIconGap";

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15[59] = $r38;

        $r15[60] = "Menu.font";

        $r15[61] = $r5;

        $r15[62] = "Menu.acceleratorFont";

        $r15[63] = $r5;

        $r15[64] = "Menu.submenuPopupOffsetX";

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r15[65] = $r39;

        $r15[66] = "Menu.submenuPopupOffsetY";

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r15[67] = $r40;

        $r15[68] = "PopupMenu.border";

        $r41 = new javax.swing.plaf.BorderUIResource;

        $r42 = new java.awt.Color;

        specialinvoke $r42.<java.awt.Color: void <init>(int,int,int)>(102, 102, 102);

        $r43 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r42);

        $r44 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        $r45 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)>($r43, $r44);

        specialinvoke $r41.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r45);

        $r15[69] = $r41;

        $r15[70] = "MenuItem.checkIcon";

        $r46 = new com.jidesoft.icons.MenuCheckIcon;

        $r47 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r46.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r47);

        $r15[71] = $r46;

        $r15[72] = "MenuItem.selectionBackground";

        $r15[73] = $r6;

        $r15[74] = "MenuItem.selectionForeground";

        $r15[75] = $r3;

        $r15[76] = "MenuItem.acceleratorSelectionForeground";

        $r15[77] = $r3;

        $r15[78] = "MenuItem.background";

        $r15[79] = $r9;

        $r15[80] = "MenuItem.selectionBorderColor";

        $r15[81] = $r2;

        $r15[82] = "MenuItem.shadowWidth";

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r15[83] = $r48;

        $r15[84] = "MenuItem.shadowColor";

        $r15[85] = $r1;

        $r15[86] = "MenuItem.textIconGap";

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r15[87] = $r49;

        $r15[88] = "MenuItem.accelEndGap";

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r15[89] = $r50;

        $r15[90] = "MenuItem.margin";

        $r51 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r51.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(4, 0, 3, 0);

        $r15[91] = $r51;

        $r15[92] = "MenuItem.font";

        $r15[93] = $r5;

        $r15[94] = "MenuItem.acceleratorFont";

        $r15[95] = $r5;

        virtualinvoke r4.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r15);

        staticinvoke <com.jidesoft.plaf.xerto.XertoMetalUtils: void initComponentDefaults(javax.swing.UIDefaults)>(r4);

        $r52 = staticinvoke <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.basic.ThemePainter getInstance()>();

        staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: void put(javax.swing.UIDefaults,java.lang.String,java.lang.Object)>(r4, "Theme.painter", $r52);

        $r53 = new javax.swing.plaf.BorderUIResource;

        $r54 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("Theme.painter");

        $r55 = (com.jidesoft.plaf.basic.ThemePainter) $r54;

        $r56 = interfaceinvoke $r55.<com.jidesoft.plaf.basic.ThemePainter: java.awt.Color getMenuItemBorderColor()>();

        $r57 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r56);

        $r58 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        $r59 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)>($r57, $r58);

        specialinvoke $r53.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r59);

        virtualinvoke r4.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("PopupMenu.border", $r53);

        return;
    }

    public static void initComponentDefaults(javax.swing.UIDefaults)
    {
        java.awt.Color $r10, $r18, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r79, $r81, $r83, $r89, $r92, $r94, $r97, $r110, $r113, $r115, $r117, $r163, $r172, $r173, $r187, $r189, $r190, $r207, $r219, $r220, $r221, $r222, $r225, $r226, $r227, $r228, $r231, $r232, $r233, $r234, $r237, $r238, $r239, $r240, $r243, $r244, $r245, $r246, $r249, $r250, $r251, $r252, $r255, $r256, $r257, $r258, $r261, $r262, $r263, $r264, $r273, $r275, $r281, $r284, $r286;
        java.lang.Integer $r41, $r42, $r46, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r90, $r98, $r101, $r106, $r107, $r108, $r119, $r120, $r139, $r143, $r169, $r170, $r171, $r174, $r185, $r204, $r212, $r213, $r268, $r269, $r270, $r271, $r276, $r299, $r300, $r301, $r305, $r306, $r307;
        javax.swing.border.Border $r11, $r48, $r77, $r111, $r154, $r159, $r161, $r164, $r165, $r184, $r192, $r194, $r196, $r202, $r208, $r282, $r288, $r310, $r311, $r312, $r313;
        javax.swing.plaf.BorderUIResource $r314, $r326, $r328, $r342, $r369, $r372, $r377, $r380, $r381, $r382, $r383, $r386, $r387, $r388, $r389;
        java.awt.Toolkit $r0;
        java.awt.Insets $r315, $r350, $r352, $r354, $r356, $r358, $r360, $r362, $r364;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.Boolean $r86, $r99, $r100, $r140, $r142, $r211, $r277, $r278, $r297, $r298, $r302, $r308;
        javax.swing.border.CompoundBorder $r166;
        javax.swing.plaf.ColorUIResource $r317, $r318, $r319, $r320, $r321, $r327, $r329, $r330, $r331, $r335, $r336, $r337, $r338, $r339, $r343, $r344, $r345, $r346, $r367, $r368, $r370, $r371, $r374, $r376, $r378, $r379, $r385, $r392, $r393, $r394, $r395;
        java.lang.String $r216, $r217;
        com.jidesoft.plaf.basic.ThemePainter $r146;
        boolean $z0, $z1;
        javax.swing.UIDefaults r12;
        javax.swing.plaf.InsetsUIResource $r324, $r332, $r333, $r334, $r347, $r366, $r373, $r375;
        java.lang.Object[] $r39, $r44, $r103, $r105, $r145, $r147, $r148, $r153, $r156, $r157, $r168, $r182, $r266;
        com.jidesoft.plaf.xerto.StatusBarBorder $r384;
        javax.swing.plaf.basic.BasicBorders$MarginBorder $r323;
        com.jidesoft.plaf.xerto.XertoFrameBorder $r316;
        javax.swing.UIDefaults$LazyInputMap $r325, $r340, $r341, $r348, $r390, $r391;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r13, $r14, $r15;
        com.jidesoft.plaf.xerto.XertoMetalUtils$1 $r322;
        javax.swing.ImageIcon $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r175, $r176, $r177, $r178, $r179, $r180, $r197, $r198, $r199, $r200, $r209, $r210, $r214, $r279, $r289, $r290, $r291, $r292, $r293, $r294, $r295, $r296;
        com.jidesoft.plaf.xerto.FrameBorder $r349;
        com.jidesoft.plaf.xerto.SlidingFrameBorder $r351, $r353, $r355, $r357;
        javax.swing.Icon $r45;
        com.jidesoft.plaf.vsnet.ResizeFrameBorder $r359, $r361, $r363, $r365;

        r12 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("shadingtheme", "true");

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlText");

        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlHighlight");

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r7 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("activeCaption");

        $r8 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("activeCaptionText");

        $r314 = new javax.swing.plaf.BorderUIResource;

        $r10 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r11 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r10);

        specialinvoke $r314.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r11);

        $r13 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getControlFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r12);

        $r14 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getMenuFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r12);

        $r15 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getBoldFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r12);

        $r316 = new com.jidesoft.plaf.xerto.XertoFrameBorder;

        $r315 = new java.awt.Insets;

        specialinvoke $r315.<java.awt.Insets: void <init>(int,int,int,int)>(4, 4, 4, 4);

        specialinvoke $r316.<com.jidesoft.plaf.xerto.XertoFrameBorder: void <init>(java.awt.Insets)>($r315);

        $r18 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r19 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getDefaultBackgroundColor(java.awt.Color)>($r18);

        $r20 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r21 = virtualinvoke $r20.<java.awt.Color: java.awt.Color darker()>();

        $r317 = new javax.swing.plaf.ColorUIResource;

        $r23 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("textHighlight");

        $r24 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFocusedButtonColor(java.awt.Color)>($r23);

        specialinvoke $r317.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r24);

        $r318 = new javax.swing.plaf.ColorUIResource;

        $r26 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("textHighlight");

        $r27 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getSelectedAndFocusedButtonColor(java.awt.Color)>($r26);

        specialinvoke $r318.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r27);

        $r319 = new javax.swing.plaf.ColorUIResource;

        $r29 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("textHighlight");

        $r30 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getSelectedButtonColor(java.awt.Color)>($r29);

        specialinvoke $r319.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r30);

        $r320 = new javax.swing.plaf.ColorUIResource;

        $r32 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r33 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getGripperForegroundColor(java.awt.Color)>($r32);

        specialinvoke $r320.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r33);

        $r321 = new javax.swing.plaf.ColorUIResource;

        $r35 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r36 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getToolBarBackgroundColor(java.awt.Color)>($r35);

        specialinvoke $r321.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r36);

        $r322 = new com.jidesoft.plaf.xerto.XertoMetalUtils$1;

        specialinvoke $r322.<com.jidesoft.plaf.xerto.XertoMetalUtils$1: void <init>()>();

        $r323 = new javax.swing.plaf.basic.BasicBorders$MarginBorder;

        specialinvoke $r323.<javax.swing.plaf.basic.BasicBorders$MarginBorder: void <init>()>();

        $r39 = newarray (java.lang.Object)[250];

        $r39[0] = "JideLabel.font";

        $r39[1] = $r13;

        $r39[2] = "JideLabel.background";

        $r39[3] = $r1;

        $r39[4] = "JideLabel.foreground";

        $r39[5] = $r2;

        $r39[6] = "JideScrollPane.border";

        $r39[7] = $r314;

        $r39[8] = "JideButton.selectedAndFocusedBackground";

        $r39[9] = $r318;

        $r39[10] = "JideButton.focusedBackground";

        $r39[11] = $r317;

        $r39[12] = "JideButton.selectedBackground";

        $r39[13] = $r319;

        $r39[14] = "JideButton.borderColor";

        $r39[15] = $r3;

        $r39[16] = "JideButton.font";

        $r39[17] = $r13;

        $r39[18] = "JideButton.background";

        $r39[19] = $r1;

        $r39[20] = "JideButton.foreground";

        $r39[21] = $r2;

        $r39[22] = "JideButton.shadow";

        $r39[23] = $r3;

        $r39[24] = "JideButton.darkShadow";

        $r39[25] = $r4;

        $r39[26] = "JideButton.light";

        $r39[27] = $r5;

        $r39[28] = "JideButton.highlight";

        $r39[29] = $r6;

        $r39[30] = "JideButton.border";

        $r39[31] = $r323;

        $r39[32] = "JideButton.margin";

        $r324 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r324.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 3, 3, 3);

        $r39[33] = $r324;

        $r39[34] = "JideButton.textIconGap";

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[35] = $r41;

        $r39[36] = "JideButton.textShiftOffset";

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r39[37] = $r42;

        $r39[38] = "JideButton.focusInputMap";

        $r325 = new javax.swing.UIDefaults$LazyInputMap;

        $r44 = newarray (java.lang.Object)[4];

        $r44[0] = "SPACE";

        $r44[1] = "pressed";

        $r44[2] = "released SPACE";

        $r44[3] = "released";

        specialinvoke $r325.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r44);

        $r39[39] = $r325;

        $r39[40] = "TristateCheckBox.icon";

        $r45 = staticinvoke <com.jidesoft.plaf.metal.MetalIconFactory: javax.swing.Icon getCheckBoxIcon()>();

        $r39[41] = $r45;

        $r39[42] = "JideSplitPane.dividerSize";

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r39[43] = $r46;

        $r39[44] = "JideSplitPaneDivider.border";

        $r326 = new javax.swing.plaf.BorderUIResource;

        $r48 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        specialinvoke $r326.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r48);

        $r39[45] = $r326;

        $r39[46] = "JideSplitPaneDivider.background";

        $r39[47] = $r1;

        $r39[48] = "JideSplitPaneDivider.gripperPainter";

        $r39[49] = $r322;

        $r39[50] = "JideTabbedPane.defaultTabShape";

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r39[51] = $r49;

        $r39[52] = "JideTabbedPane.defaultResizeMode";

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r39[53] = $r50;

        $r39[54] = "JideTabbedPane.defaultTabColorTheme";

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[55] = $r51;

        $r39[56] = "JideTabbedPane.tabRectPadding";

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[57] = $r52;

        $r39[58] = "JideTabbedPane.closeButtonMarginHorizonal";

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r39[59] = $r53;

        $r39[60] = "JideTabbedPane.closeButtonMarginVertical";

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r39[61] = $r54;

        $r39[62] = "JideTabbedPane.textMarginVertical";

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[63] = $r55;

        $r39[64] = "JideTabbedPane.noIconMargin";

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[65] = $r56;

        $r39[66] = "JideTabbedPane.iconMargin";

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r39[67] = $r57;

        $r39[68] = "JideTabbedPane.textPadding";

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r39[69] = $r58;

        $r39[70] = "JideTabbedPane.buttonSize";

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r39[71] = $r59;

        $r39[72] = "JideTabbedPane.buttonMargin";

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r39[73] = $r60;

        $r39[74] = "JideTabbedPane.fitStyleBoundSize";

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r39[75] = $r61;

        $r39[76] = "JideTabbedPane.fitStyleFirstTabMargin";

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[77] = $r62;

        $r39[78] = "JideTabbedPane.fitStyleIconMinWidth";

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r39[79] = $r63;

        $r39[80] = "JideTabbedPane.fitStyleTextMinWidth";

        $r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r39[81] = $r64;

        $r39[82] = "JideTabbedPane.compressedStyleNoIconRectSize";

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r39[83] = $r65;

        $r39[84] = "JideTabbedPane.compressedStyleIconMargin";

        $r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r39[85] = $r66;

        $r39[86] = "JideTabbedPane.compressedStyleCloseButtonMarginHorizontal";

        $r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r39[87] = $r67;

        $r39[88] = "JideTabbedPane.compressedStyleCloseButtonMarginVertical";

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r39[89] = $r68;

        $r39[90] = "JideTabbedPane.fixedStyleRectSize";

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(60);

        $r39[91] = $r69;

        $r39[92] = "JideTabbedPane.closeButtonMargin";

        $r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[93] = $r70;

        $r39[94] = "JideTabbedPane.gripLeftMargin";

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[95] = $r71;

        $r39[96] = "JideTabbedPane.closeButtonMarginSize";

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r39[97] = $r72;

        $r39[98] = "JideTabbedPane.closeButtonLeftMargin";

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[99] = $r73;

        $r39[100] = "JideTabbedPane.closeButtonRightMargin";

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[101] = $r74;

        $r39[102] = "JideTabbedPane.defaultTabBorderShadowColor";

        $r327 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r327.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(115, 109, 99);

        $r39[103] = $r327;

        $r39[104] = "JideTabbedPane.gripperPainter";

        $r39[105] = $r322;

        $r39[106] = "JideTabbedPane.border";

        $r328 = new javax.swing.plaf.BorderUIResource;

        $r77 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke $r328.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r77);

        $r39[107] = $r328;

        $r39[108] = "JideTabbedPane.background";

        $r329 = new javax.swing.plaf.ColorUIResource;

        $r79 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlColor()>();

        specialinvoke $r329.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r79);

        $r39[109] = $r329;

        $r39[110] = "JideTabbedPane.foreground";

        $r330 = new javax.swing.plaf.ColorUIResource;

        $r81 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTabForgroundColor()>();

        specialinvoke $r330.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r81);

        $r39[111] = $r330;

        $r39[112] = "JideTabbedPane.light";

        $r39[113] = $r5;

        $r39[114] = "JideTabbedPane.highlight";

        $r39[115] = $r6;

        $r39[116] = "JideTabbedPane.shadow";

        $r39[117] = $r3;

        $r39[118] = "JideTabbedPane.darkShadow";

        $r331 = new javax.swing.plaf.ColorUIResource;

        $r83 = <java.awt.Color: java.awt.Color GRAY>;

        specialinvoke $r331.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r83);

        $r39[119] = $r331;

        $r39[120] = "JideTabbedPane.tabInsets";

        $r332 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r332.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(1, 4, 1, 4);

        $r39[121] = $r332;

        $r39[122] = "JideTabbedPane.contentBorderInsets";

        $r333 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r333.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $r39[123] = $r333;

        $r39[124] = "JideTabbedPane.ignoreContentBorderInsetsIfNoTabs";

        $r86 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r39[125] = $r86;

        $r39[126] = "JideTabbedPane.tabAreaInsets";

        $r334 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r334.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(2, 4, 0, 4);

        $r39[127] = $r334;

        $r39[128] = "JideTabbedPane.tabAreaBackground";

        $r335 = new javax.swing.plaf.ColorUIResource;

        $r89 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getApplicationFrameBackgroundColor()>();

        specialinvoke $r335.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r89);

        $r39[129] = $r335;

        $r39[130] = "JideTabbedPane.tabAreaBackgroundLt";

        $r39[131] = $r6;

        $r39[132] = "JideTabbedPane.tabAreaBackgroundDk";

        $r39[133] = $r1;

        $r39[134] = "JideTabbedPane.tabRunOverlay";

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[135] = $r90;

        $r39[136] = "JideTabbedPane.font";

        $r39[137] = $r13;

        $r39[138] = "JideTabbedPane.selectedTabFont";

        $r39[139] = $r13;

        $r39[140] = "JideTabbedPane.selectedTabTextForeground";

        $r336 = new javax.swing.plaf.ColorUIResource;

        $r92 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTabForgroundColor()>();

        specialinvoke $r336.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r92);

        $r39[141] = $r336;

        $r39[142] = "JideTabbedPane.unselectedTabTextForeground";

        $r39[143] = $r21;

        $r39[144] = "JideTabbedPane.selectedTabBackground";

        $r337 = new javax.swing.plaf.ColorUIResource;

        $r94 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getSelectedTabBackgroundColor()>();

        specialinvoke $r337.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r94);

        $r39[145] = $r337;

        $r39[146] = "JideTabbedPane.selectedTabBackgroundLt";

        $r338 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r338.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(230, 139, 44);

        $r39[147] = $r338;

        $r39[148] = "JideTabbedPane.selectedTabBackgroundDk";

        $r339 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r339.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(255, 199, 60);

        $r39[149] = $r339;

        $r39[150] = "JideTabbedPane.tabListBackground";

        $r97 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("List.background");

        $r39[151] = $r97;

        $r39[152] = "JideTabbedPane.textIconGap";

        $r98 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[153] = $r98;

        $r39[154] = "JideTabbedPane.showIconOnTab";

        $r99 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r39[155] = $r99;

        $r39[156] = "JideTabbedPane.showCloseButtonOnTab";

        $r100 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r39[157] = $r100;

        $r39[158] = "JideTabbedPane.closeButtonAlignment";

        $r101 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r39[159] = $r101;

        $r39[160] = "JideTabbedPane.focusInputMap";

        $r340 = new javax.swing.UIDefaults$LazyInputMap;

        $r103 = newarray (java.lang.Object)[20];

        $r103[0] = "RIGHT";

        $r103[1] = "navigateRight";

        $r103[2] = "KP_RIGHT";

        $r103[3] = "navigateRight";

        $r103[4] = "LEFT";

        $r103[5] = "navigateLeft";

        $r103[6] = "KP_LEFT";

        $r103[7] = "navigateLeft";

        $r103[8] = "UP";

        $r103[9] = "navigateUp";

        $r103[10] = "KP_UP";

        $r103[11] = "navigateUp";

        $r103[12] = "DOWN";

        $r103[13] = "navigateDown";

        $r103[14] = "KP_DOWN";

        $r103[15] = "navigateDown";

        $r103[16] = "ctrl DOWN";

        $r103[17] = "requestFocusForVisibleComponent";

        $r103[18] = "ctrl KP_DOWN";

        $r103[19] = "requestFocusForVisibleComponent";

        specialinvoke $r340.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r103);

        $r39[161] = $r340;

        $r39[162] = "JideTabbedPane.ancestorInputMap";

        $r341 = new javax.swing.UIDefaults$LazyInputMap;

        $r105 = newarray (java.lang.Object)[8];

        $r105[0] = "ctrl PAGE_DOWN";

        $r105[1] = "navigatePageDown";

        $r105[2] = "ctrl PAGE_UP";

        $r105[3] = "navigatePageUp";

        $r105[4] = "ctrl UP";

        $r105[5] = "requestFocus";

        $r105[6] = "ctrl KP_UP";

        $r105[7] = "requestFocus";

        specialinvoke $r341.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r105);

        $r39[163] = $r341;

        $r39[164] = "ButtonPanel.order";

        $r39[165] = "ACO";

        $r39[166] = "ButtonPanel.oppositeOrder";

        $r39[167] = "H";

        $r39[168] = "ButtonPanel.buttonGap";

        $r106 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r39[169] = $r106;

        $r39[170] = "ButtonPanel.groupGap";

        $r107 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r39[171] = $r107;

        $r39[172] = "ButtonPanel.minButtonWidth";

        $r108 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75);

        $r39[173] = $r108;

        $r39[174] = "MeterProgressBar.border";

        $r342 = new javax.swing.plaf.BorderUIResource;

        $r110 = <java.awt.Color: java.awt.Color BLACK>;

        $r111 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r110);

        specialinvoke $r342.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r111);

        $r39[175] = $r342;

        $r39[176] = "MeterProgressBar.background";

        $r343 = new javax.swing.plaf.ColorUIResource;

        $r113 = <java.awt.Color: java.awt.Color BLACK>;

        specialinvoke $r343.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r113);

        $r39[177] = $r343;

        $r39[178] = "MeterProgressBar.foreground";

        $r344 = new javax.swing.plaf.ColorUIResource;

        $r115 = <java.awt.Color: java.awt.Color GREEN>;

        specialinvoke $r344.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r115);

        $r39[179] = $r344;

        $r39[180] = "MeterProgressBar.cellForeground";

        $r345 = new javax.swing.plaf.ColorUIResource;

        $r117 = <java.awt.Color: java.awt.Color GREEN>;

        specialinvoke $r345.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r117);

        $r39[181] = $r345;

        $r39[182] = "MeterProgressBar.cellBackground";

        $r346 = new javax.swing.plaf.ColorUIResource;

        $i7 = (int) 32768;

        specialinvoke $r346.<javax.swing.plaf.ColorUIResource: void <init>(int)>($i7);

        $r39[183] = $r346;

        $r39[184] = "MeterProgressBar.cellLength";

        $r119 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[185] = $r119;

        $r39[186] = "MeterProgressBar.cellSpacing";

        $r120 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[187] = $r120;

        $r39[188] = "Cursor.hsplit";

        $r121 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_h_split.gif");

        $r39[189] = $r121;

        $r39[190] = "Cursor.vsplit";

        $r122 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_v_split.gif");

        $r39[191] = $r122;

        $r39[192] = "Cursor.north";

        $r123 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_north.gif");

        $r39[193] = $r123;

        $r39[194] = "Cursor.south";

        $r124 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_south.gif");

        $r39[195] = $r124;

        $r39[196] = "Cursor.east";

        $r125 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_east.gif");

        $r39[197] = $r125;

        $r39[198] = "Cursor.west";

        $r126 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_west.gif");

        $r39[199] = $r126;

        $r39[200] = "Cursor.tab";

        $r127 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_tab.gif");

        $r39[201] = $r127;

        $r39[202] = "Cursor.float";

        $r128 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_float.gif");

        $r39[203] = $r128;

        $r39[204] = "Cursor.vertical";

        $r129 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_vertical.gif");

        $r39[205] = $r129;

        $r39[206] = "Cursor.horizontal";

        $r130 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_horizontal.gif");

        $r39[207] = $r130;

        $r39[208] = "Cursor.delete";

        $r131 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_delete.gif");

        $r39[209] = $r131;

        $r39[210] = "Cursor.drag";

        $r132 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag.gif");

        $r39[211] = $r132;

        $r39[212] = "Cursor.dragStop";

        $r133 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_stop.gif");

        $r39[213] = $r133;

        $r39[214] = "Cursor.dragText";

        $r134 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_text.gif");

        $r39[215] = $r134;

        $r39[216] = "Cursor.dragTextStop";

        $r135 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_text_stop.gif");

        $r39[217] = $r135;

        $r39[218] = "Cursor.percentage";

        $r136 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_percentage.gif");

        $r39[219] = $r136;

        $r39[220] = "Cursor.moveEast";

        $r137 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_move_east.gif");

        $r39[221] = $r137;

        $r39[222] = "Cursor.moveWest";

        $r138 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_move_west.gif");

        $r39[223] = $r138;

        $r39[224] = "Gripper.size";

        $r139 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r39[225] = $r139;

        $r39[226] = "Gripper.foreground";

        $r39[227] = $r320;

        $r39[228] = "Gripper.painter";

        $r39[229] = $r322;

        $r39[230] = "HeaderBox.background";

        $r39[231] = $r1;

        $r39[232] = "Icon.floating";

        $r140 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r39[233] = $r140;

        $r39[234] = "Resizable.resizeBorder";

        $r39[235] = $r316;

        $r39[236] = "JideSplitButton.font";

        $r39[237] = $r13;

        $r39[238] = "JideSplitButton.margin";

        $r347 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r347.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 3, 3, 7);

        $r39[239] = $r347;

        $r39[240] = "JideSplitButton.border";

        $r39[241] = $r323;

        $r39[242] = "JideSplitButton.borderPainted";

        $r142 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r39[243] = $r142;

        $r39[244] = "JideSplitButton.textIconGap";

        $r143 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[245] = $r143;

        $r39[246] = "JideSplitButton.selectionForeground";

        $r39[247] = $r2;

        $r39[248] = "JideSplitButton.focusInputMap";

        $r348 = new javax.swing.UIDefaults$LazyInputMap;

        $r145 = newarray (java.lang.Object)[8];

        $r145[0] = "SPACE";

        $r145[1] = "pressed";

        $r145[2] = "released SPACE";

        $r145[3] = "released";

        $r145[4] = "DOWN";

        $r145[5] = "downPressed";

        $r145[6] = "released DOWN";

        $r145[7] = "downReleased";

        specialinvoke $r348.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r145);

        $r39[249] = $r348;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r39);

        $i0 = staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: int getProductsUsed()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label09;

        $r214 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoWindowsUtils;", "icons/title_buttons_xerto.gif");

        $r349 = new com.jidesoft.plaf.xerto.FrameBorder;

        specialinvoke $r349.<com.jidesoft.plaf.xerto.FrameBorder: void <init>()>();

        $r216 = "true";

        $r217 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("jide.shadeSlidingBorder", "false");

        $z1 = virtualinvoke $r216.<java.lang.String: boolean equals(java.lang.Object)>($r217);

        $r351 = new com.jidesoft.plaf.xerto.SlidingFrameBorder;

        $r219 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r220 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r221 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r222 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r350 = new java.awt.Insets;

        specialinvoke $r350.<java.awt.Insets: void <init>(int,int,int,int)>(1, 15, 1, 0);

        specialinvoke $r351.<com.jidesoft.plaf.xerto.SlidingFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r219, $r220, $r221, $r222, $r350);

        $r353 = new com.jidesoft.plaf.xerto.SlidingFrameBorder;

        $r225 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r226 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r227 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r228 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r352 = new java.awt.Insets;

        specialinvoke $r352.<java.awt.Insets: void <init>(int,int,int,int)>(1, 0, 1, 15);

        specialinvoke $r353.<com.jidesoft.plaf.xerto.SlidingFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r225, $r226, $r227, $r228, $r352);

        $r355 = new com.jidesoft.plaf.xerto.SlidingFrameBorder;

        $r231 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r232 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r233 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r234 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r354 = new java.awt.Insets;

        specialinvoke $r354.<java.awt.Insets: void <init>(int,int,int,int)>(0, 1, 15, 1);

        specialinvoke $r355.<com.jidesoft.plaf.xerto.SlidingFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r231, $r232, $r233, $r234, $r354);

        $r357 = new com.jidesoft.plaf.xerto.SlidingFrameBorder;

        $r237 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r238 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r239 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r240 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r356 = new java.awt.Insets;

        specialinvoke $r356.<java.awt.Insets: void <init>(int,int,int,int)>(15, 1, 0, 1);

        specialinvoke $r357.<com.jidesoft.plaf.xerto.SlidingFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r237, $r238, $r239, $r240, $r356);

        $r359 = new com.jidesoft.plaf.vsnet.ResizeFrameBorder;

        $r243 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r244 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r245 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r246 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r358 = new java.awt.Insets;

        specialinvoke $r358.<java.awt.Insets: void <init>(int,int,int,int)>(0, 4, 0, 0);

        specialinvoke $r359.<com.jidesoft.plaf.vsnet.ResizeFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r243, $r244, $r245, $r246, $r358);

        $r361 = new com.jidesoft.plaf.vsnet.ResizeFrameBorder;

        $r249 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r250 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r251 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r252 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r360 = new java.awt.Insets;

        specialinvoke $r360.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 4);

        specialinvoke $r361.<com.jidesoft.plaf.vsnet.ResizeFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r249, $r250, $r251, $r252, $r360);

        $r363 = new com.jidesoft.plaf.vsnet.ResizeFrameBorder;

        $r255 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r256 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r257 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r258 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r362 = new java.awt.Insets;

        specialinvoke $r362.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 4, 0);

        specialinvoke $r363.<com.jidesoft.plaf.vsnet.ResizeFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r255, $r256, $r257, $r258, $r362);

        $r365 = new com.jidesoft.plaf.vsnet.ResizeFrameBorder;

        $r261 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        $r262 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        $r263 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        $r264 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlDkShadow");

        $r364 = new java.awt.Insets;

        specialinvoke $r364.<java.awt.Insets: void <init>(int,int,int,int)>(4, 0, 0, 0);

        specialinvoke $r365.<com.jidesoft.plaf.vsnet.ResizeFrameBorder: void <init>(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Insets)>($r261, $r262, $r263, $r264, $r364);

        $r266 = newarray (java.lang.Object)[112];

        $r266[0] = "Workspace.background";

        $r266[1] = $r3;

        $r266[2] = "SidePane.margin";

        $r366 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r366.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(1, 1, 1, 1);

        $r266[3] = $r366;

        $r266[4] = "SidePane.iconTextGap";

        $r268 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r266[5] = $r268;

        $r266[6] = "SidePane.textBorderGap";

        $r269 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r266[7] = $r269;

        $r266[8] = "SidePane.itemGap";

        $r270 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r266[9] = $r270;

        $r266[10] = "SidePane.groupGap";

        $r271 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r266[11] = $r271;

        $r266[12] = "SidePane.foreground";

        $r266[13] = $r4;

        $r266[14] = "SidePane.background";

        $r367 = new javax.swing.plaf.ColorUIResource;

        $r273 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getApplicationFrameBackgroundColor()>();

        specialinvoke $r367.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r273);

        $r266[15] = $r367;

        $r266[16] = "SidePane.lineColor";

        $r266[17] = $r3;

        $r266[18] = "SidePane.buttonBackground";

        $r368 = new javax.swing.plaf.ColorUIResource;

        $r275 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getLightControlColor()>();

        specialinvoke $r368.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r275);

        $r266[19] = $r368;

        $r266[20] = "SidePane.selectedButtonBackground";

        $r266[21] = $r319;

        $r266[22] = "SidePane.selectedButtonForeground";

        $r266[23] = $r2;

        $r266[24] = "SidePane.font";

        $r266[25] = $r13;

        $r266[26] = "SidePane.orientation";

        $r276 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r266[27] = $r276;

        $r266[28] = "SidePane.showSelectedTabText";

        $r277 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r266[29] = $r277;

        $r266[30] = "SidePane.alwaysShowTabText";

        $r278 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r266[31] = $r278;

        $r266[32] = "DockableFrame.defaultIcon";

        $r279 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/dockableframe_blank.gif");

        $r266[33] = $r279;

        $r266[34] = "DockableFrame.background";

        $r266[35] = $r1;

        $r266[36] = "DockableFrame.border";

        $r266[37] = $r349;

        $r266[38] = "DockableFrame.floatingBorder";

        $r369 = new javax.swing.plaf.BorderUIResource;

        $r281 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        $r282 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r281);

        specialinvoke $r369.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r282);

        $r266[39] = $r369;

        $r266[40] = "DockableFrame.slidingEastBorder";

        if $z1 == 0 goto label01;

        $r310 = $r351;

        goto label02;

     label01:
        $r310 = $r359;

     label02:
        $r266[41] = $r310;

        $r266[42] = "DockableFrame.slidingWestBorder";

        if $z1 == 0 goto label03;

        $r311 = $r353;

        goto label04;

     label03:
        $r311 = $r361;

     label04:
        $r266[43] = $r311;

        $r266[44] = "DockableFrame.slidingNorthBorder";

        if $z1 == 0 goto label05;

        $r312 = $r355;

        goto label06;

     label05:
        $r312 = $r363;

     label06:
        $r266[45] = $r312;

        $r266[46] = "DockableFrame.slidingSouthBorder";

        if $z1 == 0 goto label07;

        $r313 = $r357;

        goto label08;

     label07:
        $r313 = $r365;

     label08:
        $r266[47] = $r313;

        $r266[48] = "DockableFrame.activeTitleBackground";

        $r266[49] = $r7;

        $r266[50] = "DockableFrame.activeTitleForeground";

        $r370 = new javax.swing.plaf.ColorUIResource;

        $r284 = <java.awt.Color: java.awt.Color WHITE>;

        specialinvoke $r370.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r284);

        $r266[51] = $r370;

        $r266[52] = "DockableFrame.inactiveTitleBackground";

        $r266[53] = $r1;

        $r266[54] = "DockableFrame.inactiveTitleForeground";

        $r371 = new javax.swing.plaf.ColorUIResource;

        $r286 = <java.awt.Color: java.awt.Color WHITE>;

        specialinvoke $r371.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r286);

        $r266[55] = $r371;

        $r266[56] = "DockableFrame.titleBorder";

        $r372 = new javax.swing.plaf.BorderUIResource;

        $r288 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 0, 1, 0);

        specialinvoke $r372.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r288);

        $r266[57] = $r372;

        $r266[58] = "DockableFrame.activeTitleBorderColor";

        $r266[59] = $r7;

        $r266[60] = "DockableFrame.inactiveTitleBorderColor";

        $r266[61] = $r3;

        $r266[62] = "DockableFrame.font";

        $r266[63] = $r13;

        $r266[64] = "DockableFrameTitlePane.gripperPainter";

        $r266[65] = $r322;

        $r266[66] = "DockableFrameTitlePane.font";

        $r266[67] = $r13;

        $r266[68] = "DockableFrameTitlePane.hideIcon";

        $r289 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 0, 10, 10);

        $r266[69] = $r289;

        $r266[70] = "DockableFrameTitlePane.unfloatIcon";

        $r290 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 10, 10, 10);

        $r266[71] = $r290;

        $r266[72] = "DockableFrameTitlePane.floatIcon";

        $r291 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 20, 10, 10);

        $r266[73] = $r291;

        $r266[74] = "DockableFrameTitlePane.autohideIcon";

        $r292 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 30, 10, 10);

        $r266[75] = $r292;

        $r266[76] = "DockableFrameTitlePane.stopAutohideIcon";

        $r293 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 40, 10, 10);

        $r266[77] = $r293;

        $r266[78] = "DockableFrameTitlePane.hideAutohideIcon";

        $r294 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 50, 10, 10);

        $r266[79] = $r294;

        $r266[80] = "DockableFrameTitlePane.maximizeIcon";

        $r295 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 60, 10, 10);

        $r266[81] = $r295;

        $r266[82] = "DockableFrameTitlePane.restoreIcon";

        $r296 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r214, 0, 70, 10, 10);

        $r266[83] = $r296;

        $r266[84] = "DockableFrameTitlePane.titleBarComponent";

        $r297 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r266[85] = $r297;

        $r266[86] = "DockableFrameTitlePane.alwaysShowAllButtons";

        $r298 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r266[87] = $r298;

        $r266[88] = "DockableFrameTitlePane.buttonsAlignment";

        $r299 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r266[89] = $r299;

        $r266[90] = "DockableFrameTitlePane.titleAlignment";

        $r300 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r266[91] = $r300;

        $r266[92] = "DockableFrameTitlePane.buttonGap";

        $r301 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r266[93] = $r301;

        $r266[94] = "DockableFrameTitlePane.showIcon";

        $r302 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r266[95] = $r302;

        $r266[96] = "DockableFrameTitlePane.margin";

        $r373 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r373.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(0, 3, 0, 3);

        $r266[97] = $r373;

        $r266[98] = "Contour.color";

        $r374 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r374.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(136, 136, 136);

        $r266[99] = $r374;

        $r266[100] = "Contour.thickness";

        $r305 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r266[101] = $r305;

        $r266[102] = "ContentContainer.background";

        $r266[103] = $r19;

        $r266[104] = "ContentContainer.vgap";

        $r306 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r266[105] = $r306;

        $r266[106] = "ContentContainer.hgap";

        $r307 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r266[107] = $r307;

        $r266[108] = "DockingFramework.changeCursor";

        $r308 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r266[109] = $r308;

        $r266[110] = "FrameContainer.contentBorderInsets";

        $r375 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r375.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $r266[111] = $r375;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r266);

     label09:
        $i5 = $i0 & 2;

        if $i5 == 0 goto label10;

        $r175 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoMetalUtils;", "icons/collapsible_pane_xerto.png");

        $r176 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoMetalUtils;", "icons/collapsible_pane_mask.png");

        $r177 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r175, 0, 0, 12, 12);

        $r178 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r175, 12, 0, 12, 12);

        $r179 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r176, 0, 0, 12, 12);

        $r180 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r176, 0, 12, 12, 12);

        $r376 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r376.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(236, 234, 217);

        $r182 = newarray (java.lang.Object)[60];

        $r182[0] = "CollapsiblePanes.border";

        $r377 = new javax.swing.plaf.BorderUIResource;

        $r184 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(12, 12, 12, 12);

        specialinvoke $r377.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r184);

        $r182[1] = $r377;

        $r182[2] = "CollapsiblePanes.gap";

        $r185 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r182[3] = $r185;

        $r182[4] = "CollapsiblePane.background";

        $r182[5] = $r376;

        $r182[6] = "CollapsiblePane.contentBackground";

        $r182[7] = $r6;

        $r182[8] = "CollapsiblePane.foreground";

        $r378 = new javax.swing.plaf.ColorUIResource;

        $r187 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTextColor(java.awt.Color)>($r376);

        specialinvoke $r378.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r187);

        $r182[9] = $r378;

        $r182[10] = "CollapsiblePane.emphasizedBackground";

        $r182[11] = $r376;

        $r182[12] = "CollapsiblePane.emphasizedForeground";

        $r379 = new javax.swing.plaf.ColorUIResource;

        $r189 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getEmBaseColor(java.awt.Color)>($r376);

        $r190 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTextColor(java.awt.Color)>($r189);

        specialinvoke $r379.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r190);

        $r182[13] = $r379;

        $r182[14] = "CollapsiblePane.border";

        $r380 = new javax.swing.plaf.BorderUIResource;

        $r192 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke $r380.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r192);

        $r182[15] = $r380;

        $r182[16] = "CollapsiblePane.font";

        $r182[17] = $r13;

        $r182[18] = "CollapsiblePane.contentBorder";

        $r381 = new javax.swing.plaf.BorderUIResource;

        $r194 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(8, 10, 8, 10);

        specialinvoke $r381.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r194);

        $r182[19] = $r381;

        $r182[20] = "CollapsiblePane.titleBorder";

        $r382 = new javax.swing.plaf.BorderUIResource;

        $r196 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        specialinvoke $r382.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r196);

        $r182[21] = $r382;

        $r182[22] = "CollapsiblePane.titleFont";

        $r182[23] = $r15;

        $r182[24] = "CollapsiblePane.downIcon";

        $r197 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r177, $r179, 0);

        $r182[25] = $r197;

        $r182[26] = "CollapsiblePane.upIcon";

        $r198 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r177, $r180, 0);

        $r182[27] = $r198;

        $r182[28] = "CollapsiblePane.downIcon.emphasized";

        $r199 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r178, $r179, 0);

        $r182[29] = $r199;

        $r182[30] = "CollapsiblePane.upIcon.emphasized";

        $r200 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r178, $r180, 0);

        $r182[31] = $r200;

        $r182[32] = "CollapsiblePane.titleButtonBackground";

        $r182[33] = $r177;

        $r182[34] = "CollapsiblePane.titleButtonBackground.emphasized";

        $r182[35] = $r178;

        $r182[36] = "StatusBarItem.border";

        $r383 = new javax.swing.plaf.BorderUIResource;

        $r202 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 1, 0, 1);

        specialinvoke $r383.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r202);

        $r182[37] = $r383;

        $r182[38] = "StatusBar.border";

        $r384 = new com.jidesoft.plaf.xerto.StatusBarBorder;

        specialinvoke $r384.<com.jidesoft.plaf.xerto.StatusBarBorder: void <init>()>();

        $r182[39] = $r384;

        $r182[40] = "StatusBar.gap";

        $r204 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r182[41] = $r204;

        $r182[42] = "StatusBar.background";

        $r182[43] = $r1;

        $r182[44] = "StatusBar.font";

        $r182[45] = $r13;

        $r182[46] = "MemoryStatusBarItem.fillColor";

        $r385 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r385.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(236, 233, 176);

        $r182[47] = $r385;

        $r182[48] = "DocumentPane.groupBorder";

        $r386 = new javax.swing.plaf.BorderUIResource;

        $r207 = <java.awt.Color: java.awt.Color gray>;

        $r208 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r207);

        specialinvoke $r386.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r208);

        $r182[49] = $r386;

        $r182[50] = "DocumentPane.newHorizontalGroupIcon";

        $r209 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/windows_new_horizontal_tab_group.png");

        $r182[51] = $r209;

        $r182[52] = "DocumentPane.newVerticalGroupIcon";

        $r210 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/windows_new_vertical_tab_group.png");

        $r182[53] = $r210;

        $r182[54] = "DocumentPane.boldActiveTab";

        $r211 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r182[55] = $r211;

        $r182[56] = "OutlookTabbedPane.buttonStyle";

        $r212 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r182[57] = $r212;

        $r182[58] = "FloorTabbedPane.buttonStyle";

        $r213 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r182[59] = $r213;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r182);

     label10:
        $i2 = $i0 & 16;

        if $i2 == 0 goto label11;

        $r157 = newarray (java.lang.Object)[40];

        $r157[0] = "CommandBar.font";

        $r157[1] = $r14;

        $r157[2] = "CommandBar.background";

        $r157[3] = $r321;

        $r157[4] = "CommandBar.foreground";

        $r157[5] = $r2;

        $r157[6] = "CommandBar.shadow";

        $r157[7] = $r3;

        $r157[8] = "CommandBar.darkShadow";

        $r157[9] = $r4;

        $r157[10] = "CommandBar.light";

        $r157[11] = $r5;

        $r157[12] = "CommandBar.highlight";

        $r157[13] = $r6;

        $r157[14] = "CommandBar.border";

        $r387 = new javax.swing.plaf.BorderUIResource;

        $r159 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        specialinvoke $r387.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r159);

        $r157[15] = $r387;

        $r157[16] = "CommandBar.borderVert";

        $r388 = new javax.swing.plaf.BorderUIResource;

        $r161 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        specialinvoke $r388.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r161);

        $r157[17] = $r388;

        $r157[18] = "CommandBar.borderFloating";

        $r389 = new javax.swing.plaf.BorderUIResource;

        $r163 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("activeCaption");

        $r164 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color,int)>($r163, 2);

        $r165 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        $r166 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)>($r164, $r165);

        specialinvoke $r389.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r166);

        $r157[19] = $r389;

        $r157[20] = "CommandBar.ancestorInputMap";

        $r390 = new javax.swing.UIDefaults$LazyInputMap;

        $r168 = newarray (java.lang.Object)[16];

        $r168[0] = "UP";

        $r168[1] = "navigateUp";

        $r168[2] = "KP_UP";

        $r168[3] = "navigateUp";

        $r168[4] = "DOWN";

        $r168[5] = "navigateDown";

        $r168[6] = "KP_DOWN";

        $r168[7] = "navigateDown";

        $r168[8] = "LEFT";

        $r168[9] = "navigateLeft";

        $r168[10] = "KP_LEFT";

        $r168[11] = "navigateLeft";

        $r168[12] = "RIGHT";

        $r168[13] = "navigateRight";

        $r168[14] = "KP_RIGHT";

        $r168[15] = "navigateRight";

        specialinvoke $r390.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r168);

        $r157[21] = $r390;

        $r157[22] = "CommandBar.titleBarSize";

        $r169 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        $r157[23] = $r169;

        $r157[24] = "CommandBar.titleBarButtonGap";

        $r170 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r157[25] = $r170;

        $r157[26] = "CommandBar.titleBarBackground";

        $r157[27] = $r7;

        $r157[28] = "CommandBar.titleBarForeground";

        $r157[29] = $r8;

        $r157[30] = "CommandBar.titleBarFont";

        $r157[31] = $r15;

        $r157[32] = "CommandBar.separatorSize";

        $r171 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r157[33] = $r171;

        $r157[34] = "CommandBarSeparator.background";

        $r172 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlColor()>();

        $r157[35] = $r172;

        $r157[36] = "CommandBarSeparator.foreground";

        $r173 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlMidShadowColor()>();

        $r157[37] = $r173;

        $r157[38] = "Chevron.size";

        $r174 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r157[39] = $r174;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r157);

     label11:
        $i3 = $i0 & 4;

        if $i3 == 0 goto label12;

        $r153 = newarray (java.lang.Object)[4];

        $r153[0] = "NestedTableHeader.cellBorder";

        $r154 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.border.Border getBorder(java.lang.Object)>("TableHeader.cellBorder");

        $r153[1] = $r154;

        $r153[2] = "GroupList.ancestorInputMap";

        $r391 = new javax.swing.UIDefaults$LazyInputMap;

        $r156 = newarray (java.lang.Object)[4];

        $r156[0] = "TAB";

        $r156[1] = "selectNextGroup";

        $r156[2] = "shift TAB";

        $r156[3] = "selectPreviousGroup";

        specialinvoke $r391.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r156);

        $r153[3] = $r391;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r153);

     label12:
        $i4 = $i0 & 16384;

        if $i4 == 0 goto label13;

        $r148 = newarray (java.lang.Object)[8];

        $r148[0] = "DiffMerge.changed";

        $r392 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r392.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(196, 196, 255);

        $r148[1] = $r392;

        $r148[2] = "DiffMerge.deleted";

        $r393 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r393.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(200, 200, 200);

        $r148[3] = $r393;

        $r148[4] = "DiffMerge.inserted";

        $r394 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r394.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(196, 255, 196);

        $r148[5] = $r394;

        $r148[6] = "DiffMerge.conflicted";

        $r395 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r395.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(255, 153, 153);

        $r148[7] = $r395;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r148);

     label13:
        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean shouldUseSystemFont()>();

        if $z0 != 0 goto label14;

        $r147 = newarray (java.lang.Object)[28];

        $r147[0] = "TabbedPane.font";

        $r147[1] = $r13;

        $r147[2] = "TitledBorder.font";

        $r147[3] = $r15;

        $r147[4] = "TableHeader.font";

        $r147[5] = $r13;

        $r147[6] = "Table.font";

        $r147[7] = $r13;

        $r147[8] = "List.font";

        $r147[9] = $r13;

        $r147[10] = "Tree.font";

        $r147[11] = $r13;

        $r147[12] = "ToolTip.font";

        $r147[13] = $r13;

        $r147[14] = "CheckBox.font";

        $r147[15] = $r13;

        $r147[16] = "RadioButton.font";

        $r147[17] = $r13;

        $r147[18] = "Label.font";

        $r147[19] = $r13;

        $r147[20] = "Panel.font";

        $r147[21] = $r13;

        $r147[22] = "TextField.font";

        $r147[23] = $r13;

        $r147[24] = "ComboBox.font";

        $r147[25] = $r13;

        $r147[26] = "Button.font";

        $r147[27] = $r13;

        virtualinvoke r12.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r147);

     label14:
        $r146 = staticinvoke <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.basic.ThemePainter getInstance()>();

        staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: void put(javax.swing.UIDefaults,java.lang.String,java.lang.Object)>(r12, "Theme.painter", $r146);

        return;
    }
}
