public final class org.apache.commons.compress.utils.IOUtils extends java.lang.Object
{
    private static final int COPY_BUF_SIZE;
    private static final int SKIP_BUF_SIZE;
    private static final byte[] SKIP_BUF;

    private void <init>()
    {
        org.apache.commons.compress.utils.IOUtils r0;

        r0 := @this: org.apache.commons.compress.utils.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        long $l0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, 8024);

        return $l0;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        long $l2, l3;
        int i0, $i1, $i5;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        l3 = 0L;

     label1:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i5 = (int) -1;

        if $i5 == $i1 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i1);

        $l2 = (long) $i1;

        l3 = l3 + $l2;

        goto label1;

     label2:
        return l3;
    }

    public static long skip(java.io.InputStream, long) throws java.io.IOException
    {
        byte[] $r1;
        long l0, $l2, $l3, $l6, $l7, l9;
        byte $b1, $b8, $b10;
        int $i4, $i5, $i11, $i12;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        l9 := @parameter1: long;

        l0 = l9;

     label1:
        $b1 = l9 cmp 0L;

        $i11 = (int) $b1;

        if $i11 <= 0 goto label3;

        $l7 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l9);

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label2;

        goto label3;

     label2:
        l9 = l9 - $l7;

        goto label1;

     label3:
        $b10 = l9 cmp 0L;

        $i12 = (int) $b10;

        if $i12 <= 0 goto label5;

        $r1 = <org.apache.commons.compress.utils.IOUtils: byte[] SKIP_BUF>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l9, 4096L);

        $i4 = (int) $l3;

        $i5 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>(r0, $r1, 0, $i4);

        if $i5 >= 1 goto label4;

        goto label5;

     label4:
        $l6 = (long) $i5;

        l9 = l9 - $l6;

        goto label3;

     label5:
        $l2 = l0 - l9;

        return $l2;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        i7 = 0;

     label3:
        if i7 == i0 goto label5;

        $i5 = i1 + i7;

        $i4 = i0 - i7;

        $i6 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, $i5, $i4);

        $i9 = (int) -1;

        if $i6 != $i9 goto label4;

        goto label5;

     label4:
        i7 = i7 + $i6;

        goto label3;

     label5:
        return i7;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable r0;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.commons.compress.utils.IOUtils: int SKIP_BUF_SIZE> = 4096;

        <org.apache.commons.compress.utils.IOUtils: int COPY_BUF_SIZE> = 8024;

        $r0 = newarray (byte)[4096];

        <org.apache.commons.compress.utils.IOUtils: byte[] SKIP_BUF> = $r0;

        return;
    }
}
