public class org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private org.apache.lucene.analysis.util.CharArraySet dictionary;
    private final java.lang.String dictFile;
    private final int minWordSize;
    private final int minSubwordSize;
    private final int maxSubwordSize;
    private final boolean onlyLongestMatch;

    public void <init>(java.util.Map)
    {
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory r0;
        java.util.Map r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: void assureMatchVersion()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, "dictionary");

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: java.lang.String dictFile> = $r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minWordSize", 5);

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int minWordSize> = $i0;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minSubwordSize", 2);

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int minSubwordSize> = $i1;

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "maxSubwordSize", 15);

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int maxSubwordSize> = $i2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "onlyLongestMatch", 1);

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: boolean onlyLongestMatch> = $z0;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory r0;
        org.apache.lucene.analysis.util.ResourceLoader r1;
        org.apache.lucene.analysis.util.CharArraySet $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r2 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: java.lang.String dictFile>;

        $r3 = specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String,boolean)>(r1, $r2, 0);

        r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet dictionary> = $r3;

        return;
    }

    public org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r2, $r5;
        org.apache.lucene.util.Version $r4;
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter $r6;
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory r0;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.util.CharArraySet $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r1 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        if $r1 != null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r6 = new org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter;

        $r5 = $r6;

        $r4 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        $r3 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        $i2 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int minWordSize>;

        $i1 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int minSubwordSize>;

        $i0 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: int maxSubwordSize>;

        $z0 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilterFactory: boolean onlyLongestMatch>;

        specialinvoke $r6.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>($r4, r2, $r3, $i2, $i1, $i0, $z0);

     label2:
        return $r5;
    }
}
