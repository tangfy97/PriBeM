public final class org.apache.cxf.common.util.ModCountCopyOnWriteArrayList extends java.util.concurrent.CopyOnWriteArrayList
{
    private static final long serialVersionUID;
    java.util.concurrent.atomic.AtomicInteger modCount;

    public void <init>()
    {
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2, $r4;
        java.util.Collection r1;
        int $i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount> = $r2;

        $z0 = r1 instanceof org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        $r3 = (org.apache.cxf.common.util.ModCountCopyOnWriteArrayList) r1;

        $i0 = virtualinvoke $r3.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: int getModCount()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i0);

     label1:
        return;
    }

    public int getModCount()
    {
        int $i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        $r1 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public void setModCount(int)
    {
        int i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        int i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.lang.Object r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.Collection r1;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.Collection r1;
        int i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>(i0, r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public int addAllAbsent(java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.Collection r1;
        int $i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $i0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>(r1);

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        return $i0;
    }

    public boolean addIfAbsent(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public void clear()
    {
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void clear()>();

        $r1 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public java.lang.Object remove(int)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        int i0;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>(i0);

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.Collection r1;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.Collection r1;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r0;

        r0 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        $i0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>();

        $r1 = r0.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0, $i1;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList r1, $r3;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        if $z0 == 0 goto label3;

        $z1 = specialinvoke r1.<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r2 = r1.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: java.util.concurrent.atomic.AtomicInteger modCount>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r3 = (org.apache.cxf.common.util.ModCountCopyOnWriteArrayList) r0;

        $i1 = virtualinvoke $r3.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: int getModCount()>();

        if $i0 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: long serialVersionUID> = 1783937035760941219L;

        return;
    }
}
