public class org.codehaus.groovy.runtime.StackTraceUtils extends java.lang.Object
{
    public static final java.lang.String STACK_LOG_NAME;
    private static final java.util.logging.Logger STACK_LOG;
    private static final java.lang.String[] GROOVY_PACKAGES;

    public void <init>()
    {
        org.codehaus.groovy.runtime.StackTraceUtils r0;

        r0 := @this: org.codehaus.groovy.runtime.StackTraceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Throwable sanitize(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.util.logging.Logger $r4;
        java.util.ArrayList $r2;
        java.util.logging.Level $r3;
        java.lang.StackTraceElement[] $r1, r7;
        int $i0, $i1, i2;
        java.lang.StackTraceElement r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("groovy.full.stacktrace");

        if $z0 != 0 goto label4;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        r5 = $r1[i2];

        $r6 = virtualinvoke r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: boolean isApplicationClass(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = <org.codehaus.groovy.runtime.StackTraceUtils: java.util.logging.Logger STACK_LOG>;

        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, "Sanitizing stacktrace:", r0);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r7 = newarray (java.lang.StackTraceElement)[$i1];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r7);

        virtualinvoke r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(r7);

     label4:
        return r0;
    }

    public static void printSanitizedStackTrace(java.lang.Throwable, java.io.PrintWriter)
    {
        java.lang.Throwable $r0, r15;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13;
        int $i0, $i1, i2;
        java.lang.StackTraceElement r2;
        java.lang.String $r6, $r9, $r14;
        java.io.PrintWriter r3;
        java.lang.StackTraceElement[] $r1;

        r15 := @parameter0: java.lang.Throwable;

        r3 := @parameter1: java.io.PrintWriter;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.Throwable sanitize(java.lang.Throwable)>(r15);

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        r2 = $r1[i2];

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("at ");

        $r6 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r9 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i1 = virtualinvoke r2.<java.lang.StackTraceElement: int getLineNumber()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void printSanitizedStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: void printSanitizedStackTrace(java.lang.Throwable,java.io.PrintWriter)>(r0, $r1);

        return;
    }

    public static boolean isApplicationClass(java.lang.String)
    {
        int $i0, i1;
        java.lang.String[] $r0, $r1;
        java.lang.String r2, r3;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r0 = <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.String[] GROOVY_PACKAGES>;

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label3;

        $r1 = <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.String[] GROOVY_PACKAGES>;

        r2 = $r1[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static java.lang.Throwable extractRootCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1, r2;

        r0 := @parameter0: java.lang.Throwable;

        r2 = r0;

     label1:
        $r1 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label2;

        r2 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.Throwable sanitizeRootCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1, $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.Throwable extractRootCause(java.lang.Throwable)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.Throwable sanitize(java.lang.Throwable)>($r1);

        return $r2;
    }

    public static java.lang.Throwable deepSanitize(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1, $r2, $r3, r4;

        r0 := @parameter0: java.lang.Throwable;

        r4 = r0;

     label1:
        $r1 = virtualinvoke r4.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label2;

        $r3 = virtualinvoke r4.<java.lang.Throwable: java.lang.Throwable getCause()>();

        r4 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.Throwable sanitize(java.lang.Throwable)>($r3);

        goto label1;

     label2:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.Throwable sanitize(java.lang.Throwable)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.Enumeration $r1;
        java.util.logging.LogManager $r0;
        java.lang.String[] $r5;
        java.util.logging.Logger $r2, $r3, $r8;
        java.lang.Object $r7;
        java.lang.String $r4, $r6;
        boolean $z0, $z1;

        <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.String STACK_LOG_NAME> = "StackTrace";

        $r0 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r1 = virtualinvoke $r0.<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = "StackTrace";

        $r7 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $r8 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("StackTrace");

        <org.codehaus.groovy.runtime.StackTraceUtils: java.util.logging.Logger STACK_LOG> = $r8;

        goto label3;

     label2:
        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("StackTrace");

        <org.codehaus.groovy.runtime.StackTraceUtils: java.util.logging.Logger STACK_LOG> = $r2;

        $r3 = <org.codehaus.groovy.runtime.StackTraceUtils: java.util.logging.Logger STACK_LOG>;

        virtualinvoke $r3.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(0);

     label3:
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.sanitized.stacktraces", "groovy.,org.codehaus.groovy.,java.,javax.,sun.,gjdk.groovy.,");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("(\\s|,)+");

        <org.codehaus.groovy.runtime.StackTraceUtils: java.lang.String[] GROOVY_PACKAGES> = $r5;

        return;
    }
}
