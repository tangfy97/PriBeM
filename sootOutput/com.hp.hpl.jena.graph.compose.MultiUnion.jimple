public class com.hp.hpl.jena.graph.compose.MultiUnion extends com.hp.hpl.jena.graph.compose.Polyadic
{
    private boolean optimising;

    public void <init>()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Polyadic: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("jena.union.optimise", "yes");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        r0.<com.hp.hpl.jena.graph.compose.MultiUnion: boolean optimising> = $z0;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Graph[])
    {
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        java.lang.String $r2;
        com.hp.hpl.jena.graph.Graph[] r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph[];

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Polyadic: void <init>(com.hp.hpl.jena.graph.Graph[])>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("jena.union.optimise", "yes");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        r0.<com.hp.hpl.jena.graph.compose.MultiUnion: boolean optimising> = $z0;

        return;
    }

    public void <init>(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Polyadic: void <init>(java.util.Iterator)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("jena.union.optimise", "yes");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        r0.<com.hp.hpl.jena.graph.compose.MultiUnion: boolean optimising> = $z0;

        return;
    }

    private boolean optimiseOne()
    {
        java.util.List $r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        $z0 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: boolean optimising>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected com.hp.hpl.jena.graph.GraphStatisticsHandler createStatisticsHandler()
    {
        com.hp.hpl.jena.graph.compose.MultiUnion$MultiUnionStatisticsHandler $r0;
        com.hp.hpl.jena.graph.compose.MultiUnion r1;

        r1 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        $r0 = new com.hp.hpl.jena.graph.compose.MultiUnion$MultiUnionStatisticsHandler;

        specialinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion$MultiUnionStatisticsHandler: void <init>(com.hp.hpl.jena.graph.compose.MultiUnion)>(r1);

        return $r0;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.graph.Graph getRequiredBaseGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r2);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.graph.Graph getRequiredBaseGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r2);

        return;
    }

    public boolean graphBaseContains(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Triple r4;
        java.util.List $r1;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.graph.Graph) $r3;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r4);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2, $r3;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        com.hp.hpl.jena.graph.TripleMatch r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.graph.compose.MultiUnion: boolean optimiseOne()>();

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.util.iterator.ExtendedIterator singleGraphFind(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        goto label2;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.util.iterator.ExtendedIterator multiGraphFind(com.hp.hpl.jena.graph.TripleMatch)>(r1);

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.impl.SimpleEventManager: com.hp.hpl.jena.util.iterator.ExtendedIterator notifyingRemove(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r3);

        return $r2;
    }

    private com.hp.hpl.jena.util.iterator.ExtendedIterator singleGraphFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        java.util.List $r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.TripleMatch r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r3 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.hp.hpl.jena.graph.Graph) $r2;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r3);

        return $r5;
    }

    private com.hp.hpl.jena.util.iterator.ExtendedIterator multiGraphFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        java.lang.Throwable $r10;
        java.util.Iterator $r3;
        java.util.Set $r0;
        java.util.List $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r7, $r8, $r9, r11, r12;
        com.hp.hpl.jena.graph.compose.MultiUnion r1;
        java.lang.Object $r4;
        com.hp.hpl.jena.graph.TripleMatch r5;
        com.hp.hpl.jena.graph.Graph $r6;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r5 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r0 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r11 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        z1 = 0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.hp.hpl.jena.graph.Graph) $r4;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r5);

        $r8 = staticinvoke <com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.util.iterator.ExtendedIterator rejecting(com.hp.hpl.jena.util.iterator.ExtendedIterator,java.util.Set)>($r7, $r0);

        $r9 = staticinvoke <com.hp.hpl.jena.graph.compose.MultiUnion: com.hp.hpl.jena.util.iterator.ExtendedIterator recording(com.hp.hpl.jena.util.iterator.ClosableIterator,java.util.Set)>($r8, $r0);

        r11 = interfaceinvoke r11.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r9);

        goto label2;

     label3:
        z1 = 1;

        r12 = r11;

     label4:
        if 1 != 0 goto label5;

        interfaceinvoke r11.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label5:
        return r12;

     label6:
        $r10 := @caughtexception;

     label7:
        if z1 != 0 goto label8;

        interfaceinvoke r11.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void addGraph(com.hp.hpl.jena.graph.Graph)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.graph.compose.MultiUnion r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.MultiUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.graph.compose.MultiUnion: java.util.List m_subGraphs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }
}
