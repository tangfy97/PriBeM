public abstract class groovyjarjarantlr.debug.DebuggingCharScanner extends groovyjarjarantlr.CharScanner implements groovyjarjarantlr.debug.DebuggingParser
{
    private groovyjarjarantlr.debug.ParserEventSupport parserEventSupport;
    private boolean _notDebugMode;
    protected java.lang.String[] ruleNames;
    protected java.lang.String[] semPredNames;

    public void <init>(groovyjarjarantlr.InputBuffer)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.InputBuffer r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.InputBuffer;

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void <init>(groovyjarjarantlr.InputBuffer)>(r1);

        $r2 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r2;

        r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean _notDebugMode> = 0;

        return;
    }

    public void <init>(groovyjarjarantlr.LexerSharedInputState)
    {
        groovyjarjarantlr.LexerSharedInputState r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.LexerSharedInputState;

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void <init>(groovyjarjarantlr.LexerSharedInputState)>(r1);

        $r2 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r2;

        r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean _notDebugMode> = 0;

        return;
    }

    public void addMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.debug.MessageListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addMessageListener(groovyjarjarantlr.debug.MessageListener)>(r1);

        return;
    }

    public void addNewLineListener(groovyjarjarantlr.debug.NewLineListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.NewLineListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.NewLineListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addNewLineListener(groovyjarjarantlr.debug.NewLineListener)>(r1);

        return;
    }

    public void addParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.ParserListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserListener(groovyjarjarantlr.debug.ParserListener)>(r1);

        return;
    }

    public void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.debug.ParserMatchListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r1);

        return;
    }

    public void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.ParserTokenListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r1);

        return;
    }

    public void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.SemanticPredicateListener r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r1);

        return;
    }

    public void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r1);

        return;
    }

    public void addTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.TraceListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addTraceListener(groovyjarjarantlr.debug.TraceListener)>(r1);

        return;
    }

    public void consume() throws groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.CharStreamException $r2;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport $r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 = -99;

     label1:
        i0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: char LA(int)>(1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        specialinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireConsume(int)>(i0);

        return;

        catch groovyjarjarantlr.CharStreamException from label1 to label2 with label3;
    }

    protected void fireEnterRule(int, int)
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireEnterRule(int,int,int)>(i0, $i2, i1);

     label1:
        return;
    }

    protected void fireExitRule(int, int)
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireExitRule(int,int,int)>(i0, $i2, i1);

     label1:
        return;
    }

    protected boolean fireSemanticPredicateEvaluated(int, int, boolean)
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0, z1, $z2;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        $z2 = virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: boolean fireSemanticPredicateEvaluated(int,int,boolean,int)>(i0, i1, z1, $i2);

        return $z2;

     label1:
        return z1;
    }

    protected void fireSyntacticPredicateFailed()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateFailed(int)>($i0);

     label1:
        return;
    }

    protected void fireSyntacticPredicateStarted()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateStarted(int)>($i0);

     label1:
        return;
    }

    protected void fireSyntacticPredicateSucceeded()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateSucceeded(int)>($i0);

     label1:
        return;
    }

    public java.lang.String getRuleName(int)
    {
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: java.lang.String[] ruleNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.String getSemPredName(int)
    {
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: java.lang.String[] semPredNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public synchronized void goToSleep()
    {
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        java.lang.InterruptedException $r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean isDebugMode()
    {
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        $z0 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean _notDebugMode>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public char LA(int) throws groovyjarjarantlr.CharStreamException
    {
        int i0, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r1;
        char $c1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        $c1 = specialinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(i0);

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $i2 = (int) $c1;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireLA(int,int)>(i0, $i2);

        return $c1;
    }

    protected groovyjarjarantlr.Token makeToken(int)
    {
        int i0;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.Token $r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.Token makeToken(int)>(i0);

        return $r1;
    }

    public void match(char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r1, $r4, $r5;
        char $c0, c1;
        int $i2, $i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport $r2, $r6;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.MismatchedCharException $r3;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        c1 := @parameter0: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: char LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.CharScanner: void match(char)>(c1);

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(char,int)>(c1, $i2);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r4.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i3 != 0 goto label4;

        $r6 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r5 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i4 = $r5.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r6.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(char,char,int)>($c0, c1, $i4);

     label4:
        throw $r3;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedCharException from label1 to label2 with label3;
    }

    public void match(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r4, $r7, $r8;
        int $i1, $i2, $i3, $i4, $i5;
        groovyjarjarantlr.debug.ParserEventSupport $r5, $r9;
        java.lang.String $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.MismatchedCharException $r6;
        groovyjarjarantlr.ANTLRStringBuffer $r1;
        char $c0;
        groovyjarjarantlr.collections.impl.BitSet r3;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r3 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: java.lang.String toString()>();

        $c0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: char LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.CharScanner: void match(groovyjarjarantlr.collections.impl.BitSet)>(r3);

        $r5 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r4 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i1 = $r4.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        $i4 = (int) $c0;

        virtualinvoke $r5.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(int,groovyjarjarantlr.collections.impl.BitSet,java.lang.String,int)>($i4, r3, $r2, $i1);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r7.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i2 != 0 goto label4;

        $r9 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r8 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r8.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        $i5 = (int) $c0;

        virtualinvoke $r9.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(int,groovyjarjarantlr.collections.impl.BitSet,java.lang.String,int)>($i5, r3, $r2, $i3);

     label4:
        throw $r6;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedCharException from label1 to label2 with label3;
    }

    public void match(java.lang.String) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r3, $r6, $r9;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i3, $i4, i5;
        groovyjarjarantlr.debug.ParserEventSupport $r4, $r7;
        java.lang.String r1, $r8;
        groovyjarjarantlr.debug.DebuggingCharScanner r2;
        groovyjarjarantlr.MismatchedCharException $r5;
        char $c2;
        java.lang.Exception $r10;

        r2 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        i5 = 1;

     label2:
        if i5 > $i0 goto label3;

        $c2 = specialinvoke r2.<groovyjarjarantlr.CharScanner: char LA(int)>(i5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        i5 = i5 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        specialinvoke r2.<groovyjarjarantlr.CharScanner: void match(java.lang.String)>(r1);

        $r4 = r2.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r3 = r2.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i1 = $r3.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r4.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(java.lang.String,int)>(r1, $i1);

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        $r6 = r2.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r6.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i3 != 0 goto label8;

        $r7 = r2.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = r2.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i4 = $r9.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r7.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(java.lang.String,java.lang.String,int)>($r8, r1, $i4);

     label8:
        throw $r5;

     label9:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
        catch groovyjarjarantlr.MismatchedCharException from label5 to label6 with label7;
    }

    public void matchNot(char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r1, $r4, $r5;
        char $c0, c1;
        int $i2, $i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport $r2, $r6;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.MismatchedCharException $r3;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        c1 := @parameter0: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: char LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.CharScanner: void matchNot(char)>(c1);

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatchNot(char,char,int)>($c0, c1, $i2);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r4.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i3 != 0 goto label4;

        $r6 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r5 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i4 = $r5.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r6.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatchNot(char,char,int)>($c0, c1, $i4);

     label4:
        throw $r3;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedCharException from label1 to label2 with label3;
    }

    public void matchRange(char, char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r7, $r9, $r16;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r10, $r12, $r13, $r14;
        int $i3, $i4, $i5;
        groovyjarjarantlr.debug.ParserEventSupport $r2, $r11;
        java.lang.String $r6, $r15;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.MismatchedCharException $r8;
        char $c0, c1, c2;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        c1 := @parameter0: char;

        c2 := @parameter1: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: char LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.CharScanner: void matchRange(char,char)>(c1, c2);

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r7.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(char,java.lang.String,int)>($c0, $r6, $i3);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i4 = $r9.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i4 != 0 goto label4;

        $r11 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i5 = $r16.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        virtualinvoke $r11.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(char,java.lang.String,int)>($c0, $r15, $i5);

     label4:
        throw $r8;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedCharException from label1 to label2 with label3;
    }

    public void newline()
    {
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void newline()>();

        $r1 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.debug.DebuggingCharScanner: int getLine()>();

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireNewLine(int)>($i0);

        return;
    }

    public void removeMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.debug.MessageListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeMessageListener(groovyjarjarantlr.debug.MessageListener)>(r1);

        return;
    }

    public void removeNewLineListener(groovyjarjarantlr.debug.NewLineListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.NewLineListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.NewLineListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeNewLineListener(groovyjarjarantlr.debug.NewLineListener)>(r1);

        return;
    }

    public void removeParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.ParserListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserListener(groovyjarjarantlr.debug.ParserListener)>(r1);

        return;
    }

    public void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.debug.ParserMatchListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r1);

        return;
    }

    public void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.ParserTokenListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r1);

        return;
    }

    public void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.SemanticPredicateListener r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r1);

        return;
    }

    public void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r1);

        return;
    }

    public void removeTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.debug.TraceListener r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeTraceListener(groovyjarjarantlr.debug.TraceListener)>(r1);

        return;
    }

    public void reportError(groovyjarjarantlr.MismatchedCharException)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        groovyjarjarantlr.MismatchedCharException r1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: groovyjarjarantlr.MismatchedCharException;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportError(java.lang.Exception)>(r1);

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void reportError(groovyjarjarantlr.RecognitionException)>(r1);

        return;
    }

    public void reportError(java.lang.String)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        java.lang.String r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportError(java.lang.String)>(r1);

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void reportError(java.lang.String)>(r1);

        return;
    }

    public void reportWarning(java.lang.String)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        java.lang.String r1;
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.DebuggingCharScanner: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportWarning(java.lang.String)>(r1);

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void reportWarning(java.lang.String)>(r1);

        return;
    }

    public void setDebugMode(boolean)
    {
        groovyjarjarantlr.debug.DebuggingCharScanner r0;
        boolean z0, $z1;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<groovyjarjarantlr.debug.DebuggingCharScanner: boolean _notDebugMode> = $z1;

        return;
    }

    public void setupDebugging()
    {
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        return;
    }

    public synchronized void wakeUp()
    {
        groovyjarjarantlr.debug.DebuggingCharScanner r0;

        r0 := @this: groovyjarjarantlr.debug.DebuggingCharScanner;

        virtualinvoke r0.<java.lang.Object: void notify()>();

        return;
    }
}
