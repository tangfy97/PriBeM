public class org.apache.pdfbox.ExtractImages extends java.lang.Object
{
    private int imageCounter;
    private static final java.lang.String PASSWORD;
    private static final java.lang.String PREFIX;
    private static final java.lang.String ADDKEY;
    private static final java.lang.String NONSEQ;
    private static final java.lang.String DIRECTJPEG;
    private static final java.util.List DCT_FILTERS;

    private void <init>()
    {
        org.apache.pdfbox.ExtractImages r0;

        r0 := @this: org.apache.pdfbox.ExtractImages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.ExtractImages: int imageCounter> = 1;

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r1;
        org.apache.pdfbox.ExtractImages $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.pdfbox.ExtractImages;

        specialinvoke $r0.<org.apache.pdfbox.ExtractImages: void <init>()>();

        specialinvoke $r0.<org.apache.pdfbox.ExtractImages: void extractImages(java.lang.String[])>(r1);

        return;
    }

    private void extractImages(java.lang.String[]) throws java.lang.Exception
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, $z10;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r22;
        org.apache.pdfbox.pdmodel.PDDocument $r1, r21;
        org.apache.pdfbox.pdmodel.PDResources $r7;
        org.apache.pdfbox.ExtractImages r8;
        org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial $r10;
        java.util.List $r3;
        org.apache.pdfbox.pdmodel.PDPage r6;
        java.lang.Throwable $r17;
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String $r12, $r13, $r14, $r15, $r16, r18, r19, r20;
        org.apache.pdfbox.pdmodel.PDDocumentCatalog $r2;
        java.util.Iterator $r4;
        java.io.IOException $r9;
        java.io.File $r11;
        java.lang.Object $r5;

        r8 := @this: org.apache.pdfbox.ExtractImages;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 < 1 goto label01;

        $i1 = lengthof r0;

        if $i1 <= 4 goto label02;

     label01:
        staticinvoke <org.apache.pdfbox.ExtractImages: void usage()>();

        goto label24;

     label02:
        r18 = null;

        r19 = "";

        r20 = null;

        z7 = 0;

        z8 = 0;

        z9 = 0;

        i8 = 0;

     label03:
        $i2 = lengthof r0;

        if i8 >= $i2 goto label12;

        $r12 = r0[i8];

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z2 == 0 goto label05;

        i8 = i8 + 1;

        $i7 = lengthof r0;

        if i8 < $i7 goto label04;

        staticinvoke <org.apache.pdfbox.ExtractImages: void usage()>();

     label04:
        r19 = r0[i8];

        goto label11;

     label05:
        $r13 = r0[i8];

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("-prefix");

        if $z3 == 0 goto label07;

        i8 = i8 + 1;

        $i6 = lengthof r0;

        if i8 < $i6 goto label06;

        staticinvoke <org.apache.pdfbox.ExtractImages: void usage()>();

     label06:
        r20 = r0[i8];

        goto label11;

     label07:
        $r14 = r0[i8];

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("-addkey");

        if $z4 == 0 goto label08;

        z7 = 1;

        goto label11;

     label08:
        $r15 = r0[i8];

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("-nonSeq");

        if $z5 == 0 goto label09;

        z8 = 1;

        goto label11;

     label09:
        $r16 = r0[i8];

        $z6 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("-directJPEG");

        if $z6 == 0 goto label10;

        z9 = 1;

        goto label11;

     label10:
        if r18 != null goto label11;

        r18 = r0[i8];

     label11:
        i8 = i8 + 1;

        goto label03;

     label12:
        if r18 != null goto label13;

        staticinvoke <org.apache.pdfbox.ExtractImages: void usage()>();

        goto label24;

     label13:
        if r20 != null goto label14;

        $i3 = virtualinvoke r18.<java.lang.String: int length()>();

        if $i3 <= 4 goto label14;

        $i4 = virtualinvoke r18.<java.lang.String: int length()>();

        $i5 = $i4 - 4;

        r20 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label14:
        r21 = null;

     label15:
        if z8 == 0 goto label16;

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>(r18);

        r21 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument loadNonSeq(java.io.File,org.apache.pdfbox.io.RandomAccess,java.lang.String)>($r11, null, r19);

        goto label17;

     label16:
        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String)>(r18);

        r21 = $r1;

        $z0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z0 == 0 goto label17;

        $r10 = new org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;

        specialinvoke $r10.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: void <init>(java.lang.String)>(r19);

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void openProtection(org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)>($r10);

     label17:
        $r22 = virtualinvoke r21.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.AccessPermission getCurrentAccessPermission()>();

        $z10 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: boolean canExtractContent()>();

        if $z10 != 0 goto label18;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Error: You do not have permission to extract images.");

        throw $r9;

     label18:
        $r2 = virtualinvoke r21.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: java.util.List getAllPages()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.pdfbox.pdmodel.PDPage) $r5;

        $r7 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        specialinvoke r8.<org.apache.pdfbox.ExtractImages: void processResources(org.apache.pdfbox.pdmodel.PDResources,java.lang.String,boolean,boolean)>($r7, r20, z7, z9);

        goto label19;

     label20:
        if r21 == null goto label24;

        virtualinvoke r21.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label24;

     label21:
        $r17 := @caughtexception;

     label22:
        if r21 == null goto label23;

        virtualinvoke r21.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label23:
        throw $r17;

     label24:
        return;

        catch java.lang.Throwable from label15 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public void writeJpeg2file(org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r11;
        byte[] r10;
        int $i0, $i2;
        java.lang.String r2, $r5;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r6;
        java.io.FileOutputStream r13, $r15;
        org.apache.pdfbox.pdmodel.common.PDStream $r7;
        org.apache.pdfbox.ExtractImages r12;
        java.util.List $r8;
        java.lang.StringBuilder $r3, $r4, $r14;
        java.io.InputStream $r9;

        r12 := @this: org.apache.pdfbox.ExtractImages;

        r6 := @parameter0: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r2 := @parameter1: java.lang.String;

        r13 = null;

     label1:
        $r15 = new java.io.FileOutputStream;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.lang.String)>($r5);

        r13 = $r15;

        $r7 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.pdmodel.common.PDStream getPDStream()>();

        $r8 = <org.apache.pdfbox.ExtractImages: java.util.List DCT_FILTERS>;

        $r9 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream getPartiallyFilteredStream(java.util.List)>($r8);

        r10 = newarray (byte)[1024];

     label2:
        $i0 = virtualinvoke $r9.<java.io.InputStream: int read(byte[])>(r10);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke $r15.<java.io.FileOutputStream: void write(byte[],int,int)>(r10, 0, $i0);

        goto label2;

     label3:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r9);

        virtualinvoke $r15.<java.io.FileOutputStream: void flush()>();

     label4:
        if $r15 == null goto label8;

        virtualinvoke $r15.<java.io.FileOutputStream: void close()>();

        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        if r13 == null goto label7;

        virtualinvoke r13.<java.io.FileOutputStream: void close()>();

     label7:
        throw $r11;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void processResources(org.apache.pdfbox.pdmodel.PDResources, java.lang.String, boolean, boolean) throws java.io.IOException
    {
        java.util.Map $r1;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage r26;
        boolean $z0, $z1, $z2, z3, z4, $z5;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg $r19;
        java.util.Set $r2;
        org.apache.pdfbox.pdmodel.PDResources r0, $r8;
        org.apache.pdfbox.ExtractImages r9;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm r28;
        java.lang.StringBuilder $r12, $r14, $r15, $r20, $r21, $r22, $r23;
        java.lang.String r5, r10, $r11, $r16, $r17, $r18, $r24, $r25, r27;
        java.io.PrintStream $r13;
        java.util.Iterator $r3;
        java.lang.Object $r4, $r6;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject r7;

        r9 := @this: org.apache.pdfbox.ExtractImages;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDResources;

        r10 := @parameter1: java.lang.String;

        z3 := @parameter2: boolean;

        z4 := @parameter3: boolean;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: java.util.Map getXObjects()>();

        if $r1 == null goto label9;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject) $r6;

        $z1 = r7 instanceof org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

        if $z1 == 0 goto label7;

        r26 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage) r7;

        if z3 == 0 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r26.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: java.lang.String getSuffix()>();

        r27 = specialinvoke r9.<org.apache.pdfbox.ExtractImages: java.lang.String getUniqueFileName(java.lang.String,java.lang.String)>($r24, $r25);

        goto label4;

     label3:
        $r11 = virtualinvoke r26.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: java.lang.String getSuffix()>();

        r27 = specialinvoke r9.<org.apache.pdfbox.ExtractImages: java.lang.String getUniqueFileName(java.lang.String,java.lang.String)>(r10, $r11);

     label4:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing image:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        if z4 == 0 goto label5;

        $r17 = "jpg";

        $r18 = virtualinvoke r26.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: java.lang.String getSuffix()>();

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z5 == 0 goto label5;

        $r19 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg) r26;

        virtualinvoke r9.<org.apache.pdfbox.ExtractImages: void writeJpeg2file(org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg,java.lang.String)>($r19, r27);

        goto label6;

     label5:
        virtualinvoke r26.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void write2file(java.lang.String)>(r27);

     label6:
        virtualinvoke r26.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void clear()>();

        goto label8;

     label7:
        $z2 = r7 instanceof org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm;

        if $z2 == 0 goto label8;

        r28 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm) r7;

        $r8 = virtualinvoke r28.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        specialinvoke r9.<org.apache.pdfbox.ExtractImages: void processResources(org.apache.pdfbox.pdmodel.PDResources,java.lang.String,boolean,boolean)>($r8, r10, z3, z4);

     label8:
        goto label2;

     label9:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: void clear()>();

        return;
    }

    private java.lang.String getUniqueFileName(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r1, $r6, r11, $r13, r14;
        boolean $z0;
        org.apache.pdfbox.ExtractImages r4;
        java.io.File $r7, r15;
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r8, $r9, $r10, $r12;

        r4 := @this: org.apache.pdfbox.ExtractImages;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r14 = null;

        r15 = null;

     label1:
        if r15 == null goto label2;

        $z0 = virtualinvoke r15.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i0 = r4.<org.apache.pdfbox.ExtractImages: int imageCounter>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = $r6;

        $r7 = new java.io.File;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r13);

        r15 = $r7;

        $i1 = r4.<org.apache.pdfbox.ExtractImages: int imageCounter>;

        $i2 = $i1 + 1;

        r4.<org.apache.pdfbox.ExtractImages: int imageCounter> = $i2;

        goto label1;

     label3:
        return r14;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.apache.pdfbox.ExtractImages [OPTIONS] <PDF file>\n  -password  <password>        Password to decrypt document\n  -prefix  <image-prefix>      Image prefix(default to pdf name)\n  -addkey                      add the internal image key to the file name\n  -nonSeq                      Enables the new non-sequential parser\n  -directJPEG                  Forces the direct extraction of JPEG images regardless of colorspace\n  <PDF file>                   The PDF document to use\n");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    static void <clinit>()
    {
        org.apache.pdfbox.cos.COSName $r1, $r4;
        java.util.List $r2, $r5;
        java.lang.String $r3, $r6;
        java.util.ArrayList $r0;

        <org.apache.pdfbox.ExtractImages: java.lang.String DIRECTJPEG> = "-directJPEG";

        <org.apache.pdfbox.ExtractImages: java.lang.String NONSEQ> = "-nonSeq";

        <org.apache.pdfbox.ExtractImages: java.lang.String ADDKEY> = "-addkey";

        <org.apache.pdfbox.ExtractImages: java.lang.String PREFIX> = "-prefix";

        <org.apache.pdfbox.ExtractImages: java.lang.String PASSWORD> = "-password";

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.pdfbox.ExtractImages: java.util.List DCT_FILTERS> = $r0;

        $r2 = <org.apache.pdfbox.ExtractImages: java.util.List DCT_FILTERS>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE>;

        $r3 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = <org.apache.pdfbox.ExtractImages: java.util.List DCT_FILTERS>;

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE_ABBREVIATION>;

        $r6 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }
}
