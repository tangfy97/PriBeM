public class org.codehaus.jackson.map.introspect.BasicClassIntrospector extends org.codehaus.jackson.map.ClassIntrospector
{
    protected static final org.codehaus.jackson.map.introspect.BasicBeanDescription STRING_DESC;
    protected static final org.codehaus.jackson.map.introspect.BasicBeanDescription BOOLEAN_DESC;
    protected static final org.codehaus.jackson.map.introspect.BasicBeanDescription INT_DESC;
    protected static final org.codehaus.jackson.map.introspect.BasicBeanDescription LONG_DESC;
    public static final org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter DEFAULT_GETTER_FILTER;
    public static final org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter DEFAULT_SETTER_FILTER;
    public static final org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter DEFAULT_SETTER_AND_GETTER_FILTER;
    protected static final org.codehaus.jackson.map.introspect.MethodFilter MINIMAL_FILTER;
    public static final org.codehaus.jackson.map.introspect.BasicClassIntrospector instance;

    public void <init>()
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        specialinvoke r0.<org.codehaus.jackson.map.ClassIntrospector: void <init>()>();

        return;
    }

    public org.codehaus.jackson.map.introspect.BasicBeanDescription forSerialization(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2, r6;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.SerializationConfig r3;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription _findCachedDesc(org.codehaus.jackson.type.JavaType)>(r1);

        r6 = $r2;

        if $r2 != null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.POJOPropertiesCollector collectProperties(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,boolean)>(r3, r1, r4, 1);

        r6 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forSerialization(org.codehaus.jackson.map.introspect.POJOPropertiesCollector)>($r5);

     label1:
        return r6;
    }

    public org.codehaus.jackson.map.introspect.BasicBeanDescription forDeserialization(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2, r6;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.DeserializationConfig r3;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription _findCachedDesc(org.codehaus.jackson.type.JavaType)>(r1);

        r6 = $r2;

        if $r2 != null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.POJOPropertiesCollector collectProperties(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,boolean)>(r3, r1, r4, 0);

        r6 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forDeserialization(org.codehaus.jackson.map.introspect.POJOPropertiesCollector)>($r5);

     label1:
        return r6;
    }

    public org.codehaus.jackson.map.introspect.BasicBeanDescription forCreation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2, r6;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.DeserializationConfig r3;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription _findCachedDesc(org.codehaus.jackson.type.JavaType)>(r1);

        r6 = $r2;

        if $r2 != null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.POJOPropertiesCollector collectProperties(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,boolean)>(r3, r1, r4, 0);

        r6 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forDeserialization(org.codehaus.jackson.map.introspect.POJOPropertiesCollector)>($r5);

     label1:
        return r6;
    }

    public org.codehaus.jackson.map.introspect.BasicBeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r6;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Class $r3;
        boolean $z0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r7 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: boolean isAnnotationProcessingEnabled()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $z0 == 0 goto label1;

        $r8 = $r1;

        goto label2;

     label1:
        $r8 = null;

     label2:
        $r5 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r3, $r8, r4);

        $r6 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(r0, r2, $r5);

        return $r6;
    }

    public org.codehaus.jackson.map.introspect.BasicBeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r6;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Class $r3;
        boolean $z0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r7 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: boolean isAnnotationProcessingEnabled()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $z0 == 0 goto label1;

        $r8 = $r1;

        goto label2;

     label1:
        $r8 = null;

     label2:
        $r5 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r3, $r8, r4);

        $r6 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(r0, r2, $r5);

        return $r6;
    }

    public org.codehaus.jackson.map.introspect.POJOPropertiesCollector collectProperties(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver, boolean)
    {
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.introspect.MethodFilter $r5;
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector $r6, $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.AnnotatedClass classWithCreators(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        $r5 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.MethodFilter MINIMAL_FILTER>;

        virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter)>($r5);

        virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveFields()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.POJOPropertiesCollector constructPropertyCollector(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType,boolean)>(r1, $r4, r2, z0);

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.POJOPropertiesCollector collect()>();

        return $r7;
    }

    protected org.codehaus.jackson.map.introspect.POJOPropertiesCollector constructPropertyCollector(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.type.JavaType, boolean)
    {
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector $r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r4;
        boolean z0;

        r4 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        z0 := @parameter3: boolean;

        $r0 = new org.codehaus.jackson.map.introspect.POJOPropertiesCollector;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: void <init>(org.codehaus.jackson.map.MapperConfig,boolean,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(r1, z0, r2, r3);

        return $r0;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedClass classWithCreators(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r8;
        org.codehaus.jackson.map.introspect.MethodFilter $r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Class $r3;
        boolean $z0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r7 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: boolean isAnnotationProcessingEnabled()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $z0 == 0 goto label1;

        $r8 = $r1;

        goto label2;

     label1:
        $r8 = null;

     label2:
        $r5 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r3, $r8, r4);

        $r6 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.MethodFilter MINIMAL_FILTER>;

        virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter)>($r6);

        virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveCreators(boolean)>(1);

        return $r5;
    }

    protected org.codehaus.jackson.map.introspect.BasicBeanDescription _findCachedDesc(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r5, $r6, $r7, $r8;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r9;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r9 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != class "Ljava/lang/String;" goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription STRING_DESC>;

        return $r8;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r1 != $r2 goto label2;

        $r7 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription BOOLEAN_DESC>;

        return $r7;

     label2:
        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r1 != $r3 goto label3;

        $r6 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription INT_DESC>;

        return $r6;

     label3:
        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        if $r1 != $r4 goto label4;

        $r5 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription LONG_DESC>;

        return $r5;

     label4:
        return null;
    }

    protected org.codehaus.jackson.map.introspect.MethodFilter getSerializationMethodFilter(org.codehaus.jackson.map.SerializationConfig)
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter $r0;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r1;
        org.codehaus.jackson.map.SerializationConfig r2;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r0 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter DEFAULT_GETTER_FILTER>;

        return $r0;
    }

    protected org.codehaus.jackson.map.introspect.MethodFilter getDeserializationMethodFilter(org.codehaus.jackson.map.DeserializationConfig)
    {
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter $r2;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter $r3;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r4;
        org.codehaus.jackson.map.DeserializationConfig r0;
        boolean $z0;

        r4 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_GETTERS_AS_SETTERS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter DEFAULT_SETTER_AND_GETTER_FILTER>;

        return $r3;

     label1:
        $r2 = <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter DEFAULT_SETTER_FILTER>;

        return $r2;
    }

    public volatile org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        return $r4;
    }

    public volatile org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        return $r4;
    }

    public volatile org.codehaus.jackson.map.BeanDescription forCreation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription forCreation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        return $r4;
    }

    public volatile org.codehaus.jackson.map.BeanDescription forDeserialization(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription forDeserialization(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        return $r4;
    }

    public volatile org.codehaus.jackson.map.BeanDescription forSerialization(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r4;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector r0;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription forSerialization(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.type.SimpleType $r1, $r6, $r11, $r16;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2, $r7, $r12, $r17;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter $r20;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector $r22;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r0, $r4, $r9, $r14;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter $r21;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter $r19;
        java.lang.Class $r3, $r5, $r8, $r10, $r13, $r15;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter $r18;

        $r0 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(class "Ljava/lang/String;", null, null);

        $r1 = staticinvoke <org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)>(class "Ljava/lang/String;");

        $r2 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(null, $r1, $r0);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription STRING_DESC> = $r2;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r4 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r3, null, null);

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6 = staticinvoke <org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)>($r5);

        $r7 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(null, $r6, $r4);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription BOOLEAN_DESC> = $r7;

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $r9 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r8, null, null);

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $r11 = staticinvoke <org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)>($r10);

        $r12 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(null, $r11, $r9);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription INT_DESC> = $r12;

        $r13 = <java.lang.Long: java.lang.Class TYPE>;

        $r14 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r13, null, null);

        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        $r16 = staticinvoke <org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)>($r15);

        $r17 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass)>(null, $r16, $r14);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicBeanDescription LONG_DESC> = $r17;

        $r18 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter;

        specialinvoke $r18.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter: void <init>(org.codehaus.jackson.map.introspect.BasicClassIntrospector$1)>(null);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter DEFAULT_GETTER_FILTER> = $r18;

        $r19 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter;

        specialinvoke $r19.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter: void <init>()>();

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter DEFAULT_SETTER_FILTER> = $r19;

        $r20 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter;

        specialinvoke $r20.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter: void <init>()>();

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter DEFAULT_SETTER_AND_GETTER_FILTER> = $r20;

        $r21 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter;

        specialinvoke $r21.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter: void <init>(org.codehaus.jackson.map.introspect.BasicClassIntrospector$1)>(null);

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.MethodFilter MINIMAL_FILTER> = $r21;

        $r22 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector;

        specialinvoke $r22.<org.codehaus.jackson.map.introspect.BasicClassIntrospector: void <init>()>();

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector: org.codehaus.jackson.map.introspect.BasicClassIntrospector instance> = $r22;

        return;
    }
}
