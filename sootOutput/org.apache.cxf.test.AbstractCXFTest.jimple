public class org.apache.cxf.test.AbstractCXFTest extends org.junit.Assert
{
    protected org.apache.cxf.test.TestUtilities testUtilities;
    protected org.apache.cxf.Bus bus;

    protected void <init>()
    {
        org.apache.cxf.test.TestUtilities $r1, $r3;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.Class $r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        specialinvoke r0.<org.junit.Assert: void <init>()>();

        $r1 = new org.apache.cxf.test.TestUtilities;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<org.apache.cxf.test.TestUtilities: void <init>(java.lang.Class)>($r2);

        r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities> = $r1;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r3.<org.apache.cxf.test.TestUtilities: void addDefaultNamespaces()>();

        return;
    }

    public void setUpBus() throws java.lang.Exception
    {
        org.apache.cxf.Bus $r1, $r2, $r3;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r1 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus createBus()>();

        r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus> = $r2;

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus>;

        virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: void setBus(org.apache.cxf.Bus)>($r3);

     label1:
        return;
    }

    public org.apache.cxf.Bus getBus()
    {
        org.apache.cxf.Bus $r1;
        org.apache.cxf.test.AbstractCXFTest r0;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r1 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus>;

        return $r1;
    }

    public void shutdownBus()
    {
        org.apache.cxf.Bus $r1, $r2;
        org.apache.cxf.test.AbstractCXFTest r0;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r1 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus>;

        interfaceinvoke $r2.<org.apache.cxf.Bus: void shutdown(boolean)>(0);

        r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.Bus bus> = null;

     label1:
        staticinvoke <org.apache.cxf.BusFactory: void setDefaultBus(org.apache.cxf.Bus)>(null);

        return;
    }

    protected org.apache.cxf.Bus createBus() throws org.apache.cxf.BusException
    {
        org.apache.cxf.Bus $r1;
        org.apache.cxf.test.AbstractCXFTest r2;
        org.apache.cxf.BusFactory $r0;

        r2 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r0 = staticinvoke <org.apache.cxf.BusFactory: org.apache.cxf.BusFactory newInstance()>();

        $r1 = virtualinvoke $r0.<org.apache.cxf.BusFactory: org.apache.cxf.Bus createBus()>();

        return $r1;
    }

    protected byte[] invokeBytes(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        byte[] $r5;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r5 = virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: byte[] invokeBytes(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r5;
    }

    protected org.w3c.dom.Node invoke(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.w3c.dom.Node $r5;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r5 = virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: org.w3c.dom.Node invoke(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r5;
    }

    protected org.w3c.dom.Node invoke(java.lang.String, java.lang.String, byte[]) throws java.lang.Exception
    {
        byte[] r3;
        org.w3c.dom.Node $r5;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r5 = virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: org.w3c.dom.Node invoke(java.lang.String,java.lang.String,byte[])>(r1, r2, r3);

        return $r5;
    }

    public org.w3c.dom.NodeList assertValid(java.lang.String, org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.NodeList $r4;
        org.w3c.dom.Node r2;
        org.apache.cxf.test.TestUtilities $r3;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.test.TestUtilities: org.w3c.dom.NodeList assertValid(java.lang.String,org.w3c.dom.Node)>(r1, r2);

        return $r4;
    }

    public void assertValidBoolean(java.lang.String, org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.Node r2;
        org.apache.cxf.test.TestUtilities $r3;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r3.<org.apache.cxf.test.TestUtilities: void assertValidBoolean(java.lang.String,org.w3c.dom.Node)>(r1, r2);

        return;
    }

    public org.w3c.dom.NodeList assertInvalid(java.lang.String, org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.NodeList $r4;
        org.w3c.dom.Node r2;
        org.apache.cxf.test.TestUtilities $r3;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.test.TestUtilities: org.w3c.dom.NodeList assertInvalid(java.lang.String,org.w3c.dom.Node)>(r1, r2);

        return $r4;
    }

    public void assertXPathEquals(java.lang.String, java.lang.String, org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.Node r3;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.w3c.dom.Node;

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: void assertXPathEquals(java.lang.String,java.lang.String,org.w3c.dom.Node)>(r1, r2, r3);

        return;
    }

    public void assertXPathEquals(java.lang.String, javax.xml.namespace.QName, org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.Node r3;
        org.apache.cxf.test.TestUtilities $r4;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.xml.namespace.QName;

        r3 := @parameter2: org.w3c.dom.Node;

        $r4 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r4.<org.apache.cxf.test.TestUtilities: void assertXPathEquals(java.lang.String,javax.xml.namespace.QName,org.w3c.dom.Node)>(r1, r2, r3);

        return;
    }

    public void assertNoFault(org.w3c.dom.Node) throws java.lang.Exception
    {
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: void assertNoFault(org.w3c.dom.Node)>(r1);

        return;
    }

    public void addNamespace(java.lang.String, java.lang.String)
    {
        org.apache.cxf.test.TestUtilities $r3;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        virtualinvoke $r3.<org.apache.cxf.test.TestUtilities: void addNamespace(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        org.apache.cxf.helpers.MapNamespaceContext $r0;
        java.util.Map $r3;
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r1;

        r1 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r0 = new org.apache.cxf.helpers.MapNamespaceContext;

        $r2 = r1.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: java.util.Map getNamespaces()>();

        specialinvoke $r0.<org.apache.cxf.helpers.MapNamespaceContext: void <init>(java.util.Map)>($r3);

        return $r0;
    }

    public java.util.Map getNamespaces()
    {
        org.apache.cxf.test.TestUtilities $r1;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.util.Map $r2;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        $r1 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r2 = virtualinvoke $r1.<org.apache.cxf.test.TestUtilities: java.util.Map getNamespaces()>();

        return $r2;
    }

    protected java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;
        java.io.InputStream $r3;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r3;
    }

    protected java.io.Reader getResourceAsReader(java.lang.String)
    {
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;
        java.io.Reader $r3;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: java.io.Reader getResourceAsReader(java.lang.String)>(r1);

        return $r3;
    }

    public java.io.File getTestFile(java.lang.String)
    {
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r0;
        java.lang.String r1;
        java.io.File $r3;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: java.io.File getTestFile(java.lang.String)>(r1);

        return $r3;
    }

    public static java.lang.String getBasedir()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <org.apache.cxf.test.TestUtilities: java.lang.String getBasedir()>();

        return $r0;
    }

    protected org.w3c.dom.Document getWSDLDocument(org.apache.cxf.endpoint.Server) throws javax.wsdl.WSDLException
    {
        org.apache.cxf.endpoint.Server r1;
        org.w3c.dom.Document $r3;
        org.apache.cxf.test.TestUtilities $r2;
        org.apache.cxf.test.AbstractCXFTest r0;

        r0 := @this: org.apache.cxf.test.AbstractCXFTest;

        r1 := @parameter0: org.apache.cxf.endpoint.Server;

        $r2 = r0.<org.apache.cxf.test.AbstractCXFTest: org.apache.cxf.test.TestUtilities testUtilities>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.test.TestUtilities: org.w3c.dom.Document getWSDLDocument(org.apache.cxf.endpoint.Server)>(r1);

        return $r3;
    }
}
