public class org.apache.commons.cli.HelpFormatter extends java.lang.Object
{
    public static final int DEFAULT_WIDTH;
    public static final int DEFAULT_LEFT_PAD;
    public static final int DEFAULT_DESC_PAD;
    public static final java.lang.String DEFAULT_SYNTAX_PREFIX;
    public static final java.lang.String DEFAULT_OPT_PREFIX;
    public static final java.lang.String DEFAULT_LONG_OPT_PREFIX;
    public static final java.lang.String DEFAULT_ARG_NAME;
    public int defaultWidth;
    public int defaultLeftPad;
    public int defaultDescPad;
    public java.lang.String defaultSyntaxPrefix;
    public java.lang.String defaultNewLine;
    public java.lang.String defaultOptPrefix;
    public java.lang.String defaultLongOptPrefix;
    public java.lang.String defaultArgName;
    protected java.util.Comparator optionComparator;

    public void <init>()
    {
        org.apache.commons.cli.HelpFormatter$OptionComparator $r2;
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth> = 74;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad> = 1;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad> = 3;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix> = "usage: ";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine> = $r1;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix> = "-";

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix> = "--";

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName> = "arg";

        $r2 = new org.apache.commons.cli.HelpFormatter$OptionComparator;

        specialinvoke $r2.<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>(org.apache.commons.cli.HelpFormatter$1)>(null);

        r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = $r2;

        return;
    }

    public void setWidth(int)
    {
        int i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth> = i0;

        return;
    }

    public int getWidth()
    {
        int $i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        return $i0;
    }

    public void setLeftPadding(int)
    {
        int i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad> = i0;

        return;
    }

    public int getLeftPadding()
    {
        int $i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad>;

        return $i0;
    }

    public void setDescPadding(int)
    {
        int i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad> = i0;

        return;
    }

    public int getDescPadding()
    {
        int $i0;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad>;

        return $i0;
    }

    public void setSyntaxPrefix(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix> = r1;

        return;
    }

    public java.lang.String getSyntaxPrefix()
    {
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        return $r1;
    }

    public void setNewLine(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine> = r1;

        return;
    }

    public java.lang.String getNewLine()
    {
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        return $r1;
    }

    public void setOptPrefix(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix> = r1;

        return;
    }

    public java.lang.String getOptPrefix()
    {
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix>;

        return $r1;
    }

    public void setLongOptPrefix(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix> = r1;

        return;
    }

    public java.lang.String getLongOptPrefix()
    {
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        return $r1;
    }

    public void setArgName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName> = r1;

        return;
    }

    public java.lang.String getArgName()
    {
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName>;

        return $r1;
    }

    public java.util.Comparator getOptionComparator()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 = r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator>;

        return $r1;
    }

    public void setOptionComparator(java.util.Comparator)
    {
        org.apache.commons.cli.HelpFormatter$OptionComparator $r2;
        java.util.Comparator r0;
        org.apache.commons.cli.HelpFormatter r1;

        r1 := @this: org.apache.commons.cli.HelpFormatter;

        r0 := @parameter0: java.util.Comparator;

        if r0 != null goto label1;

        $r2 = new org.apache.commons.cli.HelpFormatter$OptionComparator;

        specialinvoke $r2.<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>(org.apache.commons.cli.HelpFormatter$1)>(null);

        r1.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = $r2;

        goto label2;

     label1:
        r1.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = r0;

     label2:
        return;
    }

    public void printHelp(java.lang.String, org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.Options r2;
        int $i0;
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.cli.Options;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, r1, null, r2, null, 0);

        return;
    }

    public void printHelp(java.lang.String, org.apache.commons.cli.Options, boolean)
    {
        org.apache.commons.cli.Options r2;
        int $i0;
        java.lang.String r1;
        org.apache.commons.cli.HelpFormatter r0;
        boolean z0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.cli.Options;

        z0 := @parameter2: boolean;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, r1, null, r2, null, z0);

        return;
    }

    public void printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)
    {
        org.apache.commons.cli.Options r3;
        java.lang.String r1, r2, r4;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.commons.cli.Options;

        r4 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>(r1, r2, r3, r4, 0);

        return;
    }

    public void printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)
    {
        org.apache.commons.cli.Options r3;
        int $i0;
        java.lang.String r1, r2, r4;
        org.apache.commons.cli.HelpFormatter r0;
        boolean z0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.commons.cli.Options;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, r1, r2, r3, r4, z0);

        return;
    }

    public void printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)
    {
        int i0;
        org.apache.commons.cli.Options r3;
        java.lang.String r1, r2, r4;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.commons.cli.Options;

        r4 := @parameter4: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>(i0, r1, r2, r3, r4, 0);

        return;
    }

    public void printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)
    {
        java.io.PrintWriter $r0;
        java.io.PrintStream $r1;
        org.apache.commons.cli.Options r5;
        org.apache.commons.cli.HelpFormatter r2;
        int i0, $i1, $i2;
        java.lang.String r3, r4, r6;
        boolean z0;

        r2 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.commons.cli.Options;

        r6 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r0 = new java.io.PrintWriter;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r1);

        $i2 = r2.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad>;

        $i1 = r2.<org.apache.commons.cli.HelpFormatter: int defaultDescPad>;

        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>($r0, i0, r3, r4, r5, $i2, $i1, r6, z0);

        virtualinvoke $r0.<java.io.PrintWriter: void flush()>();

        return;
    }

    public void printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String)
    {
        java.io.PrintWriter r1;
        org.apache.commons.cli.Options r4;
        org.apache.commons.cli.HelpFormatter r0;
        int i0, i1, i2;
        java.lang.String r2, r3, r5;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: org.apache.commons.cli.Options;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        r5 := @parameter7: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>(r1, i0, r2, r3, r4, i1, i2, r5, 0);

        return;
    }

    public void printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String, boolean)
    {
        org.apache.commons.cli.Options r5;
        org.apache.commons.cli.HelpFormatter r2;
        int $i0, i1, i2, i3, $i4, $i5;
        java.lang.String r0, r4, r6, $r7, $r8;
        boolean z0;
        java.io.PrintWriter r3;
        java.lang.IllegalArgumentException $r1;

        r2 := @this: org.apache.commons.cli.HelpFormatter;

        r3 := @parameter0: java.io.PrintWriter;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: org.apache.commons.cli.Options;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        r6 := @parameter7: java.lang.String;

        z0 := @parameter8: boolean;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cmdLineSyntax not provided");

        throw $r1;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String,org.apache.commons.cli.Options)>(r3, i1, r0, r5);

        goto label4;

     label3:
        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String)>(r3, i1, r0);

     label4:
        if r4 == null goto label5;

        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i5 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i5 <= 0 goto label5;

        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,java.lang.String)>(r3, i1, r4);

     label5:
        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printOptions(java.io.PrintWriter,int,org.apache.commons.cli.Options,int,int)>(r3, i1, r5, i2, i3);

        if r6 == null goto label6;

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

        $i4 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i4 <= 0 goto label6;

        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,java.lang.String)>(r3, i1, r6);

     label6:
        return;
    }

    public void printUsage(java.io.PrintWriter, int, java.lang.String, org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.Options r8;
        org.apache.commons.cli.HelpFormatter r1;
        java.util.ArrayList $r6, $r7;
        java.lang.StringBuffer $r0, $r4, $r5;
        int i0, $i1, $i2;
        java.lang.String $r2, r3, $r13, $r14;
        org.apache.commons.cli.Option r16;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintWriter r12;
        java.util.Iterator $r11;
        java.util.Collection $r9;
        org.apache.commons.cli.OptionGroup $r17;
        java.lang.Object $r15;
        java.util.Comparator $r10;

        r1 := @this: org.apache.commons.cli.HelpFormatter;

        r12 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r8 := @parameter3: org.apache.commons.cli.Options;

        $r0 = new java.lang.StringBuffer;

        $r2 = r1.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        $r9 = virtualinvoke r8.<org.apache.commons.cli.Options: java.util.Collection getOptions()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        $r10 = virtualinvoke r1.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r7, $r10);

        $r11 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r15 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.commons.cli.Option) $r15;

        $r17 = virtualinvoke r8.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>(r16);

        if $r17 == null goto label2;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>($r17);

        if $z2 != 0 goto label3;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        specialinvoke r1.<org.apache.commons.cli.HelpFormatter: void appendOptionGroup(java.lang.StringBuffer,org.apache.commons.cli.OptionGroup)>($r5, $r17);

        goto label3;

     label2:
        $z1 = virtualinvoke r16.<org.apache.commons.cli.Option: boolean isRequired()>();

        staticinvoke <org.apache.commons.cli.HelpFormatter: void appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean)>($r5, r16, $z1);

     label3:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label4:
        goto label1;

     label5:
        $r13 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke $r13.<java.lang.String: int indexOf(int)>(32);

        $i2 = $i1 + 1;

        $r14 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>(r12, i0, $i2, $r14);

        return;
    }

    private void appendOptionGroup(java.lang.StringBuffer, org.apache.commons.cli.OptionGroup)
    {
        java.util.Iterator $r5;
        java.util.Collection $r2;
        org.apache.commons.cli.HelpFormatter r3;
        java.util.ArrayList $r1;
        java.lang.StringBuffer r6;
        org.apache.commons.cli.OptionGroup r0;
        java.lang.Object $r7;
        java.util.Comparator $r4;
        org.apache.commons.cli.Option $r8;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: org.apache.commons.cli.HelpFormatter;

        r6 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.apache.commons.cli.OptionGroup;

        $z0 = virtualinvoke r0.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z0 != 0 goto label1;

        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

     label1:
        $r1 = new java.util.ArrayList;

        $r2 = virtualinvoke r0.<org.apache.commons.cli.OptionGroup: java.util.Collection getOptions()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = virtualinvoke r3.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r4);

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.cli.Option) $r7;

        staticinvoke <org.apache.commons.cli.HelpFormatter: void appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean)>(r6, $r8, 1);

        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" | ");

        goto label2;

     label3:
        $z1 = virtualinvoke r0.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z1 != 0 goto label4;

        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label4:
        return;
    }

    private static void appendOption(java.lang.StringBuffer, org.apache.commons.cli.Option, boolean)
    {
        java.lang.StringBuffer r2, $r3, $r5, $r7, $r8;
        java.lang.String $r1, $r4, $r6, $r9;
        org.apache.commons.cli.Option r0;
        boolean z0, $z1, $z2;

        r2 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.apache.commons.cli.Option;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        if $r1 == null goto label2;

        $r8 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r9 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label3;

     label2:
        $r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        $r4 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label3:
        $z1 = virtualinvoke r0.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r0.<org.apache.commons.cli.Option: boolean hasArgName()>();

        if $z2 == 0 goto label4;

        $r5 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r6 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getArgName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

     label4:
        if z0 != 0 goto label5;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label5:
        return;
    }

    public void printUsage(java.io.PrintWriter, int, java.lang.String)
    {
        java.io.PrintWriter r2;
        org.apache.commons.cli.HelpFormatter r1;
        java.lang.StringBuffer $r4, $r6, $r7;
        int $i0, i1, i2, $i3, $i4;
        java.lang.String r0, $r3, $r5, $r8;

        r1 := @this: org.apache.commons.cli.HelpFormatter;

        r2 := @parameter0: java.io.PrintWriter;

        i2 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        i1 = $i0 + 1;

        $r3 = r1.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = $i3 + i1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = r1.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>(r2, i2, $i4, $r8);

        return;
    }

    public void printOptions(java.io.PrintWriter, int, org.apache.commons.cli.Options, int, int)
    {
        java.io.PrintWriter r3;
        org.apache.commons.cli.Options r2;
        org.apache.commons.cli.HelpFormatter r1;
        java.lang.StringBuffer $r0;
        int i0, i1, i2;
        java.lang.String $r4;

        r1 := @this: org.apache.commons.cli.HelpFormatter;

        r3 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.cli.Options;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderOptions(java.lang.StringBuffer,int,org.apache.commons.cli.Options,int,int)>($r0, i0, r2, i1, i2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        return;
    }

    public void printWrapped(java.io.PrintWriter, int, java.lang.String)
    {
        java.io.PrintWriter r1;
        int i0;
        java.lang.String r2;
        org.apache.commons.cli.HelpFormatter r0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>(r1, i0, 0, r2);

        return;
    }

    public void printWrapped(java.io.PrintWriter, int, int, java.lang.String)
    {
        java.io.PrintWriter r3;
        org.apache.commons.cli.HelpFormatter r2;
        java.lang.StringBuffer $r0;
        int $i0, i1, i2;
        java.lang.String r1, $r4;

        r2 := @this: org.apache.commons.cli.HelpFormatter;

        r3 := @parameter0: java.io.PrintWriter;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        virtualinvoke r2.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String)>($r0, i1, i2, r1);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        return;
    }

    protected java.lang.StringBuffer renderOptions(java.lang.StringBuffer, int, org.apache.commons.cli.Options, int, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r5;
        org.apache.commons.cli.Options r4;
        org.apache.commons.cli.HelpFormatter r0;
        java.util.ArrayList $r3;
        java.lang.StringBuffer r9, $r12, $r21, $r23, $r25, $r27, $r29, $r30, $r32, $r34, $r35, $r36, $r38, $r40;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, i8, $i9, $i10, i11;
        java.lang.String $r1, $r2, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r24, $r26, $r28, $r31, $r33, $r37, $r39, $r41;
        org.apache.commons.cli.Option r11, r42;
        java.util.Iterator $r7, $r8;
        java.lang.Object $r10, $r13, $r20;
        java.util.Comparator $r6;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r9 := @parameter0: java.lang.StringBuffer;

        i4 := @parameter1: int;

        r4 := @parameter2: org.apache.commons.cli.Options;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>(i1);

        i8 = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r4.<org.apache.commons.cli.Options: java.util.List helpOptions()>();

        $r6 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r6);

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r20 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r42 = (org.apache.commons.cli.Option) $r20;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>(int)>(8);

        $r22 = virtualinvoke r42.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        if $r22 != null goto label02;

        $r34 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        $r37 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        $r40 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke r42.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        goto label03;

     label02:
        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r24 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke r42.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $z3 = virtualinvoke r42.<org.apache.commons.cli.Option: boolean hasLongOpt()>();

        if $z3 == 0 goto label03;

        $r30 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r31 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke r42.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

     label03:
        $z5 = virtualinvoke r42.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z5 == 0 goto label05;

        $z4 = virtualinvoke r42.<org.apache.commons.cli.Option: boolean hasArgName()>();

        if $z4 == 0 goto label04;

        $r27 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r28 = virtualinvoke r42.<org.apache.commons.cli.Option: java.lang.String getArgName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        goto label05;

     label04:
        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label05:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r21);

        $i9 = virtualinvoke $r21.<java.lang.StringBuffer: int length()>();

        if $i9 <= i8 goto label06;

        $i10 = virtualinvoke $r21.<java.lang.StringBuffer: int length()>();

        goto label07;

     label06:
        $i10 = i8;

     label07:
        i8 = $i10;

        goto label01;

     label08:
        i11 = 0;

        $r8 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.commons.cli.Option) $r10;

        $r12 = new java.lang.StringBuffer;

        $i2 = i11;

        i11 = i11 + 1;

        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.StringBuffer: void <init>(java.lang.String)>($r14);

        $i3 = virtualinvoke $r12.<java.lang.StringBuffer: int length()>();

        if $i3 >= i8 goto label10;

        $i5 = virtualinvoke $r12.<java.lang.StringBuffer: int length()>();

        $i6 = i8 - $i5;

        $r19 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>($i6);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

     label10:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i7 = i8 + i1;

        $r15 = virtualinvoke r11.<org.apache.commons.cli.Option: java.lang.String getDescription()>();

        if $r15 == null goto label11;

        $r18 = virtualinvoke r11.<org.apache.commons.cli.Option: java.lang.String getDescription()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label11:
        $r16 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String)>(r9, i4, $i7, $r16);

        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r17 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

     label12:
        goto label09;

     label13:
        return r9;
    }

    protected java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer, int, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.StringBuffer r1, $r4, $r10, $r13, $r17, $r19;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i8, $i10;
        java.lang.String $r2, $r3, $r5, $r6, $r7, r8, $r11, $r12, $r14, $r15, $r16, $r18;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        r8 := @parameter3: java.lang.String;

        $i1 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: int findWrapPos(java.lang.String,int,int)>(r8, i0, 0);

        i5 = $i1;

        $i8 = (int) -1;

        if $i1 != $i8 goto label1;

        $r7 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>(r8);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        return r1;

     label1:
        $r2 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r3 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>($r2);

        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        if i4 < i0 goto label2;

        i4 = 1;

     label2:
        $r6 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>(i4);

     label3:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(i5);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r8 = $r14;

        $i6 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: int findWrapPos(java.lang.String,int,int)>($r14, i0, 0);

        i5 = $i6;

        $i10 = (int) -1;

        if $i6 != $i10 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        return r1;

     label4:
        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i2 <= i0 goto label5;

        $i3 = i4 - 1;

        if $i6 != $i3 goto label5;

        i5 = i0;

     label5:
        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        $r16 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>($r15);

        $r17 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        goto label3;
    }

    protected int findWrapPos(java.lang.String, int, int)
    {
        org.apache.commons.cli.HelpFormatter r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i9, i10, i11, i12, $i13, $i14, $i16, $i18, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i30;
        java.lang.String r0;
        char $c7, $c8;

        r1 := @this: org.apache.commons.cli.HelpFormatter;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(10, i0);

        i10 = $i1;

        $i16 = (int) -1;

        if $i1 == $i16 goto label01;

        if $i1 <= i3 goto label02;

     label01:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(9, i0);

        i10 = $i2;

        $i18 = (int) -1;

        if $i2 == $i18 goto label03;

        if $i2 > i3 goto label03;

     label02:
        $i9 = i10 + 1;

        return $i9;

     label03:
        $i4 = i0 + i3;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i4 < $i5 goto label04;

        $i20 = (int) -1;

        return $i20;

     label04:
        i11 = i0 + i3;

     label05:
        if i11 < i0 goto label06;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11);

        $i21 = (int) $c8;

        if $i21 == 32 goto label06;

        $i22 = (int) $c8;

        if $i22 == 10 goto label06;

        $i23 = (int) $c8;

        if $i23 == 13 goto label06;

        $i25 = (int) -1;

        i11 = i11 + $i25;

        goto label05;

     label06:
        if i11 <= i0 goto label07;

        return i11;

     label07:
        i12 = i0 + i3;

     label08:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i12 > $i6 goto label09;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i26 = (int) $c7;

        if $i26 == 32 goto label09;

        $i27 = (int) $c7;

        if $i27 == 10 goto label09;

        $i28 = (int) $c7;

        if $i28 == 13 goto label09;

        i12 = i12 + 1;

        goto label08;

     label09:
        $i13 = virtualinvoke r0.<java.lang.String: int length()>();

        if i12 != $i13 goto label10;

        $i30 = (int) -1;

        $i14 = $i30;

        goto label11;

     label10:
        $i14 = i12;

     label11:
        return $i14;
    }

    protected java.lang.String createPadding(int)
    {
        java.lang.StringBuffer $r0;
        int i0, i1;
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter r2;

        r2 := @this: org.apache.commons.cli.HelpFormatter;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected java.lang.String rtrim(java.lang.String)
    {
        char $c2;
        org.apache.commons.cli.HelpFormatter r2;
        int $i0, $i1, i3, $i5;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.apache.commons.cli.HelpFormatter;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label3:
        if i3 <= 0 goto label4;

        $i1 = i3 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label4;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label3;

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.cli.HelpFormatter: java.lang.String DEFAULT_ARG_NAME> = "arg";

        <org.apache.commons.cli.HelpFormatter: java.lang.String DEFAULT_LONG_OPT_PREFIX> = "--";

        <org.apache.commons.cli.HelpFormatter: java.lang.String DEFAULT_OPT_PREFIX> = "-";

        <org.apache.commons.cli.HelpFormatter: java.lang.String DEFAULT_SYNTAX_PREFIX> = "usage: ";

        <org.apache.commons.cli.HelpFormatter: int DEFAULT_DESC_PAD> = 3;

        <org.apache.commons.cli.HelpFormatter: int DEFAULT_LEFT_PAD> = 1;

        <org.apache.commons.cli.HelpFormatter: int DEFAULT_WIDTH> = 74;

        return;
    }
}
