public class org.apache.zookeeper.server.ZooKeeperServerMain extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.lang.String USAGE;
    private org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory;

    public void <init>()
    {
        org.apache.zookeeper.server.ZooKeeperServerMain r0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServerMain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r6, $r10;
        org.slf4j.Logger $r3, $r5, $r8, $r9, $r11;
        java.lang.String[] r1;
        java.lang.IllegalArgumentException $r7;
        java.lang.Exception $r2;
        org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException $r4;
        org.apache.zookeeper.server.ZooKeeperServerMain $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.zookeeper.server.ZooKeeperServerMain;

        specialinvoke $r0.<org.apache.zookeeper.server.ZooKeeperServerMain: void <init>()>();

     label1:
        virtualinvoke $r0.<org.apache.zookeeper.server.ZooKeeperServerMain: void initializeAndRun(java.lang.String[])>(r1);

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Invalid arguments, exiting abnormally", $r7);

        $r9 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]");

        staticinvoke <java.lang.System: void exit(int)>(2);

        goto label6;

     label4:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Invalid config, exiting abnormally", $r4);

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Invalid config, exiting abnormally");

        staticinvoke <java.lang.System: void exit(int)>(2);

        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected exception, exiting abnormally", $r2);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label6:
        $r11 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>("Exiting normally");

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    protected void initializeAndRun(java.lang.String[]) throws org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException, java.io.IOException
    {
        org.slf4j.Logger $r5;
        org.apache.zookeeper.server.ZooKeeperServerMain r2;
        javax.management.JMException $r4;
        int $i0;
        java.lang.String[] r1;
        java.lang.String $r3;
        org.apache.zookeeper.server.ServerConfig $r0;

        r2 := @this: org.apache.zookeeper.server.ZooKeeperServerMain;

        r1 := @parameter0: java.lang.String[];

     label1:
        staticinvoke <org.apache.zookeeper.jmx.ManagedUtil: void registerLog4jMBeans()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unable to register log4j JMX control", $r4);

     label4:
        $r0 = new org.apache.zookeeper.server.ServerConfig;

        specialinvoke $r0.<org.apache.zookeeper.server.ServerConfig: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 1 goto label5;

        $r3 = r1[0];

        virtualinvoke $r0.<org.apache.zookeeper.server.ServerConfig: void parse(java.lang.String)>($r3);

        goto label6;

     label5:
        virtualinvoke $r0.<org.apache.zookeeper.server.ServerConfig: void parse(java.lang.String[])>(r1);

     label6:
        virtualinvoke r2.<org.apache.zookeeper.server.ZooKeeperServerMain: void runFromConfig(org.apache.zookeeper.server.ServerConfig)>($r0);

        return;

        catch javax.management.JMException from label1 to label2 with label3;
    }

    public void runFromConfig(org.apache.zookeeper.server.ServerConfig) throws java.io.IOException
    {
        org.apache.zookeeper.server.ServerCnxnFactory $r9, $r10, $r12, $r13;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r2;
        org.apache.zookeeper.server.ZooKeeperServerMain r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r7;
        boolean $z0;
        org.slf4j.Logger $r0, $r15;
        java.net.InetSocketAddress $r11;
        java.io.File $r3, $r6;
        org.apache.zookeeper.server.ServerConfig r4;
        org.apache.zookeeper.server.ZooKeeperServer $r1;
        java.lang.InterruptedException $r14;

        r8 := @this: org.apache.zookeeper.server.ZooKeeperServerMain;

        r4 := @parameter0: org.apache.zookeeper.server.ServerConfig;

        $r0 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Starting server");

     label1:
        $r1 = new org.apache.zookeeper.server.ZooKeeperServer;

        specialinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void <init>()>();

        $r2 = new org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        $r3 = new java.io.File;

        $r5 = r4.<org.apache.zookeeper.server.ServerConfig: java.lang.String dataLogDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = new java.io.File;

        $r7 = r4.<org.apache.zookeeper.server.ServerConfig: java.lang.String dataDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        specialinvoke $r2.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void <init>(java.io.File,java.io.File)>($r3, $r6);

        virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void setTxnLogFactory(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>($r2);

        $i0 = r4.<org.apache.zookeeper.server.ServerConfig: int tickTime>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void setTickTime(int)>($i0);

        $i1 = r4.<org.apache.zookeeper.server.ServerConfig: int minSessionTimeout>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void setMinSessionTimeout(int)>($i1);

        $i2 = r4.<org.apache.zookeeper.server.ServerConfig: int maxSessionTimeout>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void setMaxSessionTimeout(int)>($i2);

        $r9 = staticinvoke <org.apache.zookeeper.server.ServerCnxnFactory: org.apache.zookeeper.server.ServerCnxnFactory createFactory()>();

        r8.<org.apache.zookeeper.server.ZooKeeperServerMain: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory> = $r9;

        $r10 = r8.<org.apache.zookeeper.server.ZooKeeperServerMain: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        $r11 = virtualinvoke r4.<org.apache.zookeeper.server.ServerConfig: java.net.InetSocketAddress getClientPortAddress()>();

        $i3 = virtualinvoke r4.<org.apache.zookeeper.server.ServerConfig: int getMaxClientCnxns()>();

        virtualinvoke $r10.<org.apache.zookeeper.server.ServerCnxnFactory: void configure(java.net.InetSocketAddress,int)>($r11, $i3);

        $r12 = r8.<org.apache.zookeeper.server.ZooKeeperServerMain: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r12.<org.apache.zookeeper.server.ServerCnxnFactory: void startup(org.apache.zookeeper.server.ZooKeeperServer)>($r1);

        $r13 = r8.<org.apache.zookeeper.server.ZooKeeperServerMain: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r13.<org.apache.zookeeper.server.ServerCnxnFactory: void join()>();

        $z0 = virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: boolean isRunning()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<org.apache.zookeeper.server.ZooKeeperServer: void shutdown()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Server interrupted", $r14);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    protected void shutdown()
    {
        org.apache.zookeeper.server.ServerCnxnFactory $r1;
        org.apache.zookeeper.server.ZooKeeperServerMain r0;

        r0 := @this: org.apache.zookeeper.server.ZooKeeperServerMain;

        $r1 = r0.<org.apache.zookeeper.server.ZooKeeperServerMain: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r1.<org.apache.zookeeper.server.ServerCnxnFactory: void shutdown()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.zookeeper.server.ZooKeeperServerMain: java.lang.String USAGE> = "Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/ZooKeeperServerMain;");

        <org.apache.zookeeper.server.ZooKeeperServerMain: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
