public class org.waveprotocol.box.server.rpc.AuthenticationServlet extends javax.servlet.http.HttpServlet
{
    private static final java.lang.String DEFAULT_REDIRECT_URL;
    public static final java.lang.String RESPONSE_STATUS_NONE;
    public static final java.lang.String RESPONSE_STATUS_FAILED;
    public static final java.lang.String RESPONSE_STATUS_SUCCESS;
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final javax.security.auth.login.Configuration configuration;
    private final org.waveprotocol.box.server.authentication.SessionManager sessionManager;
    private final java.lang.String domain;
    private final java.lang.String analyticsAccount;

    public void <init>(javax.security.auth.login.Configuration, org.waveprotocol.box.server.authentication.SessionManager, java.lang.String, java.lang.String)
    {
        org.waveprotocol.box.server.authentication.SessionManager r2;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r0;
        java.lang.String r3, $r4, r5;
        javax.security.auth.login.Configuration r1;

        r0 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r1 := @parameter0: javax.security.auth.login.Configuration;

        r2 := @parameter1: org.waveprotocol.box.server.authentication.SessionManager;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Configuration is null");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Session manager is null");

        r0.<org.waveprotocol.box.server.rpc.AuthenticationServlet: javax.security.auth.login.Configuration configuration> = r1;

        r0.<org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager> = r2;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String domain> = $r4;

        r0.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String analyticsAccount> = r5;

        return;
    }

    private javax.security.auth.login.LoginContext login(java.io.BufferedReader) throws java.io.IOException, javax.security.auth.login.LoginException
    {
        javax.security.auth.login.LoginException $r17, $r24;
        byte[] $r3;
        java.nio.charset.CharacterCodingException $r23;
        org.eclipse.jetty.util.UrlEncoded $r11;
        java.nio.ByteBuffer $r8;
        javax.security.auth.login.LoginContext $r13;
        java.nio.charset.Charset $r4;
        java.nio.charset.CodingErrorAction $r6, $r7;
        java.lang.String $r2, $r10, $r20, $r22, $r27, $r29;
        javax.security.auth.login.Configuration $r15;
        java.nio.CharBuffer $r9;
        java.nio.charset.CharsetDecoder $r5;
        javax.security.auth.Subject $r0;
        org.waveprotocol.box.server.authentication.HttpRequestBasedCallbackHandler $r12;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r14;
        java.lang.StringBuilder $r18, $r19, $r21, $r25, $r26, $r28;
        java.io.BufferedReader r1;
        java.io.UnsupportedEncodingException $r16;

        r14 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r1 := @parameter0: java.io.BufferedReader;

     label1:
        $r0 = new javax.security.auth.Subject;

        specialinvoke $r0.<javax.security.auth.Subject: void <init>()>();

        $r2 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction IGNORE>;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r6);

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction IGNORE>;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $r9 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r8);

        $r10 = virtualinvoke $r9.<java.nio.CharBuffer: java.lang.String toString()>();

        $r11 = new org.eclipse.jetty.util.UrlEncoded;

        specialinvoke $r11.<org.eclipse.jetty.util.UrlEncoded: void <init>(java.lang.String)>($r10);

        $r12 = new org.waveprotocol.box.server.authentication.HttpRequestBasedCallbackHandler;

        specialinvoke $r12.<org.waveprotocol.box.server.authentication.HttpRequestBasedCallbackHandler: void <init>(org.eclipse.jetty.util.MultiMap)>($r11);

        $r13 = new javax.security.auth.login.LoginContext;

        $r15 = r14.<org.waveprotocol.box.server.rpc.AuthenticationServlet: javax.security.auth.login.Configuration configuration>;

        specialinvoke $r13.<javax.security.auth.login.LoginContext: void <init>(java.lang.String,javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,javax.security.auth.login.Configuration)>("Wave", $r0, $r12, $r15);

        virtualinvoke $r13.<javax.security.auth.login.LoginContext: void login()>();

     label2:
        return $r13;

     label3:
        $r23 := @caughtexception;

        $r24 = new javax.security.auth.login.LoginException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Character coding exception (not utf-8): ");

        $r27 = virtualinvoke $r23.<java.nio.charset.CharacterCodingException: java.lang.String getLocalizedMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<javax.security.auth.login.LoginException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label4:
        $r16 := @caughtexception;

        $r17 = new javax.security.auth.login.LoginException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ad character encoding specification: ");

        $r20 = virtualinvoke $r16.<java.io.UnsupportedEncodingException: java.lang.String getLocalizedMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<javax.security.auth.login.LoginException: void <init>(java.lang.String)>($r22);

        throw $r17;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.security.auth.login.LoginException $r15, $r18;
        java.lang.IllegalStateException $r14, $r17;
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r16;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        javax.security.auth.login.LoginContext $r3;
        org.waveprotocol.box.server.authentication.SessionManager $r7;
        javax.servlet.http.HttpServletRequest r0;
        java.util.Locale $r27;
        org.waveprotocol.wave.util.logging.Log $r9, $r20;
        java.lang.String $r12, $r22, $r24, $r28, $r29;
        javax.servlet.http.HttpSession $r6;
        java.io.PrintWriter $r25;
        javax.servlet.http.HttpServletResponse r13;
        javax.security.auth.Subject $r4;
        com.google.gxp.base.GxpContext $r26;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r1;
        java.lang.StringBuilder $r8, $r10, $r11, $r19, $r21, $r23;
        java.io.BufferedReader $r2;

        r1 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r13 := @parameter1: javax.servlet.http.HttpServletResponse;

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void setCharacterEncoding(java.lang.String)>("UTF-8");

     label01:
        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.io.BufferedReader getReader()>();

        $r3 = specialinvoke r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: javax.security.auth.login.LoginContext login(java.io.BufferedReader)>($r2);

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r20 = <org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User authentication failed: ");

        $r22 = virtualinvoke $r18.<javax.security.auth.login.LoginException: java.lang.String getLocalizedMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r24);

        interfaceinvoke r13.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(403);

        $r25 = interfaceinvoke r13.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r26 = new com.google.gxp.base.GxpContext;

        $r27 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r26.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r27);

        $r29 = r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String domain>;

        $r28 = r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String analyticsAccount>;

        staticinvoke <org.waveprotocol.box.server.gxp.AuthenticationPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r25, $r26, $r29, "The username or password you entered is incorrect.", $r28, "FAILED");

        return;

     label04:
        $r4 = virtualinvoke $r3.<javax.security.auth.login.LoginContext: javax.security.auth.Subject getSubject()>();

     label05:
        $r5 = specialinvoke r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.security.auth.Subject)>($r4);

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The user provided valid authentication information, but the username isn\'t a valid user address.");

        throw $r17;

     label08:
        if $r5 != null goto label13;

     label09:
        virtualinvoke $r3.<javax.security.auth.login.LoginContext: void logout()>();

     label10:
        goto label12;

     label11:
        $r15 := @caughtexception;

     label12:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The user provided valid authentication information, but we don\'t know how to map their identity to a wave user address.");

        throw $r14;

     label13:
        $r6 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(1);

        $r7 = r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        interfaceinvoke $r7.<org.waveprotocol.box.server.authentication.SessionManager: void setLoggedInUser(javax.servlet.http.HttpSession,org.waveprotocol.wave.model.wave.ParticipantId)>($r6, $r5);

        $r9 = <org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authenticated user ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r12);

        specialinvoke r1.<org.waveprotocol.box.server.rpc.AuthenticationServlet: void redirectLoggedInUser(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r0, r13);

        return;

        catch javax.security.auth.login.LoginException from label01 to label02 with label03;
        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label05 to label06 with label07;
        catch javax.security.auth.login.LoginException from label09 to label10 with label11;
    }

    private org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.security.auth.Subject) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.box.server.authentication.ParticipantPrincipal $r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r8;
        javax.security.auth.Subject r0;
        java.security.Principal r4;
        java.lang.Object $r3;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r6;
        java.lang.String r7;
        boolean $z0, $z1;

        r6 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r0 := @parameter0: javax.security.auth.Subject;

        r7 = null;

        $r1 = virtualinvoke r0.<javax.security.auth.Subject: java.util.Set getPrincipals()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.Principal) $r3;

        $z1 = r4 instanceof org.waveprotocol.box.server.authentication.ParticipantPrincipal;

        if $z1 == 0 goto label2;

        $r5 = (org.waveprotocol.box.server.authentication.ParticipantPrincipal) r4;

        r7 = virtualinvoke $r5.<org.waveprotocol.box.server.authentication.ParticipantPrincipal: java.lang.String getName()>();

        goto label3;

     label2:
        goto label1;

     label3:
        if r7 != null goto label4;

        $r8 = null;

        goto label5;

     label4:
        $r8 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>(r7);

     label5:
        return $r8;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.servlet.http.HttpSession $r2;
        java.io.PrintWriter $r6;
        javax.servlet.http.HttpServletResponse r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        org.waveprotocol.box.server.authentication.SessionManager $r4;
        javax.servlet.http.HttpServletRequest r1;
        com.google.gxp.base.GxpContext $r7;
        java.util.Locale $r8;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r3;
        java.lang.String $r9, $r10;

        r3 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: javax.servlet.http.HttpServletResponse;

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setCharacterEncoding(java.lang.String)>("UTF-8");

        interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: void setCharacterEncoding(java.lang.String)>("UTF-8");

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r4 = r3.<org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r2);

        if $r5 == null goto label1;

        specialinvoke r3.<org.waveprotocol.box.server.rpc.AuthenticationServlet: void redirectLoggedInUser(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r0);

        goto label2;

     label1:
        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/html;charset=utf-8");

        $r6 = interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r7 = new com.google.gxp.base.GxpContext;

        $r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r7.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r8);

        $r10 = r3.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String domain>;

        $r9 = r3.<org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String analyticsAccount>;

        staticinvoke <org.waveprotocol.box.server.gxp.AuthenticationPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, $r7, $r10, "", "NONE", $r9);

     label2:
        return;
    }

    private void redirectLoggedInUser(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        java.net.URISyntaxException $r12;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.box.server.authentication.SessionManager $r2;
        javax.servlet.http.HttpServletRequest r1;
        int $i0;
        java.lang.String $r5, $r7, $r8, $r9, $r11;
        java.net.URI $r10;
        boolean $z0, $z1, $z2;
        javax.servlet.http.HttpSession $r3;
        javax.servlet.http.HttpServletResponse r6;
        org.waveprotocol.box.server.rpc.AuthenticationServlet r0;

        r0 := @this: org.waveprotocol.box.server.rpc.AuthenticationServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r6 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r2 = r0.<org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r3 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r3);

        if $r4 == null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "The user is not logged in");

        $r5 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        if $r5 == null goto label03;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("r=");

        if $z0 != 0 goto label04;

     label03:
        interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>("/");

        return;

     label04:
        $r7 = "r=";

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i0);

        $r9 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r8, "UTF-8");

     label05:
        $r10 = new java.net.URI;

        specialinvoke $r10.<java.net.URI: void <init>(java.lang.String)>($r9);

     label06:
        goto label08;

     label07:
        $r12 := @caughtexception;

        interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: void sendError(int)>(500);

        return;

     label08:
        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String getHost()>();

        $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r11);

        if $z1 != 0 goto label09;

        interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: void sendError(int)>(500);

        goto label10;

     label09:
        interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>($r9);

     label10:
        return;

        catch java.net.URISyntaxException from label05 to label06 with label07;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String RESPONSE_STATUS_SUCCESS> = "SUCCESS";

        <org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String RESPONSE_STATUS_FAILED> = "FAILED";

        <org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String RESPONSE_STATUS_NONE> = "NONE";

        <org.waveprotocol.box.server.rpc.AuthenticationServlet: java.lang.String DEFAULT_REDIRECT_URL> = "/";

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/AuthenticationServlet;");

        <org.waveprotocol.box.server.rpc.AuthenticationServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
