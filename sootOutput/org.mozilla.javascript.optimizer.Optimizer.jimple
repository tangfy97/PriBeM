class org.mozilla.javascript.optimizer.Optimizer extends java.lang.Object
{
    static final int NoType;
    static final int NumberType;
    static final int AnyType;
    private boolean inDirectCallFunction;
    org.mozilla.javascript.optimizer.OptFunctionNode theFunction;
    private boolean parameterUsedInNumberContext;

    void <init>()
    {
        org.mozilla.javascript.optimizer.Optimizer r0;

        r0 := @this: org.mozilla.javascript.optimizer.Optimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void optimize(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r1;
        org.mozilla.javascript.optimizer.Optimizer r2;
        int $i0, i1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r2 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        i1 = 0;

     label1:
        if i1 == $i0 goto label2;

        $r1 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode,int)>(r0, i1);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void optimizeFunction(org.mozilla.javascript.optimizer.OptFunctionNode)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void optimizeFunction(org.mozilla.javascript.optimizer.OptFunctionNode)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        org.mozilla.javascript.optimizer.Optimizer r2;
        org.mozilla.javascript.Node[] r5;
        org.mozilla.javascript.Node $r7;
        org.mozilla.javascript.ObjArray $r3;
        org.mozilla.javascript.FunctionNode $r1, $r4, $r6;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r0 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: boolean requiresActivation()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isTargetOfDirectCall()>();

        r2.<org.mozilla.javascript.optimizer.Optimizer: boolean inDirectCallFunction> = $z1;

        r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction> = r0;

        $r3 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r3.<org.mozilla.javascript.ObjArray: void <init>()>();

        $r4 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        staticinvoke <org.mozilla.javascript.optimizer.Optimizer: void buildStatementList_r(org.mozilla.javascript.Node,org.mozilla.javascript.ObjArray)>($r4, $r3);

        $i0 = virtualinvoke $r3.<org.mozilla.javascript.ObjArray: int size()>();

        r5 = newarray (org.mozilla.javascript.Node)[$i0];

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[])>(r5);

        staticinvoke <org.mozilla.javascript.optimizer.Block: void runFlowAnalyzes(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[])>(r0, r5);

        $r6 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $z2 = virtualinvoke $r6.<org.mozilla.javascript.FunctionNode: boolean requiresActivation()>();

        if $z2 != 0 goto label4;

        r2.<org.mozilla.javascript.optimizer.Optimizer: boolean parameterUsedInNumberContext> = 0;

        i2 = 0;

     label2:
        $i1 = lengthof r5;

        if i2 >= $i1 goto label3;

        $r7 = r5[i2];

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r7);

        i2 = i2 + 1;

        goto label2;

     label3:
        $z3 = r2.<org.mozilla.javascript.optimizer.Optimizer: boolean parameterUsedInNumberContext>;

        virtualinvoke r0.<org.mozilla.javascript.optimizer.OptFunctionNode: void setParameterNumberContext(boolean)>($z3);

     label4:
        return;
    }

    private void markDCPNumberContext(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r2, $r3;
        org.mozilla.javascript.optimizer.Optimizer r0;
        org.mozilla.javascript.Node r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r1 := @parameter0: org.mozilla.javascript.Node;

        $z0 = r0.<org.mozilla.javascript.optimizer.Optimizer: boolean inDirectCallFunction>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 54 goto label1;

        $r2 = r0.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $i1 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r1);

        $r3 = r0.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z1 = virtualinvoke $r3.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>($i1);

        if $z1 == 0 goto label1;

        r0.<org.mozilla.javascript.optimizer.Optimizer: boolean parameterUsedInNumberContext> = 1;

     label1:
        return;
    }

    private boolean convertParameter(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r2, $r3;
        org.mozilla.javascript.optimizer.Optimizer r0;
        org.mozilla.javascript.Node r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r1 := @parameter0: org.mozilla.javascript.Node;

        $z0 = r0.<org.mozilla.javascript.optimizer.Optimizer: boolean inDirectCallFunction>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 54 goto label1;

        $r2 = r0.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $i1 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r1);

        $r3 = r0.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z1 = virtualinvoke $r3.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>($i1);

        if $z1 == 0 goto label1;

        virtualinvoke r1.<org.mozilla.javascript.Node: void removeProp(int)>(8);

        return 1;

     label1:
        return 0;
    }

    private int rewriteForNumberVariables(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, $r3, $r6, $r7, $r10, $r11, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, r40;
        org.mozilla.javascript.optimizer.OptFunctionNode $r4, $r5, $r8, $r9, $r12, $r13, $r14, $r15, $r20;
        org.mozilla.javascript.optimizer.Optimizer r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.Object $r18;

        r2 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 9: goto label31;
            case 10: goto label31;
            case 11: goto label31;
            case 14: goto label17;
            case 15: goto label17;
            case 16: goto label17;
            case 17: goto label17;
            case 18: goto label31;
            case 19: goto label31;
            case 21: goto label24;
            case 22: goto label31;
            case 23: goto label31;
            case 24: goto label31;
            case 25: goto label31;
            case 35: goto label43;
            case 36: goto label39;
            case 37: goto label46;
            case 39: goto label03;
            case 54: goto label04;
            case 55: goto label10;
            case 102: goto label07;
            case 103: goto label07;
            case 129: goto label01;
            case 136: goto label39;
            default: goto label53;
        };

     label01:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i1 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r1);

        if $i1 != 1 goto label02;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

     label02:
        return 0;

     label03:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label04:
        $r13 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $i6 = virtualinvoke $r13.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $z6 = r2.<org.mozilla.javascript.optimizer.Optimizer: boolean inDirectCallFunction>;

        if $z6 == 0 goto label05;

        $r15 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z8 = virtualinvoke $r15.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>($i6);

        if $z8 == 0 goto label05;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label05:
        $r14 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z7 = virtualinvoke $r14.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>($i6);

        if $z7 == 0 goto label06;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label06:
        return 0;

     label07:
        $r3 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i2 = virtualinvoke $r3.<org.mozilla.javascript.Node: int getType()>();

        if $i2 != 54 goto label09;

        $r4 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $i3 = virtualinvoke $r4.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r3);

        $r5 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z0 = virtualinvoke $r5.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>($i3);

        if $z0 == 0 goto label08;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r3);

        return 1;

     label08:
        return 0;

     label09:
        return 0;

     label10:
        $r6 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i4 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r7);

        $r8 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $i5 = virtualinvoke $r8.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $z1 = r2.<org.mozilla.javascript.optimizer.Optimizer: boolean inDirectCallFunction>;

        if $z1 == 0 goto label13;

        $r12 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z4 = virtualinvoke $r12.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>($i5);

        if $z4 == 0 goto label13;

        if $i4 != 1 goto label12;

        $z5 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r7);

        if $z5 != 0 goto label11;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label11:
        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r7);

        return 0;

     label12:
        return $i4;

     label13:
        $r9 = r2.<org.mozilla.javascript.optimizer.Optimizer: org.mozilla.javascript.optimizer.OptFunctionNode theFunction>;

        $z2 = virtualinvoke $r9.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>($i5);

        if $z2 == 0 goto label15;

        if $i4 == 1 goto label14;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r7);

        $r11 = new org.mozilla.javascript.Node;

        specialinvoke $r11.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(146, $r7);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r11);

     label14:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r7);

        return 1;

     label15:
        if $i4 != 1 goto label16;

        $z3 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r7);

        if $z3 != 0 goto label16;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r7);

        $r10 = new org.mozilla.javascript.Node;

        specialinvoke $r10.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(145, $r7);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r10);

     label16:
        return 0;

     label17:
        $r31 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r32 = virtualinvoke $r31.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i14 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r31);

        $i15 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r32);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r31);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r32);

        $z16 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r31);

        if $z16 == 0 goto label19;

        $z18 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r32);

        if $z18 == 0 goto label18;

        return 0;

     label18:
        if $i15 != 1 goto label23;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 2);

        goto label23;

     label19:
        $z17 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r32);

        if $z17 == 0 goto label20;

        if $i14 != 1 goto label23;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 1);

        goto label23;

     label20:
        if $i14 != 1 goto label22;

        if $i15 != 1 goto label21;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        goto label23;

     label21:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 1);

        goto label23;

     label22:
        if $i15 != 1 goto label23;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 2);

     label23:
        return 0;

     label24:
        $r29 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r30 = virtualinvoke $r29.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i12 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r29);

        $i13 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r30);

        $z13 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r29);

        if $z13 == 0 goto label26;

        $z15 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r30);

        if $z15 == 0 goto label25;

        return 0;

     label25:
        if $i13 != 1 goto label30;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 2);

        goto label30;

     label26:
        $z14 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r30);

        if $z14 == 0 goto label27;

        if $i12 != 1 goto label30;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 1);

        goto label30;

     label27:
        if $i12 != 1 goto label29;

        if $i13 != 1 goto label28;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label28:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 1);

        goto label30;

     label29:
        if $i13 != 1 goto label30;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 2);

     label30:
        return 0;

     label31:
        $r33 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r34 = virtualinvoke $r33.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i16 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r33);

        $i17 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r34);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r33);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r34);

        if $i16 != 1 goto label34;

        if $i17 != 1 goto label32;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label32:
        $z22 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r34);

        if $z22 != 0 goto label33;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r34);

        $r38 = new org.mozilla.javascript.Node;

        specialinvoke $r38.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(146, $r34);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r38);

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

     label33:
        return 1;

     label34:
        if $i17 != 1 goto label36;

        $z21 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r33);

        if $z21 != 0 goto label35;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r33);

        $r37 = new org.mozilla.javascript.Node;

        specialinvoke $r37.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(146, $r33);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>($r37);

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

     label35:
        return 1;

     label36:
        $z19 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r33);

        if $z19 != 0 goto label37;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r33);

        $r36 = new org.mozilla.javascript.Node;

        specialinvoke $r36.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(146, $r33);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>($r36);

     label37:
        $z20 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r34);

        if $z20 != 0 goto label38;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r34);

        $r35 = new org.mozilla.javascript.Node;

        specialinvoke $r35.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(146, $r34);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r35);

     label38:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 0);

        return 1;

     label39:
        $r21 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r22 = virtualinvoke $r21.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $r23 = virtualinvoke $r22.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i9 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r21);

        if $i9 != 1 goto label40;

        $z10 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r21);

        if $z10 != 0 goto label40;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r21);

        $r25 = new org.mozilla.javascript.Node;

        specialinvoke $r25.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(145, $r21);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>($r25);

     label40:
        $i18 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r22);

        if $i18 != 1 goto label41;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 1);

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>($r22);

     label41:
        $i10 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r23);

        if $i10 != 1 goto label42;

        $z9 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r23);

        if $z9 != 0 goto label42;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r23);

        $r24 = new org.mozilla.javascript.Node;

        specialinvoke $r24.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(145, $r23);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r24);

     label42:
        return 0;

     label43:
        $r26 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r27 = virtualinvoke $r26.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i11 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r26);

        if $i11 != 1 goto label44;

        $z12 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r26);

        if $z12 != 0 goto label44;

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r26);

        $r28 = new org.mozilla.javascript.Node;

        specialinvoke $r28.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(145, $r26);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>($r28);

     label44:
        $i19 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r27);

        if $i19 != 1 goto label45;

        $z11 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>($r27);

        if $z11 != 0 goto label45;

        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, 2);

     label45:
        return 0;

     label46:
        $r16 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i7 = virtualinvoke $r16.<org.mozilla.javascript.Node: int getType()>();

        if $i7 != 35 goto label47;

        $r19 = virtualinvoke $r16.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void rewriteAsObjectChildren(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r16, $r19);

        goto label48;

     label47:
        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>($r16);

     label48:
        $r17 = virtualinvoke $r16.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        r40 = $r17;

        $r18 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(9);

        $r20 = (org.mozilla.javascript.optimizer.OptFunctionNode) $r18;

        if $r20 == null goto label51;

     label49:
        if r40 == null goto label52;

        $i8 = specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>(r40);

        if $i8 != 1 goto label50;

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void markDCPNumberContext(org.mozilla.javascript.Node)>(r40);

     label50:
        r40 = virtualinvoke r40.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label49;

     label51:
        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void rewriteAsObjectChildren(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r17);

     label52:
        return 0;

     label53:
        $r39 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.Optimizer: void rewriteAsObjectChildren(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r39);

        return 0;
    }

    private void rewriteAsObjectChildren(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.Optimizer r1;
        org.mozilla.javascript.Node $r0, r2, $r3, r4;
        int $i0;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.optimizer.Optimizer;

        r2 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

     label1:
        if r4 == null goto label4;

        $r0 = virtualinvoke r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i0 = specialinvoke r1.<org.mozilla.javascript.optimizer.Optimizer: int rewriteForNumberVariables(org.mozilla.javascript.Node)>(r4);

        if $i0 != 1 goto label3;

        $z0 = specialinvoke r1.<org.mozilla.javascript.optimizer.Optimizer: boolean convertParameter(org.mozilla.javascript.Node)>(r4);

        if $z0 != 0 goto label3;

        virtualinvoke r2.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>(r4);

        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(145, r4);

        if $r0 != null goto label2;

        virtualinvoke r2.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r3);

        goto label3;

     label2:
        virtualinvoke r2.<org.mozilla.javascript.Node: void addChildBefore(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, $r0);

     label3:
        r4 = $r0;

        goto label1;

     label4:
        return;
    }

    private static void buildStatementList_r(org.mozilla.javascript.Node, org.mozilla.javascript.ObjArray)
    {
        org.mozilla.javascript.Node r0, r2;
        org.mozilla.javascript.ObjArray r1;
        int $i0;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.ObjArray;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 125 goto label1;

        if $i0 == 137 goto label1;

        if $i0 == 128 goto label1;

        if $i0 != 105 goto label3;

     label1:
        r2 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

     label2:
        if r2 == null goto label4;

        staticinvoke <org.mozilla.javascript.optimizer.Optimizer: void buildStatementList_r(org.mozilla.javascript.Node,org.mozilla.javascript.ObjArray)>(r2, r1);

        r2 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label2;

     label3:
        virtualinvoke r1.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r0);

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.optimizer.Optimizer: int AnyType> = 3;

        <org.mozilla.javascript.optimizer.Optimizer: int NumberType> = 1;

        <org.mozilla.javascript.optimizer.Optimizer: int NoType> = 0;

        return;
    }
}
