public class com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern extends com.hp.hpl.jena.sparql.engine.iterator.QueryIterRepeatApply
{
    private final com.hp.hpl.jena.graph.Triple pattern;
    static int countMapper;

    public void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r3 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterRepeatApply: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: com.hp.hpl.jena.graph.Triple pattern> = r3;

        return;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator nextStage(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper $r0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4;
        com.hp.hpl.jena.graph.Triple $r3;

        r2 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: com.hp.hpl.jena.graph.Triple pattern>;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, $r3, $r4);

        return $r0;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: int countMapper> = 0;

        return;
    }
}
