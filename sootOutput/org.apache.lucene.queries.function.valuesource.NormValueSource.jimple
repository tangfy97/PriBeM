public class org.apache.lucene.queries.function.valuesource.NormValueSource extends org.apache.lucene.queries.function.ValueSource
{
    protected final java.lang.String field;

    public void <init>(java.lang.String)
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field> = r1;

        return;
    }

    public java.lang.String name()
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        return "norm";
    }

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String name()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r5 = r1.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r2;
        java.util.Map r0;
        org.apache.lucene.search.IndexSearcher r1;

        r2 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.lucene.search.IndexSearcher;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searcher", r1);

        return;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r4;
        java.lang.UnsupportedOperationException $r13;
        org.apache.lucene.search.similarities.TFIDFSimilarity $r6;
        org.apache.lucene.index.NumericDocValues $r10;
        org.apache.lucene.queries.function.valuesource.NormValueSource$1 $r11;
        java.util.Map r0;
        org.apache.lucene.search.similarities.Similarity $r3;
        java.lang.Object $r1;
        java.lang.String $r5, $r9;
        org.apache.lucene.queries.function.valuesource.ConstDoubleDocValues $r12;
        org.apache.lucene.index.AtomicReaderContext r7;
        org.apache.lucene.index.AtomicReader $r8;
        org.apache.lucene.search.IndexSearcher r2;

        r4 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        r0 := @parameter0: java.util.Map;

        r7 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("searcher");

        r2 = (org.apache.lucene.search.IndexSearcher) $r1;

        $r3 = virtualinvoke r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.similarities.Similarity getSimilarity()>();

        $r5 = r4.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $r6 = staticinvoke <org.apache.lucene.queries.function.valuesource.IDFValueSource: org.apache.lucene.search.similarities.TFIDFSimilarity asTFIDF(org.apache.lucene.search.similarities.Similarity,java.lang.String)>($r3, $r5);

        if $r6 != null goto label1;

        $r13 = new java.lang.UnsupportedOperationException;

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("requires a TFIDFSimilarity (such as DefaultSimilarity)");

        throw $r13;

     label1:
        $r8 = virtualinvoke r7.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r9 = r4.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $r10 = virtualinvoke $r8.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String)>($r9);

        if $r10 != null goto label2;

        $r12 = new org.apache.lucene.queries.function.valuesource.ConstDoubleDocValues;

        specialinvoke $r12.<org.apache.lucene.queries.function.valuesource.ConstDoubleDocValues: void <init>(double,org.apache.lucene.queries.function.ValueSource)>(0.0, r4);

        return $r12;

     label2:
        $r11 = new org.apache.lucene.queries.function.valuesource.NormValueSource$1;

        specialinvoke $r11.<org.apache.lucene.queries.function.valuesource.NormValueSource$1: void <init>(org.apache.lucene.queries.function.valuesource.NormValueSource,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.search.similarities.TFIDFSimilarity,org.apache.lucene.index.NumericDocValues)>(r4, r4, $r6, $r10);

        return $r11;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r0, $r4;
        java.lang.Class $r1, $r3;
        java.lang.Object r2;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        $r6 = r0.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $r4 = (org.apache.lucene.queries.function.valuesource.NormValueSource) r2;

        $r5 = $r4.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.valuesource.NormValueSource r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.NormValueSource;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.apache.lucene.queries.function.valuesource.NormValueSource: java.lang.String field>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }
}
