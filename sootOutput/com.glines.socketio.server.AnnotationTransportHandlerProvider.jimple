public final class com.glines.socketio.server.AnnotationTransportHandlerProvider extends java.lang.Object implements com.glines.socketio.server.TransportHandlerProvider
{
    private static final java.util.logging.Logger LOGGER;
    private final java.util.Map handlerClasses;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/glines/socketio/server/AnnotationTransportHandlerProvider;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.logging.Logger LOGGER> = $r2;

        return;
    }

    public void <init>()
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider r0;
        java.util.EnumMap $r1;

        r0 := @this: com.glines.socketio.server.AnnotationTransportHandlerProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.EnumMap;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lcom/glines/socketio/server/TransportType;");

        r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses> = $r1;

        return;
    }

    public com.glines.socketio.server.TransportHandler get(java.lang.Class, com.glines.socketio.server.TransportType)
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider r0;
        java.util.Map $r2;
        com.glines.socketio.server.TransportType r1;
        java.lang.String $r9, $r12, $r16, $r20;
        boolean $z0;
        java.lang.IllegalArgumentException $r7, $r17;
        java.lang.Object $r3;
        java.lang.Class r4, r5;
        com.glines.socketio.server.TransportHandler $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r15, $r18, $r19;

        r0 := @this: com.glines.socketio.server.AnnotationTransportHandlerProvider;

        r5 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.glines.socketio.server.TransportType;

        $r2 = r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Class) $r3;

        if r4 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("No TransportHandler found for transport ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label1:
        $z0 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("TransportHandler ");

        $r9 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not of required type ");

        $r12 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for transport ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label2:
        $r6 = staticinvoke <com.glines.socketio.server.AnnotationTransportHandlerProvider: com.glines.socketio.server.TransportHandler load(java.lang.Class)>(r4);

        return $r6;
    }

    public boolean isSupported(com.glines.socketio.server.TransportType)
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider r0;
        java.util.Map $r2;
        com.glines.socketio.server.TransportType r1;
        boolean $z0;

        r0 := @this: com.glines.socketio.server.AnnotationTransportHandlerProvider;

        r1 := @parameter0: com.glines.socketio.server.TransportType;

        $r2 = r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void init()
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider r0;
        java.lang.Throwable $r14;
        com.glines.socketio.util.ServiceClassLoader $r5;
        com.glines.socketio.util.DefaultLoader $r2;
        com.glines.socketio.server.TransportType[] $r11;
        java.util.logging.Level $r17;
        java.util.Map $r1, $r13;
        java.lang.Thread $r3;
        int i0, i1;
        com.glines.socketio.server.TransportType r12;
        java.lang.String $r18, $r20;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.logging.Logger $r16;
        com.glines.socketio.'annotation'.Handle r21;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Object $r7;
        java.lang.Class r8;
        com.glines.socketio.server.TransportHandler $r9;
        java.lang.StringBuilder $r15, $r19;
        java.lang.ClassLoader $r4;

        r0 := @this: com.glines.socketio.server.AnnotationTransportHandlerProvider;

        $r1 = r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = new com.glines.socketio.util.DefaultLoader;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke $r2.<com.glines.socketio.util.DefaultLoader: void <init>(java.lang.ClassLoader)>($r4);

        $r5 = staticinvoke <com.glines.socketio.util.ServiceClassLoader: com.glines.socketio.util.ServiceClassLoader load(java.lang.Class,com.glines.socketio.util.Loader)>(class "Lcom/glines/socketio/server/TransportHandler;", $r2);

        $r6 = virtualinvoke $r5.<com.glines.socketio.util.ServiceClassLoader: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Class) $r7;

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r16 = <com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.logging.Logger LOGGER>;

        $r17 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load transport hander class. Error: ");

        $r18 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r17, $r20, $r14);

        goto label7;

     label4:
        $r9 = staticinvoke <com.glines.socketio.server.AnnotationTransportHandlerProvider: com.glines.socketio.server.TransportHandler load(java.lang.Class)>(r8);

        if $r9 == null goto label7;

        $r10 = virtualinvoke r8.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/glines/socketio/annotation/Handle;");

        r21 = (com.glines.socketio.'annotation'.Handle) $r10;

        if r21 == null goto label7;

        $r11 = interfaceinvoke r21.<com.glines.socketio.'annotation'.Handle: com.glines.socketio.server.TransportType[] value()>();

        i0 = lengthof $r11;

        i1 = 0;

        goto label6;

     label5:
        r12 = $r11[i1];

        $r13 = r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r8);

        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label5;

     label7:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static com.glines.socketio.server.TransportHandler load(java.lang.Class)
    {
        java.lang.Throwable $r23, $r27;
        java.lang.Object[] $r3;
        java.lang.reflect.Constructor $r2;
        java.util.logging.Level $r9, $r19;
        java.lang.String $r10, $r13, $r15, $r20, $r24, $r26;
        java.lang.Class[] $r1;
        java.util.logging.Logger $r8, $r18;
        java.lang.Exception $r6;
        java.lang.reflect.InvocationTargetException $r16;
        java.lang.Class r0;
        java.lang.Object $r4;
        com.glines.socketio.server.TransportHandler $r5;
        java.lang.StringBuilder $r7, $r11, $r12, $r14, $r17, $r21, $r22, $r25;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r5 = (com.glines.socketio.server.TransportHandler) $r4;

     label2:
        return $r5;

     label3:
        $r16 := @caughtexception;

        $r18 = <com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.logging.Logger LOGGER>;

        $r19 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load transport handler class ");

        $r20 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Error: ");

        $r23 = virtualinvoke $r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r24 = virtualinvoke $r23.<java.lang.Throwable: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = virtualinvoke $r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        virtualinvoke $r18.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r19, $r26, $r27);

        goto label5;

     label4:
        $r6 := @caughtexception;

        $r8 = <com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.logging.Logger LOGGER>;

        $r9 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load transport handler class ");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Error: ");

        $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, $r15, $r6);

     label5:
        return null;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.util.Map listAll()
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider r0;
        java.util.Map $r1;

        r0 := @this: com.glines.socketio.server.AnnotationTransportHandlerProvider;

        $r1 = r0.<com.glines.socketio.server.AnnotationTransportHandlerProvider: java.util.Map handlerClasses>;

        return $r1;
    }
}
