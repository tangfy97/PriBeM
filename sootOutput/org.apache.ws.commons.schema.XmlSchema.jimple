public class org.apache.ws.commons.schema.XmlSchema extends org.apache.ws.commons.schema.XmlSchemaAnnotated implements org.apache.ws.commons.schema.utils.NamespaceContextOwner
{
    static final java.lang.String SCHEMA_NS;
    private static final java.lang.String UTF_8_ENCODING;
    private java.util.List items;
    private org.apache.ws.commons.schema.XmlSchemaCollection parent;
    private org.apache.ws.commons.schema.XmlSchemaDerivationMethod blockDefault;
    private org.apache.ws.commons.schema.XmlSchemaDerivationMethod finalDefault;
    private org.apache.ws.commons.schema.XmlSchemaForm elementFormDefault;
    private org.apache.ws.commons.schema.XmlSchemaForm attributeFormDefault;
    private java.util.List externals;
    private java.util.Map attributeGroups;
    private java.util.Map attributes;
    private java.util.Map elements;
    private java.util.Map groups;
    private java.util.Map notations;
    private java.util.Map schemaTypes;
    private java.lang.String syntacticalTargetNamespace;
    private java.lang.String schemaNamespacePrefix;
    private java.lang.String logicalTargetNamespace;
    private java.lang.String version;
    private org.apache.ws.commons.schema.utils.NamespacePrefixList namespaceContext;
    private java.lang.String inputEncoding;

    public void <init>()
    {
        org.apache.ws.commons.schema.XmlSchema r0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void <init>(java.lang.String,java.lang.String,org.apache.ws.commons.schema.XmlSchemaCollection)>(null, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.ws.commons.schema.XmlSchemaCollection)
    {
        org.apache.ws.commons.schema.XmlSchemaForm $r2, $r3;
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod $r4, $r5;
        org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey $r16;
        java.util.HashMap $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.ws.commons.schema.XmlSchemaException $r19;
        java.util.ArrayList $r6, $r7;
        org.apache.ws.commons.schema.XmlSchemaCollection r1;
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r14, $r15, r17, $r18;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r14 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.ws.commons.schema.XmlSchemaCollection;

        specialinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAnnotated: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent> = r1;

        $r2 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm UNQUALIFIED>;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm attributeFormDefault> = $r2;

        $r3 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm UNQUALIFIED>;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm elementFormDefault> = $r3;

        $r4 = <org.apache.ws.commons.schema.XmlSchemaDerivationMethod: org.apache.ws.commons.schema.XmlSchemaDerivationMethod NONE>;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod blockDefault> = $r4;

        $r5 = <org.apache.ws.commons.schema.XmlSchemaDerivationMethod: org.apache.ws.commons.schema.XmlSchemaDerivationMethod NONE>;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod finalDefault> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List items> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map elements> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributeGroups> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributes> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map groups> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map notations> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map schemaTypes> = $r13;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace> = r14;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String syntacticalTargetNamespace> = r14;

        $r15 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace>;

        if $r15 != null goto label1;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace> = "";

     label1:
        if r1 == null goto label3;

        $r16 = new org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey;

        $r18 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace>;

        specialinvoke $r16.<org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey: void <init>(java.lang.String,java.lang.String)>($r18, r17);

        $z0 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaCollection: boolean containsSchema(org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey)>($r16);

        if $z0 == 0 goto label2;

        $r19 = new org.apache.ws.commons.schema.XmlSchemaException;

        specialinvoke $r19.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>("Schema name conflict in collection");

        throw $r19;

     label2:
        virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaCollection: void addSchema(org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey,org.apache.ws.commons.schema.XmlSchema)>($r16, r0);

     label3:
        return;
    }

    public void <init>(java.lang.String, org.apache.ws.commons.schema.XmlSchemaCollection)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaCollection r2;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.ws.commons.schema.XmlSchemaCollection;

        specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void <init>(java.lang.String,java.lang.String,org.apache.ws.commons.schema.XmlSchemaCollection)>(r1, r1, r2);

        return;
    }

    public org.w3c.dom.Document[] getAllSchemas()
    {
        org.apache.ws.commons.schema.XmlSchemaSerializer $r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.w3c.dom.Document[] $r4;
        org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException $r5;
        org.apache.ws.commons.schema.extensions.ExtensionRegistry $r3;
        org.apache.ws.commons.schema.XmlSchema r1;
        org.apache.ws.commons.schema.XmlSchemaException $r6;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

     label1:
        $r0 = new org.apache.ws.commons.schema.XmlSchemaSerializer;

        specialinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void <init>()>();

        $r2 = r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.extensions.ExtensionRegistry getExtReg()>();

        virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void setExtReg(org.apache.ws.commons.schema.extensions.ExtensionRegistry)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: org.w3c.dom.Document[] serializeSchema(org.apache.ws.commons.schema.XmlSchema,boolean)>(r1, 1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.ws.commons.schema.XmlSchemaException;

        specialinvoke $r6.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String,java.lang.Throwable)>("Error serializing schema", $r5);

        throw $r6;

        catch org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException from label1 to label2 with label3;
    }

    public org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaAttribute $r2;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r1;
        org.apache.ws.commons.schema.XmlSchemaAttribute $r4;
        javax.xml.namespace.QName $r0;
        java.lang.String $r2, r3;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter0: java.lang.String;

        $r0 = new javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, r3);

        $r4 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>($r0, 0, null);

        return $r4;
    }

    public org.apache.ws.commons.schema.XmlSchemaForm getAttributeFormDefault()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaForm $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm attributeFormDefault>;

        return $r1;
    }

    public org.apache.ws.commons.schema.XmlSchemaAttributeGroup getAttributeGroupByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        javax.xml.namespace.QName r1;
        org.apache.ws.commons.schema.XmlSchemaAttributeGroup $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaAttributeGroup getAttributeGroupByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public java.util.Map getAttributeGroups()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributeGroups>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.Map getProtectedMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getAttributes()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributes>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.Map getProtectedMap(java.util.Map)>($r1);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaDerivationMethod getBlockDefault()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod blockDefault>;

        return $r1;
    }

    public org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        javax.xml.namespace.QName r1;
        org.apache.ws.commons.schema.XmlSchemaElement $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaElement getElementByName(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r1;
        javax.xml.namespace.QName $r0;
        java.lang.String $r2, r3;
        org.apache.ws.commons.schema.XmlSchemaElement $r4;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter0: java.lang.String;

        $r0 = new javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, r3);

        $r4 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName,boolean,java.util.Stack)>($r0, 0, null);

        return $r4;
    }

    public org.apache.ws.commons.schema.XmlSchemaForm getElementFormDefault()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaForm $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm elementFormDefault>;

        return $r1;
    }

    public java.util.Map getElements()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map elements>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.Map getProtectedMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.List getExternals()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.List getProtectedList(java.util.List)>($r1);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaDerivationMethod getFinalDefault()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod finalDefault>;

        return $r1;
    }

    public org.apache.ws.commons.schema.XmlSchemaGroup getGroupByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        javax.xml.namespace.QName r1;
        org.apache.ws.commons.schema.XmlSchemaGroup $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaGroup getGroupByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public java.util.Map getGroups()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map groups>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.Map getProtectedMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.lang.String getInputEncoding()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        return $r1;
    }

    public java.util.List getItems()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List items>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.List getProtectedList(java.util.List)>($r1);

        return $r2;
    }

    public java.lang.String getLogicalTargetNamespace()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace>;

        return $r1;
    }

    public org.apache.ws.commons.schema.utils.NamespacePrefixList getNamespaceContext()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.utils.NamespacePrefixList $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.utils.NamespacePrefixList namespaceContext>;

        return $r1;
    }

    public org.apache.ws.commons.schema.XmlSchemaNotation getNotationByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        javax.xml.namespace.QName r1;
        org.apache.ws.commons.schema.XmlSchemaNotation $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaNotation getNotationByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public java.util.Map getNotations()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map notations>;

        $r2 = staticinvoke <org.apache.ws.commons.schema.utils.CollectionFactory: java.util.Map getProtectedMap(java.util.Map)>($r1);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaCollection getParent()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent>;

        return $r1;
    }

    public org.w3c.dom.Document getSchemaDocument() throws org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException
    {
        org.apache.ws.commons.schema.XmlSchemaSerializer $r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.w3c.dom.Document[] $r4;
        org.w3c.dom.Document $r5;
        org.apache.ws.commons.schema.extensions.ExtensionRegistry $r3;
        org.apache.ws.commons.schema.XmlSchema r1;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r0 = new org.apache.ws.commons.schema.XmlSchemaSerializer;

        specialinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void <init>()>();

        $r2 = r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.extensions.ExtensionRegistry getExtReg()>();

        virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void setExtReg(org.apache.ws.commons.schema.extensions.ExtensionRegistry)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: org.w3c.dom.Document[] serializeSchema(org.apache.ws.commons.schema.XmlSchema,boolean)>(r1, 0);

        $r5 = $r4[0];

        return $r5;
    }

    public java.lang.String getSchemaNamespacePrefix()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String schemaNamespacePrefix>;

        return $r1;
    }

    public java.util.Map getSchemaTypes()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map schemaTypes>;

        return $r1;
    }

    public java.lang.String getTargetNamespace()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String syntacticalTargetNamespace>;

        return $r1;
    }

    public org.apache.ws.commons.schema.XmlSchemaType getTypeByName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaType $r2;
        org.apache.ws.commons.schema.XmlSchema r0;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaType getTypeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, 1, null);

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaType getTypeByName(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaType $r4;
        org.apache.ws.commons.schema.XmlSchema r1;
        javax.xml.namespace.QName $r0;
        java.lang.String $r2, r3;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter0: java.lang.String;

        $r0 = new javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, r3);

        $r4 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaType getTypeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>($r0, 0, null);

        return $r4;
    }

    public java.lang.String getVersion()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String version>;

        return $r1;
    }

    public void setAttributeFormDefault(org.apache.ws.commons.schema.XmlSchemaForm)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaForm r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaForm;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm attributeFormDefault> = r1;

        return;
    }

    public void setBlockDefault(org.apache.ws.commons.schema.XmlSchemaDerivationMethod)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod blockDefault> = r1;

        return;
    }

    public void setElementFormDefault(org.apache.ws.commons.schema.XmlSchemaForm)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaForm r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaForm;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm elementFormDefault> = r1;

        return;
    }

    public void setFinalDefault(org.apache.ws.commons.schema.XmlSchemaDerivationMethod)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaDerivationMethod finalDefault> = r1;

        return;
    }

    public void setInputEncoding(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding> = r1;

        return;
    }

    public void setNamespaceContext(org.apache.ws.commons.schema.utils.NamespacePrefixList)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.utils.NamespacePrefixList r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.utils.NamespacePrefixList;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.utils.NamespacePrefixList namespaceContext> = r1;

        return;
    }

    public void setSchemaNamespacePrefix(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String schemaNamespacePrefix> = r1;

        return;
    }

    public void setTargetNamespace(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r2;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter0: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        r2.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace> = r0;

        r2.<org.apache.ws.commons.schema.XmlSchema: java.lang.String syntacticalTargetNamespace> = r0;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.ws.commons.schema.XmlSchema r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.ws.commons.schema.XmlSchemaAnnotated: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void write(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r3;
        org.apache.ws.commons.schema.XmlSchema r0;
        java.io.OutputStreamWriter $r2, $r6;
        java.lang.String $r1, $r4, $r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter0: java.io.OutputStream;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        if $r1 == null goto label1;

        $r5 = "";

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r6 = new java.io.OutputStreamWriter;

        $r7 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r3, $r7);

        virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void write(java.io.Writer)>($r6);

        goto label2;

     label1:
        $r2 = new java.io.OutputStreamWriter;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r3, "UTF-8");

        virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void write(java.io.Writer)>($r2);

     label2:
        return;
    }

    public void write(java.io.OutputStream, java.util.Map) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r3;
        java.util.Map r4;
        org.apache.ws.commons.schema.XmlSchema r0;
        java.io.OutputStreamWriter $r2, $r7;
        java.lang.String $r1, $r5, $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter0: java.io.OutputStream;

        r4 := @parameter1: java.util.Map;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        if $r1 == null goto label1;

        $r6 = "";

        $r5 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r7 = new java.io.OutputStreamWriter;

        $r8 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r3, $r8);

        virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void write(java.io.Writer,java.util.Map)>($r7, r4);

        goto label2;

     label1:
        $r2 = new java.io.OutputStreamWriter;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r3, "UTF-8");

        virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void write(java.io.Writer,java.util.Map)>($r2, r4);

     label2:
        return;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer r1;
        org.apache.ws.commons.schema.XmlSchema r0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void serializeInternal(org.apache.ws.commons.schema.XmlSchema,java.io.Writer,java.util.Map)>(r0, r1, null);

        return;
    }

    public void write(java.io.Writer, java.util.Map)
    {
        java.io.Writer r1;
        org.apache.ws.commons.schema.XmlSchema r0;
        java.util.Map r2;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: void serializeInternal(org.apache.ws.commons.schema.XmlSchema,java.io.Writer,java.util.Map)>(r0, r1, r2);

        return;
    }

    protected org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        org.apache.ws.commons.schema.XmlSchemaAttribute $r9, $r11, r13;
        java.util.Stack $r10, r12;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaAttribute) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    protected org.apache.ws.commons.schema.XmlSchemaAttributeGroup getAttributeGroupByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        java.util.Stack $r10, r12;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        java.util.Iterator $r5;
        org.apache.ws.commons.schema.XmlSchemaAttributeGroup $r9, $r11, r13;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map attributeGroups>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaAttributeGroup) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaAttributeGroup getAttributeGroupByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    protected org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        org.apache.ws.commons.schema.XmlSchemaElement $r9, $r11, r13;
        java.util.Stack $r10, r12;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map elements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaElement) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    protected org.apache.ws.commons.schema.XmlSchemaGroup getGroupByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        org.apache.ws.commons.schema.XmlSchemaGroup $r9, $r11, r13;
        java.util.Stack $r10, r12;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map groups>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaGroup) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaGroup getGroupByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    protected org.apache.ws.commons.schema.XmlSchemaNotation getNotationByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        java.util.Stack $r10, r12;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        org.apache.ws.commons.schema.XmlSchemaNotation $r9, $r11, r13;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map notations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaNotation) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaNotation getNotationByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    protected org.apache.ws.commons.schema.XmlSchemaType getTypeByName(javax.xml.namespace.QName, boolean, java.util.Stack)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r7;
        java.util.Stack $r10, r12;
        org.apache.ws.commons.schema.XmlSchemaType $r9, $r11, r13;
        java.util.Map $r2;
        org.apache.ws.commons.schema.XmlSchema r0, $r8;
        boolean z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.List $r4;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r12 := @parameter2: java.util.Stack;

        if r12 == null goto label1;

        $z2 = virtualinvoke r12.<java.util.Stack: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map schemaTypes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (org.apache.ws.commons.schema.XmlSchemaType) $r3;

        r13 = $r11;

        if z0 == 0 goto label7;

        if $r11 != null goto label6;

        $r4 = r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List externals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r6;

        $r8 = specialinvoke r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)>(r7);

        if $r8 == null goto label4;

        if r12 != null goto label3;

        $r10 = new java.util.Stack;

        specialinvoke $r10.<java.util.Stack: void <init>()>();

        r12 = $r10;

     label3:
        virtualinvoke r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaType getTypeByName(javax.xml.namespace.QName,boolean,java.util.Stack)>(r1, z0, r12);

        r13 = $r9;

        if $r9 == null goto label4;

        return $r9;

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        return $r11;

     label7:
        return r13;
    }

    java.lang.String getSyntacticalTargetNamespace()
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String $r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String syntacticalTargetNamespace>;

        return $r1;
    }

    void setLogicalTargetNamespace(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String logicalTargetNamespace> = r1;

        return;
    }

    void setParent(org.apache.ws.commons.schema.XmlSchemaCollection)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        org.apache.ws.commons.schema.XmlSchemaCollection r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaCollection;

        r0.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent> = r1;

        return;
    }

    void setSyntacticalTargetNamespace(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String syntacticalTargetNamespace> = r1;

        return;
    }

    void setVersion(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.ws.commons.schema.XmlSchema;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.ws.commons.schema.XmlSchema: java.lang.String version> = r1;

        return;
    }

    private org.apache.ws.commons.schema.XmlSchema getSchema(java.lang.Object)
    {
        org.apache.ws.commons.schema.XmlSchemaInclude $r1;
        org.apache.ws.commons.schema.XmlSchema r3, r4;
        java.lang.Object r0;
        org.apache.ws.commons.schema.XmlSchemaImport $r2;
        boolean $z0, $z1;

        r3 := @this: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaImport;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.ws.commons.schema.XmlSchemaImport) r0;

        r4 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaImport: org.apache.ws.commons.schema.XmlSchema getSchema()>();

        goto label3;

     label1:
        $z1 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaInclude;

        if $z1 == 0 goto label2;

        $r1 = (org.apache.ws.commons.schema.XmlSchemaInclude) r0;

        r4 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaInclude: org.apache.ws.commons.schema.XmlSchema getSchema()>();

        goto label3;

     label2:
        r4 = null;

     label3:
        return r4;
    }

    private void loadDefaultOptions(java.util.Map)
    {
        org.apache.ws.commons.schema.XmlSchema r1;
        java.util.Map r0;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter0: java.util.Map;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("omit-xml-declaration", "yes");

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("indent", "yes");

        return;
    }

    private void serializeInternal(org.apache.ws.commons.schema.XmlSchema, java.io.Writer, java.util.Map)
    {
        javax.xml.transform.Transformer $r11;
        javax.xml.transform.stream.StreamResult $r9;
        org.apache.ws.commons.schema.XmlSchemaException $r24, $r27, $r30, $r33;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.w3c.dom.Document $r8;
        java.util.Map r36;
        boolean $z0, $z1;
        org.w3c.dom.Document[] $r5;
        java.util.Set $r13;
        java.io.Writer r10;
        org.apache.ws.commons.schema.XmlSchemaSerializer $r0;
        javax.xml.transform.dom.DOMSource $r7;
        javax.xml.transform.TransformerException $r29;
        org.apache.ws.commons.schema.extensions.ExtensionRegistry $r3;
        java.util.HashMap $r19;
        org.apache.ws.commons.schema.XmlSchema r1, r4;
        java.lang.String $r12, $r16, $r18, $r20, $r21, $r22, $r25, $r28, $r31, $r34;
        java.util.Iterator $r14;
        javax.xml.transform.TransformerConfigurationException $r32;
        java.io.IOException $r23;
        java.lang.IllegalArgumentException $r35;
        org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException $r26;
        java.lang.Object $r15, $r17;
        javax.xml.transform.TransformerFactory $r6;

        r1 := @this: org.apache.ws.commons.schema.XmlSchema;

        r4 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r10 := @parameter1: java.io.Writer;

        r36 := @parameter2: java.util.Map;

     label01:
        $r0 = new org.apache.ws.commons.schema.XmlSchemaSerializer;

        specialinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void <init>()>();

        $r2 = r1.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaCollection parent>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.extensions.ExtensionRegistry getExtReg()>();

        virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: void setExtReg(org.apache.ws.commons.schema.extensions.ExtensionRegistry)>($r3);

        $r5 = virtualinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaSerializer: org.w3c.dom.Document[] serializeSchema(org.apache.ws.commons.schema.XmlSchema,boolean)>(r4, 0);

        $r6 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

     label02:
        virtualinvoke $r6.<javax.xml.transform.TransformerFactory: void setAttribute(java.lang.String,java.lang.Object)>("indent-number", "4");

     label03:
        goto label05;

     label04:
        $r35 := @caughtexception;

     label05:
        $r7 = new javax.xml.transform.dom.DOMSource;

        $r8 = $r5[0];

        specialinvoke $r7.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r8);

        $r9 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r9.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>(r10);

        $r11 = virtualinvoke $r6.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $r12 = r4.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        if $r12 == null goto label06;

        $r21 = "";

        $r20 = r4.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z0 != 0 goto label06;

        $r22 = r4.<org.apache.ws.commons.schema.XmlSchema: java.lang.String inputEncoding>;

        virtualinvoke $r11.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", $r22);

     label06:
        if r36 != null goto label07;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r36 = $r19;

        specialinvoke r1.<org.apache.ws.commons.schema.XmlSchema: void loadDefaultOptions(java.util.Map)>($r19);

     label07:
        $r13 = interfaceinvoke r36.<java.util.Map: java.util.Set keySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.lang.String) $r15;

        $r17 = interfaceinvoke r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r18 = (java.lang.String) $r17;

        virtualinvoke $r11.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>($r16, $r18);

        goto label08;

     label09:
        virtualinvoke $r11.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r7, $r9);

        virtualinvoke r10.<java.io.Writer: void flush()>();

     label10:
        goto label15;

     label11:
        $r32 := @caughtexception;

        $r33 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r34 = virtualinvoke $r32.<javax.xml.transform.TransformerConfigurationException: java.lang.String getMessage()>();

        specialinvoke $r33.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label12:
        $r29 := @caughtexception;

        $r30 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r31 = virtualinvoke $r29.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();

        specialinvoke $r30.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label13:
        $r26 := @caughtexception;

        $r27 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r28 = virtualinvoke $r26.<org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException: java.lang.String getMessage()>();

        specialinvoke $r27.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label14:
        $r23 := @caughtexception;

        $r24 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r25 = virtualinvoke $r23.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r24.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label15:
        return;

        catch java.lang.IllegalArgumentException from label02 to label03 with label04;
        catch javax.xml.transform.TransformerConfigurationException from label01 to label10 with label11;
        catch javax.xml.transform.TransformerException from label01 to label10 with label12;
        catch org.apache.ws.commons.schema.XmlSchemaSerializer$XmlSchemaSerializerException from label01 to label10 with label13;
        catch java.io.IOException from label01 to label10 with label14;
    }

    public static void <clinit>()
    {
        <org.apache.ws.commons.schema.XmlSchema: java.lang.String UTF_8_ENCODING> = "UTF-8";

        <org.apache.ws.commons.schema.XmlSchema: java.lang.String SCHEMA_NS> = "http://www.w3.org/2001/XMLSchema";

        return;
    }
}
