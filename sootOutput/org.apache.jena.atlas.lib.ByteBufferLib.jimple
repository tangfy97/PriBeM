public class org.apache.jena.atlas.lib.ByteBufferLib extends java.lang.Object
{
    public static boolean allowArray;

    private void <init>()
    {
        org.apache.jena.atlas.lib.ByteBufferLib r0;

        r0 := @this: org.apache.jena.atlas.lib.ByteBufferLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void fill(java.nio.ByteBuffer, byte)
    {
        byte b2;
        int $i0, $i1;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        b2 := @parameter1: byte;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void fill(java.nio.ByteBuffer,int,int,byte)>(r0, $i0, $i1, b2);

        return;
    }

    public static void fill(java.nio.ByteBuffer, int, int, byte)
    {
        byte b2;
        int i0, i1, i3;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        b2 := @parameter3: byte;

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(i3, b2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void print(java.nio.ByteBuffer)
    {
        java.io.PrintStream $r1;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void print(java.io.PrintStream,java.nio.ByteBuffer)>($r1, r0);

        return;
    }

    public static void print(java.io.PrintStream, java.nio.ByteBuffer)
    {
        java.lang.Object[] $r2, $r6;
        java.lang.Integer $r3, $r4, $r5;
        java.nio.ByteBuffer $r0, r8;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        java.lang.Byte $r7;
        java.io.PrintStream r1;

        r1 := @parameter0: java.io.PrintStream;

        r8 := @parameter1: java.nio.ByteBuffer;

        $r0 = virtualinvoke r8.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r2 = newarray (java.lang.Object)[3];

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int limit()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $i2 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r5;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("ByteBuffer[pos=%d lim=%d cap=%d]", $r2);

        i8 = 0;

     label1:
        if i8 >= 60 goto label3;

        $i5 = virtualinvoke $r0.<java.nio.ByteBuffer: int limit()>();

        if i8 >= $i5 goto label3;

        $i6 = i8 % 20;

        if $i6 != 0 goto label2;

        virtualinvoke r1.<java.io.PrintStream: void println()>();

     label2:
        $r6 = newarray (java.lang.Object)[1];

        $b7 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get(int)>(i8);

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b7);

        $r6[0] = $r7;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" 0x%02X", $r6);

        i8 = i8 + 1;

        goto label1;

     label3:
        $i3 = virtualinvoke $r0.<java.nio.ByteBuffer: int limit()>();

        if i8 >= $i3 goto label5;

        $i4 = i8 % 24;

        if $i4 != 0 goto label4;

        virtualinvoke r1.<java.io.PrintStream: void println()>();

     label4:
        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>(" ...");

     label5:
        virtualinvoke r1.<java.io.PrintStream: void println()>();

        return;
    }

    public static boolean sameValue(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i6, $i7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        if i5 >= $i2 goto label4;

        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i5);

        $b4 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(i5);

        $i6 = (int) $b3;

        $i7 = (int) $b4;

        if $i6 == $i7 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static final java.nio.ByteBuffer duplicate(java.nio.ByteBuffer)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.nio.ByteBuffer r0, $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 - $i1;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $i4 = virtualinvoke $r1.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i4);

        return $r1;
    }

    public static final byte[] bb2array(java.nio.ByteBuffer, int, int)
    {
        byte[] r0;
        int i0, i1, $i2;
        java.nio.ByteBuffer r1;

        r1 := @parameter0: java.nio.ByteBuffer;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        r0 = newarray (byte)[$i2];

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bb2array(java.nio.ByteBuffer,int,int,byte[])>(r1, i1, i0, r0);

        return r0;
    }

    private static void bb2array(java.nio.ByteBuffer, int, int, byte[])
    {
        byte[] r0;
        byte $b2;
        int i0, i1, i3;
        java.nio.ByteBuffer r1;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: byte[];

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        $b2 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(i3);

        r0[0] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static final void bbcopy(java.nio.ByteBuffer, int, int, int, int)
    {
        int i0, i1, i2, i3;
        java.nio.ByteBuffer r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i0 != i1 goto label1;

        return;

     label1:
        $z0 = <org.apache.jena.atlas.lib.ByteBufferLib: boolean allowArray>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void acopyArray(java.nio.ByteBuffer,int,int,int,int)>(r0, i0, i1, i2, i3);

        return;

     label2:
        if i0 >= i1 goto label3;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy1(java.nio.ByteBuffer,int,int,int,int)>(r0, i0, i1, i2, i3);

        goto label4;

     label3:
        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy2(java.nio.ByteBuffer,int,int,int,int)>(r0, i0, i1, i2, i3);

     label4:
        return;
    }

    private static final void bbcopy1(java.nio.ByteBuffer, int, int, int, int)
    {
        java.nio.ByteBuffer r0;
        byte $b9;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, i10, $i12;

        r0 := @parameter0: java.nio.ByteBuffer;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i5 := @parameter3: int;

        i1 := @parameter4: int;

        i2 = i0 * i1;

        i4 = i3 * i1;

        i6 = i5 * i1;

        i10 = i6 - 1;

     label1:
        if i10 < 0 goto label2;

        $i8 = i2 + i10;

        $i7 = i4 + i10;

        $b9 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>($i7);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($i8, $b9);

        $i12 = (int) -1;

        i10 = i10 + $i12;

        goto label1;

     label2:
        return;
    }

    private static final void bbcopy2(java.nio.ByteBuffer, int, int, int, int)
    {
        java.nio.ByteBuffer r0;
        byte $b9;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, i10;

        r0 := @parameter0: java.nio.ByteBuffer;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i5 := @parameter3: int;

        i1 := @parameter4: int;

        i2 = i0 * i1;

        i4 = i3 * i1;

        i6 = i5 * i1;

        i10 = 0;

     label1:
        if i10 >= i6 goto label2;

        $i8 = i2 + i10;

        $i7 = i4 + i10;

        $b9 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>($i7);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($i8, $b9);

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    public static final void bbcopy(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int, int)
    {
        java.nio.ByteBuffer r0, r1;
        byte $b6;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i8, $i9, i10;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r0 := @parameter2: java.nio.ByteBuffer;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i1 := @parameter5: int;

        $z0 = <org.apache.jena.atlas.lib.ByteBufferLib: boolean allowArray>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label1;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void acopyArray(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)>(r1, i0, r0, i2, i3, i1);

        return;

     label1:
        $i7 = i0 * i1;

        $i8 = i2 * i1;

        $i9 = i3 * i1;

        i10 = 0;

     label2:
        if i10 >= $i9 goto label3;

        $i5 = $i8 + i10;

        $i4 = $i7 + i10;

        $b6 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>($i4);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($i5, $b6);

        i10 = i10 + 1;

        goto label2;

     label3:
        return;
    }

    public static final void bbfill(java.nio.ByteBuffer, int, int, byte, int)
    {
        java.nio.ByteBuffer r0;
        byte b3;
        int i0, i1, i2, $i4, i5;
        boolean $z0, $z1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        b3 := @parameter3: byte;

        i1 := @parameter4: int;

        $z0 = <org.apache.jena.atlas.lib.ByteBufferLib: boolean allowArray>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label1;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void afillArray(java.nio.ByteBuffer,int,int,byte,int)>(r0, i0, i2, b3, i1);

        return;

     label1:
        $i4 = i2 * i1;

        i5 = i0 * i1;

     label2:
        if i5 >= $i4 goto label3;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(i5, b3);

        i5 = i5 + 1;

        goto label2;

     label3:
        return;
    }

    private static final void acopyArray(java.nio.ByteBuffer, int, int, int, int)
    {
        byte[] $r1;
        java.nio.ByteBuffer r0;
        int $i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9;

        r0 := @parameter0: java.nio.ByteBuffer;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        i6 := @parameter3: int;

        i2 := @parameter4: int;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        i3 = i1 * i2;

        i5 = i4 * i2;

        i7 = i6 * i2;

        $i9 = $i0 + i3;

        $i8 = $i0 + i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i9, $r1, $i8, i7);

        return;
    }

    private static final void acopyArray(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int, int)
    {
        byte[] $r1, $r3;
        java.nio.ByteBuffer r0, r2;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10;

        r0 := @parameter0: java.nio.ByteBuffer;

        i2 := @parameter1: int;

        r2 := @parameter2: java.nio.ByteBuffer;

        i5 := @parameter3: int;

        i7 := @parameter4: int;

        i3 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();

        i4 = i2 * i3;

        i6 = i5 * i3;

        i8 = i7 * i3;

        $i10 = $i0 + i4;

        $i9 = $i1 + i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i10, $r3, $i9, i8);

        return;
    }

    private static final void afillArray(java.nio.ByteBuffer, int, int, byte, int)
    {
        byte[] $r1;
        java.nio.ByteBuffer r0;
        byte b6;
        int $i0, i1, i2, i3, i4, i5, $i7, $i8;

        r0 := @parameter0: java.nio.ByteBuffer;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        b6 := @parameter3: byte;

        i2 := @parameter4: int;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        i3 = i1 * i2;

        i5 = i4 * i2;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $i8 = i3 + $i0;

        $i7 = i5 + $i0;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, $i8, $i7, b6);

        return;
    }

    static void <clinit>()
    {
        <org.apache.jena.atlas.lib.ByteBufferLib: boolean allowArray> = 1;

        return;
    }
}
