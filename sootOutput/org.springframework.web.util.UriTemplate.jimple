public class org.springframework.web.util.UriTemplate extends java.lang.Object implements java.io.Serializable
{
    private static final java.util.regex.Pattern NAMES_PATTERN;
    private static final java.lang.String VALUE_REGEX;
    private final java.util.List variableNames;
    private final java.util.regex.Pattern matchPattern;
    private final java.lang.String uriTemplate;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.springframework.web.util.UriTemplate: java.lang.String VALUE_REGEX> = "(.*)";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{([^/]+?)\\}");

        <org.springframework.web.util.UriTemplate: java.util.regex.Pattern NAMES_PATTERN> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.springframework.web.util.UriTemplate r0;
        java.util.List $r3;
        org.springframework.web.util.UriTemplate$Parser $r1;
        java.lang.String r2;
        java.util.regex.Pattern $r4;

        r0 := @this: org.springframework.web.util.UriTemplate;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.web.util.UriTemplate$Parser;

        specialinvoke $r1.<org.springframework.web.util.UriTemplate$Parser: void <init>(java.lang.String,org.springframework.web.util.UriTemplate$Parser)>(r2, null);

        r0.<org.springframework.web.util.UriTemplate: java.lang.String uriTemplate> = r2;

        $r3 = staticinvoke <org.springframework.web.util.UriTemplate$Parser: java.util.List access$1(org.springframework.web.util.UriTemplate$Parser)>($r1);

        r0.<org.springframework.web.util.UriTemplate: java.util.List variableNames> = $r3;

        $r4 = staticinvoke <org.springframework.web.util.UriTemplate$Parser: java.util.regex.Pattern access$2(org.springframework.web.util.UriTemplate$Parser)>($r1);

        r0.<org.springframework.web.util.UriTemplate: java.util.regex.Pattern matchPattern> = $r4;

        return;
    }

    public java.util.List getVariableNames()
    {
        org.springframework.web.util.UriTemplate r0;
        java.util.List $r1;

        r0 := @this: org.springframework.web.util.UriTemplate;

        $r1 = r0.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        return $r1;
    }

    public java.net.URI expand(java.util.Map)
    {
        org.springframework.web.util.UriTemplate r1;
        java.lang.Object[] r3;
        java.util.Map r0;
        int $i0, $i1, i2;
        java.lang.String r7, $r13;
        java.net.URI $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.util.List $r2, $r4, $r5;
        java.lang.Object $r6, $r8;
        java.lang.StringBuilder $r10, $r11, $r12;

        r1 := @this: org.springframework.web.util.UriTemplate;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'uriVariables\' must not be null");

        $r2 = r1.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r3 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        goto label3;

     label1:
        $r5 = r1.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        r7 = (java.lang.String) $r6;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z0 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'uriVariables\' Map has no value for \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $r8 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r3[i2] = $r8;

        i2 = i2 + 1;

     label3:
        $r4 = r1.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i2 < $i1 goto label1;

        $r14 = virtualinvoke r1.<org.springframework.web.util.UriTemplate: java.net.URI expand(java.lang.Object[])>(r3);

        return $r14;
    }

    public transient java.net.URI expand(java.lang.Object[])
    {
        org.springframework.web.util.UriTemplate r1;
        java.lang.Object[] r0;
        java.util.regex.Matcher $r5;
        java.lang.StringBuffer $r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r3, $r8, $r9, $r13, $r20, $r21;
        java.net.URI $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r11;
        java.util.List $r2, $r16;
        java.lang.Object r7;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r18, $r19;
        java.util.regex.Pattern $r4;

        r1 := @this: org.springframework.web.util.UriTemplate;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'uriVariableValues\' must not be null");

        $i0 = lengthof r0;

        $r2 = r1.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid amount of variables values in [");

        $r13 = r1.<org.springframework.web.util.UriTemplate: java.lang.String uriTemplate>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: expected ");

        $r16 = r1.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i3 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; got ");

        $i4 = lengthof r0;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r11;

     label1:
        $r4 = <org.springframework.web.util.UriTemplate: java.util.regex.Pattern NAMES_PATTERN>;

        $r3 = r1.<org.springframework.web.util.UriTemplate: java.lang.String uriTemplate>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        i5 = 0;

        goto label5;

     label2:
        $i2 = i5;

        i5 = i5 + 1;

        r7 = r0[$i2];

        if r7 == null goto label3;

        $r21 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        goto label4;

     label3:
        $r21 = "";

     label4:
        $r8 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r21);

        virtualinvoke $r5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r6, $r8);

     label5:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r5.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r6);

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = virtualinvoke r1.<org.springframework.web.util.UriTemplate: java.net.URI encodeUri(java.lang.String)>($r9);

        return $r10;
    }

    public boolean matches(java.lang.String)
    {
        org.springframework.web.util.UriTemplate r1;
        java.util.regex.Matcher $r3;
        java.lang.String r0;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r1 := @this: org.springframework.web.util.UriTemplate;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = r1.<org.springframework.web.util.UriTemplate: java.util.regex.Pattern matchPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public java.util.Map match(java.lang.String)
    {
        org.springframework.web.util.UriTemplate r2;
        java.util.LinkedHashMap $r1;
        java.util.List $r3, $r6;
        java.util.regex.Matcher $r5;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r7;
        java.lang.String r0, r8, $r9;
        java.util.regex.Pattern $r4;
        boolean $z0;

        r2 := @this: org.springframework.web.util.UriTemplate;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'uri\' must not be null");

        $r1 = new java.util.LinkedHashMap;

        $r3 = r2.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r4 = r2.<org.springframework.web.util.UriTemplate: java.util.regex.Pattern matchPattern>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        i3 = 1;

        goto label2;

     label1:
        $r6 = r2.<org.springframework.web.util.UriTemplate: java.util.List variableNames>;

        $i2 = i3 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(i3);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r9);

        i3 = i3 + 1;

     label2:
        $i1 = virtualinvoke $r5.<java.util.regex.Matcher: int groupCount()>();

        if i3 <= $i1 goto label1;

     label3:
        return $r1;
    }

    protected java.net.URI encodeUri(java.lang.String)
    {
        java.lang.IllegalStateException $r11;
        org.springframework.web.util.UriTemplate r12;
        java.net.URISyntaxException $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r0, $r1, $r9;
        java.net.URI $r2;
        java.io.UnsupportedEncodingException $r10;

        r12 := @this: org.springframework.web.util.UriTemplate;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeUri(java.lang.String,java.lang.String)>(r0, "UTF-8");

        $r2 = new java.net.URI;

        specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create URI from [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
        catch java.net.URISyntaxException from label1 to label2 with label4;
    }

    public java.lang.String toString()
    {
        org.springframework.web.util.UriTemplate r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.util.UriTemplate;

        $r1 = r0.<org.springframework.web.util.UriTemplate: java.lang.String uriTemplate>;

        return $r1;
    }

    static java.util.regex.Pattern access$0()
    {
        java.util.regex.Pattern $r0;

        $r0 = <org.springframework.web.util.UriTemplate: java.util.regex.Pattern NAMES_PATTERN>;

        return $r0;
    }
}
