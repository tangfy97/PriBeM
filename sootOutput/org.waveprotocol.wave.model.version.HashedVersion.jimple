public final class org.waveprotocol.wave.model.version.HashedVersion extends java.lang.Object implements java.lang.Comparable
{
    private final long version;
    private final byte[] historyHash;

    public static org.waveprotocol.wave.model.version.HashedVersion of(long, byte[])
    {
        org.waveprotocol.wave.model.version.HashedVersion $r0;
        byte[] r1;
        long l0;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        $r0 = new org.waveprotocol.wave.model.version.HashedVersion;

        specialinvoke $r0.<org.waveprotocol.wave.model.version.HashedVersion: void <init>(long,byte[])>(l0, r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.version.HashedVersion unsigned(long)
    {
        org.waveprotocol.wave.model.version.HashedVersion $r0;
        byte[] $r1;
        long l0;

        l0 := @parameter0: long;

        $r0 = new org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = newarray (byte)[0];

        specialinvoke $r0.<org.waveprotocol.wave.model.version.HashedVersion: void <init>(long,byte[])>(l0, $r1);

        return $r0;
    }

    private void <init>(long, byte[])
    {
        byte[] r1;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        int $i2;
        long l0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "negative version");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "null history hash");

        r0.<org.waveprotocol.wave.model.version.HashedVersion: long version> = l0;

        r0.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash> = r1;

        return;
    }

    public int compareTo(org.waveprotocol.wave.model.version.HashedVersion)
    {
        byte[] $r2, $r3;
        long $l0, $l1, $l3, $l4, $l5;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion r0, r1;
        int $i6;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $l1 = r0.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $l0 = r1.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label1;

        $l4 = r0.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $l3 = r1.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $l5 = $l4 - $l3;

        $i6 = staticinvoke <java.lang.Long: int signum(long)>($l5);

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $r2 = r1.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $i6 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: int compare(byte[],byte[])>($r3, $r2);

     label2:
        return $i6;
    }

    public long getVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = r0.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        return $l0;
    }

    public byte[] getHistoryHash()
    {
        org.waveprotocol.wave.model.version.HashedVersion r0;
        byte[] $r1;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = r0.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        return $r1;
    }

    public int hashCode()
    {
        byte[] $r2;
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        int $i1, $i2, $i3, i4, i5;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = r0.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke $r1.<java.lang.Long: int hashCode()>();

        i4 = 527 + $i1;

        $i2 = 31 * i4;

        $r2 = r0.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r2);

        i5 = $i2 + $i3;

        return i5;
    }

    public boolean equals(java.lang.Object)
    {
        byte[] $r3, $r4;
        long $l0, $l1;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.model.version.HashedVersion;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.waveprotocol.wave.model.version.HashedVersion) r0;

        $l1 = r1.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $l0 = r2.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

        $r4 = r1.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $r3 = r2.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public java.lang.String toString()
    {
        byte[] $r5;
        long $l0;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;

        r1 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $l0 = r1.<org.waveprotocol.wave.model.version.HashedVersion: long version>;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = r1.<org.waveprotocol.wave.model.version.HashedVersion: byte[] historyHash>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encode(byte[])>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static int compare(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b6, $b7, $b8, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i10, $i11, i12, $i13, $i14, $i15, $i16;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 0;

     label1:
        i12 = 0;

     label2:
        $i0 = lengthof r0;

        if i12 >= $i0 goto label4;

        $i5 = lengthof r1;

        if i12 >= $i5 goto label4;

        $b7 = r0[i12];

        $b6 = r1[i12];

        $i13 = (int) $b7;

        $i14 = (int) $b6;

        if $i13 == $i14 goto label3;

        $b9 = r0[i12];

        $b8 = r1[i12];

        $i15 = (int) $b9;

        $i16 = (int) $b8;

        $i10 = $i15 - $i16;

        $i11 = staticinvoke <java.lang.Integer: int signum(int)>($i10);

        return $i11;

     label3:
        i12 = i12 + 1;

        goto label2;

     label4:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <java.lang.Integer: int signum(int)>($i3);

        return $i4;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.model.version.HashedVersion r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.version.HashedVersion) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: int compareTo(org.waveprotocol.wave.model.version.HashedVersion)>($r2);

        return $i0;
    }
}
