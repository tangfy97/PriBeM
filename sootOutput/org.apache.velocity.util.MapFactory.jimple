public class org.apache.velocity.util.MapFactory extends java.lang.Object
{
    private static java.lang.reflect.Constructor concurrentHashMapConstructor;

    public void <init>()
    {
        org.apache.velocity.util.MapFactory r0;

        r0 := @this: org.apache.velocity.util.MapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map create(boolean)
    {
        boolean z0;
        java.util.Map $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <org.apache.velocity.util.MapFactory: java.util.Map create(int,float,int,boolean)>(16, 0.75F, 16, z0);

        return $r0;
    }

    public static java.util.Map create(int, float, int, boolean)
    {
        java.lang.Float $r6;
        java.lang.Object[] $r3;
        java.util.HashMap $r2, $r9;
        java.lang.reflect.Constructor $r0, $r5;
        java.lang.Integer $r4, $r7;
        java.util.Map r12;
        int i0, i1;
        java.util.Hashtable $r1;
        boolean z0;
        java.lang.RuntimeException $r11;
        java.lang.Exception $r10;
        float f0;
        java.lang.Object $r8;

        i1 := @parameter0: int;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i0 > 1 goto label1;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(int,float)>(i1, f0);

        r12 = $r9;

        goto label7;

     label1:
        $r0 = <org.apache.velocity.util.MapFactory: java.lang.reflect.Constructor concurrentHashMapConstructor>;

        if $r0 == null goto label5;

     label2:
        $r5 = <org.apache.velocity.util.MapFactory: java.lang.reflect.Constructor concurrentHashMapConstructor>;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i1);

        $r3[0] = $r4;

        $r6 = new java.lang.Float;

        specialinvoke $r6.<java.lang.Float: void <init>(float)>(f0);

        $r3[1] = $r6;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0);

        $r3[2] = $r7;

        $r8 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        r12 = (java.util.Map) $r8;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("this should not happen", $r10);

        throw $r11;

     label5:
        if z0 == 0 goto label6;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(i1, f0);

        r12 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);

        goto label7;

     label6:
        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int,float)>(i1, f0);

        r12 = $r1;

     label7:
        return r12;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        java.lang.Class $r0, $r2, $r3, $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Exception $r6;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.concurrent.ConcurrentHashMap");

        $r1 = newarray (java.lang.Class)[3];

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $r3 = <java.lang.Float: java.lang.Class TYPE>;

        $r1[1] = $r3;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[2] = $r4;

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        <org.apache.velocity.util.MapFactory: java.lang.reflect.Constructor concurrentHashMapConstructor> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
