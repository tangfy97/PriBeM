class com.mycila.inject.internal.guava.collect.Multisets$1$1 extends com.mycila.inject.internal.guava.collect.AbstractIterator
{
    final java.util.Iterator val$iterator1;
    final com.mycila.inject.internal.guava.collect.Multisets$1 this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Multisets$1, java.util.Iterator)
    {
        java.util.Iterator r2;
        com.mycila.inject.internal.guava.collect.Multisets$1 r1;
        com.mycila.inject.internal.guava.collect.Multisets$1$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multisets$1$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multisets$1;

        r2 := @parameter1: java.util.Iterator;

        r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: com.mycila.inject.internal.guava.collect.Multisets$1 this$0> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: java.util.Iterator val$iterator1> = r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractIterator: void <init>()>();

        return;
    }

    protected com.mycila.inject.internal.guava.collect.Multiset$Entry computeNext()
    {
        java.util.Iterator $r1, $r4;
        com.mycila.inject.internal.guava.collect.Multiset $r9;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r3, r6, $r10;
        com.mycila.inject.internal.guava.collect.Multisets$1$1 r0;
        com.mycila.inject.internal.guava.collect.Multisets$1 $r8;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r5, $r7;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multisets$1$1;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: java.util.Iterator val$iterator1>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: java.util.Iterator val$iterator1>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r5;

        $r7 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        $r8 = r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: com.mycila.inject.internal.guava.collect.Multisets$1 this$0>;

        $r9 = $r8.<com.mycila.inject.internal.guava.collect.Multisets$1: com.mycila.inject.internal.guava.collect.Multiset val$multiset2>;

        $i1 = interfaceinvoke $r9.<com.mycila.inject.internal.guava.collect.Multiset: int count(java.lang.Object)>($r7);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        if $i2 <= 0 goto label2;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>($r7, $i2);

        return $r10;

     label2:
        goto label1;

     label3:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: java.lang.Object endOfData()>();

        $r3 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r2;

        return $r3;
    }

    protected volatile java.lang.Object computeNext()
    {
        com.mycila.inject.internal.guava.collect.Multisets$1$1 r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multisets$1$1;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multisets$1$1: com.mycila.inject.internal.guava.collect.Multiset$Entry computeNext()>();

        return $r1;
    }
}
