class kodkod.util.nodes.PrettyPrinter$Formatter extends java.lang.Object implements kodkod.ast.visitor.VoidVisitor
{
    final java.lang.StringBuilder tokens;
    final int offset;
    private final int lineLength;
    private int indent;
    private int lineStart;
    static final boolean $assertionsDisabled;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/util/nodes/PrettyPrinter$Formatter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.util.nodes.PrettyPrinter$Formatter: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <kodkod.util.nodes.PrettyPrinter$Formatter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens> = $r1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int offset> = i0;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int lineLength> = i1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int lineStart> = 0;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = i0;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void indent()>();

        return;
    }

    private void infix(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.StringBuilder $r2;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        $r2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        return;
    }

    private void keyword(java.lang.Object)
    {
        java.lang.Object r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        return;
    }

    private void comma()
    {
        java.lang.StringBuilder $r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        $r1 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        return;
    }

    private void colon()
    {
        java.lang.StringBuilder $r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        $r1 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        return;
    }

    private void indent()
    {
        int $i0, i1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        i1 = 0;

        goto label2;

     label1:
        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

        i1 = i1 + 1;

     label2:
        $i0 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        if i1 < $i0 goto label1;

        return;
    }

    private void newline()
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        $r1 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        $i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int lineStart> = $i0;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void indent()>();

        return;
    }

    private void space()
    {
        java.lang.StringBuilder $r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        $r1 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        return;
    }

    private void append(java.lang.Object)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r0;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r3 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i1 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int lineStart>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i5 = $i2 + $i3;

        $i4 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int lineLength>;

        if $i5 <= $i4 goto label1;

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

     label1:
        $r4 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }

    public void visit(kodkod.ast.Relation)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.Relation;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.Variable)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.Variable;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.IntConstant;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.Decl)
    {
        kodkod.ast.operator.Multiplicity $r3, $r4, $r6;
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        kodkod.ast.Decl r0;
        kodkod.ast.Expression $r5;
        kodkod.ast.Variable $r1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.Decl;

        $r1 = virtualinvoke r0.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        virtualinvoke $r1.<kodkod.ast.Variable: void accept(kodkod.ast.visitor.VoidVisitor)>(r2);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void colon()>();

        $r3 = virtualinvoke r0.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r4 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        if $r3 == $r4 goto label1;

        $r6 = virtualinvoke r0.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>($r6);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void space()>();

     label1:
        $r5 = virtualinvoke r0.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        virtualinvoke $r5.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r2);

        return;
    }

    public void visit(kodkod.ast.Decls)
    {
        java.util.Iterator $r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r3;
        kodkod.ast.Decl $r4, $r6;
        kodkod.ast.Decls r0;
        java.lang.Object $r2, $r5;
        boolean $z0;

        r3 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.Decls;

        $r1 = virtualinvoke r0.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kodkod.ast.Decl) $r2;

        virtualinvoke $r4.<kodkod.ast.Decl: void accept(kodkod.ast.visitor.VoidVisitor)>(r3);

        goto label2;

     label1:
        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kodkod.ast.Decl) $r5;

        virtualinvoke $r6.<kodkod.ast.Decl: void accept(kodkod.ast.visitor.VoidVisitor)>(r3);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void visitChild(kodkod.ast.Node, boolean)
    {
        kodkod.ast.Node r0;
        kodkod.util.nodes.PrettyPrinter$Formatter r1;
        boolean z0;

        r1 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.Node;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        specialinvoke r1.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("(");

     label1:
        virtualinvoke r0.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>(r1);

        if z0 == 0 goto label2;

        specialinvoke r1.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(")");

     label2:
        return;
    }

    private boolean parenthesize(kodkod.ast.Expression)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r1;
        kodkod.ast.Expression r0;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.Expression;

        $z0 = r0 instanceof kodkod.ast.BinaryExpression;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof kodkod.ast.IfExpression;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean parenthesize(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0;
        kodkod.util.nodes.PrettyPrinter$Formatter r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.IntExpression;

        $z0 = r0 instanceof kodkod.ast.UnaryIntExpression;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof kodkod.ast.IntConstant;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof kodkod.ast.ExprToIntCast;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        return $z3;
    }

    private boolean parenthesize(kodkod.ast.Formula)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r1;
        kodkod.ast.Formula r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.Formula;

        $z0 = r0 instanceof kodkod.ast.NotFormula;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof kodkod.ast.ConstantFormula;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof kodkod.ast.RelationPredicate;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        return $z3;
    }

    public void visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Expression $r3, $r4;
        kodkod.ast.UnaryExpression r1;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r4);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        return;
    }

    public void visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.operator.IntOperator $r2, $r3, $r5, $r6;
        kodkod.util.nodes.PrettyPrinter$Formatter r4;
        kodkod.ast.UnaryIntExpression r0;
        boolean $z0, $z1;

        r4 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r2 = virtualinvoke r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r3 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        if $r2 == $r3 goto label1;

        $r5 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        if $r2 == $r5 goto label1;

        $z0 = specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.IntExpression)>($r1);

        if $z0 != 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        $r6 = virtualinvoke r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>($r6);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r1, $z1);

        return;
    }

    public void visit(kodkod.ast.NotFormula)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Formula $r2, $r3, $r4;
        byte $b4, $b5;
        kodkod.ast.NotFormula r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.NotFormula;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("!");

        $r2 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Formula)>($r2);

        $i0 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        if $z0 == 0 goto label1;

        $b4 = 2;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i1 = $i0 + $b4;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i1;

        $r3 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $z1 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Formula)>($r4);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z1);

        $i2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        if $z0 == 0 goto label3;

        $b5 = 2;

        goto label4;

     label3:
        $b5 = 1;

     label4:
        $i3 = $i2 - $b5;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i3;

        return;
    }

    public void visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.operator.Multiplicity $r2;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Expression $r3, $r4;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.operator.Multiplicity multiplicity()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void keyword(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r4);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        return;
    }

    private boolean parenthesize(kodkod.ast.operator.ExprOperator, kodkod.ast.Expression)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r5;
        kodkod.ast.Expression r0;
        kodkod.ast.operator.ExprOperator r1, $r2, $r4;
        kodkod.ast.BinaryExpression $r3;
        boolean $z0, $z1, $z2;

        r5 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.operator.ExprOperator;

        r0 := @parameter1: kodkod.ast.Expression;

        $z0 = r0 instanceof kodkod.ast.IfExpression;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof kodkod.ast.NaryExpression;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof kodkod.ast.BinaryExpression;

        if $z2 == 0 goto label1;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        if r1 == $r2 goto label2;

        $r3 = (kodkod.ast.BinaryExpression) r0;

        $r4 = virtualinvoke $r3.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        if $r4 != r1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void visit(kodkod.ast.BinaryExpression)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        kodkod.ast.Expression $r3, $r4, $r5, $r6;
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.BinaryExpression r0;
        boolean $z0, $z1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.BinaryExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r1, $r4);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r6 = virtualinvoke r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r1, $r6);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        return;
    }

    private boolean associative(kodkod.ast.operator.IntOperator)
    {
        kodkod.ast.operator.IntOperator r1;
        int[] $r0;
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        int $i0, $i1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.operator.IntOperator;

        $r0 = staticinvoke <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()>();

        $i0 = virtualinvoke r1.<kodkod.ast.operator.IntOperator: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean parenthesize(kodkod.ast.operator.IntOperator, kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0;
        kodkod.ast.operator.IntOperator r2, $r4;
        kodkod.util.nodes.PrettyPrinter$Formatter r1;
        kodkod.ast.BinaryIntExpression $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r2 := @parameter0: kodkod.ast.operator.IntOperator;

        r0 := @parameter1: kodkod.ast.IntExpression;

        $z0 = r0 instanceof kodkod.ast.SumExpression;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof kodkod.ast.IfIntExpression;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof kodkod.ast.NaryIntExpression;

        if $z2 != 0 goto label2;

        $z3 = r0 instanceof kodkod.ast.BinaryIntExpression;

        if $z3 == 0 goto label1;

        $z4 = specialinvoke r1.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean associative(kodkod.ast.operator.IntOperator)>(r2);

        if $z4 == 0 goto label2;

        $r3 = (kodkod.ast.BinaryIntExpression) r0;

        $r4 = virtualinvoke $r3.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        if $r4 != r2 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r3, $r4, $r5, $r6;
        kodkod.ast.BinaryIntExpression r0;
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        boolean $z0, $z1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r1, $r4);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r6 = virtualinvoke r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r1, $r6);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        return;
    }

    private boolean parenthesize(kodkod.ast.operator.FormulaOperator, kodkod.ast.Formula)
    {
        kodkod.ast.BinaryFormula $r3;
        kodkod.util.nodes.PrettyPrinter$Formatter r5;
        kodkod.ast.Formula r0;
        kodkod.ast.operator.FormulaOperator r1, $r2, $r4;
        boolean $z0, $z1;

        r5 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.operator.FormulaOperator;

        r0 := @parameter1: kodkod.ast.Formula;

        $z0 = r0 instanceof kodkod.ast.QuantifiedFormula;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof kodkod.ast.BinaryFormula;

        if $z1 == 0 goto label1;

        $r2 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if r1 == $r2 goto label2;

        $r3 = (kodkod.ast.BinaryFormula) r0;

        $r4 = virtualinvoke $r3.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        if $r4 != r1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r0;
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        kodkod.ast.operator.FormulaOperator $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        kodkod.ast.Formula $r3, $r4, $r5, $r6;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.BinaryFormula;

        $r1 = virtualinvoke r0.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r1, $r3);

        if $z0 == 0 goto label1;

        $i6 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i7 = $i6 + 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i7;

     label1:
        $r4 = virtualinvoke r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r4, $z0);

        if $z0 == 0 goto label2;

        $i4 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i5 = $i4 - 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i5;

     label2:
        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r5 = virtualinvoke r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r1, $r5);

        if $z1 == 0 goto label3;

        $i2 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i3 = $i2 + 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i3;

     label3:
        $r6 = virtualinvoke r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r6, $z1);

        if $z1 == 0 goto label4;

        $i0 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i1 = $i0 - 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i1;

     label4:
        return;
    }

    public void visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Expression $r2, $r3, $r5, $r6;
        kodkod.ast.ComparisonFormula r1;
        kodkod.ast.operator.ExprCompOperator $r4;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r3 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r3);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r2, $z0);

        $r4 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r4);

        $r5 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r6 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $z1 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r6);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        return;
    }

    public void visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.operator.IntCompOperator $r4;
        kodkod.ast.IntExpression $r2, $r3, $r5, $r6;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.IntComparisonFormula r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r3 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.IntExpression)>($r3);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r2, $z0);

        $r4 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.operator.IntCompOperator op()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r4);

        $r5 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r6 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $z1 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.IntExpression)>($r6);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        return;
    }

    public void visit(kodkod.ast.IfExpression)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Formula $r2, $r3;
        kodkod.ast.Expression $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.IfExpression r1;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r3 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Formula)>($r3);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r2, $z0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("=>");

        $i0 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i1;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r5 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $z1 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r5);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r4, $z1);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("else");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r6 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r7 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $z2 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Expression)>($r7);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r6, $z2);

        $i2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i3 = $i2 - 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i3;

        return;
    }

    public void visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.IntExpression $r4, $r5, $r6, $r7;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Formula $r2, $r3;
        kodkod.ast.IfIntExpression r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r3 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $z0 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.Formula)>($r3);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r2, $z0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("=>");

        $i0 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i1;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r5 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $z1 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.IntExpression)>($r5);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r4, $z1);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("else");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r6 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r7 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $z2 = specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.IntExpression)>($r7);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r6, $z2);

        $i2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i3 = $i2 - 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i3;

        return;
    }

    public void visit(kodkod.ast.Comprehension)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Formula $r3;
        kodkod.ast.Decls $r2;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.Comprehension;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("{");

        $r2 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        virtualinvoke $r2.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("|");

        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("}");

        return;
    }

    public void visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r3;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Decls $r2;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.SumExpression;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void keyword(java.lang.Object)>("sum");

        $r2 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        virtualinvoke $r2.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("|");

        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Formula $r4;
        kodkod.ast.Decls $r3;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.operator.Quantifier $r2;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.operator.Quantifier quantifier()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void keyword(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        virtualinvoke $r3.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("|");

        $i0 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i1;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r4 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $i2 = r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i3 = $i2 - 1;

        r0.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i3;

        return;
    }

    public void visit(kodkod.ast.NaryExpression)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        kodkod.ast.Expression $r3, $r4, $r5, $r6;
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.NaryExpression r0;
        int $i0, i1;
        boolean $z0, $z1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.NaryExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(0);

        $r4 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(0);

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r1, $r4);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        i1 = 1;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryExpression: int size()>();

        goto label2;

     label1:
        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(i1);

        $r6 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(i1);

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r1, $r6);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return;
    }

    public void visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r0;
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r3, $r4, $r5, $r6;
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        int $i0, i1;
        boolean $z0, $z1;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.NaryIntExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(0);

        $r4 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(0);

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r1, $r4);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r3, $z0);

        i1 = 1;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: int size()>();

        goto label2;

     label1:
        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(i1);

        $r6 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(i1);

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r1, $r6);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r5, $z1);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return;
    }

    public void visit(kodkod.ast.NaryFormula)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r2;
        kodkod.ast.operator.FormulaOperator $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        kodkod.ast.NaryFormula r0;
        boolean $z0, $z1;
        kodkod.ast.Formula $r3, $r4, $r5, $r6;

        r2 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r0 := @parameter0: kodkod.ast.NaryFormula;

        $r1 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r3 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(0);

        $z0 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r1, $r3);

        if $z0 == 0 goto label1;

        $i7 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i8 = $i7 + 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i8;

     label1:
        $r4 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(0);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r4, $z0);

        if $z0 == 0 goto label2;

        $i5 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i6 = $i5 - 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i6;

     label2:
        i9 = 1;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryFormula: int size()>();

        goto label6;

     label3:
        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>($r1);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        $r5 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i9);

        $z1 = specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: boolean parenthesize(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r1, $r5);

        if $z1 == 0 goto label4;

        $i3 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i4 = $i3 + 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i4;

     label4:
        $r6 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i9);

        specialinvoke r2.<kodkod.util.nodes.PrettyPrinter$Formatter: void visitChild(kodkod.ast.Node,boolean)>($r6, $z1);

        if $z1 == 0 goto label5;

        $i1 = r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent>;

        $i2 = $i1 - 1;

        r2.<kodkod.util.nodes.PrettyPrinter$Formatter: int indent> = $i2;

     label5:
        i9 = i9 + 1;

     label6:
        if i9 < $i0 goto label3;

        return;
    }

    public void visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.IntExpression $r5, $r7;
        java.util.Iterator $r3;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;
        kodkod.ast.Expression $r2;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("project");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r2 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("<");

        $r3 = virtualinvoke r1.<kodkod.ast.ProjectExpression: java.util.Iterator columns()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.ast.IntExpression) $r4;

        virtualinvoke $r5.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        goto label2;

     label1:
        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.ast.IntExpression) $r6;

        virtualinvoke $r7.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(">");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        return;
    }

    public void visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.IntExpression $r2;
        kodkod.ast.IntToExprCast r1;
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("Int");

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r2 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        virtualinvoke $r2.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        return;
    }

    public void visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.operator.ExprCastOperator $r2, $r8;
        kodkod.util.nodes.PrettyPrinter$Formatter r3;
        kodkod.ast.Expression $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        int[] $r0;
        kodkod.ast.ExprToIntCast r1;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r9;
        java.lang.String $r10;

        r3 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r0 = staticinvoke <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator()>();

        $r2 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $i0 = virtualinvoke $r2.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label1;
            default: goto label3;
        };

     label1:
        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("int");

        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r4 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        virtualinvoke $r4.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r3);

        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        goto label4;

     label2:
        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("#");

        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("(");

        $r5 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        virtualinvoke $r5.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r3);

        specialinvoke r3.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>(")");

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown operator: ");

        $r8 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return;
    }

    public void visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.operator.Multiplicity $r13;
        kodkod.util.nodes.PrettyPrinter$Formatter r4;
        java.lang.AssertionError $r15;
        int[] $r0;
        int $i0, $i1;
        kodkod.ast.RelationPredicate$Name $r2;
        kodkod.ast.RelationPredicate$Function r10;
        kodkod.ast.Expression $r12, $r14;
        kodkod.ast.RelationPredicate$TotalOrdering r3;
        kodkod.ast.RelationPredicate r1;
        kodkod.ast.Relation $r5, $r6, $r7, $r8, $r9, $r11;

        r4 := @this: kodkod.util.nodes.PrettyPrinter$Formatter;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r0 = staticinvoke <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()>();

        $r2 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $i0 = virtualinvoke $r2.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("acyclic");

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r9 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        virtualinvoke $r9.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        goto label5;

     label2:
        r10 = (kodkod.ast.RelationPredicate$Function) r1;

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("function");

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r11 = virtualinvoke r10.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        virtualinvoke $r11.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void colon()>();

        $r12 = virtualinvoke r10.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        virtualinvoke $r12.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void infix(java.lang.Object)>("->");

        $r13 = virtualinvoke r10.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult()>();

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void keyword(java.lang.Object)>($r13);

        $r14 = virtualinvoke r10.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        virtualinvoke $r14.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        goto label5;

     label3:
        r3 = (kodkod.ast.RelationPredicate$TotalOrdering) r1;

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("ord");

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("[");

        $r5 = virtualinvoke r3.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation relation()>();

        virtualinvoke $r5.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        $r6 = virtualinvoke r3.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        virtualinvoke $r6.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        $r7 = virtualinvoke r3.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        virtualinvoke $r7.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void comma()>();

        $r8 = virtualinvoke r3.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        virtualinvoke $r8.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r4);

        specialinvoke r4.<kodkod.util.nodes.PrettyPrinter$Formatter: void append(java.lang.Object)>("]");

        goto label5;

     label4:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("unreachable");

        throw $r15;

     label5:
        return;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()
    {
        java.lang.NoSuchFieldError $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        int[] $r0, r2;
        kodkod.ast.operator.IntOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        kodkod.ast.operator.IntOperator[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        $r0 = <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i1] = 13;

     label03:
        goto label05;

     label04:
        $r32 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i2] = 5;

     label06:
        goto label08;

     label07:
        $r31 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator DIVIDE>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r30 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MINUS>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i4] = 2;

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MODULO>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i5] = 4;

     label15:
        goto label17;

     label16:
        $r28 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i6] = 1;

     label18:
        goto label20;

     label19:
        $r27 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i7] = 11;

     label21:
        goto label23;

     label22:
        $r26 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i8] = 12;

     label24:
        goto label26;

     label25:
        $r25 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i9] = 6;

     label27:
        goto label29;

     label28:
        $r24 := @caughtexception;

     label29:
        $r12 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $i10 = virtualinvoke $r12.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i10] = 0;

     label30:
        goto label32;

     label31:
        $r23 := @caughtexception;

     label32:
        $r13 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        $i11 = virtualinvoke $r13.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i11] = 14;

     label33:
        goto label35;

     label34:
        $r22 := @caughtexception;

     label35:
        $r14 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHA>;

        $i12 = virtualinvoke $r14.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i12] = 10;

     label36:
        goto label38;

     label37:
        $r21 := @caughtexception;

     label38:
        $r15 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHL>;

        $i13 = virtualinvoke $r15.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i13] = 8;

     label39:
        goto label41;

     label40:
        $r20 := @caughtexception;

     label41:
        $r16 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHR>;

        $i14 = virtualinvoke $r16.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i14] = 9;

     label42:
        goto label44;

     label43:
        $r19 := @caughtexception;

     label44:
        $r17 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator XOR>;

        $i15 = virtualinvoke $r17.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i15] = 7;

     label45:
        goto label47;

     label46:
        $r18 := @caughtexception;

     label47:
        <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
        catch java.lang.NoSuchFieldError from label29 to label30 with label31;
        catch java.lang.NoSuchFieldError from label32 to label33 with label34;
        catch java.lang.NoSuchFieldError from label35 to label36 with label37;
        catch java.lang.NoSuchFieldError from label38 to label39 with label40;
        catch java.lang.NoSuchFieldError from label41 to label42 with label43;
        catch java.lang.NoSuchFieldError from label44 to label45 with label46;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator()
    {
        kodkod.ast.operator.ExprCastOperator $r3, $r4;
        java.lang.NoSuchFieldError $r5, $r6;
        kodkod.ast.operator.ExprCastOperator[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2;

        $r0 = <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator CARDINALITY>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        r2[$i1] = 0;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator SUM>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        r2[$i2] = 1;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()
    {
        java.lang.NoSuchFieldError $r6, $r7, $r8;
        kodkod.ast.RelationPredicate$Name[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.RelationPredicate$Name $r3, $r4, $r5;

        $r0 = <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name ACYCLIC>;

        $i1 = virtualinvoke $r3.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        $i2 = virtualinvoke $r4.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i2] = 0;

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        $i3 = virtualinvoke $r5.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i3] = 2;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        <kodkod.util.nodes.PrettyPrinter$Formatter: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
    }

    static void access$3(kodkod.util.nodes.PrettyPrinter$Formatter)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter r0;

        r0 := @parameter0: kodkod.util.nodes.PrettyPrinter$Formatter;

        specialinvoke r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void newline()>();

        return;
    }
}
