public final class org.apache.lucene.index.IndexFileNames extends java.lang.Object
{
    public static final java.lang.String SEGMENTS;
    public static final java.lang.String GEN_EXTENSION;
    public static final java.lang.String SEGMENTS_GEN;
    public static final java.lang.String COMPOUND_FILE_EXTENSION;
    public static final java.lang.String COMPOUND_FILE_ENTRIES_EXTENSION;
    public static final java.lang.String[] INDEX_EXTENSIONS;
    static final java.util.regex.Pattern CODEC_FILE_PATTERN;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.index.IndexFileNames r0;

        r0 := @this: org.apache.lucene.index.IndexFileNames;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String fileNameFromGeneration(java.lang.String, java.lang.String, long)
    {
        long l0;
        java.lang.AssertionError $r11;
        byte $b1, $b2, $b8;
        int $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.String r1, r2, $r5, $r7, $r10;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r12;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        $r10 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r1, "", r2);

        return $r10;

     label2:
        $z0 = <org.apache.lucene.index.IndexFileNames: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $b8 = l0 cmp 0L;

        $i9 = (int) $b8;

        if $i9 > 0 goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $r12 = new java.lang.StringBuilder;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i3 + 6;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l0, 36);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i7 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i7 <= 0 goto label4;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label4:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String segmentFileName(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.AssertionError $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0, r2, r3, $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r5, $r6;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        $i9 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i9 <= 0 goto label5;

     label1:
        $z0 = <org.apache.lucene.index.IndexFileNames: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z1 == 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r1 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 + 2;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i7 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i7 <= 0 goto label3;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label3:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i8 <= 0 goto label4;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label5:
        return r2;
    }

    public static boolean matchesExtension(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r0, r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

        return $z0;
    }

    private static int indexOfSegmentName(java.lang.String)
    {
        int $i0, i1, $i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(95, 1);

        i1 = $i0;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

     label1:
        return i1;
    }

    public static java.lang.String stripSegmentName(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.lucene.index.IndexFileNames: int indexOfSegmentName(java.lang.String)>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return r0;
    }

    public static java.lang.String parseSegmentName(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.lucene.index.IndexFileNames: int indexOfSegmentName(java.lang.String)>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return r0;
    }

    public static java.lang.String stripExtension(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String[] $r1;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        <org.apache.lucene.index.IndexFileNames: java.lang.String COMPOUND_FILE_ENTRIES_EXTENSION> = "cfe";

        <org.apache.lucene.index.IndexFileNames: java.lang.String COMPOUND_FILE_EXTENSION> = "cfs";

        <org.apache.lucene.index.IndexFileNames: java.lang.String SEGMENTS_GEN> = "segments.gen";

        <org.apache.lucene.index.IndexFileNames: java.lang.String GEN_EXTENSION> = "gen";

        <org.apache.lucene.index.IndexFileNames: java.lang.String SEGMENTS> = "segments";

        $r0 = class "Lorg/apache/lucene/index/IndexFileNames;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.IndexFileNames: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "cfs";

        $r1[1] = "cfe";

        $r1[2] = "gen";

        <org.apache.lucene.index.IndexFileNames: java.lang.String[] INDEX_EXTENSIONS> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("_[a-z0-9]+(_.*)?\\..*");

        <org.apache.lucene.index.IndexFileNames: java.util.regex.Pattern CODEC_FILE_PATTERN> = $r2;

        return;
    }
}
