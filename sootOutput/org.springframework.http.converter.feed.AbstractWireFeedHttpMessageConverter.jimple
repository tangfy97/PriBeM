public abstract class org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter
{
    public static final java.nio.charset.Charset DEFAULT_CHARSET;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET> = $r0;

        return;
    }

    protected void <init>(org.springframework.http.MediaType)
    {
        org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter r0;
        org.springframework.http.MediaType r1;

        r0 := @this: org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter;

        r1 := @parameter0: org.springframework.http.MediaType;

        specialinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType)>(r1);

        return;
    }

    protected com.sun.syndication.feed.WireFeed readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        java.lang.Throwable $r5;
        org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter r11;
        com.sun.syndication.io.WireFeedInput $r17;
        com.sun.syndication.feed.WireFeed $r16;
        com.sun.syndication.io.FeedException $r21;
        java.nio.charset.Charset $r4, r13;
        java.lang.String $r8, $r10;
        org.springframework.http.HttpHeaders $r2;
        org.springframework.http.MediaType $r3;
        java.io.InputStreamReader $r18;
        org.springframework.http.converter.HttpMessageNotReadableException $r20;
        org.springframework.http.HttpInputMessage r1;
        java.lang.StringBuilder $r9, $r19;
        java.lang.Class r12;
        java.io.InputStream $r15;

        r11 := @this: org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter;

        r12 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.springframework.http.HttpInputMessage;

        $r17 = new com.sun.syndication.io.WireFeedInput;

        specialinvoke $r17.<com.sun.syndication.io.WireFeedInput: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r3 = virtualinvoke $r2.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r4 == null goto label1;

        r13 = virtualinvoke $r3.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        goto label2;

     label1:
        r13 = <org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

     label2:
        $r18 = new java.io.InputStreamReader;

        $r15 = interfaceinvoke r1.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        specialinvoke $r18.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r15, r13);

        $r16 = virtualinvoke $r17.<com.sun.syndication.io.WireFeedInput: com.sun.syndication.feed.WireFeed build(java.io.Reader)>($r18);

     label3:
        return $r16;

     label4:
        $r5 := @caughtexception;

        $r20 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not read WireFeed: ");

        $r21 = (com.sun.syndication.io.FeedException) $r5;

        $r8 = virtualinvoke $r21.<com.sun.syndication.io.FeedException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r20;

        catch com.sun.syndication.io.FeedException from label2 to label3 with label4;
    }

    protected void writeInternal(com.sun.syndication.feed.WireFeed, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.lang.Throwable $r14;
        org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter r20;
        com.sun.syndication.feed.WireFeed r0;
        org.springframework.http.converter.HttpMessageNotWritableException $r26;
        com.sun.syndication.io.FeedException $r27;
        java.nio.charset.Charset $r8, $r13;
        java.io.OutputStreamWriter $r24;
        java.lang.String $r1, $r10, $r11, $r17, $r19, r21;
        boolean $z0;
        java.io.OutputStream $r7;
        org.springframework.http.HttpHeaders $r3, $r12;
        org.springframework.http.MediaType $r4, $r22;
        com.sun.syndication.io.WireFeedOutput $r23;
        java.lang.StringBuilder $r18, $r25;
        org.springframework.http.HttpOutputMessage r2;

        r20 := @this: org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter;

        r0 := @parameter0: com.sun.syndication.feed.WireFeed;

        r2 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r1 = virtualinvoke r0.<com.sun.syndication.feed.WireFeed: java.lang.String getEncoding()>();

        r21 = $r1;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r13 = <org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

        r21 = virtualinvoke $r13.<java.nio.charset.Charset: java.lang.String name()>();

     label1:
        $r3 = interfaceinvoke r2.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r4 = virtualinvoke $r3.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        if $r4 == null goto label2;

        $r8 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r21);

        $r22 = new org.springframework.http.MediaType;

        $r10 = virtualinvoke $r4.<org.springframework.http.MediaType: java.lang.String getType()>();

        $r11 = virtualinvoke $r4.<org.springframework.http.MediaType: java.lang.String getSubtype()>();

        specialinvoke $r22.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>($r10, $r11, $r8);

        $r12 = interfaceinvoke r2.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r12.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>($r22);

     label2:
        $r23 = new com.sun.syndication.io.WireFeedOutput;

        specialinvoke $r23.<com.sun.syndication.io.WireFeedOutput: void <init>()>();

     label3:
        $r24 = new java.io.OutputStreamWriter;

        $r7 = interfaceinvoke r2.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        specialinvoke $r24.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, r21);

        virtualinvoke $r23.<com.sun.syndication.io.WireFeedOutput: void output(com.sun.syndication.feed.WireFeed,java.io.Writer)>(r0, $r24);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r26 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not write WiredFeed: ");

        $r27 = (com.sun.syndication.io.FeedException) $r14;

        $r17 = virtualinvoke $r27.<com.sun.syndication.io.FeedException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r14);

        throw $r26;

     label6:
        return;

        catch com.sun.syndication.io.FeedException from label3 to label4 with label5;
    }

    protected volatile java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.HttpInputMessage r2;
        org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter r0;
        java.lang.Class r1, $r3;
        com.sun.syndication.feed.WireFeed $r4;

        r0 := @this: org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: com.sun.syndication.feed.WireFeed readInternal(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    protected volatile void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter r0;
        java.lang.Object r1;
        com.sun.syndication.feed.WireFeed $r3;
        org.springframework.http.HttpOutputMessage r2;

        r0 := @this: org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r3 = (com.sun.syndication.feed.WireFeed) r1;

        virtualinvoke r0.<org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: void writeInternal(com.sun.syndication.feed.WireFeed,org.springframework.http.HttpOutputMessage)>($r3, r2);

        return;
    }
}
