public final class kodkod.ast.BinaryFormula extends kodkod.ast.Formula
{
    private final kodkod.ast.Formula left;
    private final kodkod.ast.Formula right;
    private final kodkod.ast.operator.FormulaOperator op;

    void <init>(kodkod.ast.Formula, kodkod.ast.operator.FormulaOperator, kodkod.ast.Formula)
    {
        kodkod.ast.BinaryFormula r0;
        kodkod.ast.Formula r1, r2;
        kodkod.ast.operator.FormulaOperator r3;

        r0 := @this: kodkod.ast.BinaryFormula;

        r1 := @parameter0: kodkod.ast.Formula;

        r3 := @parameter1: kodkod.ast.operator.FormulaOperator;

        r2 := @parameter2: kodkod.ast.Formula;

        specialinvoke r0.<kodkod.ast.Formula: void <init>()>();

        r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left> = r1;

        r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right> = r2;

        r0.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op> = r3;

        return;
    }

    public kodkod.ast.Formula left()
    {
        kodkod.ast.BinaryFormula r0;
        kodkod.ast.Formula $r1;

        r0 := @this: kodkod.ast.BinaryFormula;

        $r1 = r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left>;

        return $r1;
    }

    public kodkod.ast.Formula right()
    {
        kodkod.ast.BinaryFormula r0;
        kodkod.ast.Formula $r1;

        r0 := @this: kodkod.ast.BinaryFormula;

        $r1 = r0.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right>;

        return $r1;
    }

    public kodkod.ast.operator.FormulaOperator op()
    {
        kodkod.ast.BinaryFormula r0;
        kodkod.ast.operator.FormulaOperator $r1;

        r0 := @this: kodkod.ast.BinaryFormula;

        $r1 = r0.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        kodkod.ast.BinaryFormula r1;
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.BinaryFormula;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.BinaryFormula;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.BinaryFormula)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.Formula $r2, $r8;
        kodkod.ast.operator.FormulaOperator $r5;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r11;

        r1 := @this: kodkod.ast.BinaryFormula;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
