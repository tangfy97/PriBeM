public class org.apache.cxf.feature.transform.XSLTOutInterceptor extends org.apache.cxf.feature.transform.AbstractXSLTInterceptor
{
    private static final java.util.logging.Logger LOG;

    public void <init>(java.lang.String)
    {
        org.apache.cxf.feature.transform.XSLTOutInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.String)>("pre-stream", class "Lorg/apache/cxf/interceptor/StaxOutInterceptor;", null, r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class, java.lang.Class, java.lang.String)
    {
        org.apache.cxf.feature.transform.XSLTOutInterceptor r0;
        java.lang.Class r2, r3;
        java.lang.String r1, r4;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        java.io.OutputStream r5;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.feature.transform.XSLTOutInterceptor r0;
        java.io.Writer r7;
        java.lang.Object $r2, $r4, $r6;
        javax.xml.stream.XMLStreamWriter r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $z0 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor: boolean checkContextProperty(org.apache.cxf.message.Message)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamWriter;");

        r3 = (javax.xml.stream.XMLStreamWriter) $r2;

        if r3 == null goto label2;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor: void transformXWriter(org.apache.cxf.message.Message,javax.xml.stream.XMLStreamWriter)>(r1, r3);

        goto label4;

     label2:
        $r4 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        r5 = (java.io.OutputStream) $r4;

        if r5 == null goto label3;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor: void transformOS(org.apache.cxf.message.Message,java.io.OutputStream)>(r1, r5);

        goto label4;

     label3:
        $r6 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/Writer;");

        r7 = (java.io.Writer) $r6;

        if r7 == null goto label4;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor: void transformWriter(org.apache.cxf.message.Message,java.io.Writer)>(r1, r7);

     label4:
        return;
    }

    protected void transformXWriter(org.apache.cxf.message.Message, javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.transform.Templates $r4;
        org.apache.cxf.io.CachedWriter $r0;
        org.apache.cxf.message.Message r6;
        org.apache.cxf.feature.transform.XSLTOutInterceptor r3;
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTStreamWriter $r2;
        java.lang.Boolean $r7;
        javax.xml.stream.XMLStreamWriter $r1, r5;

        r3 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r6 := @parameter0: org.apache.cxf.message.Message;

        r5 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r0 = new org.apache.cxf.io.CachedWriter;

        specialinvoke $r0.<org.apache.cxf.io.CachedWriter: void <init>()>();

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r0);

        $r2 = new org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTStreamWriter;

        $r4 = virtualinvoke r3.<org.apache.cxf.feature.transform.XSLTOutInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        specialinvoke $r2.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTStreamWriter: void <init>(javax.xml.transform.Templates,org.apache.cxf.io.CachedWriter,javax.xml.stream.XMLStreamWriter,javax.xml.stream.XMLStreamWriter)>($r4, $r0, $r1, r5);

        interfaceinvoke r6.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/stream/XMLStreamWriter;", $r2);

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r6.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("disable.outputstream.optimization", $r7);

        return;
    }

    protected void transformOS(org.apache.cxf.message.Message, java.io.OutputStream)
    {
        java.io.OutputStream r4;
        org.apache.cxf.feature.transform.XSLTOutInterceptor r2;
        javax.xml.transform.Templates $r3;
        org.apache.cxf.message.Message r5;
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback $r1;
        org.apache.cxf.io.CachedOutputStream $r0;

        r2 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r5 := @parameter0: org.apache.cxf.message.Message;

        r4 := @parameter1: java.io.OutputStream;

        $r0 = new org.apache.cxf.io.CachedOutputStream;

        specialinvoke $r0.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

        $r1 = new org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback;

        $r3 = virtualinvoke r2.<org.apache.cxf.feature.transform.XSLTOutInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        specialinvoke $r1.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: void <init>(javax.xml.transform.Templates,java.io.OutputStream)>($r3, r4);

        virtualinvoke $r0.<org.apache.cxf.io.CachedOutputStream: void registerCallback(org.apache.cxf.io.CachedOutputStreamCallback)>($r1);

        interfaceinvoke r5.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/OutputStream;", $r0);

        return;
    }

    protected void transformWriter(org.apache.cxf.message.Message, java.io.Writer)
    {
        org.apache.cxf.feature.transform.XSLTOutInterceptor r1;
        javax.xml.transform.Templates $r2;
        org.apache.cxf.message.Message r4;
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedWriter $r0;
        java.io.Writer r3;

        r1 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor;

        r4 := @parameter0: org.apache.cxf.message.Message;

        r3 := @parameter1: java.io.Writer;

        $r0 = new org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedWriter;

        $r2 = virtualinvoke r1.<org.apache.cxf.feature.transform.XSLTOutInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        specialinvoke $r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedWriter: void <init>(javax.xml.transform.Templates,java.io.Writer)>($r2, r3);

        interfaceinvoke r4.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/Writer;", $r0);

        return;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.apache.cxf.feature.transform.XSLTOutInterceptor: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/feature/transform/XSLTOutInterceptor;");

        <org.apache.cxf.feature.transform.XSLTOutInterceptor: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
