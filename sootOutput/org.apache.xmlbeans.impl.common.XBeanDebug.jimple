public class org.apache.xmlbeans.impl.common.XBeanDebug extends java.lang.Object
{
    public static final int TRACE_SCHEMA_LOADING;
    public static final java.lang.String traceProp;
    public static final java.lang.String defaultProp;
    private static int _enabled;
    private static int _indent;
    private static java.lang.String _indentspace;
    static java.io.PrintStream _err;
    static java.lang.Class class$org$apache$xmlbeans$impl$common$XBeanDebug;

    public void <init>()
    {
        org.apache.xmlbeans.impl.common.XBeanDebug r0;

        r0 := @this: org.apache.xmlbeans.impl.common.XBeanDebug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int initializeBitsFromProperty()
    {
        int $i0;
        java.lang.String $r0;
        byte b1;

        b1 = 0;

        $r0 = staticinvoke <org.apache.xmlbeans.SystemProperties: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.debug", "");

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("TRACE_SCHEMA_LOADING");

        if $i0 < 0 goto label1;

        b1 = 1;

     label1:
        return b1;
    }

    public static void enable(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled>;

        $i2 = $i1 | i0;

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled> = $i2;

        return;
    }

    public static void disable(int)
    {
        int i0, $i1, $i2, $i3, $i5;

        i0 := @parameter0: int;

        $i2 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled>;

        $i5 = (int) -1;

        $i1 = i0 ^ $i5;

        $i3 = $i2 & $i1;

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled> = $i3;

        return;
    }

    public static void trace(int, java.lang.String, int)
    {
        java.lang.Throwable $r5;
        java.lang.StringBuffer $r8, $r11, $r12, $r13, $r14, $r15;
        java.lang.Thread $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r2, $r3, r4, $r7, $r10, $r16;
        boolean $z0;
        java.io.PrintStream $r17;
        java.lang.Class $r0, r1, $r6;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: boolean test(int)>(i0);

        if $z0 == 0 goto label12;

        $r0 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.Class class$org$apache$xmlbeans$impl$common$XBeanDebug>;

        if $r0 != null goto label01;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.common.XBeanDebug");

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.Class class$org$apache$xmlbeans$impl$common$XBeanDebug> = $r6;

        goto label02;

     label01:
        $r6 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.Class class$org$apache$xmlbeans$impl$common$XBeanDebug>;

     label02:
        r1 = $r6;

        entermonitor $r6;

     label03:
        if i1 >= 0 goto label04;

        $i8 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent>;

        $i9 = $i8 + i1;

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent> = $i9;

     label04:
        $i2 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent>;

        if $i2 >= 0 goto label05;

        $r7 = "";

        goto label07;

     label05:
        $i3 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent>;

        $r2 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String _indentspace>;

        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 <= $i4 goto label06;

        $r7 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String _indentspace>;

        goto label07;

     label06:
        $r3 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String _indentspace>;

        $i5 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent>;

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label07:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void print(java.lang.String)>($r16);

        if i1 <= 0 goto label08;

        $i6 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent>;

        $i7 = $i6 + i1;

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent> = $i7;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r5 := @caughtexception;

        exitmonitor r1;

     label11:
        throw $r5;

     label12:
        return;

        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static boolean test(int)
    {
        int i0, $i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String log(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String log(java.lang.String,java.lang.Throwable)>(r0, null);

        return r0;
    }

    public static java.lang.String logStackTrace(java.lang.String)
    {
        java.lang.Throwable $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String log(java.lang.String,java.lang.Throwable)>(r0, $r1);

        return r0;
    }

    private static synchronized java.lang.String log(java.lang.String, java.lang.Throwable)
    {
        java.io.PrintStream $r0, $r3, $r5, $r8, $r13, $r14;
        java.lang.Throwable r2;
        java.io.FileOutputStream $r6;
        java.io.IOException $r12;
        java.io.File $r4;
        java.lang.StringBuffer $r7, $r9, $r10;
        java.lang.String r1, $r11;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r0 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.io.PrintStream _err>;

        if $r0 != null goto label4;

     label1:
        $r4 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("xmlbeandebug", ".log");

        $r5 = new java.io.PrintStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        specialinvoke $r5.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.io.PrintStream _err> = $r5;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Diagnostic XML Bean debug log file created: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.io.PrintStream _err> = $r13;

     label4:
        $r14 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.io.PrintStream _err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(r1);

        if r2 == null goto label5;

        $r3 = <org.apache.xmlbeans.impl.common.XBeanDebug: java.io.PrintStream _err>;

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r3);

     label5:
        return r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.Throwable logException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String log(java.lang.String,java.lang.Throwable)>($r1, r0);

        return r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        int $i0;

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String defaultProp> = "";

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String traceProp> = "org.apache.xmlbeans.impl.debug";

        <org.apache.xmlbeans.impl.common.XBeanDebug: int TRACE_SCHEMA_LOADING> = 1;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: int initializeBitsFromProperty()>();

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _enabled> = $i0;

        <org.apache.xmlbeans.impl.common.XBeanDebug: int _indent> = 0;

        <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String _indentspace> = "                                                                                ";

        return;
    }
}
