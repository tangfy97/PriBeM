public abstract class com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture extends com.mycila.inject.internal.guava.util.concurrent.ForwardingListenableFuture implements com.mycila.inject.internal.guava.util.concurrent.CheckedFuture
{

    public void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingListenableFuture: void <init>()>();

        return;
    }

    public java.lang.Object checkedGet() throws java.lang.Exception
    {
        com.mycila.inject.internal.guava.util.concurrent.CheckedFuture $r1;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture: com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.CheckedFuture: java.lang.Object checkedGet()>();

        return $r2;
    }

    public java.lang.Object checkedGet(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.lang.Exception
    {
        java.util.concurrent.TimeUnit r2;
        com.mycila.inject.internal.guava.util.concurrent.CheckedFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;
        long l0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        l0 := @parameter0: long;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture: com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.CheckedFuture: java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit)>(l0, r2);

        return $r3;
    }

    protected abstract com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate();

    protected volatile com.mycila.inject.internal.guava.util.concurrent.ListenableFuture delegate()
    {
        com.mycila.inject.internal.guava.util.concurrent.CheckedFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture: com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate()>();

        return $r1;
    }

    protected volatile java.util.concurrent.Future delegate()
    {
        com.mycila.inject.internal.guava.util.concurrent.CheckedFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture: com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.util.concurrent.CheckedFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingCheckedFuture: com.mycila.inject.internal.guava.util.concurrent.CheckedFuture delegate()>();

        return $r1;
    }
}
