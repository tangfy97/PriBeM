public class org.apache.lucene.analysis.hunspell.HunspellStemmer extends java.lang.Object
{
    private static final int RECURSION_CAP;
    private final org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary;
    private final java.lang.StringBuilder segment;
    private org.apache.lucene.analysis.util.CharacterUtils charUtils;

    public void <init>(org.apache.lucene.analysis.hunspell.HunspellDictionary)
    {
        org.apache.lucene.analysis.hunspell.HunspellStemmer r0;
        org.apache.lucene.analysis.util.CharacterUtils $r3;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r4;
        java.lang.StringBuilder $r1;
        org.apache.lucene.util.Version $r2;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r4 := @parameter0: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.lang.StringBuilder segment> = $r1;

        $r2 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_40>;

        $r3 = staticinvoke <org.apache.lucene.analysis.util.CharacterUtils: org.apache.lucene.analysis.util.CharacterUtils getInstance(org.apache.lucene.util.Version)>($r2);

        r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.util.CharacterUtils charUtils> = $r3;

        r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary> = r4;

        return;
    }

    public java.util.List stem(java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellStemmer r0;
        java.util.List $r3;
        int $i0;
        char[] $r2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List stem(char[],int)>($r2, $i0);

        return $r3;
    }

    public java.util.List stem(char[], int)
    {
        org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem $r6;
        java.util.ArrayList $r0;
        org.apache.lucene.analysis.hunspell.HunspellStemmer r1;
        org.apache.lucene.analysis.hunspell.HunspellDictionary $r3;
        java.util.List $r4, $r5;
        int i0;
        char[] r2;

        r1 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.util.List lookupWord(char[],int,int)>(r2, 0, i0);

        if $r4 == null goto label1;

        $r6 = new org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem;

        specialinvoke $r6.<org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: void <init>(char[],int)>(r2, i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        $r5 = specialinvoke r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List stem(char[],int,char[],int)>(r2, i0, null, 0);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r0;
    }

    public java.util.List uniqueStems(char[], int)
    {
        java.util.ArrayList $r0;
        org.apache.lucene.analysis.hunspell.HunspellDictionary $r3, $r5, $r7;
        int i0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r10;
        org.apache.lucene.util.Version $r4;
        org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem r12, $r15;
        org.apache.lucene.analysis.hunspell.HunspellStemmer r2;
        java.util.List $r8, $r9;
        org.apache.lucene.analysis.util.CharArraySet $r1;
        char[] r6, $r13, $r14;
        java.lang.Object $r11;

        r2 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r6 := @parameter0: char[];

        i0 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new org.apache.lucene.analysis.util.CharArraySet;

        $r3 = r2.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.util.Version getVersion()>();

        $r5 = r2.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean isIgnoreCase()>();

        specialinvoke $r1.<org.apache.lucene.analysis.util.CharArraySet: void <init>(org.apache.lucene.util.Version,int,boolean)>($r4, 8, $z0);

        $r7 = r2.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.util.List lookupWord(char[],int,int)>(r6, 0, i0);

        if $r8 == null goto label1;

        $r15 = new org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem;

        specialinvoke $r15.<org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: void <init>(char[],int)>(r6, i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

        virtualinvoke $r1.<org.apache.lucene.analysis.util.CharArraySet: boolean add(char[])>(r6);

     label1:
        $r9 = specialinvoke r2.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List stem(char[],int,char[],int)>(r6, i0, null, 0);

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem) $r11;

        $r13 = staticinvoke <org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: char[] access$000(org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem)>(r12);

        $z1 = virtualinvoke $r1.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(java.lang.Object)>($r13);

        if $z1 != 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r12);

        $r14 = staticinvoke <org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: char[] access$000(org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem)>(r12);

        virtualinvoke $r1.<org.apache.lucene.analysis.util.CharArraySet: boolean add(char[])>($r14);

     label3:
        goto label2;

     label4:
        return $r0;
    }

    private java.util.List stem(char[], int, char[], int)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary $r3, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r4, $r15, $r20, $r30;
        org.apache.lucene.analysis.hunspell.HunspellAffix r33, r35;
        java.lang.StringBuilder $r11, $r12, $r25, $r27, $r37, $r38;
        java.util.ArrayList $r36;
        int i0, $i2, $i3, i4, $i5, $i7, $i8, i9, i10, i11, i12, $i14;
        java.lang.String $r8, $r10, $r13, $r23, $r26, $r28;
        java.util.Iterator $r5, $r16, $r21, $r31;
        char $c1, $c6;
        org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem r18, r34;
        org.apache.lucene.analysis.hunspell.HunspellStemmer r1;
        char[] r2, r7, $r14, $r29;
        java.lang.Object $r6, $r17, $r22, $r32;

        r1 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        r7 := @parameter2: char[];

        i4 := @parameter3: int;

        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>()>();

        i9 = 0;

     label01:
        if i9 >= i0 goto label08;

        $r19 = r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $i5 = i0 - i9;

        $r20 = virtualinvoke $r19.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.util.List lookupSuffix(char[],int,int)>(r2, i9, $i5);

        if $r20 != null goto label02;

        goto label07;

     label02:
        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.lucene.analysis.hunspell.HunspellAffix) $r22;

        $c6 = virtualinvoke r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: char getFlag()>();

        $z4 = specialinvoke r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: boolean hasCrossCheckedFlag(char,char[])>($c6, r7);

        if $z4 == 0 goto label06;

        $r23 = virtualinvoke r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getAppend()>();

        $i7 = virtualinvoke $r23.<java.lang.String: int length()>();

        i10 = i0 - $i7;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r2, 0, i10);

        $r26 = virtualinvoke r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getStrip()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = virtualinvoke $r28.<java.lang.String: char[] toCharArray()>();

        $i8 = virtualinvoke $r28.<java.lang.String: int length()>();

        $r30 = virtualinvoke r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List applyAffix(char[],int,org.apache.lucene.analysis.hunspell.HunspellAffix,int)>($r29, $i8, r33, i4);

        $r31 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem) $r32;

        virtualinvoke r34.<org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: void addSuffix(org.apache.lucene.analysis.hunspell.HunspellAffix)>(r33);

        goto label04;

     label05:
        interfaceinvoke $r36.<java.util.List: boolean addAll(java.util.Collection)>($r30);

     label06:
        goto label03;

     label07:
        i9 = i9 + 1;

        goto label01;

     label08:
        i11 = i0 - 1;

     label09:
        if i11 < 0 goto label16;

        $r3 = r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.util.List lookupPrefix(char[],int,int)>(r2, 0, i11);

        if $r4 != null goto label10;

        goto label15;

     label10:
        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.lucene.analysis.hunspell.HunspellAffix) $r6;

        $c1 = virtualinvoke r35.<org.apache.lucene.analysis.hunspell.HunspellAffix: char getFlag()>();

        $z1 = specialinvoke r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: boolean hasCrossCheckedFlag(char,char[])>($c1, r7);

        if $z1 == 0 goto label14;

        $r8 = virtualinvoke r35.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getAppend()>();

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        i12 = i0 - $i2;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r35.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getStrip()>();

        $r11 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r2, $i2, i12);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: char[] toCharArray()>();

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        $r15 = virtualinvoke r1.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List applyAffix(char[],int,org.apache.lucene.analysis.hunspell.HunspellAffix,int)>($r14, $i3, r35, i4);

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem) $r17;

        virtualinvoke r18.<org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: void addPrefix(org.apache.lucene.analysis.hunspell.HunspellAffix)>(r35);

        goto label12;

     label13:
        interfaceinvoke $r36.<java.util.List: boolean addAll(java.util.Collection)>($r15);

     label14:
        goto label11;

     label15:
        $i14 = (int) -1;

        i11 = i11 + $i14;

        goto label09;

     label16:
        return $r36;
    }

    public java.util.List applyAffix(char[], int, org.apache.lucene.analysis.hunspell.HunspellAffix, int)
    {
        java.util.ArrayList $r7;
        org.apache.lucene.analysis.hunspell.HunspellDictionary $r1, $r8;
        org.apache.lucene.analysis.hunspell.HunspellWord r14;
        int i0, $i2, i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r12;
        char $c1;
        org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem $r15;
        org.apache.lucene.analysis.hunspell.HunspellStemmer r0;
        org.apache.lucene.analysis.util.CharacterUtils $r17;
        java.util.List $r9, $r11, $r16;
        org.apache.lucene.analysis.hunspell.HunspellAffix r5;
        char[] r3, $r10;
        java.lang.StringBuilder $r2, $r4, $r6;
        java.lang.Object $r13;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        r3 := @parameter0: char[];

        i0 := @parameter1: int;

        r5 := @parameter2: org.apache.lucene.analysis.hunspell.HunspellAffix;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean isIgnoreCase()>();

        if $z0 == 0 goto label1;

        $r17 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.util.CharacterUtils charUtils>;

        $i2 = lengthof r3;

        virtualinvoke $r17.<org.apache.lucene.analysis.util.CharacterUtils: void toLowerCase(char[],int,int)>(r3, 0, $i2);

     label1:
        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.lang.StringBuilder segment>;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $r4 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.lang.StringBuilder segment>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r3, 0, i0);

        $r6 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.lang.StringBuilder segment>;

        $z1 = virtualinvoke r5.<org.apache.lucene.analysis.hunspell.HunspellAffix: boolean checkCondition(java.lang.CharSequence)>($r6);

        if $z1 != 0 goto label2;

        $r16 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r16;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: org.apache.lucene.analysis.hunspell.HunspellDictionary dictionary>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.util.List lookupWord(char[],int,int)>(r3, 0, i0);

        if $r9 == null goto label5;

        $r12 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.analysis.hunspell.HunspellWord) $r13;

        $c1 = virtualinvoke r5.<org.apache.lucene.analysis.hunspell.HunspellAffix: char getFlag()>();

        $z4 = virtualinvoke r14.<org.apache.lucene.analysis.hunspell.HunspellWord: boolean hasFlag(char)>($c1);

        if $z4 == 0 goto label4;

        $r15 = new org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem;

        specialinvoke $r15.<org.apache.lucene.analysis.hunspell.HunspellStemmer$Stem: void <init>(char[],int)>(r3, i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r15);

     label4:
        goto label3;

     label5:
        $z2 = virtualinvoke r5.<org.apache.lucene.analysis.hunspell.HunspellAffix: boolean isCrossProduct()>();

        if $z2 == 0 goto label6;

        if i3 >= 2 goto label6;

        $r10 = virtualinvoke r5.<org.apache.lucene.analysis.hunspell.HunspellAffix: char[] getAppendFlags()>();

        i4 = i3 + 1;

        $r11 = specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellStemmer: java.util.List stem(char[],int,char[],int)>(r3, i0, $r10, i4);

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11);

     label6:
        return $r7;
    }

    private boolean hasCrossCheckedFlag(char, char[])
    {
        org.apache.lucene.analysis.hunspell.HunspellStemmer r1;
        int $i1;
        char[] r0;
        char c0;
        boolean $z0;

        r1 := @this: org.apache.lucene.analysis.hunspell.HunspellStemmer;

        c0 := @parameter0: char;

        r0 := @parameter1: char[];

        if r0 == null goto label1;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>(r0, c0);

        if $i1 < 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.hunspell.HunspellStemmer: int RECURSION_CAP> = 2;

        return;
    }
}
