public abstract class org.springframework.aop.interceptor.AbstractTraceInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, java.io.Serializable
{
    protected transient org.apache.commons.logging.Log defaultLogger;
    private boolean hideProxyClassNames;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log defaultLogger> = $r2;

        r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: boolean hideProxyClassNames> = 0;

        return;
    }

    public void setUseDynamicLogger(boolean)
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

     label2:
        r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log defaultLogger> = $r2;

        return;
    }

    public void setLoggerName(java.lang.String)
    {
        org.apache.commons.logging.Log $r2;
        java.lang.String r1;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>(r1);

        r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log defaultLogger> = $r2;

        return;
    }

    public void setHideProxyClassNames(boolean)
    {
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: boolean hideProxyClassNames> = z0;

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Object $r3, $r4;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r2 = virtualinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation)>(r1);

        $z0 = virtualinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: boolean isInterceptorEnabled(org.aopalliance.intercept.MethodInvocation,org.apache.commons.logging.Log)>(r1, $r2);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation,org.apache.commons.logging.Log)>(r1, $r2);

        return $r4;

     label1:
        $r3 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        return $r3;
    }

    protected org.apache.commons.logging.Log getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation)
    {
        org.aopalliance.intercept.MethodInvocation r2;
        org.apache.commons.logging.Log $r1, $r5, $r6;
        java.lang.Object $r3;
        java.lang.Class $r4;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log defaultLogger>;

        if $r1 == null goto label1;

        $r6 = r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: org.apache.commons.logging.Log defaultLogger>;

        return $r6;

     label1:
        $r3 = interfaceinvoke r2.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r4 = virtualinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: java.lang.Class getClassForLogging(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r4);

        return $r5;
    }

    protected java.lang.Class getClassForLogging(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: boolean hideProxyClassNames>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Class getTargetClass(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        return $r2;
    }

    protected boolean isInterceptorEnabled(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log)
    {
        org.aopalliance.intercept.MethodInvocation r2;
        org.apache.commons.logging.Log r1;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: org.apache.commons.logging.Log;

        $z0 = virtualinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: boolean isLogEnabled(org.apache.commons.logging.Log)>(r1);

        return $z0;
    }

    protected boolean isLogEnabled(org.apache.commons.logging.Log)
    {
        org.apache.commons.logging.Log r0;
        boolean $z0;
        org.springframework.aop.interceptor.AbstractTraceInterceptor r1;

        r1 := @this: org.springframework.aop.interceptor.AbstractTraceInterceptor;

        r0 := @parameter0: org.apache.commons.logging.Log;

        $z0 = interfaceinvoke r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        return $z0;
    }

    protected abstract java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable;
}
