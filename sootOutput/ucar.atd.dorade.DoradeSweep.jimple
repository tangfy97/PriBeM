public class ucar.atd.dorade.DoradeSweep extends java.lang.Object
{
    public static final float BAD_VALUE;
    ucar.atd.dorade.DoradeSSWB mySSWB;
    ucar.atd.dorade.DoradeVOLD myVOLD;
    ucar.atd.dorade.DoradeSWIB mySWIB;
    boolean littleEndian;

    public void <init>(java.lang.String) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException, java.io.FileNotFoundException
    {
        java.io.RandomAccessFile $r1;
        ucar.atd.dorade.DoradeSSWB $r3;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSweep$DoradeSweepException $r8;
        java.lang.Exception $r7;
        ucar.atd.dorade.DoradeVOLD $r4, $r6;
        ucar.atd.dorade.DoradeSWIB $r5;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r2, "r");

     label1:
        $z0 = staticinvoke <ucar.atd.dorade.DoradeDescriptor: boolean sweepfileIsLittleEndian(java.io.RandomAccessFile)>($r1);

        r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian> = $z0;

        $r3 = new ucar.atd.dorade.DoradeSSWB;

        $z1 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        specialinvoke $r3.<ucar.atd.dorade.DoradeSSWB: void <init>(java.io.RandomAccessFile,boolean)>($r1, $z1);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSSWB mySSWB> = $r3;

        $r4 = new ucar.atd.dorade.DoradeVOLD;

        $z2 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        specialinvoke $r4.<ucar.atd.dorade.DoradeVOLD: void <init>(java.io.RandomAccessFile,boolean)>($r1, $z2);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD> = $r4;

        $r5 = new ucar.atd.dorade.DoradeSWIB;

        $z3 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        $r6 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        specialinvoke $r5.<ucar.atd.dorade.DoradeSWIB: void <init>(java.io.RandomAccessFile,boolean,ucar.atd.dorade.DoradeVOLD)>($r1, $z3, $r6);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB> = $r5;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new ucar.atd.dorade.DoradeSweep$DoradeSweepException;

        specialinvoke $r8.<ucar.atd.dorade.DoradeSweep$DoradeSweepException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.io.RandomAccessFile) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException, java.io.FileNotFoundException
    {
        java.io.RandomAccessFile r1;
        ucar.atd.dorade.DoradeSSWB $r2;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSweep$DoradeSweepException $r7;
        java.lang.Exception $r6;
        ucar.atd.dorade.DoradeVOLD $r3, $r5;
        ucar.atd.dorade.DoradeSWIB $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        r1 := @parameter0: java.io.RandomAccessFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $z0 = staticinvoke <ucar.atd.dorade.DoradeDescriptor: boolean sweepfileIsLittleEndian(java.io.RandomAccessFile)>(r1);

        r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian> = $z0;

        $r2 = new ucar.atd.dorade.DoradeSSWB;

        $z1 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        specialinvoke $r2.<ucar.atd.dorade.DoradeSSWB: void <init>(java.io.RandomAccessFile,boolean)>(r1, $z1);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSSWB mySSWB> = $r2;

        $r3 = new ucar.atd.dorade.DoradeVOLD;

        $z2 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        specialinvoke $r3.<ucar.atd.dorade.DoradeVOLD: void <init>(java.io.RandomAccessFile,boolean)>(r1, $z2);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD> = $r3;

        $r4 = new ucar.atd.dorade.DoradeSWIB;

        $z3 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        $r5 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        specialinvoke $r4.<ucar.atd.dorade.DoradeSWIB: void <init>(java.io.RandomAccessFile,boolean,ucar.atd.dorade.DoradeVOLD)>(r1, $z3, $r5);

        r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB> = $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new ucar.atd.dorade.DoradeSweep$DoradeSweepException;

        specialinvoke $r7.<ucar.atd.dorade.DoradeSweep$DoradeSweepException: void <init>(java.lang.Exception)>($r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isLittleEndian()
    {
        ucar.atd.dorade.DoradeSweep r0;
        boolean $z0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $z0 = r0.<ucar.atd.dorade.DoradeSweep: boolean littleEndian>;

        return $z0;
    }

    public ucar.atd.dorade.DoradePARM[] getParamList()
    {
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradePARM[] $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradePARM[] getParamList()>();

        return $r2;
    }

    public ucar.atd.dorade.DoradePARM lookupParamIgnoreCase(java.lang.String)
    {
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradePARM $r2, $r5;
        int $i0, i1;
        java.lang.String $r3, r4;
        ucar.atd.dorade.DoradePARM[] $r1;
        boolean $z0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        r4 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradePARM[] getParamList()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r2 = $r1[i1];

        $r3 = virtualinvoke $r2.<ucar.atd.dorade.DoradePARM: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z0 == 0 goto label2;

        $r5 = $r1[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public int getNRays()
    {
        int $i0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $i0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: int getNRays()>();

        return $i0;
    }

    public int getNSensors()
    {
        int $i0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeVOLD $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $i0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: int getNSensors()>();

        return $i0;
    }

    public java.lang.String getSensorName(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        int i0;
        ucar.atd.dorade.DoradeSweep r0;
        java.lang.String $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: java.lang.String getSensorName(int)>(i0);

        return $r2;
    }

    public boolean sensorIsMoving(int) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException
    {
        int i0;
        ucar.atd.dorade.DoradeSweep$MovingSensorException $r1;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

     label1:
        virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: float getLatitude(int)>(i0);

        virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: float getLongitude(int)>(i0);

        virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: float getAltitude(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        return 1;

     label4:
        return 0;

        catch ucar.atd.dorade.DoradeSweep$MovingSensorException from label1 to label2 with label3;
    }

    public float getLatitude(int) throws ucar.atd.dorade.DoradeSweep$MovingSensorException
    {
        ucar.atd.dorade.DoradeSweep$MovingSensorException $r3;
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2;
        byte $b1;
        ucar.atd.dorade.DoradeVOLD $r4;
        ucar.atd.dorade.DoradeRADD $r5;
        int $i0, i2, i3;
        float $f0, $f1, $f2, $f3;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i2 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getLatitudes()>();

        if $r2 != null goto label1;

        $r4 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r5 = virtualinvoke $r4.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i2);

        $f3 = virtualinvoke $r5.<ucar.atd.dorade.DoradeRADD: float getLatitude()>();

        return $f3;

     label1:
        i3 = 1;

     label2:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $f2 = $r2[i3];

        $f1 = $r2[0];

        $b1 = $f2 cmpl $f1;

        if $b1 == 0 goto label3;

        $r3 = new ucar.atd.dorade.DoradeSweep$MovingSensorException;

        specialinvoke $r3.<ucar.atd.dorade.DoradeSweep$MovingSensorException: void <init>(java.lang.String)>("sensor is not static");

        throw $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $f0 = $r2[0];

        return $f0;
    }

    public float getLongitude(int) throws ucar.atd.dorade.DoradeSweep$MovingSensorException
    {
        ucar.atd.dorade.DoradeSweep$MovingSensorException $r3;
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2;
        byte $b1;
        ucar.atd.dorade.DoradeVOLD $r4;
        ucar.atd.dorade.DoradeRADD $r5;
        int $i0, i2, i3;
        float $f0, $f1, $f2, $f3;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i2 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getLongitudes()>();

        if $r2 != null goto label1;

        $r4 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r5 = virtualinvoke $r4.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i2);

        $f3 = virtualinvoke $r5.<ucar.atd.dorade.DoradeRADD: float getLongitude()>();

        return $f3;

     label1:
        i3 = 1;

     label2:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $f2 = $r2[i3];

        $f1 = $r2[0];

        $b1 = $f2 cmpl $f1;

        if $b1 == 0 goto label3;

        $r3 = new ucar.atd.dorade.DoradeSweep$MovingSensorException;

        specialinvoke $r3.<ucar.atd.dorade.DoradeSweep$MovingSensorException: void <init>(java.lang.String)>("sensor is not static");

        throw $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $f0 = $r2[0];

        return $f0;
    }

    public float getAltitude(int) throws ucar.atd.dorade.DoradeSweep$MovingSensorException
    {
        ucar.atd.dorade.DoradeSweep$MovingSensorException $r3;
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2;
        byte $b1;
        ucar.atd.dorade.DoradeVOLD $r4;
        ucar.atd.dorade.DoradeRADD $r5;
        int $i0, i2, i3;
        float $f0, $f1, $f2, $f3;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i2 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getAltitudes()>();

        if $r2 != null goto label1;

        $r4 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r5 = virtualinvoke $r4.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i2);

        $f3 = virtualinvoke $r5.<ucar.atd.dorade.DoradeRADD: float getAltitude()>();

        return $f3;

     label1:
        i3 = 1;

     label2:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $f2 = $r2[i3];

        $f1 = $r2[0];

        $b1 = $f2 cmpl $f1;

        if $b1 == 0 goto label3;

        $r3 = new ucar.atd.dorade.DoradeSweep$MovingSensorException;

        specialinvoke $r3.<ucar.atd.dorade.DoradeSweep$MovingSensorException: void <init>(java.lang.String)>("sensor is not static");

        throw $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $f0 = $r2[0];

        return $f0;
    }

    public float[] getLatitudes(int)
    {
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2, r5;
        ucar.atd.dorade.DoradeVOLD $r3;
        ucar.atd.dorade.DoradeRADD $r4;
        int i0, $i1, $i2, i3;
        float $f0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getLatitudes()>();

        r5 = $r2;

        if $r2 != null goto label2;

        $r3 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r4 = virtualinvoke $r3.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r4.<ucar.atd.dorade.DoradeRADD: float getLatitude()>();

        $i1 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        r5 = newarray (float)[$i1];

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        if i3 >= $i2 goto label2;

        r5[i3] = $f0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r5;
    }

    public float[] getLongitudes(int)
    {
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2, r5;
        ucar.atd.dorade.DoradeVOLD $r3;
        ucar.atd.dorade.DoradeRADD $r4;
        int i0, $i1, $i2, i3;
        float $f0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getLongitudes()>();

        r5 = $r2;

        if $r2 != null goto label2;

        $r3 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r4 = virtualinvoke $r3.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r4.<ucar.atd.dorade.DoradeRADD: float getLongitude()>();

        $i1 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        r5 = newarray (float)[$i1];

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        if i3 >= $i2 goto label2;

        r5[i3] = $f0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r5;
    }

    public float[] getAltitudes(int)
    {
        ucar.atd.dorade.DoradeSweep r0;
        float[] $r2, r5;
        ucar.atd.dorade.DoradeVOLD $r3;
        ucar.atd.dorade.DoradeRADD $r4;
        int i0, $i1, $i2, i3;
        float $f0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getAltitudes()>();

        r5 = $r2;

        if $r2 != null goto label2;

        $r3 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r4 = virtualinvoke $r3.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r4.<ucar.atd.dorade.DoradeRADD: float getAltitude()>();

        $i1 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        r5 = newarray (float)[$i1];

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        if i3 >= $i2 goto label2;

        r5[i3] = $f0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r5;
    }

    public float getFixedAngle()
    {
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $f0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float getFixedAngle()>();

        return $f0;
    }

    public int getSweepNumber()
    {
        int $i0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $i0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: int getSweepNumber()>();

        return $i0;
    }

    public java.util.Date getTime()
    {
        ucar.atd.dorade.DoradeSSWB $r1;
        ucar.atd.dorade.DoradeSweep r0;
        java.util.Date $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSSWB mySSWB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSSWB: java.util.Date getStartTime()>();

        return $r2;
    }

    public java.util.Date[] getTimes()
    {
        java.util.Date[] $r2;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: java.util.Date[] getTimes()>();

        return $r2;
    }

    public java.util.Date getRayTime(int)
    {
        java.util.Date $r2;
        int i0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: java.util.Date getRayTime(int)>(i0);

        return $r2;
    }

    public float[] getRayData(ucar.atd.dorade.DoradePARM, int) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException
    {
        int i0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradePARM r1;
        float[] $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        r1 := @parameter0: ucar.atd.dorade.DoradePARM;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<ucar.atd.dorade.DoradeSweep: float[] getRayData(ucar.atd.dorade.DoradePARM,int,float[])>(r1, i0, null);

        return $r2;
    }

    public float[] getRayData(ucar.atd.dorade.DoradePARM, int, float[]) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException
    {
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradePARM r1;
        float[] r2, $r4;
        ucar.atd.dorade.DoradeSweep$DoradeSweepException $r6;
        int i0;
        ucar.atd.dorade.DoradeSWIB $r3;
        ucar.atd.dorade.DoradeDescriptor$DescriptorException $r5;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        r1 := @parameter0: ucar.atd.dorade.DoradePARM;

        i0 := @parameter1: int;

        r2 := @parameter2: float[];

     label1:
        $r3 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r4 = virtualinvoke $r3.<ucar.atd.dorade.DoradeSWIB: float[] getRayData(ucar.atd.dorade.DoradePARM,int,float[])>(r1, i0, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new ucar.atd.dorade.DoradeSweep$DoradeSweepException;

        specialinvoke $r6.<ucar.atd.dorade.DoradeSweep$DoradeSweepException: void <init>(java.lang.Exception)>($r5);

        throw $r6;

        catch ucar.atd.dorade.DoradeDescriptor$DescriptorException from label1 to label2 with label3;
    }

    public float getRangeToFirstCell(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getRangeToFirstCell()>();

        return $f0;
    }

    public float getCellSpacing(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeDescriptor$DescriptorException $r3;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getCellSpacing()>();

     label2:
        return $f0;

     label3:
        $r3 := @caughtexception;

        return -1.0F;

        catch ucar.atd.dorade.DoradeDescriptor$DescriptorException from label1 to label2 with label3;
    }

    public int getNCells(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0, $i1;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $i1 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: int getNCells()>();

        return $i1;
    }

    public short getVolumnNumber()
    {
        ucar.atd.dorade.DoradeSweep r0;
        short $s0;
        ucar.atd.dorade.DoradeVOLD $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $s0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: short getVolumeNumber()>();

        return $s0;
    }

    public java.lang.String getProjectName()
    {
        ucar.atd.dorade.DoradeSweep r0;
        java.lang.String $r2;
        ucar.atd.dorade.DoradeVOLD $r1;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: java.lang.String getProjectName()>();

        return $r2;
    }

    public float[] getAzimuths()
    {
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;
        float[] $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getAzimuths()>();

        return $r2;
    }

    public float[] getElevations()
    {
        ucar.atd.dorade.DoradeSweep r0;
        ucar.atd.dorade.DoradeSWIB $r1;
        float[] $r2;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeSWIB mySWIB>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSWIB: float[] getElevations()>();

        return $r2;
    }

    public static java.lang.String formatDate(java.util.Date)
    {
        java.lang.String $r1;
        java.util.Date r0;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <ucar.atd.dorade.DoradeDescriptor: java.lang.String formatDate(java.util.Date)>(r0);

        return $r1;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        ucar.atd.dorade.DoradePARM $r9;
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r8;
        java.io.PrintStream $r5, $r10;
        ucar.atd.dorade.DoradeSweep $r1;
        java.lang.Exception $r11;
        java.lang.StringBuilder $r4, $r6, $r7;
        ucar.atd.dorade.DoradePARM[] $r3;

        r0 := @parameter0: java.lang.String[];

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Usage: DoradeSweep <filename>");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label2:
        $r1 = new ucar.atd.dorade.DoradeSweep;

        $r2 = r0[0];

        specialinvoke $r1.<ucar.atd.dorade.DoradeSweep: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradePARM[] getParamList()>();

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i1 = lengthof $r3;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" params in file");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        i2 = 0;

     label3:
        $i3 = lengthof $r3;

        if i2 >= $i3 goto label4;

        $r9 = $r3[i2];

        staticinvoke <ucar.atd.dorade.DoradeSweep: void mainGetParam(ucar.atd.dorade.DoradeSweep,ucar.atd.dorade.DoradePARM)>($r1, $r9);

        i2 = i2 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private static void mainGetParam(ucar.atd.dorade.DoradeSweep, ucar.atd.dorade.DoradePARM) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException
    {
        ucar.atd.dorade.DoradePARM r3;
        float[] $r8;
        int $i0, i1, $i2, i3;
        java.lang.String $r4, $r6, $r16;
        java.io.PrintStream $r1, $r10;
        ucar.atd.dorade.DoradeSweep r7;
        java.lang.StringBuilder $r0, $r2, $r5, $r9, $r11, $r12, $r13, $r14, $r15;

        r7 := @parameter0: ucar.atd.dorade.DoradeSweep;

        r3 := @parameter1: ucar.atd.dorade.DoradePARM;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getting ");

        $r4 = virtualinvoke r3.<ucar.atd.dorade.DoradePARM: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r6);

        i3 = 0;

     label1:
        $i0 = virtualinvoke r7.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        if i3 >= $i0 goto label3;

        $r8 = virtualinvoke r7.<ucar.atd.dorade.DoradeSweep: float[] getRayData(ucar.atd.dorade.DoradePARM,int)>(r3, i3);

        i1 = lengthof $r8;

        if i3 != 0 goto label2;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cells x ");

        $i2 = virtualinvoke r7.<ucar.atd.dorade.DoradeSweep: int getNRays()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rays)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public ucar.atd.dorade.ScanMode getScanMode()
    {
        ucar.atd.dorade.ScanMode $r3;
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(0);

        $r3 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: ucar.atd.dorade.ScanMode getScanMode()>();

        return $r3;
    }

    public static boolean isDoradeSweep(java.io.RandomAccessFile) throws ucar.atd.dorade.DoradeSweep$DoradeSweepException
    {
        java.io.RandomAccessFile r0;
        ucar.atd.dorade.DoradeSweep$DoradeSweepException $r2;
        java.lang.Exception $r1;
        boolean $z0;

        r0 := @parameter0: java.io.RandomAccessFile;

     label1:
        $z0 = staticinvoke <ucar.atd.dorade.DoradeSweep: boolean findName(java.io.RandomAccessFile,java.lang.String)>(r0, "SSWB");

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        $r2 = new ucar.atd.dorade.DoradeSweep$DoradeSweepException;

        specialinvoke $r2.<ucar.atd.dorade.DoradeSweep$DoradeSweepException: void <init>(java.lang.Exception)>($r1);

        throw $r2;

     label5:
        return 0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static boolean findName(java.io.RandomAccessFile, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.io.RandomAccessFile r1;
        long $l0;
        java.io.IOException $r6;
        java.lang.Exception $r4;
        int $i1, $i3;
        java.lang.String r2, $r7;
        boolean $z0;

        r1 := @parameter0: java.io.RandomAccessFile;

        r2 := @parameter1: java.lang.String;

        r0 = newarray (byte)[4];

     label1:
        $l0 = virtualinvoke r1.<java.io.RandomAccessFile: long getFilePointer()>();

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(0L);

        $i1 = virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[],int,int)>(r0, 0, 4);

        $i3 = (int) -1;

        if $i1 != $i3 goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l0);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>()>();

        throw $r6;

     label6:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>(r0);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label7;

        return 1;

     label7:
        return 0;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public ucar.atd.dorade.ScanMode getScanMode(int)
    {
        ucar.atd.dorade.ScanMode $r3;
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $r3 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: ucar.atd.dorade.ScanMode getScanMode()>();

        return $r3;
    }

    public float getUnambiguousVelocity(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getUnambiguousVelocity()>();

        return $f0;
    }

    public float getunambiguousRange(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getunambiguousRange()>();

        return $f0;
    }

    public float getradarConstant(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getradarConstant()>();

        return $f0;
    }

    public float getrcvrGain(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getrcvrGain()>();

        return $f0;
    }

    public float getantennaGain(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getantennaGain()>();

        return $f0;
    }

    public float getsystemGain(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getsystemGain()>();

        return $f0;
    }

    public float gethBeamWidth(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float gethBeamWidth()>();

        return $f0;
    }

    public float getpeakPower(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getpeakPower()>();

        return $f0;
    }

    public float getnoisePower(int)
    {
        ucar.atd.dorade.DoradeVOLD $r1;
        ucar.atd.dorade.DoradeRADD $r2;
        int i0;
        float $f0;
        ucar.atd.dorade.DoradeSweep r0;

        r0 := @this: ucar.atd.dorade.DoradeSweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.atd.dorade.DoradeSweep: ucar.atd.dorade.DoradeVOLD myVOLD>;

        $r2 = virtualinvoke $r1.<ucar.atd.dorade.DoradeVOLD: ucar.atd.dorade.DoradeRADD getRADD(int)>(i0);

        $f0 = virtualinvoke $r2.<ucar.atd.dorade.DoradeRADD: float getnoisePower()>();

        return $f0;
    }

    public static void <clinit>()
    {
        <ucar.atd.dorade.DoradeSweep: float BAD_VALUE> = 3.4028235E38F;

        return;
    }
}
