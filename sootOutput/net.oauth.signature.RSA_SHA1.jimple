public class net.oauth.signature.RSA_SHA1 extends net.oauth.signature.OAuthSignatureMethod
{
    public static final java.lang.String PRIVATE_KEY;
    public static final java.lang.String PUBLIC_KEY;
    public static final java.lang.String X509_CERTIFICATE;
    private java.security.PrivateKey privateKey;
    private java.security.PublicKey publicKey;

    public void <init>()
    {
        net.oauth.signature.RSA_SHA1 r0;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        specialinvoke r0.<net.oauth.signature.OAuthSignatureMethod: void <init>()>();

        r0.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey privateKey> = null;

        r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey publicKey> = null;

        return;
    }

    protected void initialize(java.lang.String, net.oauth.OAuthAccessor) throws net.oauth.OAuthException
    {
        java.security.GeneralSecurityException $r14;
        java.lang.String r1;
        net.oauth.OAuthException $r13, $r15;
        net.oauth.signature.RSA_SHA1 r0;
        java.security.PublicKey $r9, $r10;
        java.io.IOException $r12;
        net.oauth.OAuthAccessor r2;
        java.security.PrivateKey $r11;
        net.oauth.OAuthConsumer $r3, $r5, $r7;
        java.lang.Object $r4, $r6, $r8;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.oauth.OAuthAccessor;

        specialinvoke r0.<net.oauth.signature.OAuthSignatureMethod: void initialize(java.lang.String,net.oauth.OAuthAccessor)>(r1, r2);

     label1:
        $r3 = r2.<net.oauth.OAuthAccessor: net.oauth.OAuthConsumer consumer>;

        $r4 = virtualinvoke $r3.<net.oauth.OAuthConsumer: java.lang.Object getProperty(java.lang.String)>("RSA-SHA1.PrivateKey");

        if $r4 == null goto label2;

        $r11 = specialinvoke r0.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey loadPrivateKey(java.lang.Object)>($r4);

        r0.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey privateKey> = $r11;

     label2:
        $r5 = r2.<net.oauth.OAuthAccessor: net.oauth.OAuthConsumer consumer>;

        $r6 = virtualinvoke $r5.<net.oauth.OAuthConsumer: java.lang.Object getProperty(java.lang.String)>("RSA-SHA1.PublicKey");

        if $r6 == null goto label3;

        $r10 = specialinvoke r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey loadPublicKey(java.lang.Object,boolean)>($r6, 0);

        r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey publicKey> = $r10;

        goto label4;

     label3:
        $r7 = r2.<net.oauth.OAuthAccessor: net.oauth.OAuthConsumer consumer>;

        $r8 = virtualinvoke $r7.<net.oauth.OAuthConsumer: java.lang.Object getProperty(java.lang.String)>("RSA-SHA1.X509Certificate");

        if $r8 == null goto label4;

        $r9 = specialinvoke r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey loadPublicKey(java.lang.Object,boolean)>($r8, 1);

        r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey publicKey> = $r9;

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        $r15 = new net.oauth.OAuthException;

        specialinvoke $r15.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label6:
        $r12 := @caughtexception;

        $r13 = new net.oauth.OAuthException;

        specialinvoke $r13.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label7:
        return;

        catch java.security.GeneralSecurityException from label1 to label4 with label5;
        catch java.io.IOException from label1 to label4 with label6;
    }

    private java.security.PublicKey getPublicKeyFromDerCert(byte[]) throws java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate r4;
        byte[] r2;
        java.security.cert.Certificate $r3;
        java.security.cert.CertificateFactory $r0;
        java.io.ByteArrayInputStream $r1;
        net.oauth.signature.RSA_SHA1 r6;
        java.security.PublicKey $r5;

        r6 := @this: net.oauth.signature.RSA_SHA1;

        r2 := @parameter0: byte[];

        $r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509");

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r3 = virtualinvoke $r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1);

        r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = virtualinvoke r4.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        return $r5;
    }

    private java.security.PublicKey getPublicKeyFromDer(byte[]) throws java.security.GeneralSecurityException
    {
        byte[] r2;
        net.oauth.signature.RSA_SHA1 r4;
        java.security.PublicKey $r3;
        java.security.spec.X509EncodedKeySpec $r1;
        java.security.KeyFactory $r0;

        r4 := @this: net.oauth.signature.RSA_SHA1;

        r2 := @parameter0: byte[];

        $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r1 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r2);

        $r3 = virtualinvoke $r0.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1);

        return $r3;
    }

    private java.security.PublicKey getPublicKeyFromPem(java.lang.String) throws java.security.GeneralSecurityException, java.io.IOException
    {
        byte[] $r2, $r4;
        java.io.ByteArrayInputStream $r0;
        java.lang.String r1, $r5, $r6, $r7, $r8, $r12, $r14;
        boolean $z0, $z1;
        net.oauth.signature.RSA_SHA1 r15;
        java.io.IOException $r9;
        java.security.PublicKey r18;
        java.security.spec.X509EncodedKeySpec $r16;
        java.security.KeyFactory $r17;
        net.oauth.signature.pem.PEMReader $r3;
        java.lang.StringBuilder $r10, $r11, $r13;

        r15 := @this: net.oauth.signature.RSA_SHA1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        $r3 = new net.oauth.signature.pem.PEMReader;

        specialinvoke $r3.<net.oauth.signature.pem.PEMReader: void <init>(java.io.InputStream)>($r0);

        $r4 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: byte[] getDerBytes()>();

        $r5 = "-----BEGIN PUBLIC KEY-----";

        $r6 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r16 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r16.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r4);

        $r17 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        r18 = virtualinvoke $r17.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r16);

        goto label3;

     label1:
        $r7 = "-----BEGIN CERTIFICATE-----";

        $r8 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        r18 = specialinvoke r15.<net.oauth.signature.RSA_SHA1: java.security.PublicKey getPublicKeyFromDerCert(byte[])>($r4);

        goto label3;

     label2:
        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid PEM fileL: Unknown marker for  public key or cert ");

        $r12 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label3:
        return r18;
    }

    private java.security.PrivateKey getPrivateKeyFromDer(byte[]) throws java.security.GeneralSecurityException
    {
        byte[] r2;
        java.security.spec.PKCS8EncodedKeySpec $r1;
        java.security.PrivateKey $r3;
        net.oauth.signature.RSA_SHA1 r4;
        java.security.KeyFactory $r0;

        r4 := @this: net.oauth.signature.RSA_SHA1;

        r2 := @parameter0: byte[];

        $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r1 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r2);

        $r3 = virtualinvoke $r0.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r1);

        return $r3;
    }

    private java.security.PrivateKey getPrivateKeyFromPem(java.lang.String) throws java.security.GeneralSecurityException, java.io.IOException
    {
        byte[] $r2, $r4;
        java.security.spec.KeySpec r20;
        java.io.ByteArrayInputStream $r0;
        java.lang.String r1, $r5, $r6, $r7, $r8, $r12, $r14;
        boolean $z0, $z1;
        java.security.spec.PKCS8EncodedKeySpec $r15;
        net.oauth.signature.RSA_SHA1 r19;
        java.io.IOException $r9;
        java.security.KeyFactory $r16;
        java.security.PrivateKey $r17;
        net.oauth.signature.pem.PEMReader $r3;
        java.lang.StringBuilder $r10, $r11, $r13;
        net.oauth.signature.pem.PKCS1EncodedKeySpec $r18;

        r19 := @this: net.oauth.signature.RSA_SHA1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        $r3 = new net.oauth.signature.pem.PEMReader;

        specialinvoke $r3.<net.oauth.signature.pem.PEMReader: void <init>(java.io.InputStream)>($r0);

        $r4 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: byte[] getDerBytes()>();

        $r5 = "-----BEGIN RSA PRIVATE KEY-----";

        $r6 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r18 = new net.oauth.signature.pem.PKCS1EncodedKeySpec;

        specialinvoke $r18.<net.oauth.signature.pem.PKCS1EncodedKeySpec: void <init>(byte[])>($r4);

        r20 = virtualinvoke $r18.<net.oauth.signature.pem.PKCS1EncodedKeySpec: java.security.spec.RSAPrivateCrtKeySpec getKeySpec()>();

        goto label3;

     label1:
        $r7 = "-----BEGIN PRIVATE KEY-----";

        $r8 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r15 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r15.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r4);

        r20 = $r15;

        goto label3;

     label2:
        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid PEM file: Unknown marker for private key ");

        $r12 = virtualinvoke $r3.<net.oauth.signature.pem.PEMReader: java.lang.String getBeginMarker()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label3:
        $r16 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r17 = virtualinvoke $r16.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r20);

        return $r17;
    }

    protected java.lang.String getSignature(java.lang.String) throws net.oauth.OAuthException
    {
        net.oauth.OAuthException $r6, $r8;
        byte[] $r2, $r3;
        net.oauth.signature.RSA_SHA1 r0;
        java.security.GeneralSecurityException $r5;
        java.lang.String r1, $r4;
        java.io.UnsupportedEncodingException $r7;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = specialinvoke r0.<net.oauth.signature.RSA_SHA1: byte[] sign(byte[])>($r2);

        $r4 = staticinvoke <net.oauth.signature.RSA_SHA1: java.lang.String base64Encode(byte[])>($r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new net.oauth.OAuthException;

        specialinvoke $r8.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new net.oauth.OAuthException;

        specialinvoke $r6.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
        catch java.security.GeneralSecurityException from label1 to label2 with label4;
    }

    protected boolean isValid(java.lang.String, java.lang.String) throws net.oauth.OAuthException
    {
        net.oauth.OAuthException $r6, $r8;
        byte[] $r2, $r4;
        net.oauth.signature.RSA_SHA1 r0;
        java.security.GeneralSecurityException $r5;
        java.lang.String r1, r3;
        java.io.UnsupportedEncodingException $r7;
        boolean $z0;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <net.oauth.signature.RSA_SHA1: byte[] decodeBase64(java.lang.String)>(r1);

        $r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $z0 = specialinvoke r0.<net.oauth.signature.RSA_SHA1: boolean verify(byte[],byte[])>($r2, $r4);

     label2:
        return $z0;

     label3:
        $r7 := @caughtexception;

        $r8 = new net.oauth.OAuthException;

        specialinvoke $r8.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new net.oauth.OAuthException;

        specialinvoke $r6.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
        catch java.security.GeneralSecurityException from label1 to label2 with label4;
    }

    private byte[] sign(byte[]) throws java.security.GeneralSecurityException
    {
        byte[] r4, $r5;
        java.lang.IllegalStateException $r6;
        java.security.PrivateKey $r1, $r3;
        java.security.Signature $r2;
        net.oauth.signature.RSA_SHA1 r0;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        r4 := @parameter0: byte[];

        $r1 = r0.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey privateKey>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("need to set private key with OAuthConsumer.setProperty when generating RSA-SHA1 signatures.");

        throw $r6;

     label1:
        $r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        $r3 = r0.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey privateKey>;

        virtualinvoke $r2.<java.security.Signature: void initSign(java.security.PrivateKey)>($r3);

        virtualinvoke $r2.<java.security.Signature: void update(byte[])>(r4);

        $r5 = virtualinvoke $r2.<java.security.Signature: byte[] sign()>();

        return $r5;
    }

    private boolean verify(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        byte[] r4, r5;
        java.lang.IllegalStateException $r6;
        java.security.Signature $r2;
        net.oauth.signature.RSA_SHA1 r0;
        java.security.PublicKey $r1, $r3;
        boolean $z0;

        r0 := @this: net.oauth.signature.RSA_SHA1;

        r5 := @parameter0: byte[];

        r4 := @parameter1: byte[];

        $r1 = r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey publicKey>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("need to set public key with  OAuthConsumer.setProperty when verifying RSA-SHA1 signatures.");

        throw $r6;

     label1:
        $r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        $r3 = r0.<net.oauth.signature.RSA_SHA1: java.security.PublicKey publicKey>;

        virtualinvoke $r2.<java.security.Signature: void initVerify(java.security.PublicKey)>($r3);

        virtualinvoke $r2.<java.security.Signature: void update(byte[])>(r4);

        $z0 = virtualinvoke $r2.<java.security.Signature: boolean verify(byte[])>(r5);

        return $z0;
    }

    private java.security.PrivateKey loadPrivateKey(java.lang.Object) throws java.io.IOException, java.security.GeneralSecurityException
    {
        byte[] $r9, $r10, $r14;
        java.lang.String $r5, $r7, $r11, $r13;
        boolean $z0, $z1, $z2;
        net.oauth.signature.RSA_SHA1 r8;
        java.io.IOException $r12;
        java.lang.IllegalArgumentException $r1;
        java.security.PrivateKey r15;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Class $r4;

        r8 := @this: net.oauth.signature.RSA_SHA1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label1;

        r15 = (java.security.PrivateKey) r0;

        goto label7;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        $r11 = (java.lang.String) r0;

        r15 = specialinvoke r8.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey getPrivateKeyFromPem(java.lang.String)>($r11);

     label3:
        goto label7;

     label4:
        $r12 := @caughtexception;

        $r13 = (java.lang.String) r0;

        $r14 = staticinvoke <net.oauth.signature.RSA_SHA1: byte[] decodeBase64(java.lang.String)>($r13);

        r15 = specialinvoke r8.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey getPrivateKeyFromDer(byte[])>($r14);

        goto label7;

     label5:
        $z2 = r0 instanceof byte[];

        if $z2 == 0 goto label6;

        $r9 = (byte[]) r0;

        $r10 = (byte[]) $r9;

        r15 = specialinvoke r8.<net.oauth.signature.RSA_SHA1: java.security.PrivateKey getPrivateKeyFromDer(byte[])>($r10);

        goto label7;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Private key set through RSA_SHA1.PRIVATE_KEY must be of type PrivateKey, String or byte[] and not ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label7:
        return r15;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private java.security.PublicKey loadPublicKey(java.lang.Object, boolean) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate $r17;
        byte[] $r12, $r13, $r14, $r15, $r20;
        java.lang.String $r8, $r10, $r16, $r19, r22;
        boolean $z0, $z1, $z2, $z3, z4;
        net.oauth.signature.RSA_SHA1 r11;
        java.io.IOException $r18;
        java.security.PublicKey r21;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r9;
        java.lang.Class $r7;

        r11 := @this: net.oauth.signature.RSA_SHA1;

        r0 := @parameter0: java.lang.Object;

        z4 := @parameter1: boolean;

        $z0 = r0 instanceof java.security.PublicKey;

        if $z0 == 0 goto label01;

        r21 = (java.security.PublicKey) r0;

        goto label12;

     label01:
        $z1 = r0 instanceof java.security.cert.X509Certificate;

        if $z1 == 0 goto label02;

        $r17 = (java.security.cert.X509Certificate) r0;

        r21 = virtualinvoke $r17.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        goto label12;

     label02:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label07;

     label03:
        $r16 = (java.lang.String) r0;

        r21 = specialinvoke r11.<net.oauth.signature.RSA_SHA1: java.security.PublicKey getPublicKeyFromPem(java.lang.String)>($r16);

     label04:
        goto label12;

     label05:
        $r18 := @caughtexception;

        if z4 == 0 goto label06;

        throw $r18;

     label06:
        $r19 = (java.lang.String) r0;

        $r20 = staticinvoke <net.oauth.signature.RSA_SHA1: byte[] decodeBase64(java.lang.String)>($r19);

        r21 = specialinvoke r11.<net.oauth.signature.RSA_SHA1: java.security.PublicKey getPublicKeyFromDer(byte[])>($r20);

        goto label12;

     label07:
        $z3 = r0 instanceof byte[];

        if $z3 == 0 goto label09;

        if z4 == 0 goto label08;

        $r14 = (byte[]) r0;

        $r15 = (byte[]) $r14;

        r21 = specialinvoke r11.<net.oauth.signature.RSA_SHA1: java.security.PublicKey getPublicKeyFromDerCert(byte[])>($r15);

        goto label12;

     label08:
        $r12 = (byte[]) r0;

        $r13 = (byte[]) $r12;

        r21 = specialinvoke r11.<net.oauth.signature.RSA_SHA1: java.security.PublicKey getPublicKeyFromDer(byte[])>($r13);

        goto label12;

     label09:
        if z4 == 0 goto label10;

        r22 = "RSA_SHA1.X509_CERTIFICATE";

        goto label11;

     label10:
        r22 = "RSA_SHA1.PUBLIC_KEY";

     label11:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Public key or certificate set through ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type PublicKey, String or byte[], and not ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label12:
        return r21;

        catch java.io.IOException from label03 to label04 with label05;
    }

    public static void <clinit>()
    {
        <net.oauth.signature.RSA_SHA1: java.lang.String X509_CERTIFICATE> = "RSA-SHA1.X509Certificate";

        <net.oauth.signature.RSA_SHA1: java.lang.String PUBLIC_KEY> = "RSA-SHA1.PublicKey";

        <net.oauth.signature.RSA_SHA1: java.lang.String PRIVATE_KEY> = "RSA-SHA1.PrivateKey";

        return;
    }
}
