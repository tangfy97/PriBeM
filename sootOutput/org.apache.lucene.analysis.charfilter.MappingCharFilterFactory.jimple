public class org.apache.lucene.analysis.charfilter.MappingCharFilterFactory extends org.apache.lucene.analysis.util.CharFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware, org.apache.lucene.analysis.util.MultiTermAwareComponent
{
    protected org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap;
    private final java.lang.String mapping;
    static java.util.regex.Pattern p;
    char[] out;

    public void <init>(java.util.Map)
    {
        java.lang.IllegalArgumentException $r4;
        java.util.Map r1;
        char[] $r2;
        java.lang.StringBuilder $r5, $r6, $r7;
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r0;
        java.lang.String $r3, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.CharFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = newarray (char)[256];

        r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: char[] out> = $r2;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "mapping");

        r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping> = $r3;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        java.util.ArrayList $r6;
        org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder $r8;
        org.apache.lucene.analysis.util.ResourceLoader r14;
        java.lang.String $r1, $r3, $r4, r13, $r15, $r17;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        java.io.File $r2;
        org.apache.lucene.analysis.charfilter.NormalizeCharMap $r9, $r10;
        java.util.List $r5, $r16, r18;
        org.apache.lucene.util.fst.FST $r11;
        java.lang.Object $r12;
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        r14 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping>;

        if $r1 == null goto label4;

        $r2 = new java.io.File;

        $r3 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r17 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping>;

        r18 = virtualinvoke r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r14, $r17);

        goto label3;

     label1:
        $r4 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping>;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.util.List splitFileNames(java.lang.String)>($r4);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r18 = $r6;

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r15 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>();

        $r16 = virtualinvoke r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r14, $r15);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        goto label2;

     label3:
        $r8 = new org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder;

        specialinvoke $r8.<org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: void parseRules(java.util.List,org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder)>(r18, $r8);

        $r9 = virtualinvoke $r8.<org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder: org.apache.lucene.analysis.charfilter.NormalizeCharMap build()>();

        r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap> = $r9;

        $r10 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap>;

        $r11 = $r10.<org.apache.lucene.analysis.charfilter.NormalizeCharMap: org.apache.lucene.util.fst.FST map>;

        if $r11 != null goto label4;

        r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap> = null;

     label4:
        return;
    }

    public java.io.Reader create(java.io.Reader)
    {
        org.apache.lucene.analysis.charfilter.MappingCharFilter $r5;
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r0;
        java.io.Reader r2, $r4;
        org.apache.lucene.analysis.charfilter.NormalizeCharMap $r1, $r3;

        r0 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        r2 := @parameter0: java.io.Reader;

        $r1 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap>;

        if $r1 != null goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r5 = new org.apache.lucene.analysis.charfilter.MappingCharFilter;

        $r4 = $r5;

        $r3 = r0.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: org.apache.lucene.analysis.charfilter.NormalizeCharMap normMap>;

        specialinvoke $r5.<org.apache.lucene.analysis.charfilter.MappingCharFilter: void <init>(org.apache.lucene.analysis.charfilter.NormalizeCharMap,java.io.Reader)>($r3, r2);

     label2:
        return $r4;
    }

    protected void parseRules(java.util.List, org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder)
    {
        java.util.regex.Matcher $r5;
        org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder r6;
        java.lang.String r3, $r8, $r9, $r10, $r11, $r17, $r19;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.lang.IllegalArgumentException $r12;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r18;
        java.util.regex.Pattern $r4;
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r7;

        r7 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        r0 := @parameter0: java.util.List;

        r6 := @parameter1: org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = <org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.util.regex.Pattern p>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z1 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Mapping Rule : [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], file = ");

        $r17 = r7.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String mapping>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label2:
        $r8 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r9 = virtualinvoke r7.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String parseString(java.lang.String)>($r8);

        $r10 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r11 = virtualinvoke r7.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.lang.String parseString(java.lang.String)>($r10);

        virtualinvoke r6.<org.apache.lucene.analysis.charfilter.NormalizeCharMap$Builder: void add(java.lang.String,java.lang.String)>($r9, $r11);

        goto label1;

     label3:
        return;
    }

    protected java.lang.String parseString(java.lang.String)
    {
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r18, $r20;
        int $i0, $i1, $i3, $i5, $i6, $i7, i8, i9, $i11, $i12, $i13;
        java.lang.String r0, $r4, $r10, $r16, $r22;
        char $c2, $c4, c10;
        java.lang.IllegalArgumentException $r19, $r21;
        char[] $r3, $r17;
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r2;

        r2 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        r0 := @parameter0: java.lang.String;

        i8 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i9 = 0;

     label01:
        if i8 >= $i0 goto label13;

        $i1 = i8;

        i8 = i8 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        c10 = $c2;

        $i12 = (int) $c2;

        if $i12 != 92 goto label12;

        if i8 < $i0 goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped char in [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r19;

     label02:
        $i3 = i8;

        i8 = i8 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        c10 = $c4;

        $i13 = (int) $c4;

        lookupswitch($i13)
        {
            case 34: goto label04;
            case 92: goto label03;
            case 98: goto label08;
            case 102: goto label09;
            case 110: goto label05;
            case 114: goto label07;
            case 116: goto label06;
            case 117: goto label10;
            default: goto label12;
        };

     label03:
        c10 = 92;

        goto label12;

     label04:
        c10 = 34;

        goto label12;

     label05:
        c10 = 10;

        goto label12;

     label06:
        c10 = 9;

        goto label12;

     label07:
        c10 = 13;

        goto label12;

     label08:
        c10 = 8;

        goto label12;

     label09:
        c10 = 12;

        goto label12;

     label10:
        $i5 = i8 + 3;

        if $i5 < $i0 goto label11;

        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped char in [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r21;

     label11:
        $i6 = i8 + 4;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, $i6);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 16);

        c10 = (char) $i7;

        i8 = i8 + 4;

     label12:
        $r17 = r2.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: char[] out>;

        $i11 = i9;

        i9 = i9 + 1;

        $r17[$i11] = c10;

        goto label01;

     label13:
        $r22 = new java.lang.String;

        $r3 = r2.<org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: char[] out>;

        specialinvoke $r22.<java.lang.String: void <init>(char[],int,int)>($r3, 0, i9);

        return $r22;
    }

    public org.apache.lucene.analysis.util.AbstractAnalysisFactory getMultiTermComponent()
    {
        org.apache.lucene.analysis.charfilter.MappingCharFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.MappingCharFilterFactory;

        return r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\"(.*)\"\\s*=>\\s*\"(.*)\"\\s*$");

        <org.apache.lucene.analysis.charfilter.MappingCharFilterFactory: java.util.regex.Pattern p> = $r0;

        return;
    }
}
