final class com.mycila.inject.internal.guava.collect.BstOperations extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.BstOperations r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstOperations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.guava.collect.BstNode seek(java.util.Comparator, com.mycila.inject.internal.guava.collect.BstNode, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.BstNode r1, $r4, $r5;
        com.mycila.inject.internal.guava.collect.BstSide $r6;
        int $i0;
        java.lang.Object r2, $r3;
        java.util.Comparator r0;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $i0 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $i0 != 0 goto label2;

        return r1;

     label2:
        if $i0 >= 0 goto label3;

        $r6 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        goto label4;

     label3:
        $r6 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

     label4:
        $r4 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r6);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstNode seek(java.util.Comparator,com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object)>(r0, $r4, r2);

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.BstMutationResult mutate(java.util.Comparator, com.mycila.inject.internal.guava.collect.BstMutationRule, com.mycila.inject.internal.guava.collect.BstNode, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory $r8;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy $r9;
        com.mycila.inject.internal.guava.collect.BstNode r3, $r6;
        com.mycila.inject.internal.guava.collect.BstSide $r11;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r4, $r7, $r10;
        int $i0;
        java.lang.Object r2, $r5;
        java.util.Comparator r0;
        com.mycila.inject.internal.guava.collect.BstMutationRule r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstMutationRule;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r2 := @parameter3: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        if r3 == null goto label3;

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $i0 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $i0 == 0 goto label3;

        if $i0 >= 0 goto label1;

        $r11 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        goto label2;

     label1:
        $r11 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

     label2:
        $r6 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r11);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult mutate(java.util.Comparator,com.mycila.inject.internal.guava.collect.BstMutationRule,com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object)>(r0, r1, $r6, r2);

        $r8 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstNodeFactory getNodeFactory()>();

        $r9 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstBalancePolicy getBalancePolicy()>();

        $r10 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult lift(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>(r3, $r11, $r8, $r9);

        return $r10;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult modify(com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object,com.mycila.inject.internal.guava.collect.BstMutationRule)>(r3, r2, r1);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.BstMutationResult mutate(com.mycila.inject.internal.guava.collect.BstInOrderPath, com.mycila.inject.internal.guava.collect.BstMutationRule)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory $r2;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy $r1;
        com.mycila.inject.internal.guava.collect.BstPath $r5;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r6, r9;
        com.mycila.inject.internal.guava.collect.BstNode $r3, $r7;
        com.mycila.inject.internal.guava.collect.BstSide $r8;
        com.mycila.inject.internal.guava.collect.BstMutationResult r10;
        java.lang.Object $r4;
        com.mycila.inject.internal.guava.collect.BstMutationRule r0;
        boolean $z0;

        r9 := @parameter0: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BstMutationRule;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r9);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstBalancePolicy getBalancePolicy()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstNodeFactory getNodeFactory()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstModifier getModifier()>();

        $r3 = virtualinvoke r9.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        r10 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult modify(com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object,com.mycila.inject.internal.guava.collect.BstMutationRule)>($r3, $r4, r0);

     label1:
        $z0 = virtualinvoke r9.<com.mycila.inject.internal.guava.collect.BstInOrderPath: boolean hasPrefix()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r9.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstPath getPrefix()>();

        r6 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r5;

        $r7 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r8 = virtualinvoke r9.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstSide getSideOfExtension()>();

        r10 = virtualinvoke r10.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult lift(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>($r7, $r8, $r2, $r1);

        r9 = r6;

        goto label1;

     label2:
        return r10;
    }

    private static com.mycila.inject.internal.guava.collect.BstMutationResult modify(com.mycila.inject.internal.guava.collect.BstNode, java.lang.Object, com.mycila.inject.internal.guava.collect.BstMutationRule)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory $r2;
        java.lang.AssertionError $r12, $r14;
        int[] $r7;
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r6;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy $r1;
        com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType $r8;
        com.mycila.inject.internal.guava.collect.BstNode r4, $r9, $r10, $r11, $r13, $r17, r18, r19, r20;
        com.mycila.inject.internal.guava.collect.BstModifier $r3;
        com.mycila.inject.internal.guava.collect.BstSide $r15, $r16;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r21;
        java.lang.Object r5;
        com.mycila.inject.internal.guava.collect.BstMutationRule r0;

        r4 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r5 := @parameter1: java.lang.Object;

        r0 := @parameter2: com.mycila.inject.internal.guava.collect.BstMutationRule;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstBalancePolicy getBalancePolicy()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstNodeFactory getNodeFactory()>();

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstModifier getModifier()>();

        if r4 != null goto label01;

        $r17 = null;

        goto label02;

     label01:
        $r17 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createLeaf(com.mycila.inject.internal.guava.collect.BstNode)>(r4);

     label02:
        $r6 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.BstModifier: com.mycila.inject.internal.guava.collect.BstModificationResult modify(java.lang.Object,com.mycila.inject.internal.guava.collect.BstNode)>(r5, $r17);

        r18 = null;

        r19 = null;

        if r4 == null goto label03;

        $r15 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        r18 = virtualinvoke r4.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r15);

        $r16 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        r19 = virtualinvoke r4.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r16);

     label03:
        $r7 = <com.mycila.inject.internal.guava.collect.BstOperations$1: int[] $SwitchMap$com$google$common$collect$BstModificationResult$ModificationType>;

        $r8 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType getType()>();

        $i0 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label08;
            default: goto label11;
        };

     label04:
        r20 = r4;

        goto label12;

     label05:
        $r11 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()>();

        if $r11 == null goto label06;

        $r13 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()>();

        r20 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>($r13, r18, r19);

        goto label12;

     label06:
        if r4 != null goto label07;

        r20 = null;

        goto label12;

     label07:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("Modification result is a REBUILDING_CHANGE, but rebalancing required");

        throw $r12;

     label08:
        $r9 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()>();

        if $r9 == null goto label09;

        $r10 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()>();

        r20 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>($r2, $r10, r18, r19);

        goto label12;

     label09:
        if r4 == null goto label10;

        r20 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode combine(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>($r2, r18, r19);

        goto label12;

     label10:
        r20 = null;

        goto label12;

     label11:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label12:
        $r21 = staticinvoke <com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult mutationResult(java.lang.Object,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstModificationResult)>(r5, r4, r20, $r6);

        return $r21;
    }

    public static com.mycila.inject.internal.guava.collect.BstMutationResult extractMin(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstBalancePolicy)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r2;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r6, $r10;
        com.mycila.inject.internal.guava.collect.BstSide $r3, $r5, $r9, $r12;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r8, $r11, $r13;
        java.lang.Object $r4;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r7;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r3);

        if $z0 == 0 goto label1;

        $r9 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)>($r9);

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult extractMin(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>($r10, r1, r2);

        $r12 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r13 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult lift(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>(r0, $r12, r1, r2);

        return $r13;

     label1:
        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r5);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstModificationResult rebalancingChange(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r0, null);

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult mutationResult(java.lang.Object,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstModificationResult)>($r4, r0, $r6, $r7);

        return $r8;
    }

    public static com.mycila.inject.internal.guava.collect.BstMutationResult extractMax(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstBalancePolicy)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r2;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r6, $r10;
        com.mycila.inject.internal.guava.collect.BstSide $r3, $r5, $r9, $r12;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r8, $r11, $r13;
        java.lang.Object $r4;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r7;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r3);

        if $z0 == 0 goto label1;

        $r9 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)>($r9);

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult extractMax(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>($r10, r1, r2);

        $r12 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r13 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult lift(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>(r0, $r12, r1, r2);

        return $r13;

     label1:
        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r5);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstModificationResult rebalancingChange(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r0, null);

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstMutationResult mutationResult(java.lang.Object,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstModificationResult)>($r4, r0, $r6, $r7);

        return $r8;
    }

    public static com.mycila.inject.internal.guava.collect.BstNode insertMin(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstBalancePolicy)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r2;
        com.mycila.inject.internal.guava.collect.BstNode r0, r3, $r5, $r6, $r8, $r9, $r10;
        com.mycila.inject.internal.guava.collect.BstSide $r4, $r7;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter2: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r2 := @parameter3: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r10 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createLeaf(com.mycila.inject.internal.guava.collect.BstNode)>(r0);

        return $r10;

     label1:
        $r4 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r4);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstNode insertMin(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>($r5, r0, r1, r2);

        $r7 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r8 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r7);

        $r9 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r1, r3, $r6, $r8);

        return $r9;
    }

    public static com.mycila.inject.internal.guava.collect.BstNode insertMax(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstBalancePolicy)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r2;
        com.mycila.inject.internal.guava.collect.BstNode r0, r3, $r5, $r7, $r8, $r9, $r10;
        com.mycila.inject.internal.guava.collect.BstSide $r4, $r6;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter2: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r2 := @parameter3: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r10 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createLeaf(com.mycila.inject.internal.guava.collect.BstNode)>(r0);

        return $r10;

     label1:
        $r4 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r4);

        $r6 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r7 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r6);

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstNode insertMax(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>($r7, r0, r1, r2);

        $r9 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r1, r3, $r5, $r8);

        return $r9;
    }
}
