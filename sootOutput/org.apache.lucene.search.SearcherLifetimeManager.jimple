public class org.apache.lucene.search.SearcherLifetimeManager extends java.lang.Object implements java.io.Closeable
{
    static final double NANOS_PER_SEC;
    private volatile boolean closed;
    private final java.util.concurrent.ConcurrentHashMap searchers;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.lucene.search.SearcherLifetimeManager r0;

        r0 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers> = $r1;

        return;
    }

    private void ensureOpen()
    {
        org.apache.lucene.store.AlreadyClosedException $r1;
        org.apache.lucene.search.SearcherLifetimeManager r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        $z0 = r0.<org.apache.lucene.search.SearcherLifetimeManager: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this SearcherLifetimeManager instance is closed");

        throw $r1;

     label1:
        return;
    }

    public long record(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        long $l0;
        org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker $r16, r20;
        java.lang.Long $r5, $r18;
        java.lang.String $r15;
        org.apache.lucene.index.DirectoryReader $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r17;
        java.lang.IllegalArgumentException $r8;
        org.apache.lucene.search.SearcherLifetimeManager r0;
        java.lang.Object $r6, $r19;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;
        org.apache.lucene.index.IndexReader $r2;
        org.apache.lucene.search.IndexSearcher r1, $r7, $r13;

        r0 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        r1 := @parameter0: org.apache.lucene.search.IndexSearcher;

        specialinvoke r0.<org.apache.lucene.search.SearcherLifetimeManager: void ensureOpen()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $r3 = (org.apache.lucene.index.DirectoryReader) $r2;

        $l0 = virtualinvoke $r3.<org.apache.lucene.index.DirectoryReader: long getVersion()>();

        $r4 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r5);

        r20 = (org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker) $r6;

        if r20 != null goto label1;

        $r16 = new org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker;

        specialinvoke $r16.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: void <init>(org.apache.lucene.search.IndexSearcher)>(r1);

        $r17 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r19 = virtualinvoke $r17.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r18, $r16);

        if $r19 == null goto label2;

        virtualinvoke $r16.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: void close()>();

        goto label2;

     label1:
        $r7 = r20.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: org.apache.lucene.search.IndexSearcher searcher>;

        if $r7 == r1 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs old=");

        $r13 = r20.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: org.apache.lucene.search.IndexSearcher searcher>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label2:
        return $l0;
    }

    public org.apache.lucene.search.IndexSearcher acquire(long)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        long l0;
        org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker r4;
        org.apache.lucene.search.SearcherLifetimeManager r0;
        java.lang.Long $r2;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader $r6;
        org.apache.lucene.search.IndexSearcher $r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.lucene.search.SearcherLifetimeManager: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker) $r3;

        if r4 == null goto label1;

        $r5 = r4.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: org.apache.lucene.search.IndexSearcher searcher>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = virtualinvoke $r6.<org.apache.lucene.index.IndexReader: boolean tryIncRef()>();

        if $z0 == 0 goto label1;

        $r7 = r4.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: org.apache.lucene.search.IndexSearcher searcher>;

        return $r7;

     label1:
        return null;
    }

    public void release(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.SearcherLifetimeManager r2;
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.IndexSearcher r0;

        r2 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        virtualinvoke $r1.<org.apache.lucene.index.IndexReader: void decRef()>();

        return;
    }

    public synchronized void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner) throws java.io.IOException
    {
        org.apache.lucene.search.SearcherLifetimeManager$Pruner r8;
        long $l0, $l2;
        org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker r7, r13;
        java.util.ArrayList $r0;
        byte $b1;
        java.lang.Long $r11;
        boolean $z0, $z1, $z2;
        double $d0, d1, d2, d3;
        java.util.Iterator $r4, $r5;
        java.util.Collection $r3;
        java.util.concurrent.ConcurrentHashMap $r2, $r10;
        org.apache.lucene.search.SearcherLifetimeManager r1;
        java.lang.Object $r6, $r12;
        org.apache.lucene.search.IndexSearcher $r9;

        r1 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        r8 := @parameter0: org.apache.lucene.search.SearcherLifetimeManager$Pruner;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker) $r12;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r13);

        goto label1;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        d2 = 0.0;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $d0 = (double) $l0;

        d1 = $d0 / 1.0E9;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker) $r6;

        $b1 = d2 cmpl 0.0;

        if $b1 != 0 goto label4;

        d3 = 0.0;

        goto label5;

     label4:
        d3 = d1 - d2;

     label5:
        $r9 = r7.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: org.apache.lucene.search.IndexSearcher searcher>;

        $z2 = interfaceinvoke r8.<org.apache.lucene.search.SearcherLifetimeManager$Pruner: boolean doPrune(double,org.apache.lucene.search.IndexSearcher)>(d3, $r9);

        if $z2 == 0 goto label6;

        $r10 = r1.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $l2 = r7.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: long version>;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r11);

        virtualinvoke r7.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: void close()>();

     label6:
        d2 = r7.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: double recordTimeSec>;

        goto label3;

     label7:
        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.lang.IllegalStateException $r6;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.util.concurrent.ConcurrentHashMap $r2, $r5, $r9;
        long $l1;
        org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker r8;
        org.apache.lucene.search.SearcherLifetimeManager r0;
        java.util.ArrayList $r1;
        java.lang.Long $r10;
        int $i0;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.SearcherLifetimeManager;

        r0.<org.apache.lucene.search.SearcherLifetimeManager: boolean closed> = 1;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker) $r7;

        $r9 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $l1 = r8.<org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker: long version>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r10);

        goto label1;

     label2:
        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.lang.Iterable)>($r1);

        $r5 = r0.<org.apache.lucene.search.SearcherLifetimeManager: java.util.concurrent.ConcurrentHashMap searchers>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i0 == 0 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("another thread called record while this SearcherLifetimeManager instance was being closed; not all searchers were closed");

        throw $r6;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.search.SearcherLifetimeManager: double NANOS_PER_SEC> = 1.0E9;

        return;
    }
}
