public abstract class org.apache.cxf.service.invoker.AbstractInvoker extends java.lang.Object implements org.apache.cxf.service.invoker.Invoker
{
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.service.invoker.AbstractInvoker r0;

        r0 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object invoke(org.apache.cxf.message.Exchange, java.lang.Object)
    {
        org.apache.cxf.message.MessageContentsList $r12;
        org.apache.cxf.service.invoker.MethodDispatcher r10;
        org.apache.cxf.service.invoker.AbstractInvoker r0;
        org.apache.cxf.service.Service $r7;
        java.lang.reflect.Method $r25, r26, $r28, $r29;
        boolean $z0;
        java.util.logging.Logger $r17, $r18, $r23;
        java.util.List $r14, r27;
        java.lang.Throwable $r24;
        java.lang.Object[] $r13, $r16, $r22;
        org.apache.cxf.service.model.BindingOperationInfo r4;
        org.apache.cxf.common.i18n.Message $r15, $r21;
        org.apache.cxf.interceptor.Fault $r20;
        java.lang.String $r8, $r19;
        org.apache.cxf.message.Exchange r1;
        java.lang.Object $r2, $r3, $r5, $r9, r11, $r30;
        java.lang.Class $r6;

        r0 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r1 := @parameter0: org.apache.cxf.message.Exchange;

        r11 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: java.lang.Object getServiceObject(org.apache.cxf.message.Exchange)>(r1);

     label1:
        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/model/BindingOperationInfo;");

        r4 = (org.apache.cxf.service.model.BindingOperationInfo) $r3;

        $r5 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/Service;");

        $r7 = (org.apache.cxf.service.Service) $r5;

        $r6 = class "Lorg/apache/cxf/service/invoker/MethodDispatcher;";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r9 = interfaceinvoke $r7.<org.apache.cxf.service.Service: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (org.apache.cxf.service.invoker.MethodDispatcher) $r9;

        if r4 != null goto label2;

        $r25 = null;

        goto label3;

     label2:
        $r25 = interfaceinvoke r10.<org.apache.cxf.service.invoker.MethodDispatcher: java.lang.reflect.Method getMethod(org.apache.cxf.service.model.BindingOperationInfo)>(r4);

     label3:
        r26 = $r25;

        if $r25 != null goto label4;

        if r4 != null goto label4;

        $r18 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r15 = new org.apache.cxf.common.i18n.Message;

        $r17 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke $r15.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("MISSING_BINDING_OPERATION", $r17, $r16);

        $r19 = virtualinvoke $r15.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r18.<java.util.logging.Logger: void severe(java.lang.String)>($r19);

        $r20 = new org.apache.cxf.interceptor.Fault;

        $r21 = new org.apache.cxf.common.i18n.Message;

        $r23 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = "No binding operation info";

        $r22[1] = "unknown method";

        $r22[2] = "unknown";

        specialinvoke $r21.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("EXCEPTION_INVOKING_OBJECT", $r23, $r22);

        specialinvoke $r20.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message)>($r21);

        throw $r20;

     label4:
        r27 = null;

        $z0 = r11 instanceof java.util.List;

        if $z0 == 0 goto label5;

        $r14 = (java.util.List) r11;

        r27 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List)>($r14);

        goto label6;

     label5:
        if r11 == null goto label6;

        $r12 = new org.apache.cxf.message.MessageContentsList;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r11;

        specialinvoke $r12.<org.apache.cxf.message.MessageContentsList: void <init>(java.lang.Object[])>($r13);

        r27 = $r12;

     label6:
        $r28 = virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: java.lang.reflect.Method adjustMethodAndParams(java.lang.reflect.Method,org.apache.cxf.message.Exchange,java.util.List)>(r26, r1, r27);

        $r29 = staticinvoke <org.apache.cxf.service.invoker.AbstractInvoker: java.lang.reflect.Method matchMethod(java.lang.reflect.Method,java.lang.Object)>($r28, $r2);

        $r30 = virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: java.lang.Object invoke(org.apache.cxf.message.Exchange,java.lang.Object,java.lang.reflect.Method,java.util.List)>(r1, $r2, $r29, r27);

     label7:
        virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: void releaseServiceObject(org.apache.cxf.message.Exchange,java.lang.Object)>(r1, $r2);

        return $r30;

     label8:
        $r24 := @caughtexception;

     label9:
        virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: void releaseServiceObject(org.apache.cxf.message.Exchange,java.lang.Object)>(r1, $r2);

        throw $r24;

        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    protected java.lang.reflect.Method adjustMethodAndParams(java.lang.reflect.Method, org.apache.cxf.message.Exchange, java.util.List)
    {
        java.util.List r3;
        java.lang.reflect.Method r0;
        org.apache.cxf.message.Exchange r2;
        org.apache.cxf.service.invoker.AbstractInvoker r1;

        r1 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.apache.cxf.message.Exchange;

        r3 := @parameter2: java.util.List;

        return r0;
    }

    protected java.lang.Object invoke(org.apache.cxf.message.Exchange, java.lang.Object, java.lang.reflect.Method, java.util.List)
    {
        org.apache.cxf.message.MessageContentsList $r6;
        org.apache.cxf.service.invoker.AbstractInvoker r1;
        org.apache.cxf.message.FaultMode $r10, $r14, $r19, $r23, $r27;
        java.lang.reflect.Method r4;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r8;
        java.lang.reflect.InvocationTargetException $r16;
        java.util.List r0;
        java.lang.Throwable $r17, r29;
        org.apache.cxf.continuations.SuspendedInvocationException $r15;
        java.lang.Object[] $r7, r28;
        org.apache.cxf.interceptor.Fault $r11, $r12, $r21, $r24;
        int $i0, i1;
        org.apache.cxf.message.Message $r9, $r13, $r18, $r22, $r26;
        java.lang.Class[] $r20;
        org.apache.cxf.message.Exchange r2;
        java.lang.Object r3, $r5;
        java.lang.Class r25;

        r1 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r2 := @parameter0: org.apache.cxf.message.Exchange;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.reflect.Method;

        r0 := @parameter3: java.util.List;

     label01:
        r28 = newarray (java.lang.Object)[0];

        if r0 == null goto label02;

        r28 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

     label02:
        $r5 = virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: java.lang.Object performInvocation(org.apache.cxf.message.Exchange,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r2, r3, r4, r28);

        $z0 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: boolean isOneWay()>();

        if $z0 == 0 goto label04;

     label03:
        return null;

     label04:
        $r6 = new org.apache.cxf.message.MessageContentsList;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r5;

        specialinvoke $r6.<org.apache.cxf.message.MessageContentsList: void <init>(java.lang.Object[])>($r7);

     label05:
        return $r6;

     label06:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        r29 = $r17;

        if $r17 != null goto label07;

        r29 = $r16;

     label07:
        virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: void checkSuspendedInvocation(org.apache.cxf.message.Exchange,java.lang.Object,java.lang.reflect.Method,java.util.List,java.lang.Throwable)>(r2, r3, r4, r0, r29);

        $r18 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r19 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode UNCHECKED_APPLICATION_FAULT>;

        interfaceinvoke $r18.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", $r19);

        $r20 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $i0 = lengthof $r20;

        i1 = 0;

     label08:
        if i1 >= $i0 goto label10;

        r25 = $r20[i1];

        $z2 = virtualinvoke r25.<java.lang.Class: boolean isInstance(java.lang.Object)>(r29);

        if $z2 == 0 goto label09;

        $r26 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r27 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode CHECKED_APPLICATION_FAULT>;

        interfaceinvoke $r26.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", $r27);

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        $z1 = r29 instanceof org.apache.cxf.interceptor.Fault;

        if $z1 == 0 goto label11;

        $r22 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r23 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode CHECKED_APPLICATION_FAULT>;

        interfaceinvoke $r22.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", $r23);

        $r24 = (org.apache.cxf.interceptor.Fault) r29;

        throw $r24;

     label11:
        $r21 = virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: org.apache.cxf.interceptor.Fault createFault(java.lang.Throwable,java.lang.reflect.Method,java.util.List,boolean)>(r29, r4, r0, 1);

        throw $r21;

     label12:
        $r15 := @caughtexception;

        virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: void checkSuspendedInvocation(org.apache.cxf.message.Exchange,java.lang.Object,java.lang.reflect.Method,java.util.List,java.lang.Throwable)>(r2, r3, r4, r0, $r15);

        throw $r15;

     label13:
        $r12 := @caughtexception;

        $r13 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r14 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode UNCHECKED_APPLICATION_FAULT>;

        interfaceinvoke $r13.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", $r14);

        throw $r12;

     label14:
        $r8 := @caughtexception;

        virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: void checkSuspendedInvocation(org.apache.cxf.message.Exchange,java.lang.Object,java.lang.reflect.Method,java.util.List,java.lang.Throwable)>(r2, r3, r4, r0, $r8);

        $r9 = interfaceinvoke r2.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r10 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode UNCHECKED_APPLICATION_FAULT>;

        interfaceinvoke $r9.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", $r10);

        $r11 = virtualinvoke r1.<org.apache.cxf.service.invoker.AbstractInvoker: org.apache.cxf.interceptor.Fault createFault(java.lang.Throwable,java.lang.reflect.Method,java.util.List,boolean)>($r8, r4, r0, 0);

        throw $r11;

        catch java.lang.reflect.InvocationTargetException from label01 to label03 with label06;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label06;
        catch org.apache.cxf.continuations.SuspendedInvocationException from label01 to label03 with label12;
        catch org.apache.cxf.continuations.SuspendedInvocationException from label04 to label05 with label12;
        catch org.apache.cxf.interceptor.Fault from label01 to label03 with label13;
        catch org.apache.cxf.interceptor.Fault from label04 to label05 with label13;
        catch java.lang.Exception from label01 to label03 with label14;
        catch java.lang.Exception from label04 to label05 with label14;
    }

    protected void checkSuspendedInvocation(org.apache.cxf.message.Exchange, java.lang.Object, java.lang.reflect.Method, java.util.List, java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.apache.cxf.continuations.SuspendedInvocationException $r3;
        java.lang.Object[] $r4;
        java.util.logging.Logger $r2, $r7;
        org.apache.cxf.message.Exchange r12;
        org.apache.cxf.service.invoker.AbstractInvoker r11;
        java.util.logging.Level $r1, $r8;
        java.util.List r10;
        java.lang.Object r5;
        java.lang.String $r9;
        java.lang.reflect.Method r6;
        boolean $z0, $z1;

        r11 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r12 := @parameter0: org.apache.cxf.message.Exchange;

        r5 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.reflect.Method;

        r10 := @parameter3: java.util.List;

        r0 := @parameter4: java.lang.Throwable;

        $z0 = r0 instanceof org.apache.cxf.continuations.SuspendedInvocationException;

        if $z0 == 0 goto label2;

        $r2 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z1 == 0 goto label1;

        $r7 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r5;

        $r9 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String toString()>();

        $r4[1] = $r9;

        $r4[2] = r10;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r8, "SUSPENDED_INVOCATION_EXCEPTION", $r4);

     label1:
        $r3 = (org.apache.cxf.continuations.SuspendedInvocationException) r0;

        throw $r3;

     label2:
        return;
    }

    protected org.apache.cxf.interceptor.Fault createFault(java.lang.Throwable, java.lang.reflect.Method, java.util.List, boolean)
    {
        java.lang.Throwable r0;
        java.lang.Object[] $r5;
        org.apache.cxf.common.i18n.Message $r4;
        java.util.logging.Logger $r7;
        org.apache.cxf.service.invoker.AbstractInvoker r9;
        java.util.List r6;
        org.apache.cxf.interceptor.Fault $r3, $r8;
        java.lang.String r1, $r10, $r11;
        java.lang.reflect.Method r2;
        boolean z0;

        r9 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r0 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.reflect.Method;

        r6 := @parameter2: java.util.List;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r8 = new org.apache.cxf.interceptor.Fault;

        specialinvoke $r8.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.Throwable)>(r0);

        return $r8;

     label1:
        if r0 != null goto label2;

        $r10 = "";

        goto label3;

     label2:
        $r10 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

     label3:
        r1 = $r10;

        if r2 != null goto label4;

        $r11 = "<null>";

        goto label5;

     label4:
        $r11 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String toString()>();

     label5:
        $r3 = new org.apache.cxf.interceptor.Fault;

        $r4 = new org.apache.cxf.common.i18n.Message;

        $r7 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r1;

        $r5[1] = $r11;

        $r5[2] = r6;

        specialinvoke $r4.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("EXCEPTION_INVOKING_OBJECT", $r7, $r5);

        specialinvoke $r3.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r4, r0);

        return $r3;
    }

    protected java.lang.Object performInvocation(org.apache.cxf.message.Exchange, java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object[] $r3, $r8, r12;
        java.util.logging.Logger $r5, $r9;
        org.apache.cxf.message.Exchange r2;
        org.apache.cxf.service.invoker.AbstractInvoker r0;
        java.util.logging.Level $r4, $r10;
        java.util.List $r11;
        java.lang.Object r6, $r7;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r2 := @parameter0: org.apache.cxf.message.Exchange;

        r6 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.reflect.Method;

        r12 := @parameter3: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.apache.cxf.service.invoker.AbstractInvoker: java.lang.Object[] insertExchange(java.lang.reflect.Method,java.lang.Object[],org.apache.cxf.message.Exchange)>(r1, r12, r2);

        $r5 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label1;

        $r9 = <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = r6;

        $r8[1] = r1;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r8[2] = $r11;

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r10, "INVOKING_METHOD", $r8);

     label1:
        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r6, $r3);

        return $r7;
    }

    public java.lang.Object[] insertExchange(java.lang.reflect.Method, java.lang.Object[], org.apache.cxf.message.Exchange)
    {
        java.lang.Object[] r0, r9;
        org.apache.cxf.service.invoker.AbstractInvoker r8;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.reflect.Method r1;
        boolean $z0;
        java.lang.Class[] $r2, $r3;
        org.apache.cxf.message.Exchange r7;
        java.lang.Class $r4;
        java.lang.Object $r5, $r6;

        r8 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Object[];

        r7 := @parameter2: org.apache.cxf.message.Exchange;

        r9 = r0;

        i5 = 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if i5 >= $i0 goto label7;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r4 = $r3[i5];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/cxf/message/Exchange;");

        if $z0 == 0 goto label6;

        $i1 = lengthof r0;

        $i2 = $i1 + 1;

        r9 = newarray (java.lang.Object)[$i2];

        i6 = 0;

     label2:
        $i3 = lengthof r9;

        if i6 >= $i3 goto label6;

        if i6 != i5 goto label3;

        r9[i6] = r7;

        goto label5;

     label3:
        if i6 <= i5 goto label4;

        $i4 = i6 - 1;

        $r6 = r0[$i4];

        r9[i6] = $r6;

        goto label5;

     label4:
        $r5 = r0[i6];

        r9[i6] = $r5;

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        return r9;
    }

    public abstract java.lang.Object getServiceObject(org.apache.cxf.message.Exchange);

    public void releaseServiceObject(org.apache.cxf.message.Exchange, java.lang.Object)
    {
        java.lang.Object r2;
        org.apache.cxf.message.Exchange r1;
        org.apache.cxf.service.invoker.AbstractInvoker r0;

        r0 := @this: org.apache.cxf.service.invoker.AbstractInvoker;

        r1 := @parameter0: org.apache.cxf.message.Exchange;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    private static java.lang.reflect.Method matchMethod(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Class[] $r3;
        int $i0, i1;
        java.lang.Object r0;
        java.lang.Class $r2, $r4;
        java.lang.reflect.Method r1, $r5;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.apache.cxf.service.invoker.AbstractInvoker: boolean isJdkDynamicProxy(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label3;

        $r4 = $r3[i1];

        $r5 = staticinvoke <org.apache.cxf.service.invoker.AbstractInvoker: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)>(r1, $r4);

        $z1 = virtualinvoke r1.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

        return $r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }

    public static boolean isJdkDynamicProxy(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        java.lang.reflect.Method r4;

        r4 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Class;

        if r4 == null goto label4;

        if r0 == null goto label4;

     label1:
        $r1 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, $r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return r4;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/service/invoker/AbstractInvoker;");

        <org.apache.cxf.service.invoker.AbstractInvoker: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
