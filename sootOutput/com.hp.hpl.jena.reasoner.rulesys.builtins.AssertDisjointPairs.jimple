public class com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs;

        return "assertDisjointPairs";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs;

        return 1;
    }

    public void headAction(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        com.hp.hpl.jena.graph.Node $r3, r7, r10, $r13;
        com.hp.hpl.jena.rdf.model.Property $r12;
        int i0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] r2;
        java.util.Iterator $r5, $r8;
        com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs r0;
        com.hp.hpl.jena.graph.Triple $r11;
        java.util.List $r4;
        java.lang.Object $r6, $r9;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.AssertDisjointPairs: void checkArgs(int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i0, r1);

        $r3 = r2[0];

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: java.util.List convertList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r3, r1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $z2 = virtualinvoke r7.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r10);

        if $z2 != 0 goto label3;

        $r11 = new com.hp.hpl.jena.graph.Triple;

        $r12 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property differentFrom>;

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r11.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r7, $r13, r10);

        interfaceinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: void add(com.hp.hpl.jena.graph.Triple)>($r11);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }
}
