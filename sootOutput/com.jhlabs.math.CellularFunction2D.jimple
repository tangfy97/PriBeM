public class com.jhlabs.math.CellularFunction2D extends java.lang.Object implements com.jhlabs.math.Function2D
{
    public float distancePower;
    public boolean cells;
    public boolean angular;
    private float[] coefficients;
    private java.util.Random random;
    private com.jhlabs.math.CellularFunction2D$Point[] results;

    public void <init>()
    {
        com.jhlabs.math.CellularFunction2D$Point[] $r3, $r4, $r6;
        com.jhlabs.math.CellularFunction2D r0;
        float[] $r1;
        java.util.Random $r2;
        com.jhlabs.math.CellularFunction2D$Point $r5;
        int $i0, i1;

        r0 := @this: com.jhlabs.math.CellularFunction2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.math.CellularFunction2D: float distancePower> = 2.0F;

        r0.<com.jhlabs.math.CellularFunction2D: boolean cells> = 0;

        r0.<com.jhlabs.math.CellularFunction2D: boolean angular> = 0;

        $r1 = newarray (float)[4];

        $r1[0] = 1.0F;

        $r1[1] = 0.0F;

        $r1[2] = 0.0F;

        $r1[3] = 0.0F;

        r0.<com.jhlabs.math.CellularFunction2D: float[] coefficients> = $r1;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r0.<com.jhlabs.math.CellularFunction2D: java.util.Random random> = $r2;

        r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results> = null;

        $r3 = newarray (com.jhlabs.math.CellularFunction2D$Point)[2];

        r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results> = $r3;

        i1 = 0;

     label1:
        $r4 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $r5 = new com.jhlabs.math.CellularFunction2D$Point;

        specialinvoke $r5.<com.jhlabs.math.CellularFunction2D$Point: void <init>(com.jhlabs.math.CellularFunction2D)>(r0);

        $r6[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setCoefficient(int, float)
    {
        com.jhlabs.math.CellularFunction2D r0;
        int i0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.math.CellularFunction2D;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<com.jhlabs.math.CellularFunction2D: float[] coefficients>;

        $r1[i0] = f0;

        return;
    }

    public float getCoefficient(int)
    {
        com.jhlabs.math.CellularFunction2D r0;
        int i0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.math.CellularFunction2D;

        i0 := @parameter0: int;

        $r1 = r0.<com.jhlabs.math.CellularFunction2D: float[] coefficients>;

        $f0 = $r1[i0];

        return $f0;
    }

    private float checkCube(float, float, int, int, com.jhlabs.math.CellularFunction2D$Point[])
    {
        com.jhlabs.math.CellularFunction2D r0;
        byte $b6, $b7, $b8, $b9;
        com.jhlabs.math.CellularFunction2D$Point[] r3;
        long $l5;
        java.util.Random $r1, $r2, $r5, $r6;
        float $f0, $f1, $f2, f3, $f4, $f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, f20;
        com.jhlabs.math.CellularFunction2D$Point $r4, $r7, $r8, $r9, r10, r11;
        int i0, i1, $i2, $i3, $i4, $i10, $i11, $i12, $i13, i14, i15, $i16, i17, $i18, $i20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: com.jhlabs.math.CellularFunction2D;

        f3 := @parameter0: float;

        f6 := @parameter1: float;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: com.jhlabs.math.CellularFunction2D$Point[];

        $r1 = r0.<com.jhlabs.math.CellularFunction2D: java.util.Random random>;

        $i3 = 571 * i0;

        $i2 = 23 * i1;

        $i4 = $i3 + $i2;

        $l5 = (long) $i4;

        virtualinvoke $r1.<java.util.Random: void setSeed(long)>($l5);

        $r2 = r0.<com.jhlabs.math.CellularFunction2D: java.util.Random random>;

        virtualinvoke $r2.<java.util.Random: int nextInt()>();

        i14 = 0;

     label01:
        if i14 >= 4 goto label11;

        $r5 = r0.<com.jhlabs.math.CellularFunction2D: java.util.Random random>;

        $f1 = virtualinvoke $r5.<java.util.Random: float nextFloat()>();

        $r6 = r0.<com.jhlabs.math.CellularFunction2D: java.util.Random random>;

        $f2 = virtualinvoke $r6.<java.util.Random: float nextFloat()>();

        $f4 = f3 - $f1;

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $f7 = f6 - $f2;

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $f9 = r0.<com.jhlabs.math.CellularFunction2D: float distancePower>;

        $b6 = $f9 cmpl 1.0F;

        if $b6 != 0 goto label02;

        f20 = $f5 + $f8;

        goto label04;

     label02:
        $f10 = r0.<com.jhlabs.math.CellularFunction2D: float distancePower>;

        $b7 = $f10 cmpl 2.0F;

        if $b7 != 0 goto label03;

        $f18 = $f5 * $f5;

        $f17 = $f8 * $f8;

        $f19 = $f18 + $f17;

        $d10 = (double) $f19;

        $d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);

        f20 = (float) $d11;

        goto label04;

     label03:
        $d1 = (double) $f5;

        $f11 = r0.<com.jhlabs.math.CellularFunction2D: float distancePower>;

        $d0 = (double) $f11;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $d4 = (double) $f8;

        $f12 = r0.<com.jhlabs.math.CellularFunction2D: float distancePower>;

        $d3 = (double) $f12;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, $d3);

        $d7 = $d2 + $d5;

        $f13 = r0.<com.jhlabs.math.CellularFunction2D: float distancePower>;

        $f14 = 1.0F / $f13;

        $d6 = (double) $f14;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>($d7, $d6);

        f20 = (float) $d8;

     label04:
        i15 = 0;

     label05:
        $i16 = lengthof r3;

        if i15 >= $i16 goto label10;

        $r7 = r3[i15];

        $f15 = $r7.<com.jhlabs.math.CellularFunction2D$Point: float distance>;

        $d9 = (double) $f15;

        $b8 = $d9 cmpl #Infinity;

        if $b8 != 0 goto label06;

        r10 = r3[i15];

        r10.<com.jhlabs.math.CellularFunction2D$Point: float distance> = f20;

        r10.<com.jhlabs.math.CellularFunction2D$Point: float x> = $f1;

        r10.<com.jhlabs.math.CellularFunction2D$Point: float y> = $f2;

        r3[i15] = r10;

        goto label10;

     label06:
        $r8 = r3[i15];

        $f16 = $r8.<com.jhlabs.math.CellularFunction2D$Point: float distance>;

        $b9 = f20 cmpg $f16;

        $i18 = (int) $b9;

        if $i18 >= 0 goto label09;

        $i10 = lengthof r3;

        $i11 = $i10 - 1;

        r11 = r3[$i11];

        $i12 = lengthof r3;

        i17 = $i12 - 1;

     label07:
        if i17 <= i15 goto label08;

        $i13 = i17 - 1;

        $r9 = r3[$i13];

        r3[i17] = $r9;

        $i20 = (int) -1;

        i17 = i17 + $i20;

        goto label07;

     label08:
        r11.<com.jhlabs.math.CellularFunction2D$Point: float distance> = f20;

        r11.<com.jhlabs.math.CellularFunction2D$Point: float x> = $f1;

        r11.<com.jhlabs.math.CellularFunction2D$Point: float y> = $f2;

        r3[i15] = r11;

        goto label10;

     label09:
        i15 = i15 + 1;

        goto label05;

     label10:
        i14 = i14 + 1;

        goto label01;

     label11:
        $r4 = r3[1];

        $f0 = $r4.<com.jhlabs.math.CellularFunction2D$Point: float distance>;

        return $f0;
    }

    public float evaluate(float, float)
    {
        com.jhlabs.math.CellularFunction2D r0;
        byte $b2, $b3, $b4, $b6, $b7, $b13, $b14, $b23;
        com.jhlabs.math.CellularFunction2D$Point[] $r1, $r2, $r3, $r5, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        float[] $r7;
        boolean $z0;
        float f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, f30, $f31, f32, f33;
        com.jhlabs.math.CellularFunction2D$Point $r4, $r6, $r9, $r19;
        int $i0, i1, $i5, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.jhlabs.math.CellularFunction2D;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i21 = 0;

     label01:
        $r1 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $i0 = lengthof $r1;

        if i21 >= $i0 goto label02;

        $r18 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $r19 = $r18[i21];

        $r19.<com.jhlabs.math.CellularFunction2D$Point: float distance> = #InfinityF;

        i21 = i21 + 1;

        goto label01;

     label02:
        i22 = (int) f0;

        i1 = (int) f1;

        $f2 = (float) i22;

        f3 = f0 - $f2;

        $f4 = (float) i1;

        f5 = f1 - $f4;

        $r2 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $f6 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>(f3, f5, i22, i1, $r2);

        f30 = $f6;

        $b2 = $f6 cmpl f5;

        $i25 = (int) $b2;

        if $i25 <= 0 goto label03;

        $f29 = f5 + 1.0F;

        $i20 = i1 - 1;

        $r17 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        f30 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>(f3, $f29, i22, $i20, $r17);

     label03:
        $f7 = 1.0F - f5;

        $b3 = f30 cmpl $f7;

        $i26 = (int) $b3;

        if $i26 <= 0 goto label04;

        $f28 = f5 - 1.0F;

        $i19 = i1 + 1;

        $r16 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        f30 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>(f3, $f28, i22, $i19, $r16);

     label04:
        $b4 = f30 cmpl f3;

        $i27 = (int) $b4;

        if $i27 <= 0 goto label06;

        $f22 = f3 + 1.0F;

        $i12 = i22 - 1;

        $r13 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f22, f5, $i12, i1, $r13);

        $b13 = f30 cmpl f5;

        $i28 = (int) $b13;

        if $i28 <= 0 goto label05;

        $f27 = f3 + 1.0F;

        $f26 = f5 + 1.0F;

        $i18 = i22 - 1;

        $i17 = i1 - 1;

        $r15 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        f30 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f27, $f26, $i18, $i17, $r15);

     label05:
        $f23 = 1.0F - f5;

        $b14 = f30 cmpl $f23;

        $i29 = (int) $b14;

        if $i29 <= 0 goto label06;

        $f25 = f3 + 1.0F;

        $f24 = f5 - 1.0F;

        $i16 = i22 - 1;

        $i15 = i1 + 1;

        $r14 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        f30 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f25, $f24, $i16, $i15, $r14);

     label06:
        $f31 = 1.0F - f3;

        $b23 = f30 cmpl $f31;

        $i30 = (int) $b23;

        if $i30 <= 0 goto label08;

        $f15 = f3 - 1.0F;

        $i5 = i22 + 1;

        $r10 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $f16 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f15, f5, $i5, i1, $r10);

        f32 = $f16;

        $b6 = $f16 cmpl f5;

        $i31 = (int) $b6;

        if $i31 <= 0 goto label07;

        $f21 = f3 - 1.0F;

        $f20 = f5 + 1.0F;

        $i11 = i22 + 1;

        $i10 = i1 - 1;

        $r12 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        f32 = specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f21, $f20, $i11, $i10, $r12);

     label07:
        $f17 = 1.0F - f5;

        $b7 = f32 cmpl $f17;

        $i32 = (int) $b7;

        if $i32 <= 0 goto label08;

        $f19 = f3 - 1.0F;

        $f18 = f5 - 1.0F;

        $i9 = i22 + 1;

        $i8 = i1 + 1;

        $r11 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        specialinvoke r0.<com.jhlabs.math.CellularFunction2D: float checkCube(float,float,int,int,com.jhlabs.math.CellularFunction2D$Point[])>($f19, $f18, $i9, $i8, $r11);

     label08:
        f33 = 0.0F;

        i24 = 0;

     label09:
        if i24 >= 2 goto label10;

        $r7 = r0.<com.jhlabs.math.CellularFunction2D: float[] coefficients>;

        $f13 = $r7[i24];

        $r8 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $r9 = $r8[i24];

        $f12 = $r9.<com.jhlabs.math.CellularFunction2D$Point: float distance>;

        $f14 = $f13 * $f12;

        f33 = f33 + $f14;

        i24 = i24 + 1;

        goto label09;

     label10:
        $z0 = r0.<com.jhlabs.math.CellularFunction2D: boolean angular>;

        if $z0 == 0 goto label11;

        $d2 = (double) f33;

        $r3 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $r4 = $r3[0];

        $f8 = $r4.<com.jhlabs.math.CellularFunction2D$Point: float y>;

        $f9 = f5 - $f8;

        $d1 = (double) $f9;

        $r5 = r0.<com.jhlabs.math.CellularFunction2D: com.jhlabs.math.CellularFunction2D$Point[] results>;

        $r6 = $r5[0];

        $f10 = $r6.<com.jhlabs.math.CellularFunction2D$Point: float x>;

        $f11 = f3 - $f10;

        $d0 = (double) $f11;

        $d3 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $d4 = $d3 / 6.283185307179586;

        $d5 = $d4 + 0.5;

        $d6 = $d2 + $d5;

        f33 = (float) $d6;

     label11:
        return f33;
    }
}
