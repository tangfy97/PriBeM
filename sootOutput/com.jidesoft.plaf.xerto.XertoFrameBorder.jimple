class com.jidesoft.plaf.xerto.XertoFrameBorder extends java.lang.Object implements javax.swing.border.Border, javax.swing.plaf.UIResource
{
    private static java.awt.Color[] _colors;
    private java.awt.Insets _insets;

    public void <init>(java.awt.Insets)
    {
        java.awt.Insets r1;
        com.jidesoft.plaf.xerto.XertoFrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoFrameBorder;

        r1 := @parameter0: java.awt.Insets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.plaf.xerto.XertoFrameBorder: java.awt.Insets _insets> = r1;

        return;
    }

    public java.awt.Insets getBorderInsets(java.awt.Component)
    {
        java.awt.Insets $r1;
        java.awt.Component r2;
        com.jidesoft.plaf.xerto.XertoFrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoFrameBorder;

        r2 := @parameter0: java.awt.Component;

        $r1 = r0.<com.jidesoft.plaf.xerto.XertoFrameBorder: java.awt.Insets _insets>;

        return $r1;
    }

    public boolean isBorderOpaque()
    {
        com.jidesoft.plaf.xerto.XertoFrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoFrameBorder;

        return 1;
    }

    public void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int)
    {
        java.awt.Color $r3;
        com.jidesoft.plaf.xerto.XertoFrameBorder r4;
        int $i0, i1, i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.awt.Component r5;
        java.awt.Graphics r1;
        java.awt.Color[] $r0, $r2;

        r4 := @this: com.jidesoft.plaf.xerto.XertoFrameBorder;

        r5 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Graphics;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i6 := @parameter5: int;

        i13 = 0;

     label1:
        $r0 = <com.jidesoft.plaf.xerto.XertoFrameBorder: java.awt.Color[] _colors>;

        $i0 = lengthof $r0;

        if i13 >= $i0 goto label2;

        $r2 = <com.jidesoft.plaf.xerto.XertoFrameBorder: java.awt.Color[] _colors>;

        $r3 = $r2[i13];

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i12 = i1 + i13;

        $i11 = i2 + i13;

        $i4 = i13 * 2;

        $i5 = i3 - $i4;

        $i10 = $i5 - 1;

        $i7 = i13 * 2;

        $i8 = i6 - $i7;

        $i9 = $i8 - 1;

        virtualinvoke r1.<java.awt.Graphics: void drawRect(int,int,int,int)>($i12, $i11, $i10, $i9);

        i13 = i13 + 1;

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.awt.Color $r1, $r2, $r3, $r4;
        java.awt.Color[] $r0;

        $r0 = newarray (java.awt.Color)[4];

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(142, 145, 128);

        $r0[0] = $r1;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int)>(172, 172, 153);

        $r0[1] = $r2;

        $r3 = new java.awt.Color;

        specialinvoke $r3.<java.awt.Color: void <init>(int,int,int)>(203, 198, 181);

        $r0[2] = $r3;

        $r4 = new java.awt.Color;

        specialinvoke $r4.<java.awt.Color: void <init>(int,int,int)>(213, 207, 188);

        $r0[3] = $r4;

        <com.jidesoft.plaf.xerto.XertoFrameBorder: java.awt.Color[] _colors> = $r0;

        return;
    }
}
