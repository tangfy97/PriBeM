public abstract class groovyjarjarantlr.CharScanner extends java.lang.Object implements groovyjarjarantlr.TokenStream
{
    static final char NO_CHAR;
    public static final char EOF_CHAR;
    protected groovyjarjarantlr.ANTLRStringBuffer text;
    protected boolean saveConsumedInput;
    protected java.lang.Class tokenObjectClass;
    protected boolean caseSensitive;
    protected boolean caseSensitiveLiterals;
    protected java.util.Hashtable literals;
    protected int tabsize;
    protected groovyjarjarantlr.Token _returnToken;
    protected groovyjarjarantlr.ANTLRHashString hashString;
    protected groovyjarjarantlr.LexerSharedInputState inputState;
    protected boolean commitToPath;
    protected int traceDepth;

    public void <init>()
    {
        groovyjarjarantlr.ANTLRHashString $r2;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.ANTLRStringBuffer $r1;

        r0 := @this: groovyjarjarantlr.CharScanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.CharScanner: boolean saveConsumedInput> = 1;

        r0.<groovyjarjarantlr.CharScanner: boolean caseSensitive> = 1;

        r0.<groovyjarjarantlr.CharScanner: boolean caseSensitiveLiterals> = 1;

        r0.<groovyjarjarantlr.CharScanner: int tabsize> = 8;

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.Token _returnToken> = null;

        r0.<groovyjarjarantlr.CharScanner: boolean commitToPath> = 0;

        r0.<groovyjarjarantlr.CharScanner: int traceDepth> = 0;

        $r1 = new groovyjarjarantlr.ANTLRStringBuffer;

        specialinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: void <init>()>();

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text> = $r1;

        $r2 = new groovyjarjarantlr.ANTLRHashString;

        specialinvoke $r2.<groovyjarjarantlr.ANTLRHashString: void <init>(groovyjarjarantlr.CharScanner)>(r0);

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRHashString hashString> = $r2;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void setTokenObjectClass(java.lang.String)>("groovyjarjarantlr.CommonToken");

        return;
    }

    public void <init>(groovyjarjarantlr.InputBuffer)
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.InputBuffer r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r2 := @parameter0: groovyjarjarantlr.InputBuffer;

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void <init>()>();

        $r1 = new groovyjarjarantlr.LexerSharedInputState;

        specialinvoke $r1.<groovyjarjarantlr.LexerSharedInputState: void <init>(groovyjarjarantlr.InputBuffer)>(r2);

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState> = $r1;

        return;
    }

    public void <init>(groovyjarjarantlr.LexerSharedInputState)
    {
        groovyjarjarantlr.LexerSharedInputState r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: groovyjarjarantlr.LexerSharedInputState;

        specialinvoke r0.<groovyjarjarantlr.CharScanner: void <init>()>();

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState> = r1;

        return;
    }

    public void append(char)
    {
        groovyjarjarantlr.ANTLRStringBuffer $r1;
        char c0;
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        c0 := @parameter0: char;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean saveConsumedInput>;

        if $z0 == 0 goto label1;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        virtualinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: void append(char)>(c0);

     label1:
        return;
    }

    public void append(java.lang.String)
    {
        groovyjarjarantlr.ANTLRStringBuffer $r2;
        java.lang.String r1;
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean saveConsumedInput>;

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        virtualinvoke $r2.<groovyjarjarantlr.ANTLRStringBuffer: void append(java.lang.String)>(r1);

     label1:
        return;
    }

    public void commit()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.InputBuffer $r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        virtualinvoke $r2.<groovyjarjarantlr.InputBuffer: void commit()>();

        return;
    }

    public void consume() throws groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r1, $r2, $r4, $r5;
        char $c1, $c2;
        groovyjarjarantlr.InputBuffer $r3, $r6;
        int $i0, $i3, $i4, $i5;
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int guessing>;

        if $i0 != 0 goto label4;

        $c1 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean caseSensitive>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void append(char)>($c1);

        goto label2;

     label1:
        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r3 = $r2.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        $c2 = virtualinvoke $r3.<groovyjarjarantlr.InputBuffer: char LA(int)>(1);

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void append(char)>($c2);

     label2:
        $i5 = (int) $c1;

        if $i5 != 9 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void tab()>();

        goto label4;

     label3:
        $r4 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i3 = $r4.<groovyjarjarantlr.LexerSharedInputState: int column>;

        $i4 = $i3 + 1;

        $r4.<groovyjarjarantlr.LexerSharedInputState: int column> = $i4;

     label4:
        $r5 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r6 = $r5.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        virtualinvoke $r6.<groovyjarjarantlr.InputBuffer: void consume()>();

        return;
    }

    public void consumeUntil(int) throws groovyjarjarantlr.CharStreamException
    {
        int i2, $i3, $i5, $i6;
        char $c0, $c1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i2 := @parameter0: int;

     label1:
        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i3 = (int) $c0;

        $i5 = (int) 65535;

        if $i3 == $i5 goto label2;

        $c1 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i6 = (int) $c1;

        if $i6 == i2 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        goto label1;

     label2:
        return;
    }

    public void consumeUntil(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.CharStreamException
    {
        char $c0, $c1;
        groovyjarjarantlr.collections.impl.BitSet r1;
        int $i2, $i4, $i5;
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

     label1:
        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i2 = (int) $c0;

        $i4 = (int) 65535;

        if $i2 == $i4 goto label2;

        $c1 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i5 = (int) $c1;

        $z0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: boolean member(int)>($i5);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        goto label1;

     label2:
        return;
    }

    public boolean getCaseSensitive()
    {
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean caseSensitive>;

        return $z0;
    }

    public final boolean getCaseSensitiveLiterals()
    {
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean caseSensitiveLiterals>;

        return $z0;
    }

    public int getColumn()
    {
        int $i0;
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int column>;

        return $i0;
    }

    public void setColumn(int)
    {
        int i0;
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r1.<groovyjarjarantlr.LexerSharedInputState: int column> = i0;

        return;
    }

    public boolean getCommitToPath()
    {
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean commitToPath>;

        return $z0;
    }

    public java.lang.String getFilename()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        java.lang.String $r2;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: java.lang.String filename>;

        return $r2;
    }

    public groovyjarjarantlr.InputBuffer getInputBuffer()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.InputBuffer $r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        return $r2;
    }

    public groovyjarjarantlr.LexerSharedInputState getInputState()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        return $r1;
    }

    public void setInputState(groovyjarjarantlr.LexerSharedInputState)
    {
        groovyjarjarantlr.LexerSharedInputState r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: groovyjarjarantlr.LexerSharedInputState;

        r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState> = r1;

        return;
    }

    public int getLine()
    {
        int $i0;
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int line>;

        return $i0;
    }

    public java.lang.String getText()
    {
        java.lang.String $r2;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.ANTLRStringBuffer $r1;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public groovyjarjarantlr.Token getTokenObject()
    {
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.Token $r1;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.Token _returnToken>;

        return $r1;
    }

    public char LA(int) throws groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.LexerSharedInputState $r1, $r3;
        char $c1, $c2, $c3;
        groovyjarjarantlr.InputBuffer $r2, $r4;
        int i0;
        groovyjarjarantlr.CharScanner r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

        $z0 = r0.<groovyjarjarantlr.CharScanner: boolean caseSensitive>;

        if $z0 == 0 goto label1;

        $r3 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r4 = $r3.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        $c3 = virtualinvoke $r4.<groovyjarjarantlr.InputBuffer: char LA(int)>(i0);

        return $c3;

     label1:
        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        $c1 = virtualinvoke $r2.<groovyjarjarantlr.InputBuffer: char LA(int)>(i0);

        $c2 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char toLower(char)>($c1);

        return $c2;
    }

    protected groovyjarjarantlr.Token makeToken(int)
    {
        groovyjarjarantlr.LexerSharedInputState $r3, $r4;
        java.lang.StringBuffer $r6, $r7, $r9, $r13, $r14, $r16;
        int i0, $i1, $i2;
        java.lang.InstantiationException $r12;
        java.lang.String $r10, $r17;
        groovyjarjarantlr.Token $r11, r18;
        java.lang.IllegalAccessException $r5;
        java.lang.Class $r1, $r8, $r15;
        java.lang.Object $r2;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<groovyjarjarantlr.CharScanner: java.lang.Class tokenObjectClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r18 = (groovyjarjarantlr.Token) $r2;

        virtualinvoke r18.<groovyjarjarantlr.Token: void setType(int)>(i0);

        $r3 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i1 = $r3.<groovyjarjarantlr.LexerSharedInputState: int tokenStartColumn>;

        virtualinvoke r18.<groovyjarjarantlr.Token: void setColumn(int)>($i1);

        $r4 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i2 = $r4.<groovyjarjarantlr.LexerSharedInputState: int tokenStartLine>;

        virtualinvoke r18.<groovyjarjarantlr.Token: void setLine(int)>($i2);

     label2:
        return r18;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can\'t instantiate token: ");

        $r15 = r0.<groovyjarjarantlr.CharScanner: java.lang.Class tokenObjectClass>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void panic(java.lang.String)>($r17);

        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token class is not accessible");

        $r8 = r0.<groovyjarjarantlr.CharScanner: java.lang.Class tokenObjectClass>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void panic(java.lang.String)>($r10);

     label5:
        $r11 = <groovyjarjarantlr.Token: groovyjarjarantlr.Token badToken>;

        return $r11;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public int mark()
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int $i0;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.InputBuffer $r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        $i0 = virtualinvoke $r2.<groovyjarjarantlr.InputBuffer: int mark()>();

        return $i0;
    }

    public void match(char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        int $i3, $i4;
        char $c0, c1, $c2;
        groovyjarjarantlr.MismatchedCharException $r2;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        c1 := @parameter0: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i3 = (int) $c0;

        $i4 = (int) c1;

        if $i3 == $i4 goto label1;

        $r2 = new groovyjarjarantlr.MismatchedCharException;

        $c2 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        specialinvoke $r2.<groovyjarjarantlr.MismatchedCharException: void <init>(char,char,boolean,groovyjarjarantlr.CharScanner)>($c2, c1, 0, r0);

        throw $r2;

     label1:
        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        return;
    }

    public void match(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        int $i2;
        char $c0, $c1;
        groovyjarjarantlr.collections.impl.BitSet r0;
        groovyjarjarantlr.MismatchedCharException $r3;
        groovyjarjarantlr.CharScanner r1;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.CharScanner;

        r0 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $c0 = virtualinvoke r1.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i2 = (int) $c0;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.BitSet: boolean member(int)>($i2);

        if $z0 != 0 goto label1;

        $r3 = new groovyjarjarantlr.MismatchedCharException;

        $c1 = virtualinvoke r1.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        specialinvoke $r3.<groovyjarjarantlr.MismatchedCharException: void <init>(char,groovyjarjarantlr.collections.impl.BitSet,boolean,groovyjarjarantlr.CharScanner)>($c1, r0, 0, r1);

        throw $r3;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.CharScanner: void consume()>();

        return;
    }

    public void match(java.lang.String) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        char $c1, $c2, $c3, $c4;
        int $i0, i5, $i6, $i7;
        java.lang.String r0;
        groovyjarjarantlr.MismatchedCharException $r3;
        groovyjarjarantlr.CharScanner r1;

        r1 := @this: groovyjarjarantlr.CharScanner;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = 0;

     label1:
        if i5 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c1;

        $i7 = (int) $c2;

        if $i6 == $i7 goto label2;

        $r3 = new groovyjarjarantlr.MismatchedCharException;

        $c3 = virtualinvoke r1.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        specialinvoke $r3.<groovyjarjarantlr.MismatchedCharException: void <init>(char,char,boolean,groovyjarjarantlr.CharScanner)>($c3, $c4, 0, r1);

        throw $r3;

     label2:
        virtualinvoke r1.<groovyjarjarantlr.CharScanner: void consume()>();

        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public void matchNot(char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        int $i3, $i4;
        char $c0, c1, $c2;
        groovyjarjarantlr.MismatchedCharException $r2;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        c1 := @parameter0: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i3 = (int) $c0;

        $i4 = (int) c1;

        if $i3 != $i4 goto label1;

        $r2 = new groovyjarjarantlr.MismatchedCharException;

        $c2 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        specialinvoke $r2.<groovyjarjarantlr.MismatchedCharException: void <init>(char,char,boolean,groovyjarjarantlr.CharScanner)>($c2, c1, 1, r0);

        throw $r2;

     label1:
        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        return;
    }

    public void matchRange(char, char) throws groovyjarjarantlr.MismatchedCharException, groovyjarjarantlr.CharStreamException
    {
        char $c0, c1, $c2, c3, $c4;
        int $i5, $i6, $i7, $i8;
        groovyjarjarantlr.MismatchedCharException $r2;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        c1 := @parameter0: char;

        c3 := @parameter1: char;

        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i5 = (int) $c0;

        $i6 = (int) c1;

        if $i5 < $i6 goto label1;

        $c4 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $i7 = (int) $c4;

        $i8 = (int) c3;

        if $i7 <= $i8 goto label2;

     label1:
        $r2 = new groovyjarjarantlr.MismatchedCharException;

        $c2 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        specialinvoke $r2.<groovyjarjarantlr.MismatchedCharException: void <init>(char,char,char,boolean,groovyjarjarantlr.CharScanner)>($c2, c1, c3, 0, r0);

        throw $r2;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void consume()>();

        return;
    }

    public void newline()
    {
        groovyjarjarantlr.LexerSharedInputState $r1, $r2;
        int $i0, $i1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.LexerSharedInputState: int line>;

        $i1 = $i0 + 1;

        $r1.<groovyjarjarantlr.LexerSharedInputState: int line> = $i1;

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2.<groovyjarjarantlr.LexerSharedInputState: int column> = 1;

        return;
    }

    public void tab()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: int getColumn()>();

        $i2 = $i0 - 1;

        $i1 = r0.<groovyjarjarantlr.CharScanner: int tabsize>;

        $i3 = $i2 / $i1;

        $i5 = $i3 + 1;

        $i4 = r0.<groovyjarjarantlr.CharScanner: int tabsize>;

        $i6 = $i5 * $i4;

        i7 = $i6 + 1;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void setColumn(int)>(i7);

        return;
    }

    public void setTabSize(int)
    {
        int i0;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

        r0.<groovyjarjarantlr.CharScanner: int tabsize> = i0;

        return;
    }

    public int getTabSize()
    {
        int $i0;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $i0 = r0.<groovyjarjarantlr.CharScanner: int tabsize>;

        return $i0;
    }

    public void panic()
    {
        java.io.PrintStream $r0;
        groovyjarjarantlr.CharScanner r1;

        r1 := @this: groovyjarjarantlr.CharScanner;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("CharScanner: panic");

        staticinvoke <groovyjarjarantlr.Utils: void error(java.lang.String)>("");

        return;
    }

    public void panic(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;
        groovyjarjarantlr.CharScanner r6;

        r6 := @this: groovyjarjarantlr.CharScanner;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharScanner; panic: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        staticinvoke <groovyjarjarantlr.Utils: void error(java.lang.String)>(r3);

        return;
    }

    public void reportError(groovyjarjarantlr.RecognitionException)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.RecognitionException r0;
        groovyjarjarantlr.CharScanner r2;

        r2 := @this: groovyjarjarantlr.CharScanner;

        r0 := @parameter0: groovyjarjarantlr.RecognitionException;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.Object)>(r0);

        return;
    }

    public void reportError(java.lang.String)
    {
        java.io.PrintStream $r3, $r11;
        java.lang.StringBuffer $r2, $r5, $r6, $r8, $r10, $r12, $r13;
        java.lang.String $r1, $r4, r7, $r9, $r14;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r7 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: java.lang.String getFilename()>();

        if $r1 != null goto label1;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: java.lang.String getFilename()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": error: ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return;
    }

    public void reportWarning(java.lang.String)
    {
        java.io.PrintStream $r3, $r11;
        java.lang.StringBuffer $r2, $r5, $r6, $r8, $r10, $r12, $r13;
        java.lang.String $r1, $r4, r7, $r9, $r14;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r7 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: java.lang.String getFilename()>();

        if $r1 != null goto label1;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: java.lang.String getFilename()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": warning: ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return;
    }

    public void resetText()
    {
        groovyjarjarantlr.LexerSharedInputState $r2, $r3, $r4, $r5;
        groovyjarjarantlr.ANTLRStringBuffer $r1;
        int $i0, $i1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        virtualinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: void setLength(int)>(0);

        $r3 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i0 = $r2.<groovyjarjarantlr.LexerSharedInputState: int column>;

        $r3.<groovyjarjarantlr.LexerSharedInputState: int tokenStartColumn> = $i0;

        $r5 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r4 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $i1 = $r4.<groovyjarjarantlr.LexerSharedInputState: int line>;

        $r5.<groovyjarjarantlr.LexerSharedInputState: int tokenStartLine> = $i1;

        return;
    }

    public void rewind(int)
    {
        groovyjarjarantlr.LexerSharedInputState $r1;
        int i0;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.InputBuffer $r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.LexerSharedInputState: groovyjarjarantlr.InputBuffer input>;

        virtualinvoke $r2.<groovyjarjarantlr.InputBuffer: void rewind(int)>(i0);

        return;
    }

    public void setCaseSensitive(boolean)
    {
        groovyjarjarantlr.CharScanner r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        z0 := @parameter0: boolean;

        r0.<groovyjarjarantlr.CharScanner: boolean caseSensitive> = z0;

        return;
    }

    public void setCommitToPath(boolean)
    {
        groovyjarjarantlr.CharScanner r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        z0 := @parameter0: boolean;

        r0.<groovyjarjarantlr.CharScanner: boolean commitToPath> = z0;

        return;
    }

    public void setFilename(java.lang.String)
    {
        groovyjarjarantlr.LexerSharedInputState $r2;
        java.lang.String r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r2.<groovyjarjarantlr.LexerSharedInputState: java.lang.String filename> = r1;

        return;
    }

    public void setLine(int)
    {
        int i0;
        groovyjarjarantlr.LexerSharedInputState $r1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.LexerSharedInputState inputState>;

        $r1.<groovyjarjarantlr.LexerSharedInputState: int line> = i0;

        return;
    }

    public void setText(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.CharScanner r0;
        groovyjarjarantlr.ANTLRStringBuffer $r2;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void resetText()>();

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        virtualinvoke $r2.<groovyjarjarantlr.ANTLRStringBuffer: void append(java.lang.String)>(r1);

        return;
    }

    public void setTokenObjectClass(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.String r1, $r7;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>(r1);

        r0.<groovyjarjarantlr.CharScanner: java.lang.Class tokenObjectClass> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClassNotFoundException: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void panic(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public int testLiteralsTable(int)
    {
        groovyjarjarantlr.ANTLRHashString $r2, $r5;
        groovyjarjarantlr.ANTLRStringBuffer $r1, $r4;
        java.lang.Integer r8;
        int $i0, i1;
        char[] $r3;
        java.lang.Object $r7;
        groovyjarjarantlr.CharScanner r0;
        java.util.Hashtable $r6;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i1 := @parameter0: int;

        $r2 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRHashString hashString>;

        $r1 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        $r3 = virtualinvoke $r1.<groovyjarjarantlr.ANTLRStringBuffer: char[] getBuffer()>();

        $r4 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRStringBuffer text>;

        $i0 = virtualinvoke $r4.<groovyjarjarantlr.ANTLRStringBuffer: int length()>();

        virtualinvoke $r2.<groovyjarjarantlr.ANTLRHashString: void setBuffer(char[],int)>($r3, $i0);

        $r6 = r0.<groovyjarjarantlr.CharScanner: java.util.Hashtable literals>;

        $r5 = r0.<groovyjarjarantlr.CharScanner: groovyjarjarantlr.ANTLRHashString hashString>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.lang.Integer) $r7;

        if r8 == null goto label1;

        i1 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

     label1:
        return i1;
    }

    public int testLiteralsTable(java.lang.String, int)
    {
        groovyjarjarantlr.ANTLRHashString $r0;
        int i0;
        java.lang.Object $r4;
        java.lang.String r1;
        java.lang.Integer r5;
        groovyjarjarantlr.CharScanner r2;
        java.util.Hashtable $r3;

        r2 := @this: groovyjarjarantlr.CharScanner;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new groovyjarjarantlr.ANTLRHashString;

        specialinvoke $r0.<groovyjarjarantlr.ANTLRHashString: void <init>(java.lang.String,groovyjarjarantlr.CharScanner)>(r1, r2);

        $r3 = r2.<groovyjarjarantlr.CharScanner: java.util.Hashtable literals>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        r5 = (java.lang.Integer) $r4;

        if r5 == null goto label1;

        i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public char toLower(char)
    {
        char c0, $c1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        c0 := @parameter0: char;

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        return $c1;
    }

    public void traceIndent()
    {
        java.io.PrintStream $r1;
        int $i0, i1;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        i1 = 0;

     label1:
        $i0 = r0.<groovyjarjarantlr.CharScanner: int traceDepth>;

        if i1 >= $i0 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void traceIn(java.lang.String) throws groovyjarjarantlr.CharStreamException
    {
        java.io.PrintStream $r2;
        char $c2;
        java.lang.StringBuffer $r1, $r3, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.String r4, $r8;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r4 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.CharScanner: int traceDepth>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CharScanner: int traceDepth> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void traceIndent()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> lexer ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; c==");

        $c2 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return;
    }

    public void traceOut(java.lang.String) throws groovyjarjarantlr.CharStreamException
    {
        java.io.PrintStream $r2;
        char $c0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6, $r7;
        int $i1, $i2;
        java.lang.String r4, $r8;
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        r4 := @parameter0: java.lang.String;

        virtualinvoke r0.<groovyjarjarantlr.CharScanner: void traceIndent()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("< lexer ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; c==");

        $c0 = virtualinvoke r0.<groovyjarjarantlr.CharScanner: char LA(int)>(1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $i1 = r0.<groovyjarjarantlr.CharScanner: int traceDepth>;

        $i2 = $i1 - 1;

        r0.<groovyjarjarantlr.CharScanner: int traceDepth> = $i2;

        return;
    }

    public void uponEOF() throws groovyjarjarantlr.TokenStreamException, groovyjarjarantlr.CharStreamException
    {
        groovyjarjarantlr.CharScanner r0;

        r0 := @this: groovyjarjarantlr.CharScanner;

        return;
    }

    public static void <clinit>()
    {
        <groovyjarjarantlr.CharScanner: char EOF_CHAR> = 65535;

        <groovyjarjarantlr.CharScanner: char NO_CHAR> = 0;

        return;
    }
}
