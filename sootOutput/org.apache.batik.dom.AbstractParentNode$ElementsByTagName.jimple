public class org.apache.batik.dom.AbstractParentNode$ElementsByTagName extends java.lang.Object implements org.w3c.dom.NodeList
{
    protected org.w3c.dom.Node[] table;
    protected int size;
    protected java.lang.String name;
    private final org.apache.batik.dom.AbstractParentNode this$0;

    public void <init>(org.apache.batik.dom.AbstractParentNode, java.lang.String)
    {
        org.apache.batik.dom.AbstractParentNode r1;
        int $i1;
        java.lang.String r2;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        r1 := @parameter0: org.apache.batik.dom.AbstractParentNode;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.apache.batik.dom.AbstractParentNode this$0> = r1;

        $i1 = (int) -1;

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size> = $i1;

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: java.lang.String name> = r2;

        return;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;
        org.w3c.dom.Node[] $r1, $r2;
        org.w3c.dom.Node $r3;
        int $i0, i1, $i2, $i4;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void initialize()>();

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        if $r1 == null goto label2;

        if i1 < 0 goto label2;

        $i2 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        if i1 < $i2 goto label3;

     label2:
        return null;

     label3:
        $r2 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        $r3 = $r2[i1];

        return $r3;
    }

    public int getLength()
    {
        int $i0, $i1, $i3;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        $i0 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void initialize()>();

     label1:
        $i1 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        return $i1;
    }

    public void invalidate()
    {
        int $i1;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        $i1 = (int) -1;

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size> = $i1;

        return;
    }

    protected void append(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;
        org.w3c.dom.Node[] $r1, $r2, $r4, r5, $r6, $r7, $r8;
        org.w3c.dom.Node r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        r3 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        if $r1 != null goto label1;

        $r7 = newarray (org.w3c.dom.Node)[11];

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table> = $r7;

        goto label2;

     label1:
        $i2 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        $r2 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        if $i2 != $i1 goto label2;

        $r4 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        $i3 = lengthof $r4;

        $i4 = $i3 * 2;

        $i5 = $i4 + 1;

        r5 = newarray (org.w3c.dom.Node)[$i5];

        $r6 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        $i6 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i6);

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table> = r5;

     label2:
        $r8 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.w3c.dom.Node[] table>;

        $i7 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size>;

        $i8 = $i7 + 1;

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size> = $i8;

        $r8[$i7] = r3;

        return;
    }

    protected void initialize()
    {
        org.apache.batik.dom.AbstractParentNode $r1;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r0;
        org.w3c.dom.Node r2;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: int size> = 0;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: org.apache.batik.dom.AbstractParentNode this$0>;

        r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void initialize(org.w3c.dom.Node)>(r2);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r2 != null goto label1;

        return;
    }

    private void initialize(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r1;
        short $s0;
        org.w3c.dom.Node r0, r5;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r3 = r1.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: java.lang.String name>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 != 0 goto label1;

        $r4 = r1.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void append(org.w3c.dom.Node)>(r0);

     label2:
        r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label4;

     label3:
        specialinvoke r1.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void initialize(org.w3c.dom.Node)>(r5);

        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if r5 != null goto label3;

        return;
    }
}
