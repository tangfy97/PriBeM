public class org.bouncycastle.crypto.macs.BlockCipherMac extends java.lang.Object implements org.bouncycastle.crypto.Mac
{
    private byte[] mac;
    private byte[] buf;
    private int bufOff;
    private org.bouncycastle.crypto.BlockCipher cipher;
    private int macSize;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        int $i0, $i1, $i2;
        org.bouncycastle.crypto.BlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = $i0 * 8;

        $i2 = $i1 / 2;

        specialinvoke r0.<org.bouncycastle.crypto.macs.BlockCipherMac: void <init>(org.bouncycastle.crypto.BlockCipher,int)>(r1, $i2);

        return;
    }

    public void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        byte[] $r3, $r4;
        org.bouncycastle.crypto.modes.CBCBlockCipher $r1;
        java.lang.IllegalArgumentException $r5;
        org.bouncycastle.crypto.BlockCipher r2;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        r2 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = i0 % 8;

        if $i1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MAC size must be multiple of 8");

        throw $r5;

     label1:
        $r1 = new org.bouncycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r1.<org.bouncycastle.crypto.modes.CBCBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r2);

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher> = $r1;

        $i2 = i0 / 8;

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int macSize> = $i2;

        $i3 = interfaceinvoke r2.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r3 = newarray (byte)[$i3];

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac> = $r3;

        $i4 = interfaceinvoke r2.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i4];

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf> = $r4;

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        java.lang.String $r2;
        org.bouncycastle.crypto.BlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        $r1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r2 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r2;
    }

    public void init(org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        org.bouncycastle.crypto.BlockCipher $r2;
        org.bouncycastle.crypto.CipherParameters r1;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        r1 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.bouncycastle.crypto.macs.BlockCipherMac: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r1);

        return;
    }

    public int getMacSize()
    {
        int $i0;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        $i0 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int macSize>;

        return $i0;
    }

    public void update(byte)
    {
        byte[] $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.BlockCipher $r5;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        byte b4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        b4 := @parameter0: byte;

        $i1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r5 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r3, 0);

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = $i3;

        $r2[$i2] = b4;

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] r2, $r3, $r4, $r5, $r6, $r8;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.IllegalArgumentException $r10;
        org.bouncycastle.crypto.BlockCipher $r1, $r7, $r9;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        r2 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i8 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r10;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        i2 = $i0 - $i1;

        if i8 <= i2 goto label3;

        $r4 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i6 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r4, $i6, i2);

        $r7 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r5 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, $r5, 0);

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        i8 = i8 - i2;

        i7 = i7 + i2;

     label2:
        if i8 <= $i0 goto label3;

        $r9 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r8 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r9.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, i7, $r8, 0);

        i8 = i8 - $i0;

        i7 = i7 + $i0;

        goto label2;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r3, $i3, i8);

        $i4 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i5 = $i4 + i8;

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = $i5;

        return;
    }

    public int doFinal(byte[], int)
    {
        byte[] $r2, $r3, r5, $r6, $r7;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        org.bouncycastle.crypto.BlockCipher $r1, $r4;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        r5 := @parameter0: byte[];

        i2 := @parameter1: int;

        $r1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

     label1:
        $i1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        if $i1 >= $i0 goto label2;

        $r7 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i5 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $r7[$i5] = 0;

        $i6 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i7 = $i6 + 1;

        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = $i7;

        goto label1;

     label2:
        $r4 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r2 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r3, 0, $r2, 0);

        $r6 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        $i3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, i2, $i3);

        virtualinvoke r0.<org.bouncycastle.crypto.macs.BlockCipherMac: void reset()>();

        $i4 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int macSize>;

        return $i4;
    }

    public void reset()
    {
        byte[] $r1, $r3;
        org.bouncycastle.crypto.macs.BlockCipherMac r0;
        int $i0, i1;
        org.bouncycastle.crypto.BlockCipher $r2;

        r0 := @this: org.bouncycastle.crypto.macs.BlockCipherMac;

        i1 = 0;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r3[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.bouncycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        $r2 = r0.<org.bouncycastle.crypto.macs.BlockCipherMac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void reset()>();

        return;
    }
}
