public class org.apache.fontbox.ttf.HorizontalHeaderTable extends org.apache.fontbox.ttf.TTFTable
{
    public static final java.lang.String TAG;
    private float version;
    private short ascender;
    private short descender;
    private short lineGap;
    private int advanceWidthMax;
    private short minLeftSideBearing;
    private short minRightSideBearing;
    private short xMaxExtent;
    private short caretSlopeRise;
    private short caretSlopeRun;
    private short reserved1;
    private short reserved2;
    private short reserved3;
    private short reserved4;
    private short reserved5;
    private short metricDataFormat;
    private int numberOfHMetrics;

    public void <init>()
    {
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        specialinvoke r0.<org.apache.fontbox.ttf.TTFTable: void <init>()>();

        return;
    }

    public void initData(org.apache.fontbox.ttf.TrueTypeFont, org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;
        short $s0, $s1, $s2, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14;
        int $i3, $i15;
        org.apache.fontbox.ttf.TTFDataStream r1;
        org.apache.fontbox.ttf.TrueTypeFont r2;
        float $f0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        r2 := @parameter0: org.apache.fontbox.ttf.TrueTypeFont;

        r1 := @parameter1: org.apache.fontbox.ttf.TTFDataStream;

        $f0 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: float read32Fixed()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: float version> = $f0;

        $s0 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short ascender> = $s0;

        $s1 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short descender> = $s1;

        $s2 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short lineGap> = $s2;

        $i3 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int advanceWidthMax> = $i3;

        $s4 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minLeftSideBearing> = $s4;

        $s5 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minRightSideBearing> = $s5;

        $s6 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short xMaxExtent> = $s6;

        $s7 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRise> = $s7;

        $s8 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRun> = $s8;

        $s9 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved1> = $s9;

        $s10 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved2> = $s10;

        $s11 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved3> = $s11;

        $s12 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved4> = $s12;

        $s13 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved5> = $s13;

        $s14 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: short readSignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short metricDataFormat> = $s14;

        $i15 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int numberOfHMetrics> = $i15;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: boolean initialized> = 1;

        return;
    }

    public int getAdvanceWidthMax()
    {
        int $i0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $i0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int advanceWidthMax>;

        return $i0;
    }

    public void setAdvanceWidthMax(int)
    {
        int i0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int advanceWidthMax> = i0;

        return;
    }

    public short getAscender()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short ascender>;

        return $s0;
    }

    public void setAscender(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short ascender> = s0;

        return;
    }

    public short getCaretSlopeRise()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRise>;

        return $s0;
    }

    public void setCaretSlopeRise(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRise> = s0;

        return;
    }

    public short getCaretSlopeRun()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRun>;

        return $s0;
    }

    public void setCaretSlopeRun(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short caretSlopeRun> = s0;

        return;
    }

    public short getDescender()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short descender>;

        return $s0;
    }

    public void setDescender(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short descender> = s0;

        return;
    }

    public short getLineGap()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short lineGap>;

        return $s0;
    }

    public void setLineGap(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short lineGap> = s0;

        return;
    }

    public short getMetricDataFormat()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short metricDataFormat>;

        return $s0;
    }

    public void setMetricDataFormat(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short metricDataFormat> = s0;

        return;
    }

    public short getMinLeftSideBearing()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minLeftSideBearing>;

        return $s0;
    }

    public void setMinLeftSideBearing(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minLeftSideBearing> = s0;

        return;
    }

    public short getMinRightSideBearing()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minRightSideBearing>;

        return $s0;
    }

    public void setMinRightSideBearing(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short minRightSideBearing> = s0;

        return;
    }

    public int getNumberOfHMetrics()
    {
        int $i0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $i0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int numberOfHMetrics>;

        return $i0;
    }

    public void setNumberOfHMetrics(int)
    {
        int i0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: int numberOfHMetrics> = i0;

        return;
    }

    public short getReserved1()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved1>;

        return $s0;
    }

    public void setReserved1(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved1> = s0;

        return;
    }

    public short getReserved2()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved2>;

        return $s0;
    }

    public void setReserved2(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved2> = s0;

        return;
    }

    public short getReserved3()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved3>;

        return $s0;
    }

    public void setReserved3(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved3> = s0;

        return;
    }

    public short getReserved4()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved4>;

        return $s0;
    }

    public void setReserved4(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved4> = s0;

        return;
    }

    public short getReserved5()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved5>;

        return $s0;
    }

    public void setReserved5(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short reserved5> = s0;

        return;
    }

    public float getVersion()
    {
        float $f0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $f0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: float version>;

        return $f0;
    }

    public void setVersion(float)
    {
        float f0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: float version> = f0;

        return;
    }

    public short getXMaxExtent()
    {
        short $s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        $s0 = r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short xMaxExtent>;

        return $s0;
    }

    public void setXMaxExtent(short)
    {
        short s0;
        org.apache.fontbox.ttf.HorizontalHeaderTable r0;

        r0 := @this: org.apache.fontbox.ttf.HorizontalHeaderTable;

        s0 := @parameter0: short;

        r0.<org.apache.fontbox.ttf.HorizontalHeaderTable: short xMaxExtent> = s0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.fontbox.ttf.HorizontalHeaderTable: java.lang.String TAG> = "hhea";

        return;
    }
}
