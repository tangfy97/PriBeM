public class org.apache.solr.common.util.ExecutorUtil extends java.lang.Object
{
    public static org.slf4j.Logger log;

    public void <init>()
    {
        org.apache.solr.common.util.ExecutorUtil r0;

        r0 := @this: org.apache.solr.common.util.ExecutorUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void shutdownNowAndAwaitTermination(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r2;
        java.lang.Thread $r3;
        java.util.concurrent.ExecutorService r0;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: void shutdown()>();

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        z0 = 0;

     label1:
        if z0 != 0 goto label6;

     label2:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        z0 = interfaceinvoke r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(5L, $r1);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label5:
        if z0 != 0 goto label1;

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public static void shutdownAndAwaitTermination(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r2;
        java.lang.Thread $r3;
        java.util.concurrent.ExecutorService r0;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: void shutdown()>();

        z0 = 0;

     label1:
        if z0 != 0 goto label6;

     label2:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        z0 = interfaceinvoke r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(30L, $r1);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label5:
        if z0 != 0 goto label1;

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/solr/common/util/ExecutorUtil;");

        <org.apache.solr.common.util.ExecutorUtil: org.slf4j.Logger log> = $r0;

        return;
    }
}
