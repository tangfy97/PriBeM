public class org.apache.jena.riot.lang.BlankNodeAllocatorHash extends java.lang.Object implements org.apache.jena.riot.lang.BlankNodeAllocator
{
    private static java.lang.String DigestAlgorithm;
    private static int CacheSize;
    private java.security.MessageDigest mDigest;
    private byte[] seedBytes;
    private byte[] counterBytes;
    private org.apache.jena.atlas.lib.Cache cache;
    private long counter;

    public void <init>()
    {
        byte[] $r1;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash r0;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash$1 $r4;
        java.security.MessageDigest $r3;
        org.apache.jena.atlas.lib.Cache $r5, $r6;
        java.security.NoSuchAlgorithmException $r7;
        int $i0;
        java.lang.String $r2;
        org.apache.jena.atlas.lib.InternalErrorException $r8;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[10];

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] counterBytes> = $r1;

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: long counter> = 0L;

        virtualinvoke r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: void reset()>();

     label1:
        $r2 = <org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.lang.String DigestAlgorithm>;

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2);

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.security.MessageDigest mDigest> = $r3;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r8.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String,java.lang.Throwable)>("failed to create message digest", $r7);

        throw $r8;

     label4:
        $r4 = new org.apache.jena.riot.lang.BlankNodeAllocatorHash$1;

        specialinvoke $r4.<org.apache.jena.riot.lang.BlankNodeAllocatorHash$1: void <init>(org.apache.jena.riot.lang.BlankNodeAllocatorHash)>(r0);

        $i0 = <org.apache.jena.riot.lang.BlankNodeAllocatorHash: int CacheSize>;

        $r5 = staticinvoke <org.apache.jena.atlas.lib.CacheFactory: org.apache.jena.atlas.lib.Cache createCache(int)>($i0);

        $r6 = staticinvoke <org.apache.jena.atlas.lib.CacheFactory: org.apache.jena.atlas.lib.Cache createCacheWithGetter(org.apache.jena.atlas.lib.Cache,org.apache.jena.atlas.lib.cache.Getter)>($r5, $r4);

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: org.apache.jena.atlas.lib.Cache cache> = $r6;

        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public void reset()
    {
        byte[] $r2, $r3, $r4;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash r1;
        long $l0, $l1;
        java.util.UUID $r0;

        r1 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r2 = newarray (byte)[16];

        r1.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] seedBytes> = $r2;

        $l0 = virtualinvoke $r0.<java.util.UUID: long getMostSignificantBits()>();

        $r3 = r1.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] seedBytes>;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setLong(long,byte[],int)>($l0, $r3, 0);

        $l1 = virtualinvoke $r0.<java.util.UUID: long getLeastSignificantBits()>();

        $r4 = r1.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] seedBytes>;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setLong(long,byte[],int)>($l1, $r4, 8);

        return;
    }

    public com.hp.hpl.jena.graph.Node alloc(java.lang.String)
    {
        byte[] $r2;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.jena.atlas.lib.Bytes: byte[] string2bytes(java.lang.String)>(r1);

        $r3 = specialinvoke r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: com.hp.hpl.jena.graph.Node alloc(byte[])>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.graph.Node create()
    {
        byte[] $r1, $r2, $r3, $r4;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash r0;
        long $l0, $l1, $l2;
        com.hp.hpl.jena.graph.Node $r5;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        $l0 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: long counter>;

        $l1 = $l0 + 1L;

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: long counter> = $l1;

        $r1 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] counterBytes>;

        $r1[0] = 0;

        $r2 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] counterBytes>;

        $r2[1] = 0;

        $l2 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: long counter>;

        $r3 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] counterBytes>;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setLong(long,byte[],int)>($l2, $r3, 2);

        $r4 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] counterBytes>;

        $r5 = specialinvoke r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: com.hp.hpl.jena.graph.Node alloc(byte[])>($r4);

        return $r5;
    }

    private com.hp.hpl.jena.graph.Node alloc(byte[])
    {
        byte[] $r1, r3, $r6;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash r0;
        java.security.MessageDigest $r2, $r4, $r5;
        com.hp.hpl.jena.graph.Node $r9;
        com.hp.hpl.jena.rdf.model.AnonId $r8;
        java.lang.String $r7;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        r3 := @parameter0: byte[];

        $r2 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.security.MessageDigest mDigest>;

        $r1 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: byte[] seedBytes>;

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r1);

        $r4 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.security.MessageDigest mDigest>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r3);

        $r5 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.security.MessageDigest mDigest>;

        $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

        $r7 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHexLC(byte[])>($r6);

        $r8 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r8.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r7);

        $r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r8);

        return $r9;
    }

    static void <clinit>()
    {
        <org.apache.jena.riot.lang.BlankNodeAllocatorHash: java.lang.String DigestAlgorithm> = "MD5";

        <org.apache.jena.riot.lang.BlankNodeAllocatorHash: int CacheSize> = 1000;

        return;
    }
}
