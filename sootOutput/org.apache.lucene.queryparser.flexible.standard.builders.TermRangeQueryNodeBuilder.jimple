public class org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryBuilder
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.lucene.search.TermRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r3, r5;
        org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder r13;
        int $i0, $i1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r12;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        java.lang.String $r7, $r8, $r9, r14, r15;
        boolean $z0, $z1;
        java.lang.CharSequence $r6;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r2, $r4;
        org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode r1;
        org.apache.lucene.search.TermRangeQuery $r10;
        java.lang.Object $r11;

        r13 := @this: org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 = (org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r2;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        r5 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r4;

        $r6 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: java.lang.CharSequence getField()>();

        $r7 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r6);

        $r8 = virtualinvoke r5.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        r14 = $r8;

        $r9 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        r15 = $r9;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r14 = null;

     label1:
        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        r15 = null;

     label2:
        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: boolean isLowerInclusive()>();

        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: boolean isUpperInclusive()>();

        $r10 = staticinvoke <org.apache.lucene.search.TermRangeQuery: org.apache.lucene.search.TermRangeQuery newStringRange(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($r7, r14, r15, $z0, $z1);

        $r11 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.Object getTag(java.lang.String)>("MultiTermRewriteMethodConfiguration");

        $r12 = (org.apache.lucene.search.MultiTermQuery$RewriteMethod) $r11;

        if $r12 == null goto label3;

        virtualinvoke $r10.<org.apache.lucene.search.TermRangeQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r12);

     label3:
        return $r10;
    }

    public volatile org.apache.lucene.search.Query build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder r0;
        org.apache.lucene.search.TermRangeQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder: org.apache.lucene.search.TermRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder r0;
        org.apache.lucene.search.TermRangeQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.TermRangeQueryNodeBuilder: org.apache.lucene.search.TermRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }
}
