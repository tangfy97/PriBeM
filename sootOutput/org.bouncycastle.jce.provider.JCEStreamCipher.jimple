public class org.bouncycastle.jce.provider.JCEStreamCipher extends org.bouncycastle.jce.provider.WrapCipherSpi implements org.bouncycastle.jce.provider.PBE
{
    private java.lang.Class[] availableSpecs;
    private org.bouncycastle.crypto.StreamCipher cipher;
    private org.bouncycastle.crypto.params.ParametersWithIV ivParam;
    private int ivLength;
    private javax.crypto.spec.PBEParameterSpec pbeSpec;
    private java.lang.String pbeAlgorithm;

    protected void <init>(org.bouncycastle.crypto.StreamCipher, int)
    {
        int i0;
        java.lang.Class[] $r1;
        org.bouncycastle.crypto.StreamCipher r2;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r2 := @parameter0: org.bouncycastle.crypto.StreamCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = 0;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher> = r2;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = i0;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        org.bouncycastle.crypto.StreamBlockCipher $r2;
        int i0;
        java.lang.Class[] $r1;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        org.bouncycastle.crypto.BlockCipher r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r3 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = 0;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = i0;

        $r2 = new org.bouncycastle.crypto.StreamBlockCipher;

        specialinvoke $r2.<org.bouncycastle.crypto.StreamBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r3);

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher> = $r2;

        return;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.JCEStreamCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        byte[] $r3;
        org.bouncycastle.crypto.params.ParametersWithIV $r1, $r2;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        if $r1 == null goto label1;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        java.security.Key r0;
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.jce.provider.JCEStreamCipher r2;

        r2 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r0 := @parameter0: java.security.Key;

        $r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r1;

        $i1 = $i0 * 8;

        return $i1;
    }

    protected int engineGetOutputSize(int)
    {
        int i0;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        i0 := @parameter0: int;

        return i0;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        javax.crypto.spec.PBEParameterSpec $r3, $r6;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        java.security.AlgorithmParameters $r1, $r2, $r5;
        java.lang.Exception $r7;
        java.lang.String $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.security.AlgorithmParameters engineParams>;

        if $r1 != null goto label4;

        $r3 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm>;

        $r5 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>($r4, "BC");

        $r6 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        virtualinvoke $r5.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r6);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        return null;

     label4:
        $r2 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.security.AlgorithmParameters engineParams>;

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void engineSetMode(java.lang.String)
    {
        java.lang.IllegalArgumentException $r1;
        org.bouncycastle.jce.provider.JCEStreamCipher r6;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r6 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ECB");

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher r7;
        javax.crypto.NoSuchPaddingException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String r0, $r6;
        boolean $z0;

        r7 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NoPadding");

        if $z0 != 0 goto label1;

        $r1 = new javax.crypto.NoSuchPaddingException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        byte[] $r6, $r8, $r17, $r20, $r30;
        org.bouncycastle.crypto.params.ParametersWithIV $r4, $r9, $r14, $r15, $r28;
        java.security.SecureRandom r13, $r18, r42;
        java.security.spec.AlgorithmParameterSpec r2;
        org.bouncycastle.crypto.StreamCipher $r10, $r11, $r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.bouncycastle.asn1.DERObjectIdentifier $r21, $r31;
        org.bouncycastle.crypto.CipherParameters $r23, r41;
        javax.crypto.spec.PBEParameterSpec $r27, $r29;
        java.security.Key r1;
        java.security.InvalidKeyException $r33;
        java.lang.StringBuilder $r34, $r35, $r37, $r38;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        java.security.InvalidAlgorithmParameterException $r16, $r24;
        javax.crypto.spec.IvParameterSpec $r7;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r22, $r26, $r32, $r36, $r39;
        org.bouncycastle.crypto.params.KeyParameter $r5, $r19;
        java.io.PrintStream $r12;
        java.lang.IllegalArgumentException $r3;
        org.bouncycastle.jce.provider.JCEPBEKey r40;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r13 := @parameter3: java.security.SecureRandom;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.security.AlgorithmParameters engineParams> = null;

        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label01;

        $r33 = new java.security.InvalidKeyException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key for algorithm ");

        $r36 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not suitable for symmetric enryption.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r39);

        throw $r33;

     label01:
        $z1 = r1 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z1 == 0 goto label08;

        r40 = (org.bouncycastle.jce.provider.JCEPBEKey) r1;

        $r21 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        if $r21 == null goto label02;

        $r31 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        $r32 = virtualinvoke $r31.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = $r32;

        goto label03;

     label02:
        $r22 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: java.lang.String getAlgorithm()>();

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = $r22;

     label03:
        $r23 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r23 == null goto label04;

        r41 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        $r29 = new javax.crypto.spec.PBEParameterSpec;

        $r30 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: byte[] getSalt()>();

        $i3 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: int getIterationCount()>();

        specialinvoke $r29.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r30, $i3);

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r29;

        goto label06;

     label04:
        $z4 = r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z4 == 0 goto label05;

        $r25 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        $r26 = interfaceinvoke $r25.<org.bouncycastle.crypto.StreamCipher: java.lang.String getAlgorithmName()>();

        r41 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r40, r2, $r26);

        $r27 = (javax.crypto.spec.PBEParameterSpec) r2;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r27;

        goto label06;

     label05:
        $r24 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r24.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r24;

     label06:
        $i2 = virtualinvoke r40.<org.bouncycastle.jce.provider.JCEPBEKey: int getIvSize()>();

        if $i2 == 0 goto label07;

        $r28 = (org.bouncycastle.crypto.params.ParametersWithIV) r41;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r28;

     label07:
        goto label11;

     label08:
        if r2 != null goto label09;

        $r19 = new org.bouncycastle.crypto.params.KeyParameter;

        $r20 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r19.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r20);

        r41 = $r19;

        goto label11;

     label09:
        $z2 = r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z2 == 0 goto label10;

        $r4 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r5 = new org.bouncycastle.crypto.params.KeyParameter;

        $r6 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r5.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r6);

        $r7 = (javax.crypto.spec.IvParameterSpec) r2;

        $r8 = virtualinvoke $r7.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r4.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r5, $r8);

        r41 = $r4;

        $r9 = (org.bouncycastle.crypto.params.ParametersWithIV) $r4;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r9;

        goto label11;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r3;

     label11:
        $i4 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength>;

        if $i4 == 0 goto label15;

        $z3 = r41 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z3 != 0 goto label15;

        r42 = r13;

        if r13 != null goto label12;

        $r18 = new java.security.SecureRandom;

        specialinvoke $r18.<java.security.SecureRandom: void <init>()>();

        r42 = $r18;

     label12:
        if i0 == 1 goto label13;

        if i0 != 3 goto label14;

     label13:
        $i1 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength>;

        $r17 = newarray (byte)[$i1];

        virtualinvoke r42.<java.security.SecureRandom: void nextBytes(byte[])>($r17);

        $r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        specialinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r41, $r17);

        r41 = $r14;

        $r15 = (org.bouncycastle.crypto.params.ParametersWithIV) $r14;

        r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label15;

     label14:
        $r16 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r16.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw $r16;

     label15:
        tableswitch(i0)
        {
            case 1: goto label16;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label17;
            default: goto label18;
        };

     label16:
        $r11 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r11.<org.bouncycastle.crypto.StreamCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r41);

        goto label19;

     label17:
        $r10 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r10.<org.bouncycastle.crypto.StreamCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, r41);

        goto label19;

     label18:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

     label19:
        return;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher r1;
        java.security.InvalidAlgorithmParameterException $r5;
        java.security.SecureRandom r3;
        int i0, $i1, i2;
        java.lang.String $r8, $r10;
        java.security.spec.AlgorithmParameterSpec r14;
        java.lang.Class[] $r4, $r11;
        java.security.AlgorithmParameters r0;
        java.lang.Exception $r13;
        java.security.Key r2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r12;

        r1 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        i0 := @parameter0: int;

        r2 := @parameter1: java.security.Key;

        r0 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        r14 = null;

        if r0 == null goto label7;

        i2 = 0;

     label1:
        $r4 = r1.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs>;

        $i1 = lengthof $r4;

        if i2 == $i1 goto label6;

     label2:
        $r11 = r1.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs>;

        $r12 = $r11[i2];

        r14 = virtualinvoke r0.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r12);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        goto label5;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        if r14 != null goto label7;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r8 = virtualinvoke r0.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label7:
        virtualinvoke r1.<org.bouncycastle.jce.provider.JCEStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r2, r14, r3);

        r1.<org.bouncycastle.jce.provider.JCEStreamCipher: java.security.AlgorithmParameters engineParams> = r0;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Key r1;
        java.security.SecureRandom r2;
        int i0;
        java.security.InvalidKeyException $r4;
        java.lang.String $r5;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.bouncycastle.jce.provider.JCEStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, null, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.security.InvalidKeyException;

        $r5 = virtualinvoke $r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        byte[] r0, r2;
        int i0, i1;
        org.bouncycastle.crypto.StreamCipher $r3;
        org.bouncycastle.jce.provider.JCEStreamCipher r1;

        r1 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        $r3 = r1.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>(r2, i1, i0, r0, 0);

        return r0;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        byte[] r1, r2;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        org.bouncycastle.crypto.DataLengthException $r4;
        int i0, i1, i2;
        org.bouncycastle.crypto.StreamCipher $r3;
        java.lang.String $r6;
        javax.crypto.ShortBufferException $r5;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

     label1:
        $r3 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        $r5 = new javax.crypto.ShortBufferException;

        $r6 = virtualinvoke $r4.<org.bouncycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.bouncycastle.crypto.DataLengthException from label1 to label2 with label3;
    }

    protected byte[] engineDoFinal(byte[], int, int)
    {
        byte[] $r2, r3, $r4;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        int i0, i1;
        org.bouncycastle.crypto.StreamCipher $r1, $r5;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r3 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.bouncycastle.jce.provider.JCEStreamCipher: byte[] engineUpdate(byte[],int,int)>(r3, i1, i0);

        $r5 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        return $r4;

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        $r2 = newarray (byte)[0];

        return $r2;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int)
    {
        byte[] r2, r3;
        org.bouncycastle.jce.provider.JCEStreamCipher r0;
        int i0, i1, i2;
        org.bouncycastle.crypto.StreamCipher $r1, $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        i2 := @parameter4: int;

        if i0 == 0 goto label1;

        $r4 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>(r2, i1, i0, r3, i2);

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        return i0;
    }
}
