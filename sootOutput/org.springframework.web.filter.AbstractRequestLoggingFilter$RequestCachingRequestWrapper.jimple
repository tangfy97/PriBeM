class org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper extends javax.servlet.http.HttpServletRequestWrapper
{
    private final java.io.ByteArrayOutputStream bos;
    private final javax.servlet.ServletInputStream inputStream;
    private java.io.BufferedReader reader;

    private void <init>(javax.servlet.http.HttpServletRequest) throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest r1;
        java.io.ByteArrayOutputStream $r2;
        javax.servlet.ServletInputStream $r4;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream $r3;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        specialinvoke r0.<javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>(r1);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.ByteArrayOutputStream bos> = $r2;

        $r3 = new org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream;

        $r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>();

        specialinvoke $r3.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: void <init>(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper,javax.servlet.ServletInputStream,org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream)>(r0, $r4, null);

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: javax.servlet.ServletInputStream inputStream> = $r3;

        return;
    }

    public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;
        javax.servlet.ServletInputStream $r1;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: javax.servlet.ServletInputStream inputStream>;

        return $r1;
    }

    public java.lang.String getCharacterEncoding()
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = specialinvoke r0.<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getCharacterEncoding()>();

        if $r1 == null goto label1;

        $r2 = specialinvoke r0.<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getCharacterEncoding()>();

        goto label2;

     label1:
        $r2 = "ISO-8859-1";

     label2:
        return $r2;
    }

    public java.io.BufferedReader getReader() throws java.io.IOException
    {
        javax.servlet.ServletInputStream $r5;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;
        java.io.BufferedReader $r1, $r2, $r3;
        java.lang.String $r6;
        java.io.InputStreamReader $r4;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.BufferedReader reader>;

        if $r1 != null goto label1;

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        $r5 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: javax.servlet.ServletInputStream inputStream>;

        $r6 = virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.lang.String getCharacterEncoding()>();

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, $r6);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.BufferedReader reader> = $r3;

     label1:
        $r2 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.BufferedReader reader>;

        return $r2;
    }

    private byte[] toByteArray()
    {
        byte[] $r2;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.ByteArrayOutputStream bos>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    static java.io.ByteArrayOutputStream access$0(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper)
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @parameter0: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.ByteArrayOutputStream bos>;

        return $r1;
    }

    void <init>(javax.servlet.http.HttpServletRequest, org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper) throws java.io.IOException
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0, r2;
        javax.servlet.http.HttpServletRequest r1;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>(r1);

        return;
    }

    static byte[] access$2(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper)
    {
        byte[] $r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r0;

        r0 := @parameter0: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        $r1 = specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: byte[] toByteArray()>();

        return $r1;
    }
}
