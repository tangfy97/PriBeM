public abstract class org.springframework.http.converter.AbstractHttpMessageConverter extends java.lang.Object implements org.springframework.http.converter.HttpMessageConverter
{
    protected final org.apache.commons.logging.Log logger;
    private java.util.List supportedMediaTypes;

    protected void <init>()
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.util.List $r3;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List supportedMediaTypes> = $r3;

        return;
    }

    protected void <init>(org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.util.List $r3, $r5;
        org.springframework.http.MediaType r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r4 := @parameter0: org.springframework.http.MediaType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List supportedMediaTypes> = $r3;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r4);

        virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void setSupportedMediaTypes(java.util.List)>($r5);

        return;
    }

    protected transient void <init>(org.springframework.http.MediaType[])
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.util.List $r3, $r5;
        org.springframework.http.MediaType[] r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r4 := @parameter0: org.springframework.http.MediaType[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List supportedMediaTypes> = $r3;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void setSupportedMediaTypes(java.util.List)>($r5);

        return;
    }

    public void setSupportedMediaTypes(java.util.List)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r1;
        java.util.List r0;
        java.util.ArrayList $r2;

        r1 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r0, "\'supportedMediaTypes\' must not be empty");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r1.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List supportedMediaTypes> = $r2;

        return;
    }

    public java.util.List getSupportedMediaTypes()
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.util.List $r1, $r2;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List supportedMediaTypes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        org.springframework.http.MediaType r2;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.MediaType;

        $z0 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: boolean supports(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canRead(org.springframework.http.MediaType)>(r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean canRead(org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r1;
        java.util.Iterator $r3;
        org.springframework.http.MediaType r0, r5;
        java.util.List $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.http.MediaType) $r4;

        $z1 = virtualinvoke r5.<org.springframework.http.MediaType: boolean includes(org.springframework.http.MediaType)>(r0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        org.springframework.http.MediaType r2;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.MediaType;

        $z0 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: boolean supports(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canWrite(org.springframework.http.MediaType)>(r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean canWrite(org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r2;
        java.util.Iterator $r4;
        org.springframework.http.MediaType r0, $r1, r6;
        java.util.List $r3;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r2 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 == null goto label1;

        $r1 = <org.springframework.http.MediaType: org.springframework.http.MediaType ALL>;

        $z0 = virtualinvoke $r1.<org.springframework.http.MediaType: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r3 = virtualinvoke r2.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.springframework.http.MediaType) $r5;

        $z2 = virtualinvoke r6.<org.springframework.http.MediaType: boolean isCompatibleWith(org.springframework.http.MediaType)>(r0);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return 0;
    }

    public final java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        org.springframework.http.HttpInputMessage r2;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.lang.Object readInternal(java.lang.Class,org.springframework.http.HttpInputMessage)>(r1, r2);

        return $r3;
    }

    public final void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r3;
        java.io.OutputStream $r7;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType $r2, r6;
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r5;
        java.lang.Object r4;
        org.springframework.http.HttpOutputMessage r0;
        boolean $z0, $z1;

        r3 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: org.springframework.http.MediaType;

        r0 := @parameter2: org.springframework.http.HttpOutputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        if $r2 != null goto label3;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r6.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z1 == 0 goto label2;

     label1:
        r6 = virtualinvoke r3.<org.springframework.http.converter.AbstractHttpMessageConverter: org.springframework.http.MediaType getDefaultContentType(java.lang.Object)>(r4);

     label2:
        if r6 == null goto label3;

        virtualinvoke $r1.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>(r6);

     label3:
        $l1 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: long getContentLength()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label4;

        $r5 = virtualinvoke r3.<org.springframework.http.converter.AbstractHttpMessageConverter: java.lang.Long getContentLength(java.lang.Object,org.springframework.http.MediaType)>(r4, r6);

        if $r5 == null goto label4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        virtualinvoke $r1.<org.springframework.http.HttpHeaders: void setContentLength(long)>($l0);

     label4:
        virtualinvoke r3.<org.springframework.http.converter.AbstractHttpMessageConverter: void writeInternal(java.lang.Object,org.springframework.http.HttpOutputMessage)>(r4, r0);

        $r7 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        virtualinvoke $r7.<java.io.OutputStream: void flush()>();

        return;
    }

    protected org.springframework.http.MediaType getDefaultContentType(java.lang.Object)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.util.List $r1;
        org.springframework.http.MediaType $r4;
        java.lang.Object $r2, r3;
        boolean $z0;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.springframework.http.MediaType) $r2;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    protected java.lang.Long getContentLength(java.lang.Object, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.AbstractHttpMessageConverter r0;
        java.lang.Object r1;
        org.springframework.http.MediaType r2;

        r0 := @this: org.springframework.http.converter.AbstractHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        return null;
    }

    protected abstract boolean supports(java.lang.Class);

    protected abstract java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;

    protected abstract void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
}
