public class org.waveprotocol.box.server.robots.testing.OperationServiceHelper extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC;
    private static final org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY;
    private static final org.waveprotocol.wave.model.wave.data.DocumentFactory DOCUMENT_FACTORY;
    private final org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider;
    private final org.waveprotocol.box.server.robots.OperationContextImpl context;

    public void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.robots.testing.OperationServiceHelper r0;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r5;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r2, $r26;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread $r24;
        org.waveprotocol.wave.model.wave.ParticipantId r8;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r23;
        com.google.wave.api.data.converter.v22.EventDataConverterV22 $r3;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r4;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r22;
        org.waveprotocol.wave.model.id.WaveletName r7;
        org.waveprotocol.box.server.robots.RobotWaveletData $r27;
        org.waveprotocol.wave.model.id.WaveId $r10, $r17, $r30;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl $r13;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r15, $r18;
        org.waveprotocol.wave.model.id.WaveletId $r11, $r31;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r16;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r9, $r28;
        org.waveprotocol.wave.model.version.HashedVersion $r12, $r32;
        org.waveprotocol.wave.model.wave.ParticipationHelper $r19;
        org.waveprotocol.box.server.robots.util.ConversationUtil $r20;
        org.waveprotocol.box.server.robots.OperationContextImpl $r25, $r29;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r6;
        org.waveprotocol.wave.model.id.IdGenerator $r21;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory $r14;

        r0 := @this: org.waveprotocol.box.server.robots.testing.OperationServiceHelper;

        r7 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r8 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletProvider;");

        $r2 = (org.waveprotocol.box.server.waveserver.WaveletProvider) $r1;

        r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider> = $r2;

        $r3 = new com.google.wave.api.data.converter.v22.EventDataConverterV22;

        specialinvoke $r3.<com.google.wave.api.data.converter.v22.EventDataConverterV22: void <init>()>();

        $r4 = <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.wave.data.DocumentFactory DOCUMENT_FACTORY>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r4);

        $r6 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r10 = r7.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r11 = r7.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r9 = <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        $r12 = interfaceinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>(r7);

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>($r10, $r11, r8, $r12, 0L);

        $r13 = virtualinvoke $r5.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r6);

        interfaceinvoke $r13.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r8);

        $r14 = new org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory;

        specialinvoke $r14.<org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(r8);

        $r15 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Executor: org.waveprotocol.wave.model.operation.SilentOperationSink build(java.lang.Object)>($r13);

        $r16 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r17 = interfaceinvoke $r13.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r19 = <org.waveprotocol.wave.model.wave.ParticipationHelper: org.waveprotocol.wave.model.wave.ParticipationHelper DEFAULT>;

        $r18 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        specialinvoke $r16.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>($r17, $r13, $r14, $r19, $r15, $r18);

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void makeWaveletConversational(org.waveprotocol.wave.model.wave.Wavelet)>($r16);

        $r20 = new org.waveprotocol.box.server.robots.util.ConversationUtil;

        $r21 = staticinvoke <org.waveprotocol.wave.model.testing.FakeIdGenerator: org.waveprotocol.wave.model.id.IdGenerator create()>();

        specialinvoke $r20.<org.waveprotocol.box.server.robots.util.ConversationUtil: void <init>(org.waveprotocol.wave.model.id.IdGenerator)>($r21);

        $r22 = virtualinvoke $r20.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.conversation.ObservableConversationView buildConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r16);

        $r23 = interfaceinvoke $r22.<org.waveprotocol.wave.model.conversation.ObservableConversationView: org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()>();

        $r24 = interfaceinvoke $r23.<org.waveprotocol.wave.model.conversation.ObservableConversation: org.waveprotocol.wave.model.conversation.ObservableConversationThread getRootThread()>();

        interfaceinvoke $r24.<org.waveprotocol.wave.model.conversation.ObservableConversationThread: org.waveprotocol.wave.model.conversation.ObservableConversationBlip appendBlip()>();

        $r25 = new org.waveprotocol.box.server.robots.OperationContextImpl;

        $r26 = r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        specialinvoke $r25.<org.waveprotocol.box.server.robots.OperationContextImpl: void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider,com.google.wave.api.data.converter.EventDataConverter,org.waveprotocol.box.server.robots.util.ConversationUtil)>($r26, $r3, $r20);

        r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.robots.OperationContextImpl context> = $r25;

        $r29 = r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.robots.OperationContextImpl context>;

        $r30 = r7.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r31 = r7.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r27 = new org.waveprotocol.box.server.robots.RobotWaveletData;

        $r28 = <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        $r32 = interfaceinvoke $r28.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>(r7);

        specialinvoke $r27.<org.waveprotocol.box.server.robots.RobotWaveletData: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.version.HashedVersion)>($r13, $r32);

        virtualinvoke $r29.<org.waveprotocol.box.server.robots.OperationContextImpl: void putWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.box.server.robots.RobotWaveletData)>($r30, $r31, $r27);

        return;
    }

    public org.waveprotocol.box.server.waveserver.WaveletProvider getWaveletProvider()
    {
        org.waveprotocol.box.server.robots.testing.OperationServiceHelper r0;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r1;

        r0 := @this: org.waveprotocol.box.server.robots.testing.OperationServiceHelper;

        $r1 = r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        return $r1;
    }

    public org.waveprotocol.box.server.robots.OperationContextImpl getContext()
    {
        org.waveprotocol.box.server.robots.testing.OperationServiceHelper r0;
        org.waveprotocol.box.server.robots.OperationContextImpl $r1;

        r0 := @this: org.waveprotocol.box.server.robots.testing.OperationServiceHelper;

        $r1 = r0.<org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.box.server.robots.OperationContextImpl context>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec $r1;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r4;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r0, $r3;
        org.waveprotocol.wave.model.version.HashedVersionFactoryImpl $r2;

        $r0 = new org.waveprotocol.wave.model.id.IdURIEncoderDecoder;

        $r1 = new org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec;

        specialinvoke $r1.<org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec: void <init>()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: void <init>(org.waveprotocol.wave.model.id.URIEncoderDecoder$PercentEncoderDecoder)>($r1);

        <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC> = $r0;

        $r2 = new org.waveprotocol.wave.model.version.HashedVersionFactoryImpl;

        $r3 = <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC>;

        specialinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersionFactoryImpl: void <init>(org.waveprotocol.wave.model.id.IdURIEncoderDecoder)>($r3);

        <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY> = $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.wave.data.DocumentFactory observablePluggableMutableDocumentFactory()>();

        <org.waveprotocol.box.server.robots.testing.OperationServiceHelper: org.waveprotocol.wave.model.wave.data.DocumentFactory DOCUMENT_FACTORY> = $r4;

        return;
    }
}
