public class org.apache.tika.parser.chm.accessor.ChmLzxcResetTable extends java.lang.Object implements org.apache.tika.parser.chm.accessor.ChmAccessor
{
    private static final long serialVersionUID;
    private long version;
    private long block_count;
    private long 'unknown';
    private long table_offset;
    private long uncompressed_len;
    private long compressed_len;
    private long block_len;
    private long[] block_address;
    private int dataRemained;
    private int currentPlace;

    public void <init>()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int currentPlace> = 0;

        return;
    }

    private int getDataRemained()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int dataRemained>;

        return $i0;
    }

    private void setDataRemained(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int dataRemained> = i0;

        return;
    }

    public long[] getBlockAddress()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long[] $r1;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] block_address>;

        return $r1;
    }

    public void setBlockAddress(long[])
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long[] r1;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r1 := @parameter0: long[];

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] block_address> = r1;

        return;
    }

    private int getCurrentPlace()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int currentPlace>;

        return $i0;
    }

    private void setCurrentPlace(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int currentPlace> = i0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r24, $r26, $r27, $r28, $r30, $r32, $r33, $r34, $r36, $r38, $r39, $r40, $r42, $r44, $r45, $r48;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r3;
        long[] $r46;
        java.lang.String $r5, $r7, $r11, $r13, $r17, $r19, $r23, $r25, $r29, $r31, $r35, $r37, $r41, $r43, $r47, $r49, $r50;

        r3 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version:=");

        $l0 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("block_count:=");

        $l1 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockCount()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown:=");

        $l2 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getUnknown()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("table_offset:=");

        $l3 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getTableOffset()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r23 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uncompressed_len:=");

        $l4 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getUncompressedLen()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r29 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compressed_len:=");

        $l5 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getCompressedLen()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r35 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("block_len:=");

        $l6 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockLen()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r41 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("block_addresses:=");

        $r46 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $r47 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r46);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r50 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r50;
    }

    private long[] enumerateBlockAddresses(byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        long $l0, $l2, $l4, $l9, $l10;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r1;
        long[] $r5;
        byte $b1, $b3;
        org.apache.tika.exception.TikaException $r6;
        int $i5, $i6, $i7, $i8, $i11, $i12, $i13, i14, $i15, $i16;
        java.lang.String $r4;
        java.lang.Exception $r2;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r0 := @parameter0: byte[];

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $l0 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockCount()>();

        $b1 = $l0 cmp 5000L;

        $i15 = (int) $b1;

        if $i15 <= 0 goto label1;

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setBlockCount(long)>(5000L);

     label1:
        $l2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockCount()>();

        $b3 = $l2 cmp 0L;

        $i16 = (int) $b3;

        if $i16 >= 0 goto label2;

        $i5 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getDataRemained()>();

        $i6 = $i5 / 8;

        if $i6 <= 0 goto label2;

        $i7 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getDataRemained()>();

        $i8 = $i7 / 8;

        $l9 = (long) $i8;

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setBlockCount(long)>($l9);

     label2:
        $l10 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockCount()>();

        $i11 = (int) $l10;

        $r5 = newarray (long)[$i11];

        $i12 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getDataRemained()>();

        $i13 = $i12 / 8;

        i14 = 0;

     label3:
        if i14 >= $i13 goto label8;

     label4:
        $l4 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUint64(byte[],long)>(r0, -1L);

        $r5[i14] = $l4;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r6 = new org.apache.tika.exception.TikaException;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label7:
        i14 = i14 + 1;

        goto label3;

     label8:
        return $r5;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    private boolean validateParamaters(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcResetTable) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r1, r2;
        boolean $z0;

        r2 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor)>(r1);

        if 2 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long unmarshalUInt32(byte[], long) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        long l21, l22;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r1;
        byte $b1, $b4, $b9, $b14;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r0 := @parameter0: byte[];

        l21 := @parameter1: long;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $b1 = r0[$i0];

        $i2 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $i3 = $i2 + 1;

        $b4 = r0[$i3];

        $i23 = (int) $b4;

        $i5 = $i23 << 8;

        $i24 = (int) $b1;

        $i6 = $i24 | $i5;

        $i7 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $i8 = $i7 + 2;

        $b9 = r0[$i8];

        $i25 = (int) $b9;

        $i10 = $i25 << 16;

        $i11 = $i6 | $i10;

        $i12 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $i13 = $i12 + 3;

        $b14 = r0[$i13];

        $i26 = (int) $b14;

        $i15 = $i26 << 24;

        $i16 = $i11 | $i15;

        l22 = (long) $i16;

        $i17 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getDataRemained()>();

        $i18 = $i17 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setDataRemained(int)>($i18);

        $i19 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $i20 = $i19 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setCurrentPlace(int)>($i20);

        return l22;
    }

    private long unmarshalUint64(byte[], long) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, r1;
        long $l0, l10;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r3;
        byte $b7;
        org.apache.tika.exception.TikaException $r5;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i11, i12, $i14, $i16;
        java.math.BigInteger $r6;

        r3 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r0 := @parameter0: byte[];

        l10 := @parameter1: long;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        r1 = newarray (byte)[8];

        i11 = 8;

        i12 = 7;

     label1:
        if i11 <= 0 goto label4;

        $i3 = lengthof r0;

        $i4 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        if $i3 <= $i4 goto label2;

        $i5 = i12;

        $i14 = (int) -1;

        i12 = i12 + $i14;

        $i6 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $b7 = r0[$i6];

        r1[$i5] = $b7;

        $i8 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getCurrentPlace()>();

        $i9 = $i8 + 1;

        specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setCurrentPlace(int)>($i9);

        goto label3;

     label2:
        $r5 = new org.apache.tika.exception.TikaException;

        specialinvoke $r5.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("data is too small to calculate address block");

        throw $r5;

     label3:
        $i16 = (int) -1;

        i11 = i11 + $i16;

        goto label1;

     label4:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(byte[])>(r1);

        $l0 = virtualinvoke $r6.<java.math.BigInteger: long longValue()>();

        $i1 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: int getDataRemained()>();

        $i2 = $i1 - 8;

        specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setDataRemained(int)>($i2);

        return $l0;
    }

    public long getVersion()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long version>;

        return $l0;
    }

    public void setVersion(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long version> = l0;

        return;
    }

    public long getBlockCount()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long block_count>;

        return $l0;
    }

    public void setBlockCount(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long block_count> = l0;

        return;
    }

    public long getUnknown()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long 'unknown'>;

        return $l0;
    }

    public void setUnknown(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long 'unknown'> = l0;

        return;
    }

    public long getTableOffset()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long table_offset>;

        return $l0;
    }

    public void setTableOffset(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long table_offset> = l0;

        return;
    }

    public long getUncompressedLen()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long uncompressed_len>;

        return $l0;
    }

    public void setUncompressedLen(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long uncompressed_len> = l0;

        return;
    }

    public long getCompressedLen()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long compressed_len>;

        return $l0;
    }

    public void setCompressedLen(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long compressed_len> = l0;

        return;
    }

    public long getBlockLen()
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long block_len>;

        return $l0;
    }

    public void setBlockLlen(long)
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long block_len> = l0;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public void parse(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcResetTable) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        long $l1, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0, r2;
        org.apache.tika.parser.chm.exception.ChmParsingException $r3;
        long[] $r4;
        byte $b2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setDataRemained(int)>($i0);

        $z0 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: boolean validateParamaters(byte[],org.apache.tika.parser.chm.accessor.ChmLzxcResetTable)>(r1, r2);

        if $z0 == 0 goto label1;

        $l3 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getVersion()>();

        $l4 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUInt32(byte[],long)>(r1, $l3);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setVersion(long)>($l4);

        $l5 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockCount()>();

        $l6 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUInt32(byte[],long)>(r1, $l5);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setBlockCount(long)>($l6);

        $l7 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getUnknown()>();

        $l8 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUInt32(byte[],long)>(r1, $l7);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setUnknown(long)>($l8);

        $l9 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getTableOffset()>();

        $l10 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUInt32(byte[],long)>(r1, $l9);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setTableOffset(long)>($l10);

        $l11 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getUncompressedLen()>();

        $l12 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUint64(byte[],long)>(r1, $l11);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setUncompressedLen(long)>($l12);

        $l13 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getCompressedLen()>();

        $l14 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUint64(byte[],long)>(r1, $l13);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setCompressedLen(long)>($l14);

        $l15 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getBlockLen()>();

        $l16 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long unmarshalUint64(byte[],long)>(r1, $l15);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setBlockLlen(long)>($l16);

        $r4 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] enumerateBlockAddresses(byte[])>(r1);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void setBlockAddress(long[])>($r4);

     label1:
        $l1 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long getVersion()>();

        $b2 = $l1 cmp 2L;

        if $b2 == 0 goto label2;

        $r3 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r3.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("does not seem currect version of chmLzxcResetTable");

        throw $r3;

     label2:
        return;
    }

    public volatile void parse(byte[], java.lang.Object) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r0, $r3;
        byte[] r1;
        java.lang.Object r2;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.tika.parser.chm.accessor.ChmLzxcResetTable) r2;

        virtualinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: void parse(byte[],org.apache.tika.parser.chm.accessor.ChmLzxcResetTable)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long serialVersionUID> = -8209574429411707460L;

        return;
    }
}
