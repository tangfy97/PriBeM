public abstract class org.tukaani.xz.lz.LZEncoder extends java.lang.Object
{
    public static final int MF_HC4;
    public static final int MF_BT4;
    private final int keepSizeBefore;
    private final int keepSizeAfter;
    final int matchLenMax;
    final int niceLen;
    final byte[] buf;
    int readPos;
    private int readLimit;
    private boolean finishing;
    private int writePos;
    private int pendingSize;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$lz$LZEncoder;

    static void normalize(int[], int)
    {
        int[] r0;
        int $i0, i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label4;

        $i2 = r0[i5];

        if $i2 > i1 goto label2;

        r0[i5] = 0;

        goto label3;

     label2:
        $i3 = r0[i5];

        $i4 = $i3 - i1;

        r0[i5] = $i4;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    private static int getBufSize(int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i2 = i0 + i1;

        i5 = i3 + i4;

        $i6 = i1 / 2;

        $i7 = $i6 + 262144;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, 536870912);

        $i9 = i2 + i5;

        $i10 = $i9 + $i8;

        return $i10;
    }

    public static int getMemoryUsage(int, int, int, int, int)
    {
        java.lang.IllegalArgumentException $r0;
        int i0, i1, i2, i3, $i4, $i5, i6, $i7, $i8, i9, i10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i6 := @parameter4: int;

        $i4 = staticinvoke <org.tukaani.xz.lz.LZEncoder: int getBufSize(int,int,int,int)>(i0, i1, i2, i3);

        $i5 = $i4 / 1024;

        i9 = $i5 + 10;

        lookupswitch(i6)
        {
            case 4: goto label1;
            case 20: goto label2;
            default: goto label3;
        };

     label1:
        $i8 = staticinvoke <org.tukaani.xz.lz.HC4: int getMemoryUsage(int)>(i0);

        i10 = i9 + $i8;

        goto label4;

     label2:
        $i7 = staticinvoke <org.tukaani.xz.lz.BT4: int getMemoryUsage(int)>(i0);

        i10 = i9 + $i7;

        goto label4;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label4:
        return i10;
    }

    public static org.tukaani.xz.lz.LZEncoder getInstance(int, int, int, int, int, int, int)
    {
        org.tukaani.xz.lz.BT4 $r0;
        org.tukaani.xz.lz.HC4 $r1;
        java.lang.IllegalArgumentException $r2;
        int i0, i1, i2, i3, i4, i5, i6;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        i0 := @parameter5: int;

        i6 := @parameter6: int;

        lookupswitch(i0)
        {
            case 4: goto label1;
            case 20: goto label2;
            default: goto label3;
        };

     label1:
        $r1 = new org.tukaani.xz.lz.HC4;

        specialinvoke $r1.<org.tukaani.xz.lz.HC4: void <init>(int,int,int,int,int,int)>(i1, i2, i3, i4, i5, i6);

        return $r1;

     label2:
        $r0 = new org.tukaani.xz.lz.BT4;

        specialinvoke $r0.<org.tukaani.xz.lz.BT4: void <init>(int,int,int,int,int,int)>(i1, i2, i3, i4, i5, i6);

        return $r0;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    void <init>(int, int, int, int, int)
    {
        byte[] $r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, $i9, $i11;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i7 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i9 = (int) -1;

        r0.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i9;

        $i11 = (int) -1;

        r0.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i11;

        r0.<org.tukaani.xz.lz.LZEncoder: boolean finishing> = 0;

        r0.<org.tukaani.xz.lz.LZEncoder: int writePos> = 0;

        r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = 0;

        $i4 = staticinvoke <org.tukaani.xz.lz.LZEncoder: int getBufSize(int,int,int,int)>(i0, i1, i2, i3);

        $r1 = newarray (byte)[$i4];

        r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf> = $r1;

        $i5 = i1 + i0;

        r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeBefore> = $i5;

        $i6 = i2 + i3;

        r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter> = $i6;

        r0.<org.tukaani.xz.lz.LZEncoder: int matchLenMax> = i3;

        r0.<org.tukaani.xz.lz.LZEncoder: int niceLen> = i7;

        return;
    }

    public void setPresetDict(int, byte[])
    {
        byte[] r0, $r2;
        java.lang.AssertionError $r3, $r4;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        org.tukaani.xz.lz.LZEncoder r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i7 = r1.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        if $i7 == 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        if r0 == null goto label3;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        $i3 = lengthof r0;

        i4 = $i3 - $i2;

        $r2 = r1.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i4, $r2, 0, $i2);

        $i5 = r1.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i6 = $i5 + $i2;

        r1.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i6;

        virtualinvoke r1.<org.tukaani.xz.lz.LZEncoder: void skip(int)>($i2);

     label3:
        return;
    }

    private void moveWindow()
    {
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeBefore>;

        $i3 = $i2 - $i1;

        $i14 = (int) -16;

        i4 = $i3 & $i14;

        $i5 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        i6 = $i5 - i4;

        $r2 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i4, $r1, 0, i6);

        $i7 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i8 = $i7 - i4;

        r0.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i8;

        $i9 = r0.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        $i10 = $i9 - i4;

        r0.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i10;

        $i11 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i12 = $i11 - i4;

        r0.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i12;

        return;
    }

    public int fillWindow(byte[], int, int)
    {
        byte[] $r1, $r2, r3, $r4, $r5;
        java.lang.AssertionError $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        r3 := @parameter0: byte[];

        i7 := @parameter1: int;

        i18 := @parameter2: int;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.tukaani.xz.lz.LZEncoder: boolean finishing>;

        if $z1 == 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $i3 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        $i2 = $i1 - $i0;

        if $i3 < $i2 goto label2;

        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void moveWindow()>();

     label2:
        $r2 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i5 = lengthof $r2;

        $i4 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i6 = $i5 - $i4;

        if i18 <= $i6 goto label3;

        $r5 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i17 = lengthof $r5;

        $i16 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        i18 = $i17 - $i16;

     label3:
        $r4 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i8 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i7, $r4, $i8, i18);

        $i9 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i10 = $i9 + i18;

        r0.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i10;

        $i12 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i11 = r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        if $i12 < $i11 goto label4;

        $i14 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i13 = r0.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        $i15 = $i14 - $i13;

        r0.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i15;

     label4:
        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void processPendingBytes()>();

        return i18;
    }

    private void processPendingBytes()
    {
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        if $i0 <= 0 goto label1;

        $i2 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        if $i2 >= $i1 goto label1;

        $i4 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i3 = r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        $i5 = $i4 - $i3;

        r0.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i5;

        i6 = r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = 0;

        virtualinvoke r0.<org.tukaani.xz.lz.LZEncoder: void skip(int)>(i6);

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i7 = r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        if $i7 < i6 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public boolean isStarted()
    {
        int $i0, $i2;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setFlushing()
    {
        int $i0, $i1;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i1 = $i0 - 1;

        r0.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i1;

        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void processPendingBytes()>();

        return;
    }

    public void setFinishing()
    {
        int $i0, $i1;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i1 = $i0 - 1;

        r0.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i1;

        r0.<org.tukaani.xz.lz.LZEncoder: boolean finishing> = 1;

        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void processPendingBytes()>();

        return;
    }

    public boolean hasEnoughData(int)
    {
        int i0, $i1, $i2, $i3;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i3 = $i1 - i0;

        $i2 = r0.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        if $i3 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void copyUncompressed(java.io.OutputStream, int, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        int $i0, i1, $i2, i3, $i4;
        org.tukaani.xz.lz.LZEncoder r1;

        r1 := @this: org.tukaani.xz.lz.LZEncoder;

        r0 := @parameter0: java.io.OutputStream;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        $r2 = r1.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i0 = r1.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i0 + 1;

        $i4 = $i2 - i1;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r2, $i4, i3);

        return;
    }

    public int getAvail()
    {
        int $i0, $i1, $i2;
        java.lang.AssertionError $r1;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public int getPos()
    {
        int $i0;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        return $i0;
    }

    public int getByte(int)
    {
        byte[] $r1;
        short $s4, $s5;
        byte $b3;
        int i0, $i1, $i2, $i6;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i1 - i0;

        $b3 = $r1[$i2];

        $s5 = (short) $b3;

        $s4 = $s5 & 255;

        $i6 = (int) $s4;

        return $i6;
    }

    public int getByte(int, int)
    {
        byte[] $r1;
        short $s6, $s7;
        byte $b5;
        int i0, $i1, i2, $i3, $i4, $i8;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i3 = $i1 + i0;

        $i4 = $i3 - i2;

        $b5 = $r1[$i4];

        $s7 = (short) $b5;

        $s6 = $s7 & 255;

        $i8 = (int) $s6;

        return $i8;
    }

    public int getMatchLen(int, int)
    {
        byte[] $r1, $r2;
        byte $b8, $b9;
        int i0, $i1, $i2, i3, i4, $i5, $i6, $i7, i10, $i11, $i12;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i1 - i0;

        i3 = $i2 - 1;

        i10 = 0;

     label1:
        if i10 >= i4 goto label2;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i5 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i6 = $i5 + i10;

        $b9 = $r1[$i6];

        $r2 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i7 = i3 + i10;

        $b8 = $r2[$i7];

        $i11 = (int) $b9;

        $i12 = (int) $b8;

        if $i11 != $i12 goto label2;

        i10 = i10 + 1;

        goto label1;

     label2:
        return i10;
    }

    public int getMatchLen(int, int, int)
    {
        byte[] $r1, $r2;
        byte $b9, $b10;
        int i0, $i1, i2, i3, $i4, i5, i6, $i7, $i8, i11, $i12, $i13;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        i2 = $i1 + i0;

        $i4 = i2 - i3;

        i5 = $i4 - 1;

        i11 = 0;

     label1:
        if i11 >= i6 goto label2;

        $r1 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i7 = i2 + i11;

        $b10 = $r1[$i7];

        $r2 = r0.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i8 = i5 + i11;

        $b9 = $r2[$i8];

        $i12 = (int) $b10;

        $i13 = (int) $b9;

        if $i12 != $i13 goto label2;

        i11 = i11 + 1;

        goto label1;

     label2:
        return i11;
    }

    public boolean verifyMatches(org.tukaani.xz.lz.Matches)
    {
        org.tukaani.xz.lz.Matches r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.tukaani.xz.lz.LZEncoder r0;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        r1 := @parameter0: org.tukaani.xz.lz.Matches;

        $i0 = virtualinvoke r0.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        $i1 = r0.<org.tukaani.xz.lz.LZEncoder: int matchLenMax>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        i7 = 0;

     label1:
        $i3 = r1.<org.tukaani.xz.lz.Matches: int count>;

        if i7 >= $i3 goto label3;

        $r2 = r1.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i4 = $r2[i7];

        $i5 = virtualinvoke r0.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i4, $i2);

        $r3 = r1.<org.tukaani.xz.lz.Matches: int[] len>;

        $i6 = $r3[i7];

        if $i5 == $i6 goto label2;

        return 0;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        return 1;
    }

    int movePos(int, int)
    {
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9;
        org.tukaani.xz.lz.LZEncoder r0;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.lz.LZEncoder;

        i4 := @parameter0: int;

        i5 := @parameter1: int;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i4 >= i5 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 + 1;

        r0.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i1;

        $i3 = r0.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i2 = r0.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i8 = $i3 - $i2;

        i9 = $i8;

        if $i8 >= i4 goto label3;

        if $i8 < i5 goto label2;

        $z1 = r0.<org.tukaani.xz.lz.LZEncoder: boolean finishing>;

        if $z1 != 0 goto label3;

     label2:
        $i6 = r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        $i7 = $i6 + 1;

        r0.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = $i7;

        i9 = 0;

     label3:
        return i9;
    }

    public abstract org.tukaani.xz.lz.Matches getMatches();

    public abstract void skip(int);

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.lz.LZEncoder: int MF_BT4> = 20;

        <org.tukaani.xz.lz.LZEncoder: int MF_HC4> = 4;

        $r0 = <org.tukaani.xz.lz.LZEncoder: java.lang.Class class$org$tukaani$xz$lz$LZEncoder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.lz.LZEncoder: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.lz.LZEncoder");

        <org.tukaani.xz.lz.LZEncoder: java.lang.Class class$org$tukaani$xz$lz$LZEncoder> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.lz.LZEncoder: java.lang.Class class$org$tukaani$xz$lz$LZEncoder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
