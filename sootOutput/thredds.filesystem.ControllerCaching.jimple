public class thredds.filesystem.ControllerCaching extends java.lang.Object implements thredds.inventory.MController
{
    private thredds.filesystem.CacheManager cacheManager;

    public static thredds.inventory.MController makeStandardController(java.lang.String, java.lang.String) throws java.io.IOException
    {
        thredds.filesystem.ControllerCaching $r3;
        thredds.filesystem.CacheManager $r2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <thredds.filesystem.CacheManager: void makeStandardCacheManager(java.lang.String,java.lang.String)>(r0, r1);

        $r2 = new thredds.filesystem.CacheManager;

        specialinvoke $r2.<thredds.filesystem.CacheManager: void <init>(java.lang.String)>("directories");

        $r3 = new thredds.filesystem.ControllerCaching;

        specialinvoke $r3.<thredds.filesystem.ControllerCaching: void <init>(thredds.filesystem.CacheManager)>($r2);

        return $r3;
    }

    public static thredds.inventory.MController makeTestController(java.lang.String)
    {
        thredds.filesystem.CacheManager $r1;
        java.lang.String r0;
        thredds.filesystem.ControllerCaching $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <thredds.filesystem.CacheManager: void makeTestCacheManager(java.lang.String)>(r0);

        $r1 = new thredds.filesystem.CacheManager;

        specialinvoke $r1.<thredds.filesystem.CacheManager: void <init>(java.lang.String)>("directories");

        $r2 = new thredds.filesystem.ControllerCaching;

        specialinvoke $r2.<thredds.filesystem.ControllerCaching: void <init>(thredds.filesystem.CacheManager)>($r1);

        return $r2;
    }

    private void <init>(thredds.filesystem.CacheManager)
    {
        thredds.filesystem.CacheManager r1;
        thredds.filesystem.ControllerCaching r0;

        r0 := @this: thredds.filesystem.ControllerCaching;

        r1 := @parameter0: thredds.filesystem.CacheManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager> = r1;

        return;
    }

    public java.util.Iterator getInventory(thredds.inventory.MCollection)
    {
        thredds.inventory.MCollection r1;
        java.util.Iterator $r2;
        thredds.filesystem.ControllerCaching r0;

        r0 := @this: thredds.filesystem.ControllerCaching;

        r1 := @parameter0: thredds.inventory.MCollection;

        $r2 = virtualinvoke r0.<thredds.filesystem.ControllerCaching: java.util.Iterator getInventory(thredds.inventory.MCollection,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.Iterator getInventoryNoSubdirs(thredds.inventory.MCollection)
    {
        thredds.inventory.MCollection r1;
        java.util.Iterator $r2;
        thredds.filesystem.ControllerCaching r0;

        r0 := @this: thredds.filesystem.ControllerCaching;

        r1 := @parameter0: thredds.inventory.MCollection;

        $r2 = virtualinvoke r0.<thredds.filesystem.ControllerCaching: java.util.Iterator getInventoryNoSubdirs(thredds.inventory.MCollection,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.Iterator getInventory(thredds.inventory.MCollection, boolean)
    {
        thredds.filesystem.CacheDirectory $r4;
        thredds.inventory.MCollection r0;
        thredds.filesystem.ControllerCaching$FilteredIterator $r5;
        thredds.filesystem.ControllerCaching r2;
        thredds.filesystem.CacheManager $r3;
        java.lang.String $r1, r7;
        thredds.filesystem.ControllerCaching$MFileIteratorWithSubdirs $r6;
        boolean $z0, z1, $z2;

        r2 := @this: thredds.filesystem.ControllerCaching;

        r0 := @parameter0: thredds.inventory.MCollection;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<thredds.inventory.MCollection: java.lang.String getDirectoryName()>();

        r7 = $r1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z0 == 0 goto label1;

        r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(5);

     label1:
        $r3 = r2.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager>;

        $r4 = virtualinvoke $r3.<thredds.filesystem.CacheManager: thredds.filesystem.CacheDirectory get(java.lang.String,boolean)>(r7, z1);

        if $r4 != null goto label2;

        return null;

     label2:
        $z2 = virtualinvoke $r4.<thredds.filesystem.CacheDirectory: boolean isDirectory()>();

        if $z2 != 0 goto label3;

        return null;

     label3:
        $r5 = new thredds.filesystem.ControllerCaching$FilteredIterator;

        $r6 = new thredds.filesystem.ControllerCaching$MFileIteratorWithSubdirs;

        specialinvoke $r6.<thredds.filesystem.ControllerCaching$MFileIteratorWithSubdirs: void <init>(thredds.filesystem.ControllerCaching,thredds.filesystem.CacheDirectory,boolean)>(r2, $r4, z1);

        specialinvoke $r5.<thredds.filesystem.ControllerCaching$FilteredIterator: void <init>(thredds.filesystem.ControllerCaching,thredds.inventory.MCollection,java.util.Iterator)>(r2, r0, $r6);

        return $r5;
    }

    public java.util.Iterator getInventoryNoSubdirs(thredds.inventory.MCollection, boolean)
    {
        thredds.filesystem.CacheDirectory $r4;
        thredds.inventory.MCollection r0;
        thredds.filesystem.ControllerCaching$FilteredIterator $r5;
        thredds.filesystem.ControllerCaching r2;
        thredds.filesystem.CacheManager $r3;
        thredds.filesystem.ControllerCaching$MFileIterator $r6;
        java.lang.String $r1, r7;
        boolean $z0, z1, $z2;

        r2 := @this: thredds.filesystem.ControllerCaching;

        r0 := @parameter0: thredds.inventory.MCollection;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<thredds.inventory.MCollection: java.lang.String getDirectoryName()>();

        r7 = $r1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z0 == 0 goto label1;

        r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(5);

     label1:
        $r3 = r2.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager>;

        $r4 = virtualinvoke $r3.<thredds.filesystem.CacheManager: thredds.filesystem.CacheDirectory get(java.lang.String,boolean)>(r7, z1);

        if $r4 != null goto label2;

        return null;

     label2:
        $z2 = virtualinvoke $r4.<thredds.filesystem.CacheDirectory: boolean isDirectory()>();

        if $z2 != 0 goto label3;

        return null;

     label3:
        $r5 = new thredds.filesystem.ControllerCaching$FilteredIterator;

        $r6 = new thredds.filesystem.ControllerCaching$MFileIterator;

        specialinvoke $r6.<thredds.filesystem.ControllerCaching$MFileIterator: void <init>(thredds.filesystem.ControllerCaching,thredds.filesystem.CacheDirectory)>(r2, $r4);

        specialinvoke $r5.<thredds.filesystem.ControllerCaching$FilteredIterator: void <init>(thredds.filesystem.ControllerCaching,thredds.inventory.MCollection,java.util.Iterator)>(r2, r0, $r6);

        return $r5;
    }

    public void close()
    {
        thredds.filesystem.CacheManager $r1, $r2;
        thredds.filesystem.ControllerCaching r0;

        r0 := @this: thredds.filesystem.ControllerCaching;

        $r1 = r0.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager>;

        if $r1 == null goto label1;

        $r2 = r0.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager>;

        virtualinvoke $r2.<thredds.filesystem.CacheManager: void close()>();

     label1:
        r0.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager> = null;

        return;
    }

    static thredds.filesystem.CacheManager access$000(thredds.filesystem.ControllerCaching)
    {
        thredds.filesystem.CacheManager $r1;
        thredds.filesystem.ControllerCaching r0;

        r0 := @parameter0: thredds.filesystem.ControllerCaching;

        $r1 = r0.<thredds.filesystem.ControllerCaching: thredds.filesystem.CacheManager cacheManager>;

        return $r1;
    }
}
