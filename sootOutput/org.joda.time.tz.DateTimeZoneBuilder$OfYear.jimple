final class org.joda.time.tz.DateTimeZoneBuilder$OfYear extends java.lang.Object
{
    final char iMode;
    final int iMonthOfYear;
    final int iDayOfMonth;
    final int iDayOfWeek;
    final boolean iAdvance;
    final int iMillisOfDay;

    static org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput) throws java.io.IOException
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r2;
        char $c1;
        long $l5;
        byte $b3;
        java.io.DataInput r1;
        int $i0, $i2, $i4, $i6, $i7;
        boolean $z0;

        r1 := @parameter0: java.io.DataInput;

        $r2 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $i0 = interfaceinvoke r1.<java.io.DataInput: int readUnsignedByte()>();

        $c1 = (char) $i0;

        $i2 = interfaceinvoke r1.<java.io.DataInput: int readUnsignedByte()>();

        $b3 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>();

        $i4 = interfaceinvoke r1.<java.io.DataInput: int readUnsignedByte()>();

        $z0 = interfaceinvoke r1.<java.io.DataInput: boolean readBoolean()>();

        $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r1);

        $i6 = (int) $l5;

        $i7 = (int) $b3;

        specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c1, $i2, $i7, $i4, $z0, $i6);

        return $r2;
    }

    void <init>(char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        char c0;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuffer $r3, $r4, $r6;
        int i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.String $r5;
        boolean z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        i4 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i5 = (int) c0;

        if $i5 == 117 goto label1;

        $i6 = (int) c0;

        if $i6 == 119 goto label1;

        $i7 = (int) c0;

        if $i7 == 115 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown mode: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label1:
        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> = c0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> = i1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> = i2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> = i3;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> = z0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> = i4;

        return;
    }

    public long setInstant(int, int, int)
    {
        long $l3, $l4, $l8, $l10, $l12, $l13, l14;
        int i2, i5, i6, i7, $i9, $i11, $i15, $i16, $i17;
        org.joda.time.DateTimeField $r2, $r3, $r4;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        char $c0, $c1;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        i2 := @parameter0: int;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i16 = (int) $c0;

        if $i16 != 119 goto label1;

        i7 = i5 + i6;

        goto label3;

     label1:
        $c1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i17 = (int) $c1;

        if $i17 != 115 goto label2;

        i7 = i5;

        goto label3;

     label2:
        i7 = 0;

     label3:
        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, i2);

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l8, $i9);

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l10, $i11);

        $l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l12);

        l14 = $l13;

        $i15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i15 == 0 goto label4;

        l14 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l13);

     label4:
        $l3 = (long) i7;

        $l4 = l14 - $l3;

        return $l4;
    }

    public long next(long, int, int)
    {
        byte $b3, $b8;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r5, $r6, $r7;
        org.joda.time.chrono.ISOChronology $r4;
        long $l2, $l4, $l6, $l7, $l9, l12, $l14, $l15, $l17, $l18, $l20, $l21, l22, $l24, $l25;
        int $i5, i10, i11, i13, $i16, $i19, $i23, $i26, $i27, $i28, $i29;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        char $c0, $c1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        l12 := @parameter0: long;

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i26 = (int) $c0;

        if $i26 != 119 goto label1;

        i13 = i10 + i11;

        goto label3;

     label1:
        $c1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i27 = (int) $c1;

        if $i27 != 115 goto label2;

        i13 = i10;

        goto label3;

     label2:
        i13 = 0;

     label3:
        $l14 = (long) i13;

        $l15 = l12 + $l14;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l17 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>($l15, $i16);

        $r6 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>($l17, 0);

        $r7 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long add(long,int)>($l18, $i19);

        $l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r4, $l20);

        l22 = $l21;

        $i23 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i23 != 0 goto label4;

        $b8 = $l21 cmp $l15;

        $i28 = (int) $b8;

        if $i28 > 0 goto label5;

        $r3 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l21, 1);

        l22 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r4, $l9);

        goto label5;

     label4:
        $l2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r4, $l21);

        l22 = $l2;

        $b3 = $l2 cmp $l15;

        $i29 = (int) $b3;

        if $i29 > 0 goto label5;

        $r1 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l2, 1);

        $r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i5);

        $l7 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r4, $l6);

        l22 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r4, $l7);

     label5:
        $l24 = (long) i13;

        $l25 = l22 - $l24;

        return $l25;
    }

    public long previous(long, int, int)
    {
        byte $b3, $b8;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r5, $r6, $r7;
        org.joda.time.chrono.ISOChronology $r4;
        long $l2, $l4, $l6, $l7, $l9, l12, $l14, $l15, $l17, $l18, $l20, $l21, l22, $l24, $l25;
        int $i5, i10, i11, i13, $i16, $i19, $i23, $i26, $i27, $i28, $i30, $i31, $i33;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        char $c0, $c1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        l12 := @parameter0: long;

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i26 = (int) $c0;

        if $i26 != 119 goto label1;

        i13 = i10 + i11;

        goto label3;

     label1:
        $c1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i27 = (int) $c1;

        if $i27 != 115 goto label2;

        i13 = i10;

        goto label3;

     label2:
        i13 = 0;

     label3:
        $l14 = (long) i13;

        $l15 = l12 + $l14;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l17 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>($l15, $i16);

        $r6 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>($l17, 0);

        $r7 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long add(long,int)>($l18, $i19);

        $l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r4, $l20);

        l22 = $l21;

        $i23 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i23 != 0 goto label4;

        $b8 = $l21 cmp $l15;

        $i28 = (int) $b8;

        if $i28 < 0 goto label5;

        $r3 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i30 = (int) -1;

        $l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l21, $i30);

        l22 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r4, $l9);

        goto label5;

     label4:
        $l2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r4, $l21);

        l22 = $l2;

        $b3 = $l2 cmp $l15;

        $i31 = (int) $b3;

        if $i31 < 0 goto label5;

        $r1 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i33 = (int) -1;

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l2, $i33);

        $r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i5);

        $l7 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r4, $l6);

        l22 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r4, $l7);

     label5:
        $l24 = (long) i13;

        $l25 = l22 - $l24;

        return $l25;
    }

    public boolean equals(java.lang.Object)
    {
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, $z3;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0, r2;
        char $c0, $c1;
        java.lang.Object r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1;

        $c1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $c0 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i10 = (int) $c1;

        $i11 = (int) $c0;

        if $i10 != $i11 goto label2;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $i2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i3 != $i2 goto label2;

        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        $i4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i5 != $i4 goto label2;

        $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        $i6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i7 != $i6 goto label2;

        $z2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        $z1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        if $z2 != $z1 goto label2;

        $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $i8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        if $i9 != $i8 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public void writeTo(java.io.DataOutput) throws java.io.IOException
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r1;
        java.io.DataOutput r0;
        char $c0;
        long $l5;
        int $i1, $i2, $i3, $i4, $i6;
        boolean $z0;

        r1 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r0 := @parameter0: java.io.DataOutput;

        $c0 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $i6 = (int) $c0;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i6);

        $i1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i1);

        $i2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i2);

        $i3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i3);

        $z0 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        interfaceinvoke r0.<java.io.DataOutput: void writeBoolean(boolean)>($z0);

        $i4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l5 = (long) $i4;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r0, $l5);

        return;
    }

    private long setDayOfMonthNext(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology r1;
        long l2, l3;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        org.joda.time.DateTimeField $r3, $r4;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r1 := @parameter0: org.joda.time.Chronology;

        l2 := @parameter1: long;

     label1:
        l3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l2);

     label2:
        goto label7;

     label3:
        $r2 := @caughtexception;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i0 != 2 goto label6;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i1 != 29 goto label6;

     label4:
        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isLeap(long)>(l2);

        if $z0 != 0 goto label5;

        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l2, 1);

        goto label4;

     label5:
        l3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l2);

        goto label7;

     label6:
        throw $r2;

     label7:
        return l3;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private long setDayOfMonthPrevious(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology r1;
        long l2, l3;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i5;
        org.joda.time.DateTimeField $r3, $r4;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r1 := @parameter0: org.joda.time.Chronology;

        l2 := @parameter1: long;

     label1:
        l3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l2);

     label2:
        goto label7;

     label3:
        $r2 := @caughtexception;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i0 != 2 goto label6;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i1 != 29 goto label6;

     label4:
        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isLeap(long)>(l2);

        if $z0 != 0 goto label5;

        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i5 = (int) -1;

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l2, $i5);

        goto label4;

     label5:
        l3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l2);

        goto label7;

     label6:
        throw $r2;

     label7:
        return l3;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private long setDayOfMonth(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology r1;
        long $l1, $l2, l5, l6;
        int $i0, $i3, $i4;
        org.joda.time.DateTimeField $r2, $r3, $r4, $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r1 := @parameter0: org.joda.time.Chronology;

        l5 := @parameter1: long;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i0 < 0 goto label1;

        $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        l6 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l5, $i4);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, 1);

        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l1, 1);

        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        l6 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>($l2, $i3);

     label2:
        return l6;
    }

    private long setDayOfWeek(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r2;
        org.joda.time.Chronology r0;
        long l2;
        int $i0, $i1, i3, $i5;
        org.joda.time.DateTimeField $r1, $r3;
        boolean $z0;

        r2 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r0 := @parameter0: org.joda.time.Chronology;

        l2 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l2);

        $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        i3 = $i1 - $i0;

        if i3 == 0 goto label3;

        $z0 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        if $z0 == 0 goto label1;

        if i3 >= 0 goto label2;

        i3 = i3 + 7;

        goto label2;

     label1:
        if i3 <= 0 goto label2;

        $i5 = (int) -7;

        i3 = i3 + $i5;

     label2:
        $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l2, i3);

     label3:
        return l2;
    }
}
