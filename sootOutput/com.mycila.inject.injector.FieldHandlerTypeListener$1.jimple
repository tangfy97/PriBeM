class com.mycila.inject.injector.FieldHandlerTypeListener$1 extends java.lang.Object implements com.google.inject.spi.InjectionListener
{
    final com.google.inject.Provider val$provider;
    final com.google.inject.TypeLiteral val$type;
    final com.mycila.inject.injector.FieldHandlerTypeListener this$0;

    void <init>(com.mycila.inject.injector.FieldHandlerTypeListener, com.google.inject.Provider, com.google.inject.TypeLiteral)
    {
        com.google.inject.Provider r2;
        com.mycila.inject.injector.FieldHandlerTypeListener r1;
        com.mycila.inject.injector.FieldHandlerTypeListener$1 r0;
        com.google.inject.TypeLiteral r3;

        r0 := @this: com.mycila.inject.injector.FieldHandlerTypeListener$1;

        r1 := @parameter0: com.mycila.inject.injector.FieldHandlerTypeListener;

        r2 := @parameter1: com.google.inject.Provider;

        r3 := @parameter2: com.google.inject.TypeLiteral;

        r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.mycila.inject.injector.FieldHandlerTypeListener this$0> = r1;

        r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.google.inject.Provider val$provider> = r2;

        r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.google.inject.TypeLiteral val$type> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void afterInjection(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r8;
        com.mycila.inject.injector.FieldHandler r3;
        java.lang.Iterable $r9;
        com.mycila.inject.injector.FieldHandlerTypeListener $r6, $r14;
        com.mycila.inject.injector.FieldHandlerTypeListener$1 r0;
        boolean $z0;
        java.util.Iterator $r10;
        java.lang.reflect.Field r12;
        com.google.inject.Provider $r1;
        java.lang.'annotation'.Annotation $r17;
        java.lang.Object $r2, $r11, r13;
        java.lang.Class $r5, $r7, $r16;
        com.google.inject.TypeLiteral $r4, $r15;

        r0 := @this: com.mycila.inject.injector.FieldHandlerTypeListener$1;

        r13 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.google.inject.Provider val$provider>;

        $r2 = interfaceinvoke $r1.<com.google.inject.Provider: java.lang.Object get()>();

        r3 = (com.mycila.inject.injector.FieldHandler) $r2;

        $r4 = r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.google.inject.TypeLiteral val$type>;

        $r5 = virtualinvoke $r4.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r6 = r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.mycila.inject.injector.FieldHandlerTypeListener this$0>;

        $r7 = staticinvoke <com.mycila.inject.injector.FieldHandlerTypeListener: java.lang.Class access$000(com.mycila.inject.injector.FieldHandlerTypeListener)>($r6);

        $r8 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate annotatedBy(java.lang.Class)>($r7);

        $r9 = staticinvoke <com.mycila.inject.internal.Reflect: java.lang.Iterable findFields(java.lang.Class,com.mycila.inject.internal.guava.base.Predicate)>($r5, $r8);

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.reflect.Field) $r11;

        $r15 = r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.google.inject.TypeLiteral val$type>;

        $r14 = r0.<com.mycila.inject.injector.FieldHandlerTypeListener$1: com.mycila.inject.injector.FieldHandlerTypeListener this$0>;

        $r16 = staticinvoke <com.mycila.inject.injector.FieldHandlerTypeListener: java.lang.Class access$000(com.mycila.inject.injector.FieldHandlerTypeListener)>($r14);

        $r17 = virtualinvoke r12.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r16);

        interfaceinvoke r3.<com.mycila.inject.injector.FieldHandler: void handle(com.google.inject.TypeLiteral,java.lang.Object,java.lang.reflect.Member,java.lang.'annotation'.Annotation)>($r15, r13, r12, $r17);

        goto label1;

     label2:
        return;
    }
}
