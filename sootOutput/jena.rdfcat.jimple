public class jena.rdfcat extends java.lang.Object
{
    public final jena.cmdline.ArgDecl IN_N3;
    public final jena.cmdline.ArgDecl IN_RDF_XML;
    public final jena.cmdline.ArgDecl IN_NTRIPLE;
    public final jena.cmdline.ArgDecl OUT_LANG;
    public final jena.cmdline.ArgDecl IN_LANG;
    public final jena.cmdline.ArgDecl INCLUDE;
    public final jena.cmdline.ArgDecl NOINCLUDE;
    public final jena.cmdline.ArgDecl NOFILTER;
    public final jena.cmdline.ArgDecl HELP;
    public final jena.cmdline.ArgDecl USAGE;
    private static org.slf4j.Logger log;
    protected jena.cmdline.CommandLine m_cmdLine;
    protected com.hp.hpl.jena.rdf.model.Model m_model;
    protected java.lang.String m_outputFormat;
    protected java.lang.String m_inputFormat;
    protected boolean m_include;
    protected java.util.Set m_seen;
    protected boolean m_removeIncludeStatements;
    protected java.util.List m_actionQ;
    public static java.util.Map unabbreviate;

    public void <init>()
    {
        jena.cmdline.ArgDecl $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40;
        jena.rdfcat$9 $r18;
        jena.rdfcat$8 $r16;
        jena.rdfcat$7 $r14;
        jena.rdfcat$6 $r12;
        jena.rdfcat$5 $r10;
        jena.rdfcat$4 $r8;
        jena.rdfcat$3 $r6;
        jena.rdfcat$2 $r4;
        jena.rdfcat$1 $r2;
        jena.rdfcat$10 $r20;
        jena.rdfcat$RCCommandLine $r21;
        java.util.ArrayList $r44;
        java.util.HashSet $r43;
        jena.rdfcat r0;
        jena.cmdline.CommandLine $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41;
        com.hp.hpl.jena.rdf.model.Model $r42;

        r0 := @this: jena.rdfcat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new jena.cmdline.ArgDecl;

        $r2 = new jena.rdfcat$1;

        specialinvoke $r2.<jena.rdfcat$1: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r1.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,jena.cmdline.ArgHandler)>(1, "n", "n3", "ttl", "N3", $r2);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_N3> = $r1;

        $r3 = new jena.cmdline.ArgDecl;

        $r4 = new jena.rdfcat$2;

        specialinvoke $r4.<jena.rdfcat$2: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r3.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,jena.cmdline.ArgHandler)>(1, "x", "xml", "rdfxml", "rdf", $r4);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_RDF_XML> = $r3;

        $r5 = new jena.cmdline.ArgDecl;

        $r6 = new jena.rdfcat$3;

        specialinvoke $r6.<jena.rdfcat$3: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r5.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,jena.cmdline.ArgHandler)>(1, "t", "ntriples", "ntriple", "n-triple", "n-triples", $r6);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_NTRIPLE> = $r5;

        $r7 = new jena.cmdline.ArgDecl;

        $r8 = new jena.rdfcat$4;

        specialinvoke $r8.<jena.rdfcat$4: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r7.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(1, "out", $r8);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl OUT_LANG> = $r7;

        $r9 = new jena.cmdline.ArgDecl;

        $r10 = new jena.rdfcat$5;

        specialinvoke $r10.<jena.rdfcat$5: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r9.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(1, "in", $r10);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_LANG> = $r9;

        $r11 = new jena.cmdline.ArgDecl;

        $r12 = new jena.rdfcat$6;

        specialinvoke $r12.<jena.rdfcat$6: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r11.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(0, "include", $r12);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl INCLUDE> = $r11;

        $r13 = new jena.cmdline.ArgDecl;

        $r14 = new jena.rdfcat$7;

        specialinvoke $r14.<jena.rdfcat$7: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r13.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(0, "noinclude", $r14);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl NOINCLUDE> = $r13;

        $r15 = new jena.cmdline.ArgDecl;

        $r16 = new jena.rdfcat$8;

        specialinvoke $r16.<jena.rdfcat$8: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r15.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(0, "nofilter", $r16);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl NOFILTER> = $r15;

        $r17 = new jena.cmdline.ArgDecl;

        $r18 = new jena.rdfcat$9;

        specialinvoke $r18.<jena.rdfcat$9: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r17.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(0, "help", $r18);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl HELP> = $r17;

        $r19 = new jena.cmdline.ArgDecl;

        $r20 = new jena.rdfcat$10;

        specialinvoke $r20.<jena.rdfcat$10: void <init>(jena.rdfcat)>(r0);

        specialinvoke $r19.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String,jena.cmdline.ArgHandler)>(0, "usage", $r20);

        r0.<jena.rdfcat: jena.cmdline.ArgDecl USAGE> = $r19;

        $r21 = new jena.rdfcat$RCCommandLine;

        specialinvoke $r21.<jena.rdfcat$RCCommandLine: void <init>(jena.rdfcat)>(r0);

        $r22 = r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_N3>;

        $r23 = virtualinvoke $r21.<jena.rdfcat$RCCommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r22);

        $r24 = r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_NTRIPLE>;

        $r25 = virtualinvoke $r23.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r24);

        $r26 = r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_RDF_XML>;

        $r27 = virtualinvoke $r25.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r26);

        $r28 = r0.<jena.rdfcat: jena.cmdline.ArgDecl OUT_LANG>;

        $r29 = virtualinvoke $r27.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r28);

        $r30 = r0.<jena.rdfcat: jena.cmdline.ArgDecl IN_LANG>;

        $r31 = virtualinvoke $r29.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r30);

        $r32 = r0.<jena.rdfcat: jena.cmdline.ArgDecl INCLUDE>;

        $r33 = virtualinvoke $r31.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r32);

        $r34 = r0.<jena.rdfcat: jena.cmdline.ArgDecl NOINCLUDE>;

        $r35 = virtualinvoke $r33.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r34);

        $r36 = r0.<jena.rdfcat: jena.cmdline.ArgDecl NOFILTER>;

        $r37 = virtualinvoke $r35.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r36);

        $r38 = r0.<jena.rdfcat: jena.cmdline.ArgDecl HELP>;

        $r39 = virtualinvoke $r37.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r38);

        $r40 = r0.<jena.rdfcat: jena.cmdline.ArgDecl USAGE>;

        $r41 = virtualinvoke $r39.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r40);

        r0.<jena.rdfcat: jena.cmdline.CommandLine m_cmdLine> = $r41;

        $r42 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        r0.<jena.rdfcat: com.hp.hpl.jena.rdf.model.Model m_model> = $r42;

        r0.<jena.rdfcat: java.lang.String m_outputFormat> = "RDF/XML-ABBREV";

        r0.<jena.rdfcat: java.lang.String m_inputFormat> = "RDF/XML";

        r0.<jena.rdfcat: boolean m_include> = 0;

        $r43 = new java.util.HashSet;

        specialinvoke $r43.<java.util.HashSet: void <init>()>();

        r0.<jena.rdfcat: java.util.Set m_seen> = $r43;

        r0.<jena.rdfcat: boolean m_removeIncludeStatements> = 1;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        r0.<jena.rdfcat: java.util.List m_actionQ> = $r44;

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        jena.rdfcat $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new jena.rdfcat;

        specialinvoke $r0.<jena.rdfcat: void <init>()>();

        virtualinvoke $r0.<jena.rdfcat: void go(java.lang.String[])>(r1);

        return;
    }

    protected void go(java.lang.String[])
    {
        jena.rdfcat$RCAction $r10;
        java.lang.String[] r1;
        jena.rdfcat$ReadAction $r11;
        int $i0, i1;
        java.lang.String $r8, $r14, $r15;
        jena.rdfcat r0;
        boolean $z0;
        java.io.OutputStream $r7;
        java.util.Iterator $r5;
        jena.cmdline.CommandLine $r2, $r3, $r12;
        java.util.List $r4, $r13;
        com.hp.hpl.jena.rdf.model.Model $r6;
        java.lang.Object $r9;

        r0 := @this: jena.rdfcat;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<jena.rdfcat: void enableRIOTParser()>();

        $r2 = r0.<jena.rdfcat: jena.cmdline.CommandLine m_cmdLine>;

        virtualinvoke $r2.<jena.cmdline.CommandLine: void process(java.lang.String[])>(r1);

        i1 = 0;

     label1:
        $r3 = r0.<jena.rdfcat: jena.cmdline.CommandLine m_cmdLine>;

        $i0 = virtualinvoke $r3.<jena.cmdline.CommandLine: int numItems()>();

        if i1 >= $i0 goto label2;

        $r13 = r0.<jena.rdfcat: java.util.List m_actionQ>;

        $r11 = new jena.rdfcat$ReadAction;

        $r12 = r0.<jena.rdfcat: jena.cmdline.CommandLine m_cmdLine>;

        $r14 = virtualinvoke $r12.<jena.cmdline.CommandLine: java.lang.String getItem(int)>(i1);

        $r15 = virtualinvoke r0.<jena.rdfcat: java.lang.String getExpectedInput()>();

        specialinvoke $r11.<jena.rdfcat$ReadAction: void <init>(jena.rdfcat,java.lang.String,java.lang.String)>(r0, $r14, $r15);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<jena.rdfcat: java.util.List m_actionQ>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (jena.rdfcat$RCAction) $r9;

        interfaceinvoke $r10.<jena.rdfcat$RCAction: void run(jena.rdfcat)>(r0);

        goto label3;

     label4:
        $r6 = r0.<jena.rdfcat: com.hp.hpl.jena.rdf.model.Model m_model>;

        $r7 = virtualinvoke r0.<jena.rdfcat: java.io.OutputStream getOutputStream()>();

        $r8 = r0.<jena.rdfcat: java.lang.String m_outputFormat>;

        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String)>($r7, $r8);

        return;
    }

    protected void expectInput(java.lang.String)
    {
        java.lang.String r1;
        jena.rdfcat r0;

        r0 := @this: jena.rdfcat;

        r1 := @parameter0: java.lang.String;

        r0.<jena.rdfcat: java.lang.String m_inputFormat> = r1;

        return;
    }

    protected java.lang.String getExpectedInput()
    {
        java.lang.String $r1;
        jena.rdfcat r0;

        r0 := @this: jena.rdfcat;

        $r1 = r0.<jena.rdfcat: java.lang.String m_inputFormat>;

        return $r1;
    }

    protected void setOutput(java.lang.String)
    {
        java.lang.String r1, $r2;
        jena.rdfcat r0;

        r0 := @this: jena.rdfcat;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <jena.rdfcat: java.lang.String getCheckedLanguage(java.lang.String)>(r1);

        r0.<jena.rdfcat: java.lang.String m_outputFormat> = $r2;

        return;
    }

    public static java.lang.String getCheckedLanguage(java.lang.String)
    {
        java.lang.IllegalArgumentException $r6;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String r0, r3, $r11, $r12;
        com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl $r4;
        com.hp.hpl.jena.shared.NoWriterForLangException $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = <jena.rdfcat: java.util.Map unabbreviate>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r12 = r0;

        goto label2;

     label1:
        $r12 = r3;

     label2:
        $r4 = new com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl;

        specialinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: void <init>()>();

        virtualinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: com.hp.hpl.jena.rdf.model.RDFWriter getWriter(java.lang.String)>($r12);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not recognised as a legal output format");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        return $r12;

        catch com.hp.hpl.jena.shared.NoWriterForLangException from label2 to label3 with label4;
    }

    protected static java.util.Map makeUnabbreviateMap()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x", "RDF/XML");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdf", "RDF/XML");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdfxml", "RDF/XML");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", "RDF/XML");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("n3", "N3");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("n", "N3");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ttl", "N3");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ntriples", "N-TRIPLE");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ntriple", "N-TRIPLE");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("t", "N-TRIPLE");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owl", "RDF/XML-ABBREV");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("abbrev", "RDF/XML-ABBREV");

        return $r0;
    }

    protected void setInclude(boolean)
    {
        jena.rdfcat r0;
        boolean z0;

        r0 := @this: jena.rdfcat;

        z0 := @parameter0: boolean;

        r0.<jena.rdfcat: boolean m_include> = z0;

        return;
    }

    protected void setRemoveIncludeStatements(boolean)
    {
        jena.rdfcat r0;
        boolean z0;

        r0 := @this: jena.rdfcat;

        z0 := @parameter0: boolean;

        r0.<jena.rdfcat: boolean m_removeIncludeStatements> = z0;

        return;
    }

    protected void readInput(java.lang.String)
    {
        java.util.ArrayList $r0;
        com.hp.hpl.jena.util.FileManager $r12;
        java.lang.String r3, r6, $r10, $r11, $r18;
        jena.rdfcat r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r7, $r8;
        com.hp.hpl.jena.rdf.model.Statement $r15, $r16;
        jena.rdfcat$IncludeQueueEntry $r1, r5;
        com.hp.hpl.jena.rdf.model.Model $r9, $r13, $r14, $r17;
        java.lang.Object $r4;
        java.io.InputStream $r19;

        r2 := @this: jena.rdfcat;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new jena.rdfcat$IncludeQueueEntry;

        specialinvoke $r1.<jena.rdfcat$IncludeQueueEntry: void <init>(jena.rdfcat,java.lang.String,com.hp.hpl.jena.rdf.model.Statement)>(r2, r3, null);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

        r5 = (jena.rdfcat$IncludeQueueEntry) $r4;

        r6 = r5.<jena.rdfcat$IncludeQueueEntry: java.lang.String m_includeURI>;

        $r7 = r2.<jena.rdfcat: java.util.Set m_seen>;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z1 != 0 goto label5;

        $r8 = r2.<jena.rdfcat: java.util.Set m_seen>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r6);

        $r9 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z2 == 0 goto label2;

        $r19 = <java.lang.System: java.io.InputStream in>;

        $r18 = r2.<jena.rdfcat: java.lang.String m_inputFormat>;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>($r19, null, $r18);

        goto label3;

     label2:
        $r10 = r2.<jena.rdfcat: java.lang.String m_inputFormat>;

        $r11 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String,java.lang.String)>(r6, $r10);

        $r12 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        virtualinvoke $r12.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String)>($r9, r6, $r11);

     label3:
        $z3 = r2.<jena.rdfcat: boolean m_include>;

        if $z3 == 0 goto label4;

        virtualinvoke r2.<jena.rdfcat: void addIncludes(com.hp.hpl.jena.rdf.model.Model,java.util.List)>($r9, $r0);

     label4:
        $r13 = r2.<jena.rdfcat: com.hp.hpl.jena.rdf.model.Model m_model>;

        interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Model)>($r9);

        $r14 = r2.<jena.rdfcat: com.hp.hpl.jena.rdf.model.Model m_model>;

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r9);

        $z4 = r2.<jena.rdfcat: boolean m_removeIncludeStatements>;

        if $z4 == 0 goto label5;

        $r15 = r5.<jena.rdfcat$IncludeQueueEntry: com.hp.hpl.jena.rdf.model.Statement m_includeStmt>;

        if $r15 == null goto label5;

        $r17 = r2.<jena.rdfcat: com.hp.hpl.jena.rdf.model.Model m_model>;

        $r16 = r5.<jena.rdfcat$IncludeQueueEntry: com.hp.hpl.jena.rdf.model.Statement m_includeStmt>;

        interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Statement)>($r16);

     label5:
        goto label1;

     label6:
        return;
    }

    protected java.io.OutputStream getOutputStream()
    {
        java.io.PrintStream $r0;
        jena.rdfcat r1;

        r1 := @this: jena.rdfcat;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        return $r0;
    }

    protected void addIncludes(com.hp.hpl.jena.rdf.model.Model, java.util.List)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r2, $r4;
        com.hp.hpl.jena.rdf.model.Property $r1, $r3;
        java.lang.String $r10, $r14;
        boolean $z0, $z1;
        jena.rdfcat r8;
        com.hp.hpl.jena.rdf.model.RDFNode $r13;
        com.hp.hpl.jena.rdf.model.Statement $r5, $r11;
        jena.rdfcat$IncludeQueueEntry $r7, $r12;
        com.hp.hpl.jena.rdf.model.Resource $r9;
        java.util.List r6;
        com.hp.hpl.jena.rdf.model.Model r0;

        r8 := @this: jena.rdfcat;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r6 := @parameter1: java.util.List;

        $r1 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property seeAlso>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r1, null);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r12 = new jena.rdfcat$IncludeQueueEntry;

        $r13 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r14 = virtualinvoke r8.<jena.rdfcat: java.lang.String getURL(com.hp.hpl.jena.rdf.model.RDFNode)>($r13);

        specialinvoke $r12.<jena.rdfcat$IncludeQueueEntry: void <init>(jena.rdfcat,java.lang.String,com.hp.hpl.jena.rdf.model.Statement)>(r8, $r14, $r11);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r3 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property imports>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r3, null);

     label3:
        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = new jena.rdfcat$IncludeQueueEntry;

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r10 = virtualinvoke r8.<jena.rdfcat: java.lang.String getURL(com.hp.hpl.jena.rdf.model.RDFNode)>($r9);

        specialinvoke $r7.<jena.rdfcat$IncludeQueueEntry: void <init>(jena.rdfcat,java.lang.String,com.hp.hpl.jena.rdf.model.Statement)>(r8, $r10, $r5);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label4:
        return;
    }

    protected void usage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        jena.rdfcat r13;

        r13 := @this: jena.rdfcat;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java jena.rdfcat (option|input)*");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Concatenates the contents of zero or more input RDF documents.");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Options: -out N3 | N-TRIPLE | RDF/XML | RDF/XML-ABBREV");

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("         -n  expect subsequent inputs in N3 syntax");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("         -x  expect subsequent inputs in RDF/XML syntax");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("         -t  expect subsequent inputs in N-TRIPLE syntax");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("         -[no]include  include rdfs:seeAlso and owl:imports");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("input can be filename, URL, or - for stdin");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Recognised aliases for -n are: -n3 -ttl or -N3");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Recognised aliases for -x are: -xml -rdf or -rdfxml");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Recognised aliases for -t are: -ntriple");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Output format aliases: x, xml or rdf for RDF/XML, n, n3 or ttl for N3, t or ntriple for N-TRIPLE");

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("See the Javadoc for jena.rdfcat for additional details.");

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    protected java.lang.String getURL(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        java.lang.String $r4;
        com.hp.hpl.jena.rdf.model.Literal $r2;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0;
        jena.rdfcat r3;

        r3 := @this: jena.rdfcat;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r2 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        goto label2;

     label1:
        $r1 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

     label2:
        return $r4;
    }

    private void enableRIOTParser()
    {
        java.lang.NoSuchMethodException $r25;
        java.lang.SecurityException $r32;
        java.lang.reflect.Method $r2;
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r4;
        java.lang.StringBuilder $r5, $r7, $r9, $r12, $r14, $r16, $r19, $r21, $r23, $r26, $r28, $r30, $r33, $r35, $r37;
        java.lang.Object[] $r3;
        java.lang.String $r8, $r10, $r15, $r17, $r22, $r24, $r29, $r31, $r36, $r38;
        jena.rdfcat r40;
        org.slf4j.Logger $r6, $r13, $r20, $r27, $r34;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r18;
        java.lang.Class $r0;
        java.lang.ClassNotFoundException $r39;

        r40 := @this: jena.rdfcat;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.openjena.riot.SysRIOT");

        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("init", $r1);

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        goto label9;

     label3:
        $r39 := @caughtexception;

        goto label9;

     label4:
        $r32 := @caughtexception;

        $r34 = <jena.rdfcat: org.slf4j.Logger log>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not initialise RIOT parser: ");

        $r36 = virtualinvoke $r32.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r38, $r32);

        goto label9;

     label5:
        $r25 := @caughtexception;

        $r27 = <jena.rdfcat: org.slf4j.Logger log>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not initialise RIOT parser: ");

        $r29 = virtualinvoke $r25.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r31, $r25);

        goto label9;

     label6:
        $r18 := @caughtexception;

        $r20 = <jena.rdfcat: org.slf4j.Logger log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not initialise RIOT parser: ");

        $r22 = virtualinvoke $r18.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r24, $r18);

        goto label9;

     label7:
        $r11 := @caughtexception;

        $r13 = <jena.rdfcat: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not initialise RIOT parser: ");

        $r15 = virtualinvoke $r11.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r17, $r11);

        goto label9;

     label8:
        $r4 := @caughtexception;

        $r6 = <jena.rdfcat: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not initialise RIOT parser: ");

        $r8 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r10, $r4);

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.Map $r1;

        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Ljena/rdfcat;");

        <jena.rdfcat: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <jena.rdfcat: java.util.Map makeUnabbreviateMap()>();

        <jena.rdfcat: java.util.Map unabbreviate> = $r1;

        return;
    }
}
