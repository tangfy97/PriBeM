class org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder extends org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder
{
    private final org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1;

    private void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder r0;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        r1 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1> = r1;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder: void <init>(org.tukaani.xz.lzma.LZMACoder$LiteralCoder)>(r1);

        return;
    }

    void encode()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r1, $r3, $r6, $r9, $r11, $r15, $r17, $r21, $r24;
        int[] $r14;
        org.tukaani.xz.lz.LZEncoder $r4, $r12;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder r0;
        short[] $r20, $r27;
        org.tukaani.xz.rangecoder.RangeEncoder $r19, $r26;
        org.tukaani.xz.lzma.State $r8, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, $i24;
        org.tukaani.xz.lzma.LZMAEncoder $r2, $r5, $r7, $r10, $r13, $r16, $r18, $r22, $r25;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r2 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r1);

        $r4 = $r2.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r5 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r3);

        $i0 = $r5.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = virtualinvoke $r4.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i0);

        i20 = $i1 | 256;

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r7 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r6);

        $r8 = $r7.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $z0 = virtualinvoke $r8.<org.tukaani.xz.lzma.State: boolean isLiteral()>();

        if $z0 == 0 goto label2;

     label1:
        $i17 = i20 >>> 8;

        $i16 = i20 >>> 7;

        $i18 = $i16 & 1;

        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r25 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r24);

        $r26 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r25);

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        virtualinvoke $r26.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r27, $i17, $i18);

        $i19 = i20 << 1;

        i20 = $i19;

        if $i19 < 65536 goto label1;

        goto label4;

     label2:
        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r10 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r9);

        $r12 = $r10.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r13 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r11);

        $r14 = $r13.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i2 = $r14[0];

        $i3 = $i2 + 1;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r16 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r15);

        $i4 = $r16.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i5 = $i3 + $i4;

        i21 = virtualinvoke $r12.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i5);

        i22 = 256;

     label3:
        $i11 = i21 << 1;

        i21 = $i11;

        $i12 = $i11 & i22;

        $i7 = i22 + $i12;

        $i6 = i20 >>> 8;

        $i13 = $i7 + $i6;

        $i8 = i20 >>> 7;

        $i14 = $i8 & 1;

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r18 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r17);

        $r19 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r18);

        $r20 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        virtualinvoke $r19.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r20, $i13, $i14);

        $i15 = i20 << 1;

        i20 = $i15;

        $i9 = $i11 ^ $i15;

        $i24 = (int) -1;

        $i10 = $i9 ^ $i24;

        i22 = i22 & $i10;

        if $i15 < 65536 goto label3;

     label4:
        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r22 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>($r21);

        $r23 = $r22.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r23.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        return;
    }

    int getNormalPrice(int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder r0;
        short $s1;
        int $i0, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        short[] $r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        i7 := @parameter0: int;

        i8 = 0;

        i9 = i7 | 256;

     label1:
        $i3 = i9 >>> 8;

        $i0 = i9 >>> 7;

        $i4 = $i0 & 1;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        $s1 = $r1[$i3];

        $i10 = (int) $s1;

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i10, $i4);

        $i5 = i8 + $i2;

        i8 = $i5;

        $i6 = i9 << 1;

        i9 = $i6;

        if $i6 < 65536 goto label1;

        return $i5;
    }

    int getMatchedPrice(int, int)
    {
        short $s3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, $i18, $i20;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder r0;
        short[] $r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        i13 := @parameter0: int;

        i14 := @parameter1: int;

        i15 = 0;

        i16 = 256;

        i17 = i13 | 256;

     label1:
        $i7 = i14 << 1;

        i14 = $i7;

        $i8 = $i7 & i16;

        $i1 = i16 + $i8;

        $i0 = i17 >>> 8;

        $i9 = $i1 + $i0;

        $i2 = i17 >>> 7;

        $i10 = $i2 & 1;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        $s3 = $r1[$i9];

        $i18 = (int) $s3;

        $i4 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i18, $i10);

        $i11 = i15 + $i4;

        i15 = $i11;

        $i12 = i17 << 1;

        i17 = $i12;

        $i5 = $i7 ^ $i12;

        $i20 = (int) -1;

        $i6 = $i5 ^ $i20;

        i16 = i16 & $i6;

        if $i12 < 65536 goto label1;

        return $i11;
    }

    void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder, org.tukaani.xz.lzma.LZMAEncoder$1)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder r0;
        org.tukaani.xz.lzma.LZMAEncoder$1 r2;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        r1 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        r2 := @parameter1: org.tukaani.xz.lzma.LZMAEncoder$1;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>(r1);

        return;
    }
}
