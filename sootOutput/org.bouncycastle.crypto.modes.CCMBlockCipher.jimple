public class org.bouncycastle.crypto.modes.CCMBlockCipher extends java.lang.Object implements org.bouncycastle.crypto.modes.AEADBlockCipher
{
    private org.bouncycastle.crypto.BlockCipher cipher;
    private int blockSize;
    private boolean forEncryption;
    private byte[] nonce;
    private byte[] associatedText;
    private int macSize;
    private org.bouncycastle.crypto.CipherParameters keyParam;
    private byte[] macBlock;
    private java.io.ByteArrayOutputStream data;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r1;
        java.lang.IllegalArgumentException $r4;
        org.bouncycastle.crypto.BlockCipher r2;
        int $i0, $i1, $i2;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r2 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data> = $r1;

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = r2;

        $i0 = interfaceinvoke r2.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize> = $i0;

        $i1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r3 = newarray (byte)[$i1];

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock> = $r3;

        $i2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        if $i2 == 16 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cipher required with a block size of 16.");

        throw $r4;

     label1:
        return;
    }

    public org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;
        org.bouncycastle.crypto.BlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        return $r1;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r3, $r4, $r6, $r7;
        org.bouncycastle.crypto.params.ParametersWithIV r10;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.params.KeyParameter $r8;
        boolean z0, $z1, $z2;
        org.bouncycastle.crypto.CipherParameters r1, $r5;
        java.lang.IllegalArgumentException $r2;
        org.bouncycastle.crypto.params.AEADParameters r9;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption> = z0;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.AEADParameters;

        if $z1 == 0 goto label1;

        r9 = (org.bouncycastle.crypto.params.AEADParameters) r1;

        $r6 = virtualinvoke r9.<org.bouncycastle.crypto.params.AEADParameters: byte[] getNonce()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce> = $r6;

        $r7 = virtualinvoke r9.<org.bouncycastle.crypto.params.AEADParameters: byte[] getAssociatedText()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText> = $r7;

        $i2 = virtualinvoke r9.<org.bouncycastle.crypto.params.AEADParameters: int getMacSize()>();

        $i3 = $i2 / 8;

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize> = $i3;

        $r8 = virtualinvoke r9.<org.bouncycastle.crypto.params.AEADParameters: org.bouncycastle.crypto.params.KeyParameter getKey()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.CipherParameters keyParam> = $r8;

        goto label3;

     label1:
        $z2 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z2 == 0 goto label2;

        r10 = (org.bouncycastle.crypto.params.ParametersWithIV) r1;

        $r3 = virtualinvoke r10.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce> = $r3;

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText> = null;

        $r4 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i0 = lengthof $r4;

        $i1 = $i0 / 2;

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize> = $i1;

        $r5 = virtualinvoke r10.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.CipherParameters keyParam> = $r5;

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameters passed to CCM");

        throw $r2;

     label3:
        return;
    }

    public java.lang.String getAlgorithmName()
    {
        java.lang.StringBuilder $r0, $r4, $r5;
        java.lang.String $r3, $r6;
        org.bouncycastle.crypto.modes.CCMBlockCipher r1;
        org.bouncycastle.crypto.BlockCipher $r2;

        r1 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/CCM");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int processByte(byte, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] r2;
        byte b0;
        java.io.ByteArrayOutputStream $r1;
        int i1, $i2;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        b0 := @parameter0: byte;

        r2 := @parameter1: byte[];

        i1 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        $i2 = (int) b0;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        return 0;
    }

    public int processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] r1, r3;
        java.io.ByteArrayOutputStream $r2;
        int i0, i1, i2;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: byte[];

        i2 := @parameter4: int;

        $r2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return 0;
    }

    public int doFinal(byte[], int) throws java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] $r2, $r3, r4;
        java.io.ByteArrayOutputStream $r1;
        int $i0, i1, $i2, $i3;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r4 := @parameter0: byte[];

        i1 := @parameter1: int;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r2;

        $r3 = virtualinvoke r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] processPacket(byte[],int,int)>($r2, 0, $i0);

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, i1, $i2);

        virtualinvoke r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: void reset()>();

        $i3 = lengthof $r3;

        return $i3;
    }

    public void reset()
    {
        java.io.ByteArrayOutputStream $r2;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;
        org.bouncycastle.crypto.BlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

        return;
    }

    public byte[] getMac()
    {
        byte[] r1, $r2;
        int $i0, $i1;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $i0 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public int getUpdateOutputSize(int)
    {
        int i0;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        i0 := @parameter0: int;

        return 0;
    }

    public int getOutputSize(int)
    {
        java.io.ByteArrayOutputStream $r1, $r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        i1 := @parameter0: int;

        $z0 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        $i5 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

        $i7 = $i5 + i1;

        $i6 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i8 = $i7 + $i6;

        return $i8;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: java.io.ByteArrayOutputStream data>;

        $i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i3 = $i0 + i1;

        $i2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i4 = $i3 - $i2;

        return $i4;
    }

    public byte[] processPacket(byte[], int, int) throws java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r4, $r5, $r6, $r7, r10, $r11, $r12, $r13, $r14, r15, $r16, $r18, $r19, $r20, $r21, $r22, r24, r25, r26;
        byte $b5;
        org.bouncycastle.crypto.BlockCipher $r3;
        org.bouncycastle.crypto.modes.SICBlockCipher $r2;
        org.bouncycastle.crypto.InvalidCipherTextException $r17;
        java.lang.IllegalStateException $r23;
        org.bouncycastle.crypto.params.ParametersWithIV $r8;
        org.bouncycastle.crypto.CipherParameters $r1, $r9;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40, i41, i42, i43, i44, i45;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r10 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.CipherParameters keyParam>;

        if $r1 != null goto label1;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CCM cipher unitialized.");

        throw $r23;

     label1:
        $r2 = new org.bouncycastle.crypto.modes.SICBlockCipher;

        $r3 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        specialinvoke $r2.<org.bouncycastle.crypto.modes.SICBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r3);

        $i0 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r4 = newarray (byte)[$i0];

        $r5 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i1 = lengthof $r5;

        $i2 = 15 - $i1;

        $i3 = $i2 - 1;

        $i4 = $i3 & 7;

        $b5 = (byte) $i4;

        r4[0] = $b5;

        $r7 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $r6 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i6 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 1, $i6);

        $z0 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        $r8 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r9 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.CipherParameters keyParam>;

        specialinvoke $r8.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r9, r4);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>($z0, $r8);

        $z1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z1 == 0 goto label4;

        i40 = i7;

        i41 = 0;

        $i28 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i29 = i8 + $i28;

        r24 = newarray (byte)[$i29];

        $r19 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        specialinvoke r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>(r10, i7, i8, $r19);

        $r21 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r20 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r21, 0, $r20, 0);

     label2:
        $i30 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i31 = i8 - $i30;

        if i40 >= $i31 goto label3;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r10, i40, r24, i41);

        $i38 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i41 = i41 + $i38;

        $i39 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i40 = i40 + $i39;

        goto label2;

     label3:
        $i32 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r25 = newarray (byte)[$i32];

        $i33 = i8 - i40;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, i40, r25, 0, $i33);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r25, 0, r25, 0);

        $i34 = i8 - i40;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r25, 0, r24, i41, $i34);

        $i35 = i8 - i40;

        i42 = i41 + $i35;

        $r22 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i36 = lengthof r24;

        $i37 = $i36 - i42;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r24, i42, $i37);

        goto label8;

     label4:
        i43 = i7;

        i44 = 0;

        $i9 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i10 = i8 - $i9;

        r24 = newarray (byte)[$i10];

        $i12 = i7 + i8;

        $i11 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i14 = $i12 - $i11;

        $r11 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i13 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, $i14, $r11, 0, $i13);

        $r13 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r12 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r13, 0, $r12, 0);

        i45 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

     label5:
        $r14 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i15 = lengthof $r14;

        if i45 == $i15 goto label6;

        $r18 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r18[i45] = 0;

        i45 = i45 + 1;

        goto label5;

     label6:
        $i17 = lengthof r24;

        $i16 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i18 = $i17 - $i16;

        if i44 >= $i18 goto label7;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r10, i43, r24, i44);

        $i26 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i44 = i44 + $i26;

        $i27 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i43 = i43 + $i27;

        goto label6;

     label7:
        $i19 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r26 = newarray (byte)[$i19];

        $i20 = lengthof r24;

        $i21 = $i20 - i44;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, i43, r26, 0, $i21);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r26, 0, r26, 0);

        $i22 = lengthof r24;

        $i23 = $i22 - i44;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r26, 0, r24, i44, $i23);

        $i24 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r15 = newarray (byte)[$i24];

        $i25 = lengthof r24;

        specialinvoke r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>(r24, 0, $i25, r15);

        $r16 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $z2 = staticinvoke <org.bouncycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r16, r15);

        if $z2 != 0 goto label8;

        $r17 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r17.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("mac check in CCM failed");

        throw $r17;

     label8:
        return r24;
    }

    private int calculateMac(byte[], int, int, byte[])
    {
        byte[] r4, $r5, $r6, $r7, r8, r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        byte $b2, $b9, $b14, $b16, $b24, $b27, $b30, $b32, $b39, $b41, $b45, $b47, $b48, $b49, b52;
        org.bouncycastle.crypto.BlockCipher $r2;
        org.bouncycastle.crypto.CipherParameters $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i17, i18, $i19, i20, $i21, $i22, $i23, $i25, $i26, $i28, $i29, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i40, $i42, $i43, $i44, $i46, i50, i51, i53, $i54, $i55, $i56, $i58;
        org.bouncycastle.crypto.macs.CBCBlockCipherMac $r20;
        org.bouncycastle.crypto.modes.CCMBlockCipher r1;

        r1 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r8 := @parameter0: byte[];

        i20 := @parameter1: int;

        i18 := @parameter2: int;

        r9 := @parameter3: byte[];

        $r20 = new org.bouncycastle.crypto.macs.CBCBlockCipherMac;

        $r2 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i1 = $i0 * 8;

        specialinvoke $r20.<org.bouncycastle.crypto.macs.CBCBlockCipherMac: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r2, $i1);

        $r3 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.CipherParameters keyParam>;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>($r3);

        r4 = newarray (byte)[16];

        $z0 = specialinvoke r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean hasAssociatedText()>();

        if $z0 == 0 goto label1;

        $b47 = r4[0];

        $b48 = $b47 | 64;

        $b49 = (byte) $b48;

        r4[0] = $b49;

     label1:
        $b2 = r4[0];

        $i3 = interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i4 = $i3 - 2;

        $i5 = $i4 / 2;

        $i6 = $i5 & 7;

        $i7 = $i6 << 3;

        $i55 = (int) $b2;

        $i8 = $i55 | $i7;

        $b9 = (byte) $i8;

        r4[0] = $b9;

        $b14 = r4[0];

        $r5 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i10 = lengthof $r5;

        $i11 = 15 - $i10;

        $i12 = $i11 - 1;

        $i13 = $i12 & 7;

        $i56 = (int) $b14;

        $i15 = $i56 | $i13;

        $b16 = (byte) $i15;

        r4[0] = $b16;

        $r7 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $r6 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i17 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 1, $i17);

        i50 = i18;

        i51 = 1;

     label2:
        if i50 <= 0 goto label3;

        $i43 = lengthof r4;

        $i46 = $i43 - i51;

        $i44 = i50 & 255;

        $b45 = (byte) $i44;

        r4[$i46] = $b45;

        i50 = i50 >>> 8;

        i51 = i51 + 1;

        goto label2;

     label3:
        $i19 = lengthof r4;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r4, 0, $i19);

        $z1 = specialinvoke r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean hasAssociatedText()>();

        if $z1 == 0 goto label7;

        $r10 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i21 = lengthof $r10;

        $i58 = (int) 65280;

        if $i21 >= $i58 goto label4;

        $r18 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i37 = lengthof $r18;

        $i38 = $i37 >> 8;

        $b39 = (byte) $i38;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b39);

        $r19 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i40 = lengthof $r19;

        $b41 = (byte) $i40;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b41);

        b52 = 2;

        goto label5;

     label4:
        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>(-1);

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>(-2);

        $r11 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i22 = lengthof $r11;

        $i23 = $i22 >> 24;

        $b24 = (byte) $i23;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b24);

        $r12 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i25 = lengthof $r12;

        $i26 = $i25 >> 16;

        $b27 = (byte) $i26;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b27);

        $r13 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i28 = lengthof $r13;

        $i29 = $i28 >> 8;

        $b30 = (byte) $i29;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b30);

        $r14 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i31 = lengthof $r14;

        $b32 = (byte) $i31;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>($b32);

        b52 = 6;

     label5:
        $r16 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $r15 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i33 = lengthof $r15;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r16, 0, $i33);

        $r17 = r1.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i34 = lengthof $r17;

        $i35 = b52 + $i34;

        $i42 = $i35 % 16;

        if $i42 == 0 goto label7;

        i53 = 0;

     label6:
        $i36 = 16 - $i42;

        if i53 == $i36 goto label7;

        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte)>(0);

        i53 = i53 + 1;

        goto label6;

     label7:
        interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r8, i20, i18);

        $i54 = interfaceinvoke $r20.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>(r9, 0);

        return $i54;
    }

    private boolean hasAssociatedText()
    {
        byte[] $r1, $r2;
        int $i0;
        org.bouncycastle.crypto.modes.CCMBlockCipher r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        if $r1 == null goto label1;

        $r2 = r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] associatedText>;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
