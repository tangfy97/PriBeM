public class org.jsoup.parser.TokenQueue extends java.lang.Object
{
    private java.lang.String queue;
    private int pos;
    private static final char ESC;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.jsoup.parser.TokenQueue r0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.TokenQueue: int pos> = 0;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r1);

        r0.<org.jsoup.parser.TokenQueue: java.lang.String queue> = r1;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.jsoup.parser.TokenQueue r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $i0 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int remainingLength()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public char peek()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        char $c1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $c1 = 0;

        goto label2;

     label1:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

     label2:
        return $c1;
    }

    public void addFirst(java.lang.Character)
    {
        java.lang.String $r2;
        java.lang.Character r1;
        org.jsoup.parser.TokenQueue r0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.Character;

        $r2 = virtualinvoke r1.<java.lang.Character: java.lang.String toString()>();

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: void addFirst(java.lang.String)>($r2);

        return;
    }

    public void addFirst(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        java.lang.StringBuilder $r1, $r3, $r6;
        java.lang.String r2, $r4, $r5, $r7;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.jsoup.parser.TokenQueue: java.lang.String queue> = $r7;

        r0.<org.jsoup.parser.TokenQueue: int pos> = 0;

        return;
    }

    public boolean matches(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i0, r1, 0, $i1);

        return $z0;
    }

    public boolean matchesCS(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public transient boolean matchesAny(java.lang.String[])
    {
        org.jsoup.parser.TokenQueue r2;
        int i0, i1;
        java.lang.String[] r0;
        java.lang.String r1;
        boolean $z0;

        r2 := @this: org.jsoup.parser.TokenQueue;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = virtualinvoke r2.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public transient boolean matchesAny(char[])
    {
        org.jsoup.parser.TokenQueue r0;
        char c1, $c3;
        int i0, $i2, i4, $i5, $i6;
        char[] r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = lengthof r1;

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        c1 = r1[i4];

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $i5 = (int) $c3;

        $i6 = (int) c1;

        if $i5 != $i6 goto label3;

        return 1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean matchesStartTag()
    {
        org.jsoup.parser.TokenQueue r0;
        char $c2, $c5;
        int $i0, $i1, $i3, $i4, $i6;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $i0 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 < 2 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $i6 = (int) $c2;

        if $i6 != 60 goto label1;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i4 = $i3 + 1;

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i4);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean matchChomp(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1, $i2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        return 1;

     label1:
        return 0;
    }

    public boolean matchesWhitespace()
    {
        org.jsoup.parser.TokenQueue r0;
        char $c1;
        int $i0, $i2;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i2 = (int) $c1;

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($i2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean matchesWord()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        char $c1;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void advance()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

     label1:
        return;
    }

    public char consume()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        return $c2;
    }

    public void consume(java.lang.String)
    {
        java.lang.IllegalStateException $r2, $r3;
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue did not match expected sequence");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 <= $i1 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue not long enough to consume sequence");

        throw $r2;

     label2:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + $i0;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        return;
    }

    public java.lang.String consumeTo(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i0);

        $i7 = (int) -1;

        if $i1 == $i7 goto label1;

        $r4 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $i3 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i5;

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        return $r3;
    }

    public java.lang.String consumeToIgnoreCase(java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        org.jsoup.parser.TokenQueue r0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label1:
        $z2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        goto label7;

     label2:
        if $z0 == 0 goto label6;

        $r7 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i4 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i5 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String,int)>($r2, $i4);

        $i6 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i12 = $i5 - $i6;

        if i12 != 0 goto label3;

        $i10 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i11 = $i10 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i11;

        goto label5;

     label3:
        if i12 >= 0 goto label4;

        $r8 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i9 = virtualinvoke $r8.<java.lang.String: int length()>();

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i9;

        goto label5;

     label4:
        $i7 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i8 = $i7 + i12;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i8;

     label5:
        goto label1;

     label6:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label7:
        $r5 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r6;
    }

    public transient java.lang.String consumeToAny(java.lang.String[])
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String[] r3;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r3 := @parameter0: java.lang.String[];

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>(r3);

        if $z1 != 0 goto label2;

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label2:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String chompTo(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.jsoup.parser.TokenQueue r0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>(r1);

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String chompToIgnoreCase(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.jsoup.parser.TokenQueue r0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String consumeToIgnoreCase(java.lang.String)>(r1);

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String chompBalanced(char, char)
    {
        org.jsoup.parser.TokenQueue r1;
        char $c0, c1, c2;
        java.lang.Character $r2, $r3, $r4;
        int i3, i4, $i6;
        java.lang.StringBuilder $r6;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: org.jsoup.parser.TokenQueue;

        c1 := @parameter0: char;

        c2 := @parameter1: char;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

        i4 = 0;

     label1:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        goto label7;

     label2:
        $c0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: char consume()>();

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        if i4 == 0 goto label3;

        if i4 == 92 goto label5;

     label3:
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        $z1 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        i3 = i3 + 1;

        goto label5;

     label4:
        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);

        $z2 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label5;

        $i6 = (int) -1;

        i3 = i3 + $i6;

     label5:
        if i3 <= 0 goto label6;

        if i4 == 0 goto label6;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label6:
        i4 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        if i3 > 0 goto label1;

     label7:
        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String unescape(java.lang.String)
    {
        char c1;
        int i0, i2, i3, $i4;
        char[] $r2;
        java.lang.StringBuilder $r4;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        c1 = $r2[i3];

        $i4 = (int) c1;

        if $i4 != 92 goto label2;

        if i2 == 0 goto label3;

        if i2 != 92 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        goto label3;

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label3:
        i2 = c1;

        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public boolean consumeWhitespace()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public java.lang.String consumeWord()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 == 0 goto label2;

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label2:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String consumeTagName()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1, $i2, $i3;
        char[] $r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r3 = newarray (char)[3];

        $r3[0] = 58;

        $r3[1] = 95;

        $r3[2] = 45;

        $z2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r3);

        if $z2 == 0 goto label3;

     label2:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label3:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String consumeElementSelector()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1, $i2, $i3;
        char[] $r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r3 = newarray (char)[3];

        $r3[0] = 124;

        $r3[1] = 95;

        $r3[2] = 45;

        $z2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r3);

        if $z2 == 0 goto label3;

     label2:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label3:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String consumeCssIdentifier()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1, $i2, $i3;
        char[] $r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r3 = newarray (char)[2];

        $r3[0] = 45;

        $r3[1] = 95;

        $z2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r3);

        if $z2 == 0 goto label3;

     label2:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label3:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String consumeAttributeKey()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1, $i2, $i3;
        char[] $r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r3 = newarray (char)[3];

        $r3[0] = 45;

        $r3[1] = 95;

        $r3[2] = 58;

        $z2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r3);

        if $z2 == 0 goto label3;

     label2:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        goto label1;

     label3:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }

    public java.lang.String remainder()
    {
        org.jsoup.parser.TokenQueue r1;
        java.lang.StringBuilder $r0;
        char $c0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $c0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: char consume()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.TokenQueue: char ESC> = 92;

        return;
    }
}
