public class com.mongodb.io.ByteBufferHolder extends java.lang.Object
{
    java.util.List _buffers;
    int _pos;
    final int _max;
    static final int _bufSize;

    public void <init>()
    {
        com.mongodb.io.ByteBufferHolder r0;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        specialinvoke r0.<com.mongodb.io.ByteBufferHolder: void <init>(int)>(1073741824);

        return;
    }

    public void <init>(int)
    {
        int i0;
        com.mongodb.io.ByteBufferHolder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers> = $r1;

        r0.<com.mongodb.io.ByteBufferHolder: int _pos> = 0;

        r0.<com.mongodb.io.ByteBufferHolder: int _max> = i0;

        return;
    }

    public byte get(int)
    {
        java.lang.RuntimeException $r4;
        java.nio.ByteBuffer $r3;
        java.util.List $r1;
        byte $b4;
        com.mongodb.io.ByteBufferHolder r0;
        int i0, $i1, i2, i3;
        java.lang.Object $r2;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        i0 := @parameter0: int;

        $i1 = r0.<com.mongodb.io.ByteBufferHolder: int _pos>;

        if i0 < $i1 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("out of bounds");

        throw $r4;

     label1:
        i2 = i0 / 4096;

        i3 = i0 % 4096;

        $r1 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (java.nio.ByteBuffer) $r2;

        $b4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get(int)>(i3);

        return $b4;
    }

    public void get(int, byte[])
    {
        byte[] r0;
        byte $b3;
        com.mongodb.io.ByteBufferHolder r1;
        int $i0, i1, $i2, i4;

        r1 := @this: com.mongodb.io.ByteBufferHolder;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $i2 = i4 + i1;

        $b3 = virtualinvoke r1.<com.mongodb.io.ByteBufferHolder: byte get(int)>($i2);

        r0[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void put(int, byte)
    {
        java.lang.RuntimeException $r4;
        java.nio.ByteBuffer $r3;
        java.util.List $r1;
        byte b4;
        com.mongodb.io.ByteBufferHolder r0;
        int i0, $i1, i2, i3;
        java.lang.Object $r2;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        i0 := @parameter0: int;

        b4 := @parameter1: byte;

        $i1 = r0.<com.mongodb.io.ByteBufferHolder: int _pos>;

        if i0 < $i1 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("out of bounds");

        throw $r4;

     label1:
        i2 = i0 / 4096;

        i3 = i0 % 4096;

        $r1 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (java.nio.ByteBuffer) $r2;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(i3, b4);

        return;
    }

    public int position()
    {
        int $i0;
        com.mongodb.io.ByteBufferHolder r0;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        $i0 = r0.<com.mongodb.io.ByteBufferHolder: int _pos>;

        return $i0;
    }

    public void position(int)
    {
        java.nio.ByteBuffer r4, $r8;
        int i0, $i1, i2, $i3, i4, $i5, $i6, i7;
        java.util.List $r1, $r2, $r5, $r6;
        com.mongodb.io.ByteBufferHolder r0;
        java.lang.Object $r3, $r7;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        i0 := @parameter0: int;

        r0.<com.mongodb.io.ByteBufferHolder: int _pos> = i0;

        $i1 = r0.<com.mongodb.io.ByteBufferHolder: int _pos>;

        i2 = $i1 / 4096;

        $i3 = r0.<com.mongodb.io.ByteBufferHolder: int _pos>;

        i4 = $i3 % 4096;

     label1:
        $r1 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $i5 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i5 > i2 goto label2;

        specialinvoke r0.<com.mongodb.io.ByteBufferHolder: void _addBucket()>();

        goto label1;

     label2:
        $r2 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (java.nio.ByteBuffer) $r3;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i4);

        i7 = i2 + 1;

     label3:
        $r5 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $i6 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i7 >= $i6 goto label4;

        $r6 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i7);

        $r8 = (java.nio.ByteBuffer) $r7;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i7 = i7 + 1;

        goto label3;

     label4:
        return;
    }

    public int remaining()
    {
        com.mongodb.io.ByteBufferHolder r0;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        return 2147483647;
    }

    public void put(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, $r5;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        java.util.List $r2, $r3;
        com.mongodb.io.ByteBufferHolder r1;
        java.lang.Object $r4;

        r1 := @this: com.mongodb.io.ByteBufferHolder;

        r0 := @parameter0: java.nio.ByteBuffer;

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $i0 = r1.<com.mongodb.io.ByteBufferHolder: int _pos>;

        i1 = $i0 / 4096;

        $r2 = r1.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 < $i2 goto label2;

        specialinvoke r1.<com.mongodb.io.ByteBufferHolder: void _addBucket()>();

     label2:
        $r3 = r1.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.nio.ByteBuffer) $r4;

        $i3 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        $i6 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        $i7 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i8 = $i7 + $i5;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i8);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i6);

        $i9 = r1.<com.mongodb.io.ByteBufferHolder: int _pos>;

        $i10 = $i9 + $i5;

        r1.<com.mongodb.io.ByteBufferHolder: int _pos> = $i10;

        goto label1;

     label3:
        return;
    }

    private void _addBucket()
    {
        java.lang.RuntimeException $r3;
        java.nio.ByteBuffer $r2;
        java.util.List $r1;
        com.mongodb.io.ByteBufferHolder r0;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        $i0 = virtualinvoke r0.<com.mongodb.io.ByteBufferHolder: int capacity()>();

        $i2 = $i0 + 4096;

        $i1 = r0.<com.mongodb.io.ByteBufferHolder: int _max>;

        if $i2 <= $i1 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("too big current:");

        $i3 = virtualinvoke r0.<com.mongodb.io.ByteBufferHolder: int capacity()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(4096);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public int capacity()
    {
        java.util.List $r1;
        com.mongodb.io.ByteBufferHolder r0;
        int $i0, $i1;

        r0 := @this: com.mongodb.io.ByteBufferHolder;

        $r1 = r0.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 * 4096;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.nio.ByteBuffer r12;
        int $i0;
        java.lang.String $r6, $r10;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.List $r7;
        com.mongodb.io.ByteBufferHolder r3;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r9, $r13;
        java.lang.Object $r11;

        r3 := @this: com.mongodb.io.ByteBufferHolder;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ ByteBufferHolder pos:");

        $i0 = r3.<com.mongodb.io.ByteBufferHolder: int _pos>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = r3.<com.mongodb.io.ByteBufferHolder: java.util.List _buffers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.nio.ByteBuffer) $r11;

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        goto label1;

     label2:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <com.mongodb.io.ByteBufferHolder: int _bufSize> = 4096;

        return;
    }
}
