public class groovy.swing.binding.AbstractButtonProperties extends java.lang.Object
{
    static java.lang.Class class$javax$swing$AbstractButton;

    public void <init>()
    {
        groovy.swing.binding.AbstractButtonProperties r0;

        r0 := @this: groovy.swing.binding.AbstractButtonProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map getSyntheticProperties()
    {
        java.util.HashMap $r0;
        java.lang.StringBuffer $r1, $r4, $r5;
        java.lang.Class $r2, $r8;
        java.lang.String $r3, $r6;
        groovy.swing.binding.AbstractButtonProperties$1 $r7;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = <groovy.swing.binding.AbstractButtonProperties: java.lang.Class class$javax$swing$AbstractButton>;

        if $r2 != null goto label1;

        $r8 = staticinvoke <groovy.swing.binding.AbstractButtonProperties: java.lang.Class class$(java.lang.String)>("javax.swing.AbstractButton");

        <groovy.swing.binding.AbstractButtonProperties: java.lang.Class class$javax$swing$AbstractButton> = $r8;

        goto label2;

     label1:
        $r8 = <groovy.swing.binding.AbstractButtonProperties: java.lang.Class class$javax$swing$AbstractButton>;

     label2:
        $r3 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#selected");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new groovy.swing.binding.AbstractButtonProperties$1;

        specialinvoke $r7.<groovy.swing.binding.AbstractButtonProperties$1: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
