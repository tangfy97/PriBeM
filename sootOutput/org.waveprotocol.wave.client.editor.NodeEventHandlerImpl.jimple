public class org.waveprotocol.wave.client.editor.NodeEventHandlerImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.NodeEventHandler
{
    private static final org.waveprotocol.wave.client.editor.NodeEventHandler INSTANCE;

    protected void <init>()
    {
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onActivated(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        return;
    }

    public void onDeactivated(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        return;
    }

    public static org.waveprotocol.wave.client.editor.NodeEventHandler get()
    {
        org.waveprotocol.wave.client.editor.NodeEventHandler $r0;

        $r0 = <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: org.waveprotocol.wave.client.editor.NodeEventHandler INSTANCE>;

        return $r0;
    }

    public boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleBackspaceNotAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleClick(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleDeleteNotAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleLeft(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleLeftAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleLeftAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleRight(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleRightAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    public boolean handleRightBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl $r0;

        $r0 = new org.waveprotocol.wave.client.editor.NodeEventHandlerImpl;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: void <init>()>();

        <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: org.waveprotocol.wave.client.editor.NodeEventHandler INSTANCE> = $r0;

        return;
    }
}
