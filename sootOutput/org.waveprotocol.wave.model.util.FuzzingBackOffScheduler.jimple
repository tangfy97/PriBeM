public class org.waveprotocol.wave.model.util.FuzzingBackOffScheduler extends java.lang.Object implements org.waveprotocol.wave.model.util.Scheduler
{
    private final org.waveprotocol.wave.model.util.FuzzingBackOffGenerator generator;
    private final org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler;
    private final int maxAttempts;
    private org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask;
    private int attempts;

    private void <init>(int, int, double, org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler, int)
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler r2;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator $r1;
        int i0, i1, i2;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r2 := @parameter3: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler;

        i2 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int attempts> = 0;

        $r1 = new org.waveprotocol.wave.model.util.FuzzingBackOffGenerator;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: void <init>(int,int,double)>(i0, i1, d0);

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator generator> = $r1;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler> = r2;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int maxAttempts> = i2;

        return;
    }

    public void reset()
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable $r2, $r3;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator $r1;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler;

        $r1 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator generator>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: void reset()>();

        $r2 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable: void cancel()>();

     label1:
        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask> = null;

        return;
    }

    public boolean schedule(org.waveprotocol.wave.model.util.Scheduler$Command)
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable $r1, $r6, $r7;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters $r3;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator $r2;
        org.waveprotocol.wave.model.util.Scheduler$Command r4;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler;

        r4 := @parameter0: org.waveprotocol.wave.model.util.Scheduler$Command;

        $r1 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask>;

        if $r1 == null goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable: void cancel()>();

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int attempts>;

        $i0 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int maxAttempts>;

        if $i1 < $i0 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator generator>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters next()>();

        $r5 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler>;

        $i3 = $r3.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters: int minimumDelay>;

        $i2 = $r3.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters: int targetDelay>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable schedule(org.waveprotocol.wave.model.util.Scheduler$Command,int,int)>(r4, $i3, $i2);

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Cancellable scheduledTask> = $r6;

        $i4 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int attempts>;

        $i5 = $i4 + 1;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: int attempts> = $i5;

        return 1;
    }

    void <init>(int, int, double, org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler, int, org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$1)
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$1 r2;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler r1;
        int i0, i1, i2;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler;

        i2 := @parameter4: int;

        r2 := @parameter5: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: void <init>(int,int,double,org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler,int)>(i0, i1, d0, r1, i2);

        return;
    }
}
