public class org.apache.commons.httpclient.auth.NTLMScheme extends java.lang.Object implements org.apache.commons.httpclient.auth.AuthScheme
{
    private static final org.apache.commons.logging.Log LOG;
    private java.lang.String ntlmchallenge;
    private static final int UNINITIATED;
    private static final int INITIATED;
    private static final int TYPE1_MSG_GENERATED;
    private static final int TYPE2_MSG_RECEIVED;
    private static final int TYPE3_MSG_GENERATED;
    private static final int FAILED;
    private int state;
    static java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme;

    public void <init>()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge> = null;

        r0.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 0;

        return;
    }

    public void <init>(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge> = null;

        virtualinvoke r0.<org.apache.commons.httpclient.auth.NTLMScheme: void processChallenge(java.lang.String)>(r1);

        return;
    }

    public void processChallenge(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.StringBuffer $r8, $r9, $r11;
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r1, $r3, $r4, $r5, $r10;
        boolean $z0;
        org.apache.commons.httpclient.auth.NTLMScheme r2;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r12;

        r2 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>(r0);

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String getSchemeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r12 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid NTLM challenge: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i4 = (int) -1;

        if $i0 == $i4 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i2);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        r2.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge> = $r5;

        r2.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 3;

        goto label4;

     label2:
        r2.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge> = "";

        $i1 = r2.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i1 != 0 goto label3;

        r2.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 1;

        goto label4;

     label3:
        r2.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 2147483647;

     label4:
        return;
    }

    public boolean isComplete()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i0 == 4 goto label1;

        $i1 = r0.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i1 != 2147483647 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        return "ntlm";
    }

    public java.lang.String getRealm()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        return null;
    }

    public java.lang.String getID()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        $r1 = r0.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge>;

        return $r1;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.httpclient.auth.NTLMScheme r2;
        java.lang.IllegalArgumentException $r1;

        r2 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r1;

     label1:
        return null;
    }

    public boolean isConnectionBased()
    {
        org.apache.commons.httpclient.auth.NTLMScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        return 1;
    }

    public static java.lang.String authenticate(org.apache.commons.httpclient.NTCredentials, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM $r2;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuffer $r9, $r10, $r11;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.NTCredentials r1;
        java.lang.String r3, $r4, $r5, $r6, $r7, $r8, $r12;

        r1 := @parameter0: org.apache.commons.httpclient.NTCredentials;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.auth.NTLMScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter NTLMScheme.authenticate(NTCredentials, String)");

        if r1 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r13;

     label1:
        $r2 = new org.apache.commons.httpclient.auth.NTLM;

        specialinvoke $r2.<org.apache.commons.httpclient.auth.NTLM: void <init>()>();

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getUserName()>();

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getPassword()>();

        $r6 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getHost()>();

        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getDomain()>();

        $r8 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r3, $r4, $r5, $r6, $r7);

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NTLM ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public static java.lang.String authenticate(org.apache.commons.httpclient.NTCredentials, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM $r2;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuffer $r10, $r11, $r12;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.NTCredentials r1;
        java.lang.String r3, r4, $r5, $r6, $r7, $r8, $r9, $r13;

        r1 := @parameter0: org.apache.commons.httpclient.NTCredentials;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = <org.apache.commons.httpclient.auth.NTLMScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter NTLMScheme.authenticate(NTCredentials, String)");

        if r1 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r14;

     label1:
        $r2 = new org.apache.commons.httpclient.auth.NTLM;

        specialinvoke $r2.<org.apache.commons.httpclient.auth.NTLM: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.auth.NTLM: void setCredentialCharset(java.lang.String)>(r3);

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getUserName()>();

        $r6 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getPassword()>();

        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getHost()>();

        $r8 = virtualinvoke r1.<org.apache.commons.httpclient.NTCredentials: java.lang.String getDomain()>();

        $r9 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r4, $r5, $r6, $r7, $r8);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NTLM ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        java.lang.ClassCastException $r5;
        java.lang.StringBuffer $r7, $r8, $r11;
        org.apache.commons.httpclient.NTCredentials r15;
        java.lang.String $r3, $r4, $r10, $r12, r13, r14;
        org.apache.commons.httpclient.auth.NTLMScheme r2;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r6;
        org.apache.commons.httpclient.Credentials r1;
        org.apache.commons.logging.Log $r0;
        java.lang.Class $r9;

        r2 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        r1 := @parameter0: org.apache.commons.httpclient.Credentials;

        r13 := @parameter1: java.lang.String;

        r14 := @parameter2: java.lang.String;

        $r0 = <org.apache.commons.httpclient.auth.NTLMScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter NTLMScheme.authenticate(Credentials, String, String)");

     label1:
        r15 = (org.apache.commons.httpclient.NTCredentials) r1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for NTLM authentication: ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label4:
        $r3 = r2.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge>;

        $r4 = staticinvoke <org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String authenticate(org.apache.commons.httpclient.NTCredentials,java.lang.String)>(r15, $r3);

        return $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] $r18;
        java.lang.IllegalStateException $r19;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.NTCredentials r28;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r21;
        java.lang.ClassCastException $r20;
        java.lang.StringBuffer $r9, $r10, $r11, $r22, $r23, $r26;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16, $r17, $r25, $r27, r29;
        org.apache.commons.httpclient.auth.NTLMScheme r1;
        org.apache.commons.httpclient.auth.NTLM $r3;
        org.apache.commons.httpclient.Credentials r2;
        org.apache.commons.httpclient.HttpMethod r4;
        org.apache.commons.logging.Log $r0;
        java.lang.Class $r24;

        r1 := @this: org.apache.commons.httpclient.auth.NTLMScheme;

        r2 := @parameter0: org.apache.commons.httpclient.Credentials;

        r4 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.auth.NTLMScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter NTLMScheme.authenticate(Credentials, HttpMethod)");

        $i0 = r1.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i0 != 0 goto label1;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NTLM authentication process has not been initiated");

        throw $r19;

     label1:
        r28 = (org.apache.commons.httpclient.NTCredentials) r2;

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        $r21 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for NTLM authentication: ");

        $r24 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label4:
        $r3 = new org.apache.commons.httpclient.auth.NTLM;

        specialinvoke $r3.<org.apache.commons.httpclient.auth.NTLM: void <init>()>();

        $r5 = interfaceinvoke r4.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCredentialCharset()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.auth.NTLM: void setCredentialCharset(java.lang.String)>($r6);

        $i1 = r1.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i1 == 1 goto label5;

        $i2 = r1.<org.apache.commons.httpclient.auth.NTLMScheme: int state>;

        if $i2 != 2147483647 goto label6;

     label5:
        $r7 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getHost()>();

        $r8 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getDomain()>();

        r29 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType1Message(java.lang.String,java.lang.String)>($r7, $r8);

        r1.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 2;

        goto label7;

     label6:
        $r13 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getUserName()>();

        $r14 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getPassword()>();

        $r15 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getHost()>();

        $r16 = virtualinvoke r28.<org.apache.commons.httpclient.NTCredentials: java.lang.String getDomain()>();

        $r17 = r1.<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String ntlmchallenge>;

        $r18 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.NTLM: byte[] parseType2Message(java.lang.String)>($r17);

        r29 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])>($r13, $r14, $r15, $r16, $r18);

        r1.<org.apache.commons.httpclient.auth.NTLMScheme: int state> = 4;

     label7:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NTLM ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.auth.NTLMScheme: int FAILED> = 2147483647;

        <org.apache.commons.httpclient.auth.NTLMScheme: int TYPE3_MSG_GENERATED> = 4;

        <org.apache.commons.httpclient.auth.NTLMScheme: int TYPE2_MSG_RECEIVED> = 3;

        <org.apache.commons.httpclient.auth.NTLMScheme: int TYPE1_MSG_GENERATED> = 2;

        <org.apache.commons.httpclient.auth.NTLMScheme: int INITIATED> = 1;

        <org.apache.commons.httpclient.auth.NTLMScheme: int UNINITIATED> = 0;

        $r0 = <org.apache.commons.httpclient.auth.NTLMScheme: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.NTLMScheme: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.NTLMScheme");

        <org.apache.commons.httpclient.auth.NTLMScheme: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.auth.NTLMScheme: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.auth.NTLMScheme: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
