public class org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipExtraField
{
    static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;
    private static final java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG;
    private static final byte[] EMPTY;
    private org.apache.commons.compress.archivers.zip.ZipEightByteInteger size;
    private org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize;
    private org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset;
    private org.apache.commons.compress.archivers.zip.ZipLong diskStart;
    private byte[] rawCentralDirectoryData;

    public void <init>()
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger)
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1, r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void <init>(org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipLong)>(r1, r2, null, null);

        return;
    }

    public void <init>(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipLong)
    {
        org.apache.commons.compress.archivers.zip.ZipLong r4;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1, r2, r3;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r3 := @parameter2: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r4 := @parameter3: org.apache.commons.compress.archivers.zip.ZipLong;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size> = r1;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize> = r2;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset> = r3;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart> = r4;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r0 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        return $r0;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        byte $b0;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r2;

        r1 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        if $r2 == null goto label1;

        $b0 = 16;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>($b0);

        return $r0;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()
    {
        org.apache.commons.compress.archivers.zip.ZipLong $r4;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r1;
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        byte $b3, $b4, $b5, $b6;
        int $i0, $i1, $i2;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r2, $r3, $r5;

        r1 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        if $r2 == null goto label1;

        $b3 = 8;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        $r3 = r1.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        if $r3 == null goto label3;

        $b4 = 8;

        goto label4;

     label3:
        $b4 = 0;

     label4:
        $i0 = $b3 + $b4;

        $r5 = r1.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset>;

        if $r5 == null goto label5;

        $b5 = 8;

        goto label6;

     label5:
        $b5 = 0;

     label6:
        $i1 = $i0 + $b5;

        $r4 = r1.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart>;

        if $r4 == null goto label7;

        $b6 = 4;

        goto label8;

     label7:
        $b6 = 0;

     label8:
        $i2 = $i1 + $b6;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>($i2);

        return $r0;
    }

    public byte[] getLocalFileDataData()
    {
        byte[] r5, $r7;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        java.lang.IllegalArgumentException $r3;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r1, $r2, $r4, $r6;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        if $r1 != null goto label1;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        if $r6 == null goto label4;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        if $r4 != null goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Zip64 extended information must contain both size values in the local file header.");

        throw $r3;

     label3:
        r5 = newarray (byte)[16];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: int addSizes(byte[])>(r5);

        return r5;

     label4:
        $r7 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] EMPTY>;

        return $r7;
    }

    public byte[] getCentralDirectoryData()
    {
        byte[] r2, $r6, $r8;
        org.apache.commons.compress.archivers.zip.ZipLong $r4, $r5;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipShort $r1;
        int $i0, $i1, i2;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r3, $r7;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipShort: int getValue()>();

        r2 = newarray (byte)[$i0];

        $i1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: int addSizes(byte[])>(r2);

        i2 = $i1;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset>;

        if $r3 == null goto label1;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset>;

        $r8 = virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, $i1, 8);

        i2 = $i1 + 8;

     label1:
        $r4 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart>;

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart>;

        $r6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i2, 4);

     label2:
        return r2;
    }

    public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] r2;
        java.util.zip.ZipException $r7;
        org.apache.commons.compress.archivers.zip.ZipLong $r11;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        int i0, i1, i2, i3, i4, $i6;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r8, $r9, $r10;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return;

     label1:
        if i0 >= 16 goto label2;

        $r7 = new java.util.zip.ZipException;

        specialinvoke $r7.<java.util.zip.ZipException: void <init>(java.lang.String)>("Zip64 extended information must contain both size values in the local file header.");

        throw $r7;

     label2:
        $r8 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i1);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size> = $r8;

        i2 = i1 + 8;

        $r9 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i2);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize> = $r9;

        i3 = i2 + 8;

        i4 = i0 - 16;

        if i4 < 8 goto label3;

        $r10 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i3);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset> = $r10;

        i3 = i3 + 8;

        $i6 = (int) -8;

        i4 = i4 + $i6;

     label3:
        if i4 < 4 goto label4;

        $r11 = new org.apache.commons.compress.archivers.zip.ZipLong;

        specialinvoke $r11.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>(r2, i3);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart> = $r11;

     label4:
        return;
    }

    public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] $r1, r2, $r3;
        org.apache.commons.compress.archivers.zip.ZipLong $r4;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r5, $r6, $r7;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r2 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = newarray (byte)[i0];

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData> = $r1;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, $r3, 0, i0);

        if i0 < 28 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void parseFromLocalFileData(byte[],int,int)>(r2, i4, i0);

        goto label3;

     label1:
        if i0 != 24 goto label2;

        $r5 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i4);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size> = $r5;

        i5 = i4 + 8;

        $r6 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i5);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize> = $r6;

        i6 = i5 + 8;

        $r7 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r2, i6);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset> = $r7;

        goto label3;

     label2:
        $i1 = i0 % 8;

        if $i1 != 4 goto label3;

        $r4 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $i2 = i4 + i0;

        $i3 = $i2 - 4;

        specialinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>(r2, $i3);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart> = $r4;

     label3:
        return;
    }

    public void reparseCentralDirectoryData(boolean, boolean, boolean, boolean) throws java.util.zip.ZipException
    {
        byte[] $r1, $r2, $r4, $r6, $r8, $r10, $r16;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        byte $b5, $b6, $b7, $b8, b10, b11;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r5, $r7, $r9;
        boolean z0, z1, z2, z3;
        java.util.zip.ZipException $r11;
        org.apache.commons.compress.archivers.zip.ZipLong $r3;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17;
        int $i0, $i1, $i2, $i3, $i4, i9;
        java.lang.String $r18;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        if $r1 == null goto label13;

        if z0 == 0 goto label01;

        $b5 = 8;

        goto label02;

     label01:
        $b5 = 0;

     label02:
        if z1 == 0 goto label03;

        $b6 = 8;

        goto label04;

     label03:
        $b6 = 0;

     label04:
        $i0 = $b5 + $b6;

        if z2 == 0 goto label05;

        $b7 = 8;

        goto label06;

     label05:
        $b7 = 0;

     label06:
        $i1 = $i0 + $b7;

        if z3 == 0 goto label07;

        $b8 = 4;

        goto label08;

     label07:
        $b8 = 0;

     label08:
        $i4 = $i1 + $b8;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        $i2 = lengthof $r2;

        if $i2 >= $i4 goto label09;

        $r11 = new java.util.zip.ZipException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("central directory zip64 extended information extra field\'s length doesn\'t match central directory data.  Expected length ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but is ");

        $r16 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        $i3 = lengthof $r16;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.util.zip.ZipException: void <init>(java.lang.String)>($r18);

        throw $r11;

     label09:
        i9 = 0;

        b11 = 0;

        b10 = 0;

        if z0 == 0 goto label10;

        $r9 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r10 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        specialinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>($r10, 0);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size> = $r9;

        i9 = 8;

        b11 = 8;

        b10 = 8;

     label10:
        if z1 == 0 goto label11;

        $r7 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r8 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>($r8, b10);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize> = $r7;

        i9 = b11 + 8;

     label11:
        if z2 == 0 goto label12;

        $r5 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        specialinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>($r6, i9);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset> = $r5;

        i9 = i9 + 8;

     label12:
        if z3 == 0 goto label13;

        $r3 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] rawCentralDirectoryData>;

        specialinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r4, i9);

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart> = $r3;

     label13:
        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getSize()
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        return $r1;
    }

    public void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size> = r1;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getCompressedSize()
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        return $r1;
    }

    public void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize> = r1;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getRelativeHeaderOffset()
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset>;

        return $r1;
    }

    public void setRelativeHeaderOffset(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)
    {
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset> = r1;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipLong getDiskStartNumber()
    {
        org.apache.commons.compress.archivers.zip.ZipLong $r1;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart>;

        return $r1;
    }

    public void setDiskStartNumber(org.apache.commons.compress.archivers.zip.ZipLong)
    {
        org.apache.commons.compress.archivers.zip.ZipLong r1;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipLong;

        r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipLong diskStart> = r1;

        return;
    }

    private int addSizes(byte[])
    {
        byte[] $r4, r5, $r7;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r0;
        byte b1, b2;
        int i0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r1, $r2, $r3, $r6;

        r0 := @this: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        r5 := @parameter0: byte[];

        i0 = 0;

        b2 = 0;

        b1 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger size>;

        $r7 = virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r5, 0, 8);

        i0 = 8;

        b2 = 8;

        b1 = 8;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize>;

        $r4 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, b2, 8);

        i0 = b1 + 8;

     label2:
        return i0;
    }

    static void <clinit>()
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.ZipShort $r0;

        <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG> = "Zip64 extended information must contain both size values in the local file header.";

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>(1);

        <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID> = $r0;

        $r1 = newarray (byte)[0];

        <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: byte[] EMPTY> = $r1;

        return;
    }
}
