public abstract class groovy.xml.streamingmarkupsupport.Builder extends groovy.lang.GroovyObjectSupport
{
    protected final java.util.Map namespaceMethodMap;

    public void <init>(java.util.Map)
    {
        java.lang.Object[] $r11;
        groovy.xml.streamingmarkupsupport.Builder r0;
        groovy.lang.Closure $r9, $r10;
        java.util.HashMap $r1;
        java.util.Map r2, $r12, $r15, $r16;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.List r7;
        java.lang.Object $r5, $r6, $r8, $r13, $r14;

        r0 := @this: groovy.xml.streamingmarkupsupport.Builder;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<groovy.lang.GroovyObjectSupport: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.Builder: java.util.Map namespaceMethodMap> = $r1;

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.util.List) $r6;

        $r8 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(1);

        $r9 = (groovy.lang.Closure) $r8;

        $r10 = virtualinvoke $r9.<groovy.lang.Closure: groovy.lang.Closure asWritable()>();

        $r12 = r0.<groovy.xml.streamingmarkupsupport.Builder: java.util.Map namespaceMethodMap>;

        $r11 = newarray (java.lang.Object)[3];

        $r13 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        $r11[0] = $r13;

        $r11[1] = $r10;

        $r14 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(2);

        $r15 = (java.util.Map) $r14;

        $r16 = staticinvoke <groovy.xml.streamingmarkupsupport.Builder: java.util.Map fettleMethodMap(groovy.lang.Closure,java.util.Map)>($r10, $r15);

        $r11[2] = $r16;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r11);

        goto label1;

     label2:
        return;
    }

    private static java.util.Map fettleMethodMap(groovy.lang.Closure, java.util.Map)
    {
        java.lang.Object[] $r7, $r8;
        java.util.Iterator $r3;
        java.util.Set $r2;
        groovy.lang.Closure r6, $r9;
        java.util.HashMap $r0;
        java.util.Map r1;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;

        r6 := @parameter0: groovy.lang.Closure;

        r1 := @parameter1: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $z1 = $r5 instanceof groovy.lang.Closure;

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label3;

     label2:
        $r7 = (java.lang.Object[]) $r5;

        $r8 = (java.lang.Object[]) $r7;

        $r9 = virtualinvoke r6.<groovy.lang.Closure: groovy.lang.Closure curry(java.lang.Object[])>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public abstract java.lang.Object bind(groovy.lang.Closure);
}
