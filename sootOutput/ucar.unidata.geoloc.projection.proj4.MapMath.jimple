public class ucar.unidata.geoloc.projection.proj4.MapMath extends java.lang.Object
{
    public static final double HALFPI;
    public static final double QUARTERPI;
    public static final double TWOPI;
    public static final double RTD;
    public static final double DTR;
    public static final java.awt.geom.Rectangle2D WORLD_BOUNDS_RAD;
    public static final java.awt.geom.Rectangle2D WORLD_BOUNDS;
    public static final int DONT_INTERSECT;
    public static final int DO_INTERSECT;
    public static final int COLLINEAR;
    private static final int N_ITER;
    private static final double C00;
    private static final double C02;
    private static final double C04;
    private static final double C06;
    private static final double C08;
    private static final double C22;
    private static final double C44;
    private static final double C46;
    private static final double C48;
    private static final double C66;
    private static final double C68;
    private static final double C88;
    private static final int MAX_ITER;
    private static final double P00;
    private static final double P01;
    private static final double P02;
    private static final double P10;
    private static final double P11;
    private static final double P20;

    public void <init>()
    {
        ucar.unidata.geoloc.projection.proj4.MapMath r0;

        r0 := @this: ucar.unidata.geoloc.projection.proj4.MapMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double sind(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 0.017453292519943295;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        return $d2;
    }

    public static double cosd(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 0.017453292519943295;

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        return $d2;
    }

    public static double tand(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 0.017453292519943295;

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        return $d2;
    }

    public static double asind(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>(d0);

        $d2 = $d1 * 57.29577951308232;

        return $d2;
    }

    public static double acosd(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>(d0);

        $d2 = $d1 * 57.29577951308232;

        return $d2;
    }

    public static double atand(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double atan(double)>(d0);

        $d2 = $d1 * 57.29577951308232;

        return $d2;
    }

    public static double atan2d(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>(d0, d1);

        $d3 = $d2 * 57.29577951308232;

        return $d3;
    }

    public static double asin(double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        double d0, $d1, $d2, $d3;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b0 = $d1 cmpl 1.0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        $b1 = d0 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $d3 = -1.5707963267948966;

        goto label2;

     label1:
        $d3 = 1.5707963267948966;

     label2:
        return $d3;

     label3:
        $d2 = staticinvoke <java.lang.Math: double asin(double)>(d0);

        return $d2;
    }

    public static double acos(double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        double d0, $d1, $d2, $d3;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b0 = $d1 cmpl 1.0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        $b1 = d0 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $d3 = 3.141592653589793;

        goto label2;

     label1:
        $d3 = 0.0;

     label2:
        return $d3;

     label3:
        $d2 = staticinvoke <java.lang.Math: double acos(double)>(d0);

        return $d2;
    }

    public static double sqrt(double)
    {
        byte $b0;
        int $i1;
        double d0, $d1;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $d1 = 0.0;

        goto label2;

     label1:
        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

     label2:
        return $d1;
    }

    public static double distance(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d3 = d0 * d0;

        $d2 = d1 * d1;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        return $d5;
    }

    public static double distance(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        r1 := @parameter1: java.awt.geom.Point2D$Double;

        $d1 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d5 = $d1 - $d0;

        $d3 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d2 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 - $d2;

        $d6 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: double distance(double,double)>($d5, $d4);

        return $d6;
    }

    public static double hypot(double, double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        int $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, $d10, d11, d12;

        d8 := @parameter0: double;

        d9 := @parameter1: double;

        $b0 = d8 cmpg 0.0;

        $i6 = (int) $b0;

        if $i6 >= 0 goto label1;

        d8 = neg d8;

        goto label4;

     label1:
        $b1 = d8 cmpl 0.0;

        if $b1 != 0 goto label4;

        $b5 = d9 cmpg 0.0;

        $i7 = (int) $b5;

        if $i7 >= 0 goto label2;

        $d10 = neg d9;

        goto label3;

     label2:
        $d10 = d9;

     label3:
        return $d10;

     label4:
        $b2 = d9 cmpg 0.0;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label5;

        d9 = neg d9;

        goto label6;

     label5:
        $b3 = d9 cmpl 0.0;

        if $b3 != 0 goto label6;

        return d8;

     label6:
        $b4 = d8 cmpg d9;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label7;

        d11 = d8 / d9;

        $d4 = d11 * d11;

        $d5 = 1.0 + $d4;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

        $d7 = d9 * $d6;

        return $d7;

     label7:
        d12 = d9 / d8;

        $d0 = d12 * d12;

        $d1 = 1.0 + $d0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $d3 = d8 * $d2;

        return $d3;
    }

    public static double atan2(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>(d0, d1);

        return $d2;
    }

    public static double trunc(double)
    {
        byte $b0;
        int $i1;
        double d0, $d1;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>(d0);

        goto label2;

     label1:
        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

     label2:
        return $d1;
    }

    public static double frac(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: double trunc(double)>(d0);

        $d2 = d0 - $d1;

        return $d2;
    }

    public static double degToRad(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 3.141592653589793;

        $d2 = $d1 / 180.0;

        return $d2;
    }

    public static double radToDeg(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 180.0;

        $d2 = $d1 / 3.141592653589793;

        return $d2;
    }

    public static double dmsToRad(double, double, double)
    {
        byte $b0;
        int $i1;
        double d0, d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $b0 = d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        $d9 = d1 / 60.0;

        $d11 = d0 + $d9;

        $d10 = d3 / 3600.0;

        $d12 = $d11 + $d10;

        $d13 = $d12 * 3.141592653589793;

        $d14 = $d13 / 180.0;

        return $d14;

     label1:
        $d2 = d1 / 60.0;

        $d5 = d0 - $d2;

        $d4 = d3 / 3600.0;

        $d6 = $d5 - $d4;

        $d7 = $d6 * 3.141592653589793;

        $d8 = $d7 / 180.0;

        return $d8;
    }

    public static double dmsToDeg(double, double, double)
    {
        byte $b0;
        int $i1;
        double d0, d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $b0 = d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        $d7 = d1 / 60.0;

        $d9 = d0 + $d7;

        $d8 = d3 / 3600.0;

        $d10 = $d9 + $d8;

        return $d10;

     label1:
        $d2 = d1 / 60.0;

        $d5 = d0 - $d2;

        $d4 = d3 / 3600.0;

        $d6 = $d5 - $d4;

        return $d6;
    }

    public static double normalizeLatitude(double)
    {
        java.lang.RuntimeException $r1;
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0, $z1;
        double d0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Infinite latitude");

        throw $r1;

     label2:
        $b0 = d0 cmpl 1.5707963267948966;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        d0 = d0 - 3.141592653589793;

        goto label2;

     label3:
        $b1 = d0 cmpg -1.5707963267948966;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label4;

        d0 = d0 + 3.141592653589793;

        goto label3;

     label4:
        return d0;
    }

    public static double normalizeLongitude(double)
    {
        java.lang.RuntimeException $r1;
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0, $z1;
        double d0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Infinite longitude");

        throw $r1;

     label2:
        $b0 = d0 cmpl 3.141592653589793;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        d0 = d0 - 6.283185307179586;

        goto label2;

     label3:
        $b1 = d0 cmpg -3.141592653589793;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label4;

        d0 = d0 + 6.283185307179586;

        goto label3;

     label4:
        return d0;
    }

    public static double normalizeAngle(double)
    {
        java.lang.RuntimeException $r1;
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0, $z1;
        double d0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Infinite angle");

        throw $r1;

     label2:
        $b0 = d0 cmpl 6.283185307179586;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        d0 = d0 - 6.283185307179586;

        goto label2;

     label3:
        $b1 = d0 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label4;

        d0 = d0 + 6.283185307179586;

        goto label3;

     label4:
        return d0;
    }

    public static double greatCircleDistance(double, double, double, double)
    {
        double d0, d1, $d2, $d3, $d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        d6 := @parameter0: double;

        d1 := @parameter1: double;

        d5 := @parameter2: double;

        d0 := @parameter3: double;

        $d2 = d0 - d1;

        $d3 = $d2 / 2.0;

        $d4 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d7 = d5 - d6;

        $d8 = $d7 / 2.0;

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d8);

        $d10 = $d4 * $d4;

        $d11 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d12 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d13 = $d11 * $d12;

        $d14 = $d13 * $d9;

        $d15 = $d14 * $d9;

        $d16 = $d10 + $d15;

        $d17 = staticinvoke <java.lang.Math: double sqrt(double)>($d16);

        $d18 = staticinvoke <java.lang.Math: double asin(double)>($d17);

        $d19 = 2.0 * $d18;

        return $d19;
    }

    public static double sphericalAzimuth(double, double, double, double)
    {
        double d0, d1, d2, d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;

        d6 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d0 := @parameter3: double;

        d2 = d0 - d1;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>(d3);

        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d2);

        $d7 = $d4 * $d5;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>(d6);

        $d9 = staticinvoke <java.lang.Math: double sin(double)>(d3);

        $d10 = $d8 * $d9;

        $d11 = staticinvoke <java.lang.Math: double sin(double)>(d6);

        $d12 = $d11 * $d4;

        $d13 = staticinvoke <java.lang.Math: double cos(double)>(d2);

        $d14 = $d12 * $d13;

        $d15 = $d10 - $d14;

        $d16 = staticinvoke <java.lang.Math: double atan2(double,double)>($d7, $d15);

        return $d16;
    }

    public static boolean sameSigns(double, double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        double d0, d1;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $b1 = d1 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z0 != $z1 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public static boolean sameSigns(int, int)
    {
        int i0, i1;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if i1 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z0 != $z1 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public static double takeSign(double, double)
    {
        byte $b0;
        int $i1;
        double $d0, d1, $d2, d3;

        d3 := @parameter0: double;

        d1 := @parameter1: double;

        $d0 = staticinvoke <java.lang.Math: double abs(double)>(d3);

        $b0 = d1 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $d2 = neg $d0;

        return $d2;

     label1:
        return $d0;
    }

    public static int takeSign(int, int)
    {
        int $i0, i1, $i2, i3;

        i3 := @parameter0: int;

        i1 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>(i3);

        if i1 >= 0 goto label1;

        $i2 = neg $i0;

        return $i2;

     label1:
        return $i0;
    }

    public static int intersectSegments(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        java.awt.geom.Point2D$Double r0, r1, r2, r3, r4;
        boolean $z0, $z1;
        int $i8, $i9, $i10;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, d24, d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65;

        r1 := @parameter0: java.awt.geom.Point2D$Double;

        r0 := @parameter1: java.awt.geom.Point2D$Double;

        r2 := @parameter2: java.awt.geom.Point2D$Double;

        r3 := @parameter3: java.awt.geom.Point2D$Double;

        r4 := @parameter4: java.awt.geom.Point2D$Double;

        $d1 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d0 = r1.<java.awt.geom.Point2D$Double: double y>;

        d2 = $d1 - $d0;

        $d4 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d3 = r0.<java.awt.geom.Point2D$Double: double x>;

        d5 = $d4 - $d3;

        $d7 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d6 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d11 = $d7 * $d6;

        $d9 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d8 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d10 = $d9 * $d8;

        d12 = $d11 - $d10;

        $d13 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d16 = d2 * $d13;

        $d14 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d15 = d5 * $d14;

        $d17 = $d16 + $d15;

        d18 = $d17 + d12;

        $d19 = r3.<java.awt.geom.Point2D$Double: double x>;

        $d22 = d2 * $d19;

        $d20 = r3.<java.awt.geom.Point2D$Double: double y>;

        $d21 = d5 * $d20;

        $d23 = $d22 + $d21;

        d24 = $d23 + d12;

        $b0 = d18 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b5 = d24 cmpl 0.0;

        if $b5 == 0 goto label1;

        $z1 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: boolean sameSigns(double,double)>(d18, d24);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $d35 = r3.<java.awt.geom.Point2D$Double: double y>;

        $d36 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d37 = $d35 - $d36;

        $d38 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d39 = r3.<java.awt.geom.Point2D$Double: double x>;

        $d40 = $d38 - $d39;

        $d41 = r3.<java.awt.geom.Point2D$Double: double x>;

        $d42 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d43 = $d41 * $d42;

        $d44 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d45 = r3.<java.awt.geom.Point2D$Double: double y>;

        $d46 = $d44 * $d45;

        $d47 = $d43 - $d46;

        $d48 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d49 = $d37 * $d48;

        $d50 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d51 = $d40 * $d50;

        $d52 = $d49 + $d51;

        $d53 = $d52 + $d47;

        $d54 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d55 = $d37 * $d54;

        $d56 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d57 = $d40 * $d56;

        $d58 = $d55 + $d57;

        $d59 = $d58 + $d47;

        $b6 = $d53 cmpl 0.0;

        if $b6 == 0 goto label2;

        $b4 = $d59 cmpl 0.0;

        if $b4 == 0 goto label2;

        $z0 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: boolean sameSigns(double,double)>($d53, $d59);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $d60 = d2 * $d40;

        $d61 = $d37 * d5;

        $d62 = $d60 - $d61;

        $b7 = $d62 cmpl 0.0;

        if $b7 != 0 goto label3;

        return 2;

     label3:
        $b1 = $d62 cmpg 0.0;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label4;

        $d33 = neg $d62;

        $d63 = $d33 / 2.0;

        goto label5;

     label4:
        $d63 = $d62 / 2.0;

     label5:
        d25 = $d63;

        $d27 = d5 * $d47;

        $d26 = $d40 * d12;

        $d34 = $d27 - $d26;

        $b2 = $d34 cmpg 0.0;

        $i9 = (int) $b2;

        if $i9 >= 0 goto label6;

        $d64 = $d34 - $d63;

        goto label7;

     label6:
        $d64 = $d34 + $d63;

     label7:
        $d28 = $d64 / $d62;

        r4.<java.awt.geom.Point2D$Double: double x> = $d28;

        $d30 = $d37 * d12;

        $d29 = d2 * $d47;

        $d32 = $d30 - $d29;

        $b3 = $d32 cmpg 0.0;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label8;

        $d65 = $d32 - d25;

        goto label9;

     label8:
        $d65 = $d32 + d25;

     label9:
        $d31 = $d65 / $d62;

        r4.<java.awt.geom.Point2D$Double: double y> = $d31;

        return 1;
    }

    public static double dot(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        r1 := @parameter1: java.awt.geom.Point2D$Double;

        $d1 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d2 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        return $d6;
    }

    public static java.awt.geom.Point2D$Double perpendicular(java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double $r0, r1;
        double $d0, $d1, $d2;

        r1 := @parameter0: java.awt.geom.Point2D$Double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d2 = neg $d0;

        $d1 = r1.<java.awt.geom.Point2D$Double: double x>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d1);

        return $r0;
    }

    public static java.awt.geom.Point2D$Double add(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @parameter0: java.awt.geom.Point2D$Double;

        r2 := @parameter1: java.awt.geom.Point2D$Double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d5 = $d1 + $d0;

        $d3 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d2 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 + $d2;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public static java.awt.geom.Point2D$Double subtract(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @parameter0: java.awt.geom.Point2D$Double;

        r2 := @parameter1: java.awt.geom.Point2D$Double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d5 = $d1 - $d0;

        $d3 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d2 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public static java.awt.geom.Point2D$Double multiply(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @parameter0: java.awt.geom.Point2D$Double;

        r2 := @parameter1: java.awt.geom.Point2D$Double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r2.<java.awt.geom.Point2D$Double: double x>;

        $d5 = $d1 * $d0;

        $d3 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d2 = r2.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 * $d2;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public static double cross(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        r1 := @parameter1: java.awt.geom.Point2D$Double;

        $d1 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r1.<java.awt.geom.Point2D$Double: double y>;

        $d5 = $d1 * $d0;

        $d3 = r1.<java.awt.geom.Point2D$Double: double x>;

        $d2 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d4 = $d3 * $d2;

        $d6 = $d5 - $d4;

        return $d6;
    }

    public static double cross(double, double, double, double)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d2 := @parameter2: double;

        d1 := @parameter3: double;

        $d5 = d0 * d1;

        $d4 = d2 * d3;

        $d6 = $d5 - $d4;

        return $d6;
    }

    public static void normalize(java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        $d1 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d2 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: double distance(double,double)>($d1, $d0);

        $d3 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d4 = $d3 / $d2;

        r0.<java.awt.geom.Point2D$Double: double x> = $d4;

        $d5 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d6 = $d5 / $d2;

        r0.<java.awt.geom.Point2D$Double: double y> = $d6;

        return;
    }

    public static void negate(java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0;
        double $d0, $d1, $d2, $d3;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        $d0 = r0.<java.awt.geom.Point2D$Double: double x>;

        $d1 = neg $d0;

        r0.<java.awt.geom.Point2D$Double: double x> = $d1;

        $d2 = r0.<java.awt.geom.Point2D$Double: double y>;

        $d3 = neg $d2;

        r0.<java.awt.geom.Point2D$Double: double y> = $d3;

        return;
    }

    public static double longitudeDistance(double, double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $d4 = d0 + 3.141592653589793;

        goto label2;

     label1:
        $d4 = 3.141592653589793 - d0;

     label2:
        $b1 = d1 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label3;

        $d5 = d1 + 3.141592653589793;

        goto label4;

     label3:
        $d5 = 3.141592653589793 - d1;

     label4:
        $d6 = $d4 + $d5;

        $d7 = staticinvoke <java.lang.Math: double min(double,double)>($d3, $d6);

        return $d7;
    }

    public static double geocentricLatitude(double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 = 1.0 - d0;

        $d3 = d1 * d1;

        $d4 = staticinvoke <java.lang.Math: double tan(double)>(d2);

        $d5 = $d3 * $d4;

        $d6 = staticinvoke <java.lang.Math: double atan(double)>($d5);

        return $d6;
    }

    public static double geographicLatitude(double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 = 1.0 - d0;

        $d3 = staticinvoke <java.lang.Math: double tan(double)>(d2);

        $d4 = d1 * d1;

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double atan(double)>($d5);

        return $d6;
    }

    public static double tsfn(double, double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;

        d1 := @parameter0: double;

        d11 := @parameter1: double;

        d0 := @parameter2: double;

        d12 = d11 * d0;

        $d2 = 1.5707963267948966 - d1;

        $d3 = 0.5 * $d2;

        $d4 = staticinvoke <java.lang.Math: double tan(double)>($d3);

        $d6 = 1.0 - d12;

        $d5 = 1.0 + d12;

        $d8 = $d6 / $d5;

        $d7 = 0.5 * d0;

        $d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d8, $d7);

        $d10 = $d4 / $d9;

        return $d10;
    }

    public static double msfn(double, double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $d3 = d1 * d2;

        $d4 = $d3 * d2;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

        $d7 = d0 / $d6;

        return $d7;
    }

    public static double phi2(double, double)
    {
        byte $b0;
        int i1, $i2, $i4;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        java.lang.RuntimeException $r1;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 = 0.5 * d0;

        $d3 = staticinvoke <java.lang.Math: double atan(double)>(d2);

        $d4 = 2.0 * $d3;

        d18 = 1.5707963267948966 - $d4;

        i1 = 15;

     label1:
        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d18);

        $d15 = d0 * $d5;

        $d7 = 1.0 - $d15;

        $d6 = 1.0 + $d15;

        $d8 = $d7 / $d6;

        $d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d8, d1);

        $d10 = d2 * $d9;

        $d11 = staticinvoke <java.lang.Math: double atan(double)>($d10);

        $d12 = 2.0 * $d11;

        $d13 = 1.5707963267948966 - $d12;

        $d16 = $d13 - d18;

        $d17 = d18 + $d16;

        d18 = $d17;

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d16);

        $b0 = $d14 cmpl 1.0E-10;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label2;

        $i4 = (int) -1;

        i1 = i1 + $i4;

        if i1 != 0 goto label1;

     label2:
        if i1 > 0 goto label3;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label3:
        return $d17;
    }

    public static double[] enfn(double)
    {
        double[] r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;

        d0 := @parameter0: double;

        r0 = newarray (double)[5];

        $d1 = d0 * 0.01068115234375;

        $d2 = 0.01953125 + $d1;

        $d3 = d0 * $d2;

        $d4 = 0.046875 + $d3;

        $d5 = d0 * $d4;

        $d6 = 0.25 + $d5;

        $d7 = d0 * $d6;

        $d8 = 1.0 - $d7;

        r0[0] = $d8;

        $d9 = d0 * 0.01068115234375;

        $d10 = 0.01953125 + $d9;

        $d11 = d0 * $d10;

        $d12 = 0.046875 + $d11;

        $d13 = d0 * $d12;

        $d14 = 0.75 - $d13;

        $d15 = d0 * $d14;

        r0[1] = $d15;

        $d16 = d0 * d0;

        $d17 = d0 * 0.007120768229166667;

        $d18 = 0.013020833333333334 + $d17;

        $d19 = d0 * $d18;

        $d20 = 0.46875 - $d19;

        $d21 = $d16 * $d20;

        r0[2] = $d21;

        $d22 = $d16 * d0;

        $d23 = d0 * 0.005696614583333333;

        $d24 = 0.3645833333333333 - $d23;

        $d25 = $d22 * $d24;

        r0[3] = $d25;

        $d26 = $d22 * d0;

        $d27 = $d26 * 0.3076171875;

        r0[4] = $d27;

        return r0;
    }

    public static double mlfn(double, double, double, double[])
    {
        double[] r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18;

        d0 := @parameter0: double;

        d15 := @parameter1: double;

        d16 := @parameter2: double;

        r0 := @parameter3: double[];

        d17 = d16 * d15;

        d18 = d15 * d15;

        $d1 = r0[0];

        $d13 = $d1 * d0;

        $d10 = r0[1];

        $d7 = r0[2];

        $d4 = r0[3];

        $d2 = r0[4];

        $d3 = d18 * $d2;

        $d5 = $d4 + $d3;

        $d6 = d18 * $d5;

        $d8 = $d7 + $d6;

        $d9 = d18 * $d8;

        $d11 = $d10 + $d9;

        $d12 = d17 * $d11;

        $d14 = $d13 - $d12;

        return $d14;
    }

    public static double inv_mlfn(double, double, double[])
    {
        double[] r0;
        byte $b0;
        int i1, $i2, $i4;
        double d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16;

        d3 := @parameter0: double;

        d0 := @parameter1: double;

        r0 := @parameter2: double[];

        $d1 = 1.0 - d0;

        d2 = 1.0 / $d1;

        d15 = d3;

        i1 = 10;

     label1:
        if i1 == 0 goto label3;

        $d4 = staticinvoke <java.lang.Math: double sin(double)>(d15);

        $d5 = d0 * $d4;

        $d6 = $d5 * $d4;

        d16 = 1.0 - $d6;

        $d7 = staticinvoke <java.lang.Math: double cos(double)>(d15);

        $d8 = staticinvoke <ucar.unidata.geoloc.projection.proj4.MapMath: double mlfn(double,double,double,double[])>(d15, $d4, $d7, r0);

        $d9 = $d8 - d3;

        $d10 = staticinvoke <java.lang.Math: double sqrt(double)>(d16);

        $d11 = d16 * $d10;

        $d12 = $d9 * $d11;

        $d13 = $d12 * d2;

        d15 = d15 - $d13;

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $b0 = $d14 cmpg 1.0E-11;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label2;

        return d15;

     label2:
        $i4 = (int) -1;

        i1 = i1 + $i4;

        goto label1;

     label3:
        return d15;
    }

    public static double[] authset(double)
    {
        double[] r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14;

        d0 := @parameter0: double;

        r0 = newarray (double)[3];

        $d1 = d0 * 0.3333333333333333;

        r0[0] = $d1;

        d13 = d0 * d0;

        $d3 = r0[0];

        $d2 = d13 * 0.17222222222222222;

        $d4 = $d3 + $d2;

        r0[0] = $d4;

        $d5 = d13 * 0.06388888888888888;

        r0[1] = $d5;

        d14 = d13 * d0;

        $d7 = r0[0];

        $d6 = d14 * 0.10257936507936508;

        $d8 = $d7 + $d6;

        r0[0] = $d8;

        $d10 = r0[1];

        $d9 = d14 * 0.0664021164021164;

        $d11 = $d10 + $d9;

        r0[1] = $d11;

        $d12 = d14 * 0.016415012942191543;

        r0[2] = $d12;

        return r0;
    }

    public static double authlat(double, double[])
    {
        double[] r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        d1 = d0 + d0;

        $d2 = r0[0];

        $d3 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d4 = $d2 * $d3;

        $d6 = d0 + $d4;

        $d7 = r0[1];

        $d5 = d1 + d1;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d9 = $d7 * $d8;

        $d12 = $d6 + $d9;

        $d13 = r0[2];

        $d10 = d1 + d1;

        $d11 = $d10 + d1;

        $d14 = staticinvoke <java.lang.Math: double sin(double)>($d11);

        $d15 = $d13 * $d14;

        $d16 = $d12 + $d15;

        return $d16;
    }

    public static double qsfn(double, double, double)
    {
        byte $b0;
        int $i1;
        double d0, d1, $d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d4 := @parameter2: double;

        $b0 = d0 cmpl 1.0E-7;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        d3 = d0 * d1;

        $d5 = d3 * d3;

        $d6 = 1.0 - $d5;

        $d10 = d1 / $d6;

        $d11 = 0.5 / d0;

        $d8 = 1.0 - d3;

        $d7 = 1.0 + d3;

        $d9 = $d8 / $d7;

        $d12 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $d13 = $d11 * $d12;

        $d14 = $d10 - $d13;

        $d15 = d4 * $d14;

        return $d15;

     label1:
        $d2 = d1 + d1;

        return $d2;
    }

    public static double niceNumber(double, boolean)
    {
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        int i0, $i7, $i8, $i9, $i10, $i11, $i12;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, $d9, $d10, $d11;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        $d3 = $d1 / $d2;

        $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3);

        i0 = (int) $d4;

        $d5 = (double) i0;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d5);

        d7 = d0 / $d6;

        if z0 == 0 goto label4;

        $b4 = d7 cmpg 1.5;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label1;

        d8 = 1.0;

        goto label8;

     label1:
        $b5 = d7 cmpg 3.0;

        $i8 = (int) $b5;

        if $i8 >= 0 goto label2;

        d8 = 2.0;

        goto label8;

     label2:
        $b6 = d7 cmpg 7.0;

        $i9 = (int) $b6;

        if $i9 >= 0 goto label3;

        d8 = 5.0;

        goto label8;

     label3:
        d8 = 10.0;

        goto label8;

     label4:
        $b1 = d7 cmpg 1.0;

        $i10 = (int) $b1;

        if $i10 > 0 goto label5;

        d8 = 1.0;

        goto label8;

     label5:
        $b2 = d7 cmpg 2.0;

        $i11 = (int) $b2;

        if $i11 > 0 goto label6;

        d8 = 2.0;

        goto label8;

     label6:
        $b3 = d7 cmpg 5.0;

        $i12 = (int) $b3;

        if $i12 > 0 goto label7;

        d8 = 5.0;

        goto label8;

     label7:
        d8 = 10.0;

     label8:
        $d9 = (double) i0;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d9);

        $d11 = d8 * $d10;

        return $d11;
    }

    static void <clinit>()
    {
        java.awt.geom.Rectangle2D$Double $r0, $r1;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P20> = 0.016415012942191543;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P11> = 0.0664021164021164;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P10> = 0.06388888888888888;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P02> = 0.10257936507936508;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P01> = 0.17222222222222222;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double P00> = 0.3333333333333333;

        <ucar.unidata.geoloc.projection.proj4.MapMath: int MAX_ITER> = 10;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C88> = 0.3076171875;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C68> = 0.005696614583333333;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C66> = 0.3645833333333333;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C48> = 0.007120768229166667;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C46> = 0.013020833333333334;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C44> = 0.46875;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C22> = 0.75;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C08> = 0.01068115234375;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C06> = 0.01953125;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C04> = 0.046875;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C02> = 0.25;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double C00> = 1.0;

        <ucar.unidata.geoloc.projection.proj4.MapMath: int N_ITER> = 15;

        <ucar.unidata.geoloc.projection.proj4.MapMath: int COLLINEAR> = 2;

        <ucar.unidata.geoloc.projection.proj4.MapMath: int DO_INTERSECT> = 1;

        <ucar.unidata.geoloc.projection.proj4.MapMath: int DONT_INTERSECT> = 0;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double DTR> = 0.017453292519943295;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double RTD> = 57.29577951308232;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double TWOPI> = 6.283185307179586;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double QUARTERPI> = 0.7853981633974483;

        <ucar.unidata.geoloc.projection.proj4.MapMath: double HALFPI> = 1.5707963267948966;

        $r0 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(-3.141592653589793, -1.5707963267948966, 6.283185307179586, 3.141592653589793);

        <ucar.unidata.geoloc.projection.proj4.MapMath: java.awt.geom.Rectangle2D WORLD_BOUNDS_RAD> = $r0;

        $r1 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(-180.0, -90.0, 360.0, 180.0);

        <ucar.unidata.geoloc.projection.proj4.MapMath: java.awt.geom.Rectangle2D WORLD_BOUNDS> = $r1;

        return;
    }
}
