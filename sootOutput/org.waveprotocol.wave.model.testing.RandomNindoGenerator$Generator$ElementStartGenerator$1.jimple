class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1 extends java.lang.Object implements org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper
{
    final boolean val$valid;
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator this$1;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator, boolean)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1 r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator this$1> = r1;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: boolean val$valid> = z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.util.Pair map(java.lang.String)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator $r1, $r7;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1$1 $r8;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r2, $r9;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1 r0;
        org.waveprotocol.wave.model.util.Pair $r11;
        org.waveprotocol.wave.model.document.operation.Attributes $r10;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r6;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator this$1>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r5 = $r2.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r4 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementStart(java.lang.String,java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3, $r4, null);

        $z0 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: boolean val$valid>;

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 == 0 goto label2;

     label1:
        $z1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: boolean val$valid>;

        if $z1 != 0 goto label3;

        $z3 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z3 == 0 goto label3;

     label2:
        return null;

     label3:
        $r7 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator this$1>;

        $r9 = $r7.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $z2 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: boolean val$valid>;

        $r8 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1$1;

        specialinvoke $r8.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1,java.lang.String)>(r0, r3);

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.Attributes generateRandomAttributes(boolean,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker)>($z2, $r8);

        if $r10 != null goto label4;

        return null;

     label4:
        $r11 = staticinvoke <org.waveprotocol.wave.model.util.Pair: org.waveprotocol.wave.model.util.Pair of(java.lang.Object,java.lang.Object)>(r3, $r10);

        return $r11;
    }

    public volatile java.lang.Object map(java.lang.Object)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1 r0;
        java.lang.Object r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.util.Pair $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator$1: org.waveprotocol.wave.model.util.Pair map(java.lang.String)>($r2);

        return $r3;
    }
}
