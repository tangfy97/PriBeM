public abstract class org.apache.xmlbeans.impl.values.JavaBase64Holder extends org.apache.xmlbeans.impl.values.XmlObjectBase
{
    protected byte[] _value;
    protected boolean _hashcached;
    protected int hashcode;
    protected static java.security.MessageDigest md5;

    public void <init>()
    {
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached> = 0;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: int hashcode> = 0;

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r1;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        $r0 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_BASE_64_BINARY>;

        return $r0;
    }

    protected java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        byte[] $r2, $r3;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r1;
        org.apache.xmlbeans.impl.values.NamespaceManager r4;
        java.lang.String $r0;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        r4 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] encode(byte[])>($r2);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r3);

        return $r0;
    }

    protected void set_text(java.lang.String)
    {
        byte[] $r3, $r6;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;
        org.apache.xmlbeans.impl.common.ValidationContext $r2, $r5;
        java.lang.String r1;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached> = 0;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _validateOnSet()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: org.apache.xmlbeans.SchemaType schemaType()>();

        $r5 = <org.apache.xmlbeans.impl.values.JavaBase64Holder: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] validateLexical(java.lang.String,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext)>(r1, $r4, $r5);

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value> = $r6;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.values.JavaBase64Holder: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] lex(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext)>(r1, $r2);

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value> = $r3;

     label2:
        return;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached> = 0;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value> = null;

        return;
    }

    public static byte[] lex(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        byte[] $r1, r5;
        java.lang.Object[] $r3;
        org.apache.xmlbeans.impl.common.ValidationContext r2;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

        r5 = null;

     label1:
        r5 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] decode(byte[])>(r5);

        if $r1 != null goto label5;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "not encoded properly";

        interfaceinvoke r2.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("base64Binary", $r3);

     label5:
        return $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static byte[] validateLexical(java.lang.String, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        byte[] $r2;
        java.lang.Object[] $r4;
        org.apache.xmlbeans.impl.common.ValidationContext r1;
        java.lang.String r0, $r5;
        org.apache.xmlbeans.SchemaType r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r1 := @parameter2: org.apache.xmlbeans.impl.common.ValidationContext;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] lex(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: boolean matchPatternFacet(java.lang.String)>(r0);

        if $z0 != 0 goto label2;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "base 64";

        $r5 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r3);

        $r4[1] = $r5;

        interfaceinvoke r1.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-datatype-valid.1.1b", $r4);

        return null;

     label2:
        return $r2;
    }

    public byte[] getByteArrayValue()
    {
        byte[] $r1, $r2, r3, $r4, $r5;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;
        int $i0, $i1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $i0 = lengthof $r2;

        r3 = newarray (byte)[$i0];

        $r5 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $r4 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i1);

        return r3;
    }

    protected void set_ByteArray(byte[])
    {
        byte[] r1, $r2, $r3;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;
        int $i0, $i1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        r1 := @parameter0: byte[];

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached> = 0;

        $i0 = lengthof r1;

        $r2 = newarray (byte)[$i0];

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value> = $r2;

        $r3 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i1);

        return;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        byte[] $r2, $r4;
        org.apache.xmlbeans.XmlBase64Binary $r1;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r3;
        org.apache.xmlbeans.XmlObject r0;
        boolean $z0;

        r3 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.XmlBase64Binary) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlBase64Binary: byte[] getByteArrayValue()>();

        $r4 = r3.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r2);

        return $z0;
    }

    protected int value_hash_code()
    {
        byte[] $r1, $r2, $r4;
        org.apache.xmlbeans.impl.values.JavaBase64Holder r0;
        java.security.MessageDigest $r3;
        byte $b0, $b2, $b3, $b6;
        int $i1, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaBase64Holder;

        $z0 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached>;

        if $z0 == 0 goto label1;

        $i10 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: int hashcode>;

        return $i10;

     label1:
        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: boolean _hashcached> = 1;

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        if $r1 != null goto label2;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: int hashcode> = 0;

        return 0;

     label2:
        $r3 = <org.apache.xmlbeans.impl.values.JavaBase64Holder: java.security.MessageDigest md5>;

        $r2 = r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: byte[] _value>;

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $b2 = $r4[0];

        $b0 = $r4[1];

        $i11 = (int) $b0;

        $i1 = 24 + $i11;

        $i12 = (int) $b2;

        $i5 = $i12 << $i1;

        $b3 = $r4[2];

        $i13 = (int) $b3;

        $i4 = 16 + $i13;

        $i8 = $i5 << $i4;

        $b6 = $r4[3];

        $i14 = (int) $b6;

        $i7 = 8 + $i14;

        $i9 = $i8 << $i7;

        r0.<org.apache.xmlbeans.impl.values.JavaBase64Holder: int hashcode> = $i9;

        return $i9;
    }

    static void <clinit>()
    {
        java.lang.IllegalStateException $r2;
        java.security.MessageDigest $r0;
        java.security.NoSuchAlgorithmException $r1;

     label1:
        $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        <org.apache.xmlbeans.impl.values.JavaBase64Holder: java.security.MessageDigest md5> = $r0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find MD5 hash Algorithm");

        throw $r2;

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }
}
