public class com.hp.hpl.jena.sparql.graph.GraphUnionRead extends com.hp.hpl.jena.graph.impl.GraphBase
{
    private final com.hp.hpl.jena.sparql.core.DatasetGraph dataset;
    private final java.util.Collection graphs;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.graph.GraphUnionRead r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        java.util.Collection r2;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphUnionRead;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = r1;

        r0.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: java.util.Collection graphs> = r2;

        return;
    }

    protected com.hp.hpl.jena.shared.PrefixMapping createPrefixMapping()
    {
        com.hp.hpl.jena.sparql.graph.GraphUnionRead r1;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6;
        java.lang.Object $r4;
        com.hp.hpl.jena.graph.Graph $r7;
        com.hp.hpl.jena.shared.PrefixMapping $r8;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r0;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphUnionRead;

        $r0 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r0.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: java.util.Collection graphs>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $z0 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r6 = r1.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: com.hp.hpl.jena.sparql.core.DatasetGraph dataset>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r5);

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        interfaceinvoke $r0.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r8);

        goto label1;

     label3:
        return $r0;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.sparql.graph.GraphUnionRead r1;
        java.util.Iterator $r3, $r4;
        java.util.Collection $r2;
        com.hp.hpl.jena.graph.Node r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r8, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r12;
        org.apache.jena.atlas.iterator.IteratorConcat $r0;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph $r10;
        com.hp.hpl.jena.graph.TripleMatch r11;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphUnionRead;

        r11 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r0 = new org.apache.jena.atlas.iterator.IteratorConcat;

        specialinvoke $r0.<org.apache.jena.atlas.iterator.IteratorConcat: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: java.util.Collection graphs>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = r1.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: com.hp.hpl.jena.sparql.core.DatasetGraph dataset>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: boolean containsGraph(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>($r8, r7);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r9 = r1.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: com.hp.hpl.jena.sparql.core.DatasetGraph dataset>;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>($r9, r7);

        $r12 = interfaceinvoke $r10.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r11);

        virtualinvoke $r0.<org.apache.jena.atlas.iterator.IteratorConcat: void add(java.util.Iterator)>($r12);

        goto label1;

     label3:
        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinct(java.util.Iterator)>($r0);

        $r5 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r4);

        return $r5;
    }
}
