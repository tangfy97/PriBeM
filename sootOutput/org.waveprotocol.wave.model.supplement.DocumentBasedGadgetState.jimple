public class org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState extends java.lang.Object implements org.waveprotocol.wave.model.supplement.GadgetState
{
    private final org.waveprotocol.wave.model.adt.ObservableBasicMap state;
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final java.lang.Object container;

    void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r5;
        org.waveprotocol.wave.model.util.Serializer $r3, $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r1;

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: java.lang.Object container> = r2;

        $r4 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r3 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r4, $r3, "state", "name", "value");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state> = $r5;

        return;
    }

    public static org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, java.lang.String, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState $r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r0 = new org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r1, r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: void installListeners(java.lang.String,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r3, r4);

        return $r0;
    }

    private void installListeners(java.lang.String, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState$1 $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState r0;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        $r1 = new org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState$1: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,java.lang.String)>(r0, r2, r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)>($r1);

        return;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap getStateMap()
    {
        java.util.Iterator $r6;
        java.util.Set $r2, $r5;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState r0;
        org.waveprotocol.wave.model.util.StringMap $r3, $r11;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r1, $r4, $r9;
        java.lang.Object $r7, $r10;
        java.lang.String r8;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap emptyMap()>();

        return $r11;

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.lang.Object get(java.lang.Object)>(r8);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r8, $r10);

        goto label2;

     label3:
        return $r3;
    }

    public void remove()
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: java.lang.Object container>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r3);

        return;
    }

    public void setState(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r3, $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState r2;
        java.lang.String r0, r1;

        r2 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Private gadget state key is null.");

        if r1 == null goto label1;

        $r4 = r2.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label2;

     label1:
        $r3 = r2.<org.waveprotocol.wave.model.supplement.DocumentBasedGadgetState: org.waveprotocol.wave.model.adt.ObservableBasicMap state>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void remove(java.lang.Object)>(r0);

     label2:
        return;
    }
}
