public class org.apache.tika.io.LookaheadInputStream extends java.io.InputStream
{
    private java.io.InputStream stream;
    private final byte[] buffer;
    private int buffered;
    private int position;
    private int mark;

    public void <init>(java.io.InputStream, int)
    {
        byte[] $r2;
        int i0;
        org.apache.tika.io.LookaheadInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.tika.io.LookaheadInputStream: int buffered> = 0;

        r0.<org.apache.tika.io.LookaheadInputStream: int position> = 0;

        r0.<org.apache.tika.io.LookaheadInputStream: int mark> = 0;

        r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream> = r1;

        $r2 = newarray (byte)[i0];

        r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer> = $r2;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.InputStream: void mark(int)>(i0);

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.tika.io.LookaheadInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        $r1 = r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream>;

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

        r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream> = null;

     label1:
        return;
    }

    private void fill() throws java.io.IOException
    {
        byte[] $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        org.apache.tika.io.LookaheadInputStream r0;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        $i0 = virtualinvoke r0.<org.apache.tika.io.LookaheadInputStream: int available()>();

        if $i0 != 0 goto label2;

        $i2 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $r1 = r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer>;

        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label2;

        $r2 = r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream>;

        if $r2 == null goto label2;

        $r5 = r0.<org.apache.tika.io.LookaheadInputStream: java.io.InputStream stream>;

        $r4 = r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $r3 = r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer>;

        $i4 = lengthof $r3;

        $i3 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i5 = $i4 - $i3;

        $i7 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r4, $i6, $i5);

        $i11 = (int) -1;

        if $i7 == $i11 goto label1;

        $i8 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i9 = $i8 + $i7;

        r0.<org.apache.tika.io.LookaheadInputStream: int buffered> = $i9;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.tika.io.LookaheadInputStream: void close()>();

     label2:
        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.tika.io.LookaheadInputStream r0;
        short $s5, $s6;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i7, $i9;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        specialinvoke r0.<org.apache.tika.io.LookaheadInputStream: void fill()>();

        $i1 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i0 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        if $i1 <= $i0 goto label1;

        $r1 = r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer>;

        $i2 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.tika.io.LookaheadInputStream: int position> = $i3;

        $b4 = $r1[$i2];

        $s6 = (short) $b4;

        $s5 = 255 & $s6;

        $i7 = (int) $s5;

        return $i7;

     label1:
        $i9 = (int) -1;

        return $i9;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2;
        org.apache.tika.io.LookaheadInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10, $i12;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        r1 := @parameter0: byte[];

        i6 := @parameter1: int;

        i10 := @parameter2: int;

        specialinvoke r0.<org.apache.tika.io.LookaheadInputStream: void fill()>();

        $i1 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i0 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        if $i1 <= $i0 goto label1;

        $i3 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i2 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        $i4 = $i3 - $i2;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i4);

        $r2 = r0.<org.apache.tika.io.LookaheadInputStream: byte[] buffer>;

        $i7 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i7, r1, i6, $i5);

        $i8 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        $i9 = $i8 + $i5;

        r0.<org.apache.tika.io.LookaheadInputStream: int position> = $i9;

        return $i5;

     label1:
        $i12 = (int) -1;

        return $i12;
    }

    public long skip(long) throws java.io.IOException
    {
        long $l1, $l2, $l4, $l5, l7;
        org.apache.tika.io.LookaheadInputStream r0;
        int $i0, $i3, $i6;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        l7 := @parameter0: long;

        specialinvoke r0.<org.apache.tika.io.LookaheadInputStream: void fill()>();

        $i0 = virtualinvoke r0.<org.apache.tika.io.LookaheadInputStream: int available()>();

        $l1 = (long) $i0;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>(l7, $l1);

        $i3 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        $l4 = (long) $i3;

        $l5 = $l4 + $l2;

        $i6 = (int) $l5;

        r0.<org.apache.tika.io.LookaheadInputStream: int position> = $i6;

        return $l2;
    }

    public int available()
    {
        int $i0, $i1, $i2;
        org.apache.tika.io.LookaheadInputStream r0;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        $i1 = r0.<org.apache.tika.io.LookaheadInputStream: int buffered>;

        $i0 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public boolean markSupported()
    {
        org.apache.tika.io.LookaheadInputStream r0;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        return 1;
    }

    public synchronized void mark(int)
    {
        int $i0, i1;
        org.apache.tika.io.LookaheadInputStream r0;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.tika.io.LookaheadInputStream: int position>;

        r0.<org.apache.tika.io.LookaheadInputStream: int mark> = $i0;

        return;
    }

    public synchronized void reset()
    {
        int $i0;
        org.apache.tika.io.LookaheadInputStream r0;

        r0 := @this: org.apache.tika.io.LookaheadInputStream;

        $i0 = r0.<org.apache.tika.io.LookaheadInputStream: int mark>;

        r0.<org.apache.tika.io.LookaheadInputStream: int position> = $i0;

        return;
    }
}
