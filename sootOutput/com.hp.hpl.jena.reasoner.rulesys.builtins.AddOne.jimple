public class com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne;

        return "addOne";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne;

        return 2;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, z2;
        com.hp.hpl.jena.graph.Node[] r3;
        com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne: void checkArgs(int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i0, r1);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        z2 = 0;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r3, r1);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.AddOne: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(1, r3, r1);

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isNumeric(com.hp.hpl.jena.graph.Node)>($r4);

        if $z0 == 0 goto label1;

        $i3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: int getIntValue(com.hp.hpl.jena.graph.Node)>($r4);

        $i4 = $i3 + 1;

        $r8 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node makeIntNode(int)>($i4);

        $r9 = r3[1];

        z2 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, $r8);

        goto label2;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isNumeric(com.hp.hpl.jena.graph.Node)>($r5);

        if $z1 == 0 goto label2;

        $i1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: int getIntValue(com.hp.hpl.jena.graph.Node)>($r5);

        $i2 = $i1 - 1;

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node makeIntNode(int)>($i2);

        $r7 = r3[0];

        z2 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, $r6);

     label2:
        return z2;
    }
}
