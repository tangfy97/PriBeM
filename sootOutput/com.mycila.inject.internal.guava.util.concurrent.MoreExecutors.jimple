public final class com.mycila.inject.internal.guava.util.concurrent.MoreExecutors extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l0;
        java.util.concurrent.TimeUnit r7;
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder $r1, $r2, $r4;
        java.util.concurrent.ThreadFactory $r3, $r5;
        java.util.concurrent.ExecutorService $r6;

        r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 = new com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1);

        $r3 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)>($r3);

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r5);

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>($r6, l0, r7);

        return $r6;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        long l0;
        java.util.concurrent.TimeUnit r7;
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder $r1, $r2, $r4;
        java.util.concurrent.ScheduledExecutorService $r6;
        java.util.concurrent.ThreadFactory $r3, $r5;

        r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 = new com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1);

        $r3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)>($r3);

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r5);

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>($r6, l0, r7);

        return $r6;
    }

    public static void addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r4;
        java.lang.Runtime $r0;
        java.lang.Thread $r1;
        long l0;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$1 $r2;
        java.util.concurrent.ExecutorService r3;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        l0 := @parameter1: long;

        r4 := @parameter2: java.util.concurrent.TimeUnit;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r1 = new java.lang.Thread;

        $r2 = new com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$1: void <init>(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>(r3, l0, r4);

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2);

        virtualinvoke $r0.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r1);

        return;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ExecutorService $r2;

        r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>(r0, 120L, $r1);

        return $r2;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        java.util.concurrent.ScheduledThreadPoolExecutor r0;

        r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>(r0, 120L, $r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService sameThreadExecutor()
    {
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$SameThreadExecutorService $r0;

        $r0 = new com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$SameThreadExecutorService;

        specialinvoke $r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$SameThreadExecutorService: void <init>(com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$1)>(null);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService $r2;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r3;
        java.util.concurrent.ExecutorService r0;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService;

        if $z0 == 0 goto label1;

        $r2 = (com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService) r0;

        goto label3;

     label1:
        $z1 = r0 instanceof java.util.concurrent.ScheduledExecutorService;

        if $z1 == 0 goto label2;

        $r3 = new com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        $r2 = $r3;

        $r1 = (java.util.concurrent.ScheduledExecutorService) r0;

        specialinvoke $r3.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>($r1);

        goto label3;

     label2:
        $r4 = new com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        $r2 = $r4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>(r0);

     label3:
        return $r2;
    }

    public static com.mycila.inject.internal.guava.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService r0;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r2;
        com.mycila.inject.internal.guava.util.concurrent.ListeningScheduledExecutorService $r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.util.concurrent.ListeningScheduledExecutorService;

        if $z0 == 0 goto label1;

        $r1 = (com.mycila.inject.internal.guava.util.concurrent.ListeningScheduledExecutorService) r0;

        goto label2;

     label1:
        $r2 = new com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        $r1 = $r2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>(r0);

     label2:
        return $r1;
    }
}
