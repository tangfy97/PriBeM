final class org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder extends java.lang.Object
{
    private java.util.Set characters;
    private boolean blacklistCharacters;

    void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r0;
        java.util.TreeSet $r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters> = $r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters> = 0;

        return;
    }

    void whitelistCharacters(java.util.Collection)
    {
        java.util.Collection r1;
        java.util.Set $r2, $r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        r1 := @parameter0: java.util.Collection;

        $z0 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

     label2:
        return;
    }

    void blacklistCharacters(java.util.Collection)
    {
        java.lang.Integer $r6, $r7, $r9, $r12, $r13, $r15;
        java.util.TreeSet $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r4, $r10;
        java.util.Collection r3;
        java.util.Set r1, $r8, $r14;
        java.lang.Object $r5, $r11;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        r3 := @parameter0: java.util.Collection;

        r1 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters> = $r2;

        $z0 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters>;

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z4 == 0 goto label2;

        $r14 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r15);

     label2:
        goto label1;

     label3:
        goto label8;

     label4:
        $r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label6;

        $r8 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label6:
        goto label5;

     label7:
        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters> = 1;

     label8:
        return;
    }

    void importFrom(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder)
    {
        java.util.Set $r2, $r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r0, r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        r0 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        $z0 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        virtualinvoke r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void blacklistCharacters(java.util.Collection)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        virtualinvoke r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void whitelistCharacters(java.util.Collection)>($r2);

     label2:
        return;
    }

    org.waveprotocol.wave.model.experimental.schema.CharacterValidator createValidator()
    {
        java.util.Set $r1, $r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r0;
        boolean $z0;
        org.waveprotocol.wave.model.experimental.schema.CharacterValidator $r3;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        $z0 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: boolean blacklistCharacters>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.CharacterValidator: org.waveprotocol.wave.model.experimental.schema.CharacterValidator disallowedCharacters(java.util.Set)>($r2);

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: java.util.Set characters>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.CharacterValidator: org.waveprotocol.wave.model.experimental.schema.CharacterValidator allowedCharacters(java.util.Set)>($r1);

     label2:
        return $r3;
    }
}
