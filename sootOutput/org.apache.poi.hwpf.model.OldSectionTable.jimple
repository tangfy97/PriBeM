public final class org.apache.poi.hwpf.model.OldSectionTable extends org.apache.poi.hwpf.model.SectionTable
{

    public void <init>(byte[], int, int, int, org.apache.poi.hwpf.model.TextPieceTable)
    {
        org.apache.poi.hwpf.model.OldSectionTable r0;
        byte[] r1;
        org.apache.poi.hwpf.model.TextPieceTable r2;
        int i0, i1, i2;

        r0 := @this: org.apache.poi.hwpf.model.OldSectionTable;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: org.apache.poi.hwpf.model.TextPieceTable;

        specialinvoke r0.<org.apache.poi.hwpf.model.OldSectionTable: void <init>(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void <init>(byte[], int, int)
    {
        byte[] r2, $r7, r8, $r12;
        org.apache.poi.hwpf.model.PlexOfCps $r14;
        java.util.ArrayList $r4, $r10;
        org.apache.poi.hwpf.model.OldSectionTable r0;
        short $s6;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, i10, $i12, $i13;
        org.apache.poi.hwpf.model.GenericPropertyNode $r5;
        org.apache.poi.hwpf.model.SectionDescriptor $r15;
        org.apache.poi.hwpf.model.PropertyNode$StartComparator $r3;
        org.apache.poi.hwpf.model.SEPX r13, $r16, $r17;

        r0 := @this: org.apache.poi.hwpf.model.OldSectionTable;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.hwpf.model.SectionTable: void <init>()>();

        $r14 = new org.apache.poi.hwpf.model.PlexOfCps;

        specialinvoke $r14.<org.apache.poi.hwpf.model.PlexOfCps: void <init>(byte[],int,int,int)>(r2, i0, i1, 12);

        $i2 = virtualinvoke $r14.<org.apache.poi.hwpf.model.PlexOfCps: int length()>();

        i9 = 0;

     label1:
        if i9 >= $i2 goto label4;

        $r5 = virtualinvoke $r14.<org.apache.poi.hwpf.model.PlexOfCps: org.apache.poi.hwpf.model.GenericPropertyNode getProperty(int)>(i9);

        $r15 = new org.apache.poi.hwpf.model.SectionDescriptor;

        $r7 = virtualinvoke $r5.<org.apache.poi.hwpf.model.GenericPropertyNode: byte[] getBytes()>();

        specialinvoke $r15.<org.apache.poi.hwpf.model.SectionDescriptor: void <init>(byte[],int)>($r7, 0);

        $i3 = virtualinvoke $r15.<org.apache.poi.hwpf.model.SectionDescriptor: int getFc()>();

        $i4 = virtualinvoke $r5.<org.apache.poi.hwpf.model.GenericPropertyNode: int getStart()>();

        $i5 = virtualinvoke $r5.<org.apache.poi.hwpf.model.GenericPropertyNode: int getEnd()>();

        $i12 = (int) -1;

        if $i3 != $i12 goto label2;

        $r16 = new org.apache.poi.hwpf.model.SEPX;

        $r12 = newarray (byte)[0];

        specialinvoke $r16.<org.apache.poi.hwpf.model.SEPX: void <init>(org.apache.poi.hwpf.model.SectionDescriptor,int,int,byte[])>($r15, $i4, $i5, $r12);

        r13 = $r16;

        goto label3;

     label2:
        $s6 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r2, $i3);

        $i13 = (int) $s6;

        $i7 = $i13 + 2;

        r8 = newarray (byte)[$i7];

        i10 = $i3 + 2;

        $i8 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i10, r8, 0, $i8);

        $r17 = new org.apache.poi.hwpf.model.SEPX;

        specialinvoke $r17.<org.apache.poi.hwpf.model.SEPX: void <init>(org.apache.poi.hwpf.model.SectionDescriptor,int,int,byte[])>($r15, $i4, $i5, r8);

        r13 = $r17;

     label3:
        $r10 = r0.<org.apache.poi.hwpf.model.OldSectionTable: java.util.ArrayList _sections>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

        i9 = i9 + 1;

        goto label1;

     label4:
        $r4 = r0.<org.apache.poi.hwpf.model.OldSectionTable: java.util.ArrayList _sections>;

        $r3 = <org.apache.poi.hwpf.model.PropertyNode$StartComparator: org.apache.poi.hwpf.model.PropertyNode$StartComparator instance>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r3);

        return;
    }
}
