public enum class kodkod.ast.operator.Multiplicity extends java.lang.Enum
{
    public static final enum kodkod.ast.operator.Multiplicity NO;
    public static final enum kodkod.ast.operator.Multiplicity LONE;
    public static final enum kodkod.ast.operator.Multiplicity ONE;
    public static final enum kodkod.ast.operator.Multiplicity SOME;
    public static final enum kodkod.ast.operator.Multiplicity SET;
    private static final kodkod.ast.operator.Multiplicity[] ENUM$VALUES;

    static void <clinit>()
    {
        kodkod.ast.operator.Multiplicity $r6, $r7, $r8, $r9, $r10;
        kodkod.ast.operator.Multiplicity[] $r5;
        kodkod.ast.operator.Multiplicity$1 $r0;
        kodkod.ast.operator.Multiplicity$2 $r1;
        kodkod.ast.operator.Multiplicity$3 $r2;
        kodkod.ast.operator.Multiplicity$4 $r3;
        kodkod.ast.operator.Multiplicity$5 $r4;

        $r0 = new kodkod.ast.operator.Multiplicity$1;

        specialinvoke $r0.<kodkod.ast.operator.Multiplicity$1: void <init>(java.lang.String,int)>("NO", 0);

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity NO> = $r0;

        $r1 = new kodkod.ast.operator.Multiplicity$2;

        specialinvoke $r1.<kodkod.ast.operator.Multiplicity$2: void <init>(java.lang.String,int)>("LONE", 1);

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE> = $r1;

        $r2 = new kodkod.ast.operator.Multiplicity$3;

        specialinvoke $r2.<kodkod.ast.operator.Multiplicity$3: void <init>(java.lang.String,int)>("ONE", 2);

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE> = $r2;

        $r3 = new kodkod.ast.operator.Multiplicity$4;

        specialinvoke $r3.<kodkod.ast.operator.Multiplicity$4: void <init>(java.lang.String,int)>("SOME", 3);

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SOME> = $r3;

        $r4 = new kodkod.ast.operator.Multiplicity$5;

        specialinvoke $r4.<kodkod.ast.operator.Multiplicity$5: void <init>(java.lang.String,int)>("SET", 4);

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET> = $r4;

        $r5 = newarray (kodkod.ast.operator.Multiplicity)[5];

        $r6 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity NO>;

        $r5[0] = $r6;

        $r7 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        $r5[1] = $r7;

        $r8 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        $r5[2] = $r8;

        $r9 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SOME>;

        $r5[3] = $r9;

        $r10 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET>;

        $r5[4] = $r10;

        <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity[] ENUM$VALUES> = $r5;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        kodkod.ast.operator.Multiplicity r0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.Multiplicity;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static kodkod.ast.operator.Multiplicity[] values()
    {
        int $i0;
        kodkod.ast.operator.Multiplicity[] $r0, $r1;

        $r0 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (kodkod.ast.operator.Multiplicity)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static kodkod.ast.operator.Multiplicity valueOf(java.lang.String)
    {
        kodkod.ast.operator.Multiplicity $r2;
        kodkod.ast.operator.Multiplicity[] $r0;
        java.lang.IllegalArgumentException $r5;
        int i0, $i2;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity[] ENUM$VALUES>;

        i0 = lengthof $r0;

        goto label2;

     label1:
        $r2 = $r0[i0];

        $r3 = virtualinvoke $r2.<kodkod.ast.operator.Multiplicity: java.lang.String name()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    void <init>(java.lang.String, int, kodkod.ast.operator.Multiplicity)
    {
        kodkod.ast.operator.Multiplicity r0, r2;
        int i0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.Multiplicity;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: kodkod.ast.operator.Multiplicity;

        specialinvoke r0.<kodkod.ast.operator.Multiplicity: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }
}
