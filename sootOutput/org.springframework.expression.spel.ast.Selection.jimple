public class org.springframework.expression.spel.ast.Selection extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    public static final int ALL;
    public static final int FIRST;
    public static final int LAST;
    private final int variant;
    private final boolean nullSafe;

    public void <init>(boolean, int, int, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        int i0, i1;
        org.springframework.expression.spel.ast.Selection r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.ast.Selection;

        z0 := @parameter0: boolean;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.Selection: boolean nullSafe> = z0;

        r0.<org.springframework.expression.spel.ast.Selection: int variant> = i1;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Integer $r15;
        java.util.Map r75;
        org.springframework.expression.spel.ast.Selection r3;
        java.util.Set $r49;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r4;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r5;
        org.springframework.expression.spel.SpelEvaluationException $r18, $r39, $r44, $r56;
        java.lang.Throwable $r73, $r74;
        java.lang.Object[] $r7, $r19, $r29, $r40, $r45, $r57;
        java.util.ArrayList $r6, $r9;
        java.lang.String $r43;
        org.springframework.expression.TypedValue $r1, $r12, $r16, $r22, $r30, $r32, $r34, $r38, $r47, $r52, $r54, $r64, $r65, $r69, $r71;
        org.springframework.expression.spel.SpelMessage $r20, $r41, $r46, $r58;
        java.util.Map$Entry r77;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.Collection $r78;
        java.util.List $r8;
        java.util.HashMap $r48, $r67;
        org.springframework.core.convert.TypeDescriptor $r13, $r14, $r23, $r24, $r25, $r31, $r33, $r36, $r37, $r53, $r66, $r70, $r72;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        java.lang.Boolean $r21, $r59;
        java.util.Iterator $r10, $r50;
        java.lang.Object $r2, $r11, $r17, $r28, $r35, $r51, $r55, $r60, $r61, $r62, $r63, $r68, r76;
        java.lang.Class $r26, $r27, $r42;

        r3 := @this: org.springframework.expression.spel.ast.Selection;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r4 = r3.<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        r5 = $r4[0];

        $z0 = $r2 instanceof java.util.Map;

        if $z0 == 0 goto label12;

        r75 = (java.util.Map) $r2;

        $r48 = new java.util.HashMap;

        specialinvoke $r48.<java.util.HashMap: void <init>()>();

        r76 = null;

        $r49 = interfaceinvoke r75.<java.util.Map: java.util.Set entrySet()>();

        $r50 = interfaceinvoke $r49.<java.util.Set: java.util.Iterator iterator()>();

        goto label08;

     label01:
        $r51 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r77 = (java.util.Map$Entry) $r51;

     label02:
        $r52 = new org.springframework.expression.TypedValue;

        $r53 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        specialinvoke $r52.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r77, $r53);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r52);

        $r54 = virtualinvoke r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r55 = virtualinvoke $r54.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z9 = $r55 instanceof java.lang.Boolean;

        if $z9 == 0 goto label05;

        $r59 = (java.lang.Boolean) $r55;

        $z10 = virtualinvoke $r59.<java.lang.Boolean: boolean booleanValue()>();

        if $z10 == 0 goto label07;

        $i13 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i13 != 1 goto label04;

        $r62 = interfaceinvoke r77.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r63 = interfaceinvoke r77.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r64 = new org.springframework.expression.TypedValue;

        specialinvoke $r64.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r48);

     label03:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        return $r64;

     label04:
        $r60 = interfaceinvoke r77.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r61 = interfaceinvoke r77.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r61);

        r76 = interfaceinvoke r77.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label07;

     label05:
        $r56 = new org.springframework.expression.spel.SpelEvaluationException;

        $i12 = virtualinvoke r5.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r58 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN>;

        $r57 = newarray (java.lang.Object)[0];

        specialinvoke $r56.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i12, $r58, $r57);

        throw $r56;

     label06:
        $r74 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r74;

     label07:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

     label08:
        $z11 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z11 != 0 goto label01;

        $i14 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i14 == 1 goto label09;

        $i17 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i17 != 2 goto label10;

     label09:
        $i15 = interfaceinvoke $r48.<java.util.Map: int size()>();

        if $i15 != 0 goto label10;

        $r71 = new org.springframework.expression.TypedValue;

        $r72 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        specialinvoke $r71.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(null, $r72);

        return $r71;

     label10:
        $i16 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i16 != 2 goto label11;

        $r67 = new java.util.HashMap;

        specialinvoke $r67.<java.util.HashMap: void <init>()>();

        $r68 = interfaceinvoke $r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r76);

        interfaceinvoke $r67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r76, $r68);

        $r69 = new org.springframework.expression.TypedValue;

        $r70 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/Map;");

        specialinvoke $r69.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r67, $r70);

        return $r69;

     label11:
        $r65 = new org.springframework.expression.TypedValue;

        $r66 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        specialinvoke $r65.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r48, $r66);

        return $r65;

     label12:
        $z1 = $r2 instanceof java.util.Collection;

        if $z1 != 0 goto label13;

        $z7 = staticinvoke <org.springframework.util.ObjectUtils: boolean isArray(java.lang.Object)>($r2);

        if $z7 == 0 goto label29;

     label13:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $z2 = $r2 instanceof java.util.Collection;

        if $z2 == 0 goto label14;

        $r78 = (java.util.Collection) $r2;

        goto label15;

     label14:
        $r7 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>($r2);

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r78 = (java.util.Collection) $r8;

     label15:
        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r78);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i18 = 0;

        $r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label24;

     label16:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label17:
        $r12 = new org.springframework.expression.TypedValue;

        $r13 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r14 = virtualinvoke $r13.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        specialinvoke $r12.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r11, $r14);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r12);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void enterScope(java.lang.String,java.lang.Object)>("index", $r15);

        $r16 = virtualinvoke r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r17 = virtualinvoke $r16.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z4 = $r17 instanceof java.lang.Boolean;

        if $z4 == 0 goto label20;

        $r21 = (java.lang.Boolean) $r17;

        $z5 = virtualinvoke $r21.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label21;

        $i1 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i1 != 1 goto label19;

        $r22 = new org.springframework.expression.TypedValue;

        $r23 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r24 = virtualinvoke $r23.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        specialinvoke $r22.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r11, $r24);

     label18:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void exitScope()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        return $r22;

     label19:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label21;

     label20:
        $r18 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r5.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r20 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN>;

        $r19 = newarray (java.lang.Object)[0];

        specialinvoke $r18.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r20, $r19);

        throw $r18;

     label21:
        i18 = i18 + 1;

        goto label23;

     label22:
        $r73 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void exitScope()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r73;

     label23:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void exitScope()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

     label24:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label16;

        $i2 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i2 == 1 goto label25;

        $i9 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i9 != 2 goto label26;

     label25:
        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i3 != 0 goto label26;

        $r38 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r38;

     label26:
        $i4 = r3.<org.springframework.expression.spel.ast.Selection: int variant>;

        if $i4 != 2 goto label27;

        $r34 = new org.springframework.expression.TypedValue;

        $i7 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r35 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i8);

        $r36 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r37 = virtualinvoke $r36.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        specialinvoke $r34.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r35, $r37);

        return $r34;

     label27:
        $z6 = $r2 instanceof java.util.Collection;

        if $z6 == 0 goto label28;

        $r32 = new org.springframework.expression.TypedValue;

        $r33 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        specialinvoke $r32.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r9, $r33);

        return $r32;

     label28:
        $r25 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r26 = virtualinvoke $r25.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $r27 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolvePrimitiveIfNecessary(java.lang.Class)>($r26);

        $i5 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r28 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r27, $i5);

        $r29 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray()>();

        $i6 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r29, 0, $r28, 0, $i6);

        $r30 = new org.springframework.expression.TypedValue;

        $r31 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        specialinvoke $r30.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r28, $r31);

        return $r30;

     label29:
        if $r2 != null goto label31;

        $z8 = r3.<org.springframework.expression.spel.ast.Selection: boolean nullSafe>;

        if $z8 == 0 goto label30;

        $r47 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r47;

     label30:
        $r44 = new org.springframework.expression.spel.SpelEvaluationException;

        $i11 = virtualinvoke r3.<org.springframework.expression.spel.ast.Selection: int getStartPosition()>();

        $r46 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_TYPE_FOR_SELECTION>;

        $r45 = newarray (java.lang.Object)[1];

        $r45[0] = "null";

        specialinvoke $r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i11, $r46, $r45);

        throw $r44;

     label31:
        $r39 = new org.springframework.expression.spel.SpelEvaluationException;

        $i10 = virtualinvoke r3.<org.springframework.expression.spel.ast.Selection: int getStartPosition()>();

        $r41 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_TYPE_FOR_SELECTION>;

        $r40 = newarray (java.lang.Object)[1];

        $r42 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r40[0] = $r43;

        specialinvoke $r39.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i10, $r41, $r40);

        throw $r39;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label06 with label06;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label22 with label22;
    }

    public java.lang.String toStringAST()
    {
        int $i0;
        java.lang.StringBuilder $r0, $r4, $r5;
        org.springframework.expression.spel.ast.Selection r1;
        java.lang.String $r3, $r6;
        org.springframework.expression.spel.SpelNode $r2;

        r1 := @this: org.springframework.expression.spel.ast.Selection;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.springframework.expression.spel.ast.Selection: int variant>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?[");

        goto label4;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^[");

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$[");

     label4:
        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <org.springframework.expression.spel.ast.Selection: int LAST> = 2;

        <org.springframework.expression.spel.ast.Selection: int FIRST> = 1;

        <org.springframework.expression.spel.ast.Selection: int ALL> = 0;

        return;
    }
}
