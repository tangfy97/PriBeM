public class org.apache.commons.configuration.CombinedConfiguration extends org.apache.commons.configuration.HierarchicalConfiguration implements org.apache.commons.configuration.event.ConfigurationListener, java.lang.Cloneable
{
    public static final int EVENT_COMBINED_INVALIDATE;
    private static final long serialVersionUID;
    private static final org.apache.commons.configuration.tree.DefaultExpressionEngine AT_ENGINE;
    private static final org.apache.commons.configuration.tree.NodeCombiner DEFAULT_COMBINER;
    private static final java.lang.String PROP_RELOAD_CHECK;
    private org.apache.commons.configuration.tree.NodeCombiner nodeCombiner;
    private volatile org.apache.commons.configuration.tree.ConfigurationNode combinedRoot;
    private java.util.List configurations;
    private java.util.Map namedConfigurations;
    private org.apache.commons.configuration.tree.ExpressionEngine conversionExpressionEngine;
    private boolean forceReloadCheck;

    public void <init>(org.apache.commons.configuration.tree.NodeCombiner)
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.tree.NodeCombiner r1, $r2;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: org.apache.commons.configuration.tree.NodeCombiner;

        specialinvoke r0.<org.apache.commons.configuration.HierarchicalConfiguration: void <init>()>();

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = <org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.NodeCombiner DEFAULT_COMBINER>;

     label2:
        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void setNodeCombiner(org.apache.commons.configuration.tree.NodeCombiner)>($r2);

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void clear()>();

        return;
    }

    public void <init>()
    {
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        specialinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void <init>(org.apache.commons.configuration.tree.NodeCombiner)>(null);

        return;
    }

    public org.apache.commons.configuration.tree.NodeCombiner getNodeCombiner()
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.tree.NodeCombiner $r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.NodeCombiner nodeCombiner>;

        return $r1;
    }

    public void setNodeCombiner(org.apache.commons.configuration.tree.NodeCombiner)
    {
        org.apache.commons.configuration.CombinedConfiguration r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.configuration.tree.NodeCombiner r0;

        r1 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.tree.NodeCombiner;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Node combiner must not be null!");

        throw $r2;

     label1:
        r1.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.NodeCombiner nodeCombiner> = r0;

        virtualinvoke r1.<org.apache.commons.configuration.CombinedConfiguration: void invalidate()>();

        return;
    }

    public boolean isForceReloadCheck()
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $z0 = r0.<org.apache.commons.configuration.CombinedConfiguration: boolean forceReloadCheck>;

        return $z0;
    }

    public void setForceReloadCheck(boolean)
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        boolean z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.configuration.CombinedConfiguration: boolean forceReloadCheck> = z0;

        return;
    }

    public org.apache.commons.configuration.tree.ExpressionEngine getConversionExpressionEngine()
    {
        org.apache.commons.configuration.tree.ExpressionEngine $r1;
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ExpressionEngine conversionExpressionEngine>;

        return $r1;
    }

    public void setConversionExpressionEngine(org.apache.commons.configuration.tree.ExpressionEngine)
    {
        org.apache.commons.configuration.tree.ExpressionEngine r1;
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: org.apache.commons.configuration.tree.ExpressionEngine;

        r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ExpressionEngine conversionExpressionEngine> = r1;

        return;
    }

    public void addConfiguration(org.apache.commons.configuration.AbstractConfiguration, java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.CombinedConfiguration$ConfigData $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r12;
        java.util.Map $r6, $r7;
        java.lang.String r1, r4, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r14;
        org.apache.commons.configuration.ConfigurationRuntimeException $r8;
        java.util.List $r5;
        org.apache.commons.configuration.CombinedConfiguration r3;

        r3 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Added configuration must not be null!");

        throw $r14;

     label1:
        if r1 == null goto label2;

        $r7 = r3.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("A configuration with the name \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' already exists in this combined configuration!");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        $r2 = new org.apache.commons.configuration.CombinedConfiguration$ConfigData;

        specialinvoke $r2.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: void <init>(org.apache.commons.configuration.CombinedConfiguration,org.apache.commons.configuration.AbstractConfiguration,java.lang.String,java.lang.String)>(r3, r0, r1, r4);

        $r5 = r3.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        if r1 == null goto label3;

        $r6 = r3.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

     label3:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void addConfigurationListener(org.apache.commons.configuration.event.ConfigurationListener)>(r3);

        virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration: void invalidate()>();

        return;
    }

    public void addConfiguration(org.apache.commons.configuration.AbstractConfiguration, java.lang.String)
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.AbstractConfiguration r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: org.apache.commons.configuration.AbstractConfiguration;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void addConfiguration(org.apache.commons.configuration.AbstractConfiguration,java.lang.String,java.lang.String)>(r1, r2, null);

        return;
    }

    public void addConfiguration(org.apache.commons.configuration.AbstractConfiguration)
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.AbstractConfiguration r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: org.apache.commons.configuration.AbstractConfiguration;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void addConfiguration(org.apache.commons.configuration.AbstractConfiguration,java.lang.String,java.lang.String)>(r1, null, null);

        return;
    }

    public int getNumberOfConfigurations()
    {
        int $i0;
        java.util.List $r1;
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.commons.configuration.Configuration getConfiguration(int)
    {
        java.util.List $r1;
        org.apache.commons.configuration.AbstractConfiguration $r4;
        int i0;
        java.lang.Object $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData r3;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        return $r4;
    }

    public org.apache.commons.configuration.Configuration getConfiguration(java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.configuration.Configuration) $r3;

        return $r4;
    }

    public boolean removeConfiguration(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r5;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData $r3;
        java.util.List $r1;
        org.apache.commons.configuration.AbstractConfiguration $r4;
        int $i0, i1;
        java.lang.Object $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r5 := @parameter0: org.apache.commons.configuration.Configuration;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: int getNumberOfConfigurations()>();

        if i1 >= $i0 goto label3;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r2;

        $r4 = virtualinvoke $r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        if $r4 != r5 goto label2;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.Configuration removeConfigurationAt(int)>(i1);

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public org.apache.commons.configuration.Configuration removeConfigurationAt(int)
    {
        org.apache.commons.configuration.CombinedConfiguration$ConfigData r3;
        java.util.List $r1;
        org.apache.commons.configuration.AbstractConfiguration $r5, $r6;
        java.util.Map $r7;
        int i0;
        java.lang.Object $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.lang.String $r4, $r8;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        r3 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: java.lang.String getName()>();

        if $r4 == null goto label1;

        $r7 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations>;

        $r8 = virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: java.lang.String getName()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

     label1:
        $r5 = virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        virtualinvoke $r5.<org.apache.commons.configuration.AbstractConfiguration: boolean removeConfigurationListener(org.apache.commons.configuration.event.ConfigurationListener)>(r0);

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void invalidate()>();

        $r6 = virtualinvoke r3.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        return $r6;
    }

    public org.apache.commons.configuration.Configuration removeConfiguration(java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.Configuration getConfiguration(java.lang.String)>(r1);

        if $r2 == null goto label1;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: boolean removeConfiguration(org.apache.commons.configuration.Configuration)>($r2);

     label1:
        return $r2;
    }

    public java.util.Set getConfigurationNames()
    {
        java.util.Set $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public void invalidate()
    {
        org.apache.commons.configuration.CombinedConfiguration r0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ConfigurationNode combinedRoot> = null;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(40, null, null, 0);

        return;
    }

    public void configurationChanged(org.apache.commons.configuration.event.ConfigurationEvent)
    {
        org.apache.commons.configuration.event.ConfigurationEvent r0;
        org.apache.commons.configuration.CombinedConfiguration r1;
        boolean $z0;

        r1 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.event.ConfigurationEvent;

        $z0 = virtualinvoke r0.<org.apache.commons.configuration.event.ConfigurationEvent: boolean isBeforeUpdate()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.apache.commons.configuration.CombinedConfiguration: void invalidate()>();

     label1:
        return;
    }

    public org.apache.commons.configuration.tree.ConfigurationNode getRootNode()
    {
        org.apache.commons.configuration.CombinedConfiguration r0;
        org.apache.commons.configuration.tree.ConfigurationNode $r1, $r2, $r3;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ConfigurationNode combinedRoot>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ConfigurationNode constructCombinedNode()>();

        r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ConfigurationNode combinedRoot> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.ConfigurationNode combinedRoot>;

        return $r2;
    }

    public void clear()
    {
        java.util.HashMap $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(4, null, null, 1);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.Map namedConfigurations> = $r2;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(4, null, null, 0);

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void invalidate()>();

        return;
    }

    public java.lang.Object clone()
    {
        org.apache.commons.configuration.Configuration $r9;
        java.util.Iterator $r4;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData r7;
        org.apache.commons.configuration.tree.DefaultConfigurationNode $r5;
        java.util.List $r3;
        org.apache.commons.configuration.AbstractConfiguration $r8, $r10;
        java.lang.Object $r1, $r6;
        org.apache.commons.configuration.CombinedConfiguration r0, r2;
        java.lang.String $r11, $r12;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = specialinvoke r0.<org.apache.commons.configuration.HierarchicalConfiguration: java.lang.Object clone()>();

        r2 = (org.apache.commons.configuration.CombinedConfiguration) $r1;

        virtualinvoke r2.<org.apache.commons.configuration.CombinedConfiguration: void clear()>();

        $r3 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        $r9 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.configuration.Configuration cloneConfiguration(org.apache.commons.configuration.Configuration)>($r8);

        $r10 = (org.apache.commons.configuration.AbstractConfiguration) $r9;

        $r11 = virtualinvoke r7.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: java.lang.String getName()>();

        $r12 = virtualinvoke r7.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: java.lang.String getAt()>();

        virtualinvoke r2.<org.apache.commons.configuration.CombinedConfiguration: void addConfiguration(org.apache.commons.configuration.AbstractConfiguration,java.lang.String,java.lang.String)>($r10, $r11, $r12);

        goto label1;

     label2:
        $r5 = new org.apache.commons.configuration.tree.DefaultConfigurationNode;

        specialinvoke $r5.<org.apache.commons.configuration.tree.DefaultConfigurationNode: void <init>()>();

        virtualinvoke r2.<org.apache.commons.configuration.CombinedConfiguration: void setRootNode(org.apache.commons.configuration.tree.ConfigurationNode)>($r5);

        return r2;
    }

    public org.apache.commons.configuration.Configuration getSource(java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r6, $r9;
        java.lang.StringBuffer $r11, $r12, $r13, $r14;
        java.lang.String r0, $r15;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.lang.IllegalArgumentException $r10, $r16;
        org.apache.commons.configuration.tree.ConfigurationNode $r5, $r8;
        java.util.List $r2;
        java.lang.Object $r4, $r7;
        org.apache.commons.configuration.CombinedConfiguration r1;

        r1 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key must not be null!");

        throw $r16;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.configuration.CombinedConfiguration: java.util.List fetchNodeList(java.lang.String)>(r0);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r4;

        $r6 = specialinvoke r1.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.Configuration findSourceConfiguration(org.apache.commons.configuration.tree.ConfigurationNode)>($r5);

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7;

        $r9 = specialinvoke r1.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.Configuration findSourceConfiguration(org.apache.commons.configuration.tree.ConfigurationNode)>($r8);

        if $r9 == $r6 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The key ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is defined by multiple sources!");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label4:
        goto label3;

     label5:
        return $r6;
    }

    protected java.util.List fetchNodeList(java.lang.String)
    {
        java.util.List $r2;
        org.apache.commons.configuration.CombinedConfiguration r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: boolean isForceReloadCheck()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: void performReloadCheck()>();

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.configuration.HierarchicalConfiguration: java.util.List fetchNodeList(java.lang.String)>(r1);

        return $r2;
    }

    protected void performReloadCheck()
    {
        java.util.Iterator $r2;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData $r4;
        java.lang.Exception $r6;
        java.util.List $r1;
        org.apache.commons.configuration.AbstractConfiguration $r5;
        java.lang.Object $r3;
        org.apache.commons.configuration.CombinedConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        virtualinvoke $r5.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object getProperty(java.lang.String)>("CombinedConfigurationReloadCheck");

     label3:
        goto label1;

     label4:
        $r6 := @caughtexception;

        goto label1;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private org.apache.commons.configuration.tree.ConfigurationNode constructCombinedNode()
    {
        java.util.Iterator $r2;
        org.apache.commons.configuration.tree.NodeCombiner $r5;
        org.apache.commons.configuration.tree.ViewNode $r9;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData $r4, $r7;
        org.apache.commons.configuration.tree.ConfigurationNode $r8, r10;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r3, $r6;
        org.apache.commons.configuration.CombinedConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.CombinedConfiguration;

        $i0 = virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: int getNumberOfConfigurations()>();

        if $i0 >= 1 goto label1;

        $r9 = new org.apache.commons.configuration.tree.ViewNode;

        specialinvoke $r9.<org.apache.commons.configuration.tree.ViewNode: void <init>()>();

        return $r9;

     label1:
        $r1 = r0.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r3;

        r10 = virtualinvoke $r4.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.tree.ConfigurationNode getTransformedRoot()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.NodeCombiner getNodeCombiner()>();

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r6;

        $r8 = virtualinvoke $r7.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.tree.ConfigurationNode getTransformedRoot()>();

        r10 = virtualinvoke $r5.<org.apache.commons.configuration.tree.NodeCombiner: org.apache.commons.configuration.tree.ConfigurationNode combine(org.apache.commons.configuration.tree.ConfigurationNode,org.apache.commons.configuration.tree.ConfigurationNode)>(r10, $r8);

        goto label2;

     label3:
        return r10;
    }

    private org.apache.commons.configuration.Configuration findSourceConfiguration(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        java.util.Iterator $r3;
        org.apache.commons.configuration.CombinedConfiguration$ConfigData r5;
        org.apache.commons.configuration.tree.ConfigurationNode r0, $r6, r8, r9;
        java.util.List $r2;
        org.apache.commons.configuration.AbstractConfiguration $r7;
        java.lang.Object $r4;
        org.apache.commons.configuration.CombinedConfiguration r1;
        boolean $z0;

        r1 := @this: org.apache.commons.configuration.CombinedConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        r8 = null;

        r9 = r0;

     label1:
        if r9 == null goto label2;

        r8 = r9;

        r9 = interfaceinvoke r9.<org.apache.commons.configuration.tree.ConfigurationNode: org.apache.commons.configuration.tree.ConfigurationNode getParentNode()>();

        goto label1;

     label2:
        $r2 = r1.<org.apache.commons.configuration.CombinedConfiguration: java.util.List configurations>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.configuration.CombinedConfiguration$ConfigData) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>();

        if r8 != $r6 goto label4;

        $r7 = virtualinvoke r5.<org.apache.commons.configuration.CombinedConfiguration$ConfigData: org.apache.commons.configuration.AbstractConfiguration getConfiguration()>();

        return $r7;

     label4:
        goto label3;

     label5:
        return r1;
    }

    static org.apache.commons.configuration.tree.DefaultExpressionEngine access$000()
    {
        org.apache.commons.configuration.tree.DefaultExpressionEngine $r0;

        $r0 = <org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.DefaultExpressionEngine AT_ENGINE>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.configuration.tree.UnionCombiner $r1;
        org.apache.commons.configuration.tree.DefaultExpressionEngine $r0;

        <org.apache.commons.configuration.CombinedConfiguration: java.lang.String PROP_RELOAD_CHECK> = "CombinedConfigurationReloadCheck";

        <org.apache.commons.configuration.CombinedConfiguration: long serialVersionUID> = 8338574525528692307L;

        <org.apache.commons.configuration.CombinedConfiguration: int EVENT_COMBINED_INVALIDATE> = 40;

        $r0 = new org.apache.commons.configuration.tree.DefaultExpressionEngine;

        specialinvoke $r0.<org.apache.commons.configuration.tree.DefaultExpressionEngine: void <init>()>();

        <org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.DefaultExpressionEngine AT_ENGINE> = $r0;

        $r1 = new org.apache.commons.configuration.tree.UnionCombiner;

        specialinvoke $r1.<org.apache.commons.configuration.tree.UnionCombiner: void <init>()>();

        <org.apache.commons.configuration.CombinedConfiguration: org.apache.commons.configuration.tree.NodeCombiner DEFAULT_COMBINER> = $r1;

        return;
    }
}
