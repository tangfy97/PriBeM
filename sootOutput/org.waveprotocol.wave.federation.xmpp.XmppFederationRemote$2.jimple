class org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.SuccessFailCallback
{
    final org.xmpp.packet.IQ val$submitIq;
    final org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback;
    final org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener val$listener;
    final org.waveprotocol.wave.model.id.WaveletName val$waveletName;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r5;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 r0;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r3;
        org.xmpp.packet.IQ r2;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r4;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r2 := @parameter1: org.xmpp.packet.IQ;

        r3 := @parameter2: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r4 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        r5 := @parameter4: org.waveprotocol.wave.model.id.WaveletName;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.xmpp.packet.IQ val$submitIq> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener val$listener> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.model.id.WaveletName val$waveletName> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r5;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r4;
        java.lang.String r0;
        org.xmpp.packet.IQ $r2, $r6;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote $r3;

        r1 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.xmpp.packet.IQ val$submitIq>;

        virtualinvoke $r2.<org.xmpp.packet.IQ: void setTo(java.lang.String)>(r0);

        $r3 = r1.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppManager access$100(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote)>($r3);

        $r6 = r1.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.xmpp.packet.IQ val$submitIq>;

        $r5 = r1.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback>;

        virtualinvoke $r4.<org.waveprotocol.wave.federation.xmpp.XmppManager: void send(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.xmpp.PacketCallback,int)>($r6, $r5, 30);

        return;
    }

    public void onFailure(java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName $r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r12;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 r0;
        java.lang.StringBuilder $r1, $r3, $r7, $r8, $r10;
        java.lang.String $r6, r9, $r11;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        r9 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener val$listener>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such wave server ");

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: org.waveprotocol.wave.model.id.WaveletName val$waveletName>;

        $r5 = $r4.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r11);

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r12);

        return;
    }

    public volatile void onFailure(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: void onFailure(java.lang.String)>($r2);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: void onSuccess(java.lang.String)>($r2);

        return;
    }
}
