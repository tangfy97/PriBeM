public class org.tukaani.xz.common.DecoderUtil extends org.tukaani.xz.common.Util
{

    public void <init>()
    {
        org.tukaani.xz.common.DecoderUtil r0;

        r0 := @this: org.tukaani.xz.common.DecoderUtil;

        specialinvoke r0.<org.tukaani.xz.common.Util: void <init>()>();

        return;
    }

    public static boolean isCRC32Valid(byte[], int, int, int)
    {
        byte[] r1;
        long $l2, $l4;
        byte $b8, $b9;
        int i0, i1, $i3, $i5, i6, $i7, i10, $i11, $i12;
        java.util.zip.CRC32 $r2;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 := @parameter3: int;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r2.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i1);

        $l2 = virtualinvoke $r2.<java.util.zip.CRC32: long getValue()>();

        i10 = 0;

     label1:
        if i10 >= 4 goto label3;

        $i3 = i10 * 8;

        $l4 = $l2 >>> $i3;

        $i5 = (int) $l4;

        $b9 = (byte) $i5;

        $i7 = i6 + i10;

        $b8 = r1[$i7];

        $i11 = (int) $b9;

        $i12 = (int) $b8;

        if $i11 == $i12 goto label2;

        return 0;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static org.tukaani.xz.common.StreamFlags decodeStreamHeader(byte[]) throws java.io.IOException
    {
        byte[] $r0, r1, $r2, $r3, $r4, $r7;
        byte $b5, $b6;
        int $i0, $i1, $i2, $i3, $i4, i7, $i8, $i9;
        boolean $z0;
        org.tukaani.xz.common.StreamFlags $r5;
        org.tukaani.xz.XZFormatException $r11;
        org.tukaani.xz.UnsupportedOptionsException $r9, $r13;
        org.tukaani.xz.CorruptedInputException $r12;

        r1 := @parameter0: byte[];

        i7 = 0;

     label1:
        $r0 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i0 = lengthof $r0;

        if i7 >= $i0 goto label3;

        $b6 = r1[i7];

        $r7 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $b5 = $r7[i7];

        $i8 = (int) $b6;

        $i9 = (int) $b5;

        if $i8 == $i9 goto label2;

        $r11 = new org.tukaani.xz.XZFormatException;

        specialinvoke $r11.<org.tukaani.xz.XZFormatException: void <init>()>();

        throw $r11;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r2 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i3 = lengthof $r2;

        $r3 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i1 = lengthof $r3;

        $i2 = $i1 + 2;

        $z0 = staticinvoke <org.tukaani.xz.common.DecoderUtil: boolean isCRC32Valid(byte[],int,int,int)>(r1, $i3, 2, $i2);

        if $z0 != 0 goto label4;

        $r12 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r12.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Stream Header is corrupt");

        throw $r12;

     label4:
        $r4 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i4 = lengthof $r4;

        $r5 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamFlags(byte[],int)>(r1, $i4);

     label5:
        return $r5;

     label6:
        $r9 := @caughtexception;

        $r13 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r13.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported options in XZ Stream Header");

        throw $r13;

        catch org.tukaani.xz.UnsupportedOptionsException from label4 to label5 with label6;
    }

    public static org.tukaani.xz.common.StreamFlags decodeStreamFooter(byte[]) throws java.io.IOException
    {
        byte[] r0, $r1, $r3;
        long $l4, $l5, $l6, $l12, $l13, $l14;
        short $s10, $s20;
        byte $b0, $b1, $b2, $b3, $b8;
        int $i7, $i9, $i11, i15, $i16, $i17, $i18, $i19, $i21;
        boolean $z0;
        org.tukaani.xz.common.StreamFlags $r4;
        org.tukaani.xz.UnsupportedOptionsException $r6, $r10;
        org.tukaani.xz.CorruptedInputException $r8, $r9;

        r0 := @parameter0: byte[];

        $b1 = r0[10];

        $r1 = <org.tukaani.xz.XZ: byte[] FOOTER_MAGIC>;

        $b0 = $r1[0];

        $i16 = (int) $b1;

        $i17 = (int) $b0;

        if $i16 != $i17 goto label1;

        $b3 = r0[11];

        $r3 = <org.tukaani.xz.XZ: byte[] FOOTER_MAGIC>;

        $b2 = $r3[1];

        $i18 = (int) $b3;

        $i19 = (int) $b2;

        if $i18 == $i19 goto label2;

     label1:
        $r8 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r8.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Stream Footer is corrupt");

        throw $r8;

     label2:
        $z0 = staticinvoke <org.tukaani.xz.common.DecoderUtil: boolean isCRC32Valid(byte[],int,int,int)>(r0, 4, 6, 0);

        if $z0 != 0 goto label3;

        $r9 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r9.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Stream Footer is corrupt");

        throw $r9;

     label3:
        $r4 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamFlags(byte[],int)>(r0, 8);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r10 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r10.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported options in XZ Stream Footer");

        throw $r10;

     label6:
        $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize> = 0L;

        i15 = 0;

     label7:
        if i15 >= 4 goto label8;

        $l13 = $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize>;

        $i7 = i15 + 4;

        $b8 = r0[$i7];

        $s20 = (short) $b8;

        $s10 = $s20 & 255;

        $i9 = i15 * 8;

        $i21 = (int) $s10;

        $i11 = $i21 << $i9;

        $l12 = (long) $i11;

        $l14 = $l13 | $l12;

        $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize> = $l14;

        i15 = i15 + 1;

        goto label7;

     label8:
        $l4 = $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize>;

        $l5 = $l4 + 1L;

        $l6 = $l5 * 4L;

        $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize> = $l6;

        return $r4;

        catch org.tukaani.xz.UnsupportedOptionsException from label3 to label4 with label5;
    }

    private static org.tukaani.xz.common.StreamFlags decodeStreamFlags(byte[], int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        byte[] r0;
        org.tukaani.xz.common.StreamFlags $r4;
        short $s4, $s7;
        org.tukaani.xz.UnsupportedOptionsException $r3;
        byte $b1, $b3, $b6;
        int i0, $i2, $i5, $i8, $i9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        if $b1 != 0 goto label1;

        $i2 = i0 + 1;

        $b3 = r0[$i2];

        $s7 = (short) $b3;

        $s4 = $s7 & 255;

        $i8 = (int) $s4;

        if $i8 < 16 goto label2;

     label1:
        $r3 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r3.<org.tukaani.xz.UnsupportedOptionsException: void <init>()>();

        throw $r3;

     label2:
        $r4 = new org.tukaani.xz.common.StreamFlags;

        specialinvoke $r4.<org.tukaani.xz.common.StreamFlags: void <init>()>();

        $i5 = i0 + 1;

        $b6 = r0[$i5];

        $i9 = (int) $b6;

        $r4.<org.tukaani.xz.common.StreamFlags: int checkType> = $i9;

        return $r4;
    }

    public static boolean areStreamFlagsEqual(org.tukaani.xz.common.StreamFlags, org.tukaani.xz.common.StreamFlags)
    {
        org.tukaani.xz.common.StreamFlags r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: org.tukaani.xz.common.StreamFlags;

        r1 := @parameter1: org.tukaani.xz.common.StreamFlags;

        $i1 = r0.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $i0 = r1.<org.tukaani.xz.common.StreamFlags: int checkType>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static long decodeVLI(java.io.InputStream) throws java.io.IOException
    {
        long $l6, $l7, l9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i8, i10, $i12, $i14;
        java.io.EOFException $r5, $r7;
        org.tukaani.xz.CorruptedInputException $r6, $r8;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i8 = $i0;

        $i12 = (int) -1;

        if $i0 != $i12 goto label1;

        $r5 = new java.io.EOFException;

        specialinvoke $r5.<java.io.EOFException: void <init>()>();

        throw $r5;

     label1:
        $i1 = $i0 & 127;

        l9 = (long) $i1;

        i10 = 0;

     label2:
        $i2 = i8 & 128;

        if $i2 == 0 goto label6;

        i10 = i10 + 1;

        if i10 < 9 goto label3;

        $r6 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r6.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r6;

     label3:
        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i8 = $i3;

        $i14 = (int) -1;

        if $i3 != $i14 goto label4;

        $r7 = new java.io.EOFException;

        specialinvoke $r7.<java.io.EOFException: void <init>()>();

        throw $r7;

     label4:
        if $i3 != 0 goto label5;

        $r8 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r8.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r8;

     label5:
        $i4 = $i3 & 127;

        $l6 = (long) $i4;

        $i5 = i10 * 7;

        $l7 = $l6 << $i5;

        l9 = l9 | $l7;

        goto label2;

     label6:
        return l9;
    }
}
