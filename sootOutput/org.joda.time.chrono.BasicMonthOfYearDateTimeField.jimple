class org.joda.time.chrono.BasicMonthOfYearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
{
    private static final long serialVersionUID;
    private static final int MIN;
    private final org.joda.time.chrono.BasicChronology iChronology;
    private final int iMax;
    private final int iLeapMonth;

    void <init>(org.joda.time.chrono.BasicChronology, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int $i1, i2;
        org.joda.time.chrono.BasicChronology r2, $r3;
        org.joda.time.DateTimeFieldType $r1;
        long $l0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        r2 := @parameter0: org.joda.time.chrono.BasicChronology;

        i2 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $l0 = virtualinvoke r2.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerMonth()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r1, $l0);

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = r2;

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>();

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> = $i1;

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth> = i2;

        return;
    }

    public boolean isLenient()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 0;
    }

    public int get(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int $i1;
        org.joda.time.chrono.BasicChronology $r1;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0);

        return $i1;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5, $r6;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l1, l3, $l14, $l15;
        int i0, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, $i25, i26, $i27;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l1 := @parameter0: long;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return l1;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l1);

        l3 = (long) $i2;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, $i4);

        $i6 = $i5 - 1;

        i21 = $i6 + i0;

        if i21 < 0 goto label2;

        $i17 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i18 = i21 / $i17;

        i22 = $i4 + $i18;

        $i19 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i20 = i21 % $i19;

        i23 = $i20 + 1;

        goto label4;

     label2:
        $i7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i8 = i21 / $i7;

        $i9 = $i4 + $i8;

        i22 = $i9 - 1;

        $i10 = staticinvoke <java.lang.Math: int abs(int)>(i21);

        $i11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        i24 = $i10 % $i11;

        if i24 != 0 goto label3;

        i24 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label3:
        $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i13 = $i12 - i24;

        $i16 = $i13 + 1;

        i23 = $i16;

        if $i16 != 1 goto label4;

        i22 = i22 + 1;

     label4:
        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i25 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, $i4, $i5);

        i26 = $i25;

        $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i27 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i22, i23);

        if $i25 <= $i27 goto label5;

        i26 = $i27;

     label5:
        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l14 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i22, i23, i26);

        $l15 = $l14 + l3;

        return $l15;
    }

    public long add(long, long)
    {
        byte $b3, $b11, $b24, $b27, $b48;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r9, $r10, $r11, $r12, $r13;
        long l0, $l2, l4, l6, $l10, $l13, $l14, $l15, $l16, $l17, $l19, $l20, $l26, $l31, $l32, $l33, $l35, $l36, $l37, $l39, $l40, $l41, l42, l43, l44, $l47;
        java.lang.StringBuffer $r6, $r7, $r14;
        java.lang.String $r8;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int i1, $i5, $i7, $i8, $i9, $i12, $i18, $i21, $i22, $i23, $i25, i28, $i29, $i30, $i34, $i38, i45, $i46, i49, i50, $i51, $i52, $i53;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l4 := @parameter0: long;

        l0 := @parameter1: long;

        i1 = (int) l0;

        $l2 = (long) i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        $l41 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l4, i1);

        return $l41;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l4);

        l6 = (long) $i5;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i7 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l4);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i8 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l4, $i7);

        $i9 = $i8 - 1;

        $l10 = (long) $i9;

        l42 = $l10 + l0;

        $b11 = l42 cmp 0L;

        $i51 = (int) $b11;

        if $i51 < 0 goto label2;

        $l37 = (long) $i7;

        $i34 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l35 = (long) $i34;

        $l36 = l42 / $l35;

        l43 = $l37 + $l36;

        $i38 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l39 = (long) $i38;

        $l40 = l42 % $l39;

        l44 = $l40 + 1L;

        goto label4;

     label2:
        $l15 = (long) $i7;

        $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l13 = (long) $i12;

        $l14 = l42 / $l13;

        $l16 = $l15 + $l14;

        l43 = $l16 - 1L;

        $l17 = staticinvoke <java.lang.Math: long abs(long)>(l42);

        $i18 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l19 = (long) $i18;

        $l20 = $l17 % $l19;

        i45 = (int) $l20;

        if i45 != 0 goto label3;

        i45 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label3:
        $i21 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i22 = $i21 - i45;

        $i23 = $i22 + 1;

        $l33 = (long) $i23;

        l44 = $l33;

        $b24 = $l33 cmp 1L;

        if $b24 != 0 goto label4;

        l43 = l43 + 1L;

     label4:
        $r13 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i46 = virtualinvoke $r13.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $l47 = (long) $i46;

        $b48 = l43 cmp $l47;

        $i52 = (int) $b48;

        if $i52 < 0 goto label5;

        $r9 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i25 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        $l26 = (long) $i25;

        $b27 = l43 cmp $l26;

        $i53 = (int) $b27;

        if $i53 <= 0 goto label6;

     label5:
        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Magnitude of add amount is too large: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r15;

     label6:
        i49 = (int) l43;

        i28 = (int) l44;

        $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i29 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l4, $i7, $i8);

        i50 = $i29;

        $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i30 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i49, i28);

        if $i29 <= $i30 goto label7;

        i50 = $i30;

     label7:
        $r12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l31 = virtualinvoke $r12.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i49, i28, i50);

        $l32 = $l31 + l6;

        return $l32;
    }

    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r1;
        long $l3, l5;
        int[] r2, $r3, $r5;
        int i0, i1, $i2, $i4, i6;
        org.joda.time.DateTimeFieldType $r6;
        org.joda.time.DateTimeField $r8;
        boolean $z0;
        org.joda.time.ReadablePartial r0;
        org.joda.time.chrono.BasicChronology $r4, $r7;

        r1 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        if i0 != 0 goto label1;

        return r2;

     label1:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r0);

        if $z0 == 0 goto label4;

        l5 = 0L;

        i6 = 0;

        $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>();

     label2:
        if i6 >= $i2 goto label3;

        $r6 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i6);

        $r7 = r1.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r8 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r7);

        $i4 = r2[i6];

        l5 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(l5, $i4);

        i6 = i6 + 1;

        goto label2;

     label3:
        $l3 = virtualinvoke r1.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l5, i0);

        $r4 = r1.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int[] get(org.joda.time.ReadablePartial,long)>(r0, $l3);

        return $r5;

     label4:
        $r3 = specialinvoke r1.<org.joda.time.field.ImpreciseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0);

        return $r3;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int $i1, i2, $i3, $i4;
        long l0, $l5;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        i2 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>(l0);

        $i3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i1, i2, 1, $i3);

        $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>(l0, $i4);

        return $l5;
    }

    public long getDifferenceAsLong(long, long)
    {
        byte $b1, $b26;
        org.joda.time.DateTimeField $r9;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l8, $l9, $l10, $l11, $l12, $l13, $l19, l20, l21, $l22, $l23, $l24, $l25;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i14, $i15, $i16, $i17, $i18, $i27, $i28;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        l20 := @parameter1: long;

        $b1 = l0 cmp l20;

        $i27 = (int) $b1;

        if $i27 >= 0 goto label1;

        $i17 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>(l20, l0);

        $i18 = neg $i17;

        $l19 = (long) $i18;

        return $l19;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i2);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l20);

        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l20, $i4);

        $i6 = $i2 - $i4;

        $l9 = (long) $i6;

        $i7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l8 = (long) $i7;

        $l11 = $l9 * $l8;

        $l10 = (long) $i3;

        $l13 = $l11 + $l10;

        $l12 = (long) $i5;

        l21 = $l13 - $l12;

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i14 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, $i2, $i3);

        $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i15 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i2, $i3);

        if $i14 != $i15 goto label2;

        $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i16 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l20, $i4, $i5);

        if $i16 <= $i14 goto label2;

        $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>();

        l20 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l20, $i14);

     label2:
        $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l22 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i2, $i3);

        $l23 = l0 - $l22;

        $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l24 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i4, $i5);

        $l25 = l20 - $l24;

        $b26 = $l23 cmp $l25;

        $i28 = (int) $b26;

        if $i28 >= 0 goto label3;

        l21 = l21 - 1L;

     label3:
        return l21;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l2, $l6, $l8, $l9;
        int i0, $i1, $i3, $i4, $i5, $i7, i10;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $i1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i0, 1, $i1);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l2);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l2, $i3);

        i10 = $i4;

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i3, i0);

        if $i4 <= $i5 goto label1;

        i10 = $i5;

     label1:
        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>($i3, i0, i10);

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l2);

        $l8 = (long) $i7;

        $l9 = $l6 + $l8;

        return $l9;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>();

        return $r2;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0;
        int $i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $z0 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i1);

        if $z0 == 0 goto label3;

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1);

        $i3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth>;

        if $i2 != $i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        byte $b1;
        long l0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>(l0);

        if $z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 1;
    }

    public int getMaximumValue()
    {
        int $i0;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        return $i0;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l3;
        int $i1, $i2;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i1, $i2);

        return $l3;
    }

    public long remainder(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.BasicMonthOfYearDateTimeField: int MIN> = 1;

        <org.joda.time.chrono.BasicMonthOfYearDateTimeField: long serialVersionUID> = -8258715387168736L;

        return;
    }
}
