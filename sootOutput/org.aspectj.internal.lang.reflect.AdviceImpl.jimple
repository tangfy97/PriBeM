public class org.aspectj.internal.lang.reflect.AdviceImpl extends java.lang.Object implements org.aspectj.lang.reflect.Advice
{
    private static final java.lang.String AJC_INTERNAL;
    private final org.aspectj.lang.reflect.AdviceKind kind;
    private final java.lang.reflect.Method adviceMethod;
    private org.aspectj.lang.reflect.PointcutExpression pointcutExpression;
    private boolean hasExtraParam;
    private java.lang.reflect.Type[] genericParameterTypes;
    private org.aspectj.lang.reflect.AjType[] parameterTypes;
    private org.aspectj.lang.reflect.AjType[] exceptionTypes;

    protected void <init>(java.lang.reflect.Method, java.lang.String, org.aspectj.lang.reflect.AdviceKind)
    {
        org.aspectj.internal.lang.reflect.PointcutExpressionImpl $r3;
        java.lang.String r4;
        org.aspectj.lang.reflect.AdviceKind r1;
        java.lang.reflect.Method r2;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        r2 := @parameter0: java.lang.reflect.Method;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: org.aspectj.lang.reflect.AdviceKind;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: boolean hasExtraParam> = 0;

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AdviceKind kind> = r1;

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod> = r2;

        $r3 = new org.aspectj.internal.lang.reflect.PointcutExpressionImpl;

        specialinvoke $r3.<org.aspectj.internal.lang.reflect.PointcutExpressionImpl: void <init>(java.lang.String)>(r4);

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.PointcutExpression pointcutExpression> = $r3;

        return;
    }

    protected void <init>(java.lang.reflect.Method, java.lang.String, org.aspectj.lang.reflect.AdviceKind, java.lang.String)
    {
        java.lang.String r2, r4;
        org.aspectj.lang.reflect.AdviceKind r3;
        java.lang.reflect.Method r1;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.aspectj.lang.reflect.AdviceKind;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind)>(r1, r2, r3);

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: boolean hasExtraParam> = 1;

        return;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.lang.reflect.AjType $r3;
        java.lang.Class $r2;
        java.lang.reflect.Method $r1;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r2);

        return $r3;
    }

    public java.lang.reflect.Type[] getGenericParameterTypes()
    {
        org.aspectj.lang.reflect.AjType $r13;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r17;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2;
        java.lang.Package $r16;
        java.lang.reflect.Type $r7, $r8, $r10, r14;
        java.lang.reflect.Type[] $r1, $r2, $r4, $r5, $r6, $r9, $r12;
        java.lang.Class $r11, $r15;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes>;

        if $r1 != null goto label7;

        $r3 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        i4 = 0;

        i0 = lengthof $r4;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        r14 = $r4[i5];

        $z1 = r14 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r15 = (java.lang.Class) r14;

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.Package getPackage()>();

        $r17 = virtualinvoke $r16.<java.lang.Package: java.lang.String getName()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("org.aspectj.runtime.internal");

        if $z2 == 0 goto label2;

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = lengthof $r4;

        $i2 = $i1 - i4;

        $r5 = newarray (java.lang.reflect.Type)[$i2];

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes> = $r5;

        i6 = 0;

     label4:
        $r6 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes>;

        $i3 = lengthof $r6;

        if i6 >= $i3 goto label7;

        $r7 = $r4[i6];

        $z0 = $r7 instanceof java.lang.Class;

        if $z0 == 0 goto label5;

        $r12 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes>;

        $r10 = $r4[i6];

        $r11 = (java.lang.Class) $r10;

        $r13 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r11);

        $r12[i6] = $r13;

        goto label6;

     label5:
        $r9 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes>;

        $r8 = $r4[i6];

        $r9[i6] = $r8;

     label6:
        i6 = i6 + 1;

        goto label4;

     label7:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Type[] genericParameterTypes>;

        return $r2;
    }

    public org.aspectj.lang.reflect.AjType[] getParameterTypes()
    {
        org.aspectj.lang.reflect.AjType $r9;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r12;
        java.lang.reflect.Method $r3;
        boolean $z0;
        java.lang.Package $r11;
        java.lang.Class[] $r4;
        org.aspectj.lang.reflect.AjType[] $r1, $r2, $r5, $r6, $r8;
        java.lang.Class $r7, r10;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] parameterTypes>;

        if $r1 != null goto label5;

        $r3 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i4 = 0;

        i0 = lengthof $r4;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        r10 = $r4[i5];

        $r11 = virtualinvoke r10.<java.lang.Class: java.lang.Package getPackage()>();

        $r12 = virtualinvoke $r11.<java.lang.Package: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("org.aspectj.runtime.internal");

        if $z0 == 0 goto label2;

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = lengthof $r4;

        $i2 = $i1 - i4;

        $r5 = newarray (org.aspectj.lang.reflect.AjType)[$i2];

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] parameterTypes> = $r5;

        i6 = 0;

     label4:
        $r6 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] parameterTypes>;

        $i3 = lengthof $r6;

        if i6 >= $i3 goto label5;

        $r8 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] parameterTypes>;

        $r7 = $r4[i6];

        $r9 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r7);

        $r8[i6] = $r9;

        i6 = i6 + 1;

        goto label4;

     label5:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] parameterTypes>;

        return $r2;
    }

    public org.aspectj.lang.reflect.AjType[] getExceptionTypes()
    {
        org.aspectj.lang.reflect.AjType $r8;
        java.lang.Class[] $r4;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;
        org.aspectj.lang.reflect.AjType[] $r1, $r2, $r5, $r7;
        int $i0, $i1, i2;
        java.lang.Class $r6;
        java.lang.reflect.Method $r3;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] exceptionTypes>;

        if $r1 != null goto label2;

        $r3 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $i0 = lengthof $r4;

        $r5 = newarray (org.aspectj.lang.reflect.AjType)[$i0];

        r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] exceptionTypes> = $r5;

        i2 = 0;

     label1:
        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] exceptionTypes>;

        $r6 = $r4[i2];

        $r8 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r6);

        $r7[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] exceptionTypes>;

        return $r2;
    }

    public org.aspectj.lang.reflect.AdviceKind getKind()
    {
        org.aspectj.lang.reflect.AdviceKind $r1;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AdviceKind kind>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.aspectj.lang.'annotation'.AdviceName r5;
        org.aspectj.internal.lang.reflect.AdviceImpl r0;
        java.lang.'annotation'.Annotation $r4;
        java.lang.String $r2, r6;
        java.lang.reflect.Method $r1, $r3;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        r6 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label1;

        r6 = "";

        $r3 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/AdviceName;");

        r5 = (org.aspectj.lang.'annotation'.AdviceName) $r4;

        if r5 == null goto label1;

        r6 = interfaceinvoke r5.<org.aspectj.lang.'annotation'.AdviceName: java.lang.String value()>();

     label1:
        return r6;
    }

    public org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()
    {
        org.aspectj.internal.lang.reflect.AdviceImpl r0;
        org.aspectj.lang.reflect.PointcutExpression $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.PointcutExpression pointcutExpression>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.AjType $r12, $r14, $r16, $r18;
        org.aspectj.internal.lang.reflect.AdviceImpl r1;
        int[] $r5, $r7;
        java.lang.reflect.Method $r20;
        boolean $z0, $z1, $z2;
        org.aspectj.lang.reflect.PointcutExpression $r9;
        org.aspectj.lang.reflect.AdviceKind $r3, $r4, $r6, $r8;
        java.lang.reflect.Type $r21;
        java.lang.StringBuffer $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, i15, $i17;
        java.lang.String $r2, $r10, $r11, $r13, $r15, $r17, $r19, $r22, $r23;
        org.aspectj.lang.reflect.AjType[] $r24, $r25;

        r1 := @this: org.aspectj.internal.lang.reflect.AdviceImpl;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label01;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@AdviceName(\"");

        $r23 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\") ");

     label01:
        $r3 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AdviceKind getKind()>();

        $r4 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind AROUND>;

        if $r3 != $r4 goto label02;

        $r20 = r1.<org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.reflect.Method adviceMethod>;

        $r21 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label02:
        $r5 = <org.aspectj.internal.lang.reflect.AdviceImpl$1: int[] $SwitchMap$org$aspectj$lang$reflect$AdviceKind>;

        $r6 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AdviceKind getKind()>();

        $i1 = virtualinvoke $r6.<org.aspectj.lang.reflect.AdviceKind: int ordinal()>();

        $i2 = $r5[$i1];

        tableswitch($i2)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            default: goto label08;
        };

     label03:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("after(");

        goto label08;

     label04:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("after(");

        goto label08;

     label05:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("after(");

        goto label08;

     label06:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("around(");

        goto label08;

     label07:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("before(");

     label08:
        $r24 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] getParameterTypes()>();

        $i11 = lengthof $r24;

        i12 = $i11;

        $z1 = r1.<org.aspectj.internal.lang.reflect.AdviceImpl: boolean hasExtraParam>;

        if $z1 == 0 goto label09;

        $i17 = (int) -1;

        i12 = $i11 + $i17;

     label09:
        i13 = 0;

     label10:
        if i13 >= i12 goto label12;

        $r18 = $r24[i13];

        $r19 = interfaceinvoke $r18.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $i10 = i13 + 1;

        if $i10 >= i12 goto label11;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label11:
        i13 = i13 + 1;

        goto label10;

     label12:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r7 = <org.aspectj.internal.lang.reflect.AdviceImpl$1: int[] $SwitchMap$org$aspectj$lang$reflect$AdviceKind>;

        $r8 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AdviceKind getKind()>();

        $i3 = virtualinvoke $r8.<org.aspectj.lang.reflect.AdviceKind: int ordinal()>();

        $i4 = $r7[$i3];

        lookupswitch($i4)
        {
            case 2: goto label13;
            case 3: goto label14;
            default: goto label15;
        };

     label13:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("returning");

        $z0 = r1.<org.aspectj.internal.lang.reflect.AdviceImpl: boolean hasExtraParam>;

        if $z0 == 0 goto label14;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $i9 = i12 - 1;

        $r16 = $r24[$i9];

        $r17 = interfaceinvoke $r16.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

     label14:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("throwing");

        $z2 = r1.<org.aspectj.internal.lang.reflect.AdviceImpl: boolean hasExtraParam>;

        if $z2 == 0 goto label15;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $i8 = i12 - 1;

        $r14 = $r24[$i8];

        $r15 = interfaceinvoke $r14.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

     label15:
        $r25 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.AjType[] getExceptionTypes()>();

        $i14 = lengthof $r25;

        if $i14 <= 0 goto label19;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("throws ");

        i15 = 0;

     label16:
        $i5 = lengthof $r25;

        if i15 >= $i5 goto label18;

        $r12 = $r25[i15];

        $r13 = interfaceinvoke $r12.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $i7 = i15 + 1;

        $i6 = lengthof $r25;

        if $i7 >= $i6 goto label17;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label17:
        i15 = i15 + 1;

        goto label16;

     label18:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label19:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r9 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AdviceImpl: org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()>();

        $r10 = interfaceinvoke $r9.<org.aspectj.lang.reflect.PointcutExpression: java.lang.String asString()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public static void <clinit>()
    {
        <org.aspectj.internal.lang.reflect.AdviceImpl: java.lang.String AJC_INTERNAL> = "org.aspectj.runtime.internal";

        return;
    }
}
