public abstract class org.apache.http.impl.client.AbstractHttpClient extends java.lang.Object implements org.apache.http.client.HttpClient
{
    private final org.apache.commons.logging.Log log;
    private org.apache.http.params.HttpParams defaultParams;
    private org.apache.http.protocol.HttpRequestExecutor requestExec;
    private org.apache.http.conn.ClientConnectionManager connManager;
    private org.apache.http.ConnectionReuseStrategy reuseStrategy;
    private org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy;
    private org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs;
    private org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes;
    private org.apache.http.protocol.BasicHttpProcessor mutableProcessor;
    private org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor;
    private org.apache.http.client.HttpRequestRetryHandler retryHandler;
    private org.apache.http.client.RedirectStrategy redirectStrategy;
    private org.apache.http.client.AuthenticationStrategy targetAuthStrategy;
    private org.apache.http.client.AuthenticationStrategy proxyAuthStrategy;
    private org.apache.http.client.CookieStore cookieStore;
    private org.apache.http.client.CredentialsProvider credsProvider;
    private org.apache.http.conn.routing.HttpRoutePlanner routePlanner;
    private org.apache.http.client.UserTokenHandler userTokenHandler;
    private org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy;
    private org.apache.http.client.BackoffManager backoffManager;

    protected void <init>(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)
    {
        org.apache.http.conn.ClientConnectionManager r4;
        org.apache.http.params.HttpParams r3;
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r4 := @parameter0: org.apache.http.conn.ClientConnectionManager;

        r3 := @parameter1: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log> = $r2;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = r3;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager> = r4;

        return;
    }

    protected abstract org.apache.http.params.HttpParams createHttpParams();

    protected abstract org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();

    protected org.apache.http.protocol.HttpContext createHttpContext()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r3;
        org.apache.http.conn.ClientConnectionManager $r2;
        org.apache.http.auth.AuthSchemeRegistry $r4;
        org.apache.http.cookie.CookieSpecRegistry $r5;
        org.apache.http.client.CookieStore $r6;
        org.apache.http.protocol.BasicHttpContext $r0;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.client.CredentialsProvider $r7;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.protocol.BasicHttpContext;

        specialinvoke $r0.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        interfaceinvoke $r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.scheme-registry", $r3);

        $r4 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()>();

        interfaceinvoke $r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.authscheme-registry", $r4);

        $r5 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()>();

        interfaceinvoke $r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.cookiespec-registry", $r5);

        $r6 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore getCookieStore()>();

        interfaceinvoke $r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.cookie-store", $r6);

        $r7 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        interfaceinvoke $r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.credentials-provider", $r7);

        return $r0;
    }

    protected org.apache.http.conn.ClientConnectionManager createClientConnectionManager()
    {
        java.lang.IllegalStateException $r15;
        org.apache.http.conn.ClientConnectionManagerFactory r20;
        java.lang.InstantiationException $r8;
        org.apache.http.impl.client.AbstractHttpClient r1;
        java.lang.String r4, $r10, $r13, $r19;
        org.apache.http.conn.scheme.SchemeRegistry $r0;
        org.apache.http.impl.conn.BasicClientConnectionManager $r5;
        java.lang.IllegalAccessException $r11;
        org.apache.http.conn.ClientConnectionManager r21;
        java.lang.InstantiationError $r9;
        java.lang.IllegalAccessError $r12;
        org.apache.http.params.HttpParams $r2;
        java.lang.Object $r3, $r7;
        java.lang.Class $r6;
        java.lang.ClassNotFoundException $r14;
        java.lang.StringBuilder $r16, $r17, $r18;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = staticinvoke <org.apache.http.impl.conn.SchemeRegistryFactory: org.apache.http.conn.scheme.SchemeRegistry createDefault()>();

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>();

        r20 = null;

        $r3 = interfaceinvoke $r2.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.connection-manager.factory-class-name");

        r4 = (java.lang.String) $r3;

        if r4 == null goto label6;

     label1:
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        r20 = (org.apache.http.conn.ClientConnectionManagerFactory) $r7;

     label2:
        goto label6;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid class name: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalAccessError;

        $r13 = virtualinvoke $r11.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r13);

        throw $r12;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.InstantiationError;

        $r10 = virtualinvoke $r8.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.InstantiationError: void <init>(java.lang.String)>($r10);

        throw $r9;

     label6:
        if r20 == null goto label7;

        r21 = interfaceinvoke r20.<org.apache.http.conn.ClientConnectionManagerFactory: org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>($r2, $r0);

        goto label8;

     label7:
        $r5 = new org.apache.http.impl.conn.BasicClientConnectionManager;

        specialinvoke $r5.<org.apache.http.impl.conn.BasicClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>($r0);

        r21 = $r5;

     label8:
        return r21;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }

    protected org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()
    {
        org.apache.http.impl.auth.BasicSchemeFactory $r1;
        org.apache.http.impl.client.AbstractHttpClient r6;
        org.apache.http.impl.auth.SPNegoSchemeFactory $r4;
        org.apache.http.auth.AuthSchemeRegistry $r0;
        org.apache.http.impl.auth.DigestSchemeFactory $r2;
        org.apache.http.impl.auth.KerberosSchemeFactory $r5;
        org.apache.http.impl.auth.NTLMSchemeFactory $r3;

        r6 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.auth.AuthSchemeRegistry;

        specialinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void <init>()>();

        $r1 = new org.apache.http.impl.auth.BasicSchemeFactory;

        specialinvoke $r1.<org.apache.http.impl.auth.BasicSchemeFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>("Basic", $r1);

        $r2 = new org.apache.http.impl.auth.DigestSchemeFactory;

        specialinvoke $r2.<org.apache.http.impl.auth.DigestSchemeFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>("Digest", $r2);

        $r3 = new org.apache.http.impl.auth.NTLMSchemeFactory;

        specialinvoke $r3.<org.apache.http.impl.auth.NTLMSchemeFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>("NTLM", $r3);

        $r4 = new org.apache.http.impl.auth.SPNegoSchemeFactory;

        specialinvoke $r4.<org.apache.http.impl.auth.SPNegoSchemeFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>("negotiate", $r4);

        $r5 = new org.apache.http.impl.auth.KerberosSchemeFactory;

        specialinvoke $r5.<org.apache.http.impl.auth.KerberosSchemeFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>("Kerberos", $r5);

        return $r0;
    }

    protected org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()
    {
        org.apache.http.impl.cookie.BestMatchSpecFactory $r1;
        org.apache.http.impl.cookie.BrowserCompatSpecFactory $r2;
        org.apache.http.cookie.CookieSpecRegistry $r0;
        org.apache.http.impl.cookie.IgnoreSpecFactory $r6;
        org.apache.http.impl.cookie.RFC2965SpecFactory $r5;
        org.apache.http.impl.cookie.RFC2109SpecFactory $r4;
        org.apache.http.impl.client.AbstractHttpClient r7;
        org.apache.http.impl.cookie.NetscapeDraftSpecFactory $r3;

        r7 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.cookie.CookieSpecRegistry;

        specialinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void <init>()>();

        $r1 = new org.apache.http.impl.cookie.BestMatchSpecFactory;

        specialinvoke $r1.<org.apache.http.impl.cookie.BestMatchSpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("best-match", $r1);

        $r2 = new org.apache.http.impl.cookie.BrowserCompatSpecFactory;

        specialinvoke $r2.<org.apache.http.impl.cookie.BrowserCompatSpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("compatibility", $r2);

        $r3 = new org.apache.http.impl.cookie.NetscapeDraftSpecFactory;

        specialinvoke $r3.<org.apache.http.impl.cookie.NetscapeDraftSpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("netscape", $r3);

        $r4 = new org.apache.http.impl.cookie.RFC2109SpecFactory;

        specialinvoke $r4.<org.apache.http.impl.cookie.RFC2109SpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("rfc2109", $r4);

        $r5 = new org.apache.http.impl.cookie.RFC2965SpecFactory;

        specialinvoke $r5.<org.apache.http.impl.cookie.RFC2965SpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("rfc2965", $r5);

        $r6 = new org.apache.http.impl.cookie.IgnoreSpecFactory;

        specialinvoke $r6.<org.apache.http.impl.cookie.IgnoreSpecFactory: void <init>()>();

        virtualinvoke $r0.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("ignoreCookies", $r6);

        return $r0;
    }

    protected org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.protocol.HttpRequestExecutor $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.protocol.HttpRequestExecutor;

        specialinvoke $r0.<org.apache.http.protocol.HttpRequestExecutor: void <init>()>();

        return $r0;
    }

    protected org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.DefaultConnectionReuseStrategy $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.DefaultConnectionReuseStrategy;

        specialinvoke $r0.<org.apache.http.impl.DefaultConnectionReuseStrategy: void <init>()>();

        return $r0;
    }

    protected org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()
    {
        org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy $r0;
        org.apache.http.impl.client.AbstractHttpClient r1;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.RedirectHandler createRedirectHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.DefaultRedirectHandler $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultRedirectHandler;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRedirectHandler: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.AuthenticationStrategy createTargetAuthenticationStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.TargetAuthenticationStrategy $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.TargetAuthenticationStrategy;

        specialinvoke $r0.<org.apache.http.impl.client.TargetAuthenticationStrategy: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.DefaultTargetAuthenticationHandler $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultTargetAuthenticationHandler;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.AuthenticationStrategy createProxyAuthenticationStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.ProxyAuthenticationStrategy $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.ProxyAuthenticationStrategy;

        specialinvoke $r0.<org.apache.http.impl.client.ProxyAuthenticationStrategy: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()
    {
        org.apache.http.impl.client.DefaultProxyAuthenticationHandler $r0;
        org.apache.http.impl.client.AbstractHttpClient r1;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultProxyAuthenticationHandler;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.CookieStore createCookieStore()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.BasicCookieStore $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.BasicCookieStore;

        specialinvoke $r0.<org.apache.http.impl.client.BasicCookieStore: void <init>()>();

        return $r0;
    }

    protected org.apache.http.client.CredentialsProvider createCredentialsProvider()
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        org.apache.http.impl.client.AbstractHttpClient r1;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.BasicCredentialsProvider;

        specialinvoke $r0.<org.apache.http.impl.client.BasicCredentialsProvider: void <init>()>();

        return $r0;
    }

    protected org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r3;
        org.apache.http.impl.conn.DefaultHttpRoutePlanner $r0;
        org.apache.http.conn.ClientConnectionManager $r2;
        org.apache.http.impl.client.AbstractHttpClient r1;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.conn.DefaultHttpRoutePlanner;

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        specialinvoke $r0.<org.apache.http.impl.conn.DefaultHttpRoutePlanner: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>($r3);

        return $r0;
    }

    protected org.apache.http.client.UserTokenHandler createUserTokenHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.impl.client.DefaultUserTokenHandler $r0;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r0 = new org.apache.http.impl.client.DefaultUserTokenHandler;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultUserTokenHandler: void <init>()>();

        return $r0;
    }

    public final synchronized org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.params.HttpParams $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams createHttpParams()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams>;

        return $r2;
    }

    public synchronized void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.params.HttpParams r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = r1;

        return;
    }

    public final synchronized org.apache.http.conn.ClientConnectionManager getConnectionManager()
    {
        org.apache.http.conn.ClientConnectionManager $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager>;

        return $r2;
    }

    public final synchronized org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.HttpRequestExecutor $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec>;

        return $r2;
    }

    public final synchronized org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.auth.AuthSchemeRegistry $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes>;

        return $r2;
    }

    public synchronized void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.auth.AuthSchemeRegistry r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.auth.AuthSchemeRegistry;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes> = r1;

        return;
    }

    public final synchronized org.apache.http.client.ConnectionBackoffStrategy getConnectionBackoffStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.ConnectionBackoffStrategy $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy>;

        return $r1;
    }

    public synchronized void setConnectionBackoffStrategy(org.apache.http.client.ConnectionBackoffStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.ConnectionBackoffStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.ConnectionBackoffStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.cookie.CookieSpecRegistry $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs>;

        return $r2;
    }

    public final synchronized org.apache.http.client.BackoffManager getBackoffManager()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.BackoffManager $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.BackoffManager backoffManager>;

        return $r1;
    }

    public synchronized void setBackoffManager(org.apache.http.client.BackoffManager)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.BackoffManager r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.BackoffManager;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.BackoffManager backoffManager> = r1;

        return;
    }

    public synchronized void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.cookie.CookieSpecRegistry r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.cookie.CookieSpecRegistry;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs> = r1;

        return;
    }

    public final synchronized org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()
    {
        org.apache.http.ConnectionReuseStrategy $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

        return $r2;
    }

    public synchronized void setReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.ConnectionReuseStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()
    {
        org.apache.http.conn.ConnectionKeepAliveStrategy $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy>;

        return $r2;
    }

    public synchronized void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.conn.ConnectionKeepAliveStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.conn.ConnectionKeepAliveStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.HttpRequestRetryHandler $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler>;

        return $r2;
    }

    public synchronized void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.HttpRequestRetryHandler r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.HttpRequestRetryHandler;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler> = r1;

        return;
    }

    public final synchronized org.apache.http.client.RedirectHandler getRedirectHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.RedirectHandler $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler createRedirectHandler()>();

        return $r1;
    }

    public synchronized void setRedirectHandler(org.apache.http.client.RedirectHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.impl.client.DefaultRedirectStrategyAdaptor $r1;
        org.apache.http.client.RedirectHandler r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.client.RedirectHandler;

        $r1 = new org.apache.http.impl.client.DefaultRedirectStrategyAdaptor;

        specialinvoke $r1.<org.apache.http.impl.client.DefaultRedirectStrategyAdaptor: void <init>(org.apache.http.client.RedirectHandler)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy redirectStrategy> = $r1;

        return;
    }

    public final synchronized org.apache.http.client.RedirectStrategy getRedirectStrategy()
    {
        org.apache.http.client.RedirectStrategy $r1, $r2;
        org.apache.http.impl.client.DefaultRedirectStrategy $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy redirectStrategy>;

        if $r1 != null goto label1;

        $r3 = new org.apache.http.impl.client.DefaultRedirectStrategy;

        specialinvoke $r3.<org.apache.http.impl.client.DefaultRedirectStrategy: void <init>()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy redirectStrategy> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy redirectStrategy>;

        return $r2;
    }

    public synchronized void setRedirectStrategy(org.apache.http.client.RedirectStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.RedirectStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.RedirectStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy redirectStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>();

        return $r1;
    }

    public synchronized void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler r2;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.client.AuthenticationHandler;

        $r1 = new org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        specialinvoke $r1.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: void <init>(org.apache.http.client.AuthenticationHandler)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy targetAuthStrategy> = $r1;

        return;
    }

    public final synchronized org.apache.http.client.AuthenticationStrategy getTargetAuthenticationStrategy()
    {
        org.apache.http.client.AuthenticationStrategy $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy targetAuthStrategy>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy createTargetAuthenticationStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy targetAuthStrategy> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy targetAuthStrategy>;

        return $r2;
    }

    public synchronized void setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.AuthenticationStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy targetAuthStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()>();

        return $r1;
    }

    public synchronized void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler r2;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.client.AuthenticationHandler;

        $r1 = new org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        specialinvoke $r1.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: void <init>(org.apache.http.client.AuthenticationHandler)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy proxyAuthStrategy> = $r1;

        return;
    }

    public final synchronized org.apache.http.client.AuthenticationStrategy getProxyAuthenticationStrategy()
    {
        org.apache.http.client.AuthenticationStrategy $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy proxyAuthStrategy>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy createProxyAuthenticationStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy proxyAuthStrategy> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy proxyAuthStrategy>;

        return $r2;
    }

    public synchronized void setProxyAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationStrategy r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.AuthenticationStrategy;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy proxyAuthStrategy> = r1;

        return;
    }

    public final synchronized org.apache.http.client.CookieStore getCookieStore()
    {
        org.apache.http.client.CookieStore $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore createCookieStore()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore>;

        return $r2;
    }

    public synchronized void setCookieStore(org.apache.http.client.CookieStore)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.CookieStore r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.CookieStore;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore> = r1;

        return;
    }

    public final synchronized org.apache.http.client.CredentialsProvider getCredentialsProvider()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.CredentialsProvider $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider createCredentialsProvider()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider>;

        return $r2;
    }

    public synchronized void setCredentialsProvider(org.apache.http.client.CredentialsProvider)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.CredentialsProvider r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.CredentialsProvider;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider> = r1;

        return;
    }

    public final synchronized org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.conn.routing.HttpRoutePlanner $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner>;

        return $r2;
    }

    public synchronized void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.conn.routing.HttpRoutePlanner r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoutePlanner;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner> = r1;

        return;
    }

    public final synchronized org.apache.http.client.UserTokenHandler getUserTokenHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.UserTokenHandler $r1, $r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler createUserTokenHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler>;

        return $r2;
    }

    public synchronized void setUserTokenHandler(org.apache.http.client.UserTokenHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.UserTokenHandler r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.UserTokenHandler;

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler> = r1;

        return;
    }

    protected final synchronized org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()
    {
        org.apache.http.protocol.BasicHttpProcessor $r1, $r2, $r3;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor mutableProcessor>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor mutableProcessor> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor mutableProcessor>;

        return $r2;
    }

    private final synchronized org.apache.http.protocol.HttpProcessor getProtocolProcessor()
    {
        org.apache.http.protocol.BasicHttpProcessor $r3;
        org.apache.http.HttpResponseInterceptor[] r5;
        org.apache.http.HttpRequestInterceptor[] r4;
        org.apache.http.HttpResponseInterceptor $r7;
        int $i0, $i1, i2, i3;
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.ImmutableHttpProcessor $r1, $r2, $r6;
        org.apache.http.HttpRequestInterceptor $r8;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor>;

        if $r1 != null goto label5;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $i0 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>();

        r4 = newarray (org.apache.http.HttpRequestInterceptor)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r8 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>(i2);

        r4[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>();

        r5 = newarray (org.apache.http.HttpResponseInterceptor)[$i1];

        i3 = 0;

     label3:
        if i3 >= $i1 goto label4;

        $r7 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>(i3);

        r5[i3] = $r7;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r6 = new org.apache.http.protocol.ImmutableHttpProcessor;

        specialinvoke $r6.<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.HttpRequestInterceptor[],org.apache.http.HttpResponseInterceptor[])>(r4, r5);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = $r6;

     label5:
        $r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor>;

        return $r2;
    }

    public synchronized int getResponseInterceptorCount()
    {
        int $i0;
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $i0 = virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>();

        return $i0;
    }

    public synchronized org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)
    {
        org.apache.http.protocol.BasicHttpProcessor $r1;
        org.apache.http.HttpResponseInterceptor $r2;
        int i0;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $r2 = virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>(i0);

        return $r2;
    }

    public synchronized org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)
    {
        org.apache.http.protocol.BasicHttpProcessor $r1;
        int i0;
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpRequestInterceptor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $r2 = virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>(i0);

        return $r2;
    }

    public synchronized int getRequestInterceptorCount()
    {
        int $i0;
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $i0 = virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>();

        return $i0;
    }

    public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;
        org.apache.http.HttpResponseInterceptor r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.HttpResponseInterceptor;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int)
    {
        org.apache.http.protocol.BasicHttpProcessor $r1;
        org.apache.http.HttpResponseInterceptor r2;
        int i0;
        org.apache.http.impl.client.AbstractHttpClient r0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.HttpResponseInterceptor;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor,int)>(r2, i0);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void clearResponseInterceptors()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void removeResponseInterceptorByClass(java.lang.Class)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;
        java.lang.Class r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void removeResponseInterceptorByClass(java.lang.Class)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;
        org.apache.http.HttpRequestInterceptor r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.HttpRequestInterceptor;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int)
    {
        org.apache.http.protocol.BasicHttpProcessor $r1;
        int i0;
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpRequestInterceptor r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.HttpRequestInterceptor;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor,int)>(r2, i0);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void clearRequestInterceptors()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public synchronized void removeRequestInterceptorByClass(java.lang.Class)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.BasicHttpProcessor $r1;
        java.lang.Class r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r1.<org.apache.http.protocol.BasicHttpProcessor: void removeRequestInterceptorByClass(java.lang.Class)>(r2);

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor> = null;

        return;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpResponse $r2;
        org.apache.http.client.methods.HttpUriRequest r1;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>(r1, null);

        return $r2;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.HttpResponse $r4;
        org.apache.http.client.methods.HttpUriRequest r0;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.HttpHost $r2;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r3 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r5;

     label1:
        $r2 = staticinvoke <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest)>(r0);

        $r4 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r2, r0, r3);

        return $r4;
    }

    private static org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest) throws org.apache.http.client.ClientProtocolException
    {
        org.apache.http.client.ClientProtocolException $r3;
        org.apache.http.client.methods.HttpUriRequest r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.net.URI $r1;
        java.lang.String $r7;
        org.apache.http.HttpHost $r2, r8;
        boolean $z0;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r8 = null;

        $r1 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

        $z0 = virtualinvoke $r1.<java.net.URI: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.http.client.utils.URIUtils: org.apache.http.HttpHost extractHost(java.net.URI)>($r1);

        r8 = $r2;

        if $r2 != null goto label1;

        $r3 = new org.apache.http.client.ClientProtocolException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URI does not specify a valid host name: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.http.client.ClientProtocolException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return r8;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpResponse $r3;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, null);

        return $r3;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.conn.ConnectionKeepAliveStrategy $r8;
        org.apache.http.protocol.DefaultedHttpContext $r4;
        org.apache.http.conn.routing.HttpRoutePlanner $r9, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.conn.ClientConnectionManager $r6;
        org.apache.http.HttpRequest r0;
        java.lang.Exception $r30;
        org.apache.http.client.BackoffManager $r20;
        org.apache.http.HttpException $r28, $r33;
        org.apache.http.client.AuthenticationStrategy $r13, $r14;
        org.apache.http.client.ClientProtocolException $r29;
        java.lang.Throwable $r35;
        org.apache.http.client.RequestDirector $r17;
        org.apache.http.protocol.HttpRequestExecutor $r5;
        org.apache.http.conn.routing.HttpRoute $r25;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.client.HttpRequestRetryHandler $r11;
        java.io.IOException $r32;
        org.apache.http.protocol.HttpProcessor $r10;
        java.lang.RuntimeException $r34;
        org.apache.http.client.UserTokenHandler $r15;
        java.lang.IllegalArgumentException $r27;
        org.apache.http.client.ConnectionBackoffStrategy $r19;
        java.lang.reflect.UndeclaredThrowableException $r31;
        org.apache.http.client.RedirectStrategy $r12;
        org.apache.http.protocol.HttpContext $r2, r3, r36;
        org.apache.http.ConnectionReuseStrategy $r7;
        org.apache.http.params.HttpParams $r16, $r23;
        org.apache.http.HttpResponse $r22, $r26;
        java.lang.Object $r24;
        org.apache.http.HttpHost r21, $r37;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r21 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r27;

     label01:
        entermonitor r1;

     label02:
        $r2 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpContext createHttpContext()>();

        if r3 != null goto label03;

        r36 = $r2;

        goto label04;

     label03:
        $r4 = new org.apache.http.protocol.DefaultedHttpContext;

        specialinvoke $r4.<org.apache.http.protocol.DefaultedHttpContext: void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext)>(r3, $r2);

        r36 = $r4;

     label04:
        $r5 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()>();

        $r6 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r7 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>();

        $r8 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>();

        $r9 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>();

        $r10 = specialinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpProcessor getProtocolProcessor()>();

        $r11 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()>();

        $r12 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectStrategy getRedirectStrategy()>();

        $r13 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy getTargetAuthenticationStrategy()>();

        $r14 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationStrategy getProxyAuthenticationStrategy()>();

        $r15 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()>();

        $r16 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>(r0);

        $r17 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>($r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16);

        $r18 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>();

        $r19 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.ConnectionBackoffStrategy getConnectionBackoffStrategy()>();

        $r20 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.BackoffManager getBackoffManager()>();

        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r35 := @caughtexception;

        exitmonitor r1;

     label07:
        throw $r35;

     label08:
        if $r19 == null goto label22;

        if $r20 == null goto label22;

        if r21 == null goto label09;

        $r37 = r21;

        goto label10;

     label09:
        $r23 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>(r0);

        $r24 = interfaceinvoke $r23.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.default-host");

        $r37 = (org.apache.http.HttpHost) $r24;

     label10:
        $r25 = interfaceinvoke $r18.<org.apache.http.conn.routing.HttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r37, r0, r36);

     label11:
        $r26 = interfaceinvoke $r17.<org.apache.http.client.RequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r21, r0, r36);

     label12:
        goto label19;

     label13:
        $r34 := @caughtexception;

        $z4 = interfaceinvoke $r19.<org.apache.http.client.ConnectionBackoffStrategy: boolean shouldBackoff(java.lang.Throwable)>($r34);

        if $z4 == 0 goto label14;

        interfaceinvoke $r20.<org.apache.http.client.BackoffManager: void backOff(org.apache.http.conn.routing.HttpRoute)>($r25);

     label14:
        throw $r34;

     label15:
        $r30 := @caughtexception;

        $z1 = interfaceinvoke $r19.<org.apache.http.client.ConnectionBackoffStrategy: boolean shouldBackoff(java.lang.Throwable)>($r30);

        if $z1 == 0 goto label16;

        interfaceinvoke $r20.<org.apache.http.client.BackoffManager: void backOff(org.apache.http.conn.routing.HttpRoute)>($r25);

     label16:
        $z2 = $r30 instanceof org.apache.http.HttpException;

        if $z2 == 0 goto label17;

        $r33 = (org.apache.http.HttpException) $r30;

        throw $r33;

     label17:
        $z3 = $r30 instanceof java.io.IOException;

        if $z3 == 0 goto label18;

        $r32 = (java.io.IOException) $r30;

        throw $r32;

     label18:
        $r31 = new java.lang.reflect.UndeclaredThrowableException;

        specialinvoke $r31.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>($r30);

        throw $r31;

     label19:
        $z0 = interfaceinvoke $r19.<org.apache.http.client.ConnectionBackoffStrategy: boolean shouldBackoff(org.apache.http.HttpResponse)>($r26);

        if $z0 == 0 goto label20;

        interfaceinvoke $r20.<org.apache.http.client.BackoffManager: void backOff(org.apache.http.conn.routing.HttpRoute)>($r25);

        goto label21;

     label20:
        interfaceinvoke $r20.<org.apache.http.client.BackoffManager: void probe(org.apache.http.conn.routing.HttpRoute)>($r25);

     label21:
        return $r26;

     label22:
        $r22 = interfaceinvoke $r17.<org.apache.http.client.RequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r21, r0, r36);

     label23:
        return $r22;

     label24:
        $r28 := @caughtexception;

        $r29 = new org.apache.http.client.ClientProtocolException;

        specialinvoke $r29.<org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)>($r28);

        throw $r29;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.RuntimeException from label11 to label12 with label13;
        catch java.lang.Exception from label11 to label12 with label15;
        catch org.apache.http.HttpException from label08 to label21 with label24;
        catch org.apache.http.HttpException from label22 to label23 with label24;
    }

    protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)
    {
        org.apache.http.conn.ClientConnectionManager r2;
        org.apache.http.client.AuthenticationHandler r9, r10;
        org.apache.http.protocol.HttpRequestExecutor r1;
        org.apache.http.protocol.HttpProcessor r6;
        org.apache.http.client.UserTokenHandler r11;
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.ConnectionKeepAliveStrategy r4;
        org.apache.http.ConnectionReuseStrategy r3;
        org.apache.http.params.HttpParams r12;
        org.apache.http.impl.client.AbstractHttpClient r13;
        org.apache.http.conn.routing.HttpRoutePlanner r5;
        org.apache.http.client.HttpRequestRetryHandler r7;
        org.apache.http.client.RedirectHandler r8;

        r13 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestExecutor;

        r2 := @parameter1: org.apache.http.conn.ClientConnectionManager;

        r3 := @parameter2: org.apache.http.ConnectionReuseStrategy;

        r4 := @parameter3: org.apache.http.conn.ConnectionKeepAliveStrategy;

        r5 := @parameter4: org.apache.http.conn.routing.HttpRoutePlanner;

        r6 := @parameter5: org.apache.http.protocol.HttpProcessor;

        r7 := @parameter6: org.apache.http.client.HttpRequestRetryHandler;

        r8 := @parameter7: org.apache.http.client.RedirectHandler;

        r9 := @parameter8: org.apache.http.client.AuthenticationHandler;

        r10 := @parameter9: org.apache.http.client.AuthenticationHandler;

        r11 := @parameter10: org.apache.http.client.UserTokenHandler;

        r12 := @parameter11: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.client.DefaultRequestDirector;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12);

        return $r0;
    }

    protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectStrategy, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)
    {
        org.apache.http.conn.ClientConnectionManager r3;
        org.apache.http.client.AuthenticationHandler r10, r11;
        org.apache.http.protocol.HttpRequestExecutor r2;
        org.apache.http.protocol.HttpProcessor r7;
        org.apache.http.client.UserTokenHandler r12;
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.client.RedirectStrategy r9;
        org.apache.http.conn.ConnectionKeepAliveStrategy r5;
        org.apache.http.ConnectionReuseStrategy r4;
        org.apache.http.params.HttpParams r13;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.conn.routing.HttpRoutePlanner r6;
        org.apache.commons.logging.Log $r14;
        org.apache.http.client.HttpRequestRetryHandler r8;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.protocol.HttpRequestExecutor;

        r3 := @parameter1: org.apache.http.conn.ClientConnectionManager;

        r4 := @parameter2: org.apache.http.ConnectionReuseStrategy;

        r5 := @parameter3: org.apache.http.conn.ConnectionKeepAliveStrategy;

        r6 := @parameter4: org.apache.http.conn.routing.HttpRoutePlanner;

        r7 := @parameter5: org.apache.http.protocol.HttpProcessor;

        r8 := @parameter6: org.apache.http.client.HttpRequestRetryHandler;

        r9 := @parameter7: org.apache.http.client.RedirectStrategy;

        r10 := @parameter8: org.apache.http.client.AuthenticationHandler;

        r11 := @parameter9: org.apache.http.client.AuthenticationHandler;

        r12 := @parameter10: org.apache.http.client.UserTokenHandler;

        r13 := @parameter11: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.client.DefaultRequestDirector;

        $r14 = r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log>;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.commons.logging.Log,org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>($r14, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13);

        return $r0;
    }

    protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectStrategy, org.apache.http.client.AuthenticationStrategy, org.apache.http.client.AuthenticationStrategy, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)
    {
        org.apache.http.conn.ClientConnectionManager r3;
        org.apache.http.protocol.HttpRequestExecutor r2;
        org.apache.http.protocol.HttpProcessor r7;
        org.apache.http.client.UserTokenHandler r12;
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.client.RedirectStrategy r9;
        org.apache.http.conn.ConnectionKeepAliveStrategy r5;
        org.apache.http.client.AuthenticationStrategy r10, r11;
        org.apache.http.ConnectionReuseStrategy r4;
        org.apache.http.params.HttpParams r13;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.conn.routing.HttpRoutePlanner r6;
        org.apache.commons.logging.Log $r14;
        org.apache.http.client.HttpRequestRetryHandler r8;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.protocol.HttpRequestExecutor;

        r3 := @parameter1: org.apache.http.conn.ClientConnectionManager;

        r4 := @parameter2: org.apache.http.ConnectionReuseStrategy;

        r5 := @parameter3: org.apache.http.conn.ConnectionKeepAliveStrategy;

        r6 := @parameter4: org.apache.http.conn.routing.HttpRoutePlanner;

        r7 := @parameter5: org.apache.http.protocol.HttpProcessor;

        r8 := @parameter6: org.apache.http.client.HttpRequestRetryHandler;

        r9 := @parameter7: org.apache.http.client.RedirectStrategy;

        r10 := @parameter8: org.apache.http.client.AuthenticationStrategy;

        r11 := @parameter9: org.apache.http.client.AuthenticationStrategy;

        r12 := @parameter10: org.apache.http.client.UserTokenHandler;

        r13 := @parameter11: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.client.DefaultRequestDirector;

        $r14 = r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log>;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.commons.logging.Log,org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>($r14, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13);

        return $r0;
    }

    protected org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)
    {
        org.apache.http.impl.client.ClientParamsStack $r0;
        org.apache.http.params.HttpParams $r2, $r4;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.HttpRequest r3;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r3 := @parameter0: org.apache.http.HttpRequest;

        $r0 = new org.apache.http.impl.client.ClientParamsStack;

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>();

        $r4 = interfaceinvoke r3.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        specialinvoke $r0.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>(null, $r2, $r4, null);

        return $r0;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Object $r3;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.client.ResponseHandler;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.impl.client.AbstractHttpClient r2;
        java.lang.Object $r5;
        org.apache.http.client.methods.HttpUriRequest r0;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.HttpHost $r1;

        r2 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r3 := @parameter1: org.apache.http.client.ResponseHandler;

        r4 := @parameter2: org.apache.http.protocol.HttpContext;

        $r1 = staticinvoke <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest)>(r0);

        $r5 = virtualinvoke r2.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>($r1, r0, r3, r4);

        return $r5;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Object $r4;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r1;
        boolean $z0, $z1;
        org.apache.http.HttpEntity $r7, $r15;
        java.io.IOException $r12;
        java.lang.RuntimeException $r13;
        java.lang.IllegalArgumentException $r8;
        org.apache.http.HttpRequest r3;
        java.lang.reflect.UndeclaredThrowableException $r11;
        java.lang.Exception $r9, $r14;
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.HttpResponse $r5;
        java.lang.Object $r6;
        org.apache.commons.logging.Log $r10;
        org.apache.http.client.ResponseHandler r0;
        org.apache.http.HttpHost r2;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.HttpHost;

        r3 := @parameter1: org.apache.http.HttpRequest;

        r0 := @parameter2: org.apache.http.client.ResponseHandler;

        r4 := @parameter3: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response handler must not be null.");

        throw $r8;

     label01:
        $r5 = virtualinvoke r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r2, r3, r4);

     label02:
        $r6 = interfaceinvoke r0.<org.apache.http.client.ResponseHandler: java.lang.Object handleResponse(org.apache.http.HttpResponse)>($r5);

     label03:
        goto label11;

     label04:
        $r14 := @caughtexception;

        $r15 = interfaceinvoke $r5.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

     label05:
        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r15);

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        $r10 = r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Error consuming content after an exception.", $r9);

     label08:
        $z0 = $r14 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label09;

        $r13 = (java.lang.RuntimeException) $r14;

        throw $r13;

     label09:
        $z1 = $r14 instanceof java.io.IOException;

        if $z1 == 0 goto label10;

        $r12 = (java.io.IOException) $r14;

        throw $r12;

     label10:
        $r11 = new java.lang.reflect.UndeclaredThrowableException;

        specialinvoke $r11.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>($r14);

        throw $r11;

     label11:
        $r7 = interfaceinvoke $r5.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r7);

        return $r6;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label05 to label06 with label07;
    }
}
