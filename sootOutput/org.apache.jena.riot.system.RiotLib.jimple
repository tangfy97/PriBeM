public class org.apache.jena.riot.system.RiotLib extends java.lang.Object
{
    private static final java.lang.String bNodeLabelStart;
    private static final boolean skolomizedBNodes;
    private static org.apache.jena.riot.system.ParserProfile profile;

    public void <init>()
    {
        org.apache.jena.riot.system.RiotLib r0;

        r0 := @this: org.apache.jena.riot.system.RiotLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Node createIRIorBNode(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r1, $r5;
        com.hp.hpl.jena.rdf.model.AnonId $r4;
        int $i0;
        java.lang.String r0, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotLib: boolean isBNodeIRI(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = "_:";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r4.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r3);

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r4);

        return $r5;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        return $r1;
    }

    public static boolean isBNodeIRI(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = <org.apache.jena.riot.system.RiotLib: boolean skolomizedBNodes>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("_:");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static com.hp.hpl.jena.graph.Node parse(java.lang.String)
    {
        org.apache.jena.riot.system.ParserProfile $r3;
        com.hp.hpl.jena.graph.Node $r4;
        org.apache.jena.riot.tokens.Token $r2;
        org.apache.jena.riot.tokens.Tokenizer $r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerString(java.lang.String)>(r0);

        $z0 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: org.apache.jena.riot.tokens.Token next()>();

        $r3 = <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile>;

        $r4 = interfaceinvoke $r3.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node,org.apache.jena.riot.tokens.Token)>(null, $r2);

        $z1 = interfaceinvoke $r1.<org.apache.jena.riot.tokens.Tokenizer: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String has more than one token in it: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lorg/apache/jena/riot/system/RiotLib;", $r8);

     label2:
        return $r4;
    }

    public static org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang, java.lang.String)
    {
        org.apache.jena.riot.Lang r0;
        org.apache.jena.riot.system.ErrorHandler $r2;
        org.apache.jena.riot.system.ParserProfile $r3;
        java.lang.String r1;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler getDefaultErrorHandler()>();

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.ErrorHandler)>(r0, r1, $r2);

        return $r3;
    }

    public static org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.Lang r0, $r1, $r5, $r6;
        org.apache.jena.riot.system.ParserProfile $r4, $r7, $r8;
        org.apache.jena.riot.system.ErrorHandler r3;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r1, r0);

        if $z0 != 0 goto label1;

        $r5 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $z1 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r5, r0);

        if $z1 == 0 goto label2;

     label1:
        $z3 = <org.apache.jena.riot.SysRIOT: boolean strictMode>;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>(r2, 0, $z3, r3);

        return $r4;

     label2:
        $r6 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        $z2 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r6, r0);

        if $z2 == 0 goto label3;

        $r8 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>(r2, 0, 1, r3);

        return $r8;

     label3:
        $r7 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>(r2, 1, 1, r3);

        return $r7;
    }

    public static org.apache.jena.riot.system.ParserProfile profile(java.lang.String, boolean, boolean, org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.ParserProfileChecker $r6;
        org.apache.jena.riot.system.Prologue $r1, $r7, r11;
        org.apache.jena.riot.system.IRIResolver $r3, $r10;
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.system.PrefixMap $r2, $r8;
        org.apache.jena.riot.system.ErrorHandler r5;
        java.lang.String r9;
        boolean z0, z1;
        org.apache.jena.riot.system.ParserProfileBase $r4;

        r9 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r5 := @parameter3: org.apache.jena.riot.system.ErrorHandler;

        $r0 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.lang.LabelToNode createLabelToNode()>();

        if z0 == 0 goto label1;

        $r7 = new org.apache.jena.riot.system.Prologue;

        $r8 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap createForInput()>();

        $r10 = staticinvoke <org.apache.jena.riot.system.IRIResolver: org.apache.jena.riot.system.IRIResolver create(java.lang.String)>(r9);

        specialinvoke $r7.<org.apache.jena.riot.system.Prologue: void <init>(org.apache.jena.riot.system.PrefixMap,org.apache.jena.riot.system.IRIResolver)>($r8, $r10);

        r11 = $r7;

        goto label2;

     label1:
        $r1 = new org.apache.jena.riot.system.Prologue;

        $r2 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap createForInput()>();

        $r3 = staticinvoke <org.apache.jena.riot.system.IRIResolver: org.apache.jena.riot.system.IRIResolver createNoResolve()>();

        specialinvoke $r1.<org.apache.jena.riot.system.Prologue: void <init>(org.apache.jena.riot.system.PrefixMap,org.apache.jena.riot.system.IRIResolver)>($r2, $r3);

        r11 = $r1;

     label2:
        if z1 == 0 goto label3;

        $r6 = new org.apache.jena.riot.system.ParserProfileChecker;

        specialinvoke $r6.<org.apache.jena.riot.system.ParserProfileChecker: void <init>(org.apache.jena.riot.system.Prologue,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.lang.LabelToNode)>(r11, r5, $r0);

        return $r6;

     label3:
        $r4 = new org.apache.jena.riot.system.ParserProfileBase;

        specialinvoke $r4.<org.apache.jena.riot.system.ParserProfileBase: void <init>(org.apache.jena.riot.system.Prologue,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.lang.LabelToNode)>(r11, r5, $r0);

        return $r4;
    }

    public static java.util.Collection triplesOfSubject(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        java.util.List $r4;
        com.hp.hpl.jena.graph.Node r1, $r2, $r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: java.util.List triples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, $r3, $r2);

        return $r4;
    }

    public static java.util.List triples(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.graph.Graph r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.jena.riot.system.RiotLib: void accTriples(java.util.Collection,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r0, r1, r2, r3, r4);

        return $r0;
    }

    public static long countTriples(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        long $l0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

     label1:
        $l0 = staticinvoke <org.apache.jena.atlas.iterator.Iter: long count(java.util.Iterator)>($r4);

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return $l0;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void accTriples(java.util.Collection, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r5 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter2: com.hp.hpl.jena.graph.Node;

        r2 := @parameter3: com.hp.hpl.jena.graph.Node;

        r3 := @parameter4: com.hp.hpl.jena.graph.Node;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Triple triple1(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return null;

     label3:
        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r5;

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

     label4:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return null;

     label5:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return r7;

     label6:
        $r6 := @caughtexception;

     label7:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static boolean strSafeFor(java.lang.String, char)
    {
        int $i1, $i2, $i4;
        char c0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i2);

        $i4 = (int) -1;

        if $i1 != $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void writeBase(org.apache.jena.atlas.io.IndentedWriter, java.lang.String)
    {
        java.lang.String r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("@base ");

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void pad(int)>(15);

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("<");

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(r0);

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(">");

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" .");

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label1:
        return;
    }

    public static void writePrefixes(org.apache.jena.atlas.io.IndentedWriter, org.apache.jena.riot.system.PrefixMap)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.jena.atlas.io.IndentedWriter r6;
        org.apache.jena.riot.system.PrefixMap r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0, $z1;

        r6 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r0 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        if r0 == null goto label2;

        $z0 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: java.util.Map getMappingCopyStr()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("@prefix ");

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r8);

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(": ");

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void pad(int)>(15);

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("<");

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r10);

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(">");

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" .");

        virtualinvoke r6.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        goto label1;

     label2:
        return;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph dataset(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createOneGraph(com.hp.hpl.jena.graph.Graph)>(r0);

        return $r1;
    }

    public static org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        org.apache.jena.riot.system.PrefixMap $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r3 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap create(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        return $r3;
    }

    private static int calcWidth(org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2, $r6;
        org.apache.jena.riot.system.PrefixMap r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r3, $r4, $r5, r7;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.jena.riot.system.PrefixMap;

        r7 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.riot.writer.WriterConst: java.lang.String rdfNS>;

        $z0 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: boolean contains(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r6 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_type>;

        $z1 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r4 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: java.lang.String abbreviate(java.lang.String)>($r3);

        if $r4 != null goto label2;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = $i1 + 2;

        return $i2;

     label2:
        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        return $i0;
    }

    public static int calcWidth(org.apache.jena.riot.system.PrefixMap, java.lang.String, java.util.Collection, int, int)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.hp.hpl.jena.graph.Node r3, r6;
        org.apache.jena.riot.system.PrefixMap r4;
        int i0, $i1, i2, i3;
        java.lang.Object $r2;
        java.lang.String r5;
        boolean $z0, $z1;

        r4 := @parameter0: org.apache.jena.riot.system.PrefixMap;

        r5 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Collection;

        i0 := @parameter3: int;

        i2 := @parameter4: int;

        r6 = null;

        i3 = i0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Node) $r2;

        if r6 == null goto label2;

        $z0 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $i1 = staticinvoke <org.apache.jena.riot.system.RiotLib: int calcWidth(org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.graph.Node)>(r4, r5, r3);

        if $i1 <= i2 goto label3;

        goto label1;

     label3:
        if i3 >= $i1 goto label4;

        i3 = $i1;

     label4:
        r6 = r3;

        goto label1;

     label5:
        return i3;
    }

    public static int calcWidthTriples(org.apache.jena.riot.system.PrefixMap, java.lang.String, java.util.Collection, int, int)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.hp.hpl.jena.graph.Node $r4, r7;
        com.hp.hpl.jena.graph.Triple r3;
        org.apache.jena.riot.system.PrefixMap r5;
        int i0, $i1, i2, i3;
        java.lang.Object $r2;
        java.lang.String r6;
        boolean $z0, $z1;

        r5 := @parameter0: org.apache.jena.riot.system.PrefixMap;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Collection;

        i0 := @parameter3: int;

        i2 := @parameter4: int;

        r7 = null;

        i3 = i0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        if r7 == null goto label2;

        $z0 = virtualinvoke r7.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $i1 = staticinvoke <org.apache.jena.riot.system.RiotLib: int calcWidth(org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.graph.Node)>(r5, r6, $r4);

        if $i1 <= i2 goto label3;

        goto label1;

     label3:
        if i3 >= $i1 goto label4;

        i3 = $i1;

     label4:
        r7 = $r4;

        goto label1;

     label5:
        return i3;
    }

    public static org.apache.jena.atlas.io.IndentedWriter create(java.io.Writer)
    {
        java.io.Writer r1;
        org.apache.jena.riot.system.RiotLib$IndentedWriterWriter $r0;

        r1 := @parameter0: java.io.Writer;

        $r0 = new org.apache.jena.riot.system.RiotLib$IndentedWriterWriter;

        specialinvoke $r0.<org.apache.jena.riot.system.RiotLib$IndentedWriterWriter: void <init>(java.io.Writer)>(r1);

        return $r0;
    }

    public static org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.riot.system.PrefixMap $r2;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r2 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap create(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        return $r2;
    }

    public static org.apache.jena.riot.writer.WriterGraphRIOTBase adapter(org.apache.jena.riot.WriterDatasetRIOT)
    {
        org.apache.jena.riot.WriterDatasetRIOT r1;
        org.apache.jena.riot.system.RiotLib$WriterAdapter $r0;

        r1 := @parameter0: org.apache.jena.riot.WriterDatasetRIOT;

        $r0 = new org.apache.jena.riot.system.RiotLib$WriterAdapter;

        specialinvoke $r0.<org.apache.jena.riot.system.RiotLib$WriterAdapter: void <init>(org.apache.jena.riot.WriterDatasetRIOT)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.jena.riot.Lang $r1;
        org.apache.jena.riot.system.ParserProfile $r2, $r3;
        org.apache.jena.riot.system.Prologue $r4;
        org.apache.jena.riot.system.PrefixMap $r5;
        java.lang.String $r6, $r7, $r8;
        com.hp.hpl.jena.sparql.util.Symbol $r0;
        boolean $z0;

        <org.apache.jena.riot.system.RiotLib: java.lang.String bNodeLabelStart> = "_:";

        $r0 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels>;

        $z0 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r0);

        <org.apache.jena.riot.system.RiotLib: boolean skolomizedBNodes> = $z0;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        $r2 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.ErrorHandler)>($r1, null, null);

        <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile> = $r2;

        $r3 = <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile>;

        $r4 = interfaceinvoke $r3.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.riot.system.Prologue getPrologue()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.PrefixMap getPrefixMap()>();

        $r6 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfPrefix>;

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("rdf", $r6);

        $r7 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfsPrefix>;

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("rdfs", $r7);

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema#");

        $r8 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String owlPrefix>;

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("owl", $r8);

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("fn", "http://www.w3.org/2005/xpath-functions#");

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("op", "http://www.w3.org/2005/xpath-functions#");

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("ex", "http://example/ns#");

        interfaceinvoke $r5.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>("", "http://example/");

        return;
    }
}
