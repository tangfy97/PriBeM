public class org.apache.log4j.rewrite.ReflectionRewritePolicy extends java.lang.Object implements org.apache.log4j.rewrite.RewritePolicy
{
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.apache.log4j.rewrite.ReflectionRewritePolicy r0;

        r0 := @this: org.apache.log4j.rewrite.ReflectionRewritePolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.log4j.spi.LoggingEvent rewrite(org.apache.log4j.spi.LoggingEvent)
    {
        java.beans.PropertyDescriptor[] $r7;
        org.apache.log4j.rewrite.ReflectionRewritePolicy r34;
        java.util.Map $r3;
        org.apache.log4j.Level $r12;
        java.lang.reflect.Method $r18;
        boolean $z0, $z1;
        org.apache.log4j.Category $r10, $r37;
        java.lang.Exception $r26, $r27;
        java.beans.PropertyDescriptor $r17, $r21, $r24, $r30;
        org.apache.log4j.spi.LocationInfo $r16;
        java.lang.Object[] $r19;
        java.util.HashMap $r2;
        long $l2;
        java.lang.StringBuffer $r28, $r29, $r32;
        java.beans.BeanInfo $r6;
        int $i0, $i1, i3;
        java.lang.String $r9, $r11, $r13, $r15, $r22, $r23, $r25, $r31, $r33;
        org.apache.log4j.spi.LoggingEvent r0, $r8;
        org.apache.log4j.spi.ThrowableInformation $r14;
        java.lang.Object $r1, $r20, r35;
        java.lang.Class $r4, $r5, $r36;

        r34 := @this: org.apache.log4j.rewrite.ReflectionRewritePolicy;

        r0 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label16;

        r35 = $r1;

        $r2 = new java.util.HashMap;

        $r3 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.util.Map getProperties()>();

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>($r3);

     label01:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = <org.apache.log4j.rewrite.ReflectionRewritePolicy: java.lang.Class class$java$lang$Object>;

        if $r5 != null goto label02;

        $r36 = staticinvoke <org.apache.log4j.rewrite.ReflectionRewritePolicy: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.apache.log4j.rewrite.ReflectionRewritePolicy: java.lang.Class class$java$lang$Object> = $r36;

        goto label03;

     label02:
        $r36 = <org.apache.log4j.rewrite.ReflectionRewritePolicy: java.lang.Class class$java$lang$Object>;

     label03:
        $r6 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>($r4, $r36);

        $r7 = interfaceinvoke $r6.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        $i0 = lengthof $r7;

        if $i0 <= 0 goto label14;

        i3 = 0;

     label04:
        $i1 = lengthof $r7;

        if i3 >= $i1 goto label10;

     label05:
        $r17 = $r7[i3];

        $r18 = virtualinvoke $r17.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r19 = (java.lang.Object[]) null;

        $r20 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r19);

        $r22 = "message";

        $r21 = $r7[i3];

        $r23 = virtualinvoke $r21.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r23);

        if $z1 == 0 goto label06;

        r35 = $r20;

        goto label07;

     label06:
        $r24 = $r7[i3];

        $r25 = virtualinvoke $r24.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r20);

     label07:
        goto label09;

     label08:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to evaluate property ");

        $r30 = $r7[i3];

        $r31 = virtualinvoke $r30.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r33, $r27);

     label09:
        i3 = i3 + 1;

        goto label04;

     label10:
        $r8 = new org.apache.log4j.spi.LoggingEvent;

        $r9 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getFQNOfLoggerClass()>();

        $r10 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        if $r10 == null goto label11;

        $r37 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        goto label12;

     label11:
        $r11 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r37 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r11);

     label12:
        $l2 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: long getTimeStamp()>();

        $r12 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r13 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        $r14 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        $r15 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        $r16 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        specialinvoke $r8.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Level,java.lang.Object,java.lang.String,org.apache.log4j.spi.ThrowableInformation,java.lang.String,org.apache.log4j.spi.LocationInfo,java.util.Map)>($r9, $r37, $l2, $r12, r35, $r13, $r14, $r15, $r16, $r2);

     label13:
        return $r8;

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>("Unable to get property descriptors", $r26);

     label16:
        return r0;

        catch java.lang.Exception from label05 to label07 with label08;
        catch java.lang.Exception from label01 to label13 with label15;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
