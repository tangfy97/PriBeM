public final class org.waveprotocol.wave.client.editor.extract.SelectionMatcher extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.util.Point contentStart;
    private final org.waveprotocol.wave.model.document.util.Point contentEnd;
    private com.google.gwt.dom.client.Node htmlRootContainer;
    private org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart;
    private org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd;
    static final boolean $assertionsDisabled;

    org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint beforeNode(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl $r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type $r3;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        $r0 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl;

        $r3 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type BEFORE_NODE>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type)>(r1, r2, $r3);

        return $r0;
    }

    org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint afterNode(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl $r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type $r3;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        $r0 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl;

        $r3 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type AFTER_NODE>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type)>(r1, r2, $r3);

        return $r0;
    }

    org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint atStart(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl $r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type $r3;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        $r0 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl;

        $r3 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type AT_START>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type)>(r1, r2, $r3);

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.model.document.util.Point r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart> = r1;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd> = r2;

        return;
    }

    public void maybeNoteHtml(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r2;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        com.google.gwt.dom.client.Node r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter1: com.google.gwt.dom.client.Node;

        if r0 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Source must be non-null");

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r1 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "Source must have parent.");

        $z0 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r6 = r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: com.google.gwt.dom.client.Node htmlRootContainer>;

        $z1 = virtualinvoke $r6.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>(r5);

        if $z1 != 0 goto label5;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Reference node must be attached");

        throw $r7;

     label5:
        $r3 = r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart>;

        if $r3 != null goto label6;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetStartAtBoundary(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetStartInText(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetStartInEmptyElement(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

     label6:
        $r4 = r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd>;

        if $r4 != null goto label7;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetEndAtBoundary(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetEndInText(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeSetEndInEmptyElement(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r0, r5);

     label7:
        return;
    }

    public void noteSelectionInNode(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Element, boolean)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r13, $r16;
        org.waveprotocol.wave.client.editor.content.ContentNode r3;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7, $r11;
        org.waveprotocol.wave.model.document.util.Point $r1, $r6, $r10, $r14;
        boolean $z0, $z1, $z2, $z3, z4;
        org.waveprotocol.wave.model.document.util.Point$El $r8, $r12;
        com.google.gwt.dom.client.Element r4;
        java.lang.Object $r2, $r15;
        com.google.gwt.dom.client.Node $r5, $r9, $r17, $r18;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter1: com.google.gwt.dom.client.Element;

        z4 := @parameter2: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r2 == r3 goto label1;

        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r11 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r11, r3);

        $z3 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label4;

     label1:
        $z0 = virtualinvoke r4.<com.google.gwt.dom.client.Element: boolean hasChildNodes()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getLastChild()>();

        $r13 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint afterNode(com.google.gwt.dom.client.Node)>($r9);

        goto label3;

     label2:
        $r17 = (com.google.gwt.dom.client.Node) r4;

        $r13 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint atStart(com.google.gwt.dom.client.Node)>($r17);

     label3:
        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = $r13;

     label4:
        $r14 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r15 == r3 goto label5;

        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r7 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r7, r3);

        $z2 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label8;

     label5:
        $z1 = virtualinvoke r4.<com.google.gwt.dom.client.Element: boolean hasChildNodes()>();

        if $z1 == 0 goto label6;

        $r5 = virtualinvoke r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getLastChild()>();

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint afterNode(com.google.gwt.dom.client.Node)>($r5);

        goto label7;

     label6:
        $r18 = (com.google.gwt.dom.client.Node) r4;

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint atStart(com.google.gwt.dom.client.Node)>($r18);

     label7:
        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = $r16;

     label8:
        return;
    }

    public void setHtmlRootContainer(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: com.google.gwt.dom.client.Node;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: com.google.gwt.dom.client.Node htmlRootContainer> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getHtmlStart()
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r1, $r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint: org.waveprotocol.wave.model.document.util.Point getPoint()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.waveprotocol.wave.model.document.util.Point getHtmlEnd()
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r1, $r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint: org.waveprotocol.wave.model.document.util.Point getPoint()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private void maybeSetStartAtBoundary(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r10, $r11;
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r7;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3, $r6;
        com.google.gwt.dom.client.Node r9;
        org.waveprotocol.wave.model.document.util.Point $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r9 := @parameter1: com.google.gwt.dom.client.Node;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint beforeNode(com.google.gwt.dom.client.Node)>(r9);

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = $r11;

        goto label2;

     label1:
        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, $r7);

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint afterNode(com.google.gwt.dom.client.Node)>(r9);

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = $r10;

     label2:
        return;
    }

    private void maybeSetEndAtBoundary(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r10, $r11;
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r7;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3, $r6;
        com.google.gwt.dom.client.Node r9;
        org.waveprotocol.wave.model.document.util.Point $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r9 := @parameter1: com.google.gwt.dom.client.Node;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint beforeNode(com.google.gwt.dom.client.Node)>(r9);

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = $r11;

        goto label2;

     label1:
        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, $r7);

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint afterNode(com.google.gwt.dom.client.Node)>(r9);

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = $r10;

     label2:
        return;
    }

    private void maybeSetStartInEmptyElement(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: com.google.gwt.dom.client.Node;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint getCorespondingPointInEmptyElement(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>($r3, r1, r2);

        if $r4 == null goto label1;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = $r4;

     label1:
        return;
    }

    private void maybeSetEndInEmptyElement(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: com.google.gwt.dom.client.Node;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint getCorespondingPointInEmptyElement(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>($r3, r1, r2);

        if $r4 == null goto label1;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = $r4;

     label1:
        return;
    }

    private org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint getCorespondingPointInEmptyElement(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r6;
        org.waveprotocol.wave.model.document.util.Point$El $r3, $r8, $r10;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint $r5, $r9;
        com.google.gwt.dom.client.Element $r7;
        com.google.gwt.dom.client.Node r4;
        org.waveprotocol.wave.model.document.util.Point r2;
        boolean $z0, $z1, $z2;

        r6 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter2: com.google.gwt.dom.client.Node;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r1 != null goto label2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r0, null);

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z2 = r4 instanceof com.google.gwt.dom.client.Element;

        if $z2 == 0 goto label1;

        $r9 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r4, null);

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,org.waveprotocol.wave.model.document.util.Point)>(r6, $r10);

        return $r9;

     label1:
        $r5 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint;

        $r7 = virtualinvoke r4.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r7, r4);

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,org.waveprotocol.wave.model.document.util.Point)>(r6, $r8);

        return $r5;

     label2:
        return null;
    }

    private void maybeSetEndInText(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: com.google.gwt.dom.client.Node;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentEnd>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint matchTextSelection(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>($r3, r1, r2);

        if $r4 == null goto label1;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlEnd> = $r4;

     label1:
        return;
    }

    private void maybeSetStartInText(org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node r2;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: com.google.gwt.dom.client.Node;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point contentStart>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint matchTextSelection(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>($r3, r1, r2);

        if $r4 == null goto label1;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint htmlStart> = $r4;

     label1:
        return;
    }

    private org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint matchTextSelection(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r4;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint $r3;
        org.waveprotocol.wave.model.document.util.Point$Tx $r6;
        int $i0;
        java.lang.Object $r1;
        com.google.gwt.dom.client.Node r5;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1, $z2;

        r4 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter2: com.google.gwt.dom.client.Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r1 != r2 goto label2;

        $z1 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z2 = r5 instanceof com.google.gwt.dom.client.Text;

        if $z2 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r3 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r5, $i0);

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher,org.waveprotocol.wave.model.document.util.Point)>(r4, $r6);

        return $r3;

     label2:
        return null;
    }

    static com.google.gwt.dom.client.Node access$000(org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: com.google.gwt.dom.client.Node htmlRootContainer>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/SelectionMatcher;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.SelectionMatcher: boolean $assertionsDisabled> = $z1;

        return;
    }
}
