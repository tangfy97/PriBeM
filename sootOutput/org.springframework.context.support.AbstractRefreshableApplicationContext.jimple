public abstract class org.springframework.context.support.AbstractRefreshableApplicationContext extends org.springframework.context.support.AbstractApplicationContext
{
    private java.lang.Boolean allowBeanDefinitionOverriding;
    private java.lang.Boolean allowCircularReferences;
    private org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory;
    private final java.lang.Object beanFactoryMonitor;

    public void <init>()
    {
        java.lang.Object $r1;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor> = $r1;

        return;
    }

    public void <init>(org.springframework.context.ApplicationContext)
    {
        java.lang.Object $r2;
        org.springframework.context.ApplicationContext r1;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        r1 := @parameter0: org.springframework.context.ApplicationContext;

        specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void <init>(org.springframework.context.ApplicationContext)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor> = $r2;

        return;
    }

    public void setAllowBeanDefinitionOverriding(boolean)
    {
        java.lang.Boolean $r1;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;
        boolean z0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowBeanDefinitionOverriding> = $r1;

        return;
    }

    public void setAllowCircularReferences(boolean)
    {
        java.lang.Boolean $r1;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;
        boolean z0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowCircularReferences> = $r1;

        return;
    }

    protected final void refreshBeanFactory() throws org.springframework.beans.BeansException
    {
        java.lang.Throwable $r10;
        java.io.IOException $r4;
        org.springframework.context.ApplicationContextException $r5;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r8;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r1;
        java.lang.String $r2, $r7, $r9;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        $z0 = virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: boolean hasBeanFactory()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: void destroyBeans()>();

        virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: void closeBeanFactory()>();

     label1:
        $r1 = virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory createBeanFactory()>();

        $r2 = virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.String getId()>();

        virtualinvoke $r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setSerializationId(java.lang.String)>($r2);

        virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: void customizeBeanFactory(org.springframework.beans.factory.support.DefaultListableBeanFactory)>($r1);

        virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)>($r1);

        $r3 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor>;

        entermonitor $r3;

     label2:
        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory> = $r1;

        exitmonitor $r3;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r10;

     label6:
        $r4 := @caughtexception;

        $r5 = new org.springframework.context.ApplicationContextException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("I/O error parsing bean definition source for ");

        $r7 = virtualinvoke r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.String getDisplayName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.context.ApplicationContextException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.io.IOException from label1 to label6 with label6;
    }

    protected void cancelRefresh(org.springframework.beans.BeansException)
    {
        java.lang.Throwable $r5;
        java.lang.Object $r1;
        org.springframework.beans.BeansException r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r2, $r4;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        r3 := @parameter0: org.springframework.beans.BeansException;

        $r1 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        virtualinvoke $r4.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setSerializationId(java.lang.String)>(null);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        specialinvoke r0.<org.springframework.context.support.AbstractApplicationContext: void cancelRefresh(org.springframework.beans.BeansException)>(r3);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected final void closeBeanFactory()
    {
        java.lang.Throwable $r3;
        java.lang.Object $r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r2;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        virtualinvoke $r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setSerializationId(java.lang.String)>(null);

        r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory> = null;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final boolean hasBeanFactory()
    {
        java.lang.Throwable $r3;
        java.lang.Object $r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r2;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;
        boolean $z0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()
    {
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r4;
        java.lang.Object $r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r2, $r3;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        $r1 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Object beanFactoryMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        if $r2 != null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("BeanFactory not initialized or already closed - call \'refresh\' before accessing beans via the ApplicationContext");

        throw $r4;

     label2:
        $r3 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected org.springframework.beans.factory.support.DefaultListableBeanFactory createBeanFactory()
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r0;
        org.springframework.context.support.AbstractRefreshableApplicationContext r1;
        org.springframework.beans.factory.BeanFactory $r2;

        r1 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        $r0 = new org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r2 = virtualinvoke r1.<org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.BeanFactory getInternalParentBeanFactory()>();

        specialinvoke $r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>(org.springframework.beans.factory.BeanFactory)>($r2);

        return $r0;
    }

    protected void customizeBeanFactory(org.springframework.beans.factory.support.DefaultListableBeanFactory)
    {
        org.springframework.beans.factory.'annotation'.QualifierAnnotationAutowireCandidateResolver $r5;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer $r4;
        java.lang.Boolean $r1, $r2, $r6, $r7;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r3;
        org.springframework.context.support.AbstractRefreshableApplicationContext r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.context.support.AbstractRefreshableApplicationContext;

        r3 := @parameter0: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowBeanDefinitionOverriding>;

        if $r1 == null goto label1;

        $r7 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowBeanDefinitionOverriding>;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAllowBeanDefinitionOverriding(boolean)>($z1);

     label1:
        $r2 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowCircularReferences>;

        if $r2 == null goto label2;

        $r6 = r0.<org.springframework.context.support.AbstractRefreshableApplicationContext: java.lang.Boolean allowCircularReferences>;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAllowCircularReferences(boolean)>($z0);

     label2:
        $r4 = new org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        specialinvoke $r4.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: void <init>()>();

        virtualinvoke r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)>($r4);

        $r5 = new org.springframework.beans.factory.'annotation'.QualifierAnnotationAutowireCandidateResolver;

        specialinvoke $r5.<org.springframework.beans.factory.'annotation'.QualifierAnnotationAutowireCandidateResolver: void <init>()>();

        virtualinvoke r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>($r5);

        return;
    }

    protected abstract void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory) throws org.springframework.beans.BeansException, java.io.IOException;
}
