public class ucar.nc2.ft.point.standard.Evaluator extends java.lang.Object
{
    private java.lang.String constant;
    private ucar.nc2.Variable v;

    public static ucar.nc2.constants.FeatureType getFeatureType(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.util.Formatter)
    {
        java.lang.Object[] $r6;
        java.util.Formatter r2;
        java.lang.String r1, $r3, $r4;
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.constants.FeatureType $r5, r7;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Formatter;

        r7 = null;

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getLiteral(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.util.Formatter)>(r0, r1, r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType valueOf(java.lang.String)>($r4);

        r7 = $r5;

        if $r5 != null goto label1;

        if r2 == null goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r3;

        $r6[1] = r1;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Cant find Feature type %s from %s\n", $r6);

     label1:
        return r7;
    }

    public static java.lang.String getLiteral(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.util.Formatter)
    {
        java.lang.Object[] $r5;
        java.lang.String r0, $r2, $r3;
        ucar.nc2.dataset.NetcdfDataset r1;
        boolean $z0;
        java.util.Formatter r4;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Formatter;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(":");

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r3 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, $r2, null);

        if $r3 != null goto label1;

        if r4 == null goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Cant find global attribute %s\n", $r5);

     label1:
        return $r3;

     label2:
        return r0;
    }

    public static java.lang.String getVariableName(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.util.Formatter)
    {
        java.lang.Object[] $r5;
        java.util.Formatter r2;
        ucar.nc2.Variable $r4, r6;
        java.lang.String r1, $r3, $r7;
        ucar.nc2.dataset.NetcdfDataset r0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Formatter;

        r6 = null;

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getLiteral(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.util.Formatter)>(r0, r1, r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r3);

        r6 = $r4;

        if $r4 != null goto label1;

        if r2 == null goto label1;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r3;

        $r5[1] = r1;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Cant find Variable %s from %s\n", $r5);

     label1:
        if r6 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

     label3:
        return $r7;
    }

    public static ucar.nc2.Variable getVariableWithAttribute(ucar.nc2.dataset.NetcdfDataset, java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        java.lang.String r5, $r6;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r5 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r6 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r4, r5, null);

        if $r6 == null goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static ucar.nc2.Variable getVariableWithAttributeValue(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.lang.String)
    {
        ucar.nc2.Structure $r8;
        ucar.nc2.Variable $r9, r12, r13;
        java.lang.String r6, r7, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2, $r4;
        java.util.List $r1, $r3;
        java.lang.Object $r5, $r10;
        ucar.nc2.dataset.NetcdfDataset r0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.Variable) $r10;

        $r11 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r12, r6, null);

        if $r11 == null goto label2;

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 == 0 goto label2;

        return r12;

     label2:
        goto label1;

     label3:
        $r3 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (ucar.nc2.Variable) $r5;

        $z2 = r13 instanceof ucar.nc2.Structure;

        if $z2 == 0 goto label5;

        $r8 = (ucar.nc2.Structure) r13;

        $r9 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: ucar.nc2.Variable getVariableWithAttribute(ucar.nc2.Structure,java.lang.String,java.lang.String)>($r8, r6, r7);

        if null == $r9 goto label5;

        return $r9;

     label5:
        goto label4;

     label6:
        return null;
    }

    public static java.lang.String getVariableAttributeValue(ucar.nc2.dataset.NetcdfDataset, java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        java.lang.String r5, $r6;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r5 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r6 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r4, r5, null);

        if $r6 == null goto label2;

        return $r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.String getNameOfVariableWithAttribute(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.lang.String)
    {
        ucar.nc2.Variable $r3;
        java.lang.String r1, r2, $r4;
        ucar.nc2.dataset.NetcdfDataset r0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: ucar.nc2.Variable getVariableWithAttributeValue(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.lang.String)>(r0, r1, r2);

        if $r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: java.lang.String getShortName()>();

     label2:
        return $r4;
    }

    public static java.lang.String getNameOfVariableWithAttribute(ucar.nc2.Structure, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r2;
        ucar.nc2.Structure r0;
        java.util.List $r1;
        ucar.nc2.Attribute $r6;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        java.lang.String r5, $r7, r8, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.Structure;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r5);

        if $r6 == null goto label2;

        $r7 = virtualinvoke $r6.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getShortName()>();

        return $r9;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static ucar.nc2.Variable getVariableWithAttribute(ucar.nc2.Structure, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r2;
        ucar.nc2.Structure r0;
        java.util.List $r1;
        ucar.nc2.Attribute $r6;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        java.lang.String r5, $r7, r8;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.Structure;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r5);

        if $r6 == null goto label2;

        $r7 = virtualinvoke $r6.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.String getDimensionName(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.util.Formatter)
    {
        ucar.nc2.Dimension $r3;
        java.lang.String r1, $r4;
        ucar.nc2.dataset.NetcdfDataset r0;
        java.util.Formatter r2;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Formatter;

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: ucar.nc2.Dimension getDimension(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.util.Formatter)>(r0, r1, r2);

        if $r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<ucar.nc2.Dimension: java.lang.String getName()>();

     label2:
        return $r4;
    }

    public static ucar.nc2.Dimension getDimension(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.util.Formatter)
    {
        java.lang.Object[] $r5;
        ucar.nc2.Dimension $r4, r6;
        java.lang.String r1, $r3;
        ucar.nc2.dataset.NetcdfDataset r0;
        java.util.Formatter r2;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Formatter;

        r6 = null;

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getLiteral(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.util.Formatter)>(r0, r1, r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension findDimension(java.lang.String)>($r3);

        r6 = $r4;

        if $r4 != null goto label1;

        if r2 == null goto label1;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r3;

        $r5[1] = r1;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Cant find Variable %s from %s\n", $r5);

     label1:
        return r6;
    }

    public static ucar.nc2.Structure getStructureWithDimensions(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Dimension, ucar.nc2.Dimension)
    {
        java.util.Iterator $r2;
        ucar.nc2.Structure $r9;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        ucar.nc2.Dimension $r5, r6, $r7, r8;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r6 := @parameter1: ucar.nc2.Dimension;

        r8 := @parameter2: ucar.nc2.Dimension;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $z1 = r4 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r4.<ucar.nc2.Variable: int getRank()>();

        if $i0 != 2 goto label2;

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(0);

        $z2 = virtualinvoke $r5.<ucar.nc2.Dimension: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label2;

        $r7 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(1);

        $z3 = virtualinvoke $r7.<ucar.nc2.Dimension: boolean equals(java.lang.Object)>(r8);

        if $z3 == 0 goto label2;

        $r9 = (ucar.nc2.Structure) r4;

        return $r9;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static ucar.nc2.Structure getNestedStructure(ucar.nc2.Structure)
    {
        java.util.Iterator $r2;
        ucar.nc2.Structure r0, $r5;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.Structure;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $z1 = r4 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label2;

        $r5 = (ucar.nc2.Structure) r4;

        return $r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static boolean hasRecordStructure(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.ma2.DataType $r2, $r3;
        ucar.nc2.Variable $r1;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void <init>(ucar.nc2.Variable)
    {
        ucar.nc2.Variable r1;
        ucar.nc2.ft.point.standard.Evaluator r0;

        r0 := @this: ucar.nc2.ft.point.standard.Evaluator;

        r1 := @parameter0: ucar.nc2.Variable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.Evaluator: ucar.nc2.Variable v> = r1;

        return;
    }

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        ucar.nc2.ft.point.standard.Evaluator r0;

        r0 := @this: ucar.nc2.ft.point.standard.Evaluator;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.Evaluator: java.lang.String constant> = r1;

        return;
    }

    public java.lang.String getValue()
    {
        java.lang.String $r1, $r2;
        ucar.nc2.ft.point.standard.Evaluator r0;

        r0 := @this: ucar.nc2.ft.point.standard.Evaluator;

        $r1 = r0.<ucar.nc2.ft.point.standard.Evaluator: java.lang.String constant>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.ft.point.standard.Evaluator: java.lang.String constant>;

        return $r2;

     label1:
        return null;
    }
}
