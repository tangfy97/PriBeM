public class org.waveprotocol.box.server.frontend.ClientFrontendImpl extends java.lang.Object implements org.waveprotocol.box.server.frontend.ClientFrontend, org.waveprotocol.box.server.waveserver.WaveBus$Subscriber
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final java.util.concurrent.atomic.AtomicInteger channel_counter;
    private final org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider;
    private final org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo;

    public static org.waveprotocol.box.server.frontend.ClientFrontendImpl create(org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.waveserver.WaveBus, org.waveprotocol.box.server.frontend.WaveletInfo) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveBus r3;
        org.waveprotocol.box.server.waveserver.WaveletProvider r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r2;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl $r0;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r3 := @parameter1: org.waveprotocol.box.server.waveserver.WaveBus;

        r2 := @parameter2: org.waveprotocol.box.server.frontend.WaveletInfo;

        $r0 = new org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        specialinvoke $r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider,org.waveprotocol.box.server.frontend.WaveletInfo)>(r1, r2);

        interfaceinvoke r3.<org.waveprotocol.box.server.waveserver.WaveBus: void subscribe(org.waveprotocol.box.server.waveserver.WaveBus$Subscriber)>($r0);

        return $r0;
    }

    void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.frontend.WaveletInfo)
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider r1;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r0;
        org.waveprotocol.box.server.frontend.WaveletInfo r2;

        r0 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r2 := @parameter1: org.waveprotocol.box.server.frontend.WaveletInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider> = r1;

        r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo> = r2;

        return;
    }

    public void openRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdFilter, java.util.Collection, org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider $r51;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r20;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.util.logging.Log $r1, $r23, $r35, $r42, $r54, $r64, $r70, $r76;
        org.waveprotocol.wave.model.id.WaveletName $r33, $r49;
        org.waveprotocol.wave.model.id.WaveId r6;
        java.util.Set r80;
        java.lang.StringBuilder $r0, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r36, $r37, $r41, $r43, $r44, $r53, $r55, $r56, $r63, $r65, $r66, $r69, $r71, $r72, $r75, $r77, $r78;
        java.lang.Throwable $r61;
        org.waveprotocol.wave.model.id.WaveletId r48;
        org.waveprotocol.box.server.frontend.UserManager $r19;
        org.waveprotocol.wave.model.version.HashedVersion $r59;
        org.waveprotocol.wave.model.id.IdFilter r9;
        java.lang.String $r14, $r17, $r30, $r38, $r45, $r57, $r67, $r73, $r79;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r52;
        org.waveprotocol.box.server.waveserver.WaveServerException $r62, $r68, $r74;
        org.waveprotocol.box.server.frontend.WaveletInfo $r16, $r18, $r31, $r50;
        org.waveprotocol.box.server.frontend.WaveViewSubscription $r21;
        boolean $z0, $z1, $z2;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r15;
        java.util.Collection r12;
        org.waveprotocol.box.common.DeltaSequence $r39, $r46, $r58, $r60;
        int $i0;
        java.lang.Boolean $r40;
        java.util.Iterator $r32;
        java.lang.Object $r47;

        r15 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r6 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        r9 := @parameter2: org.waveprotocol.wave.model.id.IdFilter;

        r12 := @parameter3: java.util.Collection;

        r20 := @parameter4: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener;

        $r1 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("received openRequest from ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filter ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", known wavelets: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r14);

        if r3 != null goto label01;

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onFailure(java.lang.String)>("Not logged in");

        return;

     label01:
        $z0 = interfaceinvoke r12.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onFailure(java.lang.String)>("Known wavelets not supported");

        return;

     label02:
        $r16 = r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        virtualinvoke $r16.<org.waveprotocol.box.server.frontend.WaveletInfo: void initialiseWave(org.waveprotocol.wave.model.id.WaveId)>(r6);

     label03:
        goto label05;

     label04:
        $r74 := @caughtexception;

        $r76 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wave server failed lookup for ");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r76.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r79, $r74);

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onFailure(java.lang.String)>("Wave server failed to look up wave");

        return;

     label05:
        $r17 = specialinvoke r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: java.lang.String generateChannelID()>();

        $r18 = r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r19 = virtualinvoke $r18.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.UserManager getUserManager(org.waveprotocol.wave.model.wave.ParticipantId)>(r3);

        entermonitor $r19;

     label06:
        $r21 = virtualinvoke $r19.<org.waveprotocol.box.server.frontend.UserManager: org.waveprotocol.box.server.frontend.WaveViewSubscription subscribe(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdFilter,java.lang.String,org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)>(r6, r9, $r17, r20);

        $r23 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subscribed ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" channel ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r30);

     label07:
        $r31 = r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        r80 = virtualinvoke $r31.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Set visibleWaveletsFor(org.waveprotocol.box.server.frontend.WaveViewSubscription,org.waveprotocol.wave.model.wave.ParticipantId)>($r21, r3);

     label08:
        goto label10;

     label09:
        $r68 := @caughtexception;

        r80 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r70 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve visible wavelets for ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r70.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r73, $r68);

     label10:
        $r32 = interfaceinvoke r80.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r47 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.waveprotocol.wave.model.id.WaveletId) $r47;

        $r49 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r6, r48);

        $r50 = r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        virtualinvoke $r50.<org.waveprotocol.box.server.frontend.WaveletInfo: void notifyAddedImplcitParticipant(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>($r49, r3);

     label12:
        $r51 = r15.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r52 = interfaceinvoke $r51.<org.waveprotocol.box.server.waveserver.WaveletProvider: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot(org.waveprotocol.wave.model.id.WaveletName)>($r49);

     label13:
        goto label16;

     label14:
        $r62 := @caughtexception;

        $r64 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve snapshot for wavelet ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r64.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r67, $r62);

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onFailure(java.lang.String)>("Wave server failure retrieving wavelet");

        exitmonitor $r19;

     label15:
        return;

     label16:
        $r54 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("snapshot in response is: ");

        if $r52 == null goto label17;

        $z2 = 1;

        goto label18;

     label17:
        $z2 = 0;

     label18:
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r57);

        if $r52 != null goto label19;

        $r60 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence empty()>();

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>($r49, $r52, $r60, null, null, $r17);

        goto label20;

     label19:
        $r58 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence empty()>();

        $r59 = $r52.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>($r49, $r52, $r58, $r59, null, $r17);

     label20:
        goto label11;

     label21:
        $r33 = staticinvoke <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.model.id.WaveletName createDummyWaveletName(org.waveprotocol.wave.model.id.WaveId)>(r6);

        $i0 = interfaceinvoke r80.<java.util.Set: int size()>();

        if $i0 != 0 goto label22;

        $r42 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending just a channel id for ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r45);

        $r46 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence empty()>();

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>($r33, null, $r46, null, null, $r17);

     label22:
        $r35 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending marker for ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r38);

        $r39 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence empty()>();

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r20.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>($r33, null, $r39, null, $r40, null);

        exitmonitor $r19;

     label23:
        goto label26;

     label24:
        $r61 := @caughtexception;

        exitmonitor $r19;

     label25:
        throw $r61;

     label26:
        return;

        catch org.waveprotocol.box.server.waveserver.WaveServerException from label02 to label03 with label04;
        catch org.waveprotocol.box.server.waveserver.WaveServerException from label07 to label08 with label09;
        catch org.waveprotocol.box.server.waveserver.WaveServerException from label12 to label13 with label14;
        catch java.lang.Throwable from label06 to label15 with label24;
        catch java.lang.Throwable from label16 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    private java.lang.String generateChannelID()
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r4;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r5;

        r5 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ch");

        $r2 = <org.waveprotocol.box.server.frontend.ClientFrontendImpl: java.util.concurrent.atomic.AtomicInteger channel_counter>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void submitRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, java.lang.String, org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)
    {
        org.waveprotocol.wave.model.id.WaveletName r8;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r11;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r1;
        org.waveprotocol.box.server.frontend.WaveletInfo $r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r0, r3;
        org.waveprotocol.box.server.frontend.UserManager $r6;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl$1 $r9;
        java.lang.String $r2, r7;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener r10;
        boolean $z0;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r4;

        r4 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r8 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r7 := @parameter3: java.lang.String;

        r10 := @parameter4: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener;

        $r0 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r10.<org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener: void onFailure(java.lang.String)>("Author field on delta must match logged in user");

        return;

     label1:
        $r5 = r4.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.UserManager getUserManager(org.waveprotocol.wave.model.wave.ParticipantId)>($r0);

        virtualinvoke $r6.<org.waveprotocol.box.server.frontend.UserManager: void submitRequest(java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r7, r8);

        $r11 = r4.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r9 = new org.waveprotocol.box.server.frontend.ClientFrontendImpl$1;

        specialinvoke $r9.<org.waveprotocol.box.server.frontend.ClientFrontendImpl$1: void <init>(org.waveprotocol.box.server.frontend.ClientFrontendImpl,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener,org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r4, r10, $r0, r7, r8);

        interfaceinvoke $r11.<org.waveprotocol.box.server.waveserver.WaveletProvider: void submitRequest(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>(r8, r1, $r9);

        return;
    }

    public void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.Iterator $r4;
        org.waveprotocol.box.server.frontend.WaveletInfo $r2, $r7;
        java.util.Set $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.box.server.frontend.UserManager $r8;
        org.waveprotocol.wave.model.version.HashedVersion r9;
        java.lang.Object $r5;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r9 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Set getWaveletParticipants(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.wave.ParticipantId) $r5;

        $r7 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.UserManager getUserManager(org.waveprotocol.wave.model.wave.ParticipantId)>(r6);

        virtualinvoke $r8.<org.waveprotocol.box.server.frontend.UserManager: void onCommit(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r9);

        goto label1;

     label2:
        return;
    }

    private void participantUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.box.common.DeltaSequence, boolean, boolean)
    {
        org.waveprotocol.wave.model.id.WaveletName r4;
        org.waveprotocol.box.server.frontend.WaveletInfo $r2, $r6, $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.common.DeltaSequence r5;
        org.waveprotocol.box.server.frontend.UserManager $r3;
        boolean z0, z1;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r0;

        r0 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter2: org.waveprotocol.box.common.DeltaSequence;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        virtualinvoke $r7.<org.waveprotocol.box.server.frontend.WaveletInfo: void notifyAddedExplicitWaveletParticipant(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>(r4, r1);

     label1:
        $r2 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.UserManager getUserManager(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        virtualinvoke $r3.<org.waveprotocol.box.server.frontend.UserManager: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.common.DeltaSequence)>(r4, r5);

        if z1 == 0 goto label2;

        $r6 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        virtualinvoke $r6.<org.waveprotocol.box.server.frontend.WaveletInfo: void notifyRemovedExplicitWaveletParticipant(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>(r4, r1);

     label2:
        return;
    }

    public void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r17;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r22;
        org.waveprotocol.box.server.frontend.WaveletInfo $r6, $r7;
        org.waveprotocol.wave.model.wave.ParticipantId $r18, $r21, r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r5;
        org.waveprotocol.wave.model.id.WaveletName $r4;
        org.waveprotocol.wave.model.id.WaveId $r2;
        java.util.Set $r8;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r20;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r16;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.box.common.DeltaSequence r0, $r19;
        java.util.HashSet $r9, $r10;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        int $i0, $i1, i2;
        java.util.Iterator $r11, $r14;
        java.lang.Object $r12, $r13, $r15;

        r5 := @this: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r0 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r2, $r3);

        $r6 = r5.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        virtualinvoke $r6.<org.waveprotocol.box.server.frontend.WaveletInfo: void syncWaveletVersion(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.common.DeltaSequence)>($r4, r0);

        $r7 = r5.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Set getWaveletParticipants(org.waveprotocol.wave.model.id.WaveletName)>($r4);

        $r9 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r8);

        $r10 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        i2 = 0;

     label2:
        $i0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: int size()>();

        if i2 >= $i0 goto label7;

        $r13 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: java.lang.Object get(int)>(i2);

        r22 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r13;

        $r14 = virtualinvoke r22.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r15;

        $z4 = r16 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z4 == 0 goto label4;

        $r20 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r16;

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r21);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r21);

     label4:
        $z5 = r16 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z5 == 0 goto label5;

        $r17 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r16;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        interfaceinvoke $r9.<java.util.Set: boolean remove(java.lang.Object)>($r18);

        $i1 = i2 + 1;

        $r19 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence subList(int,int)>(0, $i1);

        $z6 = interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>($r18);

        specialinvoke r5.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: void participantUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.common.DeltaSequence,boolean,boolean)>($r4, $r18, $r19, $z6, 1);

     label5:
        goto label3;

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        $r11 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.waveprotocol.wave.model.wave.ParticipantId) $r12;

        $z2 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r23);

        specialinvoke r5.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: void participantUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.common.DeltaSequence,boolean,boolean)>($r4, r23, r0, $z2, 0);

        goto label8;

     label9:
        return;
    }

    static org.waveprotocol.wave.model.id.WaveletName createDummyWaveletName(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveletName $r3;
        org.waveprotocol.wave.model.id.WaveId r0;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r1, "dummy+root");

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r0, $r2);

        return $r3;
    }

    static org.waveprotocol.box.server.frontend.WaveletInfo access$000(org.waveprotocol.box.server.frontend.ClientFrontendImpl)
    {
        org.waveprotocol.box.server.frontend.ClientFrontendImpl r0;
        org.waveprotocol.box.server.frontend.WaveletInfo $r1;

        r0 := @parameter0: org.waveprotocol.box.server.frontend.ClientFrontendImpl;

        $r1 = r0.<org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.WaveletInfo waveletInfo>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/frontend/ClientFrontendImpl;");

        <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <org.waveprotocol.box.server.frontend.ClientFrontendImpl: java.util.concurrent.atomic.AtomicInteger channel_counter> = $r1;

        return;
    }
}
