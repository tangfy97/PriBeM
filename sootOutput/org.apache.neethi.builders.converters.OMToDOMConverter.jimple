public class org.apache.neethi.builders.converters.OMToDOMConverter extends org.apache.neethi.builders.converters.AbstractOMConverter implements org.apache.neethi.builders.converters.Converter
{

    public void <init>()
    {
        org.apache.neethi.builders.converters.OMToDOMConverter r0;

        r0 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        specialinvoke r0.<org.apache.neethi.builders.converters.AbstractOMConverter: void <init>()>();

        return;
    }

    public org.w3c.dom.Element convert(org.apache.axiom.om.OMElement)
    {
        org.apache.axiom.om.OMElement r2, $r5;
        java.lang.Throwable $r7;
        org.apache.neethi.builders.converters.OMToDOMConverter r11;
        org.apache.axiom.om.OMXMLParserWrapper $r4;
        org.apache.axiom.om.OMMetaFactory $r0;
        org.w3c.dom.Element $r6, $r10;
        javax.xml.stream.XMLStreamReader $r3, $r9;
        org.apache.neethi.builders.converters.StaxToDOMConverter $r8;
        org.apache.axiom.om.OMFactory $r1;

        r11 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        r2 := @parameter0: org.apache.axiom.om.OMElement;

     label1:
        $r0 = staticinvoke <org.apache.axiom.om.OMAbstractFactory: org.apache.axiom.om.OMMetaFactory getMetaFactory(java.lang.String)>("dom");

        $r1 = interfaceinvoke $r0.<org.apache.axiom.om.OMMetaFactory: org.apache.axiom.om.OMFactory getOMFactory()>();

        $r3 = interfaceinvoke r2.<org.apache.axiom.om.OMElement: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        $r4 = staticinvoke <org.apache.axiom.om.OMXMLBuilderFactory: org.apache.axiom.om.OMXMLParserWrapper createStAXOMBuilder(org.apache.axiom.om.OMFactory,javax.xml.stream.XMLStreamReader)>($r1, $r3);

        $r5 = interfaceinvoke $r4.<org.apache.axiom.om.OMXMLParserWrapper: org.apache.axiom.om.OMElement getDocumentElement()>();

        $r6 = (org.w3c.dom.Element) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.neethi.builders.converters.StaxToDOMConverter;

        specialinvoke $r8.<org.apache.neethi.builders.converters.StaxToDOMConverter: void <init>()>();

        $r9 = interfaceinvoke r2.<org.apache.axiom.om.OMElement: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        $r10 = virtualinvoke $r8.<org.apache.neethi.builders.converters.StaxToDOMConverter: org.w3c.dom.Element convert(javax.xml.stream.XMLStreamReader)>($r9);

        return $r10;

        catch org.apache.axiom.om.OMException from label1 to label2 with label3;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        org.apache.neethi.builders.converters.OMToDOMConverter r0;
        org.apache.axiom.om.OMElement $r2;
        org.w3c.dom.Element $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.axiom.om.OMElement) r1;

        $r3 = virtualinvoke r0.<org.apache.neethi.builders.converters.OMToDOMConverter: org.w3c.dom.Element convert(org.apache.axiom.om.OMElement)>($r2);

        return $r3;
    }

    public volatile java.util.Iterator getChildren(java.lang.Object)
    {
        org.apache.neethi.builders.converters.OMToDOMConverter r0;
        org.apache.axiom.om.OMElement $r2;
        java.util.Iterator $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.axiom.om.OMElement) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractOMConverter: java.util.Iterator getChildren(org.apache.axiom.om.OMElement)>($r2);

        return $r3;
    }

    public volatile java.util.Map getAttributes(java.lang.Object)
    {
        org.apache.neethi.builders.converters.OMToDOMConverter r0;
        org.apache.axiom.om.OMElement $r2;
        java.util.Map $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.axiom.om.OMElement) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractOMConverter: java.util.Map getAttributes(org.apache.axiom.om.OMElement)>($r2);

        return $r3;
    }

    public volatile javax.xml.namespace.QName getQName(java.lang.Object)
    {
        org.apache.neethi.builders.converters.OMToDOMConverter r0;
        org.apache.axiom.om.OMElement $r2;
        java.lang.Object r1;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.apache.neethi.builders.converters.OMToDOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.axiom.om.OMElement) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractOMConverter: javax.xml.namespace.QName getQName(org.apache.axiom.om.OMElement)>($r2);

        return $r3;
    }
}
