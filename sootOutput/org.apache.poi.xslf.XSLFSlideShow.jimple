public class org.apache.poi.xslf.XSLFSlideShow extends org.apache.poi.POIXMLDocument
{
    private org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument presentationDoc;
    private java.util.List embedds;

    public void <init>(org.apache.poi.openxml4j.opc.OPCPackage) throws org.apache.poi.openxml4j.exceptions.OpenXML4JException, java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2, $r6, $r15, $r18, $r25, $r28;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r11, $r24, $r27;
        org.apache.poi.openxml4j.opc.OPCPackage r1, $r29;
        org.apache.poi.openxml4j.opc.PackageRelationship $r17, r30, r31;
        org.apache.poi.xslf.usermodel.XSLFRelation $r4;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r19, $r21;
        java.lang.String $r3, $r5, $r16;
        java.util.LinkedList $r9;
        java.util.Iterator $r12, $r20, $r22;
        org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument $r8;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r10;
        java.lang.Object $r13, $r23, $r26;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r14;
        java.io.InputStream $r7;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        specialinvoke r0.<org.apache.poi.POIXMLDocument: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>(r1);

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $r4 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation THEME_MANAGER>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getContentType()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r29 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: void rebase(org.apache.poi.openxml4j.opc.OPCPackage)>($r29);

     label1:
        $r6 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r7 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r8 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument parse(java.io.InputStream)>($r7);

        r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument presentationDoc> = $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.poi.xslf.XSLFSlideShow: java.util.List embedds> = $r9;

        $r10 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSlideReferences()>();

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: java.util.List getSldIdList()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) $r13;

        $r15 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r16 = interfaceinvoke r14.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: java.lang.String getId2()>();

        $r17 = virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>("http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject");

        $r20 = virtualinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r26 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r26;

        $r27 = r0.<org.apache.poi.xslf.XSLFSlideShow: java.util.List embedds>;

        $r28 = virtualinvoke $r18.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>(r30);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label3;

     label4:
        $r21 = virtualinvoke $r18.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package");

        $r22 = virtualinvoke $r21.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r23;

        $r24 = r0.<org.apache.poi.xslf.XSLFSlideShow: java.util.List embedds>;

        $r25 = virtualinvoke $r18.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>(r31);

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label5;

     label6:
        goto label2;

     label7:
        return;
    }

    public void <init>(java.lang.String) throws org.apache.poi.openxml4j.exceptions.OpenXML4JException, java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.xslf.XSLFSlideShow r0;
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.OPCPackage openPackage(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>($r2);

        return;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r2;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument $r1;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        $r1 = r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument presentationDoc>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        return $r2;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSlideReferences()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r3, $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1, $r2, $r4;
        org.apache.poi.xslf.XSLFSlideShow r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: boolean isSetSldIdLst()>();

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        $r5 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList newInstance()>();

        interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: void setSldIdLst(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList)>($r5);

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSldIdLst()>();

        return $r3;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList getSlideMasterReferences()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList $r2;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList getSldMasterIdLst()>();

        return $r2;
    }

    public org.apache.poi.openxml4j.opc.PackagePart getSlideMasterPart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r6;
        org.apache.poi.openxml4j.opc.PackageRelationship $r4;
        org.apache.xmlbeans.XmlException $r7;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry r2;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r1, $r5;
        java.lang.String $r3;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r2 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r3 = interfaceinvoke r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry: java.lang.String getId2()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.XmlException;

        specialinvoke $r7.<org.apache.xmlbeans.XmlException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getSlideMaster(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry r1;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument $r4;
        java.io.InputStream $r3;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getSlideMasterPart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument parse(java.io.InputStream)>($r3);

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getSldMaster()>();

        return $r5;
    }

    public org.apache.poi.openxml4j.opc.PackagePart getSlidePart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r6;
        org.apache.poi.openxml4j.opc.PackageRelationship $r4;
        org.apache.xmlbeans.XmlException $r7;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r1, $r5;
        java.lang.String $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r2;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r2 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r3 = interfaceinvoke r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: java.lang.String getId2()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.XmlException;

        specialinvoke $r7.<org.apache.xmlbeans.XmlException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlide getSlide(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlide $r5;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.SldDocument $r4;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r1;
        java.io.InputStream $r3;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getSlidePart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.SldDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.SldDocument parse(java.io.InputStream)>($r3);

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.SldDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTSlide getSld()>();

        return $r5;
    }

    public org.apache.poi.openxml4j.opc.PackagePart getNodesPart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        java.lang.IllegalStateException $r8, $r14, $r16;
        org.apache.poi.openxml4j.opc.PackageRelationship $r6;
        org.apache.poi.xslf.usermodel.XSLFRelation $r3;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r5;
        int $i0, $i1, $i2;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2, $r7;
        java.lang.String $r4, $r12;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r13, $r15;
        java.lang.StringBuilder $r9, $r10, $r11;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r1;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getSlidePart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry)>(r1);

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation NOTES>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getRelation()>();

        $r5 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label4:
        $i0 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 != 0 goto label5;

        return null;

     label5:
        $i1 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i1 <= 1 goto label6;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting 0 or 1 notes for a slide, but found ");

        $i2 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label6:
        $r6 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(int)>(0);

        $r7 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r6);

     label7:
        return $r7;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label6 to label7 with label8;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTNotesSlide getNotes(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTNotesSlide $r5;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r1;
        org.openxmlformats.schemas.presentationml.x2006.main.NotesDocument $r4;
        java.io.InputStream $r3;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getNodesPart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.NotesDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.NotesDocument parse(java.io.InputStream)>($r3);

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.NotesDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTNotesSlide getNotes()>();

        return $r5;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTCommentList getSlideComments(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        java.lang.IllegalStateException $r11, $r17, $r19;
        org.apache.poi.openxml4j.opc.PackageRelationship $r6;
        org.apache.poi.xslf.usermodel.XSLFRelation $r3;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CmLstDocument $r9;
        int $i0, $i1, $i2;
        org.apache.poi.xslf.XSLFSlideShow r0;
        org.apache.poi.openxml4j.opc.PackagePart $r2, $r7;
        java.lang.String $r4, $r15;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r16, $r18;
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommentList $r10;
        java.lang.StringBuilder $r12, $r13, $r14;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r1;
        java.io.InputStream $r8;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.XSLFSlideShow: org.apache.poi.openxml4j.opc.PackagePart getSlidePart(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry)>(r1);

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation COMMENTS>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getRelation()>();

        $r5 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label4:
        $i0 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 != 0 goto label5;

        return null;

     label5:
        $i1 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i1 <= 1 goto label6;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting 0 or 1 comments for a slide, but found ");

        $i2 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label6:
        $r6 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(int)>(0);

        $r7 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r9 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CmLstDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CmLstDocument parse(java.io.InputStream)>($r8);

        $r10 = interfaceinvoke $r9.<org.openxmlformats.schemas.presentationml.x2006.main.CmLstDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTCommentList getCmLst()>();

     label7:
        return $r10;

     label8:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label6 to label7 with label8;
    }

    public java.util.List getAllEmbedds() throws org.apache.poi.openxml4j.exceptions.OpenXML4JException
    {
        org.apache.poi.xslf.XSLFSlideShow r0;
        java.util.List $r1;

        r0 := @this: org.apache.poi.xslf.XSLFSlideShow;

        $r1 = r0.<org.apache.poi.xslf.XSLFSlideShow: java.util.List embedds>;

        return $r1;
    }
}
