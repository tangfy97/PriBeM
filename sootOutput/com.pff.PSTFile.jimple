public class com.pff.PSTFile extends java.lang.Object
{
    public static final int ENCRYPTION_TYPE_NONE;
    public static final int ENCRYPTION_TYPE_COMPRESSIBLE;
    private static final int MESSAGE_STORE_DESCRIPTOR_IDENTIFIER;
    private static final int ROOT_FOLDER_DESCRIPTOR_IDENTIFIER;
    public static final int PST_TYPE_ANSI;
    protected static final int PST_TYPE_ANSI_2;
    public static final int PST_TYPE_UNICODE;
    public static final int PS_PUBLIC_STRINGS;
    public static final int PSETID_Common;
    public static final int PSETID_Address;
    public static final int PS_INTERNET_HEADERS;
    public static final int PSETID_Appointment;
    public static final int PSETID_Meeting;
    public static final int PSETID_Log;
    public static final int PSETID_Messaging;
    public static final int PSETID_Note;
    public static final int PSETID_PostRss;
    public static final int PSETID_Task;
    public static final int PSETID_UnifiedMessaging;
    public static final int PS_MAPI;
    public static final int PSETID_AirSync;
    public static final int PSETID_Sharing;
    private static final java.lang.String[] guidStrings;
    private java.util.HashMap guidMap;
    private int encryptionType;
    private java.util.LinkedHashMap childrenDescriptorTree;
    private java.util.HashMap nameToId;
    private java.util.HashMap stringToId;
    private static java.util.HashMap idToName;
    private java.util.HashMap idToString;
    private byte[] guids;
    private int itemCount;
    private java.io.RandomAccessFile in;
    private int pstFileType;
    private static java.util.Properties propertyInternetCodePages;
    private static boolean bCPFirstTime;
    private static java.util.Properties propertyNames;
    private static boolean bFirstTime;

    public void <init>(java.lang.String) throws java.io.FileNotFoundException, com.pff.PSTException, java.io.IOException
    {
        com.pff.PSTFile r0;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: com.pff.PSTFile;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.pff.PSTFile: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException, com.pff.PSTException, java.io.IOException
    {
        java.io.RandomAccessFile $r7, $r10, $r11, $r12, $r13, $r14, $r16, $r35;
        byte[] r9, r30;
        byte $b0, $b1, $b2, $b4, $b6, $b7;
        boolean $z0;
        com.pff.PSTException $r38, $r40, $r41, $r42;
        com.pff.PSTFile r0;
        java.lang.StringBuilder $r19, $r20, $r24, $r25, $r26, $r37, $r39;
        java.util.HashMap $r31, $r32, $r33, $r34;
        int $i3, $i5, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r21, $r27, $r36;
        java.io.IOException $r28;
        java.io.File r6;

        r0 := @this: com.pff.PSTFile;

        r6 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r31 = new java.util.HashMap;

        specialinvoke $r31.<java.util.HashMap: void <init>()>();

        r0.<com.pff.PSTFile: java.util.HashMap guidMap> = $r31;

        r0.<com.pff.PSTFile: int encryptionType> = 0;

        r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree> = null;

        $r32 = new java.util.HashMap;

        specialinvoke $r32.<java.util.HashMap: void <init>()>();

        r0.<com.pff.PSTFile: java.util.HashMap nameToId> = $r32;

        $r33 = new java.util.HashMap;

        specialinvoke $r33.<java.util.HashMap: void <init>()>();

        r0.<com.pff.PSTFile: java.util.HashMap stringToId> = $r33;

        $r34 = new java.util.HashMap;

        specialinvoke $r34.<java.util.HashMap: void <init>()>();

        r0.<com.pff.PSTFile: java.util.HashMap idToString> = $r34;

        r0.<com.pff.PSTFile: byte[] guids> = null;

        r0.<com.pff.PSTFile: int itemCount> = 0;

        r0.<com.pff.PSTFile: int pstFileType> = 0;

        $r35 = new java.io.RandomAccessFile;

        specialinvoke $r35.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r6, "r");

        r0.<com.pff.PSTFile: java.io.RandomAccessFile in> = $r35;

     label01:
        r30 = newarray (byte)[4];

        $r7 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r7.<java.io.RandomAccessFile: int read(byte[])>(r30);

        $r36 = new java.lang.String;

        specialinvoke $r36.<java.lang.String: void <init>(byte[])>(r30);

        $z0 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>("!BDN");

        if $z0 != 0 goto label02;

        $r38 = new com.pff.PSTException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid file header: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected: !BDN");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<com.pff.PSTException: void <init>(java.lang.String)>($r27);

        throw $r38;

     label02:
        r9 = newarray (byte)[2];

        $r10 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>(10L);

        $r11 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r11.<java.io.RandomAccessFile: int read(byte[])>(r9);

        $b0 = r9[0];

        $i8 = (int) $b0;

        if $i8 != 15 goto label03;

        r9[0] = 14;

     label03:
        $b1 = r9[0];

        $i9 = (int) $b1;

        if $i9 == 14 goto label04;

        $b6 = r9[0];

        $i10 = (int) $b6;

        if $i10 == 23 goto label04;

        $r40 = new com.pff.PSTException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognised PST File version: ");

        $b7 = r9[0];

        $i11 = (int) $b7;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<com.pff.PSTException: void <init>(java.lang.String)>($r21);

        throw $r40;

     label04:
        $b2 = r9[0];

        $i12 = (int) $b2;

        r0.<com.pff.PSTFile: int pstFileType> = $i12;

        $i3 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i3 != 14 goto label05;

        $r16 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r16.<java.io.RandomAccessFile: void seek(long)>(461L);

        goto label06;

     label05:
        $r12 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r12.<java.io.RandomAccessFile: void seek(long)>(513L);

     label06:
        $r13 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $b4 = virtualinvoke $r13.<java.io.RandomAccessFile: byte readByte()>();

        $i13 = (int) $b4;

        r0.<com.pff.PSTFile: int encryptionType> = $i13;

        $i5 = r0.<com.pff.PSTFile: int encryptionType>;

        if $i5 != 2 goto label07;

        $r41 = new com.pff.PSTException;

        specialinvoke $r41.<com.pff.PSTException: void <init>(java.lang.String)>("Only unencrypted and compressable PST files are supported at this time");

        throw $r41;

     label07:
        $r14 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        specialinvoke r0.<com.pff.PSTFile: void processNameToIdMap(java.io.RandomAccessFile)>($r14);

     label08:
        goto label10;

     label09:
        $r28 := @caughtexception;

        $r42 = new com.pff.PSTException;

        specialinvoke $r42.<com.pff.PSTException: void <init>(java.lang.String,java.lang.Exception)>("Unable to read PST Sig", $r28);

        throw $r42;

     label10:
        return;

        catch java.io.IOException from label01 to label08 with label09;
    }

    public int getPSTFileType()
    {
        int $i0;
        com.pff.PSTFile r0;

        r0 := @this: com.pff.PSTFile;

        $i0 = r0.<com.pff.PSTFile: int pstFileType>;

        return $i0;
    }

    private void processNameToIdMap(java.io.RandomAccessFile) throws java.io.IOException, com.pff.PSTException
    {
        byte[] $r9, $r10, $r13, $r17, r18, $r24, $r25, $r26, $r27, $r35;
        java.io.RandomAccessFile r44;
        java.lang.Integer $r7, $r11, $r14, $r21, $r23, $r34, $r43, $r49, $r51;
        byte $b2;
        java.lang.Long $r48, $r52;
        com.pff.OffsetIndexItem $r3;
        com.pff.PSTFile r1;
        com.pff.PSTNodeInputStream $r53;
        long $l1, $l3, $l8, $l12, $l15, $l18, $l23, $l26, $l27, $l28, $l31, $l32, $l35, $l37, l42, $l49, $l50, $l51, $l52, $l53;
        com.pff.PSTTableBC $r54;
        com.pff.DescriptorIndexNode $r2;
        java.lang.String $r40, $r56;
        java.util.UUID[] $r37;
        int[] $r38;
        boolean $z0;
        java.util.UUID $r29, $r31, $r41, $r55;
        java.lang.String[] $r0, $r39;
        java.util.HashMap $r6, $r20, $r22, $r30, $r32, $r42, r45, $r47, $r50;
        com.pff.PSTTableBCItem r16, $r36, r46;
        int $i0, $i4, $i5, $i6, $i7, i9, $i10, $i11, $i13, $i14, $i16, $i17, $i19, $i20, $i21, $i22, $i24, $i25, $i29, $i30, $i33, $i34, $i36, $i38, i39, i40, i41, i43, i44, i45, i46, i47, i48, i54, i55, $i57, $i59, $i61;
        java.lang.Object $r8, $r12, $r15, $r33;

        r1 := @this: com.pff.PSTFile;

        r44 := @parameter0: java.io.RandomAccessFile;

        i39 = 0;

     label01:
        $r0 = <com.pff.PSTFile: java.lang.String[] guidStrings>;

        $i0 = lengthof $r0;

        if i39 >= $i0 goto label02;

        $r39 = <com.pff.PSTFile: java.lang.String[] guidStrings>;

        $r40 = $r39[i39];

        $r41 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r40);

        $r42 = r1.<com.pff.PSTFile: java.util.HashMap guidMap>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i39);

        virtualinvoke $r42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r43);

        i39 = i39 + 1;

        goto label01;

     label02:
        $r2 = virtualinvoke r1.<com.pff.PSTFile: com.pff.DescriptorIndexNode getDescriptorIndexNode(long)>(97L);

        r45 = null;

        $l1 = $r2.<com.pff.DescriptorIndexNode: long localDescriptorsOffsetIndexIdentifier>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label03;

        $l37 = $r2.<com.pff.DescriptorIndexNode: long localDescriptorsOffsetIndexIdentifier>;

        r45 = virtualinvoke r1.<com.pff.PSTFile: java.util.HashMap getPSTDescriptorItems(long)>($l37);

     label03:
        $l3 = $r2.<com.pff.DescriptorIndexNode: long dataOffsetIndexIdentifier>;

        $r3 = virtualinvoke r1.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>($l3);

        $r53 = new com.pff.PSTNodeInputStream;

        specialinvoke $r53.<com.pff.PSTNodeInputStream: void <init>(com.pff.PSTFile,com.pff.OffsetIndexItem)>(r1, $r3);

        $r35 = newarray (byte)[1024];

        virtualinvoke $r53.<com.pff.PSTNodeInputStream: int read(byte[])>($r35);

        $r54 = new com.pff.PSTTableBC;

        specialinvoke $r54.<com.pff.PSTTableBC: void <init>(com.pff.PSTNodeInputStream)>($r53);

        $r6 = virtualinvoke $r54.<com.pff.PSTTableBC: java.util.HashMap getItems()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r36 = (com.pff.PSTTableBCItem) $r8;

        $r9 = specialinvoke r1.<com.pff.PSTFile: byte[] getData(com.pff.PSTTableItem,java.util.HashMap)>($r36, r45);

        r1.<com.pff.PSTFile: byte[] guids> = $r9;

        $r10 = r1.<com.pff.PSTFile: byte[] guids>;

        $i4 = lengthof $r10;

        $i38 = $i4 / 16;

        $r37 = newarray (java.util.UUID)[$i38];

        $r38 = newarray (int)[$i38];

        i40 = 0;

        i41 = 0;

     label04:
        if i41 >= $i38 goto label07;

        $r24 = r1.<com.pff.PSTFile: byte[] guids>;

        $i22 = i40 + 4;

        $l23 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r24, i40, $i22);

        $l26 = $l23 << 32;

        $r25 = r1.<com.pff.PSTFile: byte[] guids>;

        $i25 = i40 + 4;

        $i24 = i40 + 6;

        $l27 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r25, $i25, $i24);

        $l28 = $l27 << 16;

        $l31 = $l26 | $l28;

        $r26 = r1.<com.pff.PSTFile: byte[] guids>;

        $i30 = i40 + 6;

        $i29 = i40 + 8;

        $l32 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r26, $i30, $i29);

        l42 = $l31 | $l32;

        $r27 = r1.<com.pff.PSTFile: byte[] guids>;

        $i34 = i40 + 8;

        $i33 = i40 + 16;

        $l35 = staticinvoke <com.pff.PSTObject: long convertBigEndianBytesToLong(byte[],int,int)>($r27, $i34, $i33);

        $r55 = new java.util.UUID;

        specialinvoke $r55.<java.util.UUID: void <init>(long,long)>(l42, $l35);

        $r37[i41] = $r55;

        $r30 = r1.<com.pff.PSTFile: java.util.HashMap guidMap>;

        $r29 = $r37[i41];

        $z0 = virtualinvoke $r30.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r29);

        if $z0 == 0 goto label05;

        $r32 = r1.<com.pff.PSTFile: java.util.HashMap guidMap>;

        $r31 = $r37[i41];

        $r33 = virtualinvoke $r32.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r31);

        $r34 = (java.lang.Integer) $r33;

        $i36 = virtualinvoke $r34.<java.lang.Integer: int intValue()>();

        $r38[i41] = $i36;

        goto label06;

     label05:
        $i57 = (int) -1;

        $r38[i41] = $i57;

     label06:
        i40 = i40 + 16;

        i41 = i41 + 1;

        goto label04;

     label07:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r12 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        r46 = (com.pff.PSTTableBCItem) $r12;

        $r13 = specialinvoke r1.<com.pff.PSTFile: byte[] getData(com.pff.PSTTableItem,java.util.HashMap)>(r46, r45);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r15 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        r16 = (com.pff.PSTTableBCItem) $r15;

        $r17 = specialinvoke r1.<com.pff.PSTFile: byte[] getData(com.pff.PSTTableItem,java.util.HashMap)>(r16, r45);

        i43 = 0;

     label08:
        $i6 = i43 + 8;

        $i5 = lengthof $r13;

        if $i6 >= $i5 goto label14;

        $i7 = i43 + 4;

        $l8 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r13, i43, $i7);

        i9 = (int) $l8;

        $i11 = i43 + 4;

        $i10 = i43 + 6;

        $l12 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r13, $i11, $i10);

        i44 = (int) $l12;

        $i14 = i43 + 6;

        $i13 = i43 + 8;

        $l15 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r13, $i14, $i13);

        i45 = (int) $l15;

        $i16 = i44 & 1;

        if $i16 != 0 goto label12;

        $i59 = (int) 32768;

        i46 = i45 + $i59;

        i47 = i44 >> 1;

        if i47 != 1 goto label09;

        i48 = 12;

        goto label11;

     label09:
        if i47 != 2 goto label10;

        i48 = 0;

        goto label11;

     label10:
        $i21 = i47 - 3;

        i48 = $r38[$i21];

     label11:
        $r47 = r1.<com.pff.PSTFile: java.util.HashMap nameToId>;

        $l49 = (long) i9;

        $l50 = (long) i48;

        $l51 = $l50 << 32;

        $l52 = $l49 | $l51;

        $r48 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l52);

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i46);

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r50 = <com.pff.PSTFile: java.util.HashMap idToName>;

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i46);

        $l53 = (long) i9;

        $r52 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l53);

        virtualinvoke $r50.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, $r52);

        goto label13;

     label12:
        $i17 = i9 + 4;

        $l18 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r17, i9, $i17);

        i54 = (int) $l18;

        r18 = newarray (byte)[i54];

        $i20 = i9 + 4;

        $i19 = lengthof r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, $i20, r18, 0, $i19);

        $i61 = (int) 32768;

        i55 = i45 + $i61;

        $r56 = new java.lang.String;

        specialinvoke $r56.<java.lang.String: void <init>(byte[],java.lang.String)>(r18, "UTF-16LE");

        $r20 = r1.<com.pff.PSTFile: java.util.HashMap stringToId>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i55);

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r21);

        $r22 = r1.<com.pff.PSTFile: java.util.HashMap idToString>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i55);

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r56);

     label13:
        i43 = i43 + 8;

        goto label08;

     label14:
        return;
    }

    private byte[] getData(com.pff.PSTTableItem, java.util.HashMap) throws java.io.IOException, com.pff.PSTException
    {
        byte[] $r1, $r6, $r17;
        java.util.HashMap r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r14;
        com.pff.PSTDescriptorItem r5;
        java.util.Set $r12;
        com.pff.PSTException $r7, $r15, $r16;
        com.pff.PSTTableItem r0;
        com.pff.PSTFile r18;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;

        r18 := @this: com.pff.PSTFile;

        r0 := @parameter0: com.pff.PSTTableItem;

        r2 := @parameter1: java.util.HashMap;

        $r1 = r0.<com.pff.PSTTableItem: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label1;

        $r17 = r0.<com.pff.PSTTableItem: byte[] data>;

        return $r17;

     label1:
        if r2 != null goto label2;

        $r16 = new com.pff.PSTException;

        specialinvoke $r16.<com.pff.PSTException: void <init>(java.lang.String)>("External reference but no localDescriptorItems in PSTFile.getData()");

        throw $r16;

     label2:
        $i1 = r0.<com.pff.PSTTableItem: int entryValueType>;

        if $i1 == 258 goto label3;

        $r15 = new com.pff.PSTException;

        specialinvoke $r15.<com.pff.PSTException: void <init>(java.lang.String)>("Attempting to get non-binary data in PSTFile.getData()");

        throw $r15;

     label3:
        $i2 = r0.<com.pff.PSTTableItem: int entryValueReference>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (com.pff.PSTDescriptorItem) $r4;

        if r5 != null goto label4;

        $r7 = new com.pff.PSTException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not here ");

        $i3 = r0.<com.pff.PSTTableItem: int entryValueReference>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r12 = virtualinvoke r2.<java.util.HashMap: java.util.Set keySet()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.pff.PSTException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label4:
        $r6 = virtualinvoke r5.<com.pff.PSTDescriptorItem: byte[] getData()>();

        return $r6;
    }

    int getNameToIdMapItem(int, int)
    {
        long $l1, $l3, $l4, l5;
        java.util.HashMap $r1;
        java.lang.Integer r4;
        java.lang.Long $r2;
        int i0, i2, $i6, $i8;
        com.pff.PSTFile r0;
        java.lang.Object $r3;

        r0 := @this: com.pff.PSTFile;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $l1 = (long) i0;

        $l4 = $l1 << 32;

        $l3 = (long) i2;

        l5 = $l4 | $l3;

        $r1 = r0.<com.pff.PSTFile: java.util.HashMap nameToId>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $i6 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i6;
    }

    int getPublicStringToIdMapItem(java.lang.String)
    {
        int $i0, $i2;
        com.pff.PSTFile r0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.Integer r4;

        r0 := @this: com.pff.PSTFile;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.pff.PSTFile: java.util.HashMap stringToId>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    static long getNameToIdMapKey(int)
    {
        java.lang.Long r3;
        int i0;
        java.util.HashMap $r0;
        java.lang.Object $r2;
        long $l1;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = <com.pff.PSTFile: java.util.HashMap idToName>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.lang.Long) $r2;

        if r3 != null goto label1;

        return -1L;

     label1:
        $l1 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        return $l1;
    }

    static java.lang.String getInternetCodePageCharset(int)
    {
        java.util.Properties $r1, $r6, $r9, $r12;
        java.io.IOException $r10;
        java.io.FileNotFoundException $r11;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.Class $r7;
        java.lang.String $r4, $r5;
        boolean $z0;
        java.io.InputStream $r8;

        i0 := @parameter0: int;

        $z0 = <com.pff.PSTFile: boolean bCPFirstTime>;

        if $z0 == 0 goto label6;

        <com.pff.PSTFile: boolean bCPFirstTime> = 0;

        $r6 = new java.util.Properties;

        specialinvoke $r6.<java.util.Properties: void <init>()>();

        <com.pff.PSTFile: java.util.Properties propertyInternetCodePages> = $r6;

     label1:
        $r7 = class "Lcom/pff/PSTFile;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/InternetCodepages.txt");

        if $r8 == null goto label2;

        $r9 = <com.pff.PSTFile: java.util.Properties propertyInternetCodePages>;

        virtualinvoke $r9.<java.util.Properties: void load(java.io.InputStream)>($r8);

        goto label3;

     label2:
        <com.pff.PSTFile: java.util.Properties propertyInternetCodePages> = null;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        <com.pff.PSTFile: java.util.Properties propertyInternetCodePages> = null;

        virtualinvoke $r11.<java.io.FileNotFoundException: void printStackTrace()>();

        goto label6;

     label5:
        $r10 := @caughtexception;

        <com.pff.PSTFile: java.util.Properties propertyInternetCodePages> = null;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

     label6:
        $r12 = <com.pff.PSTFile: java.util.Properties propertyInternetCodePages>;

        if $r12 == null goto label7;

        $r1 = <com.pff.PSTFile: java.util.Properties propertyInternetCodePages>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        return $r5;

     label7:
        return null;

        catch java.io.FileNotFoundException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    static java.lang.String getPropertyName(int, boolean)
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r1;
        int i0;
        java.lang.String $r2, $r4, $r12;
        boolean $z0, z1;
        java.util.Properties $r3, $r5, $r8, $r11;
        java.io.IOException $r9;
        java.io.FileNotFoundException $r10;
        java.lang.Class $r6;
        java.io.InputStream $r7;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        $z0 = <com.pff.PSTFile: boolean bFirstTime>;

        if $z0 == 0 goto label6;

        <com.pff.PSTFile: boolean bFirstTime> = 0;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        <com.pff.PSTFile: java.util.Properties propertyNames> = $r5;

     label1:
        $r6 = class "Lcom/pff/PSTFile;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/PropertyNames.txt");

        if $r7 == null goto label2;

        $r8 = <com.pff.PSTFile: java.util.Properties propertyNames>;

        virtualinvoke $r8.<java.util.Properties: void load(java.io.InputStream)>($r7);

        goto label3;

     label2:
        <com.pff.PSTFile: java.util.Properties propertyNames> = null;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        <com.pff.PSTFile: java.util.Properties propertyNames> = null;

        virtualinvoke $r10.<java.io.FileNotFoundException: void printStackTrace()>();

        goto label6;

     label5:
        $r9 := @caughtexception;

        <com.pff.PSTFile: java.util.Properties propertyNames> = null;

        virtualinvoke $r9.<java.io.IOException: void printStackTrace()>();

     label6:
        $r11 = <com.pff.PSTFile: java.util.Properties propertyNames>;

        if $r11 == null goto label9;

        if z1 == 0 goto label7;

        $r12 = "%08X";

        goto label8;

     label7:
        $r12 = "%04X";

     label8:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r12, $r0);

        $r3 = <com.pff.PSTFile: java.util.Properties propertyNames>;

        $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r2);

        return $r4;

     label9:
        return null;

        catch java.io.FileNotFoundException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    static java.lang.String getPropertyDescription(int, int)
    {
        java.lang.Object[] $r1, $r5, $r8, $r12, $r15;
        long $l1;
        java.lang.Integer $r3, $r4, $r6, $r7, $r9, $r10, $r13, $r14, $r16;
        byte $b2;
        java.lang.Long $r2;
        int i0, $i3, i4, $i6;
        java.lang.String $r0, $r11, r17;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $i6 = (int) 32768;

        if i0 >= $i6 goto label3;

        $r11 = staticinvoke <com.pff.PSTFile: java.lang.String getPropertyName(int,boolean)>(i0, 0);

        if $r11 == null goto label1;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = $r11;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r15[1] = $r16;

        r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%04X: ", $r15);

        goto label2;

     label1:
        $r12 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r12[1] = $r14;

        r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%04X:%04X: ", $r12);

     label2:
        goto label6;

     label3:
        $l1 = staticinvoke <com.pff.PSTFile: long getNameToIdMapKey(int)>(i0);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label4;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r8[1] = $r10;

        r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0xFFFF(%04X):%04X: ", $r8);

        goto label6;

     label4:
        $i3 = (int) $l1;

        $r0 = staticinvoke <com.pff.PSTFile: java.lang.String getPropertyName(int,boolean)>($i3, 1);

        if $r0 == null goto label5;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r5[2] = $r7;

        r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s(%04X):%04X: ", $r5);

        goto label6;

     label5:
        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r1[2] = $r4;

        r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%04X(%04X):%04X: ", $r1);

     label6:
        return r17;
    }

    protected void finalize() throws java.io.IOException
    {
        com.pff.PSTFile r0;
        java.io.RandomAccessFile $r1;

        r0 := @this: com.pff.PSTFile;

        $r1 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return;
    }

    public int getEncryptionType()
    {
        int $i0;
        com.pff.PSTFile r0;

        r0 := @this: com.pff.PSTFile;

        $i0 = r0.<com.pff.PSTFile: int encryptionType>;

        return $i0;
    }

    public java.io.RandomAccessFile getFileHandle()
    {
        com.pff.PSTFile r0;
        java.io.RandomAccessFile $r1;

        r0 := @this: com.pff.PSTFile;

        $r1 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        return $r1;
    }

    public com.pff.PSTMessageStore getMessageStore() throws com.pff.PSTException, java.io.IOException
    {
        com.pff.PSTMessageStore $r2;
        com.pff.PSTFile r0;
        com.pff.DescriptorIndexNode $r1;

        r0 := @this: com.pff.PSTFile;

        $r1 = virtualinvoke r0.<com.pff.PSTFile: com.pff.DescriptorIndexNode getDescriptorIndexNode(long)>(33L);

        $r2 = new com.pff.PSTMessageStore;

        specialinvoke $r2.<com.pff.PSTMessageStore: void <init>(com.pff.PSTFile,com.pff.DescriptorIndexNode)>(r0, $r1);

        return $r2;
    }

    public com.pff.PSTFolder getRootFolder() throws com.pff.PSTException, java.io.IOException
    {
        com.pff.PSTFolder $r2;
        com.pff.PSTFile r0;
        com.pff.DescriptorIndexNode $r1;

        r0 := @this: com.pff.PSTFile;

        $r1 = virtualinvoke r0.<com.pff.PSTFile: com.pff.DescriptorIndexNode getDescriptorIndexNode(long)>(290L);

        $r2 = new com.pff.PSTFolder;

        specialinvoke $r2.<com.pff.PSTFolder: void <init>(com.pff.PSTFile,com.pff.DescriptorIndexNode)>(r0, $r1);

        return $r2;
    }

    com.pff.PSTNodeInputStream readLeaf(long) throws java.io.IOException, com.pff.PSTException
    {
        com.pff.OffsetIndexItem $r1;
        com.pff.PSTFile r0;
        long l0;
        com.pff.PSTNodeInputStream $r2;

        r0 := @this: com.pff.PSTFile;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>(l0);

        $r2 = new com.pff.PSTNodeInputStream;

        specialinvoke $r2.<com.pff.PSTNodeInputStream: void <init>(com.pff.PSTFile,com.pff.OffsetIndexItem)>(r0, $r1);

        return $r2;
    }

    public int getLeafSize(long) throws java.io.IOException, com.pff.PSTException
    {
        byte[] r2;
        java.io.RandomAccessFile $r3, $r4;
        long l0, $l1, $l2, $l4, $l5;
        byte $b3;
        com.pff.OffsetIndexItem $r1;
        int $i6, $i7;
        com.pff.PSTFile r0;

        r0 := @this: com.pff.PSTFile;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>(l0);

        $l1 = $r1.<com.pff.OffsetIndexItem: long indexIdentifier>;

        $l2 = $l1 & 2L;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $i7 = $r1.<com.pff.OffsetIndexItem: int size>;

        return $i7;

     label1:
        r2 = newarray (byte)[8];

        $r3 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $l4 = $r1.<com.pff.OffsetIndexItem: long fileOffset>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void seek(long)>($l4);

        $r4 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r4.<java.io.RandomAccessFile: int read(byte[])>(r2);

        $l5 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, 4, 8);

        $i6 = (int) $l5;

        return $i6;
    }

    protected long extractLEFileOffset(long) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r2, $r3, $r4;
        byte[] r5, r6;
        byte $b2, $b4, $b7, $b10, $b13, $b16;
        com.pff.PSTFile r0;
        long l1, $l5, l6, $l9, $l12, $l15, $l18, l19, l20, l21, l22, l23, l24, l25, l27;
        short $s3, $s8, $s11, $s14, $s17, $s28, $s29, $s30, $s31, $s32;
        int $i0, i26, $i34;

        r0 := @this: com.pff.PSTFile;

        l1 := @parameter0: long;

        $i0 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i0 != 14 goto label1;

        $r3 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void seek(long)>(l1);

        r5 = newarray (byte)[4];

        $r4 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r4.<java.io.RandomAccessFile: int read(byte[])>(r5);

        $b7 = r5[3];

        $s28 = (short) $b7;

        $s8 = $s28 & 255;

        $l9 = (long) $s8;

        l19 = 0L | $l9;

        l20 = l19 << 8;

        $b10 = r5[2];

        $s29 = (short) $b10;

        $s11 = $s29 & 255;

        $l12 = (long) $s11;

        l21 = l20 | $l12;

        l22 = l21 << 8;

        $b13 = r5[1];

        $s30 = (short) $b13;

        $s14 = $s30 & 255;

        $l15 = (long) $s14;

        l23 = l22 | $l15;

        l24 = l23 << 8;

        $b16 = r5[0];

        $s31 = (short) $b16;

        $s17 = $s31 & 255;

        $l18 = (long) $s17;

        l25 = l24 | $l18;

        goto label3;

     label1:
        $r1 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>(l1);

        r6 = newarray (byte)[8];

        $r2 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[])>(r6);

        $b2 = r6[7];

        $s32 = (short) $b2;

        $s3 = $s32 & 255;

        l25 = (long) $s3;

        i26 = 6;

     label2:
        if i26 < 0 goto label3;

        l27 = l25 << 8;

        $b4 = r6[i26];

        $l5 = (long) $b4;

        l6 = $l5 & 255L;

        l25 = l27 | l6;

        $i34 = (int) -1;

        i26 = i26 + $i34;

        goto label2;

     label3:
        return l25;
    }

    private byte[] findBtreeItem(java.io.RandomAccessFile, long, boolean) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile r1;
        byte[] $r7, r8, r9, r10, r11, r12, r13, r14;
        byte $b3, $b12, $b20, $b28, $b36, $b60, $b72, $b80, $b84, $b85;
        com.pff.PSTFile r0;
        java.lang.StringBuilder $r4, $r5, $r17, $r18, $r20, $r22;
        long $l1, l2, $l9, $l10, $l11, $l14, $l15, $l17, $l18, $l19, $l22, $l23, $l25, $l26, $l27, $l30, $l31, $l33, $l34, $l35, $l38, $l39, $l43, $l44, $l45, $l46, $l47, $l50, $l51, $l52, $l53, $l54, $l57, $l58, $l59, $l63, $l64, $l65, $l66, $l67, $l69, $l70, $l71, $l75, $l76, $l77, $l78, $l79, $l81, l82;
        java.lang.String $r6, $r19;
        boolean z0, z1;
        com.pff.PSTException $r21, $r23;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i13, $i16, $i21, $i24, $i29, $i32, $i37, $i40, $i41, $i42, $i48, $i49, $i55, $i56, $i61, $i62, $i68, $i73, $i74, $i83, i86, i87, $i88, $i90, $i91, $i93, $i94, $i96, $i97, $i99, $i100, $i101;

        r0 := @this: com.pff.PSTFile;

        r1 := @parameter0: java.io.RandomAccessFile;

        l2 := @parameter1: long;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i0 != 14 goto label01;

        l82 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(196L);

        if z0 == 0 goto label02;

        l82 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(188L);

        goto label02;

     label01:
        l82 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(240L);

        if z0 == 0 goto label02;

        l82 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(224L);

     label02:
        $r7 = newarray (byte)[2];

        $i83 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i83 != 14 goto label03;

        $l81 = l82 + 500L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l81);

        goto label04;

     label03:
        $l1 = l82 + 496L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l1);

     label04:
        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>($r7);

     label05:
        $b84 = $r7[0];

        $i88 = (int) $b84;

        $i90 = (int) -128;

        if $i88 != $i90 goto label06;

        $b80 = $r7[1];

        $i91 = (int) $b80;

        $i93 = (int) -128;

        if $i91 != $i93 goto label06;

        if z0 == 0 goto label07;

     label06:
        $b85 = $r7[0];

        $i94 = (int) $b85;

        $i96 = (int) -127;

        if $i94 != $i96 goto label26;

        $b3 = $r7[1];

        $i97 = (int) $b3;

        $i99 = (int) -127;

        if $i97 != $i99 goto label26;

        if z0 == 0 goto label26;

     label07:
        $i4 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i4 != 14 goto label08;

        r8 = newarray (byte)[496];

        goto label09;

     label08:
        r8 = newarray (byte)[488];

     label09:
        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(l82);

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r8);

        $i5 = virtualinvoke r1.<java.io.RandomAccessFile: int read()>();

        virtualinvoke r1.<java.io.RandomAccessFile: int read()>();

        virtualinvoke r1.<java.io.RandomAccessFile: int read()>();

        $i6 = virtualinvoke r1.<java.io.RandomAccessFile: int read()>();

        if $i6 <= 0 goto label17;

        z1 = 0;

        i86 = 0;

     label10:
        if i86 >= $i5 goto label14;

        $i55 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i55 != 14 goto label12;

        $i68 = i86 * 12;

        $l69 = (long) $i68;

        $l70 = l82 + $l69;

        $l71 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l70);

        $b72 = $l71 cmp l2;

        $i100 = (int) $b72;

        if $i100 <= 0 goto label11;

        $i73 = i86 - 1;

        $i74 = $i73 * 12;

        $l75 = (long) $i74;

        $l76 = l82 + $l75;

        $l77 = $l76 + 8L;

        $l78 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l77);

        l82 = $l78;

        $l79 = $l78 + 500L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l79);

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>($r7);

        z1 = 1;

        goto label14;

     label11:
        goto label13;

     label12:
        $i56 = i86 * 24;

        $l57 = (long) $i56;

        $l58 = l82 + $l57;

        $l59 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l58);

        $b60 = $l59 cmp l2;

        $i101 = (int) $b60;

        if $i101 <= 0 goto label13;

        $i61 = i86 - 1;

        $i62 = $i61 * 24;

        $l63 = (long) $i62;

        $l64 = l82 + $l63;

        $l65 = $l64 + 16L;

        $l66 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l65);

        l82 = $l66;

        $l67 = $l66 + 496L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l67);

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>($r7);

        z1 = 1;

        goto label14;

     label13:
        i86 = i86 + 1;

        goto label10;

     label14:
        if z1 != 0 goto label16;

        $i40 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i40 != 14 goto label15;

        $i48 = $i5 - 1;

        $i49 = $i48 * 12;

        $l50 = (long) $i49;

        $l51 = l82 + $l50;

        $l52 = $l51 + 8L;

        $l53 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l52);

        l82 = $l53;

        $l54 = $l53 + 500L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l54);

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>($r7);

        goto label16;

     label15:
        $i41 = $i5 - 1;

        $i42 = $i41 * 24;

        $l43 = (long) $i42;

        $l44 = l82 + $l43;

        $l45 = $l44 + 16L;

        $l46 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l45);

        l82 = $l46;

        $l47 = $l46 + 496L;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l47);

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>($r7);

     label16:
        goto label25;

     label17:
        i87 = 0;

     label18:
        if i87 >= $i5 goto label24;

        $i7 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i7 != 14 goto label21;

        if z0 == 0 goto label19;

        $i32 = i87 * 16;

        $l33 = (long) $i32;

        $l34 = l82 + $l33;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l34);

        r9 = newarray (byte)[4];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r9);

        $l35 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[])>(r9);

        $b36 = $l35 cmp l2;

        if $b36 != 0 goto label23;

        $i37 = i87 * 16;

        $l38 = (long) $i37;

        $l39 = l82 + $l38;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l39);

        r10 = newarray (byte)[16];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r10);

        return r10;

     label19:
        $i24 = i87 * 12;

        $l25 = (long) $i24;

        $l26 = l82 + $l25;

        $l27 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l26);

        $b28 = $l27 cmp l2;

        if $b28 != 0 goto label20;

        $i29 = i87 * 12;

        $l30 = (long) $i29;

        $l31 = l82 + $l30;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l31);

        r11 = newarray (byte)[12];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r11);

        return r11;

     label20:
        goto label23;

     label21:
        if z0 == 0 goto label22;

        $i16 = i87 * 32;

        $l17 = (long) $i16;

        $l18 = l82 + $l17;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l18);

        r12 = newarray (byte)[4];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r12);

        $l19 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[])>(r12);

        $b20 = $l19 cmp l2;

        if $b20 != 0 goto label23;

        $i21 = i87 * 32;

        $l22 = (long) $i21;

        $l23 = l82 + $l22;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l23);

        r13 = newarray (byte)[32];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r13);

        return r13;

     label22:
        $i8 = i87 * 24;

        $l9 = (long) $i8;

        $l10 = l82 + $l9;

        $l11 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l10);

        $b12 = $l11 cmp l2;

        if $b12 != 0 goto label23;

        $i13 = i87 * 24;

        $l14 = (long) $i13;

        $l15 = l82 + $l14;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l15);

        r14 = newarray (byte)[24];

        virtualinvoke r1.<java.io.RandomAccessFile: int read(byte[])>(r14);

        return r14;

     label23:
        i87 = i87 + 1;

        goto label18;

     label24:
        $r21 = new com.pff.PSTException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.pff.PSTException: void <init>(java.lang.String)>($r6);

        throw $r21;

     label25:
        goto label05;

     label26:
        $r23 = new com.pff.PSTException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find node: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<com.pff.PSTException: void <init>(java.lang.String)>($r19);

        throw $r23;
    }

    com.pff.DescriptorIndexNode getDescriptorIndexNode(long) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r2;
        byte[] $r3;
        int $i1;
        com.pff.PSTFile r1;
        com.pff.DescriptorIndexNode $r0;
        long l0;

        r1 := @this: com.pff.PSTFile;

        l0 := @parameter0: long;

        $r0 = new com.pff.DescriptorIndexNode;

        $r2 = r1.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $r3 = specialinvoke r1.<com.pff.PSTFile: byte[] findBtreeItem(java.io.RandomAccessFile,long,boolean)>($r2, l0, 1);

        $i1 = virtualinvoke r1.<com.pff.PSTFile: int getPSTFileType()>();

        specialinvoke $r0.<com.pff.DescriptorIndexNode: void <init>(byte[],int)>($r3, $i1);

        return $r0;
    }

    com.pff.OffsetIndexItem getOffsetIndexNode(long) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r2;
        byte[] $r3;
        com.pff.OffsetIndexItem $r0;
        int $i1;
        com.pff.PSTFile r1;
        long l0;

        r1 := @this: com.pff.PSTFile;

        l0 := @parameter0: long;

        $r0 = new com.pff.OffsetIndexItem;

        $r2 = r1.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $r3 = specialinvoke r1.<com.pff.PSTFile: byte[] findBtreeItem(java.io.RandomAccessFile,long,boolean)>($r2, l0, 0);

        $i1 = virtualinvoke r1.<com.pff.PSTFile: int getPSTFileType()>();

        specialinvoke $r0.<com.pff.OffsetIndexItem: void <init>(byte[],int)>($r3, $i1);

        return $r0;
    }

    java.util.HashMap getPSTDescriptorItems(long) throws com.pff.PSTException, java.io.IOException
    {
        com.pff.PSTFile r0;
        long l0;
        java.util.HashMap $r2;
        com.pff.PSTNodeInputStream $r1;

        r0 := @this: com.pff.PSTFile;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.pff.PSTFile: com.pff.PSTNodeInputStream readLeaf(long)>(l0);

        $r2 = virtualinvoke r0.<com.pff.PSTFile: java.util.HashMap getPSTDescriptorItems(com.pff.PSTNodeInputStream)>($r1);

        return $r2;
    }

    java.util.HashMap getPSTDescriptorItems(com.pff.PSTNodeInputStream) throws com.pff.PSTException, java.io.IOException
    {
        byte[] $r5;
        java.util.HashMap $r1;
        long $l1, $l4;
        java.lang.Integer $r4;
        int $i0, i2, $i3, $i5, $i6, $i7, i8, i9;
        java.lang.String $r10;
        com.pff.PSTDescriptorItem $r3;
        com.pff.PSTException $r6;
        com.pff.PSTFile r2;
        java.lang.StringBuilder $r7, $r8, $r9;
        com.pff.PSTNodeInputStream r0;

        r2 := @this: com.pff.PSTFile;

        r0 := @parameter0: com.pff.PSTNodeInputStream;

        virtualinvoke r0.<com.pff.PSTNodeInputStream: void seek(long)>(0L);

        $i0 = virtualinvoke r0.<com.pff.PSTNodeInputStream: int read()>();

        if $i0 == 2 goto label1;

        $r6 = new com.pff.PSTException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to process descriptor node, bad signature: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.pff.PSTException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $l1 = virtualinvoke r0.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>(2L, 2);

        i2 = (int) $l1;

        $i3 = virtualinvoke r2.<com.pff.PSTFile: int getPSTFileType()>();

        if $i3 != 14 goto label2;

        i8 = 4;

        goto label3;

     label2:
        i8 = 8;

     label3:
        $l4 = virtualinvoke r0.<com.pff.PSTNodeInputStream: long length()>();

        $i5 = (int) $l4;

        $r5 = newarray (byte)[$i5];

        virtualinvoke r0.<com.pff.PSTNodeInputStream: void seek(long)>(0L);

        virtualinvoke r0.<com.pff.PSTNodeInputStream: int read(byte[])>($r5);

        i9 = 0;

     label4:
        if i9 >= i2 goto label7;

        $r3 = new com.pff.PSTDescriptorItem;

        specialinvoke $r3.<com.pff.PSTDescriptorItem: void <init>(byte[],int,com.pff.PSTFile)>($r5, i8, r2);

        $i6 = $r3.<com.pff.PSTDescriptorItem: int descriptorIdentifier>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $i7 = virtualinvoke r2.<com.pff.PSTFile: int getPSTFileType()>();

        if $i7 != 14 goto label5;

        i8 = i8 + 12;

        goto label6;

     label5:
        i8 = i8 + 24;

     label6:
        i9 = i9 + 1;

        goto label4;

     label7:
        return $r1;
    }

    java.util.LinkedHashMap getChildDescriptorTree() throws java.io.IOException, com.pff.PSTException
    {
        java.util.LinkedHashMap $r1, $r2, $r3;
        int $i0;
        com.pff.PSTFile r0;
        long l1;

        r0 := @this: com.pff.PSTFile;

        $r1 = r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree>;

        if $r1 != null goto label3;

        $i0 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i0 != 14 goto label1;

        l1 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(188L);

        goto label2;

     label1:
        l1 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>(224L);

     label2:
        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree> = $r2;

        specialinvoke r0.<com.pff.PSTFile: void processDescriptorBTree(long)>(l1);

     label3:
        $r3 = r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree>;

        return $r3;
    }

    private void processDescriptorBTree(long) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r20, $r21, $r22, $r23;
        byte[] r24, r25;
        java.lang.Integer $r13, $r16, $r18;
        byte $b3, $b4;
        com.pff.PSTFile r0;
        long l1, $l2, $l6, $l11, $l12, $l20, $l21, $l24, $l25, $l26, $l28, $l29, $l30, $l31, $l32, l34, l35;
        java.util.LinkedHashMap $r12, $r15, $r17;
        com.pff.DescriptorIndexNode $r27;
        boolean $z0;
        com.pff.PSTException $r29;
        int $i0, $i5, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i23, $i27, i33, i36, $i37, $i38, $i39, $i41, $i42, $i44;
        java.util.LinkedList r26, $r28;
        java.lang.Object $r19;

        r0 := @this: com.pff.PSTFile;

        l1 := @parameter0: long;

        r24 = newarray (byte)[2];

        $i0 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i0 != 14 goto label01;

        $r23 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $l32 = l1 + 500L;

        virtualinvoke $r23.<java.io.RandomAccessFile: void seek(long)>($l32);

        goto label02;

     label01:
        $r1 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $l2 = l1 + 496L;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l2);

     label02:
        $r2 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[])>(r24);

        $b3 = r24[0];

        $i39 = (int) $b3;

        $i41 = (int) -127;

        if $i39 != $i41 goto label17;

        $b4 = r24[1];

        $i42 = (int) $b4;

        $i44 = (int) -127;

        if $i42 != $i44 goto label17;

        $i5 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i5 != 14 goto label03;

        $r22 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $l31 = l1 + 496L;

        virtualinvoke $r22.<java.io.RandomAccessFile: void seek(long)>($l31);

        goto label04;

     label03:
        $r4 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $l6 = l1 + 488L;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l6);

     label04:
        $r5 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $i7 = virtualinvoke $r5.<java.io.RandomAccessFile: int read()>();

        $r6 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r6.<java.io.RandomAccessFile: int read()>();

        $r7 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r7.<java.io.RandomAccessFile: int read()>();

        $r8 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $i8 = virtualinvoke $r8.<java.io.RandomAccessFile: int read()>();

        if $i8 <= 0 goto label09;

        i33 = 0;

     label05:
        if i33 >= $i7 goto label08;

        $i22 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i22 != 14 goto label06;

        $i27 = 12 * i33;

        $l28 = (long) $i27;

        l34 = l1 + $l28;

        $l29 = l34 + 8L;

        $l30 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l29);

        specialinvoke r0.<com.pff.PSTFile: void processDescriptorBTree(long)>($l30);

        goto label07;

     label06:
        $i23 = 24 * i33;

        $l24 = (long) $i23;

        l35 = l1 + $l24;

        $l25 = l35 + 16L;

        $l26 = virtualinvoke r0.<com.pff.PSTFile: long extractLEFileOffset(long)>($l25);

        specialinvoke r0.<com.pff.PSTFile: void processDescriptorBTree(long)>($l26);

     label07:
        i33 = i33 + 1;

        goto label05;

     label08:
        goto label16;

     label09:
        i36 = 0;

     label10:
        if i36 >= $i7 goto label16;

        $i9 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        if $i9 != 14 goto label11;

        $r20 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $i19 = i36 * 16;

        $l20 = (long) $i19;

        $l21 = l1 + $l20;

        virtualinvoke $r20.<java.io.RandomAccessFile: void seek(long)>($l21);

        r25 = newarray (byte)[16];

        $r21 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r21.<java.io.RandomAccessFile: int read(byte[])>(r25);

        goto label12;

     label11:
        $r9 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        $i10 = i36 * 32;

        $l11 = (long) $i10;

        $l12 = l1 + $l11;

        virtualinvoke $r9.<java.io.RandomAccessFile: void seek(long)>($l12);

        r25 = newarray (byte)[32];

        $r10 = r0.<com.pff.PSTFile: java.io.RandomAccessFile in>;

        virtualinvoke $r10.<java.io.RandomAccessFile: int read(byte[])>(r25);

     label12:
        $r27 = new com.pff.DescriptorIndexNode;

        $i13 = virtualinvoke r0.<com.pff.PSTFile: int getPSTFileType()>();

        specialinvoke $r27.<com.pff.DescriptorIndexNode: void <init>(byte[],int)>(r25, $i13);

        $i15 = $r27.<com.pff.DescriptorIndexNode: int parentDescriptorIndexIdentifier>;

        $i14 = $r27.<com.pff.DescriptorIndexNode: int descriptorIdentifier>;

        if $i15 != $i14 goto label13;

        goto label15;

     label13:
        $r12 = r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree>;

        $i16 = $r27.<com.pff.DescriptorIndexNode: int parentDescriptorIndexIdentifier>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $z0 = virtualinvoke $r12.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r13);

        if $z0 == 0 goto label14;

        $r17 = r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree>;

        $i18 = $r27.<com.pff.DescriptorIndexNode: int parentDescriptorIndexIdentifier>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r19 = virtualinvoke $r17.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r18);

        r26 = (java.util.LinkedList) $r19;

        virtualinvoke r26.<java.util.LinkedList: boolean add(java.lang.Object)>($r27);

        goto label15;

     label14:
        $r28 = new java.util.LinkedList;

        specialinvoke $r28.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r28.<java.util.LinkedList: boolean add(java.lang.Object)>($r27);

        $r15 = r0.<com.pff.PSTFile: java.util.LinkedHashMap childrenDescriptorTree>;

        $i17 = $r27.<com.pff.DescriptorIndexNode: int parentDescriptorIndexIdentifier>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        virtualinvoke $r15.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r28);

     label15:
        $i37 = r0.<com.pff.PSTFile: int itemCount>;

        $i38 = $i37 + 1;

        r0.<com.pff.PSTFile: int itemCount> = $i38;

        i36 = i36 + 1;

        goto label10;

     label16:
        goto label18;

     label17:
        staticinvoke <com.pff.PSTObject: void printHexFormatted(byte[],boolean)>(r24, 1);

        $r29 = new com.pff.PSTException;

        specialinvoke $r29.<com.pff.PSTException: void <init>(java.lang.String)>("Unable to read descriptor node, is not a descriptor");

        throw $r29;

     label18:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.HashMap $r1;

        <com.pff.PSTFile: int PSETID_Sharing> = 14;

        <com.pff.PSTFile: int PSETID_AirSync> = 13;

        <com.pff.PSTFile: int PS_MAPI> = 12;

        <com.pff.PSTFile: int PSETID_UnifiedMessaging> = 11;

        <com.pff.PSTFile: int PSETID_Task> = 10;

        <com.pff.PSTFile: int PSETID_PostRss> = 9;

        <com.pff.PSTFile: int PSETID_Note> = 8;

        <com.pff.PSTFile: int PSETID_Messaging> = 7;

        <com.pff.PSTFile: int PSETID_Log> = 6;

        <com.pff.PSTFile: int PSETID_Meeting> = 5;

        <com.pff.PSTFile: int PSETID_Appointment> = 4;

        <com.pff.PSTFile: int PS_INTERNET_HEADERS> = 3;

        <com.pff.PSTFile: int PSETID_Address> = 2;

        <com.pff.PSTFile: int PSETID_Common> = 1;

        <com.pff.PSTFile: int PS_PUBLIC_STRINGS> = 0;

        <com.pff.PSTFile: int PST_TYPE_UNICODE> = 23;

        <com.pff.PSTFile: int PST_TYPE_ANSI_2> = 15;

        <com.pff.PSTFile: int PST_TYPE_ANSI> = 14;

        <com.pff.PSTFile: int ROOT_FOLDER_DESCRIPTOR_IDENTIFIER> = 290;

        <com.pff.PSTFile: int MESSAGE_STORE_DESCRIPTOR_IDENTIFIER> = 33;

        <com.pff.PSTFile: int ENCRYPTION_TYPE_COMPRESSIBLE> = 1;

        <com.pff.PSTFile: int ENCRYPTION_TYPE_NONE> = 0;

        $r0 = newarray (java.lang.String)[15];

        $r0[0] = "00020329-0000-0000-C000-000000000046";

        $r0[1] = "00062008-0000-0000-C000-000000000046";

        $r0[2] = "00062004-0000-0000-C000-000000000046";

        $r0[3] = "00020386-0000-0000-C000-000000000046";

        $r0[4] = "00062002-0000-0000-C000-000000000046";

        $r0[5] = "6ED8DA90-450B-101B-98DA-00AA003F1305";

        $r0[6] = "0006200A-0000-0000-C000-000000000046";

        $r0[7] = "41F28F13-83F4-4114-A584-EEDB5A6B0BFF";

        $r0[8] = "0006200E-0000-0000-C000-000000000046";

        $r0[9] = "00062041-0000-0000-C000-000000000046";

        $r0[10] = "00062003-0000-0000-C000-000000000046";

        $r0[11] = "4442858E-A9E3-4E80-B900-317A210CC15B";

        $r0[12] = "00020328-0000-0000-C000-000000000046";

        $r0[13] = "71035549-0739-4DCB-9163-00F0580DBBDF";

        $r0[14] = "00062040-0000-0000-C000-000000000046";

        <com.pff.PSTFile: java.lang.String[] guidStrings> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.pff.PSTFile: java.util.HashMap idToName> = $r1;

        <com.pff.PSTFile: java.util.Properties propertyInternetCodePages> = null;

        <com.pff.PSTFile: boolean bCPFirstTime> = 1;

        <com.pff.PSTFile: java.util.Properties propertyNames> = null;

        <com.pff.PSTFile: boolean bFirstTime> = 1;

        return;
    }
}
