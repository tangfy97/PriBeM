public class org.apache.commons.compress.archivers.sevenz.SevenZOutputFile extends java.lang.Object implements java.io.Closeable
{
    private final java.io.RandomAccessFile file;
    private final java.util.List files;
    private int numNonEmptyStreams;
    private final java.util.zip.CRC32 crc32;
    private final java.util.zip.CRC32 compressedCrc32;
    private long fileBytesWritten;
    private boolean finished;
    private org.apache.commons.compress.utils.CountingOutputStream currentOutputStream;
    private org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams;
    private java.lang.Iterable contentMethods;
    private final java.util.Map additionalSizes;

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.io.RandomAccessFile $r8, $r10;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod $r5;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration $r4;
        java.util.HashMap $r7;
        java.io.File r9;
        java.util.ArrayList $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.util.List $r6;
        java.util.zip.CRC32 $r2, $r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r9 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files> = $r1;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams> = 0;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 crc32> = $r2;

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 compressedCrc32> = $r3;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten> = 0L;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: boolean finished> = 0;

        $r4 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;

        $r5 = <org.apache.commons.compress.archivers.sevenz.SevenZMethod: org.apache.commons.compress.archivers.sevenz.SevenZMethod LZMA2>;

        specialinvoke $r4.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: void <init>(org.apache.commons.compress.archivers.sevenz.SevenZMethod)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r4);

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable contentMethods> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.Map additionalSizes> = $r7;

        $r8 = new java.io.RandomAccessFile;

        specialinvoke $r8.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r9, "rw");

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file> = $r8;

        $r10 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>(32L);

        return;
    }

    public void setContentCompression(org.apache.commons.compress.archivers.sevenz.SevenZMethod)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.util.List $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod r2;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration $r1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r2 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZMethod;

        $r1 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;

        specialinvoke $r1.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: void <init>(org.apache.commons.compress.archivers.sevenz.SevenZMethod)>(r2);

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void setContentMethods(java.lang.Iterable)>($r3);

        return;
    }

    public void setContentMethods(java.lang.Iterable)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.lang.Iterable r1, $r2;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable reverse(java.lang.Iterable)>(r1);

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable contentMethods> = $r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: boolean finished>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void finish()>();

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return;
    }

    public org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r4;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r0;
        java.util.Date $r3;
        long $l0;
        java.lang.String r2;
        java.io.File r1;
        boolean $z0;

        r4 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void <init>()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        virtualinvoke $r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setDirectory(boolean)>($z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setName(java.lang.String)>(r2);

        $r3 = new java.util.Date;

        $l0 = virtualinvoke r1.<java.io.File: long lastModified()>();

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setLastModifiedDate(java.util.Date)>($r3);

        return $r0;
    }

    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r2;
        java.util.List $r3;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r1;

        r2 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        r1 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) r0;

        $r3 = r2.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void closeArchiveEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        byte $b3;
        org.apache.commons.compress.utils.CountingOutputStream[] $r8, $r9, $r11, $r13;
        java.util.Map $r12;
        java.util.List $r2, $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r17;
        long $l2, $l6, $l7, $l8, $l9, $l12;
        long[] r10;
        int $i0, $i1, $i4, $i5, $i10, $i11, i13, $i14;
        org.apache.commons.compress.utils.CountingOutputStream $r1, $r5, $r14, $r15, $r16;
        java.util.zip.CRC32 $r6, $r7, $r18, $r19;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        if $r1 == null goto label1;

        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        virtualinvoke $r15.<org.apache.commons.compress.utils.CountingOutputStream: void flush()>();

        $r16 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        virtualinvoke $r16.<org.apache.commons.compress.utils.CountingOutputStream: void close()>();

     label1:
        $r3 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r17 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r4;

        $l2 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten>;

        $b3 = $l2 cmp 0L;

        $i14 = (int) $b3;

        if $i14 <= 0 goto label4;

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setHasStream(boolean)>(1);

        $i4 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams> = $i5;

        $r5 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        $l6 = virtualinvoke $r5.<org.apache.commons.compress.utils.CountingOutputStream: long getBytesWritten()>();

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setSize(long)>($l6);

        $l7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten>;

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setCompressedSize(long)>($l7);

        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 crc32>;

        $l8 = virtualinvoke $r6.<java.util.zip.CRC32: long getValue()>();

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setCrcValue(long)>($l8);

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 compressedCrc32>;

        $l9 = virtualinvoke $r7.<java.util.zip.CRC32: long getValue()>();

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setCompressedCrcValue(long)>($l9);

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setHasCrc(boolean)>(1);

        $r8 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams>;

        if $r8 == null goto label5;

        $r9 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams>;

        $i10 = lengthof $r9;

        r10 = newarray (long)[$i10];

        i13 = 0;

     label2:
        $r11 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams>;

        $i11 = lengthof $r11;

        if i13 >= $i11 goto label3;

        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams>;

        $r14 = $r13[i13];

        $l12 = virtualinvoke $r14.<org.apache.commons.compress.utils.CountingOutputStream: long getBytesWritten()>();

        r10[i13] = $l12;

        i13 = i13 + 1;

        goto label2;

     label3:
        $r12 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.Map additionalSizes>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r10);

        goto label5;

     label4:
        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setHasStream(boolean)>(0);

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setSize(long)>(0L);

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setCompressedSize(long)>(0L);

        virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setHasCrc(boolean)>(0);

     label5:
        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream> = null;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams> = null;

        $r18 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 crc32>;

        virtualinvoke $r18.<java.util.zip.CRC32: void reset()>();

        $r19 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 compressedCrc32>;

        virtualinvoke $r19.<java.util.zip.CRC32: void reset()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten> = 0L;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        int i0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.OutputStream getCurrentOutputStream()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        byte[] r2;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        int i0, i1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 <= 0 goto label1;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.OutputStream getCurrentOutputStream()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0);

     label1:
        return;
    }

    public void finish() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r5, $r7, $r9, $r10, $r11, $r15, $r16;
        byte[] $r4, $r8, $r14;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r3, $r13;
        boolean $z0;
        java.io.ByteArrayOutputStream $r2, $r12;
        long $l0, $l1, $l2, $l4, $l5, $l6, $l7, $l10;
        int $i3, $i8, $i9, $i11, $i12;
        java.io.IOException $r17;
        java.util.zip.CRC32 $r6;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: boolean finished>;

        if $z0 == 0 goto label1;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("This archive has already been finished");

        throw $r17;

     label1:
        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: boolean finished> = 1;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long getFilePointer()>();

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeHeader(java.io.DataOutput)>($r3);

        virtualinvoke $r3.<java.io.DataOutputStream: void flush()>();

        $r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r5.<java.io.RandomAccessFile: void write(byte[])>($r4);

        $r6 = new java.util.zip.CRC32;

        specialinvoke $r6.<java.util.zip.CRC32: void <init>()>();

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r7.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r9 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        $r8 = <org.apache.commons.compress.archivers.sevenz.SevenZFile: byte[] sevenZSignature>;

        virtualinvoke $r9.<java.io.RandomAccessFile: void write(byte[])>($r8);

        $r10 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void write(int)>(0);

        $r11 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r11.<java.io.RandomAccessFile: void write(int)>(2);

        $r12 = new java.io.ByteArrayOutputStream;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>()>();

        $r13 = new java.io.DataOutputStream;

        specialinvoke $r13.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r12);

        $l1 = $l0 - 32L;

        $l2 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l1);

        virtualinvoke $r13.<java.io.DataOutputStream: void writeLong(long)>($l2);

        $i3 = lengthof $r4;

        $l4 = (long) $i3;

        $l5 = 4294967295L & $l4;

        $l6 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l5);

        virtualinvoke $r13.<java.io.DataOutputStream: void writeLong(long)>($l6);

        virtualinvoke $r6.<java.util.zip.CRC32: void reset()>();

        virtualinvoke $r6.<java.util.zip.CRC32: void update(byte[])>($r4);

        $l7 = virtualinvoke $r6.<java.util.zip.CRC32: long getValue()>();

        $i8 = (int) $l7;

        $i9 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i8);

        virtualinvoke $r13.<java.io.DataOutputStream: void writeInt(int)>($i9);

        virtualinvoke $r13.<java.io.DataOutputStream: void flush()>();

        $r14 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r6.<java.util.zip.CRC32: void reset()>();

        virtualinvoke $r6.<java.util.zip.CRC32: void update(byte[])>($r14);

        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        $l10 = virtualinvoke $r6.<java.util.zip.CRC32: long getValue()>();

        $i11 = (int) $l10;

        $i12 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i11);

        virtualinvoke $r15.<java.io.RandomAccessFile: void writeInt(int)>($i12);

        $r16 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        virtualinvoke $r16.<java.io.RandomAccessFile: void write(byte[])>($r14);

        return;
    }

    private java.io.OutputStream getCurrentOutputStream() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        org.apache.commons.compress.utils.CountingOutputStream $r1, $r2, $r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream setupFileOutputStream()>();

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream currentOutputStream>;

        return $r2;
    }

    private org.apache.commons.compress.utils.CountingOutputStream setupFileOutputStream() throws java.io.IOException
    {
        java.lang.IllegalStateException $r19;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper $r2;
        java.lang.Object[] $r12;
        java.lang.Iterable $r8;
        java.util.ArrayList $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        org.apache.commons.compress.utils.CountingOutputStream[] $r11, $r13;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3;
        java.io.OutputStream r20;
        java.util.Iterator $r9;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod $r16;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1 $r10;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration r15;
        org.apache.commons.compress.utils.CountingOutputStream $r18;
        java.util.List $r1, $r4, $r5;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r7;
        java.lang.Object $r6, $r14, $r17;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current 7z entry");

        throw $r19;

     label1:
        $r2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper;

        specialinvoke $r2.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper: void <init>(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1)>(r0, null);

        r20 = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        z3 = 1;

        $r5 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r4 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r6;

        $r8 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable getContentMethods(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>($r7);

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration) $r14;

        if z3 != 0 goto label3;

        $r18 = new org.apache.commons.compress.utils.CountingOutputStream;

        specialinvoke $r18.<org.apache.commons.compress.utils.CountingOutputStream: void <init>(java.io.OutputStream)>(r20);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        r20 = $r18;

     label3:
        $r16 = virtualinvoke r15.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: org.apache.commons.compress.archivers.sevenz.SevenZMethod getMethod()>();

        $r17 = virtualinvoke r15.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: java.lang.Object getOptions()>();

        r20 = staticinvoke <org.apache.commons.compress.archivers.sevenz.Coders: java.io.OutputStream addEncoder(java.io.OutputStream,org.apache.commons.compress.archivers.sevenz.SevenZMethod,java.lang.Object)>(r20, $r16, $r17);

        z3 = 0;

        goto label2;

     label4:
        $z2 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r11 = newarray (org.apache.commons.compress.utils.CountingOutputStream)[$i2];

        $r12 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (org.apache.commons.compress.utils.CountingOutputStream[]) $r12;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: org.apache.commons.compress.utils.CountingOutputStream[] additionalCountingStreams> = $r13;

     label5:
        $r10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1;

        specialinvoke $r10.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1: void <init>(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,java.io.OutputStream)>(r0, r20);

        return $r10;
    }

    private java.lang.Iterable getContentMethods(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r2;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.lang.Iterable $r1, $r3;

        r2 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.Iterable getContentMethods()>();

        if $r1 != null goto label1;

        $r3 = r2.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable contentMethods>;

        goto label2;

     label1:
        $r3 = $r1;

     label2:
        return $r3;
    }

    private void writeHeader(java.io.DataOutput) throws java.io.IOException
    {
        java.io.DataOutput r0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(1);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(4);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeStreamsInfo(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFilesInfo(java.io.DataOutput)>(r0);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writeStreamsInfo(java.io.DataOutput) throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutput r1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r1 := @parameter0: java.io.DataOutput;

        $i0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams>;

        if $i0 <= 0 goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writePackInfo(java.io.DataOutput)>(r1);

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUnpackInfo(java.io.DataOutput)>(r1);

     label1:
        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeSubStreamsInfo(java.io.DataOutput)>(r1);

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writePackInfo(java.io.DataOutput) throws java.io.IOException
    {
        long $l1, $l2, $l3, $l6;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        int $i0, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.io.DataOutput r0;
        java.util.Iterator $r3, $r5;
        java.util.List $r2, $r4;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r8, r9;
        java.lang.Object $r6, $r7;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(6);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, 0L);

        $i0 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams>;

        $l1 = (long) $i0;

        $l2 = 4294967295L & $l1;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l2);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(9);

        $r2 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r7;

        $z3 = virtualinvoke r8.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z3 == 0 goto label2;

        $l6 = virtualinvoke r8.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long getCompressedSize()>();

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l6);

     label2:
        goto label1;

     label3:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(10);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(1);

        $r4 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r6;

        $z2 = virtualinvoke r9.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z2 == 0 goto label5;

        $l3 = virtualinvoke r9.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long getCompressedCrcValue()>();

        $i4 = (int) $l3;

        $i5 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i4);

        interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i5);

     label5:
        goto label4;

     label6:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writeUnpackInfo(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        java.util.Map $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r2, $r4, $r6;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r14, r15, r16;
        long $l1, $l2, $l5, l7;
        long[] r12;
        int $i0, $i3, $i4, i6, i8;
        java.io.DataOutput r0;
        java.util.Iterator $r3, $r5, $r7;
        java.lang.Object $r8, $r9, $r11, $r13;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(7);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(11);

        $i0 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: int numNonEmptyStreams>;

        $l1 = (long) $i0;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l1);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        $r2 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r13 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r13;

        $z5 = virtualinvoke r14.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z5 == 0 goto label02;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFolder(java.io.DataOutput,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>(r0, r14);

     label02:
        goto label01;

     label03:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(12);

        $r4 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r9;

        $z4 = virtualinvoke r15.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z4 == 0 goto label07;

        $r10 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.Map additionalSizes>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r12 = (long[]) $r11;

        if r12 == null goto label06;

        i6 = lengthof r12;

        i8 = 0;

     label05:
        if i8 >= i6 goto label06;

        l7 = r12[i8];

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, l7);

        i8 = i8 + 1;

        goto label05;

     label06:
        $l5 = virtualinvoke r15.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long getSize()>();

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l5);

     label07:
        goto label04;

     label08:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(10);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(1);

        $r6 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r8;

        $z3 = virtualinvoke r16.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z3 == 0 goto label10;

        $l2 = virtualinvoke r16.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long getCrcValue()>();

        $i3 = (int) $l2;

        $i4 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i3);

        interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i4);

     label10:
        goto label09;

     label11:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writeFolder(java.io.DataOutput, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) throws java.io.IOException
    {
        byte[] $r6;
        java.io.ByteArrayOutputStream $r0;
        long $l0, $l3, $l4;
        java.lang.Iterable $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        int $i1, $i2, i5, i6;
        boolean $z0;
        java.io.DataOutput r5;
        java.util.Iterator $r4;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration r8;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r2;
        java.lang.Object $r7;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r5 := @parameter0: java.io.DataOutput;

        r2 := @parameter1: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        i5 = 0;

        $r3 = specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.lang.Iterable getContentMethods(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>(r2);

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration) $r7;

        i5 = i5 + 1;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)>(r8, $r0);

        goto label1;

     label2:
        $l0 = (long) i5;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r5, $l0);

        $r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        interfaceinvoke r5.<java.io.DataOutput: void write(byte[])>($r6);

        i6 = 0;

     label3:
        $i1 = i5 - 1;

        if i6 >= $i1 goto label4;

        $i2 = i6 + 1;

        $l3 = (long) $i2;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r5, $l3);

        $l4 = (long) i6;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r5, $l4);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    private void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r7;
        byte[] $r2, $r6;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod $r1, $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration r0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r8;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;
        org.apache.commons.compress.archivers.sevenz.CoderBase $r4;

        r8 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;

        r7 := @parameter1: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: org.apache.commons.compress.archivers.sevenz.SevenZMethod getMethod()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.archivers.sevenz.SevenZMethod: byte[] getId()>();

        $r3 = virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: org.apache.commons.compress.archivers.sevenz.SevenZMethod getMethod()>();

        $r4 = staticinvoke <org.apache.commons.compress.archivers.sevenz.Coders: org.apache.commons.compress.archivers.sevenz.CoderBase findByMethod(org.apache.commons.compress.archivers.sevenz.SevenZMethod)>($r3);

        $r5 = virtualinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration: java.lang.Object getOptions()>();

        $r6 = virtualinvoke $r4.<org.apache.commons.compress.archivers.sevenz.CoderBase: byte[] getOptionsAsProperties(java.lang.Object)>($r5);

        i3 = lengthof $r2;

        $i0 = lengthof $r6;

        if $i0 <= 0 goto label1;

        i3 = i3 | 32;

     label1:
        virtualinvoke r7.<java.io.OutputStream: void write(int)>(i3);

        virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r2);

        $i1 = lengthof $r6;

        if $i1 <= 0 goto label2;

        $i2 = lengthof $r6;

        virtualinvoke r7.<java.io.OutputStream: void write(int)>($i2);

        virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r6);

     label2:
        return;
    }

    private void writeSubStreamsInfo(java.io.DataOutput) throws java.io.IOException
    {
        java.io.DataOutput r0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(8);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writeFilesInfo(java.io.DataOutput) throws java.io.IOException
    {
        java.io.DataOutput r0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        java.util.List $r2;
        int $i0;
        long $l1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(5);

        $r2 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l1 = (long) $i0;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l1);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileEmptyStreams(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileEmptyFiles(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileAntiItems(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileNames(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileCTimes(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileATimes(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileMTimes(java.io.DataOutput)>(r0);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFileWindowsAttributes(java.io.DataOutput)>(r0);

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(0);

        return;
    }

    private void writeFileEmptyStreams(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r10;
        java.io.ByteArrayOutputStream $r7;
        long $l4;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r8;
        int $i0, $i1, $i2, $i3, $i5, i6;
        boolean $z0, $z1, $z2, z3, $z4;
        java.io.DataOutput r3;
        java.util.Iterator $r2;
        java.util.List $r1, $r5, $r6, $r9, $r11;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r13, r15;
        java.lang.Object $r12, $r14;
        java.util.BitSet $r4;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        z3 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r14;

        $z2 = virtualinvoke r15.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z2 != 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        if z3 == 0 goto label8;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(14);

        $r4 = new java.util.BitSet;

        $r5 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>($i0);

        i6 = 0;

     label4:
        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i6 >= $i1 goto label7;

        $i5 = i6;

        $r11 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i6);

        $r13 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r12;

        $z1 = virtualinvoke $r13.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z1 != 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        virtualinvoke $r4.<java.util.BitSet: void set(int,boolean)>($i5, $z4);

        i6 = i6 + 1;

        goto label4;

     label7:
        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.DataOutputStream;

        specialinvoke $r8.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r8, $r4, $i2);

        virtualinvoke $r8.<java.io.DataOutputStream: void flush()>();

        $r10 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i3 = lengthof $r10;

        $l4 = (long) $i3;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l4);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r10);

     label8:
        return;
    }

    private void writeFileEmptyFiles(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r6;
        java.io.ByteArrayOutputStream $r4;
        long $l2;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        java.io.DataOutputStream $r5;
        int $i0, $i1, $i3, i4, i5;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.io.DataOutput r3;
        java.util.List $r2, $r7, $r10;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r9, $r12;
        java.lang.Object $r8, $r11;
        java.util.BitSet $r0;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        z3 = 0;

        i4 = 0;

        $r0 = new java.util.BitSet;

        specialinvoke $r0.<java.util.BitSet: void <init>(int)>(0);

        i5 = 0;

     label1:
        $r2 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i5 >= $i0 goto label7;

        $r7 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r8;

        $z0 = virtualinvoke $r9.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z0 != 0 goto label6;

        $r10 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i5);

        $r12 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r11;

        $z1 = virtualinvoke $r12.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isDirectory()>();

        $i3 = i4;

        i4 = i4 + 1;

        if $z1 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        virtualinvoke $r0.<java.util.BitSet: void set(int,boolean)>($i3, $z4);

        $z2 = z3;

        if $z1 != 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        z3 = $z2 | $z5;

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        if z3 == 0 goto label8;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(15);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r0, i4);

        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r6;

        $l2 = (long) $i1;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r6);

     label8:
        return;
    }

    private void writeFileAntiItems(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r6;
        java.io.ByteArrayOutputStream $r4;
        long $l2;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        java.io.DataOutputStream $r5;
        int $i0, $i1, $i3, i4, i5;
        boolean $z0, $z1, z2;
        java.io.DataOutput r3;
        java.util.List $r2, $r7, $r10;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r9, $r12;
        java.lang.Object $r8, $r11;
        java.util.BitSet $r0;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        z2 = 0;

        $r0 = new java.util.BitSet;

        specialinvoke $r0.<java.util.BitSet: void <init>(int)>(0);

        i4 = 0;

        i5 = 0;

     label1:
        $r2 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i5 >= $i0 goto label3;

        $r7 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r8;

        $z0 = virtualinvoke $r9.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream()>();

        if $z0 != 0 goto label2;

        $r10 = r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i5);

        $r12 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r11;

        $z1 = virtualinvoke $r12.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isAntiItem()>();

        $i3 = i4;

        i4 = i4 + 1;

        virtualinvoke $r0.<java.util.BitSet: void set(int,boolean)>($i3, $z1);

        z2 = z2 | $z1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if z2 == 0 goto label4;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(16);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r0, i4);

        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r6;

        $l2 = (long) $i1;

        specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r6);

     label4:
        return;
    }

    private void writeFileNames(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r6, $r10;
        java.io.DataOutput r0;
        java.io.ByteArrayOutputStream $r1;
        java.util.Iterator $r5;
        long $l1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r3;
        java.util.List $r4;
        java.io.DataOutputStream $r2;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r8;
        int $i0;
        java.lang.Object $r7;
        java.lang.String $r9;
        boolean $z0;

        r3 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(17);

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = new java.io.DataOutputStream;

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>(0);

        $r4 = r3.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r7;

        $r9 = virtualinvoke r8.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.String getName()>();

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16LE");

        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[])>($r10);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeShort(int)>(0);

        goto label1;

     label2:
        virtualinvoke $r2.<java.io.DataOutputStream: void flush()>();

        $r6 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r6;

        $l1 = (long) $i0;

        specialinvoke r3.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r0, $l1);

        interfaceinvoke r0.<java.io.DataOutput: void write(byte[])>($r6);

        return;
    }

    private void writeFileCTimes(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r9;
        java.util.Date $r11;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r6, $r7, $r13, $r14, $r15, $r16;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r18, r20, r21;
        java.io.ByteArrayOutputStream $r4;
        long $l2, $l3, $l4;
        int $i0, $i1, $i5, $i6, $i7, i8, i9;
        java.io.DataOutput r3;
        java.util.Iterator $r2, $r8;
        java.lang.Object $r10, $r17, $r19;
        java.util.BitSet $r12;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        i8 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r19;

        $z3 = virtualinvoke r20.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasCreationDate()>();

        if $z3 == 0 goto label02;

        i8 = i8 + 1;

     label02:
        goto label01;

     label03:
        if i8 <= 0 goto label11;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(18);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i8 == $i0 goto label06;

        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r12 = new java.util.BitSet;

        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        specialinvoke $r12.<java.util.BitSet: void <init>(int)>($i5);

        i9 = 0;

     label04:
        $r14 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i6 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i9 >= $i6 goto label05;

        $r16 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i9);

        $r18 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r17;

        $z2 = virtualinvoke $r18.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasCreationDate()>();

        virtualinvoke $r12.<java.util.BitSet: void set(int,boolean)>(i9, $z2);

        i9 = i9 + 1;

        goto label04;

     label05:
        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i7 = interfaceinvoke $r15.<java.util.List: int size()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r12, $i7);

        goto label07;

     label06:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(1);

     label07:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r10;

        $z1 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasCreationDate()>();

        if $z1 == 0 goto label09;

        $r11 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date getCreationDate()>();

        $l3 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>($r11);

        $l4 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeLong(long)>($l4);

     label09:
        goto label08;

     label10:
        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r9 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r9;

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r9);

     label11:
        return;
    }

    private void writeFileATimes(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r9;
        java.util.Date $r11;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r6, $r7, $r13, $r14, $r15, $r16;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r18, r20, r21;
        java.io.ByteArrayOutputStream $r4;
        long $l2, $l3, $l4;
        int $i0, $i1, $i5, $i6, $i7, i8, i9;
        java.io.DataOutput r3;
        java.util.Iterator $r2, $r8;
        java.lang.Object $r10, $r17, $r19;
        java.util.BitSet $r12;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        i8 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r19;

        $z3 = virtualinvoke r20.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasAccessDate()>();

        if $z3 == 0 goto label02;

        i8 = i8 + 1;

     label02:
        goto label01;

     label03:
        if i8 <= 0 goto label11;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(19);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i8 == $i0 goto label06;

        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r12 = new java.util.BitSet;

        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        specialinvoke $r12.<java.util.BitSet: void <init>(int)>($i5);

        i9 = 0;

     label04:
        $r14 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i6 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i9 >= $i6 goto label05;

        $r16 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i9);

        $r18 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r17;

        $z2 = virtualinvoke $r18.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasAccessDate()>();

        virtualinvoke $r12.<java.util.BitSet: void set(int,boolean)>(i9, $z2);

        i9 = i9 + 1;

        goto label04;

     label05:
        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i7 = interfaceinvoke $r15.<java.util.List: int size()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r12, $i7);

        goto label07;

     label06:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(1);

     label07:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r10;

        $z1 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasAccessDate()>();

        if $z1 == 0 goto label09;

        $r11 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date getAccessDate()>();

        $l3 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>($r11);

        $l4 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeLong(long)>($l4);

     label09:
        goto label08;

     label10:
        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r9 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r9;

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r9);

     label11:
        return;
    }

    private void writeFileMTimes(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r9;
        java.util.Date $r11;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r6, $r7, $r13, $r14, $r15, $r16;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r18, r20, r21;
        java.io.ByteArrayOutputStream $r4;
        long $l2, $l3, $l4;
        int $i0, $i1, $i5, $i6, $i7, i8, i9;
        java.io.DataOutput r3;
        java.util.Iterator $r2, $r8;
        java.lang.Object $r10, $r17, $r19;
        java.util.BitSet $r12;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        i8 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r19;

        $z3 = virtualinvoke r20.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasLastModifiedDate()>();

        if $z3 == 0 goto label02;

        i8 = i8 + 1;

     label02:
        goto label01;

     label03:
        if i8 <= 0 goto label11;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(20);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i8 == $i0 goto label06;

        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r12 = new java.util.BitSet;

        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        specialinvoke $r12.<java.util.BitSet: void <init>(int)>($i5);

        i9 = 0;

     label04:
        $r14 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i6 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i9 >= $i6 goto label05;

        $r16 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i9);

        $r18 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r17;

        $z2 = virtualinvoke $r18.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasLastModifiedDate()>();

        virtualinvoke $r12.<java.util.BitSet: void set(int,boolean)>(i9, $z2);

        i9 = i9 + 1;

        goto label04;

     label05:
        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i7 = interfaceinvoke $r15.<java.util.List: int size()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r12, $i7);

        goto label07;

     label06:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(1);

     label07:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r10;

        $z1 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasLastModifiedDate()>();

        if $z1 == 0 goto label09;

        $r11 = virtualinvoke r21.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date getLastModifiedDate()>();

        $l3 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>($r11);

        $l4 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeLong(long)>($l4);

     label09:
        goto label08;

     label10:
        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r9 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r9;

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r9);

     label11:
        return;
    }

    private void writeFileWindowsAttributes(java.io.DataOutput) throws java.io.IOException
    {
        byte[] $r9;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        java.io.DataOutputStream $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r6, $r7, $r12, $r13, $r14, $r15;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry $r17, r19, r20;
        java.io.ByteArrayOutputStream $r4;
        long $l2;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.io.DataOutput r3;
        java.util.Iterator $r2, $r8;
        java.lang.Object $r10, $r16, $r18;
        java.util.BitSet $r11;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r3 := @parameter0: java.io.DataOutput;

        i8 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r18 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r18;

        $z3 = virtualinvoke r19.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasWindowsAttributes()>();

        if $z3 == 0 goto label02;

        i8 = i8 + 1;

     label02:
        goto label01;

     label03:
        if i8 <= 0 goto label11;

        interfaceinvoke r3.<java.io.DataOutput: void write(int)>(21);

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r6 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i8 == $i0 goto label06;

        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r11 = new java.util.BitSet;

        $r12 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i5 = interfaceinvoke $r12.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.BitSet: void <init>(int)>($i5);

        i9 = 0;

     label04:
        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i9 >= $i6 goto label05;

        $r15 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i9);

        $r17 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r16;

        $z2 = virtualinvoke $r17.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasWindowsAttributes()>();

        virtualinvoke $r11.<java.util.BitSet: void set(int,boolean)>(i9, $z2);

        i9 = i9 + 1;

        goto label04;

     label05:
        $r14 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $i7 = interfaceinvoke $r14.<java.util.List: int size()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeBits(java.io.DataOutput,java.util.BitSet,int)>($r5, $r11, $i7);

        goto label07;

     label06:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(1);

     label07:
        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(0);

        $r7 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.List files>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) $r10;

        $z1 = virtualinvoke r20.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean getHasWindowsAttributes()>();

        if $z1 == 0 goto label09;

        $i3 = virtualinvoke r20.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: int getWindowsAttributes()>();

        $i4 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>($i4);

     label09:
        goto label08;

     label10:
        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        $r9 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r9;

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeUint64(java.io.DataOutput,long)>(r3, $l2);

        interfaceinvoke r3.<java.io.DataOutput: void write(byte[])>($r9);

     label11:
        return;
    }

    private void writeUint64(java.io.DataOutput, long) throws java.io.IOException
    {
        long $l0, $l4, $l7, $l8, $l9, l10;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r1;
        byte $b5;
        int $i1, $i2, $i3, $i6, i11, i12, i13, $i14, $i16;
        java.io.DataOutput r0;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        l10 := @parameter1: long;

        i11 = 0;

        i12 = 128;

        i13 = 0;

     label1:
        if i13 >= 8 goto label3;

        $i2 = i13 + 1;

        $i3 = 7 * $i2;

        $l4 = 1L << $i3;

        $b5 = l10 cmp $l4;

        $i14 = (int) $b5;

        if $i14 >= 0 goto label2;

        $l8 = (long) i11;

        $i6 = 8 * i13;

        $l7 = l10 >>> $i6;

        $l9 = $l8 | $l7;

        i11 = (int) $l9;

        goto label3;

     label2:
        i11 = i11 | i12;

        i12 = i12 >>> 1;

        i13 = i13 + 1;

        goto label1;

     label3:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(i11);

     label4:
        if i13 <= 0 goto label5;

        $l0 = 255L & l10;

        $i1 = (int) $l0;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>($i1);

        l10 = l10 >>> 8;

        $i16 = (int) -1;

        i13 = i13 + $i16;

        goto label4;

     label5:
        return;
    }

    private void writeBits(java.io.DataOutput, java.util.BitSet, int) throws java.io.IOException
    {
        java.io.DataOutput r0;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r2;
        int i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        java.util.BitSet r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        r0 := @parameter0: java.io.DataOutput;

        r1 := @parameter1: java.util.BitSet;

        i0 := @parameter2: int;

        i4 = 0;

        i5 = 7;

        i6 = 0;

     label1:
        if i6 >= i0 goto label5;

        $i2 = i4;

        $z0 = virtualinvoke r1.<java.util.BitSet: boolean get(int)>(i6);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $i1 = $z1 << i5;

        $i3 = $i2 | $i1;

        i4 = $i3;

        $i8 = (int) -1;

        i5 = i5 + $i8;

        if i5 >= 0 goto label4;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>($i3);

        i5 = 7;

        i4 = 0;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        if i5 == 7 goto label6;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(i4);

     label6:
        return;
    }

    private static java.lang.Iterable reverse(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.LinkedList $r0;
        java.lang.Iterable r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.LinkedList: void addFirst(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    static java.util.zip.CRC32 access$100(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile)
    {
        java.util.zip.CRC32 $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 crc32>;

        return $r1;
    }

    static java.io.RandomAccessFile access$200(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile)
    {
        java.io.RandomAccessFile $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.io.RandomAccessFile file>;

        return $r1;
    }

    static java.util.zip.CRC32 access$300(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile)
    {
        java.util.zip.CRC32 $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: java.util.zip.CRC32 compressedCrc32>;

        return $r1;
    }

    static long access$408(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        long $l0, $l1;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten>;

        $l1 = $l0 + 1L;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten> = $l1;

        return $l0;
    }

    static long access$414(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile, long)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile r0;
        long l0, $l1, $l2;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;

        l0 := @parameter1: long;

        $l1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten>;

        $l2 = $l1 + l0;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: long fileBytesWritten> = $l2;

        return $l2;
    }
}
