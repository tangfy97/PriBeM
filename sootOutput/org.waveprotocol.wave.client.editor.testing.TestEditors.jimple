public class org.waveprotocol.wave.client.editor.testing.TestEditors extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.testing.TestEditors r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.TestEditors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.client.editor.Editor getMinimalEditor()
    {
        org.waveprotocol.wave.client.editor.Editor $r2;
        org.waveprotocol.wave.client.widget.popup.PopupProvider $r1;
        org.waveprotocol.wave.client.editor.EditorSettings $r3;
        org.waveprotocol.wave.client.editor.content.Registries $r0, $r5;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r4;

        $r0 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES>;

        staticinvoke <org.waveprotocol.wave.client.editor.testing.TestEditors: void registerHandlers(org.waveprotocol.wave.client.editor.content.Registries)>($r0);

        $r1 = <org.waveprotocol.wave.client.widget.popup.simple.Popup: org.waveprotocol.wave.client.widget.popup.PopupProvider LIGHTWEIGHT_POPUP_PROVIDER>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void setPopupProvider(org.waveprotocol.wave.client.widget.popup.PopupProvider)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.Editors: org.waveprotocol.wave.client.editor.Editor create()>();

        $r5 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES>;

        $r4 = <org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry NONE>;

        $r3 = <org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorSettings DEFAULT>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.Editor: void init(org.waveprotocol.wave.client.editor.content.Registries,org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry,org.waveprotocol.wave.client.editor.EditorSettings)>($r5, $r4, $r3);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.Editor: void setEditing(boolean)>(1);

        return $r2;
    }

    private static void registerHandlers(org.waveprotocol.wave.client.editor.content.Registries)
    {
        org.waveprotocol.wave.client.editor.content.Registries r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.model.document.util.AnnotationRegistry getAnnotationHandlerRegistry()>();

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.content.PainterRegistry getPaintRegistry()>();

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void setTopLevelContainerTagname(java.lang.String)>("body");

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: void registerContainer(java.lang.String,org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>("body", $r1);

        staticinvoke <org.waveprotocol.wave.client.editor.testing.TestInlineDoodad: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r1);

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: void register(org.waveprotocol.wave.client.editor.content.Registries)>(r0);

        return;
    }

    public static org.waveprotocol.wave.client.editor.content.ContentDocument createTestDocument()
    {
        org.waveprotocol.wave.client.editor.Editor $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r1;
        java.lang.String[] $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r0;
        org.waveprotocol.wave.client.editor.testing.TestEditors$1 $r8;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r7;
        int i0, i1;
        java.lang.String r6;
        org.waveprotocol.wave.client.editor.content.Registries $r2, $r3;

        $r0 = new org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r1);

        $r2 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.content.Registries createExtension()>();

        $r4 = newarray (java.lang.String)[5];

        $r4[0] = "q";

        $r4[1] = "a";

        $r4[2] = "b";

        $r4[3] = "c";

        $r4[4] = "x";

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = $r4[i1];

        $r7 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        $r8 = new org.waveprotocol.wave.client.editor.testing.TestEditors$1;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.testing.TestEditors$1: void <init>(java.lang.String)>(r6);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>(r6, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setRegistries(org.waveprotocol.wave.client.editor.content.Registries)>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.testing.TestEditors: org.waveprotocol.wave.client.editor.Editor getMinimalEditor()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.Editor: void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r0);

        return $r0;
    }
}
