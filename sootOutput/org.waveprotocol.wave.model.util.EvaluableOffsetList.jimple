public final class org.waveprotocol.wave.model.util.EvaluableOffsetList extends java.lang.Object implements org.waveprotocol.wave.model.util.OffsetList
{
    private final org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root;
    private final org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator;

    public void <init>()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: void <init>(org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator)>(null);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator r6;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        r6 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void <init>(java.lang.Object,int,org.waveprotocol.wave.model.util.EvaluableOffsetList$1)>(null, 1, null);

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root> = $r1;

        $r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$202(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node,org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r3, $r2);

        $r5 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $r4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$302(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node,org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r5, $r4);

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator> = r6;

        return;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container firstContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1, $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$300(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container sentinel()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        return $r1;
    }

    public java.lang.Object performActionAt(int, org.waveprotocol.wave.model.util.OffsetList$LocationAction)
    {
        java.lang.IndexOutOfBoundsException $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r10;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r7;
        org.waveprotocol.wave.model.util.OffsetList$LocationAction r8;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.Object $r9;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        i5 := @parameter0: int;

        r8 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$LocationAction;

        r10 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

     label1:
        if r10 == null goto label4;

        $i1 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$400(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        if i5 >= $i1 goto label2;

        r10 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        goto label1;

     label2:
        $i2 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$400(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        i6 = i5 - $i2;

        $i3 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$600(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        if i6 >= $i3 goto label3;

        $r9 = interfaceinvoke r8.<org.waveprotocol.wave.model.util.OffsetList$LocationAction: java.lang.Object performAction(org.waveprotocol.wave.model.util.OffsetList$Container,int)>(r10, i6);

        return $r9;

     label3:
        $i4 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$600(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        i5 = i6 - $i4;

        r10 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$700(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r10);

        goto label1;

     label4:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offest: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size: ");

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$400(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r1);

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 $r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r1;

        r1 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r0 = new org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$1: void <init>(org.waveprotocol.wave.model.util.EvaluableOffsetList)>(r1);

        return $r0;
    }

    public java.lang.Object evaluate()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator $r1;
        java.lang.IllegalStateException $r7;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator>;

        if $r1 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No associative operator was provided.");

        throw $r7;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r2);

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r4);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object evaluate(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r5);

        return $r6;
    }

    private java.lang.Object evaluate(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator $r3, $r8, $r11;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r6, $r7, $r9, $r12;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r2;
        java.lang.Object $r1, $r4, $r5, $r10, $r13, $r14, r15;

        r2 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object access$1000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        if $r1 == null goto label1;

        $r14 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object access$1000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        return $r14;

     label1:
        $r3 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object access$900(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator: java.lang.Object extract(java.lang.Object)>($r4);

        r15 = $r5;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        if $r6 == null goto label2;

        $r11 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        $r13 = specialinvoke r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object evaluate(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r12);

        r15 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator: java.lang.Object operate(java.lang.Object,java.lang.Object)>($r13, $r5);

     label2:
        $r7 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$700(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        if $r7 == null goto label3;

        $r8 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator operator>;

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$700(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        $r10 = specialinvoke r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object evaluate(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r9);

        r15 = interfaceinvoke $r8.<org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator: java.lang.Object operate(java.lang.Object,java.lang.Object)>(r15, $r10);

     label3:
        staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object access$1002(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node,java.lang.Object)>(r0, r15);

        return r15;
    }

    private static int getHeight(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        int $i0, $i2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        if r0 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $i0 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int access$1100(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

     label2:
        return $i0;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container sentinel()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container sentinel()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container firstContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container firstContainer()>();

        return $r1;
    }

    static int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $i0 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int getHeight(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        return $i0;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$800(org.waveprotocol.wave.model.util.EvaluableOffsetList)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node root>;

        return $r1;
    }
}
