final class org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.DataDomain
{

    void <init>()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void compose(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData, org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData, org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)
    {
        org.waveprotocol.wave.model.util.DataDomain $r1, $r7, $r11;
        org.waveprotocol.wave.model.util.StringSet $r2, $r4, $r6;
        java.util.Set $r8, $r9, $r10, $r12, $r13, $r14;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r15;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0, r3, r5;

        r15 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        $r1 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain STRING_SET_DOMAIN>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r0);

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r5);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.DataDomain: void compose(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r4, $r6);

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain hashSetDomain()>();

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r0);

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r5);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.DataDomain: void compose(java.lang.Object,java.lang.Object,java.lang.Object)>($r8, $r9, $r10);

        $r11 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain hashSetDomain()>();

        $r12 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r0);

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        $r14 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r5);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.DataDomain: void compose(java.lang.Object,java.lang.Object,java.lang.Object)>($r12, $r13, $r14);

        return;
    }

    public org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData empty()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        $r0 = new org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: void <init>(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1)>(null);

        return $r0;
    }

    public org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData readOnlyView(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        return r0;
    }

    public volatile java.lang.Object readOnlyView(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData readOnlyView(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r2);

        return $r3;
    }

    public volatile void compose(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r0;
        java.lang.Object r1, r2, r3;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r4, $r5, $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) r1;

        $r5 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) r2;

        $r4 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) r3;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1: void compose(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData,org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData,org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r6, $r5, $r4);

        return;
    }

    public volatile java.lang.Object empty()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r0;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData empty()>();

        return $r1;
    }
}
