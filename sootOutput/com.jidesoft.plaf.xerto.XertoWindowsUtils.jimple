public class com.jidesoft.plaf.xerto.XertoWindowsUtils extends com.jidesoft.plaf.office2003.Office2003WindowsUtils
{

    public void <init>()
    {
        com.jidesoft.plaf.xerto.XertoWindowsUtils r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoWindowsUtils;

        specialinvoke r0.<com.jidesoft.plaf.office2003.Office2003WindowsUtils: void <init>()>();

        return;
    }

    public static void initClassDefaultsWithMenu(javax.swing.UIDefaults)
    {
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <com.jidesoft.plaf.vsnet.VsnetLookAndFeelExtension: void initClassDefaultsWithMenu(javax.swing.UIDefaults)>(r0);

        staticinvoke <com.jidesoft.plaf.xerto.XertoWindowsUtils: void initClassDefaults(javax.swing.UIDefaults)>(r0);

        return;
    }

    public static void initClassDefaults(javax.swing.UIDefaults)
    {
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <com.jidesoft.plaf.office2003.Office2003WindowsUtils: void initClassDefaults(javax.swing.UIDefaults,boolean)>(r0, 0);

        staticinvoke <com.jidesoft.plaf.xerto.XertoWindowsUtils: void initClassDefaultsForXerto(javax.swing.UIDefaults)>(r0);

        return;
    }

    private static void initClassDefaultsForXerto(javax.swing.UIDefaults)
    {
        int $i0, $i1, $i2;
        javax.swing.UIDefaults r0;

        r0 := @parameter0: javax.swing.UIDefaults;

        $i0 = staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: int getProductsUsed()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("CollapsiblePaneUI", "com.jidesoft.plaf.xerto.XertoCollapsiblePaneUI");

     label1:
        $i2 = $i0 & 1;

        if $i2 == 0 goto label2;

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("SidePaneUI", "com.jidesoft.plaf.xerto.XertoSidePaneUI");

        virtualinvoke r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("DockableFrameUI", "com.jidesoft.plaf.xerto.XertoDockableFrameUI");

     label2:
        return;
    }

    public static void initComponentDefaultsWithMenu(javax.swing.UIDefaults)
    {
        java.awt.Color $r28, $r35, $r42, $r51, $r67;
        java.lang.Integer $r31, $r38, $r47, $r48, $r49, $r57, $r58, $r59;
        javax.swing.border.Border $r29, $r36, $r40, $r43, $r52, $r53;
        javax.swing.border.CompoundBorder $r54;
        com.jidesoft.icons.MenuCheckIcon $r25, $r32, $r45, $r55;
        com.jidesoft.plaf.WindowsDesktopProperty $r1, $r3, $r5;
        java.lang.Object[] $r11, $r16, $r21, $r24, $r64;
        javax.swing.plaf.BorderUIResource $r27, $r34, $r39, $r41, $r50;
        javax.swing.ImageIcon $r26, $r33, $r46, $r56;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$4 $r68;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$3 $r23;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$2 $r18;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$1 $r13;
        com.jidesoft.plaf.basic.ThemePainter $r61, $r66;
        javax.swing.UIDefaults r7;
        javax.swing.plaf.InsetsUIResource $r30, $r37, $r44, $r60;
        java.awt.Toolkit $r0;
        java.lang.String[] $r10, $r15, $r20, $r63;
        com.jidesoft.plaf.ExtWindowsDesktopProperty $r9, $r14, $r19, $r62;
        java.lang.Object $r2, $r4, $r6, $r8, $r12, $r17, $r22, $r65;

        r7 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("shadingtheme", "true");

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlHighlight");

        specialinvoke $r1.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.lightColor", $r2, $r0);

        $r3 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        specialinvoke $r3.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.item.highlightColor", $r4, $r0);

        $r5 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        specialinvoke $r5.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.menu.textColor", $r6, $r0);

        $r8 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getMenuFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r7);

        $r9 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "win.item.highlightColor";

        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r11[0] = $r12;

        $r13 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$1;

        specialinvoke $r13.<com.jidesoft.plaf.xerto.XertoWindowsUtils$1: void <init>()>();

        specialinvoke $r9.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r10, $r11, $r0, $r13);

        $r14 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r15 = newarray (java.lang.String)[1];

        $r15[0] = "win.3d.backgroundColor";

        $r16 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r16[0] = $r17;

        $r18 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$2;

        specialinvoke $r18.<com.jidesoft.plaf.xerto.XertoWindowsUtils$2: void <init>()>();

        specialinvoke $r14.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r15, $r16, $r0, $r18);

        $r19 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = "win.3d.shadowColor";

        $r21 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r21[0] = $r22;

        $r23 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$3;

        specialinvoke $r23.<com.jidesoft.plaf.xerto.XertoWindowsUtils$3: void <init>()>();

        specialinvoke $r19.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r20, $r21, $r0, $r23);

        $r24 = newarray (java.lang.Object)[96];

        $r24[0] = "PopupMenuSeparator.foreground";

        $r24[1] = $r19;

        $r24[2] = "PopupMenuSeparator.background";

        $r24[3] = $r14;

        $r24[4] = "CheckBoxMenuItem.checkIcon";

        $r25 = new com.jidesoft.icons.MenuCheckIcon;

        $r26 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r25.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r26);

        $r24[5] = $r25;

        $r24[6] = "CheckBoxMenuItem.selectionBackground";

        $r24[7] = $r9;

        $r24[8] = "CheckBoxMenuItem.selectionForeground";

        $r24[9] = $r5;

        $r24[10] = "CheckBoxMenuItem.acceleratorSelectionForeground";

        $r24[11] = $r5;

        $r24[12] = "CheckBoxMenuItem.mouseHoverBackground";

        $r24[13] = $r9;

        $r24[14] = "CheckBoxMenuItem.mouseHoverBorder";

        $r27 = new javax.swing.plaf.BorderUIResource;

        $r28 = new java.awt.Color;

        specialinvoke $r28.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r29 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r28);

        specialinvoke $r27.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r29);

        $r24[15] = $r27;

        $r24[16] = "CheckBoxMenuItem.margin";

        $r30 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r30.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 0, 3, 0);

        $r24[17] = $r30;

        $r24[18] = "CheckBoxMenuItem.font";

        $r24[19] = $r8;

        $r24[20] = "CheckBoxMenuItem.acceleratorFont";

        $r24[21] = $r8;

        $r24[22] = "CheckBoxMenuItem.textIconGap";

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r24[23] = $r31;

        $r24[24] = "RadioButtonMenuItem.checkIcon";

        $r32 = new com.jidesoft.icons.MenuCheckIcon;

        $r33 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r32.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r33);

        $r24[25] = $r32;

        $r24[26] = "RadioButtonMenuItem.selectionBackground";

        $r24[27] = $r9;

        $r24[28] = "RadioButtonMenuItem.selectionForeground";

        $r24[29] = $r5;

        $r24[30] = "RadioButtonMenuItem.acceleratorSelectionForeground";

        $r24[31] = $r5;

        $r24[32] = "RadioButtonMenuItem.mouseHoverBackground";

        $r24[33] = $r9;

        $r24[34] = "RadioButtonMenuItem.mouseHoverBorder";

        $r34 = new javax.swing.plaf.BorderUIResource;

        $r35 = new java.awt.Color;

        specialinvoke $r35.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r36 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r35);

        specialinvoke $r34.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r36);

        $r24[35] = $r34;

        $r24[36] = "RadioButtonMenuItem.margin";

        $r37 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r37.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 0, 3, 0);

        $r24[37] = $r37;

        $r24[38] = "RadioButtonMenuItem.font";

        $r24[39] = $r8;

        $r24[40] = "RadioButtonMenuItem.acceleratorFont";

        $r24[41] = $r8;

        $r24[42] = "RadioButtonMenuItem.textIconGap";

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r24[43] = $r38;

        $r24[44] = "MenuBar.border";

        $r39 = new javax.swing.plaf.BorderUIResource;

        $r40 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(2, 2, 2, 2);

        specialinvoke $r39.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r40);

        $r24[45] = $r39;

        $r24[46] = "Menu.selectionBackground";

        $r24[47] = $r9;

        $r24[48] = "Menu.selectionForeground";

        $r24[49] = $r5;

        $r24[50] = "Menu.mouseHoverBackground";

        $r24[51] = $r9;

        $r24[52] = "Menu.mouseHoverBorder";

        $r41 = new javax.swing.plaf.BorderUIResource;

        $r42 = new java.awt.Color;

        specialinvoke $r42.<java.awt.Color: void <init>(int,int,int)>(10, 36, 106);

        $r43 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r42);

        specialinvoke $r41.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r43);

        $r24[53] = $r41;

        $r24[54] = "Menu.margin";

        $r44 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r44.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(2, 7, 1, 7);

        $r24[55] = $r44;

        $r24[56] = "Menu.checkIcon";

        $r45 = new com.jidesoft.icons.MenuCheckIcon;

        $r46 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r45.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r46);

        $r24[57] = $r45;

        $r24[58] = "Menu.textIconGap";

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r24[59] = $r47;

        $r24[60] = "Menu.font";

        $r24[61] = $r8;

        $r24[62] = "Menu.acceleratorFont";

        $r24[63] = $r8;

        $r24[64] = "Menu.submenuPopupOffsetX";

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r24[65] = $r48;

        $r24[66] = "Menu.submenuPopupOffsetY";

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r24[67] = $r49;

        $r24[68] = "PopupMenu.border";

        $r50 = new javax.swing.plaf.BorderUIResource;

        $r51 = new java.awt.Color;

        specialinvoke $r51.<java.awt.Color: void <init>(int,int,int)>(102, 102, 102);

        $r52 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r51);

        $r53 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        $r54 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)>($r52, $r53);

        specialinvoke $r50.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r54);

        $r24[69] = $r50;

        $r24[70] = "MenuItem.checkIcon";

        $r55 = new com.jidesoft.icons.MenuCheckIcon;

        $r56 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/menu_checkbox_vsnet.gif");

        specialinvoke $r55.<com.jidesoft.icons.MenuCheckIcon: void <init>(javax.swing.ImageIcon)>($r56);

        $r24[71] = $r55;

        $r24[72] = "MenuItem.selectionBackground";

        $r24[73] = $r9;

        $r24[74] = "MenuItem.selectionForeground";

        $r24[75] = $r5;

        $r24[76] = "MenuItem.acceleratorSelectionForeground";

        $r24[77] = $r5;

        $r24[78] = "MenuItem.background";

        $r24[79] = $r14;

        $r24[80] = "MenuItem.selectionBorderColor";

        $r24[81] = $r3;

        $r24[82] = "MenuItem.shadowWidth";

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r24[83] = $r57;

        $r24[84] = "MenuItem.shadowColor";

        $r24[85] = $r1;

        $r24[86] = "MenuItem.textIconGap";

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r24[87] = $r58;

        $r24[88] = "MenuItem.accelEndGap";

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r24[89] = $r59;

        $r24[90] = "MenuItem.margin";

        $r60 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r60.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(4, 0, 3, 0);

        $r24[91] = $r60;

        $r24[92] = "MenuItem.font";

        $r24[93] = $r8;

        $r24[94] = "MenuItem.acceleratorFont";

        $r24[95] = $r8;

        virtualinvoke r7.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r24);

        staticinvoke <com.jidesoft.plaf.xerto.XertoWindowsUtils: void initComponentDefaults(javax.swing.UIDefaults)>(r7);

        $r61 = staticinvoke <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.basic.ThemePainter getInstance()>();

        staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: void put(javax.swing.UIDefaults,java.lang.String,java.lang.Object)>(r7, "Theme.painter", $r61);

        $r62 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r63 = newarray (java.lang.String)[1];

        $r63[0] = "null";

        $r64 = newarray (java.lang.Object)[1];

        $r65 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("Theme.painter");

        $r66 = (com.jidesoft.plaf.basic.ThemePainter) $r65;

        $r67 = interfaceinvoke $r66.<com.jidesoft.plaf.basic.ThemePainter: java.awt.Color getMenuItemBorderColor()>();

        $r64[0] = $r67;

        $r68 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$4;

        specialinvoke $r68.<com.jidesoft.plaf.xerto.XertoWindowsUtils$4: void <init>()>();

        specialinvoke $r62.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r63, $r64, $r0, $r68);

        virtualinvoke r7.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("PopupMenu.border", $r62);

        return;
    }

    public static void initComponentDefaults(javax.swing.UIDefaults)
    {
        java.awt.Color $r119, $r121, $r123, $r129, $r132, $r134, $r137, $r191, $r200, $r201, $r215, $r217, $r218, $r235, $r315, $r317, $r323, $r326, $r328;
        java.lang.Integer $r81, $r82, $r86, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r130, $r138, $r141, $r146, $r147, $r148, $r151, $r172, $r197, $r198, $r199, $r202, $r213, $r232, $r310, $r311, $r312, $r313, $r318, $r341, $r342, $r343, $r347, $r348, $r349;
        javax.swing.border.Border $r88, $r117, $r187, $r189, $r192, $r193, $r212, $r220, $r222, $r224, $r230, $r236, $r324, $r330;
        javax.swing.plaf.BorderUIResource $r87, $r116, $r186, $r188, $r190, $r211, $r219, $r221, $r223, $r229, $r234, $r322, $r329;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$9 $r56;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$8 $r51;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$7 $r46;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$6 $r41;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$5 $r29;
        java.awt.Toolkit $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Boolean $r126, $r139, $r140, $r150, $r173, $r239, $r319, $r320, $r339, $r340, $r344, $r350;
        com.jidesoft.plaf.ExtWindowsDesktopProperty $r25, $r34, $r42, $r47, $r52, $r57, $r62, $r67, $r72, $r244, $r252, $r260, $r268, $r276, $r284, $r292, $r300, $r352, $r353, $r354, $r355;
        javax.swing.border.CompoundBorder $r194;
        javax.swing.plaf.ColorUIResource $r115, $r118, $r120, $r122, $r128, $r131, $r133, $r135, $r136, $r177, $r178, $r179, $r180, $r209, $r214, $r216, $r233, $r314, $r316, $r325, $r327, $r346;
        com.jidesoft.plaf.WindowsDesktopProperty $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        java.lang.String $r242, $r243;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$10 $r61;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$11 $r66;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$12 $r71;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$13 $r76;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$14 $r77;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$15 $r251;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$16 $r259;
        com.jidesoft.plaf.basic.ThemePainter $r174;
        boolean $z0, $z1;
        javax.swing.UIDefaults r30;
        javax.swing.plaf.InsetsUIResource $r80, $r124, $r125, $r127, $r149, $r309, $r345, $r351;
        java.lang.Object[] $r27, $r36, $r44, $r49, $r54, $r59, $r64, $r69, $r74, $r79, $r84, $r143, $r145, $r153, $r175, $r176, $r181, $r184, $r185, $r196, $r210, $r246, $r254, $r262, $r270, $r278, $r286, $r294, $r302, $r308;
        com.jidesoft.plaf.xerto.StatusBarBorder $r231;
        javax.swing.plaf.basic.BasicBorders$MarginBorder $r78;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$17 $r267;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$18 $r275;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$19 $r283;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$20 $r291;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$21 $r299;
        com.jidesoft.plaf.xerto.XertoWindowsUtils$22 $r307;
        com.jidesoft.plaf.vsnet.HeaderCellBorder $r182;
        javax.swing.UIDefaults$LazyInputMap $r83, $r142, $r144, $r152, $r183, $r195;
        java.lang.Object $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r28, $r31, $r32, $r33, $r37, $r38, $r39, $r40, $r45, $r50, $r55, $r60, $r65, $r70, $r75, $r247, $r248, $r249, $r250, $r255, $r256, $r257, $r258, $r263, $r264, $r265, $r266, $r271, $r272, $r273, $r274, $r279, $r280, $r281, $r282, $r287, $r288, $r289, $r290, $r295, $r296, $r297, $r298, $r303, $r304, $r305, $r306;
        javax.swing.ImageIcon $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r203, $r204, $r205, $r206, $r207, $r208, $r225, $r226, $r227, $r228, $r237, $r238, $r240, $r321, $r331, $r332, $r333, $r334, $r335, $r336, $r337, $r338;
        com.jidesoft.plaf.xerto.FrameBorder $r241;
        javax.swing.Icon $r85;
        java.lang.String[] $r26, $r35, $r43, $r48, $r53, $r58, $r63, $r68, $r73, $r245, $r253, $r261, $r269, $r277, $r285, $r293, $r301;

        r30 := @parameter0: javax.swing.UIDefaults;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("shadingtheme", "true");

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlHighlight");

        specialinvoke $r1.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.lightColor", $r2, $r0);

        $r3 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        specialinvoke $r3.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.highlightColor", $r4, $r0);

        $r5 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        specialinvoke $r5.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.item.highlightColor", $r6, $r0);

        $r7 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r8 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        specialinvoke $r7.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.mdi.backgroundColor", $r8, $r0);

        $r9 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r10 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlText");

        specialinvoke $r9.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.menu.textColor", $r10, $r0);

        $r11 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r12 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlText");

        specialinvoke $r11.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.button.textColor", $r12, $r0);

        $r13 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r14 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        specialinvoke $r13.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.backgroundColor", $r14, $r0);

        $r15 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r16 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        specialinvoke $r15.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.shadowColor", $r16, $r0);

        $r17 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r18 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        specialinvoke $r17.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.3d.darkShadowColor", $r18, $r0);

        $r19 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r20 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("activeCaption");

        specialinvoke $r19.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.frame.activeCaptionColor", $r20, $r0);

        $r21 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r22 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("activeCaptionText");

        specialinvoke $r21.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.frame.captionTextColor", $r22, $r0);

        $r23 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r24 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("highContrast");

        specialinvoke $r23.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit)>("win.highContrast.on", $r24, $r0);

        $r25 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r26 = newarray (java.lang.String)[1];

        $r26[0] = "win.3d.shadowColor";

        $r27 = newarray (java.lang.Object)[1];

        $r28 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r27[0] = $r28;

        $r29 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$5;

        specialinvoke $r29.<com.jidesoft.plaf.xerto.XertoWindowsUtils$5: void <init>()>();

        specialinvoke $r25.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r26, $r27, $r0, $r29);

        $r31 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getControlFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r30);

        $r32 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getMenuFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r30);

        $r33 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getBoldFont(java.awt.Toolkit,javax.swing.UIDefaults)>($r0, r30);

        $r34 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r35 = newarray (java.lang.String)[4];

        $r35[0] = "win.3d.lightColor";

        $r35[1] = "win.3d.highlightColor";

        $r35[2] = "win.3d.shadowColor";

        $r35[3] = "win.3d.darkShadowColor";

        $r36 = newarray (java.lang.Object)[4];

        $r37 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r36[0] = $r37;

        $r38 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r36[1] = $r38;

        $r39 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r36[2] = $r39;

        $r40 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r36[3] = $r40;

        $r41 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$6;

        specialinvoke $r41.<com.jidesoft.plaf.xerto.XertoWindowsUtils$6: void <init>()>();

        specialinvoke $r34.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r35, $r36, $r0, $r41);

        $r42 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r43 = newarray (java.lang.String)[1];

        $r43[0] = "win.3d.backgroundColor";

        $r44 = newarray (java.lang.Object)[1];

        $r45 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r44[0] = $r45;

        $r46 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$7;

        specialinvoke $r46.<com.jidesoft.plaf.xerto.XertoWindowsUtils$7: void <init>()>();

        specialinvoke $r42.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r43, $r44, $r0, $r46);

        $r47 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r48 = newarray (java.lang.String)[1];

        $r48[0] = "win.3d.shadowColor";

        $r49 = newarray (java.lang.Object)[1];

        $r50 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r49[0] = $r50;

        $r51 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$8;

        specialinvoke $r51.<com.jidesoft.plaf.xerto.XertoWindowsUtils$8: void <init>()>();

        specialinvoke $r47.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r48, $r49, $r0, $r51);

        $r52 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r53 = newarray (java.lang.String)[1];

        $r53[0] = "win.item.highlightColor";

        $r54 = newarray (java.lang.Object)[1];

        $r55 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("textHighlight");

        $r54[0] = $r55;

        $r56 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$9;

        specialinvoke $r56.<com.jidesoft.plaf.xerto.XertoWindowsUtils$9: void <init>()>();

        specialinvoke $r52.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r53, $r54, $r0, $r56);

        $r57 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r58 = newarray (java.lang.String)[1];

        $r58[0] = "win.item.highlightColor";

        $r59 = newarray (java.lang.Object)[1];

        $r60 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("textHighlight");

        $r59[0] = $r60;

        $r61 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$10;

        specialinvoke $r61.<com.jidesoft.plaf.xerto.XertoWindowsUtils$10: void <init>()>();

        specialinvoke $r57.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r58, $r59, $r0, $r61);

        $r62 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r63 = newarray (java.lang.String)[1];

        $r63[0] = "win.item.highlightColor";

        $r64 = newarray (java.lang.Object)[1];

        $r65 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("textHighlight");

        $r64[0] = $r65;

        $r66 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$11;

        specialinvoke $r66.<com.jidesoft.plaf.xerto.XertoWindowsUtils$11: void <init>()>();

        specialinvoke $r62.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r63, $r64, $r0, $r66);

        $r67 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r68 = newarray (java.lang.String)[1];

        $r68[0] = "win.3d.backgroundColor";

        $r69 = newarray (java.lang.Object)[1];

        $r70 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r69[0] = $r70;

        $r71 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$12;

        specialinvoke $r71.<com.jidesoft.plaf.xerto.XertoWindowsUtils$12: void <init>()>();

        specialinvoke $r67.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r68, $r69, $r0, $r71);

        $r72 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r73 = newarray (java.lang.String)[1];

        $r73[0] = "win.3d.backgroundColor";

        $r74 = newarray (java.lang.Object)[1];

        $r75 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r74[0] = $r75;

        $r76 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$13;

        specialinvoke $r76.<com.jidesoft.plaf.xerto.XertoWindowsUtils$13: void <init>()>();

        specialinvoke $r72.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r73, $r74, $r0, $r76);

        $r77 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$14;

        specialinvoke $r77.<com.jidesoft.plaf.xerto.XertoWindowsUtils$14: void <init>()>();

        $r78 = new javax.swing.plaf.basic.BasicBorders$MarginBorder;

        specialinvoke $r78.<javax.swing.plaf.basic.BasicBorders$MarginBorder: void <init>()>();

        $r79 = newarray (java.lang.Object)[236];

        $r79[0] = "Theme.highContrast";

        $r79[1] = $r23;

        $r79[2] = "Content.background";

        $r79[3] = $r13;

        $r79[4] = "JideScrollPane.border";

        $r79[5] = $r25;

        $r79[6] = "JideButton.selectedAndFocusedBackground";

        $r79[7] = $r57;

        $r79[8] = "JideButton.focusedBackground";

        $r79[9] = $r52;

        $r79[10] = "JideButton.selectedBackground";

        $r79[11] = $r62;

        $r79[12] = "JideButton.borderColor";

        $r79[13] = $r5;

        $r79[14] = "JideButton.font";

        $r79[15] = $r31;

        $r79[16] = "JideButton.background";

        $r79[17] = $r13;

        $r79[18] = "JideButton.foreground";

        $r79[19] = $r11;

        $r79[20] = "JideButton.shadow";

        $r79[21] = $r15;

        $r79[22] = "JideButton.darkShadow";

        $r79[23] = $r17;

        $r79[24] = "JideButton.light";

        $r79[25] = $r1;

        $r79[26] = "JideButton.highlight";

        $r79[27] = $r3;

        $r79[28] = "JideButton.border";

        $r79[29] = $r78;

        $r79[30] = "JideButton.margin";

        $r80 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r80.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 3, 3, 3);

        $r79[31] = $r80;

        $r79[32] = "JideButton.textIconGap";

        $r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[33] = $r81;

        $r79[34] = "JideButton.textShiftOffset";

        $r82 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r79[35] = $r82;

        $r79[36] = "JideButton.focusInputMap";

        $r83 = new javax.swing.UIDefaults$LazyInputMap;

        $r84 = newarray (java.lang.Object)[8];

        $r84[0] = "SPACE";

        $r84[1] = "pressed";

        $r84[2] = "released SPACE";

        $r84[3] = "released";

        $r84[4] = "ENTER";

        $r84[5] = "pressed";

        $r84[6] = "released ENTER";

        $r84[7] = "released";

        specialinvoke $r83.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r84);

        $r79[37] = $r83;

        $r79[38] = "TristateCheckBox.icon";

        $r85 = staticinvoke <com.jidesoft.plaf.windows.WindowsIconFactory: javax.swing.Icon getCheckBoxIcon()>();

        $r79[39] = $r85;

        $r79[40] = "JideSplitPane.dividerSize";

        $r86 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r79[41] = $r86;

        $r79[42] = "JideSplitPaneDivider.border";

        $r87 = new javax.swing.plaf.BorderUIResource;

        $r88 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        specialinvoke $r87.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r88);

        $r79[43] = $r87;

        $r79[44] = "JideSplitPaneDivider.background";

        $r79[45] = $r13;

        $r79[46] = "JideSplitPaneDivider.gripperPainter";

        $r79[47] = $r77;

        $r79[48] = "JideTabbedPane.defaultTabShape";

        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r79[49] = $r89;

        $r79[50] = "JideTabbedPane.defaultResizeMode";

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r79[51] = $r90;

        $r79[52] = "JideTabbedPane.defaultTabColorTheme";

        $r91 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[53] = $r91;

        $r79[54] = "JideTabbedPane.tabRectPadding";

        $r92 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[55] = $r92;

        $r79[56] = "JideTabbedPane.closeButtonMarginHorizonal";

        $r93 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r79[57] = $r93;

        $r79[58] = "JideTabbedPane.closeButtonMarginVertical";

        $r94 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r79[59] = $r94;

        $r79[60] = "JideTabbedPane.textMarginVertical";

        $r95 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[61] = $r95;

        $r79[62] = "JideTabbedPane.noIconMargin";

        $r96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[63] = $r96;

        $r79[64] = "JideTabbedPane.iconMargin";

        $r97 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r79[65] = $r97;

        $r79[66] = "JideTabbedPane.textPadding";

        $r98 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r79[67] = $r98;

        $r79[68] = "JideTabbedPane.buttonSize";

        $r99 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r79[69] = $r99;

        $r79[70] = "JideTabbedPane.buttonMargin";

        $r100 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r79[71] = $r100;

        $r79[72] = "JideTabbedPane.fitStyleBoundSize";

        $r101 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r79[73] = $r101;

        $r79[74] = "JideTabbedPane.fitStyleFirstTabMargin";

        $r102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[75] = $r102;

        $r79[76] = "JideTabbedPane.fitStyleIconMinWidth";

        $r103 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r79[77] = $r103;

        $r79[78] = "JideTabbedPane.fitStyleTextMinWidth";

        $r104 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r79[79] = $r104;

        $r79[80] = "JideTabbedPane.compressedStyleNoIconRectSize";

        $r105 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r79[81] = $r105;

        $r79[82] = "JideTabbedPane.compressedStyleIconMargin";

        $r106 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r79[83] = $r106;

        $r79[84] = "JideTabbedPane.compressedStyleCloseButtonMarginHorizontal";

        $r107 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r79[85] = $r107;

        $r79[86] = "JideTabbedPane.compressedStyleCloseButtonMarginVertical";

        $r108 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r79[87] = $r108;

        $r79[88] = "JideTabbedPane.fixedStyleRectSize";

        $r109 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(60);

        $r79[89] = $r109;

        $r79[90] = "JideTabbedPane.closeButtonMargin";

        $r110 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[91] = $r110;

        $r79[92] = "JideTabbedPane.gripLeftMargin";

        $r111 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[93] = $r111;

        $r79[94] = "JideTabbedPane.closeButtonMarginSize";

        $r112 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r79[95] = $r112;

        $r79[96] = "JideTabbedPane.closeButtonLeftMargin";

        $r113 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[97] = $r113;

        $r79[98] = "JideTabbedPane.closeButtonRightMargin";

        $r114 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[99] = $r114;

        $r79[100] = "JideTabbedPane.defaultTabBorderShadowColor";

        $r115 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r115.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(115, 109, 99);

        $r79[101] = $r115;

        $r79[102] = "JideTabbedPane.gripperPainter";

        $r79[103] = $r77;

        $r79[104] = "JideTabbedPane.border";

        $r116 = new javax.swing.plaf.BorderUIResource;

        $r117 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke $r116.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r117);

        $r79[105] = $r116;

        $r79[106] = "JideTabbedPane.background";

        $r118 = new javax.swing.plaf.ColorUIResource;

        $r119 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlColor()>();

        specialinvoke $r118.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r119);

        $r79[107] = $r118;

        $r79[108] = "JideTabbedPane.foreground";

        $r120 = new javax.swing.plaf.ColorUIResource;

        $r121 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTabForgroundColor()>();

        specialinvoke $r120.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r121);

        $r79[109] = $r120;

        $r79[110] = "JideTabbedPane.light";

        $r79[111] = $r1;

        $r79[112] = "JideTabbedPane.highlight";

        $r79[113] = $r3;

        $r79[114] = "JideTabbedPane.shadow";

        $r79[115] = $r15;

        $r79[116] = "JideTabbedPane.darkShadow";

        $r122 = new javax.swing.plaf.ColorUIResource;

        $r123 = <java.awt.Color: java.awt.Color GRAY>;

        specialinvoke $r122.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r123);

        $r79[117] = $r122;

        $r79[118] = "JideTabbedPane.tabInsets";

        $r124 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r124.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(1, 4, 1, 4);

        $r79[119] = $r124;

        $r79[120] = "JideTabbedPane.contentBorderInsets";

        $r125 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r125.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(1, 1, 1, 1);

        $r79[121] = $r125;

        $r79[122] = "JideTabbedPane.ignoreContentBorderInsetsIfNoTabs";

        $r126 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r79[123] = $r126;

        $r79[124] = "JideTabbedPane.tabAreaInsets";

        $r127 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r127.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(2, 4, 0, 4);

        $r79[125] = $r127;

        $r79[126] = "JideTabbedPane.tabAreaBackground";

        $r128 = new javax.swing.plaf.ColorUIResource;

        $r129 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getApplicationFrameBackgroundColor()>();

        specialinvoke $r128.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r129);

        $r79[127] = $r128;

        $r79[128] = "JideTabbedPane.tabAreaBackgroundLt";

        $r79[129] = $r3;

        $r79[130] = "JideTabbedPane.tabAreaBackgroundDk";

        $r79[131] = $r13;

        $r79[132] = "JideTabbedPane.tabRunOverlay";

        $r130 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r79[133] = $r130;

        $r79[134] = "JideTabbedPane.font";

        $r79[135] = $r31;

        $r79[136] = "JideTabbedPane.selectedTabFont";

        $r79[137] = $r31;

        $r79[138] = "JideTabbedPane.selectedTabTextForeground";

        $r131 = new javax.swing.plaf.ColorUIResource;

        $r132 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTabForgroundColor()>();

        specialinvoke $r131.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r132);

        $r79[139] = $r131;

        $r79[140] = "JideTabbedPane.unselectedTabTextForeground";

        $r79[141] = $r47;

        $r79[142] = "JideTabbedPane.selectedTabBackground";

        $r133 = new javax.swing.plaf.ColorUIResource;

        $r134 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getSelectedTabBackgroundColor()>();

        specialinvoke $r133.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r134);

        $r79[143] = $r133;

        $r79[144] = "JideTabbedPane.selectedTabBackgroundLt";

        $r135 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r135.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(230, 139, 44);

        $r79[145] = $r135;

        $r79[146] = "JideTabbedPane.selectedTabBackgroundDk";

        $r136 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r136.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(255, 199, 60);

        $r79[147] = $r136;

        $r79[148] = "JideTabbedPane.tabListBackground";

        $r137 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("List.background");

        $r79[149] = $r137;

        $r79[150] = "JideTabbedPane.textIconGap";

        $r138 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[151] = $r138;

        $r79[152] = "JideTabbedPane.showIconOnTab";

        $r139 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r79[153] = $r139;

        $r79[154] = "JideTabbedPane.showCloseButtonOnTab";

        $r140 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r79[155] = $r140;

        $r79[156] = "JideTabbedPane.closeButtonAlignment";

        $r141 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r79[157] = $r141;

        $r79[158] = "JideTabbedPane.focusInputMap";

        $r142 = new javax.swing.UIDefaults$LazyInputMap;

        $r143 = newarray (java.lang.Object)[20];

        $r143[0] = "RIGHT";

        $r143[1] = "navigateRight";

        $r143[2] = "KP_RIGHT";

        $r143[3] = "navigateRight";

        $r143[4] = "LEFT";

        $r143[5] = "navigateLeft";

        $r143[6] = "KP_LEFT";

        $r143[7] = "navigateLeft";

        $r143[8] = "UP";

        $r143[9] = "navigateUp";

        $r143[10] = "KP_UP";

        $r143[11] = "navigateUp";

        $r143[12] = "DOWN";

        $r143[13] = "navigateDown";

        $r143[14] = "KP_DOWN";

        $r143[15] = "navigateDown";

        $r143[16] = "ctrl DOWN";

        $r143[17] = "requestFocusForVisibleComponent";

        $r143[18] = "ctrl KP_DOWN";

        $r143[19] = "requestFocusForVisibleComponent";

        specialinvoke $r142.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r143);

        $r79[159] = $r142;

        $r79[160] = "JideTabbedPane.ancestorInputMap";

        $r144 = new javax.swing.UIDefaults$LazyInputMap;

        $r145 = newarray (java.lang.Object)[8];

        $r145[0] = "ctrl PAGE_DOWN";

        $r145[1] = "navigatePageDown";

        $r145[2] = "ctrl PAGE_UP";

        $r145[3] = "navigatePageUp";

        $r145[4] = "ctrl UP";

        $r145[5] = "requestFocus";

        $r145[6] = "ctrl KP_UP";

        $r145[7] = "requestFocus";

        specialinvoke $r144.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r145);

        $r79[161] = $r144;

        $r79[162] = "ButtonPanel.order";

        $r79[163] = "ACO";

        $r79[164] = "ButtonPanel.oppositeOrder";

        $r79[165] = "H";

        $r79[166] = "ButtonPanel.buttonGap";

        $r146 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r79[167] = $r146;

        $r79[168] = "ButtonPanel.groupGap";

        $r147 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r79[169] = $r147;

        $r79[170] = "ButtonPanel.minButtonWidth";

        $r148 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75);

        $r79[171] = $r148;

        $r79[172] = "JideSplitButton.font";

        $r79[173] = $r31;

        $r79[174] = "JideSplitButton.margin";

        $r149 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r149.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(3, 3, 3, 7);

        $r79[175] = $r149;

        $r79[176] = "JideSplitButton.border";

        $r79[177] = $r78;

        $r79[178] = "JideSplitButton.borderPainted";

        $r150 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r79[179] = $r150;

        $r79[180] = "JideSplitButton.textIconGap";

        $r151 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r79[181] = $r151;

        $r79[182] = "JideSplitButton.selectionForeground";

        $r79[183] = $r9;

        $r79[184] = "JideSplitButton.focusInputMap";

        $r152 = new javax.swing.UIDefaults$LazyInputMap;

        $r153 = newarray (java.lang.Object)[12];

        $r153[0] = "SPACE";

        $r153[1] = "pressed";

        $r153[2] = "released SPACE";

        $r153[3] = "released";

        $r153[4] = "ENTER";

        $r153[5] = "pressed";

        $r153[6] = "released ENTER";

        $r153[7] = "released";

        $r153[8] = "DOWN";

        $r153[9] = "downPressed";

        $r153[10] = "released DOWN";

        $r153[11] = "downReleased";

        specialinvoke $r152.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r153);

        $r79[185] = $r152;

        $r79[186] = "Cursor.hsplit";

        $r154 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_h_split.gif");

        $r79[187] = $r154;

        $r79[188] = "Cursor.vsplit";

        $r155 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_v_split.gif");

        $r79[189] = $r155;

        $r79[190] = "Cursor.north";

        $r156 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_north.gif");

        $r79[191] = $r156;

        $r79[192] = "Cursor.south";

        $r157 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_south.gif");

        $r79[193] = $r157;

        $r79[194] = "Cursor.east";

        $r158 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_east.gif");

        $r79[195] = $r158;

        $r79[196] = "Cursor.west";

        $r159 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_west.gif");

        $r79[197] = $r159;

        $r79[198] = "Cursor.tab";

        $r160 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_tab.gif");

        $r79[199] = $r160;

        $r79[200] = "Cursor.float";

        $r161 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_float.gif");

        $r79[201] = $r161;

        $r79[202] = "Cursor.vertical";

        $r162 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_vertical.gif");

        $r79[203] = $r162;

        $r79[204] = "Cursor.horizontal";

        $r163 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_horizontal.gif");

        $r79[205] = $r163;

        $r79[206] = "Cursor.delete";

        $r164 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_delete.gif");

        $r79[207] = $r164;

        $r79[208] = "Cursor.drag";

        $r165 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag.gif");

        $r79[209] = $r165;

        $r79[210] = "Cursor.dragStop";

        $r166 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_stop.gif");

        $r79[211] = $r166;

        $r79[212] = "Cursor.dragText";

        $r167 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_text.gif");

        $r79[213] = $r167;

        $r79[214] = "Cursor.dragTextStop";

        $r168 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_drag_text_stop.gif");

        $r79[215] = $r168;

        $r79[216] = "Cursor.percentage";

        $r169 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_percentage.gif");

        $r79[217] = $r169;

        $r79[218] = "Cursor.moveEast";

        $r170 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_move_east.gif");

        $r79[219] = $r170;

        $r79[220] = "Cursor.moveWest";

        $r171 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/cursor_move_west.gif");

        $r79[221] = $r171;

        $r79[222] = "Gripper.size";

        $r172 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r79[223] = $r172;

        $r79[224] = "Gripper.foreground";

        $r79[225] = $r67;

        $r79[226] = "Gripper.painter";

        $r79[227] = $r77;

        $r79[228] = "HeaderBox.background";

        $r79[229] = $r13;

        $r79[230] = "Icon.floating";

        $r173 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r79[231] = $r173;

        $r79[232] = "Resizable.resizeBorder";

        $r79[233] = $r34;

        $r79[234] = "TextArea.font";

        $r79[235] = $r31;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r79);

        $i0 = staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: int getProductsUsed()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label09;

        $r240 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoWindowsUtils;", "icons/title_buttons_xerto.gif");

        $r241 = new com.jidesoft.plaf.xerto.FrameBorder;

        specialinvoke $r241.<com.jidesoft.plaf.xerto.FrameBorder: void <init>()>();

        $r242 = "true";

        $r243 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("jide.shadeSlidingBorder", "false");

        $z1 = virtualinvoke $r242.<java.lang.String: boolean equals(java.lang.Object)>($r243);

        $r244 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r245 = newarray (java.lang.String)[4];

        $r245[0] = "win.3d.lightColor";

        $r245[1] = "win.3d.highlightColor";

        $r245[2] = "win.3d.shadowColor";

        $r245[3] = "win.3d.darkShadowColor";

        $r246 = newarray (java.lang.Object)[4];

        $r247 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r246[0] = $r247;

        $r248 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r246[1] = $r248;

        $r249 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r246[2] = $r249;

        $r250 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r246[3] = $r250;

        $r251 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$15;

        specialinvoke $r251.<com.jidesoft.plaf.xerto.XertoWindowsUtils$15: void <init>()>();

        specialinvoke $r244.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r245, $r246, $r0, $r251);

        $r252 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r253 = newarray (java.lang.String)[4];

        $r253[0] = "win.3d.lightColor";

        $r253[1] = "win.3d.highlightColor";

        $r253[2] = "win.3d.shadowColor";

        $r253[3] = "win.3d.darkShadowColor";

        $r254 = newarray (java.lang.Object)[4];

        $r255 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r254[0] = $r255;

        $r256 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r254[1] = $r256;

        $r257 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r254[2] = $r257;

        $r258 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r254[3] = $r258;

        $r259 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$16;

        specialinvoke $r259.<com.jidesoft.plaf.xerto.XertoWindowsUtils$16: void <init>()>();

        specialinvoke $r252.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r253, $r254, $r0, $r259);

        $r260 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r261 = newarray (java.lang.String)[4];

        $r261[0] = "win.3d.lightColor";

        $r261[1] = "win.3d.highlightColor";

        $r261[2] = "win.3d.shadowColor";

        $r261[3] = "win.3d.darkShadowColor";

        $r262 = newarray (java.lang.Object)[4];

        $r263 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r262[0] = $r263;

        $r264 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r262[1] = $r264;

        $r265 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r262[2] = $r265;

        $r266 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r262[3] = $r266;

        $r267 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$17;

        specialinvoke $r267.<com.jidesoft.plaf.xerto.XertoWindowsUtils$17: void <init>()>();

        specialinvoke $r260.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r261, $r262, $r0, $r267);

        $r268 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r269 = newarray (java.lang.String)[4];

        $r269[0] = "win.3d.lightColor";

        $r269[1] = "win.3d.highlightColor";

        $r269[2] = "win.3d.shadowColor";

        $r269[3] = "win.3d.darkShadowColor";

        $r270 = newarray (java.lang.Object)[4];

        $r271 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r270[0] = $r271;

        $r272 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r270[1] = $r272;

        $r273 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r270[2] = $r273;

        $r274 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r270[3] = $r274;

        $r275 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$18;

        specialinvoke $r275.<com.jidesoft.plaf.xerto.XertoWindowsUtils$18: void <init>()>();

        specialinvoke $r268.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r269, $r270, $r0, $r275);

        $r276 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r277 = newarray (java.lang.String)[4];

        $r277[0] = "win.3d.lightColor";

        $r277[1] = "win.3d.highlightColor";

        $r277[2] = "win.3d.shadowColor";

        $r277[3] = "win.3d.darkShadowColor";

        $r278 = newarray (java.lang.Object)[4];

        $r279 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r278[0] = $r279;

        $r280 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r278[1] = $r280;

        $r281 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r278[2] = $r281;

        $r282 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r278[3] = $r282;

        $r283 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$19;

        specialinvoke $r283.<com.jidesoft.plaf.xerto.XertoWindowsUtils$19: void <init>()>();

        specialinvoke $r276.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r277, $r278, $r0, $r283);

        $r284 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r285 = newarray (java.lang.String)[4];

        $r285[0] = "win.3d.lightColor";

        $r285[1] = "win.3d.highlightColor";

        $r285[2] = "win.3d.shadowColor";

        $r285[3] = "win.3d.darkShadowColor";

        $r286 = newarray (java.lang.Object)[4];

        $r287 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r286[0] = $r287;

        $r288 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r286[1] = $r288;

        $r289 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r286[2] = $r289;

        $r290 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r286[3] = $r290;

        $r291 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$20;

        specialinvoke $r291.<com.jidesoft.plaf.xerto.XertoWindowsUtils$20: void <init>()>();

        specialinvoke $r284.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r285, $r286, $r0, $r291);

        $r292 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r293 = newarray (java.lang.String)[4];

        $r293[0] = "win.3d.lightColor";

        $r293[1] = "win.3d.highlightColor";

        $r293[2] = "win.3d.shadowColor";

        $r293[3] = "win.3d.darkShadowColor";

        $r294 = newarray (java.lang.Object)[4];

        $r295 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r294[0] = $r295;

        $r296 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r294[1] = $r296;

        $r297 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r294[2] = $r297;

        $r298 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r294[3] = $r298;

        $r299 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$21;

        specialinvoke $r299.<com.jidesoft.plaf.xerto.XertoWindowsUtils$21: void <init>()>();

        specialinvoke $r292.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r293, $r294, $r0, $r299);

        $r300 = new com.jidesoft.plaf.ExtWindowsDesktopProperty;

        $r301 = newarray (java.lang.String)[4];

        $r301[0] = "win.3d.lightColor";

        $r301[1] = "win.3d.highlightColor";

        $r301[2] = "win.3d.shadowColor";

        $r301[3] = "win.3d.darkShadowColor";

        $r302 = newarray (java.lang.Object)[4];

        $r303 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("control");

        $r302[0] = $r303;

        $r304 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlLtHighlight");

        $r302[1] = $r304;

        $r305 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlShadow");

        $r302[2] = $r305;

        $r306 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("controlDkShadow");

        $r302[3] = $r306;

        $r307 = new com.jidesoft.plaf.xerto.XertoWindowsUtils$22;

        specialinvoke $r307.<com.jidesoft.plaf.xerto.XertoWindowsUtils$22: void <init>()>();

        specialinvoke $r300.<com.jidesoft.plaf.ExtWindowsDesktopProperty: void <init>(java.lang.String[],java.lang.Object[],java.awt.Toolkit,com.jidesoft.plaf.vsnet.ConvertListener)>($r301, $r302, $r0, $r307);

        $r308 = newarray (java.lang.Object)[112];

        $r308[0] = "Workspace.background";

        $r308[1] = $r7;

        $r308[2] = "SidePane.margin";

        $r309 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r309.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(1, 1, 1, 1);

        $r308[3] = $r309;

        $r308[4] = "SidePane.iconTextGap";

        $r310 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r308[5] = $r310;

        $r308[6] = "SidePane.textBorderGap";

        $r311 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r308[7] = $r311;

        $r308[8] = "SidePane.itemGap";

        $r312 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r308[9] = $r312;

        $r308[10] = "SidePane.groupGap";

        $r313 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r308[11] = $r313;

        $r308[12] = "SidePane.foreground";

        $r308[13] = $r17;

        $r308[14] = "SidePane.background";

        $r314 = new javax.swing.plaf.ColorUIResource;

        $r315 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getApplicationFrameBackgroundColor()>();

        specialinvoke $r314.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r315);

        $r308[15] = $r314;

        $r308[16] = "SidePane.lineColor";

        $r308[17] = $r15;

        $r308[18] = "SidePane.buttonBackground";

        $r316 = new javax.swing.plaf.ColorUIResource;

        $r317 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getLightControlColor()>();

        specialinvoke $r316.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r317);

        $r308[19] = $r316;

        $r308[20] = "SidePane.selectedButtonBackground";

        $r308[21] = $r62;

        $r308[22] = "SidePane.selectedButtonForeground";

        $r308[23] = $r11;

        $r308[24] = "SidePane.font";

        $r308[25] = $r31;

        $r308[26] = "SidePane.orientation";

        $r318 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r308[27] = $r318;

        $r308[28] = "SidePane.showSelectedTabText";

        $r319 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r308[29] = $r319;

        $r308[30] = "SidePane.alwaysShowTabText";

        $r320 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r308[31] = $r320;

        $r308[32] = "DockableFrame.defaultIcon";

        $r321 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/dockableframe_blank.gif");

        $r308[33] = $r321;

        $r308[34] = "DockableFrame.background";

        $r308[35] = $r13;

        $r308[36] = "DockableFrame.border";

        $r308[37] = $r241;

        $r308[38] = "DockableFrame.floatingBorder";

        $r322 = new javax.swing.plaf.BorderUIResource;

        $r323 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        $r324 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r323);

        specialinvoke $r322.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r324);

        $r308[39] = $r322;

        $r308[40] = "DockableFrame.slidingEastBorder";

        if $z1 == 0 goto label01;

        $r352 = $r244;

        goto label02;

     label01:
        $r352 = $r276;

     label02:
        $r308[41] = $r352;

        $r308[42] = "DockableFrame.slidingWestBorder";

        if $z1 == 0 goto label03;

        $r353 = $r252;

        goto label04;

     label03:
        $r353 = $r284;

     label04:
        $r308[43] = $r353;

        $r308[44] = "DockableFrame.slidingNorthBorder";

        if $z1 == 0 goto label05;

        $r354 = $r260;

        goto label06;

     label05:
        $r354 = $r292;

     label06:
        $r308[45] = $r354;

        $r308[46] = "DockableFrame.slidingSouthBorder";

        if $z1 == 0 goto label07;

        $r355 = $r268;

        goto label08;

     label07:
        $r355 = $r300;

     label08:
        $r308[47] = $r355;

        $r308[48] = "DockableFrame.activeTitleBackground";

        $r308[49] = $r19;

        $r308[50] = "DockableFrame.activeTitleForeground";

        $r325 = new javax.swing.plaf.ColorUIResource;

        $r326 = <java.awt.Color: java.awt.Color WHITE>;

        specialinvoke $r325.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r326);

        $r308[51] = $r325;

        $r308[52] = "DockableFrame.inactiveTitleBackground";

        $r308[53] = $r13;

        $r308[54] = "DockableFrame.inactiveTitleForeground";

        $r327 = new javax.swing.plaf.ColorUIResource;

        $r328 = <java.awt.Color: java.awt.Color WHITE>;

        specialinvoke $r327.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r328);

        $r308[55] = $r327;

        $r308[56] = "DockableFrame.titleBorder";

        $r329 = new javax.swing.plaf.BorderUIResource;

        $r330 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 0, 1, 0);

        specialinvoke $r329.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r330);

        $r308[57] = $r329;

        $r308[58] = "DockableFrame.activeTitleBorderColor";

        $r308[59] = $r19;

        $r308[60] = "DockableFrame.inactiveTitleBorderColor";

        $r308[61] = $r15;

        $r308[62] = "DockableFrame.font";

        $r308[63] = $r31;

        $r308[64] = "DockableFrameTitlePane.gripperPainter";

        $r308[65] = $r77;

        $r308[66] = "DockableFrameTitlePane.font";

        $r308[67] = $r31;

        $r308[68] = "DockableFrameTitlePane.hideIcon";

        $r331 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 0, 10, 10);

        $r308[69] = $r331;

        $r308[70] = "DockableFrameTitlePane.unfloatIcon";

        $r332 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 10, 10, 10);

        $r308[71] = $r332;

        $r308[72] = "DockableFrameTitlePane.floatIcon";

        $r333 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 20, 10, 10);

        $r308[73] = $r333;

        $r308[74] = "DockableFrameTitlePane.autohideIcon";

        $r334 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 30, 10, 10);

        $r308[75] = $r334;

        $r308[76] = "DockableFrameTitlePane.stopAutohideIcon";

        $r335 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 40, 10, 10);

        $r308[77] = $r335;

        $r308[78] = "DockableFrameTitlePane.hideAutohideIcon";

        $r336 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 50, 10, 10);

        $r308[79] = $r336;

        $r308[80] = "DockableFrameTitlePane.maximizeIcon";

        $r337 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 60, 10, 10);

        $r308[81] = $r337;

        $r308[82] = "DockableFrameTitlePane.restoreIcon";

        $r338 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r240, 0, 70, 10, 10);

        $r308[83] = $r338;

        $r308[84] = "DockableFrameTitlePane.titleBarComponent";

        $r339 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r308[85] = $r339;

        $r308[86] = "DockableFrameTitlePane.alwaysShowAllButtons";

        $r340 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r308[87] = $r340;

        $r308[88] = "DockableFrameTitlePane.buttonsAlignment";

        $r341 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r308[89] = $r341;

        $r308[90] = "DockableFrameTitlePane.titleAlignment";

        $r342 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r308[91] = $r342;

        $r308[92] = "DockableFrameTitlePane.buttonGap";

        $r343 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r308[93] = $r343;

        $r308[94] = "DockableFrameTitlePane.showIcon";

        $r344 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r308[95] = $r344;

        $r308[96] = "DockableFrameTitlePane.margin";

        $r345 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r345.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(0, 3, 0, 3);

        $r308[97] = $r345;

        $r308[98] = "Contour.color";

        $r346 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r346.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(136, 136, 136);

        $r308[99] = $r346;

        $r308[100] = "Contour.thickness";

        $r347 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r308[101] = $r347;

        $r308[102] = "ContentContainer.background";

        $r308[103] = $r42;

        $r308[104] = "ContentContainer.vgap";

        $r348 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r308[105] = $r348;

        $r308[106] = "ContentContainer.hgap";

        $r349 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r308[107] = $r349;

        $r308[108] = "DockingFramework.changeCursor";

        $r350 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r308[109] = $r350;

        $r308[110] = "FrameContainer.contentBorderInsets";

        $r351 = new javax.swing.plaf.InsetsUIResource;

        specialinvoke $r351.<javax.swing.plaf.InsetsUIResource: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $r308[111] = $r351;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r308);

     label09:
        $i5 = $i0 & 2;

        if $i5 == 0 goto label10;

        $r203 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoWindowsUtils;", "icons/collapsible_pane_xerto.png");

        $r204 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoWindowsUtils;", "icons/collapsible_pane_mask.png");

        $r205 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r203, 0, 0, 12, 12);

        $r206 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r203, 12, 0, 12, 12);

        $r207 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r204, 0, 0, 12, 12);

        $r208 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int)>(null, $r204, 0, 12, 12, 12);

        $r209 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r209.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(172, 168, 153);

        $r210 = newarray (java.lang.Object)[56];

        $r210[0] = "CollapsiblePanes.border";

        $r211 = new javax.swing.plaf.BorderUIResource;

        $r212 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(12, 12, 12, 12);

        specialinvoke $r211.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r212);

        $r210[1] = $r211;

        $r210[2] = "CollapsiblePanes.gap";

        $r213 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r210[3] = $r213;

        $r210[4] = "CollapsiblePane.background";

        $r210[5] = $r209;

        $r210[6] = "CollapsiblePane.contentBackground";

        $r210[7] = $r3;

        $r210[8] = "CollapsiblePane.foreground";

        $r214 = new javax.swing.plaf.ColorUIResource;

        $r215 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTextColor(java.awt.Color)>($r209);

        specialinvoke $r214.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r215);

        $r210[9] = $r214;

        $r210[10] = "CollapsiblePane.emphasizedBackground";

        $r210[11] = $r209;

        $r210[12] = "CollapsiblePane.emphasizedForeground";

        $r216 = new javax.swing.plaf.ColorUIResource;

        $r217 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getEmBaseColor(java.awt.Color)>($r209);

        $r218 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getTextColor(java.awt.Color)>($r217);

        specialinvoke $r216.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r218);

        $r210[13] = $r216;

        $r210[14] = "CollapsiblePane.border";

        $r219 = new javax.swing.plaf.BorderUIResource;

        $r220 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke $r219.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r220);

        $r210[15] = $r219;

        $r210[16] = "CollapsiblePane.font";

        $r210[17] = $r31;

        $r210[18] = "CollapsiblePane.contentBorder";

        $r221 = new javax.swing.plaf.BorderUIResource;

        $r222 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(8, 10, 8, 10);

        specialinvoke $r221.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r222);

        $r210[19] = $r221;

        $r210[20] = "CollapsiblePane.titleBorder";

        $r223 = new javax.swing.plaf.BorderUIResource;

        $r224 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        specialinvoke $r223.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r224);

        $r210[21] = $r223;

        $r210[22] = "CollapsiblePane.titleFont";

        $r210[23] = $r33;

        $r210[24] = "CollapsiblePane.downIcon";

        $r225 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r205, $r207, 0);

        $r210[25] = $r225;

        $r210[26] = "CollapsiblePane.upIcon";

        $r226 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r205, $r208, 0);

        $r210[27] = $r226;

        $r210[28] = "CollapsiblePane.downIcon.emphasized";

        $r227 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r206, $r207, 0);

        $r210[29] = $r227;

        $r210[30] = "CollapsiblePane.upIcon.emphasized";

        $r228 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int)>(null, $r206, $r208, 0);

        $r210[31] = $r228;

        $r210[32] = "CollapsiblePane.titleButtonBackground";

        $r210[33] = $r205;

        $r210[34] = "CollapsiblePane.titleButtonBackground.emphasized";

        $r210[35] = $r206;

        $r210[36] = "StatusBarItem.border";

        $r229 = new javax.swing.plaf.BorderUIResource;

        $r230 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 1, 0, 1);

        specialinvoke $r229.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r230);

        $r210[37] = $r229;

        $r210[38] = "StatusBar.border";

        $r231 = new com.jidesoft.plaf.xerto.StatusBarBorder;

        specialinvoke $r231.<com.jidesoft.plaf.xerto.StatusBarBorder: void <init>()>();

        $r210[39] = $r231;

        $r210[40] = "StatusBar.gap";

        $r232 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r210[41] = $r232;

        $r210[42] = "StatusBar.background";

        $r210[43] = $r13;

        $r210[44] = "StatusBar.font";

        $r210[45] = $r31;

        $r210[46] = "MemoryStatusBarItem.fillColor";

        $r233 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r233.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(236, 233, 176);

        $r210[47] = $r233;

        $r210[48] = "DocumentPane.groupBorder";

        $r234 = new javax.swing.plaf.BorderUIResource;

        $r235 = <java.awt.Color: java.awt.Color gray>;

        $r236 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r235);

        specialinvoke $r234.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r236);

        $r210[49] = $r234;

        $r210[50] = "DocumentPane.newHorizontalGroupIcon";

        $r237 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/windows_new_horizontal_tab_group.png");

        $r210[51] = $r237;

        $r210[52] = "DocumentPane.newVerticalGroupIcon";

        $r238 = staticinvoke <com.jidesoft.icons.JideIconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.String)>("jide/windows_new_vertical_tab_group.png");

        $r210[53] = $r238;

        $r210[54] = "DocumentPane.boldActiveTab";

        $r239 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r210[55] = $r239;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r210);

     label10:
        $i2 = $i0 & 16;

        if $i2 == 0 goto label11;

        $r185 = newarray (java.lang.Object)[40];

        $r185[0] = "CommandBar.font";

        $r185[1] = $r32;

        $r185[2] = "CommandBar.background";

        $r185[3] = $r72;

        $r185[4] = "CommandBar.foreground";

        $r185[5] = $r11;

        $r185[6] = "CommandBar.shadow";

        $r185[7] = $r15;

        $r185[8] = "CommandBar.darkShadow";

        $r185[9] = $r17;

        $r185[10] = "CommandBar.light";

        $r185[11] = $r1;

        $r185[12] = "CommandBar.highlight";

        $r185[13] = $r3;

        $r185[14] = "CommandBar.border";

        $r186 = new javax.swing.plaf.BorderUIResource;

        $r187 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        specialinvoke $r186.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r187);

        $r185[15] = $r186;

        $r185[16] = "CommandBar.borderVert";

        $r188 = new javax.swing.plaf.BorderUIResource;

        $r189 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        specialinvoke $r188.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r189);

        $r185[17] = $r188;

        $r185[18] = "CommandBar.borderFloating";

        $r190 = new javax.swing.plaf.BorderUIResource;

        $r191 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("activeCaption");

        $r192 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color,int)>($r191, 2);

        $r193 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(1, 1, 1, 1);

        $r194 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)>($r192, $r193);

        specialinvoke $r190.<javax.swing.plaf.BorderUIResource: void <init>(javax.swing.border.Border)>($r194);

        $r185[19] = $r190;

        $r185[20] = "CommandBar.ancestorInputMap";

        $r195 = new javax.swing.UIDefaults$LazyInputMap;

        $r196 = newarray (java.lang.Object)[16];

        $r196[0] = "UP";

        $r196[1] = "navigateUp";

        $r196[2] = "KP_UP";

        $r196[3] = "navigateUp";

        $r196[4] = "DOWN";

        $r196[5] = "navigateDown";

        $r196[6] = "KP_DOWN";

        $r196[7] = "navigateDown";

        $r196[8] = "LEFT";

        $r196[9] = "navigateLeft";

        $r196[10] = "KP_LEFT";

        $r196[11] = "navigateLeft";

        $r196[12] = "RIGHT";

        $r196[13] = "navigateRight";

        $r196[14] = "KP_RIGHT";

        $r196[15] = "navigateRight";

        specialinvoke $r195.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r196);

        $r185[21] = $r195;

        $r185[22] = "CommandBar.titleBarSize";

        $r197 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        $r185[23] = $r197;

        $r185[24] = "CommandBar.titleBarButtonGap";

        $r198 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r185[25] = $r198;

        $r185[26] = "CommandBar.titleBarBackground";

        $r185[27] = $r19;

        $r185[28] = "CommandBar.titleBarForeground";

        $r185[29] = $r21;

        $r185[30] = "CommandBar.titleBarFont";

        $r185[31] = $r33;

        $r185[32] = "CommandBar.separatorSize";

        $r199 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r185[33] = $r199;

        $r185[34] = "CommandBarSeparator.background";

        $r200 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlColor()>();

        $r185[35] = $r200;

        $r185[36] = "CommandBarSeparator.foreground";

        $r201 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlMidShadowColor()>();

        $r185[37] = $r201;

        $r185[38] = "Chevron.size";

        $r202 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r185[39] = $r202;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r185);

     label11:
        $i3 = $i0 & 4;

        if $i3 == 0 goto label12;

        $r181 = newarray (java.lang.Object)[4];

        $r181[0] = "NestedTableHeader.cellBorder";

        $r182 = new com.jidesoft.plaf.vsnet.HeaderCellBorder;

        specialinvoke $r182.<com.jidesoft.plaf.vsnet.HeaderCellBorder: void <init>()>();

        $r181[1] = $r182;

        $r181[2] = "GroupList.ancestorInputMap";

        $r183 = new javax.swing.UIDefaults$LazyInputMap;

        $r184 = newarray (java.lang.Object)[4];

        $r184[0] = "TAB";

        $r184[1] = "selectNextGroup";

        $r184[2] = "shift TAB";

        $r184[3] = "selectPreviousGroup";

        specialinvoke $r183.<javax.swing.UIDefaults$LazyInputMap: void <init>(java.lang.Object[])>($r184);

        $r181[3] = $r183;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r181);

     label12:
        $i4 = $i0 & 16384;

        if $i4 == 0 goto label13;

        $r176 = newarray (java.lang.Object)[8];

        $r176[0] = "DiffMerge.changed";

        $r177 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r177.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(196, 196, 255);

        $r176[1] = $r177;

        $r176[2] = "DiffMerge.deleted";

        $r178 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r178.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(200, 200, 200);

        $r176[3] = $r178;

        $r176[4] = "DiffMerge.inserted";

        $r179 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r179.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(196, 255, 196);

        $r176[5] = $r179;

        $r176[6] = "DiffMerge.conflicted";

        $r180 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r180.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(255, 153, 153);

        $r176[7] = $r180;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r176);

     label13:
        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean shouldUseSystemFont()>();

        if $z0 != 0 goto label14;

        $r175 = newarray (java.lang.Object)[28];

        $r175[0] = "TabbedPane.font";

        $r175[1] = $r31;

        $r175[2] = "TitledBorder.font";

        $r175[3] = $r33;

        $r175[4] = "TableHeader.font";

        $r175[5] = $r31;

        $r175[6] = "Table.font";

        $r175[7] = $r31;

        $r175[8] = "List.font";

        $r175[9] = $r31;

        $r175[10] = "Tree.font";

        $r175[11] = $r31;

        $r175[12] = "ToolTip.font";

        $r175[13] = $r31;

        $r175[14] = "CheckBox.font";

        $r175[15] = $r31;

        $r175[16] = "RadioButton.font";

        $r175[17] = $r31;

        $r175[18] = "Label.font";

        $r175[19] = $r31;

        $r175[20] = "Panel.font";

        $r175[21] = $r31;

        $r175[22] = "TextField.font";

        $r175[23] = $r31;

        $r175[24] = "ComboBox.font";

        $r175[25] = $r31;

        $r175[26] = "Button.font";

        $r175[27] = $r31;

        virtualinvoke r30.<javax.swing.UIDefaults: void putDefaults(java.lang.Object[])>($r175);

     label14:
        $r174 = staticinvoke <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.basic.ThemePainter getInstance()>();

        staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: void put(javax.swing.UIDefaults,java.lang.String,java.lang.Object)>(r30, "Theme.painter", $r174);

        return;
    }
}
