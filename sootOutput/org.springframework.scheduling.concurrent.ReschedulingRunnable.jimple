class org.springframework.scheduling.concurrent.ReschedulingRunnable extends org.springframework.scheduling.support.DelegatingErrorHandlingRunnable implements java.util.concurrent.ScheduledFuture
{
    private final org.springframework.scheduling.Trigger trigger;
    private final org.springframework.scheduling.support.SimpleTriggerContext triggerContext;
    private final java.util.concurrent.ScheduledExecutorService executor;
    private volatile java.util.concurrent.ScheduledFuture currentFuture;
    private volatile java.util.Date scheduledExecutionTime;
    private final java.lang.Object triggerContextMonitor;

    public void <init>(java.lang.Runnable, org.springframework.scheduling.Trigger, java.util.concurrent.ScheduledExecutorService, org.springframework.util.ErrorHandler)
    {
        org.springframework.util.ErrorHandler r2;
        org.springframework.scheduling.support.SimpleTriggerContext $r3;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        org.springframework.scheduling.Trigger r5;
        java.util.concurrent.ScheduledExecutorService r6;
        java.lang.Object $r4;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        r1 := @parameter0: java.lang.Runnable;

        r5 := @parameter1: org.springframework.scheduling.Trigger;

        r6 := @parameter2: java.util.concurrent.ScheduledExecutorService;

        r2 := @parameter3: org.springframework.util.ErrorHandler;

        specialinvoke r0.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: void <init>(java.lang.Runnable,org.springframework.util.ErrorHandler)>(r1, r2);

        $r3 = new org.springframework.scheduling.support.SimpleTriggerContext;

        specialinvoke $r3.<org.springframework.scheduling.support.SimpleTriggerContext: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: org.springframework.scheduling.support.SimpleTriggerContext triggerContext> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.lang.Object triggerContextMonitor> = $r4;

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: org.springframework.scheduling.Trigger trigger> = r5;

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledExecutorService executor> = r6;

        return;
    }

    public java.util.concurrent.ScheduledFuture schedule()
    {
        java.lang.Throwable $r10;
        org.springframework.scheduling.support.SimpleTriggerContext $r2;
        java.util.concurrent.ScheduledFuture $r9;
        org.springframework.scheduling.Trigger $r3;
        java.util.Date $r4, $r5, $r6;
        long $l0, $l1, l2;
        java.util.concurrent.TimeUnit $r7;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledExecutorService $r8;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r1 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.lang.Object triggerContextMonitor>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: org.springframework.scheduling.Trigger trigger>;

        $r2 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: org.springframework.scheduling.support.SimpleTriggerContext triggerContext>;

        $r4 = interfaceinvoke $r3.<org.springframework.scheduling.Trigger: java.util.Date nextExecutionTime(org.springframework.scheduling.TriggerContext)>($r2);

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.Date scheduledExecutionTime> = $r4;

        $r5 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.Date scheduledExecutionTime>;

        if $r5 != null goto label3;

        exitmonitor $r1;

     label2:
        return null;

     label3:
        $r6 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.Date scheduledExecutionTime>;

        $l0 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

        $r8 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledExecutorService executor>;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r0, l2, $r7);

        r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture> = $r9;

        exitmonitor $r1;

     label4:
        return r0;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void run()
    {
        java.lang.Throwable $r7;
        org.springframework.scheduling.support.SimpleTriggerContext $r5;
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date $r0, $r2, $r4;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r1;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>()>();

        specialinvoke r1.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: void run()>();

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $r3 = r1.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.lang.Object triggerContextMonitor>;

        entermonitor $r3;

     label1:
        $r5 = r1.<org.springframework.scheduling.concurrent.ReschedulingRunnable: org.springframework.scheduling.support.SimpleTriggerContext triggerContext>;

        $r4 = r1.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.Date scheduledExecutionTime>;

        virtualinvoke $r5.<org.springframework.scheduling.support.SimpleTriggerContext: void update(java.util.Date,java.util.Date,java.util.Date)>($r4, $r0, $r2);

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r7;

     label5:
        $r6 = r1.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $z0 = interfaceinvoke $r6.<java.util.concurrent.ScheduledFuture: boolean isCancelled()>();

        if $z0 != 0 goto label6;

        virtualinvoke r1.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture schedule()>();

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean cancel(boolean)
    {
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r1;
        boolean z0, $z1;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $z1 = interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(z0);

        return $z1;
    }

    public boolean isCancelled()
    {
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r1;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r1 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: boolean isCancelled()>();

        return $z0;
    }

    public boolean isDone()
    {
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r1;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r1 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: boolean isDone()>();

        return $z0;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.lang.Object $r2;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r1 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: java.lang.Object get()>();

        return $r2;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit r1;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r2;
        long l0;
        java.lang.Object $r3;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r3;
    }

    public long getDelay(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        java.util.concurrent.ScheduledFuture $r2;
        long $l0;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $r2 = r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture currentFuture>;

        $l0 = interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>(r1);

        return $l0;
    }

    public int compareTo(java.util.concurrent.Delayed)
    {
        long $l0, $l1, l2;
        java.util.concurrent.TimeUnit $r2, $r3;
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        byte $b3, $b4, $b5;
        int $i6;
        java.util.concurrent.Delayed r1;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        r1 := @parameter0: java.util.concurrent.Delayed;

        if r0 != r1 goto label1;

        return 0;

     label1:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: long getDelay(java.util.concurrent.TimeUnit)>($r2);

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = interfaceinvoke r1.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r3);

        l2 = $l0 - $l1;

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label2;

        $b5 = 0;

        goto label4;

     label2:
        $b4 = l2 cmp 0L;

        $i6 = (int) $b4;

        if $i6 >= 0 goto label3;

        $b5 = -1;

        goto label4;

     label3:
        $b5 = 1;

     label4:
        return $b5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.springframework.scheduling.concurrent.ReschedulingRunnable r0;
        int $i0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ReschedulingRunnable;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        $i0 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ReschedulingRunnable: int compareTo(java.util.concurrent.Delayed)>($r2);

        return $i0;
    }
}
