public class arq.cmdline.CommandLineBase extends java.lang.Object
{
    private java.util.List argList;
    boolean splitTerms;

    public void <init>(java.lang.String[])
    {
        arq.cmdline.CommandLineBase r0;
        java.lang.String[] r2;
        java.util.ArrayList $r1;

        r0 := @this: arq.cmdline.CommandLineBase;

        r2 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<arq.cmdline.CommandLineBase: java.util.List argList> = $r1;

        r0.<arq.cmdline.CommandLineBase: boolean splitTerms> = 1;

        virtualinvoke r0.<arq.cmdline.CommandLineBase: void setArgs(java.lang.String[])>(r2);

        return;
    }

    public void <init>()
    {
        arq.cmdline.CommandLineBase r0;
        java.util.ArrayList $r1;

        r0 := @this: arq.cmdline.CommandLineBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<arq.cmdline.CommandLineBase: java.util.List argList> = $r1;

        r0.<arq.cmdline.CommandLineBase: boolean splitTerms> = 1;

        return;
    }

    public void setArgs(java.lang.String[])
    {
        arq.cmdline.CommandLineBase r0;
        java.lang.String[] r1;
        java.util.List $r2;

        r0 := @this: arq.cmdline.CommandLineBase;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<arq.cmdline.CommandLineBase: java.util.List processArgv(java.lang.String[])>(r1);

        r0.<arq.cmdline.CommandLineBase: java.util.List argList> = $r2;

        return;
    }

    protected java.util.List getArgList()
    {
        arq.cmdline.CommandLineBase r0;
        java.util.List $r1;

        r0 := @this: arq.cmdline.CommandLineBase;

        $r1 = r0.<arq.cmdline.CommandLineBase: java.util.List argList>;

        return $r1;
    }

    protected java.lang.String getArg(int)
    {
        java.util.List $r1, $r2;
        int i0, $i1;
        arq.cmdline.CommandLineBase r0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: arq.cmdline.CommandLineBase;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<arq.cmdline.CommandLineBase: java.util.List argList>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<arq.cmdline.CommandLineBase: java.util.List argList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected void apply(arq.cmdline.ArgProc)
    {
        arq.cmdline.CommandLineBase r1;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String r5;
        arq.cmdline.ArgProc r0;

        r1 := @this: arq.cmdline.CommandLineBase;

        r0 := @parameter0: arq.cmdline.ArgProc;

        interfaceinvoke r0.<arq.cmdline.ArgProc: void startArgs()>();

        i1 = 0;

     label1:
        $r2 = r1.<arq.cmdline.CommandLineBase: java.util.List argList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = r1.<arq.cmdline.CommandLineBase: java.util.List argList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (java.lang.String) $r4;

        interfaceinvoke r0.<arq.cmdline.ArgProc: void arg(java.lang.String,int)>(r5, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        interfaceinvoke r0.<arq.cmdline.ArgProc: void finishArgs()>();

        return;
    }

    private java.util.List processArgv(java.lang.String[])
    {
        arq.cmdline.CommandLineBase r2;
        java.lang.String[] r1;
        java.util.ArrayList $r9;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String $r3, $r4, r8;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r6, $r7, $r10;

        r2 := @this: arq.cmdline.CommandLineBase;

        r1 := @parameter0: java.lang.String[];

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        z5 = 0;

        i4 = 0;

     label01:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label13;

        r8 = r1[i4];

        if z5 != 0 goto label02;

        $z0 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 != 0 goto label03;

     label02:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label12;

     label03:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z1 != 0 goto label04;

        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("--");

        if $z2 == 0 goto label05;

     label04:
        z5 = 1;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>("--");

        goto label12;

     label05:
        $z3 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z3 != 0 goto label06;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $z4 = r2.<arq.cmdline.CommandLineBase: boolean splitTerms>;

        if $z4 != 0 goto label07;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label12;

     label07:
        $i1 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(61);

        $i2 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(58);

        $i7 = (int) -1;

        i5 = $i7;

        if $i1 <= 0 goto label08;

        if $i2 <= 0 goto label08;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        goto label10;

     label08:
        if $i1 <= 0 goto label09;

        i5 = $i1;

     label09:
        if $i2 <= 0 goto label10;

        i5 = $i2;

     label10:
        if i5 >= 0 goto label11;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label12;

     label11:
        $r3 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        $i3 = i5 + 1;

        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i3);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r4);

     label12:
        i4 = i4 + 1;

        goto label01;

     label13:
        return $r9;
    }
}
