public class com.hp.hpl.jena.n3.turtle.ParserBase extends java.lang.Object
{
    protected final com.hp.hpl.jena.graph.Node XSD_TRUE;
    protected final com.hp.hpl.jena.graph.Node XSD_FALSE;
    protected final com.hp.hpl.jena.graph.Node nRDFtype;
    protected final com.hp.hpl.jena.graph.Node nRDFnil;
    protected final com.hp.hpl.jena.graph.Node nRDFfirst;
    protected final com.hp.hpl.jena.graph.Node nRDFrest;
    protected final com.hp.hpl.jena.graph.Node nRDFsubject;
    protected final com.hp.hpl.jena.graph.Node nRDFpredicate;
    protected final com.hp.hpl.jena.graph.Node nRDFobject;
    protected final java.lang.String SWAP_NS;
    protected final java.lang.String SWAP_LOG_NS;
    protected final com.hp.hpl.jena.graph.Node nLogImplies;
    protected final com.hp.hpl.jena.graph.Node nOwlSameAs;
    protected boolean strictTurtle;
    protected boolean skolomizedBNodes;
    com.hp.hpl.jena.shared.PrefixMapping prefixMapping;
    com.hp.hpl.jena.n3.IRIResolver resolver;
    com.hp.hpl.jena.n3.turtle.LabelToNodeMap bNodeLabels;
    com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler;
    static final java.lang.String bNodeLabelStart;

    public void <init>()
    {
        com.hp.hpl.jena.n3.turtle.LabelToNodeMap $r23;
        com.hp.hpl.jena.n3.IRIResolver $r22;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r19, $r20;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        com.hp.hpl.jena.rdf.model.Property $r5, $r9, $r11, $r13, $r15, $r17;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1, $r3;
        com.hp.hpl.jena.rdf.model.Resource $r7;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r21;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String SWAP_LOG_NS> = "http://www.w3.org/2000/10/swap/log#";

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String SWAP_NS> = "http://www.w3.org/2000/10/swap/";

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>("true", null, $r1);

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node XSD_TRUE> = $r2;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>("false", null, $r3);

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node XSD_FALSE> = $r4;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFtype> = $r6;

        $r7 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFnil> = $r8;

        $r9 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFfirst> = $r10;

        $r11 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFrest> = $r12;

        $r13 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property subject>;

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFsubject> = $r14;

        $r15 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property predicate>;

        $r16 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFpredicate> = $r16;

        $r17 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property object>;

        $r18 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nRDFobject> = $r18;

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String SWAP_NS> = "http://www.w3.org/2000/10/swap/";

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String SWAP_LOG_NS> = "http://www.w3.org/2000/10/swap/log#";

        $r19 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("http://www.w3.org/2000/10/swap/log#implies");

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nLogImplies> = $r19;

        $r20 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("http://www.w3.org/2002/07/owl#sameAs");

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node nOwlSameAs> = $r20;

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: boolean strictTurtle> = 1;

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: boolean skolomizedBNodes> = 1;

        $r21 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r21.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.shared.PrefixMapping prefixMapping> = $r21;

        $r22 = new com.hp.hpl.jena.n3.IRIResolver;

        specialinvoke $r22.<com.hp.hpl.jena.n3.IRIResolver: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.IRIResolver resolver> = $r22;

        $r23 = new com.hp.hpl.jena.n3.turtle.LabelToNodeMap;

        specialinvoke $r23.<com.hp.hpl.jena.n3.turtle.LabelToNodeMap: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.LabelToNodeMap bNodeLabels> = $r23;

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler> = null;

        return;
    }

    protected java.lang.String getBaseURI()
    {
        com.hp.hpl.jena.n3.IRIResolver $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.IRIResolver resolver>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.n3.IRIResolver: java.lang.String getBaseIRI()>();

        return $r2;
    }

    public void setBaseURI(java.lang.String)
    {
        com.hp.hpl.jena.n3.IRIResolver $r1;
        java.lang.String r2;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.hp.hpl.jena.n3.IRIResolver;

        specialinvoke $r1.<com.hp.hpl.jena.n3.IRIResolver: void <init>(java.lang.String)>(r2);

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.IRIResolver resolver> = $r1;

        return;
    }

    protected void setBase(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void setBaseURI(java.lang.String)>(r1);

        return;
    }

    public com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        return $r1;
    }

    public void setEventHandler(com.hp.hpl.jena.n3.turtle.TurtleEventHandler)
    {
        com.hp.hpl.jena.n3.turtle.TurtleEventHandler r1;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.n3.turtle.TurtleEventHandler;

        r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler> = r1;

        return;
    }

    protected void emitTriple(int, int, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.n3.turtle.TurtleEventHandler $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.n3.turtle.TurtleEventHandler: void triple(int,int,com.hp.hpl.jena.graph.Triple)>(i0, i1, r1);

        return;
    }

    protected void startFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.n3.turtle.TurtleEventHandler $r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.n3.turtle.TurtleEventHandler: void startFormula(int,int)>(i0, i1);

        return;
    }

    protected void endFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.n3.turtle.TurtleEventHandler $r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.n3.turtle.TurtleEventHandler: void endFormula(int,int)>(i0, i1);

        return;
    }

    protected void setPrefix(int, int, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.n3.turtle.TurtleEventHandler $r4;
        java.lang.String r1, r2;
        com.hp.hpl.jena.shared.PrefixMapping $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.TurtleEventHandler handler>;

        interfaceinvoke $r4.<com.hp.hpl.jena.n3.turtle.TurtleEventHandler: void prefix(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, r2);

        return;
    }

    protected int makePositiveInteger(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r1;
        int $i0, $i2;
        java.lang.String r0;

        r1 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        return $i0;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.n3.turtle.ParserBase r3;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.n3.turtle.ParserBase r3;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.n3.turtle.ParserBase r3;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r1;
        com.hp.hpl.jena.graph.Node r0, $r4;
        java.lang.String r2, r3, $r5;

        r1 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

     label2:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, $r5);

        return $r4;
    }

    protected com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r3;
        com.hp.hpl.jena.datatypes.RDFDatatype $r4;
        com.hp.hpl.jena.n3.turtle.ParserBase r5;
        java.lang.String r0, r1, r2;
        com.hp.hpl.jena.graph.Node r6;

        r5 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r3 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r0);

        r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, null, $r4);

        goto label2;

     label1:
        r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2, null);

     label2:
        return r6;
    }

    protected long integerValue(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r1;
        long $l0, $l1;
        java.lang.String $r0, r2;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z1 == 0 goto label2;

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(2);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r0, 16);

        return $l1;

     label2:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

        return $l0;
    }

    protected double doubleValue(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        java.lang.String r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

        return $d0;
    }

    protected java.lang.String stripQuotes(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r2;
        int $i0, $i1;
        java.lang.String r0, $r1;

        r2 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        return $r1;
    }

    protected java.lang.String stripQuotes3(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r2;
        int $i0, $i1;
        java.lang.String r0, $r1;

        r2 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(3, $i1);

        return $r1;
    }

    protected java.lang.String stripChars(java.lang.String, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r2;
        int i0, $i1;
        java.lang.String r0, $r1;

        r2 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }

    protected java.lang.String resolveQuotedIRI(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        java.lang.String $r1, $r2, r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String stripQuotes(java.lang.String)>(r3);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String resolveIRI(java.lang.String,int,int)>($r1, i0, i1);

        return $r2;
    }

    protected java.lang.String resolveIRI(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        com.hp.hpl.jena.n3.IRIResolver $r1;
        int i0, i1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: boolean isBNodeIRI(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.IRIResolver resolver>;

        if $r1 == null goto label2;

        r2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String _resolveIRI(java.lang.String,int,int)>(r2, i0, i1);

     label2:
        return r2;
    }

    private java.lang.String _resolveIRI(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        com.hp.hpl.jena.n3.IRIResolver $r1;
        com.hp.hpl.jena.n3.JenaURIException $r2;
        int i0, i1;
        java.lang.String $r3, r4;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.IRIResolver resolver>;

        r4 = virtualinvoke $r1.<com.hp.hpl.jena.n3.IRIResolver: java.lang.String resolve(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.n3.JenaURIException: java.lang.String getMessage()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void throwParseException(java.lang.String,int,int)>($r3, i0, i1);

     label4:
        return r4;

        catch com.hp.hpl.jena.n3.JenaURIException from label1 to label2 with label3;
    }

    protected java.lang.String resolvePName(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r1, $r3, $r7;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r3 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String myExpandPrefix(com.hp.hpl.jena.shared.PrefixMapping,java.lang.String)>($r2, r1);

        if $r3 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unresolved prefixed name: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void throwParseException(java.lang.String,int,int)>($r7, i0, i1);

     label1:
        return $r3;
    }

    private static java.lang.String myExpandPrefix(com.hp.hpl.jena.shared.PrefixMapping, java.lang.String)
    {
        int $i0;
        java.lang.String r1, $r2, $r3, $r4;
        com.hp.hpl.jena.shared.PrefixMapping r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String expandPrefix(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label2;

        return null;

     label2:
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String getNsPrefixURI(java.lang.String)>($r3);

        if $r4 == null goto label3;

        return $r2;

     label3:
        return null;

     label4:
        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createListNode()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.graph.Node createBNode()>();

        return $r1;
    }

    protected com.hp.hpl.jena.graph.Node createBNode()
    {
        com.hp.hpl.jena.n3.turtle.LabelToNodeMap $r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.LabelToNodeMap bNodeLabels>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.n3.turtle.LabelToNodeMap: com.hp.hpl.jena.graph.Node allocNode()>();

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createBNode(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.LabelToNodeMap $r2;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int i0, i1;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: com.hp.hpl.jena.n3.turtle.LabelToNodeMap bNodeLabels>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.n3.turtle.LabelToNodeMap: com.hp.hpl.jena.graph.Node asNode(java.lang.String)>(r1);

        return $r3;
    }

    protected com.hp.hpl.jena.graph.Node createVariable(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r2;
        int i0, i1;
        java.lang.String $r0, r3;
        com.hp.hpl.jena.graph.Node $r1;

        r2 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createVariable(java.lang.String)>($r0);

        return $r1;
    }

    protected com.hp.hpl.jena.graph.Node createNode(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r2, $r6;
        com.hp.hpl.jena.rdf.model.AnonId $r5;
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int $i0;
        java.lang.String r1, $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: boolean isBNodeIRI(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = "_:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r5.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r5);

        return $r6;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r1);

        return $r2;
    }

    protected boolean isBNodeIRI(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.n3.turtle.ParserBase: boolean skolomizedBNodes>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("_:");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected void throwParseException(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r0;
        com.hp.hpl.jena.n3.turtle.ParserBase r3;
        int i0, i1;
        java.lang.String r1, $r2;

        r3 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r2 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>(r1, i0, i1);

        specialinvoke $r0.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    protected java.lang.String fixupPrefix(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r0;
        int $i0, $i1, i2, i3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label1:
        return r1;
    }

    public static java.lang.String unescapeStr(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String unescape(java.lang.String,char,boolean,int,int)>(r0, 92, 0, 1, 1);

        return $r1;
    }

    protected java.lang.String unescapeStr(java.lang.String, int, int)
    {
        com.hp.hpl.jena.n3.turtle.ParserBase r2;
        int i0, i1;
        java.lang.String r0, $r1;

        r2 := @this: com.hp.hpl.jena.n3.turtle.ParserBase;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String unescape(java.lang.String,char,boolean,int,int)>(r0, 92, 0, i0, i1);

        return $r1;
    }

    private static java.lang.String unescape(java.lang.String, char, boolean, int, int)
    {
        boolean z0;
        java.lang.StringBuilder $r6, $r7, $r20;
        java.lang.StringBuffer $r16;
        int $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, i15, i16, i17, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        java.lang.String r0, $r2, $r3, $r8, $r9, $r11, $r13, $r15;
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r17, $r18, $r19, $r21;
        char c0, $c3, $c6, $c10, $c14, c18;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        z0 := @parameter2: boolean;

        i15 := @parameter3: int;

        i16 := @parameter4: int;

        $i19 = (int) c0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i19);

        i17 = $i1;

        $i21 = (int) -1;

        if $i1 != $i21 goto label01;

        return r0;

     label01:
        $r16 = new java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label02:
        if i17 >= $i2 goto label24;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i17);

        $i22 = (int) $c3;

        lookupswitch($i22)
        {
            case 10: goto label03;
            case 13: goto label03;
            default: goto label04;
        };

     label03:
        i15 = i15 + 1;

        i16 = 1;

        goto label05;

     label04:
        i16 = i16 + 1;

     label05:
        $i23 = (int) $c3;

        $i24 = (int) c0;

        if $i23 == $i24 goto label06;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label23;

     label06:
        $i4 = $i2 - 1;

        if i17 < $i4 goto label07;

        $r17 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r15 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>("Illegal escape at end of string", i15, i16);

        specialinvoke $r17.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label07:
        $i5 = i17 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        i16 = i16 + 1;

        i17 = i17 + 1;

        $i25 = (int) $c6;

        if $i25 != 117 goto label09;

        $i11 = i17 + 4;

        if $i11 < $i2 goto label08;

        $r18 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r13 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>("\\u escape too short", i15, i16);

        specialinvoke $r18.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r13);

        throw $r18;

     label08:
        $i12 = i17 + 1;

        $i13 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: int hex(java.lang.String,int,int,int,int)>(r0, $i12, 4, i15, i16);

        $c14 = (char) $i13;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14);

        i17 = i17 + 4;

        i16 = i16 + 4;

        goto label23;

     label09:
        $i26 = (int) $c6;

        if $i26 != 85 goto label11;

        $i7 = i17 + 8;

        if $i7 < $i2 goto label10;

        $r19 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r11 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>("\\U escape too short", i15, i16);

        specialinvoke $r19.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r11);

        throw $r19;

     label10:
        $i8 = i17 + 1;

        $i9 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: int hex(java.lang.String,int,int,int,int)>(r0, $i8, 8, i15, i16);

        $c10 = (char) $i9;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        i17 = i17 + 8;

        i16 = i16 + 8;

        goto label23;

     label11:
        if z0 == 0 goto label12;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        i17 = i17 + 1;

        goto label23;

     label12:
        $i27 = (int) $c6;

        lookupswitch($i27)
        {
            case 34: goto label19;
            case 39: goto label18;
            case 92: goto label20;
            case 98: goto label16;
            case 102: goto label17;
            case 110: goto label13;
            case 114: goto label15;
            case 116: goto label14;
            default: goto label21;
        };

     label13:
        c18 = 10;

        goto label22;

     label14:
        c18 = 9;

        goto label22;

     label15:
        c18 = 13;

        goto label22;

     label16:
        c18 = 8;

        goto label22;

     label17:
        c18 = 12;

        goto label22;

     label18:
        c18 = 39;

        goto label22;

     label19:
        c18 = 34;

        goto label22;

     label20:
        c18 = 92;

        goto label22;

     label21:
        $r21 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown escape: \\");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>($r8, i15, i16);

        specialinvoke $r21.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r9);

        throw $r21;

     label22:
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c18);

     label23:
        i17 = i17 + 1;

        goto label02;

     label24:
        $r3 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static int hex(java.lang.String, int, int, int, int)
    {
        byte b8;
        int i0, i1, $i2, i4, i5, i6, i7, $i9, $i10;
        java.lang.String r0, $r5, $r6;
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r8;
        char $c3;
        java.lang.StringBuilder $r3, $r4, $r7;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        i6 = 0;

        i7 = i0;

     label01:
        $i2 = i0 + i1;

        if i7 >= $i2 goto label20;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        i5 = i5 + 1;

        $i10 = (int) $c3;

        tableswitch($i10)
        {
            case 48: goto label02;
            case 49: goto label03;
            case 50: goto label04;
            case 51: goto label05;
            case 52: goto label06;
            case 53: goto label07;
            case 54: goto label08;
            case 55: goto label09;
            case 56: goto label10;
            case 57: goto label11;
            case 58: goto label18;
            case 59: goto label18;
            case 60: goto label18;
            case 61: goto label18;
            case 62: goto label18;
            case 63: goto label18;
            case 64: goto label18;
            case 65: goto label12;
            case 66: goto label13;
            case 67: goto label14;
            case 68: goto label15;
            case 69: goto label16;
            case 70: goto label17;
            case 71: goto label18;
            case 72: goto label18;
            case 73: goto label18;
            case 74: goto label18;
            case 75: goto label18;
            case 76: goto label18;
            case 77: goto label18;
            case 78: goto label18;
            case 79: goto label18;
            case 80: goto label18;
            case 81: goto label18;
            case 82: goto label18;
            case 83: goto label18;
            case 84: goto label18;
            case 85: goto label18;
            case 86: goto label18;
            case 87: goto label18;
            case 88: goto label18;
            case 89: goto label18;
            case 90: goto label18;
            case 91: goto label18;
            case 92: goto label18;
            case 93: goto label18;
            case 94: goto label18;
            case 95: goto label18;
            case 96: goto label18;
            case 97: goto label12;
            case 98: goto label13;
            case 99: goto label14;
            case 100: goto label15;
            case 101: goto label16;
            case 102: goto label17;
            default: goto label18;
        };

     label02:
        b8 = 0;

        goto label19;

     label03:
        b8 = 1;

        goto label19;

     label04:
        b8 = 2;

        goto label19;

     label05:
        b8 = 3;

        goto label19;

     label06:
        b8 = 4;

        goto label19;

     label07:
        b8 = 5;

        goto label19;

     label08:
        b8 = 6;

        goto label19;

     label09:
        b8 = 7;

        goto label19;

     label10:
        b8 = 8;

        goto label19;

     label11:
        b8 = 9;

        goto label19;

     label12:
        b8 = 10;

        goto label19;

     label13:
        b8 = 11;

        goto label19;

     label14:
        b8 = 12;

        goto label19;

     label15:
        b8 = 13;

        goto label19;

     label16:
        b8 = 14;

        goto label19;

     label17:
        b8 = 15;

        goto label19;

     label18:
        $r8 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hex escape: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String exMsg(java.lang.String,int,int)>($r5, i4, i5);

        specialinvoke $r8.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label19:
        $i9 = i6 << 4;

        i6 = $i9 + b8;

        i7 = i7 + 1;

        goto label01;

     label20:
        return i6;
    }

    protected static java.lang.String exMsg(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7;
        java.lang.String r6, $r8;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.n3.turtle.ParserBase: java.lang.String bNodeLabelStart> = "_:";

        return;
    }
}
