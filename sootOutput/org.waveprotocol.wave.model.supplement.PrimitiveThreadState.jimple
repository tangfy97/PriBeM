public final class org.waveprotocol.wave.model.supplement.PrimitiveThreadState extends org.waveprotocol.wave.model.util.Pair implements java.lang.Comparable
{

    private void <init>(org.waveprotocol.wave.model.supplement.ThreadState, java.lang.Integer)
    {
        java.lang.Integer r2;
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState r0;
        org.waveprotocol.wave.model.supplement.ThreadState r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ThreadState;

        r2 := @parameter1: java.lang.Integer;

        specialinvoke r0.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public static org.waveprotocol.wave.model.supplement.PrimitiveThreadState of(org.waveprotocol.wave.model.supplement.ThreadState, java.lang.Integer)
    {
        java.lang.Integer r2;
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState $r0;
        org.waveprotocol.wave.model.supplement.ThreadState r1;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ThreadState;

        r2 := @parameter1: java.lang.Integer;

        $r0 = new org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: void <init>(org.waveprotocol.wave.model.supplement.ThreadState,java.lang.Integer)>(r1, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.supplement.PrimitiveThreadState expanded(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState $r0;
        int i0;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.supplement.ThreadState $r1;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        $r1 = <org.waveprotocol.wave.model.supplement.ThreadState: org.waveprotocol.wave.model.supplement.ThreadState EXPANDED>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: void <init>(org.waveprotocol.wave.model.supplement.ThreadState,java.lang.Integer)>($r1, $r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.supplement.PrimitiveThreadState collapsed(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState $r0;
        int i0;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.supplement.ThreadState $r1;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        $r1 = <org.waveprotocol.wave.model.supplement.ThreadState: org.waveprotocol.wave.model.supplement.ThreadState COLLAPSED>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: void <init>(org.waveprotocol.wave.model.supplement.ThreadState,java.lang.Integer)>($r1, $r2);

        return $r0;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getState()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState r0;
        org.waveprotocol.wave.model.supplement.ThreadState $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: java.lang.Object getFirst()>();

        $r2 = (org.waveprotocol.wave.model.supplement.ThreadState) $r1;

        return $r2;
    }

    public java.lang.Integer getVersion()
    {
        java.lang.Object $r1;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: java.lang.Object getSecond()>();

        $r2 = (java.lang.Integer) $r1;

        return $r2;
    }

    public int compareTo(org.waveprotocol.wave.model.supplement.PrimitiveThreadState)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState r0, r2;
        int $i0, $i2;
        java.lang.Integer $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        r2 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: java.lang.Integer getVersion()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: java.lang.Integer getVersion()>();

        if $r1 != null goto label1;

        if $r3 != null goto label1;

        return 0;

     label1:
        if $r1 != null goto label2;

        return 1;

     label2:
        if $r3 != null goto label3;

        $i2 = (int) -1;

        return $i2;

     label3:
        $i0 = virtualinvoke $r1.<java.lang.Integer: int compareTo(java.lang.Integer)>($r3);

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveThreadState r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveThreadState;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.PrimitiveThreadState) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveThreadState: int compareTo(org.waveprotocol.wave.model.supplement.PrimitiveThreadState)>($r2);

        return $i0;
    }
}
