class org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer;

    private void <init>()
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer> = $r1;

        return;
    }

    public final org.waveprotocol.wave.model.document.operation.DocOp build()
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        $r3 = (org.waveprotocol.wave.model.document.operation.DocOp) $r2;

        return $r3;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder retain(int)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;
        int i0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Negative item count");

        if i0 <= 0 goto label3;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

     label3:
        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder characters(java.lang.String)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r1;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;
        int $i0;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void characters(java.lang.String)>(r0);

     label1:
        return r1;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder elementEnd()
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementEnd()>();

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r1;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;
        int $i0;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteCharacters(java.lang.String)>(r0);

     label1:
        return r1;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder deleteElementEnd()
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementEnd()>();

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3;
        org.waveprotocol.wave.model.document.operation.Attributes r1, r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r2 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r1);

        return r0;
    }

    public final org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder setAnnotation(int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r3, $r12;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r9, $r10;
        int i0;
        java.lang.String r4, r5, r6;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r8, $r14;
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder $r2, $r7, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Negative item count");

        if i0 <= 0 goto label3;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder builder()>();

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = r4;

        $r3[1] = r5;

        $r3[2] = r6;

        $r7 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder updateValues(java.lang.String[])>($r3);

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl build()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r8);

        $r9 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        $r10 = r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor buffer>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder builder()>();

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = r4;

        $r13 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder initializationEnd(java.lang.String[])>($r12);

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl build()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r14);

     label3:
        return r0;
    }

    void <init>(org.waveprotocol.wave.model.testing.DocOpCreator$1)
    {
        org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder r0;
        org.waveprotocol.wave.model.testing.DocOpCreator$1 r1;

        r0 := @this: org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.DocOpCreator$1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.DocOpCreator$SimplifyingDocOpBuilder: void <init>()>();

        return;
    }
}
