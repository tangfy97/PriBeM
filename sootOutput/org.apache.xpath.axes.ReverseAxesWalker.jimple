public class org.apache.xpath.axes.ReverseAxesWalker extends org.apache.xpath.axes.AxesWalker
{
    protected org.apache.xml.dtm.DTMAxisIterator m_iterator;

    void <init>(org.apache.xpath.axes.LocPathIterator, int)
    {
        int i0;
        org.apache.xpath.axes.ReverseAxesWalker r0;
        org.apache.xpath.axes.LocPathIterator r1;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r1, i0);

        return;
    }

    public void setRoot(int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        org.apache.xml.dtm.DTMAxisIterator $r2, $r3;
        int i0, $i1;
        org.apache.xml.dtm.DTM $r1;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void setRoot(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i1 = r0.<org.apache.xpath.axes.AxesWalker: int m_axis>;

        $r2 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)>($i1);

        r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r2;

        $r3 = r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        interfaceinvoke $r3.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator setStartNode(int)>(i0);

        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator> = null;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void detach()>();

        return;
    }

    protected int getNextNode()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        int $i0, $i2, $i4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 == 0 goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: int next()>();

        $z1 = r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh>;

        if $z1 == 0 goto label2;

        r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh> = 0;

     label2:
        $i4 = (int) -1;

        if $i4 != $i0 goto label3;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 1;

     label3:
        return $i0;
    }

    public boolean isReverseAxes()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        return 1;
    }

    protected int getProximityPosition(int)
    {
        java.lang.Throwable $r8;
        org.apache.xpath.axes.WalkingIterator $r2, $r5, $r7, $r9, $r11;
        java.lang.CloneNotSupportedException $r10;
        int[] $r1, $r6;
        int i0, $i1, $i2, i3, $i5, $i7;
        org.apache.xpath.axes.ReverseAxesWalker r0, r12;
        org.apache.xpath.axes.AxesWalker $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        if i0 >= 0 goto label01;

        $i5 = (int) -1;

        return $i5;

     label01:
        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        i3 = $r1[i0];

        if i3 > 0 goto label11;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r3 = virtualinvoke $r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

     label02:
        $r4 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r12 = (org.apache.xpath.axes.ReverseAxesWalker) $r4;

        $i1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: int getRoot()>();

        virtualinvoke r12.<org.apache.xpath.axes.ReverseAxesWalker: void setRoot(int)>($i1);

        virtualinvoke r12.<org.apache.xpath.axes.PredicatedNodeTest: void setPredicateCount(int)>(i0);

        virtualinvoke r12.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(null);

        virtualinvoke r12.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

        $r5 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r5.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r12);

        i3 = i3 + 1;

        goto label04;

     label03:
        i3 = i3 + 1;

     label04:
        $i2 = virtualinvoke r12.<org.apache.xpath.axes.AxesWalker: int nextNode()>();

        $i7 = (int) -1;

        if $i7 != $i2 goto label03;

        $r6 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $r6[i0] = i3;

     label05:
        goto label12;

     label06:
        goto label11;

     label07:
        $r10 := @caughtexception;

        goto label13;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        goto label14;

     label10:
        throw $r8;

     label11:
        return i3;

     label12:
        $r7 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r7.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r3);

        goto label06;

     label13:
        $r11 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r11.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r3);

        goto label08;

     label14:
        $r9 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r9.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r3);

        goto label10;

        catch java.lang.CloneNotSupportedException from label02 to label05 with label07;
        catch java.lang.Throwable from label02 to label09 with label09;
    }

    protected void countProximityPosition(int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i2 = $r2[i0];

        $i3 = $i2 - 1;

        $r2[i0] = $i3;

     label1:
        return;
    }

    public int getLastPos(org.apache.xpath.XPathContext)
    {
        java.lang.Throwable $r6;
        org.apache.xpath.axes.WalkingIterator $r1, $r4, $r5, $r7, $r9;
        java.lang.CloneNotSupportedException $r8;
        org.apache.xpath.XPathContext r10;
        int $i0, $i1, $i2, $i3, i4, $i6;
        org.apache.xpath.axes.ReverseAxesWalker r0, r11;
        org.apache.xpath.axes.AxesWalker $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r10 := @parameter0: org.apache.xpath.XPathContext;

        i4 = 0;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

     label01:
        $r3 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r11 = (org.apache.xpath.axes.ReverseAxesWalker) $r3;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: int getRoot()>();

        virtualinvoke r11.<org.apache.xpath.axes.ReverseAxesWalker: void setRoot(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getPredicateCount()>();

        $i2 = $i1 - 1;

        virtualinvoke r11.<org.apache.xpath.axes.PredicatedNodeTest: void setPredicateCount(int)>($i2);

        virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(null);

        virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

        $r4 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r4.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r11);

        goto label03;

     label02:
        i4 = i4 + 1;

     label03:
        $i3 = virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: int nextNode()>();

        $i6 = (int) -1;

        if $i6 != $i3 goto label02;

     label04:
        goto label11;

     label05:
        goto label10;

     label06:
        $r8 := @caughtexception;

        goto label12;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        goto label13;

     label09:
        throw $r6;

     label10:
        return i4;

     label11:
        $r5 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r5.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r2);

        goto label05;

     label12:
        $r9 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r9.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r2);

        goto label07;

     label13:
        $r7 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r7.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r2);

        goto label09;

        catch java.lang.CloneNotSupportedException from label01 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label08;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        return 0;
    }
}
