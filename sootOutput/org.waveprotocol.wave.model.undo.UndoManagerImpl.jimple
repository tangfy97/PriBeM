public final class org.waveprotocol.wave.model.undo.UndoManagerImpl extends java.lang.Object implements org.waveprotocol.wave.model.undo.UndoManagerPlus
{
    private final org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms algorithms;
    private final org.waveprotocol.wave.model.undo.UndoStack undoStack;
    private final org.waveprotocol.wave.model.undo.UndoStack redoStack;
    private final org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer;

    public void <init>(org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms)
    {
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer $r1;
        org.waveprotocol.wave.model.undo.UndoStack $r3, $r4;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms r2;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        specialinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void <init>(org.waveprotocol.wave.model.undo.UndoManagerImpl$1)>(null);

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer> = $r1;

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms algorithms> = r2;

        $r3 = new org.waveprotocol.wave.model.undo.UndoStack;

        specialinvoke $r3.<org.waveprotocol.wave.model.undo.UndoStack: void <init>(org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms)>(r2);

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack> = $r3;

        $r4 = new org.waveprotocol.wave.model.undo.UndoStack;

        specialinvoke $r4.<org.waveprotocol.wave.model.undo.UndoStack: void <init>(org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms)>(r2);

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack redoStack> = $r4;

        return;
    }

    public void undoableOp(java.lang.Object)
    {
        org.waveprotocol.wave.model.undo.UndoStack $r2, $r4;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer $r3;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.undo.UndoStack: void push(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void increment()>();

        $r4 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack redoStack>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.undo.UndoStack: void clear()>();

        return;
    }

    public void nonUndoableOp(java.lang.Object)
    {
        org.waveprotocol.wave.model.undo.UndoStack $r2, $r3;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.undo.UndoStack: void nonUndoableOperation(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack redoStack>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.undo.UndoStack: void nonUndoableOperation(java.lang.Object)>(r1);

        return;
    }

    public void checkpoint()
    {
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer $r1;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void checkpoint()>();

        return;
    }

    public java.lang.Object undo()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        org.waveprotocol.wave.model.util.Pair $r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.util.Pair undoPlus()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

     label2:
        return $r2;
    }

    public java.lang.Object redo()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        org.waveprotocol.wave.model.util.Pair $r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.util.Pair redoPlus()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.util.Pair undoPlus()
    {
        org.waveprotocol.wave.model.undo.UndoStack $r3, $r8, $r11;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms $r6;
        java.util.ArrayList $r2;
        int $i0, $i1, i2;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        org.waveprotocol.wave.model.util.Pair $r4, $r9, $r12;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer $r1;
        java.lang.Object $r5, $r7, $r10, $r13;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int releaseCheckpoint()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label2:
        $i1 = $i0 - 1;

        if i2 >= $i1 goto label3;

        $r11 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.undo.UndoStack: org.waveprotocol.wave.model.util.Pair pop()>();

        $r13 = $r12.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r13);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.undo.UndoStack: org.waveprotocol.wave.model.util.Pair pop()>();

        $r5 = $r4.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms algorithms>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Algorithms: java.lang.Object compose(java.util.List)>($r2);

        $r8 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack redoStack>;

        virtualinvoke $r8.<org.waveprotocol.wave.model.undo.UndoStack: void push(java.lang.Object)>($r7);

        $r9 = new org.waveprotocol.wave.model.util.Pair;

        $r10 = $r4.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        specialinvoke $r9.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r7, $r10);

        return $r9;
    }

    public org.waveprotocol.wave.model.util.Pair redoPlus()
    {
        org.waveprotocol.wave.model.undo.UndoStack $r1, $r5;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer $r3, $r6;
        org.waveprotocol.wave.model.undo.UndoManagerImpl r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.Pair $r2;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack redoStack>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.undo.UndoStack: org.waveprotocol.wave.model.util.Pair pop()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void checkpoint()>();

        $r5 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoStack undoStack>;

        $r4 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.undo.UndoStack: void push(java.lang.Object)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer checkpointer>;

        virtualinvoke $r6.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void increment()>();

     label1:
        return $r2;
    }
}
