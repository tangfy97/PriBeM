public abstract class org.apache.commons.collections.DefaultMapBag extends java.lang.Object implements org.apache.commons.collections.Bag
{
    private java.util.Map _map;
    private int _total;
    private int _mods;

    public void <init>()
    {
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map> = null;

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = 0;

        r0.<org.apache.commons.collections.DefaultMapBag: int _mods> = 0;

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections.DefaultMapBag r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map> = null;

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = 0;

        r0.<org.apache.commons.collections.DefaultMapBag: int _mods> = 0;

        virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: void setMap(java.util.Map)>(r1);

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.collections.DefaultMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: boolean add(java.lang.Object,int)>(r1, 1);

        return $z0;
    }

    public boolean add(java.lang.Object, int)
    {
        java.lang.Integer $r2;
        org.apache.commons.collections.DefaultMapBag r0;
        java.util.Map $r3;
        int $i0, $i1, i2, $i3, i4, $i5, $i6;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        $i0 = r0.<org.apache.commons.collections.DefaultMapBag: int _mods>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.DefaultMapBag: int _mods> = $i1;

        if i2 <= 0 goto label3;

        $i3 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>(r1);

        i4 = i2 + $i3;

        $r3 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i4);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        $i5 = r0.<org.apache.commons.collections.DefaultMapBag: int _total>;

        $i6 = $i5 + i2;

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = $i6;

        if i4 != i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.commons.collections.DefaultMapBag r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, $z3;

        r2 := @this: org.apache.commons.collections.DefaultMapBag;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.commons.collections.DefaultMapBag: boolean add(java.lang.Object)>($r3);

        if z2 != 0 goto label2;

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z2 = $z3;

        goto label1;

     label5:
        return z2;
    }

    public void clear()
    {
        java.util.Map $r1;
        int $i0, $i1;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $i0 = r0.<org.apache.commons.collections.DefaultMapBag: int _mods>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.DefaultMapBag: int _mods> = $i1;

        $r1 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = 0;

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        org.apache.commons.collections.DefaultMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.commons.collections.HashBag $r1;
        java.util.Collection r2;
        org.apache.commons.collections.DefaultMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r2 := @parameter0: java.util.Collection;

        $r1 = new org.apache.commons.collections.HashBag;

        specialinvoke $r1.<org.apache.commons.collections.HashBag: void <init>(java.util.Collection)>(r2);

        $z0 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: boolean containsAll(org.apache.commons.collections.Bag)>($r1);

        return $z0;
    }

    public boolean containsAll(org.apache.commons.collections.Bag)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.apache.commons.collections.Bag r0;
        org.apache.commons.collections.DefaultMapBag r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0, z1, $z2, $z3;

        r4 := @this: org.apache.commons.collections.DefaultMapBag;

        r0 := @parameter0: org.apache.commons.collections.Bag;

        z1 = 1;

        $r1 = interfaceinvoke r0.<org.apache.commons.collections.Bag: java.util.Set uniqueSet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r4.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>($r3);

        $i1 = interfaceinvoke r0.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r3);

        if $i0 < $i1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if z1 == 0 goto label4;

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

        goto label1;

     label6:
        return z1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.apache.commons.collections.Bag r2;
        org.apache.commons.collections.DefaultMapBag r1;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0, $r6;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.collections.DefaultMapBag;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections.Bag;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.collections.Bag) r0;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections.Bag: int size()>();

        $i1 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r3 = r1.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r6);

        $i3 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>($r6);

        if $i2 == $i3 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.commons.collections.DefaultMapBag r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections.DefaultMapBag r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        org.apache.commons.collections.DefaultMapBag$BagIterator $r0;
        org.apache.commons.collections.DefaultMapBag r1;

        r1 := @this: org.apache.commons.collections.DefaultMapBag;

        $r0 = new org.apache.commons.collections.DefaultMapBag$BagIterator;

        $r2 = specialinvoke r1.<org.apache.commons.collections.DefaultMapBag: java.util.List extractList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r0.<org.apache.commons.collections.DefaultMapBag$BagIterator: void <init>(org.apache.commons.collections.DefaultMapBag,java.util.Iterator)>(r1, $r3);

        return $r0;
    }

    public boolean remove(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.commons.collections.DefaultMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: boolean remove(java.lang.Object,int)>(r1, $i0);

        return $z0;
    }

    public boolean remove(java.lang.Object, int)
    {
        java.lang.Integer $r4;
        java.util.Map $r2, $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0, $z1;
        org.apache.commons.collections.DefaultMapBag r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        i3 := @parameter1: int;

        $i0 = r0.<org.apache.commons.collections.DefaultMapBag: int _mods>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.DefaultMapBag: int _mods> = $i1;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>(r1);

        if i3 > 0 goto label1;

        z0 = 0;

        goto label5;

     label1:
        if $i2 <= i3 goto label2;

        $r5 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r4 = new java.lang.Integer;

        $i6 = $i2 - i3;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i6);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        z0 = 1;

        $i7 = r0.<org.apache.commons.collections.DefaultMapBag: int _total>;

        $i8 = $i7 - i3;

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = $i8;

        goto label5;

     label2:
        $r2 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        $i4 = r0.<org.apache.commons.collections.DefaultMapBag: int _total>;

        $i5 = $i4 - $i2;

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = $i5;

     label5:
        return z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.commons.collections.DefaultMapBag r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, $z3;

        r2 := @this: org.apache.commons.collections.DefaultMapBag;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        if r0 == null goto label5;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.commons.collections.DefaultMapBag: boolean remove(java.lang.Object,int)>($r3, 1);

        if z2 != 0 goto label2;

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z2 = $z3;

        goto label1;

     label5:
        return z2;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.commons.collections.HashBag $r1;
        java.util.Collection r2;
        org.apache.commons.collections.DefaultMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r2 := @parameter0: java.util.Collection;

        $r1 = new org.apache.commons.collections.HashBag;

        specialinvoke $r1.<org.apache.commons.collections.HashBag: void <init>(java.util.Collection)>(r2);

        $z0 = virtualinvoke r0.<org.apache.commons.collections.DefaultMapBag: boolean retainAll(org.apache.commons.collections.Bag)>($r1);

        return $z0;
    }

    public boolean retainAll(org.apache.commons.collections.Bag)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.Bag r5;
        org.apache.commons.collections.DefaultMapBag r1;
        org.apache.commons.collections.HashBag $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        boolean $z0, $z1, z2;

        r1 := @this: org.apache.commons.collections.DefaultMapBag;

        r5 := @parameter0: org.apache.commons.collections.Bag;

        z2 = 0;

        $r0 = new org.apache.commons.collections.HashBag;

        specialinvoke $r0.<org.apache.commons.collections.HashBag: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: java.util.Set uniqueSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>($r4);

        $i1 = interfaceinvoke r5.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r4);

        if 1 > $i1 goto label2;

        if $i1 > $i0 goto label2;

        $i2 = $i0 - $i1;

        interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean add(java.lang.Object,int)>($r4, $i2);

        goto label3;

     label2:
        interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean add(java.lang.Object,int)>($r4, $i0);

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        z2 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: boolean removeAll(java.util.Collection)>($r0);

     label5:
        return z2;
    }

    public java.lang.Object[] toArray()
    {
        java.util.List $r1;
        java.lang.Object[] $r2;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DefaultMapBag: java.util.List extractList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r2, $r3;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r2 := @parameter0: java.lang.Object[];

        $r1 = specialinvoke r0.<org.apache.commons.collections.DefaultMapBag: java.util.List extractList()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return $r3;
    }

    public int getCount(java.lang.Object)
    {
        java.util.Map $r2;
        int i0;
        java.lang.Object r1;
        java.lang.Integer $r3;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        r1 := @parameter0: java.lang.Object;

        i0 = 0;

        $r2 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r3 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>($r2, r1);

        if $r3 == null goto label1;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public java.util.Set uniqueSet()
    {
        java.util.Map $r1;
        java.util.Set $r2, $r3;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <org.apache.commons.collections.set.UnmodifiableSet: java.util.Set decorate(java.util.Set)>($r2);

        return $r3;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $i0 = r0.<org.apache.commons.collections.DefaultMapBag: int _total>;

        return $i0;
    }

    protected int calcTotalSize()
    {
        java.util.List $r1;
        int $i0, $i1;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DefaultMapBag: java.util.List extractList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r0.<org.apache.commons.collections.DefaultMapBag: int _total> = $i0;

        $i1 = r0.<org.apache.commons.collections.DefaultMapBag: int _total>;

        return $i1;
    }

    protected void setMap(java.util.Map)
    {
        java.util.Map r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        org.apache.commons.collections.DefaultMapBag r2;

        r2 := @this: org.apache.commons.collections.DefaultMapBag;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The map must be non-null and empty");

        throw $r1;

     label2:
        r2.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map> = r0;

        return;
    }

    protected java.util.Map getMap()
    {
        org.apache.commons.collections.DefaultMapBag r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $r1 = r0.<org.apache.commons.collections.DefaultMapBag: java.util.Map _map>;

        return $r1;
    }

    private java.util.List extractList()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.DefaultMapBag r1;
        java.util.ArrayList $r5;
        int i0, $i2;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.DefaultMapBag;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: java.util.Set uniqueSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>($r4);

     label2:
        if i0 <= 0 goto label3;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i2 = (int) -1;

        i0 = i0 + $i2;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r5;
    }

    private int modCount()
    {
        int $i0;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @this: org.apache.commons.collections.DefaultMapBag;

        $i0 = r0.<org.apache.commons.collections.DefaultMapBag: int _mods>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.DefaultMapBag r1;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.collections.DefaultMapBag;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r2 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: java.util.Set uniqueSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r1.<org.apache.commons.collections.DefaultMapBag: int getCount(java.lang.Object)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label2:
        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static int access$000(org.apache.commons.collections.DefaultMapBag)
    {
        int $i0;
        org.apache.commons.collections.DefaultMapBag r0;

        r0 := @parameter0: org.apache.commons.collections.DefaultMapBag;

        $i0 = specialinvoke r0.<org.apache.commons.collections.DefaultMapBag: int modCount()>();

        return $i0;
    }
}
