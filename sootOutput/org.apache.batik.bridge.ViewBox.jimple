public abstract class org.apache.batik.bridge.ViewBox extends java.lang.Object implements org.apache.batik.util.SVGConstants, org.apache.batik.bridge.ErrorConstants
{

    protected void <init>()
    {
        org.apache.batik.bridge.ViewBox r0;

        r0 := @this: org.apache.batik.bridge.ViewBox;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.geom.AffineTransform getViewTransform(java.lang.String, org.w3c.dom.Element, float, float, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.ViewBox$ViewHandler $r4, $r10;
        org.w3c.dom.Document $r16;
        org.apache.batik.parser.FragmentIdentifierParser $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        org.apache.batik.bridge.BridgeException $r14, $r19;
        org.apache.batik.bridge.BridgeContext r2;
        java.awt.geom.AffineTransform $r3, $r11, $r12;
        float f0, f1;
        org.apache.batik.parser.ParseException $r18;
        java.lang.Object[] $r15, $r20;
        float[] r22;
        org.apache.batik.parser.PreserveAspectRatioParser $r9;
        short s1;
        int $i0;
        java.lang.String r0, $r6, $r7, $r8, $r13, $r17;
        org.w3c.dom.Element r1, r21;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.w3c.dom.Element;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r2 := @parameter4: org.apache.batik.bridge.BridgeContext;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r3 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float,float,org.apache.batik.bridge.BridgeContext)>(r1, f0, f1, r2);

        return $r3;

     label02:
        $r4 = new org.apache.batik.bridge.ViewBox$ViewHandler;

        specialinvoke $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: void <init>()>();

        $r5 = new org.apache.batik.parser.FragmentIdentifierParser;

        specialinvoke $r5.<org.apache.batik.parser.FragmentIdentifierParser: void <init>()>();

        virtualinvoke $r5.<org.apache.batik.parser.FragmentIdentifierParser: void setFragmentIdentifierHandler(org.apache.batik.parser.FragmentIdentifierHandler)>($r4);

        virtualinvoke $r5.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r0);

        r21 = r1;

        $z0 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean hasId>;

        if $z0 == 0 goto label03;

        $r16 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r17 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: java.lang.String id>;

        r21 = interfaceinvoke $r16.<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>($r17);

     label03:
        if r21 != null goto label04;

        $r14 = new org.apache.batik.bridge.BridgeException;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r0;

        specialinvoke $r14.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r1, "uri.malformed", $r15);

        throw $r14;

     label04:
        $r6 = interfaceinvoke r21.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/svg");

        if $z1 == 0 goto label05;

        $r13 = interfaceinvoke r21.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("view");

        if $z4 != 0 goto label06;

     label05:
        r21 = staticinvoke <org.apache.batik.bridge.ViewBox: org.w3c.dom.Element getClosestAncestorSVGElement(org.w3c.dom.Element)>(r1);

     label06:
        $z5 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean hasViewBox>;

        if $z5 == 0 goto label07;

        r22 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: float[] viewBox>;

        goto label08;

     label07:
        $r7 = interfaceinvoke r21.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "viewBox");

        r22 = staticinvoke <org.apache.batik.bridge.ViewBox: float[] parseViewBoxAttribute(org.w3c.dom.Element,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r21, $r7, r2);

     label08:
        $z2 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean hasPreserveAspectRatio>;

        if $z2 == 0 goto label09;

        s1 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: short align>;

        z6 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean meet>;

        goto label14;

     label09:
        $r8 = interfaceinvoke r21.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "preserveAspectRatio");

        $r9 = new org.apache.batik.parser.PreserveAspectRatioParser;

        specialinvoke $r9.<org.apache.batik.parser.PreserveAspectRatioParser: void <init>()>();

        $r10 = new org.apache.batik.bridge.ViewBox$ViewHandler;

        specialinvoke $r10.<org.apache.batik.bridge.ViewBox$ViewHandler: void <init>()>();

        virtualinvoke $r9.<org.apache.batik.parser.PreserveAspectRatioParser: void setPreserveAspectRatioHandler(org.apache.batik.parser.PreserveAspectRatioHandler)>($r10);

     label10:
        virtualinvoke $r9.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>($r8);

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        $r19 = new org.apache.batik.bridge.BridgeException;

        $r20 = newarray (java.lang.Object)[3];

        $r20[0] = "preserveAspectRatio";

        $r20[1] = $r8;

        $r20[2] = $r18;

        specialinvoke $r19.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r2, r21, $r18, "attribute.malformed", $r20);

        throw $r19;

     label13:
        s1 = $r10.<org.apache.batik.bridge.ViewBox$ViewHandler: short align>;

        z6 = $r10.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean meet>;

     label14:
        $r11 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(float[],short,boolean,float,float)>(r22, s1, z6, f0, f1);

        $z3 = $r4.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean hasTransform>;

        if $z3 == 0 goto label15;

        $r12 = virtualinvoke $r4.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform getAffineTransform()>();

        virtualinvoke $r11.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r12);

     label15:
        return $r11;

        catch org.apache.batik.parser.ParseException from label10 to label11 with label12;
    }

    private static org.w3c.dom.Element getClosestAncestorSVGElement(org.w3c.dom.Element)
    {
        short $s0;
        org.w3c.dom.Element r0, r1;
        org.w3c.dom.Node r4;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 = r0;

        goto label3;

     label1:
        r1 = (org.w3c.dom.Element) r4;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/svg");

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("svg");

        if $z1 == 0 goto label2;

        return r1;

     label2:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label3:
        if r4 == null goto label4;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label1;

     label4:
        return null;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, float, float)
    {
        org.w3c.dom.Element r0;
        float f0, f1;
        java.awt.geom.AffineTransform $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float,float,org.apache.batik.bridge.BridgeContext)>(r0, f0, f1, null);

        return $r1;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, float, float, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r0;
        float f0, f1;
        org.apache.batik.bridge.BridgeContext r3;
        java.lang.String $r1, $r2;
        java.awt.geom.AffineTransform $r4;

        r0 := @parameter0: org.w3c.dom.Element;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r3 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "viewBox");

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "preserveAspectRatio");

        $r4 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,float,float,org.apache.batik.bridge.BridgeContext)>(r0, $r1, $r2, f0, f1, r3);

        return $r4;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, java.lang.String, java.lang.String, float, float, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r11;
        float[] $r3;
        org.apache.batik.bridge.ViewBox$ViewHandler $r5;
        org.apache.batik.parser.PreserveAspectRatioParser $r4;
        short $s1;
        int $i0;
        java.lang.String r0, r6;
        boolean $z0;
        org.apache.batik.bridge.BridgeException $r10;
        org.apache.batik.bridge.BridgeContext r2;
        java.awt.geom.AffineTransform $r7, $r8;
        org.w3c.dom.Element r1;
        float f0, f1;
        org.apache.batik.parser.ParseException $r9;

        r1 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: org.apache.batik.bridge.BridgeContext;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r8 = new java.awt.geom.AffineTransform;

        specialinvoke $r8.<java.awt.geom.AffineTransform: void <init>()>();

        return $r8;

     label1:
        $r3 = staticinvoke <org.apache.batik.bridge.ViewBox: float[] parseViewBoxAttribute(org.w3c.dom.Element,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, r0, r2);

        $r4 = new org.apache.batik.parser.PreserveAspectRatioParser;

        specialinvoke $r4.<org.apache.batik.parser.PreserveAspectRatioParser: void <init>()>();

        $r5 = new org.apache.batik.bridge.ViewBox$ViewHandler;

        specialinvoke $r5.<org.apache.batik.bridge.ViewBox$ViewHandler: void <init>()>();

        virtualinvoke $r4.<org.apache.batik.parser.PreserveAspectRatioParser: void setPreserveAspectRatioHandler(org.apache.batik.parser.PreserveAspectRatioHandler)>($r5);

     label2:
        virtualinvoke $r4.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r6);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.batik.bridge.BridgeException;

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = "preserveAspectRatio";

        $r11[1] = r6;

        $r11[2] = $r9;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r2, r1, $r9, "attribute.malformed", $r11);

        throw $r10;

     label5:
        $s1 = $r5.<org.apache.batik.bridge.ViewBox$ViewHandler: short align>;

        $z0 = $r5.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean meet>;

        $r7 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(float[],short,boolean,float,float)>($r3, $s1, $z0, f0, f1);

        return $r7;

        catch org.apache.batik.parser.ParseException from label2 to label3 with label4;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, float[], float, float, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r9;
        org.apache.batik.bridge.BridgeException $r7;
        float[] r4;
        org.apache.batik.bridge.BridgeContext r8;
        org.apache.batik.bridge.ViewBox$ViewHandler $r3;
        java.awt.geom.AffineTransform $r5;
        org.apache.batik.parser.PreserveAspectRatioParser $r2;
        short $s0;
        org.w3c.dom.Element r0;
        float f0, f1;
        java.lang.String $r1;
        boolean $z0;
        org.apache.batik.parser.ParseException $r6;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: float[];

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r8 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "preserveAspectRatio");

        $r2 = new org.apache.batik.parser.PreserveAspectRatioParser;

        specialinvoke $r2.<org.apache.batik.parser.PreserveAspectRatioParser: void <init>()>();

        $r3 = new org.apache.batik.bridge.ViewBox$ViewHandler;

        specialinvoke $r3.<org.apache.batik.bridge.ViewBox$ViewHandler: void <init>()>();

        virtualinvoke $r2.<org.apache.batik.parser.PreserveAspectRatioParser: void setPreserveAspectRatioHandler(org.apache.batik.parser.PreserveAspectRatioHandler)>($r3);

     label1:
        virtualinvoke $r2.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>($r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = "preserveAspectRatio";

        $r9[1] = $r1;

        $r9[2] = $r6;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r8, r0, $r6, "attribute.malformed", $r9);

        throw $r7;

     label4:
        $s0 = $r3.<org.apache.batik.bridge.ViewBox$ViewHandler: short align>;

        $z0 = $r3.<org.apache.batik.bridge.ViewBox$ViewHandler: boolean meet>;

        $r5 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(float[],short,boolean,float,float)>(r4, $s0, $z0, f0, f1);

        return $r5;

        catch org.apache.batik.parser.ParseException from label1 to label2 with label3;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, float[], float, float, org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.dom.svg.LiveAttributeException $r4;
        org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio r0;
        org.apache.batik.bridge.BridgeException $r5;
        float[] r2;
        org.apache.batik.bridge.BridgeContext r6;
        java.awt.geom.AffineTransform $r3;
        short $s0, $s1;
        org.w3c.dom.Element r7;
        float f0, f1;
        org.w3c.dom.svg.SVGPreserveAspectRatio $r1;
        boolean $z0;

        r7 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: float[];

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r0 := @parameter4: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio;

        r6 := @parameter5: org.apache.batik.bridge.BridgeContext;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio: org.w3c.dom.svg.SVGPreserveAspectRatio getAnimVal()>();

        $s0 = interfaceinvoke $r1.<org.w3c.dom.svg.SVGPreserveAspectRatio: short getAlign()>();

        $s1 = interfaceinvoke $r1.<org.w3c.dom.svg.SVGPreserveAspectRatio: short getMeetOrSlice()>();

        if $s1 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(float[],short,boolean,float,float)>(r2, $s0, $z0, f0, f1);

        return $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r6, $r4);

        throw $r5;

        catch org.apache.batik.dom.svg.LiveAttributeException from label1 to label4 with label4;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element, org.w3c.dom.svg.SVGAnimatedRect, org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio, float, float, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.svg.SVGAnimatedRect r0;
        org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio r5;
        float[] $r3;
        org.w3c.dom.svg.SVGRect $r2;
        boolean $z0;
        org.apache.batik.bridge.BridgeContext r6;
        java.awt.geom.AffineTransform $r7, $r8;
        org.w3c.dom.Element r4;
        float $f0, $f1, $f2, $f3, f4, f5;
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r1;

        r4 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.w3c.dom.svg.SVGAnimatedRect;

        r5 := @parameter2: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio;

        f4 := @parameter3: float;

        f5 := @parameter4: float;

        r6 := @parameter5: org.apache.batik.bridge.BridgeContext;

        $r1 = (org.apache.batik.dom.svg.SVGOMAnimatedRect) r0;

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean isSpecified()>();

        if $z0 != 0 goto label1;

        $r8 = new java.awt.geom.AffineTransform;

        specialinvoke $r8.<java.awt.geom.AffineTransform: void <init>()>();

        return $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.svg.SVGAnimatedRect: org.w3c.dom.svg.SVGRect getAnimVal()>();

        $r3 = newarray (float)[4];

        $f0 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGRect: float getX()>();

        $r3[0] = $f0;

        $f1 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGRect: float getY()>();

        $r3[1] = $f1;

        $f2 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        $r3[2] = $f2;

        $f3 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGRect: float getHeight()>();

        $r3[3] = $f3;

        $r7 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float[],float,float,org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio,org.apache.batik.bridge.BridgeContext)>(r4, $r3, f4, f5, r5, r6);

        return $r7;
    }

    public static float[] parseViewBoxAttribute(org.w3c.dom.Element, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6, $r8, $r12;
        float[] r1;
        byte $b1, $b2, $b3, $b4;
        java.util.StringTokenizer $r13;
        int $i0, i5, $i6, $i7;
        java.lang.String r0, $r9;
        boolean $z0;
        org.apache.batik.bridge.BridgeException $r14, $r15, $r16;
        org.apache.batik.bridge.BridgeContext r4;
        java.lang.NumberFormatException $r10;
        org.w3c.dom.Element r5;
        float $f0, $f1, $f2, $f3, $f4;

        r5 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        i5 = 0;

        r1 = newarray (float)[4];

        $r13 = new java.util.StringTokenizer;

        specialinvoke $r13.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, " ,");

     label02:
        goto label04;

     label03:
        $r9 = virtualinvoke $r13.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f4 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r9);

        r1[i5] = $f4;

        i5 = i5 + 1;

     label04:
        if i5 >= 4 goto label05;

        $z0 = virtualinvoke $r13.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label03;

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        $r14 = new org.apache.batik.bridge.BridgeException;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = "viewBox";

        $r12[1] = r0;

        $r12[2] = $r10;

        specialinvoke $r14.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r4, r5, $r10, "attribute.malformed", $r12);

        throw $r14;

     label07:
        if i5 == 4 goto label08;

        $r15 = new org.apache.batik.bridge.BridgeException;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "viewBox";

        $r8[1] = r0;

        specialinvoke $r15.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r4, r5, "attribute.malformed", $r8);

        throw $r15;

     label08:
        $f0 = r1[2];

        $b1 = $f0 cmpg 0.0F;

        $i6 = (int) $b1;

        if $i6 < 0 goto label09;

        $f1 = r1[3];

        $b2 = $f1 cmpg 0.0F;

        $i7 = (int) $b2;

        if $i7 >= 0 goto label10;

     label09:
        $r16 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "viewBox";

        $r6[1] = r0;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r4, r5, "attribute.malformed", $r6);

        throw $r16;

     label10:
        $f2 = r1[2];

        $b3 = $f2 cmpl 0.0F;

        if $b3 == 0 goto label11;

        $f3 = r1[3];

        $b4 = $f3 cmpl 0.0F;

        if $b4 != 0 goto label12;

     label11:
        return null;

     label12:
        return r1;

        catch java.lang.NumberFormatException from label02 to label05 with label06;
    }

    public static java.awt.geom.AffineTransform getPreserveAspectRatioTransform(float[], short, boolean, float, float)
    {
        byte $b1, $b2;
        java.awt.geom.AffineTransform $r3, $r4;
        float[] r0;
        short s0;
        boolean z0;
        float $f0, $f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67;
        int $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        r0 := @parameter0: float[];

        s0 := @parameter1: short;

        z0 := @parameter2: boolean;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        if r0 != null goto label01;

        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>()>();

        return $r3;

     label01:
        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        $f1 = r0[2];

        $f0 = r0[3];

        f2 = $f1 / $f0;

        f5 = f3 / f4;

        if s0 != 1 goto label02;

        $f60 = r0[2];

        $f61 = f3 / $f60;

        $d17 = (double) $f61;

        $f62 = r0[3];

        $f63 = f4 / $f62;

        $d16 = (double) $f63;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void scale(double,double)>($d17, $d16);

        $f64 = r0[0];

        $f65 = neg $f64;

        $d19 = (double) $f65;

        $f66 = r0[1];

        $f67 = neg $f66;

        $d18 = (double) $f67;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d19, $d18);

        goto label13;

     label02:
        $b1 = f2 cmpg f5;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label03;

        if z0 != 0 goto label04;

     label03:
        $b2 = f2 cmpl f5;

        $i4 = (int) $b2;

        if $i4 < 0 goto label09;

        if z0 != 0 goto label09;

     label04:
        $f33 = r0[3];

        $f59 = f4 / $f33;

        $d9 = (double) $f59;

        $d8 = (double) $f59;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void scale(double,double)>($d9, $d8);

        $i5 = (int) s0;

        tableswitch($i5)
        {
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label05;
            case 9: goto label06;
            default: goto label07;
        };

     label05:
        $f45 = r0[0];

        $f46 = neg $f45;

        $d13 = (double) $f46;

        $f47 = r0[1];

        $f48 = neg $f47;

        $d12 = (double) $f48;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d13, $d12);

        goto label08;

     label06:
        $f34 = r0[0];

        $f41 = neg $f34;

        $f38 = r0[2];

        $f35 = r0[3];

        $f36 = f3 * $f35;

        $f37 = $f36 / f4;

        $f39 = $f38 - $f37;

        $f40 = $f39 / 2.0F;

        $f42 = $f41 - $f40;

        $d11 = (double) $f42;

        $f43 = r0[1];

        $f44 = neg $f43;

        $d10 = (double) $f44;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d11, $d10);

        goto label08;

     label07:
        $f49 = r0[0];

        $f55 = neg $f49;

        $f53 = r0[2];

        $f50 = r0[3];

        $f51 = f3 * $f50;

        $f52 = $f51 / f4;

        $f54 = $f53 - $f52;

        $f56 = $f55 - $f54;

        $d15 = (double) $f56;

        $f57 = r0[1];

        $f58 = neg $f57;

        $d14 = (double) $f58;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d15, $d14);

     label08:
        goto label13;

     label09:
        $f6 = r0[2];

        $f32 = f3 / $f6;

        $d1 = (double) $f32;

        $d0 = (double) $f32;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void scale(double,double)>($d1, $d0);

        $i6 = (int) s0;

        tableswitch($i6)
        {
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            default: goto label12;
        };

     label10:
        $f18 = r0[0];

        $f19 = neg $f18;

        $d5 = (double) $f19;

        $f20 = r0[1];

        $f21 = neg $f20;

        $d4 = (double) $f21;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d5, $d4);

        goto label13;

     label11:
        $f7 = r0[0];

        $f8 = neg $f7;

        $d3 = (double) $f8;

        $f9 = r0[1];

        $f16 = neg $f9;

        $f13 = r0[3];

        $f10 = r0[2];

        $f11 = f4 * $f10;

        $f12 = $f11 / f3;

        $f14 = $f13 - $f12;

        $f15 = $f14 / 2.0F;

        $f17 = $f16 - $f15;

        $d2 = (double) $f17;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d3, $d2);

        goto label13;

     label12:
        $f22 = r0[0];

        $f23 = neg $f22;

        $d7 = (double) $f23;

        $f24 = r0[1];

        $f30 = neg $f24;

        $f28 = r0[3];

        $f25 = r0[2];

        $f26 = f4 * $f25;

        $f27 = $f26 / f3;

        $f29 = $f28 - $f27;

        $f31 = $f30 - $f29;

        $d6 = (double) $f31;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d7, $d6);

     label13:
        return $r4;
    }
}
