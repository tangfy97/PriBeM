public abstract class com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker extends com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker
{
    private static final java.lang.String HEADER_FORMAT;
    private final com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR;
    protected static final java.lang.String GXP_OUT_VAR;
    protected static final java.lang.String GXP_CONTEXT_VAR;
    protected static final java.lang.String GXP_SIG;
    protected com.google.gxp.com.google.common.base.Function parameterToCallName;

    protected void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink)
    {
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Appendable r1;
        java.lang.String[] $r3;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$1 $r4;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$3 $r5;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r0;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke r0.<com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,java.lang.String[])>(r1, r2, $r3);

        $r4 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$1;

        specialinvoke $r4.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$1: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker)>(r0);

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR> = $r4;

        $r5 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$3;

        specialinvoke $r5.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$3: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker)>(r0);

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.com.google.common.base.Function parameterToCallName> = $r5;

        return;
    }

    protected void appendHeader(com.google.gxp.compiler.base.Root)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r3;
        java.lang.Object[] $r5;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r0;
        com.google.gxp.compiler.base.Root r1;
        java.lang.String $r4, $r6, $r7;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r1 := @parameter0: com.google.gxp.compiler.base.Root;

        specialinvoke r0.<com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker: void appendHeader(com.google.gxp.compiler.base.Root)>(r1);

        $r2 = interfaceinvoke r1.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r3 = interfaceinvoke r1.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.alerts.SourcePosition: java.lang.String getSourceName()>();

        if $r2 != null goto label1;

        $r7 = "";

        goto label2;

     label1:
        $r7 = virtualinvoke $r2.<com.google.gxp.compiler.base.TemplateName: java.lang.String getPackageName()>();

     label2:
        $r6 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String HEADER_FORMAT>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r5[1] = $r7;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(null, $r6, $r5);

        return;
    }

    protected void appendImports(com.google.gxp.compiler.base.Root)
    {
        com.google.gxp.compiler.base.Import r17;
        com.google.gxp.compiler.schema.Schema $r1;
        java.lang.String $r15, r16;
        boolean $z0, $z1;
        com.google.gxp.compiler.alerts.SourcePosition $r10;
        com.google.gxp.compiler.base.ImportVisitor $r8;
        java.util.Iterator $r3, $r5;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r7;
        java.util.List $r2, $r4;
        com.google.gxp.compiler.base.Root r0;
        java.lang.Object $r6, $r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;

        r7 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.Root;

        $r1 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.schema.Schema: java.util.List getJavaImports()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r9;

        $r10 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("import ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r10, $r15);

        goto label1;

     label2:
        $r4 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: java.util.List getImports()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.google.gxp.compiler.base.Import) $r6;

        $r8 = r7.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR>;

        virtualinvoke r17.<com.google.gxp.compiler.base.Import: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ImportVisitor)>($r8);

        goto label3;

     label4:
        return;
    }

    protected void appendAnnotations(java.lang.Iterable)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r5;
        java.util.Iterator $r1;
        java.lang.Iterable r0;
        com.google.gxp.compiler.base.JavaAnnotation r3;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r4;
        com.google.gxp.compiler.alerts.AlertSink $r6;
        java.lang.Object $r2;
        java.lang.String $r7;
        boolean $z0;

        r4 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.gxp.compiler.base.JavaAnnotation) $r2;

        $r5 = virtualinvoke r3.<com.google.gxp.compiler.base.JavaAnnotation: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r6 = r4.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        $r7 = staticinvoke <com.google.gxp.compiler.java.JavaUtil: java.lang.String validateAnnotation(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.JavaAnnotation)>($r6, r3);

        virtualinvoke r4.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r5, $r7);

        goto label1;

     label2:
        return;
    }

    protected static void appendJavaThrowsDeclaration(java.lang.StringBuilder, java.lang.Iterable)
    {
        com.google.gxp.compiler.base.ThrowsDeclaration r5;
        java.util.Iterator $r3;
        java.lang.Iterable r2;
        java.lang.StringBuilder r0;
        java.lang.Object $r4;
        java.lang.String $r6;
        java.util.LinkedHashSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.Iterable;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    throws ");

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("java.io.IOException");

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gxp.compiler.base.ThrowsDeclaration) $r4;

        $r6 = virtualinvoke r5.<com.google.gxp.compiler.base.ThrowsDeclaration: java.lang.String getExceptionType()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r0, ", ", $r1);

        return;
    }

    protected java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String $r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r1;

        r1 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String getBaseName()>();

     label2:
        return $r2;
    }

    protected java.lang.String toJavaType(com.google.gxp.compiler.base.Type)
    {
        java.lang.Object $r3;
        com.google.gxp.compiler.base.Type r0;
        java.lang.String $r4;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$2 $r1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r2;

        r2 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.Type;

        $r1 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$2;

        specialinvoke $r1.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker$2: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker)>(r2);

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Type: java.lang.Object acceptTypeVisitor(com.google.gxp.compiler.base.TypeVisitor)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected java.util.List toBoundedTypeDecls(boolean, java.lang.Iterable)
    {
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        com.google.gxp.compiler.alerts.AlertSink $r8;
        java.lang.String $r5, $r10, $r12, $r16;
        com.google.gxp.compiler.base.NativeType $r6, $r9;
        boolean $z0, z1;
        java.util.Iterator $r2;
        com.google.gxp.compiler.base.FormalTypeParameter r4;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r7;
        java.lang.Object $r3;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;

        r7 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        z1 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Iterable;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.gxp.compiler.base.FormalTypeParameter) $r3;

        if z1 == 0 goto label2;

        $r6 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: com.google.gxp.compiler.base.NativeType getExtendsType()>();

        if $r6 != null goto label3;

     label2:
        $r5 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label4;

     label3:
        $r8 = r7.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        $r9 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: com.google.gxp.compiler.base.NativeType getExtendsType()>();

        $r10 = staticinvoke <com.google.gxp.compiler.java.JavaUtil: java.lang.String validateConjunctiveType(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeType)>($r8, $r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    protected void appendJavaFormalTypeParameters(java.lang.StringBuilder, boolean, java.util.List)
    {
        java.util.List r0, $r3;
        java.lang.StringBuilder r1;
        boolean $z0, z1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r2;

        r2 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r1 := @parameter0: java.lang.StringBuilder;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = virtualinvoke r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.util.List toBoundedTypeDecls(boolean,java.lang.Iterable)>(z1, r0);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r1, ", ", $r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label1:
        return;
    }

    protected static java.lang.String loadFormat(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$400(java.lang.String)>($r4);

        return $r5;
    }

    static void access$100(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        java.lang.String r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r0;

        r0 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static void access$200(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        java.lang.String r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r0;

        r0 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$300(com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker)
    {
        com.google.gxp.compiler.alerts.AlertSink $r1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker r0;

        r0 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r2;
        java.lang.Object[] $r1;

        <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String GXP_CONTEXT_VAR> = "gxp_context";

        <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String GXP_OUT_VAR> = "gxp$out";

        $r0 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String loadFormat(java.lang.String)>("header");

        <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String HEADER_FORMAT> = $r0;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "final com.google.gxp.base.GxpContext gxp_context";

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Object,java.lang.Object[])>(", ", "final java.lang.Appendable gxp$out", $r1);

        <com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: java.lang.String GXP_SIG> = $r2;

        return;
    }
}
