public class org.apache.pdfbox.pdmodel.font.PDType1Font extends org.apache.pdfbox.pdmodel.font.PDSimpleFont
{
    private static final org.apache.commons.logging.Log log;
    private org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ROMAN;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ITALIC;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD_ITALIC;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_OBLIQUE;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD_OBLIQUE;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font COURIER;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_OBLIQUE;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD_OBLIQUE;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font SYMBOL;
    public static final org.apache.pdfbox.pdmodel.font.PDType1Font ZAPF_DINGBATS;
    private static final java.util.Map STANDARD_14;
    private java.awt.Font awtFont;

    public void <init>()
    {
        org.apache.pdfbox.cos.COSName $r1, $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = null;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE1>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, $r1);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r3;
        java.io.IOException $r7;
        org.apache.pdfbox.pdmodel.common.PDStream $r4;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r2;
        org.apache.pdfbox.cos.COSDictionary r1, $r6;
        java.lang.StringBuilder $r8, $r10, $r12;
        org.apache.commons.logging.Log $r9;
        java.lang.String $r11, $r13;
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r5;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = null;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r2 == null goto label4;

        $z0 = $r2 instanceof org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        if $z0 == 0 goto label4;

        $r3 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r2;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile3()>();

        if $r4 == null goto label4;

     label1:
        $r5 = new org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSDictionary font>;

        specialinvoke $r5.<org.apache.pdfbox.pdmodel.font.PDType1CFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>($r6);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont> = $r5;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read the embedded type1C font ");

        $r11 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r13);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(java.lang.String)
    {
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.encoding.WinAnsiEncoding $r2;
        java.lang.String r1;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setBaseFont(java.lang.String)>(r1);

        $r2 = new org.apache.pdfbox.encoding.WinAnsiEncoding;

        specialinvoke $r2.<org.apache.pdfbox.encoding.WinAnsiEncoding: void <init>()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>($r2);

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIN_ANSI_ENCODING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setEncoding(org.apache.pdfbox.cos.COSBase)>($r3);

        return;
    }

    public static org.apache.pdfbox.pdmodel.font.PDType1Font getStandardFont(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        org.apache.pdfbox.pdmodel.font.PDType1Font $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.pdfbox.pdmodel.font.PDType1Font) $r2;

        return $r3;
    }

    public static java.lang.String[] getStandard14Names()
    {
        java.lang.Object[] $r3;
        java.util.Map $r0;
        java.util.Set $r1;
        java.lang.String[] $r2, $r4, $r5;

        $r0 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = newarray (java.lang.String)[14];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        boolean $z0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r21;
        java.awt.Font $r1, $r5, $r6, $r7, $r11, $r24, $r32, $r35, $r37, $r45, $r46, $r47;
        java.lang.StringBuilder $r8, $r10, $r13, $r14, $r16, $r18, $r19, $r25, $r27, $r29, $r39, $r41, $r43;
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r2, $r36;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r4;
        java.awt.FontFormatException $r38;
        java.lang.String $r3, $r12, $r15, $r20, $r23, $r28, $r30, $r31, $r42, $r44;
        org.apache.pdfbox.pdmodel.common.PDStream $r22, $r33;
        org.apache.commons.logging.Log $r9, $r17, $r26, $r40;
        java.io.InputStream $r34;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        if $r1 != null goto label10;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        if $r2 == null goto label01;

        $r36 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        $r37 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font getawtFont()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = $r37;

        goto label09;

     label01:
        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r4 == null goto label08;

        $z0 = $r4 instanceof org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        if $z0 == 0 goto label08;

        r21 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r4;

        $r22 = virtualinvoke r21.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile()>();

        if $r22 == null goto label05;

     label02:
        $r33 = virtualinvoke r21.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile()>();

        $r34 = virtualinvoke $r33.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        $r35 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(1, $r34);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = $r35;

     label03:
        goto label05;

     label04:
        $r38 := @caughtexception;

        $r40 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read the embedded type1 font ");

        $r42 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r40.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r44);

     label05:
        $r45 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        if $r45 != null goto label07;

        $r23 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        if $r23 == null goto label06;

        $r31 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        $r32 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>($r31);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = $r32;

     label06:
        $r24 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        if $r24 != null goto label07;

        $r26 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find the specified font ");

        $r28 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r30);

     label07:
        goto label09;

     label08:
        $r5 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>($r3);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = $r5;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        if $r6 != null goto label09;

        $r17 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find the specified basefont ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label09:
        $r46 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        if $r46 != null goto label10;

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getStandardFont()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont> = $r7;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using font ");

        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        $r12 = virtualinvoke $r11.<java.awt.Font: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r15);

     label10:
        $r47 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.awt.Font awtFont>;

        return $r47;

        catch java.awt.FontFormatException from label02 to label03 with label04;
    }

    protected void determineEncoding()
    {
        org.apache.pdfbox.encoding.Encoding $r1, r4, $r5;
        org.apache.fontbox.afm.FontMetric $r2;
        org.apache.pdfbox.encoding.AFMEncoding $r3;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void determineEncoding()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        r4 = $r1;

        if $r1 != null goto label2;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.fontbox.afm.FontMetric getAFM()>();

        if $r2 == null goto label1;

        $r3 = new org.apache.pdfbox.encoding.AFMEncoding;

        specialinvoke $r3.<org.apache.pdfbox.encoding.AFMEncoding: void <init>(org.apache.fontbox.afm.FontMetric)>($r2);

        r4 = $r3;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>(r4);

     label2:
        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r5 != null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void getEncodingFromFont(boolean)>($z0);

        return;
    }

    private void getEncodingFromFont(boolean)
    {
        org.apache.pdfbox.cos.COSFloat $r65, $r68;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        org.apache.pdfbox.encoding.EncodingManager $r26;
        java.lang.StringBuilder $r48, $r49, $r50, $r62;
        java.lang.Throwable $r38;
        java.util.StringTokenizer $r58, $r60, $r61, $r63;
        java.lang.String $r11, $r16, $r18, $r19, $r20, $r21, $r25, $r30, $r51, $r54, $r55;
        java.io.IOException $r32, $r34, $r36, $r39;
        java.lang.NumberFormatException $r41, $r43, $r45;
        org.apache.pdfbox.pdmodel.common.PDStream $r3;
        java.io.InputStreamReader $r56;
        java.io.BufferedReader r52, $r57;
        org.apache.pdfbox.encoding.Encoding $r23, $r28;
        org.apache.pdfbox.pdmodel.common.PDMatrix $r66, $r69;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r2;
        float $f0, $f1;
        org.apache.pdfbox.encoding.Type1Encoding r53, $r59;
        org.apache.pdfbox.cos.COSArray $r64, $r67;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10;
        org.apache.pdfbox.cos.COSName $r27;
        org.apache.commons.logging.Log $r8, $r22, $r33, $r35, $r37, $r40, $r42, $r44, $r47;
        java.io.InputStream $r6;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r1 == null goto label32;

        $z0 = $r1 instanceof org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        if $z0 == 0 goto label32;

        $r2 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r1;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile()>();

        if $r3 == null goto label32;

        r52 = null;

     label01:
        $r57 = new java.io.BufferedReader;

        $r56 = new java.io.InputStreamReader;

        $r6 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        specialinvoke $r56.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6);

        specialinvoke $r57.<java.io.BufferedReader: void <init>(java.io.Reader)>($r56);

        r52 = $r57;

        r53 = null;

     label02:
        $r54 = virtualinvoke $r57.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r54 == null goto label26;

        if z1 == 0 goto label10;

        $z4 = virtualinvoke $r54.<java.lang.String: boolean startsWith(java.lang.String)>("currentdict end");

        if $z4 == 0 goto label03;

        if r53 == null goto label26;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>(r53);

        goto label26;

     label03:
        $z5 = virtualinvoke $r54.<java.lang.String: boolean startsWith(java.lang.String)>("/Encoding");

        if $z5 == 0 goto label05;

        $z7 = virtualinvoke $r54.<java.lang.String: boolean contains(java.lang.CharSequence)>("array");

        if $z7 == 0 goto label04;

        $r58 = new java.util.StringTokenizer;

        specialinvoke $r58.<java.util.StringTokenizer: void <init>(java.lang.String)>($r54);

        virtualinvoke $r58.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        $r30 = virtualinvoke $r58.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r30);

        $r59 = new org.apache.pdfbox.encoding.Type1Encoding;

        specialinvoke $r59.<org.apache.pdfbox.encoding.Type1Encoding: void <init>(int)>($i7);

        r53 = $r59;

        goto label10;

     label04:
        $r23 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r23 != null goto label10;

        $r60 = new java.util.StringTokenizer;

        specialinvoke $r60.<java.util.StringTokenizer: void <init>(java.lang.String)>($r54);

        virtualinvoke $r60.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        $r25 = virtualinvoke $r60.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r26 = <org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.EncodingManager INSTANCE>;

        $r27 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r25);

        $r28 = virtualinvoke $r26.<org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.Encoding getEncoding(org.apache.pdfbox.cos.COSName)>($r27);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>($r28);

        goto label26;

     label05:
        $z6 = virtualinvoke $r54.<java.lang.String: boolean startsWith(java.lang.String)>("dup");

        if $z6 == 0 goto label10;

        $r61 = new java.util.StringTokenizer;

        $r18 = virtualinvoke $r54.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("/", " /");

        specialinvoke $r61.<java.util.StringTokenizer: void <init>(java.lang.String)>($r18);

        virtualinvoke $r61.<java.util.StringTokenizer: java.lang.Object nextElement()>();

     label06:
        $r19 = virtualinvoke $r61.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        $r20 = virtualinvoke $r61.<java.util.StringTokenizer: java.lang.String nextToken()>();

        if r53 != null goto label07;

        $r22 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unable to get character encoding. Encoding definition found without /Encoding line.");

        goto label08;

     label07:
        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", "");

        virtualinvoke r53.<org.apache.pdfbox.encoding.Type1Encoding: void addCharacterEncoding(int,java.lang.String)>($i6, $r21);

     label08:
        goto label02;

     label09:
        $r45 := @caughtexception;

        $r47 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed encoding definition ignored (line=");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r51);

        goto label02;

     label10:
        $z8 = virtualinvoke $r54.<java.lang.String: boolean startsWith(java.lang.String)>("/FontMatrix");

        if $z8 == 0 goto label02;

        $i0 = virtualinvoke $r54.<java.lang.String: int indexOf(java.lang.String)>("[");

        $i10 = (int) -1;

        if $i0 <= $i10 goto label17;

        $i2 = virtualinvoke $r54.<java.lang.String: int indexOf(java.lang.String)>("[");

        $i3 = $i2 + 1;

        $i4 = virtualinvoke $r54.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $r11 = virtualinvoke $r54.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $r63 = new java.util.StringTokenizer;

        specialinvoke $r63.<java.util.StringTokenizer: void <init>(java.lang.String)>($r11);

        $r64 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r64.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        $i5 = virtualinvoke $r63.<java.util.StringTokenizer: int countTokens()>();

        if $i5 < 6 goto label16;

     label11:
        i8 = 0;

     label12:
        if i8 >= 6 goto label13;

        $r65 = new org.apache.pdfbox.cos.COSFloat;

        $r16 = virtualinvoke $r63.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r16);

        specialinvoke $r65.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f1);

        virtualinvoke $r64.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r65);

        i8 = i8 + 1;

        goto label12;

     label13:
        goto label15;

     label14:
        $r43 := @caughtexception;

        $r44 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r44.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Can\'t read the fontmatrix from embedded font file!");

     label15:
        $r66 = new org.apache.pdfbox.pdmodel.common.PDMatrix;

        specialinvoke $r66.<org.apache.pdfbox.pdmodel.common.PDMatrix: void <init>(org.apache.pdfbox.cos.COSArray)>($r64);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = $r66;

     label16:
        goto label02;

     label17:
        $r67 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r67.<org.apache.pdfbox.cos.COSArray: void <init>()>();

     label18:
        $r55 = virtualinvoke $r57.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r55 == null goto label23;

        $z2 = virtualinvoke $r55.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z2 == 0 goto label19;

        goto label18;

     label19:
        $z3 = virtualinvoke $r55.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z3 == 0 goto label20;

        goto label23;

     label20:
        $r68 = new org.apache.pdfbox.cos.COSFloat;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r55);

        specialinvoke $r68.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f0);

        virtualinvoke $r67.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r68);

     label21:
        goto label18;

     label22:
        $r41 := @caughtexception;

        $r42 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Can\'t read the fontmatrix from embedded font file!");

        goto label18;

     label23:
        $i1 = virtualinvoke $r67.<org.apache.pdfbox.cos.COSArray: int size()>();

        if $i1 != 6 goto label24;

        $r69 = new org.apache.pdfbox.pdmodel.common.PDMatrix;

        specialinvoke $r69.<org.apache.pdfbox.pdmodel.common.PDMatrix: void <init>(org.apache.pdfbox.cos.COSArray)>($r67);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = $r69;

        goto label25;

     label24:
        $r8 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Can\'t read the fontmatrix from embedded font file, not enough values!");

     label25:
        goto label02;

     label26:
        goto label33;

     label27:
        goto label32;

     label28:
        $r39 := @caughtexception;

        $r40 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r40.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Error: Could not extract the encoding from the embedded type1 font.");

        goto label38;

     label29:
        goto label32;

     label30:
        $r38 := @caughtexception;

        goto label43;

     label31:
        throw $r38;

     label32:
        return;

     label33:
        if $r57 == null goto label37;

     label34:
        virtualinvoke $r57.<java.io.BufferedReader: void close()>();

     label35:
        goto label37;

     label36:
        $r36 := @caughtexception;

        $r37 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r37.<org.apache.commons.logging.Log: void error(java.lang.Object)>("An error occurs while closing the stream used to read the embedded type1 font.");

     label37:
        goto label27;

     label38:
        if r52 == null goto label42;

     label39:
        virtualinvoke r52.<java.io.BufferedReader: void close()>();

     label40:
        goto label42;

     label41:
        $r34 := @caughtexception;

        $r35 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void error(java.lang.Object)>("An error occurs while closing the stream used to read the embedded type1 font.");

     label42:
        goto label29;

     label43:
        if r52 == null goto label47;

     label44:
        virtualinvoke r52.<java.io.BufferedReader: void close()>();

     label45:
        goto label47;

     label46:
        $r32 := @caughtexception;

        $r33 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log>;

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void error(java.lang.Object)>("An error occurs while closing the stream used to read the embedded type1 font.");

     label47:
        goto label31;

        catch java.lang.NumberFormatException from label06 to label08 with label09;
        catch java.lang.NumberFormatException from label11 to label13 with label14;
        catch java.lang.NumberFormatException from label20 to label21 with label22;
        catch java.io.IOException from label01 to label26 with label28;
        catch java.lang.Throwable from label01 to label27 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label30 to label31 with label30;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.io.IOException from label39 to label40 with label41;
        catch java.io.IOException from label44 to label45 with label46;
    }

    public java.lang.String encode(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        org.apache.pdfbox.encoding.Encoding $r3;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        int i0, i1;
        java.lang.String $r5, $r6;
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r1, $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r3 != null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String encode(byte[],int,int)>(r2, i0, i1);

        if $r5 == null goto label1;

        return $r5;

     label1:
        $r6 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.lang.String encode(byte[],int,int)>(r2, i0, i1);

        return $r6;
    }

    public int encodeToCID(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        org.apache.pdfbox.encoding.Encoding $r3;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;
        int i0, i1, $i2, $i3;
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r1, $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r3 != null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        $i3 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDType1CFont: int encodeToCID(byte[],int,int)>(r2, i0, i1);

        return $i3;

     label1:
        $i2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: int encodeToCID(byte[],int,int)>(r2, i0, i1);

        return $i2;
    }

    public org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()
    {
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r1, $r3;
        org.apache.pdfbox.pdmodel.common.PDMatrix $r2, $r4;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()>();

        return $r4;

     label1:
        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()>();

        return $r2;
    }

    public void clear()
    {
        org.apache.pdfbox.pdmodel.font.PDType1CFont $r1, $r2;
        org.apache.pdfbox.pdmodel.font.PDType1Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void clear()>();

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont>;

        virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDType1CFont: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1CFont type1CFont> = null;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.apache.pdfbox.pdmodel.font.PDType1Font $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r39, $r40, $r43, $r44, $r47, $r48, $r51, $r52, $r55, $r56, $r59, $r60, $r63, $r64, $r67, $r68, $r71;
        java.util.Map $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r49, $r53, $r57, $r61, $r65, $r69;
        java.lang.String $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46, $r50, $r54, $r58, $r62, $r66, $r70;
        java.util.HashMap $r15;
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDType1Font;");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.commons.logging.Log log> = $r0;

        $r1 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Times-Roman");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ROMAN> = $r1;

        $r2 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Times-Bold");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD> = $r2;

        $r3 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Times-Italic");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ITALIC> = $r3;

        $r4 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r4.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Times-BoldItalic");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD_ITALIC> = $r4;

        $r5 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r5.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Helvetica");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA> = $r5;

        $r6 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r6.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Helvetica-Bold");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD> = $r6;

        $r7 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r7.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Helvetica-Oblique");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_OBLIQUE> = $r7;

        $r8 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r8.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Helvetica-BoldOblique");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD_OBLIQUE> = $r8;

        $r9 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r9.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Courier");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER> = $r9;

        $r10 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r10.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Courier-Bold");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD> = $r10;

        $r11 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r11.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Courier-Oblique");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_OBLIQUE> = $r11;

        $r12 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r12.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Courier-BoldOblique");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD_OBLIQUE> = $r12;

        $r13 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r13.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("Symbol");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font SYMBOL> = $r13;

        $r14 = new org.apache.pdfbox.pdmodel.font.PDType1Font;

        specialinvoke $r14.<org.apache.pdfbox.pdmodel.font.PDType1Font: void <init>(java.lang.String)>("ZapfDingbats");

        <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font ZAPF_DINGBATS> = $r14;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14> = $r15;

        $r17 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r16 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ROMAN>;

        $r18 = virtualinvoke $r16.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r19 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ROMAN>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r21 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r20 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD>;

        $r22 = virtualinvoke $r20.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r23 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

        $r25 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r24 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ITALIC>;

        $r26 = virtualinvoke $r24.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r27 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_ITALIC>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r29 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r28 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD_ITALIC>;

        $r30 = virtualinvoke $r28.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r31 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font TIMES_BOLD_ITALIC>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r33 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r32 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA>;

        $r34 = virtualinvoke $r32.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r35 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r35);

        $r37 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r36 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD>;

        $r38 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r39 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r41 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r40 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_OBLIQUE>;

        $r42 = virtualinvoke $r40.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r43 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_OBLIQUE>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r45 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r44 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD_OBLIQUE>;

        $r46 = virtualinvoke $r44.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r47 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font HELVETICA_BOLD_OBLIQUE>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, $r47);

        $r49 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r48 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER>;

        $r50 = virtualinvoke $r48.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r51 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER>;

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r53 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r52 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD>;

        $r54 = virtualinvoke $r52.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r55 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD>;

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r57 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r56 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_OBLIQUE>;

        $r58 = virtualinvoke $r56.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r59 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_OBLIQUE>;

        interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r61 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r60 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD_OBLIQUE>;

        $r62 = virtualinvoke $r60.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r63 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font COURIER_BOLD_OBLIQUE>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r65 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r64 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font SYMBOL>;

        $r66 = virtualinvoke $r64.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r67 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font SYMBOL>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r66, $r67);

        $r69 = <org.apache.pdfbox.pdmodel.font.PDType1Font: java.util.Map STANDARD_14>;

        $r68 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font ZAPF_DINGBATS>;

        $r70 = virtualinvoke $r68.<org.apache.pdfbox.pdmodel.font.PDType1Font: java.lang.String getBaseFont()>();

        $r71 = <org.apache.pdfbox.pdmodel.font.PDType1Font: org.apache.pdfbox.pdmodel.font.PDType1Font ZAPF_DINGBATS>;

        interfaceinvoke $r69.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r70, $r71);

        return;
    }
}
