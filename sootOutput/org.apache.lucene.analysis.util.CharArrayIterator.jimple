public abstract class org.apache.lucene.analysis.util.CharArrayIterator extends java.lang.Object implements java.text.CharacterIterator
{
    private char[] array;
    private int start;
    private int index;
    private int length;
    private int limit;
    public static final boolean HAS_BUGGY_BREAKITERATORS;

    public void <init>()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public char[] getText()
    {
        char[] $r1;
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $r1 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: char[] array>;

        return $r1;
    }

    public int getStart()
    {
        int $i0;
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        return $i0;
    }

    public int getLength()
    {
        int $i0;
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int length>;

        return $i0;
    }

    public void setText(char[], int, int)
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int i0, i1, $i2;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: char[] array> = r1;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start> = i0;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = i0;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int length> = i1;

        $i2 = i0 + i1;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit> = $i2;

        return;
    }

    public char current()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int $i0, $i1, $i2;
        char[] $r1;
        char $c3, $c4;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i1 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index>;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        if $i1 != $i0 goto label1;

        $c4 = 65535;

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: char[] array>;

        $i2 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index>;

        $c3 = $r1[$i2];

        $c4 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char jreBugWorkaround(char)>($c3);

     label2:
        return $c4;
    }

    protected abstract char jreBugWorkaround(char);

    public char first()
    {
        int $i0;
        char $c1;
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i0;

        $c1 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char current()>();

        return $c1;
    }

    public int getBeginIndex()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        return 0;
    }

    public int getEndIndex()
    {
        int $i0;
        org.apache.lucene.analysis.util.CharArrayIterator r0;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int length>;

        return $i0;
    }

    public int getIndex()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i1 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index>;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public char last()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int $i0, $i1, $i2, $i4;
        char $c3;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i1 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        if $i1 != $i0 goto label1;

        $i4 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        goto label2;

     label1:
        $i2 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        $i4 = $i2 - 1;

     label2:
        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i4;

        $c3 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char current()>();

        return $c3;
    }

    public char next()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int $i0, $i1, $i2, $i4;
        char $c3;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i1;

        $i2 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        if $i1 < $i2 goto label1;

        $i4 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int limit>;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i4;

        return 65535;

     label1:
        $c3 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char current()>();

        return $c3;
    }

    public char previous()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        int $i0, $i1, $i2, $i4;
        char $c3;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $i0 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index>;

        $i1 = $i0 - 1;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i1;

        $i2 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        if $i1 >= $i2 goto label1;

        $i4 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i4;

        return 65535;

     label1:
        $c3 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char current()>();

        return $c3;
    }

    public char setIndex(int)
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0;
        char $c5;
        java.lang.IllegalArgumentException $r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: int getBeginIndex()>();

        if i0 < $i1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: int getEndIndex()>();

        if i0 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Position: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $i3 = r0.<org.apache.lucene.analysis.util.CharArrayIterator: int start>;

        $i4 = $i3 + i0;

        r0.<org.apache.lucene.analysis.util.CharArrayIterator: int index> = $i4;

        $c5 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: char current()>();

        return $c5;
    }

    public org.apache.lucene.analysis.util.CharArrayIterator clone()
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0, $r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r4;
        java.lang.CloneNotSupportedException $r3;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.lucene.analysis.util.CharArrayIterator) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static org.apache.lucene.analysis.util.CharArrayIterator newSentenceInstance()
    {
        org.apache.lucene.analysis.util.CharArrayIterator$1 $r1;
        org.apache.lucene.analysis.util.CharArrayIterator$2 $r0;
        boolean $z0;

        $z0 = <org.apache.lucene.analysis.util.CharArrayIterator: boolean HAS_BUGGY_BREAKITERATORS>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.analysis.util.CharArrayIterator$1;

        specialinvoke $r1.<org.apache.lucene.analysis.util.CharArrayIterator$1: void <init>()>();

        return $r1;

     label1:
        $r0 = new org.apache.lucene.analysis.util.CharArrayIterator$2;

        specialinvoke $r0.<org.apache.lucene.analysis.util.CharArrayIterator$2: void <init>()>();

        return $r0;
    }

    public static org.apache.lucene.analysis.util.CharArrayIterator newWordInstance()
    {
        org.apache.lucene.analysis.util.CharArrayIterator$3 $r1;
        org.apache.lucene.analysis.util.CharArrayIterator$4 $r0;
        boolean $z0;

        $z0 = <org.apache.lucene.analysis.util.CharArrayIterator: boolean HAS_BUGGY_BREAKITERATORS>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.analysis.util.CharArrayIterator$3;

        specialinvoke $r1.<org.apache.lucene.analysis.util.CharArrayIterator$3: void <init>()>();

        return $r1;

     label1:
        $r0 = new org.apache.lucene.analysis.util.CharArrayIterator$4;

        specialinvoke $r0.<org.apache.lucene.analysis.util.CharArrayIterator$4: void <init>()>();

        return $r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.analysis.util.CharArrayIterator r0, $r1;

        r0 := @this: org.apache.lucene.analysis.util.CharArrayIterator;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.util.CharArrayIterator: org.apache.lucene.analysis.util.CharArrayIterator clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;
        java.lang.Exception $r2;
        boolean z0;

     label1:
        $r0 = <java.util.Locale: java.util.Locale US>;

        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)>($r0);

        virtualinvoke $r1.<java.text.BreakIterator: void setText(java.lang.String)>("\udb40\udc53");

        virtualinvoke $r1.<java.text.BreakIterator: int next()>();

        z0 = 0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        z0 = 1;

     label4:
        <org.apache.lucene.analysis.util.CharArrayIterator: boolean HAS_BUGGY_BREAKITERATORS> = z0;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
