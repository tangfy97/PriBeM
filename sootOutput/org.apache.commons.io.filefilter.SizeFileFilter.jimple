public class org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
    private final long size;
    private final boolean acceptLarger;

    public void <init>(long)
    {
        long l0;
        org.apache.commons.io.filefilter.SizeFileFilter r0;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, 1);

        return;
    }

    public void <init>(long, boolean)
    {
        byte $b1;
        int $i2;
        long l0;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size must be non-negative");

        throw $r2;

     label1:
        r0.<org.apache.commons.io.filefilter.SizeFileFilter: long size> = l0;

        r0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger> = z0;

        return;
    }

    public boolean accept(java.io.File)
    {
        long $l0, $l1;
        java.io.File r0;
        org.apache.commons.io.filefilter.SizeFileFilter r1;
        byte $b2;
        int $i3;
        boolean $z0, $z2, $z3, $z4;

        r1 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $l1 = r1.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z4 = 1;

        $z3 = 1;

        goto label2;

     label1:
        $z4 = 0;

        $z3 = 0;

     label2:
        $z0 = r1.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;

        if $z0 == 0 goto label4;

        if $z3 != 0 goto label3;

        $z2 = 1;

        goto label5;

     label3:
        $z2 = 0;

        goto label5;

     label4:
        $z2 = $z4;

     label5:
        return $z2;
    }

    public java.lang.String toString()
    {
        long $l0;
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r2, $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        $z0 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;

        if $z0 == 0 goto label1;

        $r9 = ">=";

        goto label2;

     label1:
        $r9 = "<";

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $l0 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
