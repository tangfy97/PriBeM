public class org.waveprotocol.wave.client.editor.content.SelectionMaintainer extends java.lang.Object
{
    private org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns;
    private final org.waveprotocol.wave.model.document.indexed.SizedObject document;
    private org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor;
    private com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet;
    private int savedSelectionAnchorOffset;
    private org.waveprotocol.wave.model.document.util.Point savedSelectionFocus;
    private com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet;
    private int savedSelectionFocusOffset;
    private boolean needToRestoreSelection;
    private org.waveprotocol.wave.model.document.util.FocusedRange savedSelection;
    private int savedSelectionDepth;

    void <init>(org.waveprotocol.wave.model.document.indexed.SizedObject)
    {
        org.waveprotocol.wave.model.document.indexed.SizedObject r1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.SizedObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.indexed.SizedObject document> = r1;

        return;
    }

    public void attachEditor(org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns)
    {
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns r1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns> = r1;

        return;
    }

    public void detachEditor()
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns> = null;

        return;
    }

    boolean isNested()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void hackForceClearDepth()
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = 0;

        return;
    }

    void startDontSaveSelection()
    {
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = $i1;

        return;
    }

    void endDontSaveSelection()
    {
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = $i1;

        return;
    }

    public void saveSelection()
    {
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns $r1, $r2;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;
        com.google.gwt.dom.client.Text $r14, $r20;
        org.waveprotocol.wave.model.document.util.FocusedRange $r9;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r3;
        org.waveprotocol.wave.model.document.util.Point $r5, $r6, $r7, $r8, $r10, $r15, $r16, $r21;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r4;
        com.google.gwt.core.client.JavaScriptObject $r13, $r19;
        java.lang.Object $r11, $r17;
        com.google.gwt.dom.client.Node $r12, $r18;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns>;

        if $r1 == null goto label3;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        if $i0 != 0 goto label3;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = 0;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        if $r3 == null goto label3;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        if $r4 == null goto label3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor> = $r5;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor>;

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r16 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor>;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r18 = (com.google.gwt.dom.client.Node) $r17;

        $r19 = virtualinvoke $r18.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r20 = (com.google.gwt.dom.client.Text) $r19;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet> = $r20;

        $r21 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor>;

        $i2 = virtualinvoke $r21.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset> = $i2;

     label1:
        $r7 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus> = $r7;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus>;

        $z1 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label2;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r14 = (com.google.gwt.dom.client.Text) $r13;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet> = $r14;

        $r15 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus>;

        $i1 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset> = $i1;

     label2:
        $r9 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = $r9;

     label3:
        $i3 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        $i4 = $i3 + 1;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = $i4;

        return;
    }

    public void restoreSelection()
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection(org.waveprotocol.wave.model.document.operation.DocOp)>(null);

        return;
    }

    public void restoreSelection(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        java.lang.Throwable $r15;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns $r1, $r7;
        org.waveprotocol.wave.common.logging.Logger $r5, $r13;
        org.waveprotocol.wave.model.document.operation.DocOp r3;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, $r9, $r10, $r11, $r14;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4, $r12;
        org.waveprotocol.wave.model.document.indexed.SizedObject $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth> = $i1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns>;

        if $r1 == null goto label10;

        $i2 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionDepth>;

        if $i2 != 0 goto label10;

     label01:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        if $r2 == null goto label07;

        $z3 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection>;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean RANGED_SELECTION_AFFECTED_BY_INTERNAL_CHANGED>;

        if $z0 == 0 goto label02;

        $r14 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        $z2 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.util.FocusedRange: boolean isCollapsed()>();

        if $z2 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        $z5 = $z3 | $z4;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = $z5;

        $z6 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection>;

        if $z6 != 0 goto label04;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean selectionChangedInappropriately()>();

        if $z1 == 0 goto label06;

     label04:
        if r3 == null goto label05;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.content.RangeHelper: org.waveprotocol.wave.model.document.util.FocusedRange applyModifier(org.waveprotocol.wave.model.document.util.FocusedRange,org.waveprotocol.wave.model.document.operation.DocOp)>($r10, r3);

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = $r11;

     label05:
        $r4 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Restoring selection");

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.indexed.SizedObject document>;

        $i3 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.indexed.SizedObject: int size()>();

        if $i3 < 4 goto label07;

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editingConcerns>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r9 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r9);

        goto label07;

     label06:
        $r12 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Not restoring selection");

     label07:
        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset> = 0;

        goto label10;

     label08:
        $r15 := @caughtexception;

     label09:
        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet> = null;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset> = 0;

        throw $r15;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private boolean selectionChangedInappropriately()
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r2;
        com.google.gwt.dom.client.Text $r12, $r14;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.util.Point $r1, $r3, $r4, $r7, $r8, $r9;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r0;
        java.lang.Object $r5, $r6, $r10, $r11, $r13, $r15;

        r2 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean selectionExists()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheClear()>();

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label3;

        $r14 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet>;

        $r15 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r14 != $r15 goto label2;

        $i2 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset>;

        $i3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i2 == $i3 goto label4;

     label2:
        return 1;

     label3:
        $r4 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionAnchor>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r5 == $r6 goto label4;

        return 1;

     label4:
        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r8 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus>;

        $z2 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z2 == 0 goto label6;

        $r12 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet>;

        $r13 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r12 != $r13 goto label5;

        $i0 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset>;

        $i1 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i0 == $i1 goto label7;

     label5:
        return 1;

     label6:
        $r9 = r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.Point savedSelectionFocus>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r11 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r10 == $r11 goto label7;

        return 1;

     label7:
        return 0;
    }

    void textNodeletAffected(com.google.gwt.dom.client.Text, int, int, org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;
        com.google.gwt.dom.client.Text r3, $r6;
        int[] $r2;
        int $i0, $i1, i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.google.gwt.core.client.JavaScriptObject $r5;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType r1;
        com.google.gwt.dom.client.Node $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r3 := @parameter0: com.google.gwt.dom.client.Text;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        r1 := @parameter3: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection>;

        if $z0 != 1 goto label01;

        return;

     label01:
        $r2 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$1: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$SelectionMaintainer$TextNodeChangeType>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label09;
            default: goto label11;
        };

     label02:
        $z4 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean OK_SELECTION_ACROSS_TEXT_NODE_DATA_CHANGES>;

        if $z4 != 0 goto label03;

        $z5 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean matchesSelectionTextNodes(com.google.gwt.dom.client.Text,int)>(r3, i2);

        if $z5 == 0 goto label03;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = 1;

        goto label04;

     label03:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void maybeUpdateNodeOffsets(com.google.gwt.dom.client.Text,int,com.google.gwt.dom.client.Text,int)>(r3, i2, r3, i4);

     label04:
        return;

     label05:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean matchesSelectionTextNodes(com.google.gwt.dom.client.Text,int)>(r3, i2);

        if $z2 == 0 goto label07;

        $z3 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean OK_SELECTION_ACROSS_TEXT_NODE_SPLITS>;

        if $z3 != 0 goto label06;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = 1;

        goto label07;

     label06:
        $r4 = virtualinvoke r3.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getNextSibling()>();

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r6 = (com.google.gwt.dom.client.Text) $r5;

        $i3 = neg i2;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void maybeUpdateNodeOffsets(com.google.gwt.dom.client.Text,int,com.google.gwt.dom.client.Text,int)>(r3, i2, $r6, $i3);

     label07:
        return;

     label08:
        return;

     label09:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean matchesSelectionTextNodes(com.google.gwt.dom.client.Text)>(r3);

        if $z1 == 0 goto label10;

        r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean needToRestoreSelection> = 1;

     label10:
        return;

     label11:
        return;
    }

    private void maybeUpdateNodeOffsets(com.google.gwt.dom.client.Text, int, com.google.gwt.dom.client.Text, int)
    {
        com.google.gwt.dom.client.Text r0, $r2, r3, $r4;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;

        r1 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        i0 := @parameter1: int;

        r3 := @parameter2: com.google.gwt.dom.client.Text;

        i2 := @parameter3: int;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet>;

        if r0 != $r2 goto label1;

        $i5 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset>;

        if $i5 <= i0 goto label1;

        $i6 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset>;

        $i7 = $i6 + i2;

        r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset> = $i7;

        r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet> = r3;

     label1:
        $r4 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet>;

        if r0 != $r4 goto label2;

        $i1 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset>;

        if $i1 <= i0 goto label2;

        $i3 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset>;

        $i4 = $i3 + i2;

        r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset> = $i4;

        r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet> = r3;

     label2:
        return;
    }

    private boolean matchesSelectionTextNodes(com.google.gwt.dom.client.Text)
    {
        com.google.gwt.dom.client.Text r0, $r2, $r3;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet>;

        if r0 == $r2 goto label1;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet>;

        if r0 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean matchesSelectionTextNodes(com.google.gwt.dom.client.Text, int)
    {
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer r0;
        com.google.gwt.dom.client.Text r3, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1, $r2;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        r3 := @parameter0: com.google.gwt.dom.client.Text;

        i0 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedRange: boolean isOrdered()>();

        if $z0 == 0 goto label5;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet>;

        if r3 != $r6 goto label4;

        $i2 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionAnchorOffset>;

        if $i2 <= i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r7 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet>;

        if r3 != $r7 goto label9;

        return 1;

     label5:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionFocusTextNodelet>;

        if r3 != $r4 goto label8;

        $i1 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: int savedSelectionFocusOffset>;

        if $i1 <= i0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;

     label8:
        $r5 = r0.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: com.google.gwt.dom.client.Text savedSelectionAnchorTextNodelet>;

        if r3 != $r5 goto label9;

        return 1;

     label9:
        return 0;
    }
}
