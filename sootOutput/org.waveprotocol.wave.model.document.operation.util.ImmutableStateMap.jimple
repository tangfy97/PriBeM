public abstract class org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap extends java.util.AbstractMap
{
    private final java.util.List attributes;
    private final java.util.Set entrySet;
    protected static final java.util.Comparator comparator;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        java.util.List $r2;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1 $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1: void <init>(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Set entrySet> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes> = $r2;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        java.util.List $r3;
        java.util.Map r2;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1 $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1: void <init>(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Set entrySet> = $r1;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributeListFromMap(java.util.Map)>(r2);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes> = $r3;

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        java.lang.String[] r2;
        java.util.HashMap $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r12, $r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1 $r1;
        java.util.List $r4;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r2 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1: void <init>(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Set entrySet> = $r1;

        $i0 = lengthof r2;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Pairs must come in groups of two");

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        i4 = 0;

     label3:
        $i5 = lengthof r2;

        if i4 >= $i5 goto label5;

        $r5 = r2[i4];

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r5, "Null key");

        $i2 = i4 + 1;

        $r6 = r2[$i2];

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "Null value");

        $r7 = r2[i4];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate key: ");

        $r12 = r2[i4];

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r14);

     label4:
        $r9 = r2[i4];

        $i3 = i4 + 1;

        $r8 = r2[$i3];

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        i4 = i4 + 2;

        goto label3;

     label5:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributeListFromMap(java.util.Map)>($r3);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes> = $r4;

        return;
    }

    private java.util.List attributeListFromMap(java.util.Map)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r10;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r9;
        java.util.Map r1;
        int $i0;
        java.lang.Object $r5, $r7, $r8;
        java.util.Comparator $r4;
        boolean $z0;

        r9 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r7 == null goto label2;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r8 != null goto label3;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void nullPointer(java.lang.Object)>("This map does not allow null keys or values");

     label3:
        $r10 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        specialinvoke $r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.util.Map$Entry)>(r6);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label1;

     label4:
        $r4 = <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r4);

        return $r0;
    }

    protected void <init>(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        java.util.List r2;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1 $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$1: void <init>(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Set entrySet> = $r1;

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes> = r2;

        return;
    }

    public java.util.Set entrySet()
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        java.util.Set $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Set entrySet>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0, $r2;
        org.waveprotocol.wave.model.document.operation.util.UpdateMap r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.util.UpdateMap;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap,boolean)>(r1, 1);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.util.UpdateMap)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0, $r2;
        org.waveprotocol.wave.model.document.operation.util.UpdateMap r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.util.UpdateMap;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap,boolean)>(r1, 0);

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap, boolean)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r11, $r33, r34, $r35, $r36;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.operation.util.UpdateMap r4;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap $r5;
        java.util.List $r2, $r32;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r28;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate r10;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r1, $r7;
        int $i0;
        java.lang.String $r12, $r13, $r14, $r15, $r17, $r18, $r24, $r25, $r29, $r37;
        java.util.Iterator $r3, $r6;
        java.lang.Object $r8, $r9, $r16, $r30, $r31;

        r1 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.util.UpdateMap;

        z2 := @parameter1: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r31 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r33 = (org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute) $r31;

        goto label02;

     label01:
        $r33 = null;

     label02:
        r34 = $r33;

        $r5 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap) r4;

        $r32 = $r5.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r6 = interfaceinvoke $r32.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label15;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r9;

     label04:
        if r34 == null goto label13;

        $r14 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r34);

        $i0 = virtualinvoke $r14.<java.lang.String: int compareTo(java.lang.String)>($r15);

        if $i0 <= 0 goto label07;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r34);

        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r30 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute) $r30;

        goto label06;

     label05:
        $r35 = null;

     label06:
        r34 = $r35;

        goto label12;

     label07:
        if $i0 >= 0 goto label08;

        if z2 == 0 goto label13;

        $r25 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String oldValue>;

        if $r25 == null goto label13;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched old value: attempt to update unset attribute with ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r29);

        goto label13;

     label08:
        if $i0 != 0 goto label12;

        if z2 == 0 goto label09;

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$200(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r34);

        $r18 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String oldValue>;

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 != 0 goto label09;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched old value: attempt to update ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r24);

     label09:
        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r16 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r36 = (org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute) $r16;

        goto label11;

     label10:
        $r36 = null;

     label11:
        r34 = $r36;

        goto label13;

     label12:
        goto label04;

     label13:
        $r37 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String newValue>;

        if $r37 == null goto label14;

        $r11 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r13 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r12 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String newValue>;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>($r13, $r12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

     label14:
        goto label03;

     label15:
        if r34 == null goto label17;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r34);

     label16:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label16;

     label17:
        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap createFromList(java.util.List)>($r0);

        return $r7;
    }

    protected abstract org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap createFromList(java.util.List);

    public static void checkAttributesSorted(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute r3, r18;
        java.lang.AssertionError $r15, $r17;
        int $i0;
        java.lang.String $r4, $r5, $r8, $r11, $r13, $r14, $r16;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r1;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;

        r0 := @parameter0: java.util.List;

        r18 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute) $r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Null attribute");

        $z1 = <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r3);

        if $r16 != null goto label2;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$200(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r3);

        if $r14 != null goto label3;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label3:
        if r18 == null goto label4;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r18);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

        if $i0 < 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute keys not strictly monotonic: ");

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r18);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: java.lang.String access$100(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute)>(r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r13);

     label4:
        r18 = r3;

        goto label1;

     label5:
        return;
    }

    public static org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWithoutCompatibilityCheck(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap, org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0, $r2;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap,boolean)>(r1, 0);

        return $r2;
    }

    static java.util.List access$000(org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap r0;
        java.util.List $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.List attributes>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$2 $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/util/ImmutableStateMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$2: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: java.util.Comparator comparator> = $r1;

        return;
    }
}
