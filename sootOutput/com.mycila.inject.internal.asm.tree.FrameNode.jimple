public class com.mycila.inject.internal.asm.tree.FrameNode extends com.mycila.inject.internal.asm.tree.AbstractInsnNode
{
    public int type;
    public java.util.List local;
    public java.util.List stack;

    private void <init>()
    {
        int $i1;
        com.mycila.inject.internal.asm.tree.FrameNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.FrameNode;

        $i1 = (int) -1;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: void <init>(int)>($i1);

        return;
    }

    public void <init>(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.Object[] r1, $r3, r5;
        com.mycila.inject.internal.asm.tree.FrameNode r0;
        java.util.List $r2, $r4, $r6, $r7, $r8;
        int i0, i1, i2, $i4;

        r0 := @this: com.mycila.inject.internal.asm.tree.FrameNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object[];

        $i4 = (int) -1;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: void <init>(int)>($i4);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type> = i0;

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $r7 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.util.List asList(int,java.lang.Object[])>(i1, r5);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local> = $r7;

        $r8 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.util.List asList(int,java.lang.Object[])>(i2, r1);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack> = $r8;

        goto label6;

     label2:
        $r6 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.util.List asList(int,java.lang.Object[])>(i1, r5);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local> = $r6;

        goto label6;

     label3:
        $r3 = newarray (java.lang.Object)[i1];

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local> = $r4;

        goto label6;

     label4:
        goto label6;

     label5:
        $r2 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.util.List asList(int,java.lang.Object[])>(1, r1);

        r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack> = $r2;

     label6:
        return;
    }

    public int getType()
    {
        com.mycila.inject.internal.asm.tree.FrameNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.FrameNode;

        return 13;
    }

    public void accept(com.mycila.inject.internal.asm.MethodVisitor)
    {
        java.lang.Object[] $r3, $r7, $r10, $r13;
        com.mycila.inject.internal.asm.tree.FrameNode r0;
        com.mycila.inject.internal.asm.MethodVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List $r2, $r4, $r5, $r6, $r8, $r9, $r11, $r12;

        r0 := @this: com.mycila.inject.internal.asm.tree.FrameNode;

        r1 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        $i0 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        tableswitch($i0)
        {
            case -1: goto label1;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $i7 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        $r8 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $i8 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r9 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $r10 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.lang.Object[] asArray(java.util.List)>($r9);

        $r11 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        $i9 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r12 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        $r13 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.lang.Object[] asArray(java.util.List)>($r12);

        interfaceinvoke r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i7, $i8, $r10, $i9, $r13);

        goto label6;

     label2:
        $i5 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $i6 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $r7 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.lang.Object[] asArray(java.util.List)>($r6);

        interfaceinvoke r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i5, $i6, $r7, 0, null);

        goto label6;

     label3:
        $i3 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        $r4 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        interfaceinvoke r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i3, $i4, null, 0, null);

        goto label6;

     label4:
        $i2 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        interfaceinvoke r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i2, 0, null, 0, null);

        goto label6;

     label5:
        $i1 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        $r3 = staticinvoke <com.mycila.inject.internal.asm.tree.FrameNode: java.lang.Object[] asArray(java.util.List)>($r2);

        interfaceinvoke r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i1, 0, null, 1, $r3);

     label6:
        return;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode clone(java.util.Map)
    {
        com.mycila.inject.internal.asm.tree.FrameNode $r0, r1;
        java.util.ArrayList $r4, $r10;
        java.util.Map r9;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0, $z1;
        java.util.List $r2, $r3, $r5, $r6, $r8, $r11, $r12, $r14;
        java.lang.Object $r7, $r13, r15, r16;

        r1 := @this: com.mycila.inject.internal.asm.tree.FrameNode;

        r9 := @parameter0: java.util.Map;

        $r0 = new com.mycila.inject.internal.asm.tree.FrameNode;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.FrameNode: void <init>()>();

        $i0 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: int type>;

        $r0.<com.mycila.inject.internal.asm.tree.FrameNode: int type> = $i0;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        if $r2 == null goto label3;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local> = $r10;

        i3 = 0;

     label1:
        $r11 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i3 >= $i2 goto label3;

        $r12 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i3);

        r15 = $r13;

        $z1 = $r13 instanceof com.mycila.inject.internal.asm.tree.LabelNode;

        if $z1 == 0 goto label2;

        r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

     label2:
        $r14 = $r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List local>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r15);

        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        if $r3 == null goto label6;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack> = $r4;

        i4 = 0;

     label4:
        $r5 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i4 >= $i1 goto label6;

        $r6 = r1.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        r16 = $r7;

        $z0 = $r7 instanceof com.mycila.inject.internal.asm.tree.LabelNode;

        if $z0 == 0 goto label5;

        r16 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

     label5:
        $r8 = $r0.<com.mycila.inject.internal.asm.tree.FrameNode: java.util.List stack>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r16);

        i4 = i4 + 1;

        goto label4;

     label6:
        return $r0;
    }

    private static java.util.List asList(int, java.lang.Object[])
    {
        java.util.List $r1, $r2;
        java.lang.Object[] r0;
        int i0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(0, i0);

        return $r2;
    }

    private static java.lang.Object[] asArray(java.util.List)
    {
        java.lang.Object[] r1;
        java.util.List r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r3;
        int $i0, $i1, i2;
        java.lang.Object $r2, r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = $r2;

        $z0 = $r2 instanceof com.mycila.inject.internal.asm.tree.LabelNode;

        if $z0 == 0 goto label2;

        $r3 = (com.mycila.inject.internal.asm.tree.LabelNode) $r2;

        r4 = virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.LabelNode: com.mycila.inject.internal.asm.Label getLabel()>();

     label2:
        r1[i2] = r4;

        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }
}
