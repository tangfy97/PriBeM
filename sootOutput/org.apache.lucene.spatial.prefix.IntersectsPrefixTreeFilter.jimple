public class org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter extends org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter
{
    private final boolean hasIndexedLeaves;

    public void <init>(com.spatial4j.core.shape.Shape, java.lang.String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int, boolean)
    {
        com.spatial4j.core.shape.Shape r1;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r3;
        int i0, i1;
        java.lang.String r2;
        org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter r0;
        boolean z0;

        r0 := @this: org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter;

        r1 := @parameter0: com.spatial4j.core.shape.Shape;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: void <init>(com.spatial4j.core.shape.Shape,java.lang.String,org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree,int,int)>(r1, r2, r3, i0, i1);

        r0.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter: boolean hasIndexedLeaves> = z0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter r0, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z2 = r0.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter: boolean hasIndexedLeaves>;

        $r2 = (org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter) r1;

        $z1 = $r2.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter: boolean hasIndexedLeaves>;

        if $z2 != $z1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException
    {
        org.apache.lucene.search.DocIdSet $r4;
        org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter$1 $r0;
        org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter r1;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter;

        r2 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter1: org.apache.lucene.util.Bits;

        $r0 = new org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter$1;

        $z0 = r1.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter: boolean hasIndexedLeaves>;

        specialinvoke $r0.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter$1: void <init>(org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,boolean)>(r1, r2, r3, $z0);

        $r4 = virtualinvoke $r0.<org.apache.lucene.spatial.prefix.IntersectsPrefixTreeFilter$1: org.apache.lucene.search.DocIdSet getDocIdSet()>();

        return $r4;
    }
}
