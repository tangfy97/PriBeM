public class org.waveprotocol.wave.federation.xmpp.XmppManager extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler
{
    private static final java.util.logging.Logger LOG;
    private final org.waveprotocol.wave.federation.xmpp.XmppFederationHost host;
    private final org.waveprotocol.wave.federation.xmpp.XmppFederationRemote remote;
    private final org.waveprotocol.wave.federation.xmpp.XmppDisco disco;
    private final org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport;
    private final java.lang.String jid;
    private final java.util.concurrent.ConcurrentMap callbacks;
    private final java.util.concurrent.ScheduledExecutorService timeoutExecutor;

    public void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost, org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.waveprotocol.wave.federation.xmpp.XmppDisco, org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport, java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r5;
        java.util.concurrent.ConcurrentMap $r2;
        java.util.concurrent.ScheduledExecutorService $r3;
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r6;
        java.lang.String r8;
        com.google.common.collect.MapMaker $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r4 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r5 := @parameter1: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r6 := @parameter2: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r7 := @parameter3: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport;

        r8 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap callbacks> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ScheduledExecutorService timeoutExecutor> = $r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationHost host> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote remote> = r5;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppDisco disco> = r6;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport> = r7;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.lang.String jid> = r8;

        virtualinvoke r4.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)>(r0);

        virtualinvoke r5.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)>(r0);

        virtualinvoke r6.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)>(r0);

        return;
    }

    public void receivePacket(org.xmpp.packet.Packet)
    {
        org.xmpp.packet.Message r25;
        org.xmpp.packet.IQ$Type $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.logging.Logger $r1, $r20;
        org.xmpp.packet.Message$Type $r12, $r13;
        org.waveprotocol.wave.federation.xmpp.XmppManager r3;
        java.lang.StringBuilder $r4, $r6, $r10, $r19, $r21, $r22;
        java.util.logging.Level $r0;
        java.lang.String $r9, $r11, $r23;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r5;
        org.xmpp.packet.Packet r2;
        org.dom4j.Element $r7, $r14;
        org.dom4j.QName $r8;
        org.xmpp.packet.IQ r24;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r2 := @parameter0: org.xmpp.packet.Packet;

        $r1 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r0);

        if $z0 == 0 goto label01;

        $r20 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received incoming XMPP packet:\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void fine(java.lang.String)>($r23);

     label01:
        $z1 = r2 instanceof org.xmpp.packet.IQ;

        if $z1 == 0 goto label05;

        r24 = (org.xmpp.packet.IQ) r2;

        $r15 = virtualinvoke r24.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r16 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type result>;

        $z4 = virtualinvoke $r15.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r16);

        if $z4 != 0 goto label02;

        $r17 = virtualinvoke r24.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r18 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type error>;

        $z5 = virtualinvoke $r17.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r18);

        if $z5 == 0 goto label03;

     label02:
        specialinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void response(org.xmpp.packet.Packet)>(r2);

        goto label04;

     label03:
        specialinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void processIqGetSet(org.xmpp.packet.IQ)>(r24);

     label04:
        goto label10;

     label05:
        $z2 = r2 instanceof org.xmpp.packet.Message;

        if $z2 == 0 goto label09;

        r25 = (org.xmpp.packet.Message) r2;

        $r12 = virtualinvoke r25.<org.xmpp.packet.Message: org.xmpp.packet.Message$Type getType()>();

        $r13 = <org.xmpp.packet.Message$Type: org.xmpp.packet.Message$Type error>;

        $z3 = virtualinvoke $r12.<org.xmpp.packet.Message$Type: boolean equals(java.lang.Object)>($r13);

        if $z3 != 0 goto label06;

        $r14 = virtualinvoke r25.<org.xmpp.packet.Message: org.dom4j.Element getChildElement(java.lang.String,java.lang.String)>("received", "urn:xmpp:receipts");

        if $r14 == null goto label07;

     label06:
        specialinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void response(org.xmpp.packet.Packet)>(r2);

        goto label08;

     label07:
        specialinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void processMessage(org.xmpp.packet.Message)>(r25);

     label08:
        goto label10;

     label09:
        $r5 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code BAD_REQUEST>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled packet type: ");

        $r7 = virtualinvoke r2.<org.xmpp.packet.Packet: org.dom4j.Element getElement()>();

        $r8 = interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r9 = virtualinvoke $r8.<org.dom4j.QName: java.lang.String getName()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r2, $r5, $r11);

     label10:
        return;
    }

    private org.xmpp.packet.Packet createRequest(org.xmpp.packet.Packet, java.lang.String)
    {
        org.xmpp.packet.Packet r0;
        org.waveprotocol.wave.federation.xmpp.XmppManager r3;
        java.lang.String r1, $r2, $r4;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.xmpp.packet.Packet: void setTo(java.lang.String)>(r1);

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke r0.<org.xmpp.packet.Packet: void setID(java.lang.String)>($r2);

        $r4 = r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.lang.String jid>;

        virtualinvoke r0.<org.xmpp.packet.Packet: void setFrom(java.lang.String)>($r4);

        return r0;
    }

    public org.xmpp.packet.IQ createRequestIQ(java.lang.String)
    {
        org.xmpp.packet.Packet $r3;
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        java.lang.String r2;
        org.xmpp.packet.IQ $r1, $r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.xmpp.packet.IQ;

        specialinvoke $r1.<org.xmpp.packet.IQ: void <init>()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.xmpp.packet.Packet createRequest(org.xmpp.packet.Packet,java.lang.String)>($r1, r2);

        $r4 = (org.xmpp.packet.IQ) $r3;

        return $r4;
    }

    public org.xmpp.packet.Message createRequestMessage(java.lang.String)
    {
        org.xmpp.packet.Message $r1, $r4;
        org.xmpp.packet.Packet $r3;
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.xmpp.packet.Message;

        specialinvoke $r1.<org.xmpp.packet.Message: void <init>()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.xmpp.packet.Packet createRequest(org.xmpp.packet.Packet,java.lang.String)>($r1, r2);

        $r4 = (org.xmpp.packet.Message) $r3;

        return $r4;
    }

    public void send(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.xmpp.PacketCallback, int)
    {
        java.util.concurrent.ScheduledFuture $r27;
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport $r28;
        long $l1;
        org.xmpp.packet.JID $r5, $r8;
        java.util.concurrent.ConcurrentMap $r15;
        org.waveprotocol.wave.federation.xmpp.XmppManager$1 $r24;
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall $r11;
        int i0;
        java.util.concurrent.ScheduledExecutorService $r26;
        java.lang.String $r2, $r10, $r20;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r22;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r23;
        java.util.logging.Logger $r21;
        java.util.concurrent.TimeUnit $r25;
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r13;
        org.waveprotocol.wave.federation.xmpp.XmppManager r14;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r17, $r18, $r19;
        java.lang.Class $r12;
        java.lang.Object $r16;

        r14 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r1 := @parameter0: org.xmpp.packet.Packet;

        r13 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        i0 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r5 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getTo()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r8 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getFrom()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall;

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r11.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: void <init>(java.lang.Class,org.waveprotocol.wave.federation.xmpp.PacketCallback)>($r12, r13);

        $r15 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap callbacks>;

        $r16 = interfaceinvoke $r15.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $r16 != null goto label1;

        $r24 = new org.waveprotocol.wave.federation.xmpp.XmppManager$1;

        specialinvoke $r24.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager,java.lang.String,org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r14, $r10, $r11, r13);

        $r26 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ScheduledExecutorService timeoutExecutor>;

        $l1 = (long) i0;

        $r25 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r27 = interfaceinvoke $r26.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r24, $l1, $r25);

        virtualinvoke $r11.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: void start(java.util.concurrent.ScheduledFuture)>($r27);

        $r28 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport>;

        interfaceinvoke $r28.<org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport: void sendPacket(org.xmpp.packet.Packet)>(r1);

        goto label2;

     label1:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not send packet, ID already in-flight: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        virtualinvoke $r21.<java.util.logging.Logger: void warning(java.lang.String)>($r20);

        $r22 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code UNDEFINED_CONDITION>;

        $r23 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>($r22, $r20);

        interfaceinvoke r13.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r23);

     label2:
        return;
    }

    void causeImmediateTimeout(org.xmpp.packet.Packet)
    {
        org.xmpp.packet.JID $r5, $r8;
        java.util.concurrent.ConcurrentMap $r12;
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall r14;
        java.lang.String $r2, $r10;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r15;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r17;
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r16;
        org.waveprotocol.wave.federation.xmpp.XmppManager r11;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        java.lang.Object $r13;

        r11 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r1 := @parameter0: org.xmpp.packet.Packet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r5 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getTo()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r8 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getFrom()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap callbacks>;

        $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r10);

        r14 = (org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall) $r13;

        if r14 == null goto label1;

        $r16 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback>;

        $r15 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code REMOTE_SERVER_TIMEOUT>;

        $r17 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>($r15, "Forced immediate timeout");

        interfaceinvoke $r16.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r17);

     label1:
        return;
    }

    private void response(org.xmpp.packet.Packet)
    {
        java.util.concurrent.ScheduledFuture $r15;
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall r14;
        boolean $z0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r31, $r47;
        java.util.logging.Logger $r28, $r33, $r40, $r49;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r30, $r38, $r46;
        org.waveprotocol.wave.federation.xmpp.XmppManager r11;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r20, $r21, $r23, $r24, $r26, $r32, $r34, $r36, $r39, $r41, $r43, $r48, $r50, $r52;
        org.xmpp.packet.PacketError $r45;
        org.xmpp.packet.JID $r5, $r8;
        java.util.concurrent.ConcurrentMap $r12;
        java.lang.String $r2, $r10, $r27, $r35, $r37, $r42, $r44, $r51, $r53;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r29;
        org.xmpp.packet.Packet r1;
        java.lang.Object $r13;
        org.dom4j.Element $r16, $r17;
        java.lang.Class $r18, $r19, $r22, $r25;

        r11 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r1 := @parameter0: org.xmpp.packet.Packet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r5 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getFrom()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r8 = virtualinvoke r1.<org.xmpp.packet.Packet: org.xmpp.packet.JID getTo()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap callbacks>;

        $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r10);

        r14 = (org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall) $r13;

        if r14 != null goto label1;

        $r49 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received response packet without paired request: ");

        $r51 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.util.logging.Logger: void warning(java.lang.String)>($r53);

        goto label5;

     label1:
        $r15 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.util.concurrent.ScheduledFuture timeout>;

        interfaceinvoke $r15.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

        $r16 = virtualinvoke r1.<org.xmpp.packet.Packet: org.dom4j.Element getElement()>();

        $r17 = interfaceinvoke $r16.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("error");

        if $r17 == null goto label2;

        $r40 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking error callback for: ");

        $r42 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.util.logging.Logger: void fine(java.lang.String)>($r44);

        $r46 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback>;

        $r45 = new org.xmpp.packet.PacketError;

        specialinvoke $r45.<org.xmpp.packet.PacketError: void <init>(org.dom4j.Element)>($r17);

        $r47 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.FederationErrorProto$FederationError toFederationError(org.xmpp.packet.PacketError)>($r45);

        interfaceinvoke $r46.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r47);

        goto label4;

     label2:
        $r18 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.lang.Class responseType>;

        $r19 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        if $z0 == 0 goto label3;

        $r33 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking normal callback for: ");

        $r35 = virtualinvoke r1.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.util.logging.Logger: void fine(java.lang.String)>($r37);

        $r38 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback>;

        interfaceinvoke $r38.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>(r1);

        goto label4;

     label3:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received mismatched response packet type: expected ");

        $r22 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.lang.Class responseType>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", given ");

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        virtualinvoke $r28.<java.util.logging.Logger: void warning(java.lang.String)>($r27);

        $r30 = r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback>;

        $r29 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code UNDEFINED_CONDITION>;

        $r31 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>($r29, $r27);

        interfaceinvoke $r30.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r31);

     label4:
        r14.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback> = null;

     label5:
        return;
    }

    private void processIqGetSet(org.xmpp.packet.IQ)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback $r10;
        org.xmpp.packet.IQ$Type $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, z10, z11;
        org.dom4j.Namespace $r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r25;
        org.waveprotocol.wave.federation.xmpp.XmppManager r11;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost $r21, $r22, $r23, $r24;
        java.lang.String $r4, $r18, $r19, $r26;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r12, $r13, $r20;
        java.lang.IllegalArgumentException $r9;
        org.dom4j.Element $r1, $r16, $r17;
        org.dom4j.QName $r2;
        org.xmpp.packet.IQ r0;

        r11 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0 := @parameter0: org.xmpp.packet.IQ;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if $r1 != null goto label01;

        $r25 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed request, no IQ child");

        virtualinvoke r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r0, $r25);

        return;

     label01:
        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r3 = virtualinvoke $r2.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        $r4 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r5 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r6 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        $z0 = virtualinvoke $r5.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label02;

        z7 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        goto label04;

     label02:
        $r7 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r8 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        $z1 = virtualinvoke $r7.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label03;

        z7 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        z8 = 1;

        goto label04;

     label03:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only process an IQ get/set.");

        throw $r9;

     label04:
        $r10 = new org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback;

        specialinvoke $r10.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager,org.xmpp.packet.Packet)>(r11, r0);

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("http://jabber.org/protocol/pubsub");

        if $z2 == 0 goto label12;

        $r16 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if z9 == 0 goto label05;

        $r26 = "publish";

        goto label06;

     label05:
        $r26 = "items";

     label06:
        $r17 = interfaceinvoke $r16.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>($r26);

        $r18 = interfaceinvoke $r17.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("node");

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("wavelet");

        if $z5 == 0 goto label08;

        if z8 == 0 goto label07;

        $r24 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationHost host>;

        virtualinvoke $r24.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: void processSubmitRequest(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label11;

     label07:
        $r23 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationHost host>;

        virtualinvoke $r23.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: void processHistoryRequest(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label11;

     label08:
        $r19 = interfaceinvoke $r17.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("node");

        $z6 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("signer");

        if $z6 == 0 goto label10;

        if z10 == 0 goto label09;

        $r22 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationHost host>;

        virtualinvoke $r22.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: void processPostSignerRequest(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label11;

     label09:
        $r21 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationHost host>;

        virtualinvoke $r21.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: void processGetSignerRequest(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label11;

     label10:
        $r20 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code BAD_REQUEST>;

        virtualinvoke r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r0, $r20, "Unhandled pubsub request");

     label11:
        goto label16;

     label12:
        if z11 != 0 goto label15;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("http://jabber.org/protocol/disco#info");

        if $z3 == 0 goto label13;

        $r15 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        virtualinvoke $r15.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void processDiscoInfoGet(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label16;

     label13:
        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("http://jabber.org/protocol/disco#items");

        if $z4 == 0 goto label14;

        $r14 = r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        virtualinvoke $r14.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void processDiscoItemsGet(org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r10);

        goto label16;

     label14:
        $r13 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code BAD_REQUEST>;

        virtualinvoke r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r0, $r13, "Unhandled IQ get");

        goto label16;

     label15:
        $r12 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code BAD_REQUEST>;

        virtualinvoke r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r0, $r12, "Unhandled IQ set");

     label16:
        return;
    }

    private void processMessage(org.xmpp.packet.Message)
    {
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport $r12;
        org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback $r13;
        java.util.logging.Logger $r6;
        org.xmpp.packet.JID $r8;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote $r14;
        org.xmpp.packet.Message r0, $r11;
        org.waveprotocol.wave.federation.xmpp.XmppManager r3;
        org.dom4j.Element $r1, $r2;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String $r10;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r4;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0 := @parameter0: org.xmpp.packet.Message;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Message: org.dom4j.Element getChildElement(java.lang.String,java.lang.String)>("event", "http://jabber.org/protocol/pubsub#event");

        if $r1 == null goto label1;

        $r14 = r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote remote>;

        $r13 = new org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback;

        specialinvoke $r13.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager,org.xmpp.packet.Packet)>(r3, r0);

        virtualinvoke $r14.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void update(org.xmpp.packet.Message,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r0, $r13);

        goto label3;

     label1:
        $r2 = virtualinvoke r0.<org.xmpp.packet.Message: org.dom4j.Element getChildElement(java.lang.String,java.lang.String)>("ping", "http://waveprotocol.org/protocol/0.2/waveserver");

        if $r2 == null goto label2;

        $r6 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Responding to ping from: ");

        $r8 = virtualinvoke r0.<org.xmpp.packet.Message: org.xmpp.packet.JID getFrom()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10);

        $r11 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.xmpp.packet.Message createResponseMessage(org.xmpp.packet.Message)>(r0);

        virtualinvoke $r11.<org.xmpp.packet.Message: org.dom4j.Element addChildElement(java.lang.String,java.lang.String)>("received", "urn:xmpp:receipts");

        $r12 = r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport>;

        interfaceinvoke $r12.<org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport: void sendPacket(org.xmpp.packet.Packet)>($r11);

        goto label3;

     label2:
        $r4 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code BAD_REQUEST>;

        virtualinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r0, $r4, "Unhandled message type");

     label3:
        return;
    }

    void sendErrorResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)
    {
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r1 := @parameter0: org.xmpp.packet.Packet;

        r2 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code;

        $r3 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)>(r2);

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1, $r3);

        return;
    }

    void sendErrorResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code, java.lang.String)
    {
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r4;
        java.lang.String r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r1 := @parameter0: org.xmpp.packet.Packet;

        r2 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code;

        r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1, $r4);

        return;
    }

    void sendErrorResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.xmpp.packet.Packet r4;
        org.xmpp.packet.PacketError $r5;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r0;
        org.waveprotocol.wave.federation.xmpp.XmppManager r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r1, $r2;
        java.lang.IllegalArgumentException $r6;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r4 := @parameter0: org.xmpp.packet.Packet;

        r0 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code getErrorCode()>();

        $r2 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code OK>;

        if $r1 != $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t send an error of OK!");

        throw $r6;

     label1:
        $r5 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppManager: org.xmpp.packet.PacketError toPacketError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r0);

        virtualinvoke r3.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.xmpp.packet.PacketError)>(r4, $r5);

        return;
    }

    void sendErrorResponse(org.xmpp.packet.Packet, org.xmpp.packet.PacketError)
    {
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport $r22;
        org.xmpp.packet.Message r33;
        org.xmpp.packet.IQ$Type $r25, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.xmpp.packet.PacketError$Condition $r16;
        java.util.logging.Logger $r10;
        org.xmpp.packet.Message$Type $r7, $r8;
        org.waveprotocol.wave.federation.xmpp.XmppManager r21;
        java.lang.StringBuilder $r2, $r3, $r5, $r9, $r11, $r13, $r14, $r18, $r29, $r30, $r31;
        org.xmpp.packet.PacketError r15;
        java.lang.String $r6, $r12, $r17, $r19, $r32;
        java.lang.IllegalArgumentException $r1, $r23, $r28;
        org.xmpp.packet.Packet r0, $r20;
        java.lang.Class $r4;
        org.xmpp.packet.IQ $r24;

        r21 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r15 := @parameter1: org.xmpp.packet.PacketError;

        $z0 = r0 instanceof org.xmpp.packet.IQ;

        if $z0 == 0 goto label2;

        $r24 = (org.xmpp.packet.IQ) r0;

        $r25 = virtualinvoke $r24.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r26 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        $z3 = virtualinvoke $r25.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r26);

        if $z3 != 0 goto label1;

        $r27 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        $z4 = virtualinvoke $r25.<org.xmpp.packet.IQ$Type: boolean equals(java.lang.Object)>($r27);

        if $z4 != 0 goto label1;

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("May only return an error to IQ get/set, not: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label1:
        goto label5;

     label2:
        $z1 = r0 instanceof org.xmpp.packet.Message;

        if $z1 == 0 goto label4;

        r33 = (org.xmpp.packet.Message) r0;

        $r7 = virtualinvoke r33.<org.xmpp.packet.Message: org.xmpp.packet.Message$Type getType()>();

        $r8 = <org.xmpp.packet.Message$Type: org.xmpp.packet.Message$Type error>;

        $z2 = virtualinvoke $r7.<org.xmpp.packet.Message$Type: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t return an error to another message error");

        throw $r23;

     label3:
        goto label5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Packet subclass, expected Message/IQ: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label5:
        $r10 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending error condition in response to ");

        $r12 = virtualinvoke r0.<org.xmpp.packet.Packet: java.lang.String getID()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = virtualinvoke r15.<org.xmpp.packet.PacketError: org.xmpp.packet.PacketError$Condition getCondition()>();

        $r17 = virtualinvoke $r16.<org.xmpp.packet.PacketError$Condition: java.lang.String name()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void fine(java.lang.String)>($r19);

        $r20 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.xmpp.packet.Packet createResponsePacket(org.xmpp.packet.Packet)>(r0);

        virtualinvoke $r20.<org.xmpp.packet.Packet: void setError(org.xmpp.packet.PacketError)>(r15);

        $r22 = r21.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport>;

        interfaceinvoke $r22.<org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport: void sendPacket(org.xmpp.packet.Packet)>($r20);

        return;
    }

    private static org.xmpp.packet.PacketError toPacketError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.xmpp.packet.PacketError $r7;
        java.lang.String $r4, $r5, $r6, $r8, $r13, $r15;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r1, $r2, $r3;
        boolean $z0, $z1;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r0;
        org.xmpp.packet.PacketError$Condition r16;
        java.lang.IllegalArgumentException $r9;
        java.util.logging.Logger $r11;
        java.lang.StringBuilder $r10, $r12, $r14;

        r0 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code getErrorCode()>();

        $r2 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code OK>;

        if $r1 == $r2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code getErrorCode()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: java.lang.String name()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

     label3:
        r16 = staticinvoke <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition fromXMPP(java.lang.String)>($r6);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r16 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        $r11 = <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not understand error condition, defaulting to: ");

        $r13 = virtualinvoke r16.<org.xmpp.packet.PacketError$Condition: java.lang.String name()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r15);

     label6:
        $r7 = new org.xmpp.packet.PacketError;

        specialinvoke $r7.<org.xmpp.packet.PacketError: void <init>(org.xmpp.packet.PacketError$Condition)>(r16);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: boolean hasErrorMessage()>();

        if $z0 == 0 goto label7;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: java.lang.String getErrorMessage()>();

        virtualinvoke $r7.<org.xmpp.packet.PacketError: void setText(java.lang.String,java.lang.String)>($r8, "en");

     label7:
        return $r7;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    private static org.waveprotocol.wave.federation.FederationErrorProto$FederationError toFederationError(org.xmpp.packet.PacketError)
    {
        org.xmpp.packet.PacketError r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r8;
        org.xmpp.packet.PacketError$Condition $r1;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder $r5, $r6;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r2, $r3, $r4, $r7, $r9;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code r11;

        r0 := @parameter0: org.xmpp.packet.PacketError;

        $r1 = virtualinvoke r0.<org.xmpp.packet.PacketError: org.xmpp.packet.PacketError$Condition getCondition()>();

        $r2 = virtualinvoke $r1.<org.xmpp.packet.PacketError$Condition: java.lang.String name()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

     label1:
        r11 = staticinvoke <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code valueOf(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r11 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code UNDEFINED_CONDITION>;

     label4:
        $r5 = staticinvoke <org.waveprotocol.wave.federation.FederationErrorProto$FederationError: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder newBuilder()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder setErrorCode(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)>(r11);

        $r7 = virtualinvoke r0.<org.xmpp.packet.PacketError: java.lang.String getText()>();

        if $r7 == null goto label5;

        $r9 = virtualinvoke r0.<org.xmpp.packet.PacketError: java.lang.String getText()>();

        virtualinvoke $r6.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder setErrorMessage(java.lang.String)>($r9);

     label5:
        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Builder: org.waveprotocol.wave.federation.FederationErrorProto$FederationError build()>();

        return $r8;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport access$000(org.waveprotocol.wave.federation.xmpp.XmppManager)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport $r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport transport>;

        return $r1;
    }

    static java.util.concurrent.ConcurrentMap access$100(org.waveprotocol.wave.federation.xmpp.XmppManager)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap callbacks>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/XmppManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
