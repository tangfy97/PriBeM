public class org.apache.commons.compress.archivers.tar.TarArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream
{
    private static final int SMALL_BUFFER_SIZE;
    private final byte[] SMALL_BUF;
    private final int recordSize;
    private final int blockSize;
    private boolean hasHitEOF;
    private long entrySize;
    private long entryOffset;
    private final java.io.InputStream is;
    private org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry;
    private final org.apache.commons.compress.archivers.zip.ZipEncoding encoding;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,int,int)>(r1, 10240, 512);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        java.lang.String r2;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,int,int,java.lang.String)>(r1, 10240, 512, r2);

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,int,int)>(r1, i0, 512);

        return;
    }

    public void <init>(java.io.InputStream, int, java.lang.String)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        int i0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,int,int,java.lang.String)>(r1, i0, 512, r2);

        return;
    }

    public void <init>(java.io.InputStream, int, int)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        int i0, i1;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,int,int,java.lang.String)>(r1, i0, i1, null);

        return;
    }

    public void <init>(java.io.InputStream, int, int, java.lang.String)
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        int i0, i1;
        java.lang.String r3;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r2 := @parameter0: java.io.InputStream;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void <init>()>();

        $r1 = newarray (byte)[256];

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] SMALL_BUF> = $r1;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is> = r2;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF> = 0;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r3);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding> = $r4;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize> = i0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int blockSize> = i1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public int getRecordSize()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        return $i0;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l0, $l1, $l2, $l4, $l5, $l6;
        byte $b3;
        int $i7, $i8;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $l1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $l0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        $l2 = $l1 - $l0;

        $b3 = $l2 cmp 2147483647L;

        $i8 = (int) $b3;

        if $i8 <= 0 goto label1;

        return 2147483647;

     label1:
        $l5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $l4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        $l6 = $l5 - $l4;

        $i7 = (int) $l6;

        return $i7;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long l0, $l2, $l3, l4, $l5, $l6, $l7, $l8;
        byte $b1;
        int $i9;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 > 0 goto label1;

        return 0L;

     label1:
        $l3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $l2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        l4 = $l3 - $l2;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(l0, l4);

        $l6 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l5);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void count(long)>($l6);

        $l7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        $l8 = $l7 + $l6;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset> = $l8;

        return $l6;
    }

    public synchronized void reset()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        return;
    }

    public org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry() throws java.io.IOException
    {
        byte[] $r2, $r12, $r16;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l0, $l1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r18;
        java.lang.String $r15, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r21;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4, $r13, $r17;
        java.lang.IllegalArgumentException $r20;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        if $r1 == null goto label02;

        staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>(r0, 9223372036854775807L);

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void skipRecordPadding()>();

     label02:
        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] getRecord()>();

        if $r2 != null goto label03;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry> = null;

        return null;

     label03:
        $r3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        specialinvoke $r3.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding)>($r2, $r4);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry> = $r3;

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Error detected parsing the header");

        virtualinvoke $r21.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r20);

        throw $r21;

     label06:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset> = 0L;

        $r5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $l0 = virtualinvoke $r5.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize> = $l0;

        $r6 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $z1 = virtualinvoke $r6.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isGNULongLinkEntry()>();

        if $z1 == 0 goto label08;

        $r16 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] getLongNameData()>();

        if $r16 != null goto label07;

        return null;

     label07:
        $r18 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $r17 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r19 = interfaceinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>($r16);

        virtualinvoke $r18.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setLinkName(java.lang.String)>($r19);

     label08:
        $r7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $z2 = virtualinvoke $r7.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isGNULongNameEntry()>();

        if $z2 == 0 goto label10;

        $r12 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] getLongNameData()>();

        if $r12 != null goto label09;

        return null;

     label09:
        $r14 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $r13 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r15 = interfaceinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>($r12);

        virtualinvoke $r14.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setName(java.lang.String)>($r15);

     label10:
        $r8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $z3 = virtualinvoke $r8.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxHeader()>();

        if $z3 == 0 goto label11;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void paxHeaders()>();

     label11:
        $r9 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $z4 = virtualinvoke $r9.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isGNUSparse()>();

        if $z4 == 0 goto label12;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void readGNUSparse()>();

     label12:
        $r10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $l1 = virtualinvoke $r10.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize> = $l1;

        $r11 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        return $r11;

        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
    }

    private void skipRecordPadding() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l0, $l3, $l4, $l5, $l8, $l9, $l10, l11, $l13, $l14, $l15, l16, $l17;
        byte $b1, $b6;
        int $i2, $i7, $i12, $i18;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $b1 = $l0 cmp 0L;

        $i18 = (int) $b1;

        if $i18 <= 0 goto label1;

        $l4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $i2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $l3 = (long) $i2;

        $l5 = $l4 % $l3;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label1;

        $l9 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $i7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $l8 = (long) $i7;

        $l10 = $l9 / $l8;

        l11 = $l10 + 1L;

        $i12 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $l13 = (long) $i12;

        $l15 = l11 * $l13;

        $l14 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        l16 = $l15 - $l14;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $l17 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>($r1, l16);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void count(long)>($l17);

     label1:
        return;
    }

    protected byte[] getLongNameData() throws java.io.IOException
    {
        byte[] $r2, $r4, r5, $r6, r7;
        java.io.ByteArrayOutputStream $r8;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r3;
        byte $b3;
        int $i0, $i1, $i2, i4, $i6;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $r2 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] SMALL_BUF>;

        $i0 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>($r2);

        if $i0 < 0 goto label2;

        $r6 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] SMALL_BUF>;

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, $i0);

        goto label1;

     label2:
        virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>();

        $r3 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        if $r3 != null goto label3;

        return null;

     label3:
        $r4 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r7 = $r4;

        i4 = lengthof $r4;

     label4:
        if i4 <= 0 goto label5;

        $i2 = i4 - 1;

        $b3 = $r4[$i2];

        if $b3 != 0 goto label5;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label4;

     label5:
        $i1 = lengthof $r4;

        if i4 == $i1 goto label6;

        r5 = newarray (byte)[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, 0, i4);

        r7 = r5;

     label6:
        return r7;
    }

    private byte[] getRecord() throws java.io.IOException
    {
        byte[] $r1, r2;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] readRecord()>();

        r2 = $r1;

        $z0 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean isEOFRecord(byte[])>($r1);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF> = $z0;

        $z1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF>;

        if $z1 == 0 goto label1;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void tryToConsumeSecondEOFRecord()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void consumeRemainderOfLastBlock()>();

        r2 = null;

     label1:
        return r2;
    }

    protected boolean isEOFRecord(byte[])
    {
        byte[] r0;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r1;
        int $i0;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isArrayZero(byte[],int)>(r0, $i0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected byte[] readRecord() throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        int $i0, $i1, $i2;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>($r2, r1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void count(int)>($i1);

        $i2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        if $i1 == $i2 goto label1;

        return null;

     label1:
        return r1;
    }

    private void paxHeaders() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.util.Map parsePaxHeaders(java.io.InputStream)>(r0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void applyPaxHeadersToCurrentEntry(java.util.Map)>($r1);

        return;
    }

    java.util.Map parsePaxHeaders(java.io.InputStream) throws java.io.IOException
    {
        byte[] r4;
        byte $b2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r16;
        java.io.ByteArrayOutputStream $r15;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r13;
        java.util.HashMap $r14;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, i12, i13, $i15, $i17, $i18, $i20;
        java.lang.String $r3, $r12, $r18;
        java.io.IOException $r17;
        java.io.InputStream r1;

        r13 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

     label1:
        i9 = 0;

        i10 = 0;

     label2:
        $i11 = virtualinvoke r1.<java.io.InputStream: int read()>();

        i12 = $i11;

        $i15 = (int) -1;

        if $i11 == $i15 goto label7;

        i10 = i10 + 1;

        if $i11 != 32 goto label6;

        $r15 = new java.io.ByteArrayOutputStream;

        specialinvoke $r15.<java.io.ByteArrayOutputStream: void <init>()>();

     label3:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        i12 = $i1;

        $i17 = (int) -1;

        if $i1 == $i17 goto label7;

        i10 = i10 + 1;

        if $i1 != 61 goto label5;

        $r3 = virtualinvoke $r15.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("UTF-8");

        $i3 = i9 - i10;

        r4 = newarray (byte)[$i3];

        $i4 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>(r1, r4);

        $i5 = i9 - i10;

        if $i4 == $i5 goto label4;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read Paxheader. Expected ");

        $i8 = i9 - i10;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, read ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r17;

     label4:
        $r18 = new java.lang.String;

        $i6 = i9 - i10;

        $i7 = $i6 - 1;

        specialinvoke $r18.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r4, 0, $i7, "UTF-8");

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r18);

        goto label7;

     label5:
        $b2 = (byte) $i1;

        $i18 = (int) $b2;

        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void write(int)>($i18);

        goto label3;

     label6:
        i13 = i9 * 10;

        $i0 = $i11 - 48;

        i9 = i13 + $i0;

        goto label2;

     label7:
        $i20 = (int) -1;

        if i12 != $i20 goto label8;

        goto label9;

     label8:
        goto label1;

     label9:
        return $r14;
    }

    private void applyPaxHeadersToCurrentEntry(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.Set $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r19;
        long $l2, $l3;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        int $i0, $i1, $i4, $i5;
        java.lang.String r6, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        double $d0, $d1;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.lang.Object $r3, $r5, $r7;

        r19 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.lang.String) $r7;

        $r9 = "path";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label02;

        $r29 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        virtualinvoke $r29.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setName(java.lang.String)>(r8);

        goto label11;

     label02:
        $r10 = "linkpath";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label03;

        $r28 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        virtualinvoke $r28.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setLinkName(java.lang.String)>(r8);

        goto label11;

     label03:
        $r11 = "gid";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label04;

        $r27 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        virtualinvoke $r27.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setGroupId(int)>($i5);

        goto label11;

     label04:
        $r12 = "gname";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label05;

        $r26 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        virtualinvoke $r26.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setGroupName(java.lang.String)>(r8);

        goto label11;

     label05:
        $r13 = "uid";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z5 == 0 goto label06;

        $r25 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        virtualinvoke $r25.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setUserId(int)>($i4);

        goto label11;

     label06:
        $r14 = "uname";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z6 == 0 goto label07;

        $r24 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        virtualinvoke $r24.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setUserName(java.lang.String)>(r8);

        goto label11;

     label07:
        $r15 = "size";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z7 == 0 goto label08;

        $r23 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r8);

        virtualinvoke $r23.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setSize(long)>($l3);

        goto label11;

     label08:
        $r16 = "mtime";

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z8 == 0 goto label09;

        $r22 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r8);

        $d1 = $d0 * 1000.0;

        $l2 = (long) $d1;

        virtualinvoke $r22.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setModTime(long)>($l2);

        goto label11;

     label09:
        $r17 = "SCHILY.devminor";

        $z9 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z9 == 0 goto label10;

        $r21 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        virtualinvoke $r21.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setDevMinor(int)>($i1);

        goto label11;

     label10:
        $r18 = "SCHILY.devmajor";

        $z10 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z10 == 0 goto label11;

        $r20 = r19.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        virtualinvoke $r20.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setDevMajor(int)>($i0);

     label11:
        goto label01;

     label12:
        return;
    }

    private void readGNUSparse() throws java.io.IOException
    {
        byte[] $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry $r3;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        $z0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isExtended()>();

        if $z0 == 0 goto label3;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] getRecord()>();

        if $r2 != null goto label2;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry> = null;

        goto label3;

     label2:
        $r3 = new org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;

        specialinvoke $r3.<org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry: void <init>(byte[])>($r2);

        $z1 = virtualinvoke $r3.<org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry: boolean isExtended()>();

        if $z1 != 0 goto label1;

     label3:
        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>();

        return $r1;
    }

    private void tryToConsumeSecondEOFRecord() throws java.io.IOException
    {
        java.lang.Throwable $r5;
        byte[] $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l1, $l4;
        int $i0, $i2, $i3;
        java.io.InputStream $r1, $r3, $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $i2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>($i2);

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: byte[] readRecord()>();

        $z1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean isEOFRecord(byte[])>($r2);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label7;

        if $z0 == 0 goto label7;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $l1 = (long) $i0;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void pushedBackBytes(long)>($l1);

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        virtualinvoke $r3.<java.io.InputStream: void reset()>();

        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        if 1 == 0 goto label6;

        if $z0 == 0 goto label6;

        $i3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int recordSize>;

        $l4 = (long) $i3;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void pushedBackBytes(long)>($l4);

        $r6 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        virtualinvoke $r6.<java.io.InputStream: void reset()>();

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        java.lang.IllegalStateException $r6;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l0, $l1, $l7, $l8, $l9;
        byte $b2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1;
        int $i3, $i4, i5, $i6, i10, $i11, $i13, $i15;
        boolean $z0;
        java.io.IOException $r7;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r2 := @parameter0: byte[];

        i5 := @parameter1: int;

        i10 := @parameter2: int;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF>;

        if $z0 != 0 goto label1;

        $l1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        $l0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entrySize>;

        $b2 = $l1 cmp $l0;

        $i11 = (int) $b2;

        if $i11 < 0 goto label2;

     label1:
        $i13 = (int) -1;

        return $i13;

     label2:
        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        if $r1 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current tar entry");

        throw $r6;

     label3:
        $i3 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int available()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i3);

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $i6 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r2, i5, $i4);

        $i15 = (int) -1;

        if $i6 != $i15 goto label5;

        if $i4 <= 0 goto label4;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Truncated TAR archive");

        throw $r7;

     label4:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF> = 1;

        goto label6;

     label5:
        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void count(int)>($i6);

        $l8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset>;

        $l7 = (long) $i6;

        $l9 = $l8 + $l7;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long entryOffset> = $l9;

     label6:
        return $i6;
    }

    public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        if $z0 == 0 goto label3;

        r1 = (org.apache.commons.compress.archivers.tar.TarArchiveEntry) r0;

        $z1 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isGNUSparse()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public org.apache.commons.compress.archivers.tar.TarArchiveEntry getCurrentEntry()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry>;

        return $r1;
    }

    protected final void setCurrentEntry(org.apache.commons.compress.archivers.tar.TarArchiveEntry)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry> = r1;

        return;
    }

    protected final boolean isAtEOF()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF>;

        return $z0;
    }

    protected final void setAtEOF(boolean)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean hasHitEOF> = z0;

        return;
    }

    private void consumeRemainderOfLastBlock() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream r0;
        long $l0, $l2, l3, $l6, $l7, $l8;
        byte $b4;
        int $i1, $i5, $i9;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: long getBytesRead()>();

        $i1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int blockSize>;

        $l2 = (long) $i1;

        l3 = $l0 % $l2;

        $b4 = l3 cmp 0L;

        $i9 = (int) $b4;

        if $i9 <= 0 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: java.io.InputStream is>;

        $i5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int blockSize>;

        $l6 = (long) $i5;

        $l7 = $l6 - l3;

        $l8 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>($r1, $l7);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void count(long)>($l8);

     label1:
        return;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 >= 265 goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("ustar\u0000", r0, 257, 6);

        if $z0 == 0 goto label2;

        $z6 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("00", r0, 263, 2);

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z1 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("ustar ", r0, 257, 6);

        if $z1 == 0 goto label4;

        $z4 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>(" \u0000", r0, 263, 2);

        if $z4 != 0 goto label3;

        $z5 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("0\u0000", r0, 263, 2);

        if $z5 == 0 goto label4;

     label3:
        return 1;

     label4:
        $z2 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("ustar\u0000", r0, 257, 6);

        if $z2 == 0 goto label5;

        $z3 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("\u0000\u0000", r0, 263, 2);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int SMALL_BUFFER_SIZE> = 256;

        return;
    }
}
