public abstract class org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter extends org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter
{
    private final java.util.concurrent.ConcurrentMap jaxbContexts;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: java.util.concurrent.ConcurrentMap jaxbContexts> = $r1;

        return;
    }

    protected final javax.xml.bind.Marshaller createMarshaller(java.lang.Class)
    {
        org.springframework.http.converter.HttpMessageConversionException $r5;
        javax.xml.bind.Marshaller $r3;
        javax.xml.bind.JAXBException $r4;
        org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.lang.String $r9, $r11;
        javax.xml.bind.JAXBContext $r2;

        r0 := @this: org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: javax.xml.bind.JAXBContext getJaxbContext(java.lang.Class)>(r1);

        $r3 = virtualinvoke $r2.<javax.xml.bind.JAXBContext: javax.xml.bind.Marshaller createMarshaller()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.http.converter.HttpMessageConversionException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create Marshaller for class [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r4.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4);

        throw $r5;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    protected final javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class) throws javax.xml.bind.JAXBException
    {
        javax.xml.bind.Unmarshaller $r3;
        org.springframework.http.converter.HttpMessageConversionException $r5;
        javax.xml.bind.JAXBException $r4;
        org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.lang.String $r9, $r11;
        javax.xml.bind.JAXBContext $r2;

        r0 := @this: org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: javax.xml.bind.JAXBContext getJaxbContext(java.lang.Class)>(r1);

        $r3 = virtualinvoke $r2.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.http.converter.HttpMessageConversionException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create Unmarshaller for class [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r4.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4);

        throw $r5;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    protected final javax.xml.bind.JAXBContext getJaxbContext(java.lang.Class)
    {
        org.springframework.http.converter.HttpMessageConversionException $r8;
        java.util.concurrent.ConcurrentMap $r2, $r6;
        org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter r1;
        java.lang.String $r12, $r14;
        javax.xml.bind.JAXBContext $r5, r15;
        java.lang.Class[] $r4;
        javax.xml.bind.JAXBException $r7;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;

        r1 := @this: org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'clazz\' must not be null");

        $r2 = r1.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: java.util.concurrent.ConcurrentMap jaxbContexts>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r15 = (javax.xml.bind.JAXBContext) $r3;

        if r15 != null goto label4;

     label1:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        $r5 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r4);

        r15 = $r5;

        $r6 = r1.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: java.util.concurrent.ConcurrentMap jaxbContexts>;

        interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.http.converter.HttpMessageConversionException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate JAXBContext for class [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r12 = virtualinvoke $r7.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

     label4:
        return r15;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }
}
