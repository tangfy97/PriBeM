public class ucar.nc2.dt.point.SequenceObsDataset extends ucar.nc2.dt.point.StationObsDatasetImpl implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    private ucar.nc2.Variable latVar;
    private ucar.nc2.Variable lonVar;
    private ucar.nc2.Variable altVar;
    private ucar.nc2.Variable timeVar;
    private ucar.nc2.Variable timeNominalVar;
    private ucar.nc2.Variable stationIdVar;
    private ucar.nc2.Variable stationDescVar;
    private ucar.nc2.Variable numStationsVar;
    private ucar.nc2.Structure sequenceVar;
    private ucar.nc2.dt.point.SequenceHelper sequenceHelper;
    private boolean debugRead;
    private boolean fatal;

    public static boolean isValidFile(ucar.nc2.NetcdfFile)
    {
        java.util.StringTokenizer $r5;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1, $r3, $r4, $r6, $r7, $r8, $r10;
        ucar.nc2.constants.FeatureType $r2, $r9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "cdm_data_type", "");

        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        $r3 = virtualinvoke $r2.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "cdm_datatype", "");

        $r9 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        $r10 = virtualinvoke $r9.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10);

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, ",");

     label3:
        $z1 = virtualinvoke $r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Unidata Sequence Observation Dataset v1.0");

        if $z2 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.dt.point.SequenceObsDataset r1;
        boolean $z0;

        r1 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $z0 = staticinvoke <ucar.nc2.dt.point.SequenceObsDataset: boolean isValidFile(ucar.nc2.NetcdfFile)>(r0);

        return $z0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r2;
        ucar.nc2.dt.point.SequenceObsDataset $r0, r3;
        java.lang.StringBuilder r4;
        ucar.nc2.dataset.NetcdfDataset r1;

        r3 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.point.SequenceObsDataset;

        specialinvoke $r0.<ucar.nc2.dt.point.SequenceObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask)>(r1, r2);

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        specialinvoke r0.<ucar.nc2.dt.point.StationObsDatasetImpl: void <init>()>();

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean debugRead> = 0;

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 0;

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.Structure $r3;
        ucar.nc2.util.CancelTask r24;
        java.lang.StringBuffer $r19, $r20, $r21, $r22, $r23;
        ucar.nc2.Variable $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r17, $r18;
        ucar.nc2.dt.point.SequenceObsDataset r0;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r24 := @parameter1: ucar.nc2.util.CancelTask;

        specialinvoke r0.<ucar.nc2.dt.point.StationObsDatasetImpl: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean debugRead> = 0;

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 0;

        $r2 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "obs_sequence");

        $r3 = (ucar.nc2.Structure) $r2;

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Structure sequenceVar> = $r3;

        $r4 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "latitude_coordinate");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable latVar> = $r4;

        $r5 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "longitude_coordinate");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable lonVar> = $r5;

        $r6 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "zaxis_coordinate");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable altVar> = $r6;

        $r7 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "time_coordinate");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable timeVar> = $r7;

        $r8 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable latVar>;

        if $r8 != null goto label1;

        $r23 = r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing latitude variable");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 1;

     label1:
        $r9 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable lonVar>;

        if $r9 != null goto label2;

        $r22 = r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing longitude variable");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 1;

     label2:
        $r10 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable altVar>;

        if $r10 != null goto label3;

        $r21 = r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing altitude variable");

     label3:
        $r11 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable timeVar>;

        if $r11 != null goto label4;

        $r20 = r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing time variable");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 1;

     label4:
        $r12 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "time_nominal");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable timeNominalVar> = $r12;

        $r13 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "station_id");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable stationIdVar> = $r13;

        $r14 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "station_description");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable stationDescVar> = $r14;

        $r15 = specialinvoke r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset,java.lang.String)>(r1, "number_stations");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable numStationsVar> = $r15;

        $r16 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.Variable stationIdVar>;

        if $r16 != null goto label5;

        $r19 = r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing station id variable");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: boolean fatal> = 1;

     label5:
        $r17 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "title", "");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.String title> = $r17;

        $r18 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "description", "");

        r0.<ucar.nc2.dt.point.SequenceObsDataset: java.lang.String desc> = $r18;

        return;
    }

    private ucar.nc2.Variable getCoordinate(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Structure, ucar.nc2.constants.AxisType)
    {
        ucar.nc2.Structure r2;
        ucar.nc2.constants.AxisType r6;
        int $i0, $i1, i2, i3;
        ucar.nc2.Variable r12, r13;
        java.lang.String $r5, $r7, $r9, $r10;
        boolean $z0, $z1;
        ucar.nc2.dt.point.SequenceObsDataset r11;
        java.util.List $r1, $r3;
        java.lang.Object $r4, $r8;
        ucar.nc2.dataset.NetcdfDataset r0;

        r11 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.Structure;

        r6 := @parameter2: ucar.nc2.constants.AxisType;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r8 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r12 = (ucar.nc2.Variable) $r8;

        $r9 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r12, "_CoordinateAxisType", null);

        if $r9 == null goto label2;

        $r10 = virtualinvoke r6.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        return r12;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke r2.<ucar.nc2.Structure: java.util.List getVariables()>();

        i3 = 0;

     label4:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r13 = (ucar.nc2.Variable) $r4;

        $r5 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r13, "_CoordinateAxisType", null);

        if $r5 == null goto label5;

        $r7 = virtualinvoke r6.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        return r13;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return null;
    }

    private ucar.nc2.Variable findVariable(ucar.nc2.dataset.NetcdfDataset, java.lang.String)
    {
        ucar.nc2.dt.point.SequenceObsDataset r8;
        ucar.nc2.Variable $r2, r9;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r1, $r6, $r7, r10;
        ucar.nc2.dataset.NetcdfDataset r0;

        r8 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r9 = $r2;

        if $r2 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_variable");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, $r6, null);

        r10 = $r7;

        if $r7 != null goto label1;

        r10 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, r1, null);

     label1:
        if r10 == null goto label2;

        r9 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>(r10);

     label2:
        return r9;
    }

    private ucar.nc2.Dimension findDimension(ucar.nc2.dataset.NetcdfDataset, java.lang.String)
    {
        ucar.nc2.dt.point.SequenceObsDataset r8;
        ucar.nc2.Dimension $r2, r9;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r1, $r6, $r7;
        ucar.nc2.dataset.NetcdfDataset r0;

        r8 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension findDimension(java.lang.String)>(r1);

        r9 = $r2;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dimension");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, $r6, null);

        if $r7 == null goto label1;

        r9 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension findDimension(java.lang.String)>($r7);

     label1:
        return r9;
    }

    protected void setTimeUnits()
    {
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        return;
    }

    protected void setStartDate()
    {
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        return;
    }

    protected void setEndDate()
    {
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        return;
    }

    protected void setBoundingBox()
    {
        ucar.unidata.geoloc.LatLonRect $r2;
        ucar.nc2.dt.point.StationDatasetHelper $r1;
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        $r1 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.dt.point.StationDatasetHelper stationHelper>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dt.point.StationDatasetHelper: ucar.unidata.geoloc.LatLonRect getBoundingBox()>();

        r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.unidata.geoloc.LatLonRect boundingBox> = $r2;

        return;
    }

    public java.util.List getData(ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r2;
        ucar.nc2.dt.point.SequenceObsDataset r1;
        int $i0, i1;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r2 := @parameter0: ucar.nc2.util.CancelTask;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<ucar.nc2.dt.point.SequenceObsDataset: int getDataCount()>();

        if i1 >= $i0 goto label3;

        if r2 == null goto label2;

        $z0 = interfaceinvoke r2.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public int getDataCount()
    {
        ucar.nc2.dt.point.SequenceObsDataset r0;
        int $i0;
        ucar.nc2.Dimension $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        $r1 = r0.<ucar.nc2.dt.point.SequenceObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension getUnlimitedDimension()>();

        $i0 = virtualinvoke $r2.<ucar.nc2.Dimension: int getLength()>();

        return $i0;
    }

    public java.util.List getData(ucar.unidata.geoloc.Station, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.unidata.geoloc.Station r1;
        ucar.nc2.util.CancelTask r2;
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        r1 := @parameter0: ucar.unidata.geoloc.Station;

        r2 := @parameter1: ucar.nc2.util.CancelTask;

        return null;
    }

    public ucar.nc2.dt.DataIterator getDataIterator(int) throws java.io.IOException
    {
        int i0;
        ucar.nc2.dt.point.SequenceObsDataset r0;

        r0 := @this: ucar.nc2.dt.point.SequenceObsDataset;

        i0 := @parameter0: int;

        return null;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r2;
        ucar.nc2.dataset.NetcdfDataset $r0;
        ucar.nc2.dt.point.SequenceObsDataset $r1;

        r2 := @parameter0: java.lang.String[];

        <ucar.nc2.dods.DODSNetcdfFile: boolean debugServerCall> = 1;

        <ucar.nc2.dods.DODSNetcdfFile: boolean debugCE> = 1;

        <ucar.nc2.dods.DODSNetcdfFile: boolean debugDataResult> = 1;

        <ucar.nc2.dods.DODSNetcdfFile: boolean debugConvertData> = 1;

        $r0 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.NetcdfDataset openDataset(java.lang.String)>("C:/data/ncml/oceanwatch.ncml");

        $r1 = new ucar.nc2.dt.point.SequenceObsDataset;

        specialinvoke $r1.<ucar.nc2.dt.point.SequenceObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask)>($r0, null);

        return;
    }
}
