public class org.apache.batik.util.io.StreamNormalizingReader extends org.apache.batik.util.io.NormalizingReader
{
    protected org.apache.batik.util.io.CharDecoder charDecoder;
    protected int nextChar;
    protected int line;
    protected int column;
    protected static final java.util.Map charDecoderFactories;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.batik.util.io.StreamNormalizingReader r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.batik.util.io.CharDecoder $r2;
        org.apache.batik.util.io.StreamNormalizingReader r0;
        int $i1;
        java.lang.String r3;
        java.io.InputStream r1;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.batik.util.io.NormalizingReader: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar> = $i1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = 1;

        if r3 != null goto label1;

        r3 = "ISO-8859-1";

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream,java.lang.String)>(r1, r3);

        r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder> = $r2;

        return;
    }

    public void <init>(java.io.Reader) throws java.io.IOException
    {
        org.apache.batik.util.io.StreamNormalizingReader r0;
        int $i1;
        java.io.Reader r2;
        org.apache.batik.util.io.GenericDecoder $r3;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        r2 := @parameter0: java.io.Reader;

        specialinvoke r0.<org.apache.batik.util.io.NormalizingReader: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar> = $i1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = 1;

        $r3 = new org.apache.batik.util.io.GenericDecoder;

        specialinvoke $r3.<org.apache.batik.util.io.GenericDecoder: void <init>(java.io.Reader)>(r2);

        r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder> = $r3;

        return;
    }

    protected void <init>()
    {
        int $i1;
        org.apache.batik.util.io.StreamNormalizingReader r0;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke r0.<org.apache.batik.util.io.NormalizingReader: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar> = $i1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = 1;

        return;
    }

    public int read() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12, $i14;
        org.apache.batik.util.io.CharDecoder $r1, $r2;
        org.apache.batik.util.io.StreamNormalizingReader r0;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        i10 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar>;

        $i12 = (int) -1;

        if i10 == $i12 goto label3;

        $i14 = (int) -1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar> = $i14;

        if i10 != 13 goto label1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int column> = 0;

        $i8 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int line>;

        $i9 = $i8 + 1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = $i9;

        goto label2;

     label1:
        $i6 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int column>;

        $i7 = $i6 + 1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int column> = $i7;

     label2:
        return i10;

     label3:
        $r1 = r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder>;

        $i0 = interfaceinvoke $r1.<org.apache.batik.util.io.CharDecoder: int readChar()>();

        lookupswitch($i0)
        {
            case 10: goto label6;
            case 13: goto label4;
            default: goto label7;
        };

     label4:
        r0.<org.apache.batik.util.io.StreamNormalizingReader: int column> = 0;

        $i1 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int line>;

        $i2 = $i1 + 1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = $i2;

        $r2 = r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder>;

        $i3 = interfaceinvoke $r2.<org.apache.batik.util.io.CharDecoder: int readChar()>();

        if $i3 != 10 goto label5;

        return 10;

     label5:
        r0.<org.apache.batik.util.io.StreamNormalizingReader: int nextChar> = $i3;

        return 10;

     label6:
        r0.<org.apache.batik.util.io.StreamNormalizingReader: int column> = 0;

        $i4 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int line>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.util.io.StreamNormalizingReader: int line> = $i5;

     label7:
        return $i0;
    }

    public int getLine()
    {
        int $i0;
        org.apache.batik.util.io.StreamNormalizingReader r0;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        $i0 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int line>;

        return $i0;
    }

    public int getColumn()
    {
        int $i0;
        org.apache.batik.util.io.StreamNormalizingReader r0;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        $i0 = r0.<org.apache.batik.util.io.StreamNormalizingReader: int column>;

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.batik.util.io.CharDecoder $r1;
        org.apache.batik.util.io.StreamNormalizingReader r0;

        r0 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        $r1 = r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder>;

        interfaceinvoke $r1.<org.apache.batik.util.io.CharDecoder: void dispose()>();

        r0.<org.apache.batik.util.io.StreamNormalizingReader: org.apache.batik.util.io.CharDecoder charDecoder> = null;

        return;
    }

    protected org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.batik.util.io.CharDecoder $r8;
        org.apache.batik.util.io.StreamNormalizingReader r9;
        java.util.Map $r1;
        java.lang.Object $r3;
        java.lang.String r0, $r2, $r5, r10;
        org.apache.batik.util.io.StreamNormalizingReader$CharDecoderFactory r4;
        org.apache.batik.util.io.GenericDecoder $r6;
        java.io.InputStream r7;

        r9 := @this: org.apache.batik.util.io.StreamNormalizingReader;

        r7 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        $r1 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.batik.util.io.StreamNormalizingReader$CharDecoderFactory) $r3;

        if r4 == null goto label1;

        $r8 = interfaceinvoke r4.<org.apache.batik.util.io.StreamNormalizingReader$CharDecoderFactory: org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream)>(r7);

        return $r8;

     label1:
        $r5 = staticinvoke <org.apache.batik.util.EncodingUtilities: java.lang.String javaEncoding(java.lang.String)>(r0);

        r10 = $r5;

        if $r5 != null goto label2;

        r10 = r0;

     label2:
        $r6 = new org.apache.batik.util.io.GenericDecoder;

        specialinvoke $r6.<org.apache.batik.util.io.GenericDecoder: void <init>(java.io.InputStream,java.lang.String)>(r7, r10);

        return $r6;
    }

    static void <clinit>()
    {
        org.apache.batik.util.io.StreamNormalizingReader$ISO_8859_1DecoderFactory $r4;
        java.util.HashMap $r0;
        org.apache.batik.util.io.StreamNormalizingReader$ASCIIDecoderFactory $r1;
        org.apache.batik.util.io.StreamNormalizingReader$UTF8DecoderFactory $r6;
        org.apache.batik.util.io.StreamNormalizingReader$UTF16DecoderFactory $r8;
        java.util.Map $r2, $r3, $r5, $r7, $r9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(11);

        <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories> = $r0;

        $r1 = new org.apache.batik.util.io.StreamNormalizingReader$ASCIIDecoderFactory;

        specialinvoke $r1.<org.apache.batik.util.io.StreamNormalizingReader$ASCIIDecoderFactory: void <init>()>();

        $r2 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ASCII", $r1);

        $r3 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("US-ASCII", $r1);

        $r5 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        $r4 = new org.apache.batik.util.io.StreamNormalizingReader$ISO_8859_1DecoderFactory;

        specialinvoke $r4.<org.apache.batik.util.io.StreamNormalizingReader$ISO_8859_1DecoderFactory: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ISO-8859-1", $r4);

        $r7 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        $r6 = new org.apache.batik.util.io.StreamNormalizingReader$UTF8DecoderFactory;

        specialinvoke $r6.<org.apache.batik.util.io.StreamNormalizingReader$UTF8DecoderFactory: void <init>()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTF-8", $r6);

        $r9 = <org.apache.batik.util.io.StreamNormalizingReader: java.util.Map charDecoderFactories>;

        $r8 = new org.apache.batik.util.io.StreamNormalizingReader$UTF16DecoderFactory;

        specialinvoke $r8.<org.apache.batik.util.io.StreamNormalizingReader$UTF16DecoderFactory: void <init>()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTF-16", $r8);

        return;
    }
}
