public abstract class org.springframework.core.BridgeMethodResolver extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.core.BridgeMethodResolver r0;

        r0 := @this: org.springframework.core.BridgeMethodResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r1;
        int i0, $i1, i2;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.reflect.Method r0, $r4, $r6, r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class)>($r2);

        i0 = lengthof $r3;

        i2 = 0;

        goto label5;

     label3:
        r7 = $r3[i2];

        $z1 = staticinvoke <org.springframework.core.BridgeMethodResolver: boolean isBridgedCandidateFor(java.lang.reflect.Method,java.lang.reflect.Method)>(r7, r0);

        if $z1 == 0 goto label4;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r7);

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i0 goto label3;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 != 1 goto label6;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.reflect.Method) $r5;

        return $r6;

     label6:
        $r4 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchCandidates(java.util.List,java.lang.reflect.Method)>($r1, r0);

        if $r4 == null goto label7;

        return $r4;

     label7:
        return r0;
    }

    private static java.lang.reflect.Method searchCandidates(java.util.List, java.lang.reflect.Method)
    {
        java.util.Map $r3;
        java.lang.reflect.Method r1, r6, r10, $r11;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.util.Iterator $r4;
        java.util.List r0;
        java.lang.reflect.Type[] $r7, $r8;
        java.lang.Class $r2;
        java.lang.Object $r5, $r9;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.reflect.Method;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.util.Map getTypeVariableMap(java.lang.Class)>($r2);

        r10 = null;

        z3 = 1;

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.reflect.Method) $r5;

        $z1 = staticinvoke <org.springframework.core.BridgeMethodResolver: boolean isBridgeMethodFor(java.lang.reflect.Method,java.lang.reflect.Method,java.util.Map)>(r1, r6, $r3);

        if $z1 == 0 goto label3;

        return r6;

     label3:
        if r10 == null goto label6;

        if z3 == 0 goto label4;

        $r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r8 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8);

        if $z2 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z3 = $z4;

     label6:
        r10 = r6;

     label7:
        $z5 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label2;

        if z3 == 0 goto label8;

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (java.lang.reflect.Method) $r9;

        goto label9;

     label8:
        $r11 = null;

     label9:
        return $r11;
    }

    private static boolean isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.Class[] $r4, $r5;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        java.lang.reflect.Method r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method;

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map)
    {
        java.util.Map r2;
        java.lang.reflect.Method r0, r1, $r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.util.Map;

        $z0 = staticinvoke <org.springframework.core.BridgeMethodResolver: boolean isResolvedTypeMatch(java.lang.reflect.Method,java.lang.reflect.Method,java.util.Map)>(r0, r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findGenericDeclaration(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label2;

        $z1 = staticinvoke <org.springframework.core.BridgeMethodResolver: boolean isResolvedTypeMatch(java.lang.reflect.Method,java.lang.reflect.Method,java.util.Map)>($r3, r0, r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static java.lang.reflect.Method findGenericDeclaration(java.lang.reflect.Method)
    {
        java.lang.Class[] $r4;
        int i0, i1;
        java.lang.Class $r1, $r3, r5, r7, $r8;
        java.lang.reflect.Method r0, $r2, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r7 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label1:
        $r2 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchForMatch(java.lang.Class,java.lang.reflect.Method)>(r7, r0);

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 != 0 goto label2;

        return $r2;

     label2:
        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

     label3:
        $r8 = class "Ljava/lang/Object;";

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>($r3);

        i0 = lengthof $r4;

        i1 = 0;

        goto label6;

     label4:
        r5 = $r4[i1];

        $r6 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method searchForMatch(java.lang.Class,java.lang.reflect.Method)>(r5, r0);

        if $r6 == null goto label5;

        $z1 = virtualinvoke $r6.<java.lang.reflect.Method: boolean isBridge()>();

        if $z1 != 0 goto label5;

        return $r6;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label4;

        return null;
    }

    private static boolean isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map)
    {
        java.lang.reflect.GenericArrayType $r10;
        java.util.Map r6;
        int $i0, $i1, $i2, i3;
        java.lang.reflect.Method r0, r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] $r3;
        java.lang.reflect.Type r4, $r8, $r11;
        java.lang.reflect.Type[] $r1;
        java.lang.Class r5, $r7, $r9, $r12;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        r6 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r1;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

        goto label5;

     label2:
        r4 = $r1[i3];

        r5 = $r3[i3];

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getRawType(java.lang.reflect.Type,java.util.Map)>(r4, r6);

        $z2 = $r8 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        $r9 = virtualinvoke r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $r10 = (java.lang.reflect.GenericArrayType) $r8;

        $r11 = interfaceinvoke $r10.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r12 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveType(java.lang.reflect.Type,java.util.Map)>($r11, r6);

        $z3 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label6;

        return 0;

     label3:
        $r7 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveType(java.lang.reflect.Type,java.util.Map)>(r4, r6);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

     label5:
        $i2 = lengthof $r1;

        if i3 < $i2 goto label2;

     label6:
        return 1;
    }

    private static java.lang.reflect.Method searchForMatch(java.lang.Class, java.lang.reflect.Method)
    {
        java.lang.Class[] $r3;
        java.lang.Class r0;
        java.lang.String $r2;
        java.lang.reflect.Method r1, $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r4 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, $r2, $r3);

        return $r4;
    }
}
