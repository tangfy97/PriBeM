public final class org.waveprotocol.wave.model.document.util.Annotations extends java.lang.Object
{
    public static final char SEPARATOR;
    public static final char LOCAL;
    private static int prefixIncrementor;
    public static final char TRANSIENT;

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.Annotations r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Annotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String makeLocal(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static final java.lang.String makeUniqueLocal(java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r2, $r4;
        java.lang.String r3, $r5, $r6;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = <org.waveprotocol.wave.model.document.util.Annotations: int prefixIncrementor>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.model.document.util.Annotations: int prefixIncrementor> = $i1;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: java.lang.String makeLocal(java.lang.String)>($r5);

        return $r6;
    }

    public static final boolean isLocal(java.lang.String)
    {
        int $i1;
        char $c0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void checkPersistentKey(java.lang.String)
    {
        int $i0, $i1, $i3, $i5;
        java.lang.String r0, $r5, $r10;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Annotation key may not be null");

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to use local annotation key \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as a persistent key");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r10);

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(63);

        $i5 = (int) -1;

        if $i1 == $i5 goto label3;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Persistent annotation key \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' contains invalid characters");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r5);

     label3:
        return;
    }

    public static transient java.lang.String join(java.lang.String, java.lang.String[])
    {
        java.lang.String[] r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.lang.String join(char,java.lang.String,java.lang.String[])>(47, r0, r1);

        return $r2;
    }

    public static int firstAnnotationBoundary(org.waveprotocol.wave.model.document.ReadableAnnotationSet, int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableAnnotationSet r0;
        int i0, i1, $i2, $i3, $i5;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableAnnotationSet;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.Object;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        $i5 = (int) -1;

        if $i2 == $i5 goto label1;

        $i3 = $i2;

        goto label2;

     label1:
        $i3 = i1;

     label2:
        return $i3;
    }

    public static int lastAnnotationBoundary(org.waveprotocol.wave.model.document.ReadableAnnotationSet, int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableAnnotationSet r0;
        int i0, i1, $i2, $i3, $i5;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableAnnotationSet;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.Object;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: int lastAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        $i5 = (int) -1;

        if $i2 == $i5 goto label1;

        $i3 = $i2;

        goto label2;

     label1:
        $i3 = i0;

     label2:
        return $i3;
    }

    public static boolean guardedResetAnnotation(org.waveprotocol.wave.model.document.MutableAnnotationSet, int, int, java.lang.String, java.lang.Object)
    {
        int $i0, i1, $i2, i3, $i4, $i5, $i7, $i9, $i11;
        java.lang.String r1;
        boolean z0, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.MutableAnnotationSet r0;
        java.lang.Object r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.Object;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int size()>();

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(0, i1, r1, null);

        $i7 = (int) -1;

        if $i2 != $i7 goto label1;

        $i4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i1, i3, r1, r2);

        $i9 = (int) -1;

        if $i4 != $i9 goto label1;

        $i5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i3, $i0, r1, null);

        $i11 = (int) -1;

        if $i5 != $i11 goto label1;

        $z4 = 1;

        $z3 = 1;

        goto label2;

     label1:
        $z4 = 0;

        $z3 = 0;

     label2:
        z0 = $z3;

        if $z4 != 0 goto label3;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: void resetAnnotation(int,int,java.lang.String,java.lang.Object)>(i1, i3, r1, r2);

     label3:
        if z0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public static java.lang.Object getAlignedAnnotation(org.waveprotocol.wave.model.document.MutableAnnotationSet, int, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet r0;
        int $i0, i1, $i3;
        java.lang.Object $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label2;

        if i1 != 0 goto label1;

        return null;

     label1:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label3;

     label2:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int size()>();

        if i1 != $i0 goto label3;

        return null;

     label3:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>(i1, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.document.util.Annotations: char TRANSIENT> = 63;

        <org.waveprotocol.wave.model.document.util.Annotations: char LOCAL> = 64;

        <org.waveprotocol.wave.model.document.util.Annotations: char SEPARATOR> = 47;

        return;
    }
}
