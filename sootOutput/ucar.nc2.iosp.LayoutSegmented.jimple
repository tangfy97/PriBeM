public class ucar.nc2.iosp.LayoutSegmented extends java.lang.Object implements ucar.nc2.iosp.Layout
{
    private long total;
    private long done;
    private int elemSize;
    private long[] segPos;
    private long[] segMax;
    private long[] segMin;
    private ucar.nc2.iosp.IndexChunker chunker;
    private ucar.nc2.iosp.IndexChunker$Chunk chunkOuter;
    private ucar.nc2.iosp.IndexChunker$Chunk chunkInner;
    private boolean debugNext;
    private int needInner;
    private int doneInner;
    static final boolean $assertionsDisabled;

    public void <init>(long[], int[], int, int[], ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        byte $b5, $b13;
        int[] r6, r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.iosp.IndexChunker$Chunk $r17;
        ucar.ma2.Section r7;
        ucar.nc2.iosp.IndexChunker $r8, $r23;
        long $l0, $l2, $l3, $l4, $l7, $l10, $l12, l17;
        java.lang.AssertionError $r18, $r19, $r20, $r21, $r22;
        long[] r2, $r3, $r4, $r10, $r12;
        ucar.nc2.iosp.LayoutSegmented r0;
        int i1, $i6, $i8, $i9, $i11, $i14, $i15, $i16, i18, $i19, $i20;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        r2 := @parameter0: long[];

        r11 := @parameter1: int[];

        i1 := @parameter2: int;

        r6 := @parameter3: int[];

        r7 := @parameter4: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r17 = new ucar.nc2.iosp.IndexChunker$Chunk;

        specialinvoke $r17.<ucar.nc2.iosp.IndexChunker$Chunk: void <init>(long,int,long)>(0L, 0, 0L);

        r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner> = $r17;

        r0.<ucar.nc2.iosp.LayoutSegmented: boolean debugNext> = 0;

        r0.<ucar.nc2.iosp.LayoutSegmented: int needInner> = 0;

        r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner> = 0;

        $z0 = <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i15 = lengthof r2;

        $i14 = lengthof r11;

        if $i15 == $i14 goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        r0.<ucar.nc2.iosp.LayoutSegmented: long[] segPos> = r2;

        $i16 = lengthof r2;

        $r3 = newarray (long)[$i16];

        r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMin> = $r3;

        $r4 = newarray (long)[$i16];

        r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMax> = $r4;

        l17 = 0L;

        i18 = 0;

     label2:
        if i18 >= $i16 goto label6;

        $z2 = <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $l12 = r2[i18];

        $b13 = $l12 cmp 0L;

        $i19 = (int) $b13;

        if $i19 >= 0 goto label3;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label3:
        $z3 = <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $i11 = r11[i18];

        if $i11 > 0 goto label4;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label4:
        $z4 = <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $i8 = r11[i18];

        $i9 = $i8 % i1;

        if $i9 == 0 goto label5;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label5:
        $r10 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMin>;

        $r10[i18] = l17;

        $i6 = r11[i18];

        $l7 = (long) $i6;

        $l10 = l17 + $l7;

        l17 = $l10;

        $r12 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMax>;

        $r12[i18] = $l10;

        i18 = i18 + 1;

        goto label2;

     label6:
        $z1 = <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $l2 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>(r6);

        $l3 = (long) i1;

        $l4 = $l2 * $l3;

        $b5 = l17 cmp $l4;

        $i20 = (int) $b5;

        if $i20 >= 0 goto label7;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label7:
        $r23 = new ucar.nc2.iosp.IndexChunker;

        specialinvoke $r23.<ucar.nc2.iosp.IndexChunker: void <init>(int[],ucar.ma2.Section)>(r6, r7);

        r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker chunker> = $r23;

        $r8 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker chunker>;

        $l0 = virtualinvoke $r8.<ucar.nc2.iosp.IndexChunker: long getTotalNelems()>();

        r0.<ucar.nc2.iosp.LayoutSegmented: long total> = $l0;

        r0.<ucar.nc2.iosp.LayoutSegmented: long done> = 0L;

        r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize> = i1;

        return;
    }

    public long getTotalNelems()
    {
        ucar.nc2.iosp.LayoutSegmented r0;
        long $l0;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        $l0 = r0.<ucar.nc2.iosp.LayoutSegmented: long total>;

        return $l0;
    }

    public int getElemSize()
    {
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i0;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        $i0 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        return $i0;
    }

    public boolean hasNext()
    {
        byte $b2;
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i3;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        $l1 = r0.<ucar.nc2.iosp.LayoutSegmented: long done>;

        $l0 = r0.<ucar.nc2.iosp.LayoutSegmented: long total>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long getFilePos(long)
    {
        long l0, $l1, $l3, $l4, $l5, $l6;
        long[] $r1, $r2, $r3;
        byte $b2;
        ucar.nc2.iosp.LayoutSegmented r0;
        int i7, $i8;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        l0 := @parameter0: long;

        i7 = 0;

     label1:
        $r1 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMax>;

        $l1 = $r1[i7];

        $b2 = l0 cmp $l1;

        $i8 = (int) $b2;

        if $i8 < 0 goto label2;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r2 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segPos>;

        $l3 = $r2[i7];

        $l5 = $l3 + l0;

        $r3 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMin>;

        $l4 = $r3[i7];

        $l6 = $l5 - $l4;

        return $l6;
    }

    private int getMaxBytes(long)
    {
        long l0, $l1, $l3, $l4;
        long[] $r1, $r2;
        byte $b2;
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i5, i6, $i7;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        l0 := @parameter0: long;

        i6 = 0;

     label1:
        $r1 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMax>;

        $l1 = $r1[i6];

        $b2 = l0 cmp $l1;

        $i7 = (int) $b2;

        if $i7 < 0 goto label2;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r2 = r0.<ucar.nc2.iosp.LayoutSegmented: long[] segMax>;

        $l3 = $r2[i6];

        $l4 = $l3 - l0;

        $i5 = (int) $l4;

        return $i5;
    }

    public ucar.nc2.iosp.Layout$Chunk next()
    {
        long $l1, $l3, $l4, $l9, $l11, $l12;
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i0, $i2, $i5, $i6, $i7, $i8, $i10, $i13, $i14, $i15, $i16, $i17, $i18;
        ucar.nc2.iosp.Layout$Chunk $r1, r8;
        java.lang.String $r7;
        boolean $z0;
        java.io.PrintStream $r4;
        ucar.nc2.iosp.IndexChunker$Chunk $r2;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        $i0 = r0.<ucar.nc2.iosp.LayoutSegmented: int needInner>;

        if $i0 <= 0 goto label1;

        r8 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.Layout$Chunk nextInner(boolean,int)>(0, 0);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.Layout$Chunk nextOuter()>();

        r8 = $r1;

        $r2 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l1 = virtualinvoke $r2.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i2 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $l3 = (long) $i2;

        $l4 = $l1 * $l3;

        $i5 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: int getMaxBytes(long)>($l4);

        $i6 = interfaceinvoke $r1.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $i7 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $i8 = $i6 * $i7;

        if $i5 >= $i8 goto label2;

        r8 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.Layout$Chunk nextInner(boolean,int)>(1, $i5);

     label2:
        $l9 = r0.<ucar.nc2.iosp.LayoutSegmented: long done>;

        $i10 = interfaceinvoke r8.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $l11 = (long) $i10;

        $l12 = $l9 + $l11;

        r0.<ucar.nc2.iosp.LayoutSegmented: long done> = $l12;

        $i13 = r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner>;

        $i14 = interfaceinvoke r8.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $i15 = $i13 + $i14;

        r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner> = $i15;

        $i16 = r0.<ucar.nc2.iosp.LayoutSegmented: int needInner>;

        $i17 = interfaceinvoke r8.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $i18 = $i16 - $i17;

        r0.<ucar.nc2.iosp.LayoutSegmented: int needInner> = $i18;

        $z0 = r0.<ucar.nc2.iosp.LayoutSegmented: boolean debugNext>;

        if $z0 == 0 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" next chunk: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label3:
        return r8;
    }

    private ucar.nc2.iosp.Layout$Chunk nextInner(boolean, int)
    {
        boolean z0;
        ucar.nc2.iosp.IndexChunker$Chunk $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long $l1, $l3, $l5, $l6, $l7, $l15, $l17, $l19, $l20, $l21, $l22, $l25;
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i0, $i2, $i4, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i23, $i24, $i26, i27;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        z0 := @parameter0: boolean;

        i27 := @parameter1: int;

        if z0 == 0 goto label1;

        $r8 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $i23 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $i24 = i27 / $i23;

        virtualinvoke $r8.<ucar.nc2.iosp.IndexChunker$Chunk: void setNelems(int)>($i24);

        $r10 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r9 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l25 = virtualinvoke $r9.<ucar.nc2.iosp.IndexChunker$Chunk: long getDestElem()>();

        virtualinvoke $r10.<ucar.nc2.iosp.IndexChunker$Chunk: void setDestElem(long)>($l25);

        $r11 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $i26 = virtualinvoke $r11.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        r0.<ucar.nc2.iosp.LayoutSegmented: int needInner> = $i26;

        r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner> = 0;

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r1 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $i0 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        virtualinvoke $r2.<ucar.nc2.iosp.IndexChunker$Chunk: void incrDestElem(int)>($i0);

        $r3 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l1 = virtualinvoke $r3.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i2 = r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner>;

        $l3 = (long) $i2;

        $l6 = $l1 + $l3;

        $i4 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $l5 = (long) $i4;

        $l7 = $l6 * $l5;

        $i8 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: int getMaxBytes(long)>($l7);

        $i10 = r0.<ucar.nc2.iosp.LayoutSegmented: int needInner>;

        $i9 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $i11 = $i10 * $i9;

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i11);

        $r4 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $i13 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $i14 = $i12 / $i13;

        virtualinvoke $r4.<ucar.nc2.iosp.IndexChunker$Chunk: void setNelems(int)>($i14);

     label2:
        $r6 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r5 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l15 = virtualinvoke $r5.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i16 = r0.<ucar.nc2.iosp.LayoutSegmented: int doneInner>;

        $l17 = (long) $i16;

        $l20 = $l15 + $l17;

        $i18 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $l19 = (long) $i18;

        $l21 = $l20 * $l19;

        $l22 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: long getFilePos(long)>($l21);

        virtualinvoke $r6.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l22);

        $r7 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        return $r7;
    }

    public ucar.nc2.iosp.Layout$Chunk nextOuter()
    {
        ucar.nc2.iosp.IndexChunker$Chunk $r2, $r3, $r4, $r5;
        ucar.nc2.iosp.IndexChunker $r1;
        long $l0, $l2, $l3, $l4;
        ucar.nc2.iosp.LayoutSegmented r0;
        int $i1;

        r0 := @this: ucar.nc2.iosp.LayoutSegmented;

        $r1 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker chunker>;

        $r2 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk next()>();

        r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter> = $r2;

        $r3 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l0 = virtualinvoke $r3.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i1 = r0.<ucar.nc2.iosp.LayoutSegmented: int elemSize>;

        $l2 = (long) $i1;

        $l3 = $l0 * $l2;

        $l4 = specialinvoke r0.<ucar.nc2.iosp.LayoutSegmented: long getFilePos(long)>($l3);

        $r4 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        virtualinvoke $r4.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l4);

        $r5 = r0.<ucar.nc2.iosp.LayoutSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/LayoutSegmented;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.LayoutSegmented: boolean $assertionsDisabled> = $z1;

        return;
    }
}
