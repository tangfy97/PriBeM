class com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1 extends com.hp.hpl.jena.util.iterator.Filter
{
    final com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph this$0;

    void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1 r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1: com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph this$0> = r1;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.Filter: void <init>()>();

        return;
    }

    public boolean accept(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1 r4;
        boolean $z0, $z1, $z2;

        r4 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 != 0 goto label2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public volatile boolean accept(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1 r0;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph$1: boolean accept(com.hp.hpl.jena.graph.Triple)>($r2);

        return $z0;
    }
}
