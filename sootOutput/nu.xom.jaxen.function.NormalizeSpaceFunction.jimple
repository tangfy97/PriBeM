public class nu.xom.jaxen.function.NormalizeSpaceFunction extends java.lang.Object implements nu.xom.jaxen.Function
{

    public void <init>()
    {
        nu.xom.jaxen.function.NormalizeSpaceFunction r0;

        r0 := @this: nu.xom.jaxen.function.NormalizeSpaceFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call(nu.xom.jaxen.Context, java.util.List) throws nu.xom.jaxen.FunctionCallException
    {
        nu.xom.jaxen.FunctionCallException $r1;
        java.util.List r0, $r6;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r5, $r8;
        nu.xom.jaxen.Context r3;
        nu.xom.jaxen.Navigator $r4, $r7;
        nu.xom.jaxen.function.NormalizeSpaceFunction r9;

        r9 := @this: nu.xom.jaxen.function.NormalizeSpaceFunction;

        r3 := @parameter0: nu.xom.jaxen.Context;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r6 = virtualinvoke r3.<nu.xom.jaxen.Context: java.util.List getNodeSet()>();

        $r7 = virtualinvoke r3.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r8 = staticinvoke <nu.xom.jaxen.function.NormalizeSpaceFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r6, $r7);

        return $r8;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = virtualinvoke r3.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r5 = staticinvoke <nu.xom.jaxen.function.NormalizeSpaceFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r2, $r4);

        return $r5;

     label2:
        $r1 = new nu.xom.jaxen.FunctionCallException;

        specialinvoke $r1.<nu.xom.jaxen.FunctionCallException: void <init>(java.lang.String)>("normalize-space() cannot have more than one argument");

        throw $r1;
    }

    public static java.lang.String evaluate(java.lang.Object, nu.xom.jaxen.Navigator)
    {
        int $i1, $i2, $i5, i6, i7, i8, $i9, $i10;
        java.lang.String $r2, $r4;
        nu.xom.jaxen.Navigator r1;
        boolean $z0, $z1, z2;
        char $c0, $c3, $c4;
        char[] $r3;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: nu.xom.jaxen.Navigator;

        $r2 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>(r0, r1);

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        i6 = 0;

        i7 = 0;

        z2 = 0;

        i8 = 0;

     label1:
        $i9 = lengthof $r3;

        if i8 >= $i9 goto label4;

        $c0 = $r3[i8];

        $z0 = staticinvoke <nu.xom.jaxen.function.NormalizeSpaceFunction: boolean isXMLSpace(char)>($c0);

        if $z0 == 0 goto label3;

        if z2 == 0 goto label2;

        $i5 = i6;

        i6 = i6 + 1;

        $r3[$i5] = 32;

     label2:
        i8 = i8 + 1;

        $i10 = lengthof $r3;

        if i8 >= $i10 goto label1;

        $c4 = $r3[i8];

        $z1 = staticinvoke <nu.xom.jaxen.function.NormalizeSpaceFunction: boolean isXMLSpace(char)>($c4);

        if $z1 != 0 goto label2;

        goto label1;

     label3:
        $i1 = i6;

        i6 = i6 + 1;

        $i2 = i8;

        i8 = i8 + 1;

        $c3 = $r3[$i2];

        $r3[$i1] = $c3;

        z2 = 1;

        i7 = i6;

        goto label1;

     label4:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, 0, i7);

        return $r4;
    }

    private static boolean isXMLSpace(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 10 goto label1;

        $i3 = (int) c0;

        if $i3 == 13 goto label1;

        $i4 = (int) c0;

        if $i4 != 9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
