public class org.eclipse.jdt.internal.compiler.ast.SwitchStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Expression expression;
    public org.eclipse.jdt.internal.compiler.ast.Statement[] statements;
    public org.eclipse.jdt.internal.compiler.lookup.BlockScope scope;
    public int explicitDeclarations;
    public org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel;
    public org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases;
    public org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase;
    public int blockStart;
    public int caseCount;
    int[] constants;
    public static final int CASE;
    public static final int FALLTHROUGH;
    public static final int ESCAPING;
    public org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding synthetic;
    int preSwitchInitStateIndex;
    int mergedInitStateIndex;

    public void <init>()
    {
        int $i1, $i3;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex> = $i1;

        $i3 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex> = $i3;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r7, $r12, $r17;
        byte b11, b13, b14;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r46;
        org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding $r23;
        java.lang.Throwable $r47;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1, $r13, $r14, $r18, $r19, $r20, $r28, $r32, $r33, $r35, $r41, $r42, $r44, $r48, $r49, $r54;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r4, $r29, r50, r51;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r21;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r10, $r11, $r15, $r16, $r30, $r52, $r53;
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r8, $r24, $r25;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r34, $r43;
        org.eclipse.jdt.internal.compiler.ast.Statement r26;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r9;
        boolean $z0, z1, $z2;
        org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext $r5;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement $r27, $r31, $r36, $r38, $r40, $r45, $r56;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement[] $r37, $r39;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r22;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding r55;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r6;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10, i12;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r50 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r50);

        $r5 = new org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext;

        $r6 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel> = $r6;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r2, r0, $r6);

        r51 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i0 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r4);

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex> = $i0;

        i10 = 0;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r8 == null goto label11;

        z1 = 0;

        b11 = 0;

        b14 = 0;

        b13 = 0;

        i12 = 0;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i4 = lengthof $r24;

        goto label10;

     label02:
        $r25 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        r26 = $r25[i12];

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if i10 >= $i5 goto label04;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r38 = $r37[i10];

        if r26 != $r38 goto label04;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r39 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r40 = $r39[i10];

        $r41.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = $r40;

        i10 = i10 + 1;

        if b13 != 1 goto label03;

        $i8 = r26.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i9 = $i8 & 536870912;

        if $i9 != 0 goto label03;

        $r42 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r43 = virtualinvoke $r42.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r44 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r45 = $r44.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase>;

        virtualinvoke $r43.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void possibleFallThroughCase(org.eclipse.jdt.internal.compiler.ast.CaseStatement)>($r45);

     label03:
        $r52 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        r51 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r52);

        z1 = 0;

        b11 = 0;

        b14 = 0;

        b13 = 0;

        goto label07;

     label04:
        $r27 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if r26 != $r27 goto label06;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r31 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        $r32.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = $r31;

        if b14 != 1 goto label05;

        $i6 = r26.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i7 = $i6 & 536870912;

        if $i7 != 0 goto label05;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r34 = virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r35 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r36 = $r35.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase>;

        virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void possibleFallThroughCase(org.eclipse.jdt.internal.compiler.ast.CaseStatement)>($r36);

     label05:
        $r53 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        r51 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r53);

        z1 = 0;

        b11 = 0;

        b14 = 0;

        b13 = 0;

        goto label07;

     label06:
        b11 = 1;

        b14 = 1;

        b13 = 1;

     label07:
        $r54 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $z2 = virtualinvoke r26.<org.eclipse.jdt.internal.compiler.ast.Statement: boolean complainIfUnreachable(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r51, $r54, z1);

        if $z2 != 0 goto label08;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r29 = virtualinvoke r26.<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r28, $r5, r51);

        r51 = $r29;

        $r30 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        if $r29 != $r30 goto label09;

        b11 = 2;

        b14 = 2;

        b13 = 2;

        goto label09;

     label08:
        z1 = 1;

     label09:
        i12 = i12 + 1;

     label10:
        if i12 < i4 goto label02;

     label11:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r46 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if $i1 <= 0 goto label12;

        $z0 = virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z0 == 0 goto label12;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ClassScope classScope()>();

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceContext>;

        r55 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding binding>;

        $r23 = virtualinvoke r55.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding addSyntheticMethodForSwitchEnum(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r46);

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding synthetic> = $r23;

     label12:
        $r56 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if $r56 != null goto label15;

        $r15 = $r5.<org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $r16 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r15);

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r16);

        $r17 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i3 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r4);

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex> = $i3;

     label13:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r18 == null goto label14;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r19.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label14:
        return $r4;

     label15:
        $r10 = $r5.<org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $r11 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r10);

        $r12 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i2 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r11);

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex> = $i2;

     label16:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r13 == null goto label17;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r14.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label17:
        return $r11;

     label18:
        $r47 := @caughtexception;

        $r48 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r48 == null goto label19;

        $r49 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r49.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label19:
        throw $r47;

        catch java.lang.Throwable from label01 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        byte $b32, $b34;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r40;
        org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding $r36;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r33;
        java.lang.Throwable $r43;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r11, $r13, $r16, $r17, $r18, $r23, $r28, $r41, $r42, $r44, $r45, $r47, $r50;
        long $l28, $l29, $l30, $l31, $l33;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;
        char[] $r38;
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r19, $r20, $r48;
        org.eclipse.jdt.internal.compiler.codegen.CaseLabel[] r3;
        org.eclipse.jdt.internal.compiler.ast.Statement r49;
        org.eclipse.jdt.internal.compiler.ast.Expression $r10, $r12, $r35, $r37;
        int[] $r29, $r30, $r31, $r32, $r34, r46;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement $r6, $r9, $r15, $r21, $r22, $r25, $r27, $r39;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement[] $r4, $r24, $r26;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r2, $r14;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i35, $i36, i37, i38, i39, i40, $i41, i42, i43, i44, $i45, $i46, $i48, $i50, $i52;
        double $d0, $d1;
        org.eclipse.jdt.internal.compiler.codegen.CaseLabel $r7, $r51, $r52;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r11 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

     label01:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label04;

     label02:
        $r41 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r41 == null goto label03;

        $r42 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r42.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label03:
        return;

     label04:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void initialize(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        r3 = newarray (org.eclipse.jdt.internal.compiler.codegen.CaseLabel)[$i3];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if $i4 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        i37 = 0;

        goto label08;

     label07:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r6 = $r4[i37];

        $r51 = new org.eclipse.jdt.internal.compiler.codegen.CaseLabel;

        specialinvoke $r51.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        r3[i37] = $r51;

        $r6.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.codegen.CaseLabel targetLabel> = $r51;

        $r7 = r3[i37];

        $i6 = $r7.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: int tagBits>;

        $i7 = $i6 | 2;

        $r7.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: int tagBits> = $i7;

        i37 = i37 + 1;

     label08:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if i37 < $i5 goto label07;

        $r52 = new org.eclipse.jdt.internal.compiler.codegen.CaseLabel;

        specialinvoke $r52.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        if z0 == 0 goto label09;

        $i35 = $r52.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: int tagBits>;

        $i36 = $i35 | 2;

        $r52.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: int tagBits> = $i36;

     label09:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if $r9 == null goto label10;

        $r39 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        $r39.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.codegen.CaseLabel targetLabel> = $r52;

     label10:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r40 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $z1 = virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z1 == 0 goto label12;

        if z0 == 0 goto label11;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding synthetic>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokestatic(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>($r36);

        $r37 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r11, r1, 1);

        $r38 = virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] constantPoolName()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeEnumOrdinal(char[])>($r38);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iaload()>();

        goto label13;

     label11:
        $r35 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r11, r1, 0);

        goto label13;

     label12:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r11, r1, z0);

     label13:
        if z0 == 0 goto label19;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        r46 = newarray (int)[$i19];

        i38 = 0;

        goto label15;

     label14:
        r46[i38] = i38;

        i38 = i38 + 1;

     label15:
        $i20 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if i38 < $i20 goto label14;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $r29 = newarray (int)[$i21];

        $i22 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 0, $r29, 0, $i22);

        $i23 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $i24 = $i23 - 1;

        staticinvoke <org.eclipse.jdt.internal.compiler.codegen.CodeStream: void sort(int[],int,int,int[])>($r29, 0, $i24, r46);

        $i25 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $i26 = $i25 - 1;

        i39 = $r29[$i26];

        i40 = $r29[0];

        $i27 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $d0 = (double) $i27;

        $d1 = $d0 * 2.5;

        $l31 = (long) $d1;

        $l29 = (long) i39;

        $l28 = (long) i40;

        $l30 = $l29 - $l28;

        $b32 = $l31 cmp $l30;

        $i45 = (int) $b32;

        if $i45 <= 0 goto label17;

        if i39 <= 2147418112 goto label16;

        $r33 = virtualinvoke r11.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l33 = $r33.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $b34 = $l33 cmp 3145728L;

        $i46 = (int) $b34;

        if $i46 >= 0 goto label16;

        $r34 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void 'lookupswitch'(org.eclipse.jdt.internal.compiler.codegen.CaseLabel,int[],int[],org.eclipse.jdt.internal.compiler.codegen.CaseLabel[])>($r52, $r34, r46, r3);

        goto label18;

     label16:
        $r32 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void 'tableswitch'(org.eclipse.jdt.internal.compiler.codegen.CaseLabel,int,int,int[],int[],org.eclipse.jdt.internal.compiler.codegen.CaseLabel[])>($r52, i40, i39, $r32, r46, r3);

        goto label18;

     label17:
        $r31 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void 'lookupswitch'(org.eclipse.jdt.internal.compiler.codegen.CaseLabel,int[],int[],org.eclipse.jdt.internal.compiler.codegen.CaseLabel[])>($r52, $r31, r46, r3);

     label18:
        $r47 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $i41 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>($r47, $i41);

     label19:
        i42 = 0;

        $r48 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r48 == null goto label25;

        i43 = 0;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i44 = lengthof $r19;

        goto label24;

     label20:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        r49 = $r20[i43];

        $i14 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if i42 >= $i14 goto label22;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r25 = $r24[i42];

        if r49 != $r25 goto label22;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r27 = $r26[i42];

        $r28.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = $r27;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex>;

        $i48 = (int) -1;

        if $i17 == $i48 goto label21;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i18);

     label21:
        i42 = i42 + 1;

        goto label23;

     label22:
        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if r49 != $r21 goto label23;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        $r23.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = $r22;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex>;

        $i50 = (int) -1;

        if $i15 == $i50 goto label23;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int preSwitchInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i16);

     label23:
        $r50 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke r49.<org.eclipse.jdt.internal.compiler.ast.Statement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>($r50, r1);

        i43 = i43 + 1;

     label24:
        if i43 < i44 goto label20;

     label25:
        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex>;

        $i52 = (int) -1;

        if $i8 == $i52 goto label26;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i12);

        $i13 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i13);

     label26:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r13 == r11 goto label27;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void exitUserScope(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r18);

     label27:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if $r15 != null goto label28;

        $i11 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceEnd>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int,boolean)>($i11, $i10, 1);

        virtualinvoke $r52.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: void place()>();

     label28:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i9);

        goto label31;

     label29:
        $r43 := @caughtexception;

        $r44 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r44 == null goto label30;

        $r45 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r45.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label30:
        throw $r43;

     label31:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r16 == null goto label32;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r17.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label32:
        return;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label04 to label29 with label29;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r5, $r8, $r10, $r12, $r14;
        org.eclipse.jdt.internal.compiler.ast.Statement $r9, $r11, $r13;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        java.lang.StringBuffer r0, $r1, $r4, $r6, $r7;
        int i0, $i1, i2, $i3;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r2;
        boolean $z0;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SwitchStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("switch (");

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") {");

        $r5 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r5 == null goto label5;

        i2 = 0;

        goto label4;

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r8 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r9 = $r8[i2];

        $z0 = $r9 instanceof org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        if $z0 == 0 goto label2;

        $r12 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r13 = $r12[i2];

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>(i0, r0);

        goto label3;

     label2:
        $r10 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r11 = $r10[i2];

        $i1 = i0 + 2;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>($i1, r0);

     label3:
        i2 = i2 + 1;

     label4:
        $r14 = r2.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i3 = lengthof $r14;

        if i2 < $i3 goto label1;

     label5:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r6 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SwitchStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return $r7;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding r56;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3, $r10, r53;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding[] $r12;
        org.eclipse.jdt.internal.compiler.impl.Constant $r23, $r24;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6;
        java.lang.Throwable $r50;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1, $r4, $r22, $r28, $r30, $r34, $r51, $r52, $r57, $r58;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r0;
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r17, $r20, $r54;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r14, $r15, $r29, $r31, $r35, $r43;
        org.eclipse.jdt.internal.compiler.ast.Statement r21;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r41, $r44, $r46, $r48;
        int[] $r7, $r8, $r13, $r19, $r25, $r38, $r39, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement $r5, r26, $r27, $r33, $r37;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement[] $r18, $r32, $r36, r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24, $i25, i26, i27, i28, $i30;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r9, $r11;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r42, $r45, $r47, $r49;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

     label01:
        z6 = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        r53 = $r3;

        if $r3 == null goto label07;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r41.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r3, $r3);

        $z0 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z0 != 0 goto label02;

        r53 = null;

        goto label07;

     label02:
        $z1 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z1 == 0 goto label04;

        $r48 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r47 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        $z4 = virtualinvoke $r48.<org.eclipse.jdt.internal.compiler.ast.Expression: boolean isConstantValueOfTypeAssignableToType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r3, $r47);

        if $z4 == 0 goto label03;

        goto label07;

     label03:
        $r49 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        $z5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r49);

        if $z5 == 0 goto label06;

        goto label07;

     label04:
        $z2 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z2 == 0 goto label05;

        z6 = 1;

        goto label07;

     label05:
        $r42 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        $z3 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: boolean isBoxingCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r3, $r42);

        if $z3 == 0 goto label06;

        $r46 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r45 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r45, $r3);

        goto label07;

     label06:
        $r43 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r44 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r43.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void incorrectSwitchType(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r44, $r3);

        r53 = null;

     label07:
        $r54 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r54 == null goto label19;

        $r58 = new org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        specialinvoke $r58.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void <init>(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope> = $r58;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i14 = lengthof $r17;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.CaseStatement)[$i14];

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases> = $r18;

        $r19 = newarray (int)[$i14];

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants> = $r19;

        r55 = (org.eclipse.jdt.internal.compiler.ast.CaseStatement[]) null;

        i19 = 0;

        i20 = 0;

        i21 = 0;

        goto label18;

     label08:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        r21 = $r20[i21];

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r23 = virtualinvoke r21.<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.impl.Constant resolveCase(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.SwitchStatement)>($r22, r53, r0);

        $r24 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r23 == $r24 goto label17;

        $i15 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        i22 = 0;

        goto label16;

     label09:
        $r25 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $i16 = $r25[i22];

        if $i16 != $i15 goto label15;

        r26 = (org.eclipse.jdt.internal.compiler.ast.CaseStatement) r21;

        if r55 != null goto label10;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r31 = virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r32 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r33 = $r32[i22];

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void duplicateCase(org.eclipse.jdt.internal.compiler.ast.CaseStatement)>($r33);

        $r34 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r35 = virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void duplicateCase(org.eclipse.jdt.internal.compiler.ast.CaseStatement)>(r26);

        r55 = newarray (org.eclipse.jdt.internal.compiler.ast.CaseStatement)[$i14];

        i23 = i19 + 1;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $r37 = $r36[i22];

        r55[i19] = $r37;

        i19 = i23 + 1;

        r55[i23] = r26;

        goto label15;

     label10:
        z7 = 0;

        i24 = 2;

        goto label13;

     label11:
        $r27 = r55[i24];

        if $r27 != r21 goto label12;

        z7 = 1;

        goto label14;

     label12:
        i24 = i24 + 1;

     label13:
        if i24 < i19 goto label11;

     label14:
        if z7 != 0 goto label15;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r29 = virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void duplicateCase(org.eclipse.jdt.internal.compiler.ast.CaseStatement)>(r26);

        $i17 = i19;

        i19 = i19 + 1;

        r55[$i17] = r26;

     label15:
        i22 = i22 + 1;

     label16:
        if i22 < i20 goto label09;

        $r38 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $i18 = i20;

        i20 = i20 + 1;

        $r38[$i18] = $i15;

     label17:
        i21 = i21 + 1;

     label18:
        if i21 < $i14 goto label08;

        if $i14 == i20 goto label20;

        $r40 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $r39 = newarray (int)[i20];

        r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants> = $r39;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, 0, $r39, 0, i20);

        goto label20;

     label19:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int bits>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label20;

        $r15 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i13 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int blockStart>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceEnd>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undocumentedEmptyBlock(int,int)>($i13, $i12);

     label20:
        if z6 == 0 goto label32;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if $r5 != null goto label32;

        $r6 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $i2 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int getSeverity(long)>(2199023255552L);

        $i30 = (int) -1;

        if $i2 == $i30 goto label32;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        if $r7 != null goto label21;

        $i25 = 0;

        goto label22;

     label21:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $i25 = lengthof $r8;

     label22:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if $i25 != $i3 goto label32;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $r9 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) r53;

        $i5 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: int enumConstantCount()>();

        if $i4 == $i5 goto label32;

        $r10 = virtualinvoke r53.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>();

        $r11 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) $r10;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding[] fields()>();

        i26 = 0;

        i27 = lengthof $r12;

        goto label29;

     label23:
        r56 = $r12[i26];

        $i6 = r56.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: int modifiers>;

        $i7 = $i6 & 16384;

        if $i7 != 0 goto label24;

        goto label28;

     label24:
        i28 = 0;

        goto label27;

     label25:
        $i9 = r56.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: int id>;

        $i11 = $i9 + 1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int[] constants>;

        $i10 = $r13[i28];

        if $i11 != $i10 goto label26;

        goto label28;

     label26:
        i28 = i28 + 1;

     label27:
        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        if i28 < $i8 goto label25;

        $r14 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void missingEnumConstantCase(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r0, r56);

     label28:
        i26 = i26 + 1;

     label29:
        if i26 < i27 goto label23;

        goto label32;

     label30:
        $r50 := @caughtexception;

        $r51 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r51 == null goto label31;

        $r52 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r52.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label31:
        throw $r50;

     label32:
        $r57 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r57 == null goto label33;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = null;

     label33:
        return;

        catch java.lang.Throwable from label01 to label30 with label30;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2, $r3, $r8;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.Statement $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label3;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, $r3);

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r5 == null goto label3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i0 = lengthof $r6;

        i1 = 0;

        goto label2;

     label1:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r9 = $r7[i1];

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Statement: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, $r8);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void branchChainTo(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r1, r2, $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        $i0 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int forwardReferenceCount()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void becomeDelegateFor(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r3);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int ESCAPING> = 2;

        <org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int FALLTHROUGH> = 1;

        <org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int CASE> = 0;

        return;
    }
}
