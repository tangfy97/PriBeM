public class org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory extends org.apache.lucene.analysis.util.TokenizerFactory
{
    private final char delimiter;
    private final char replacement;
    private final boolean reverse;
    private final int skip;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory r0;
        char $c0, $c1, $c2;
        java.lang.IllegalArgumentException $r2;
        java.util.Map r1;
        int $i3;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenizerFactory: void <init>(java.util.Map)>(r1);

        $c0 = virtualinvoke r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char getChar(java.util.Map,java.lang.String,char)>(r1, "delimiter", 47);

        r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char delimiter> = $c0;

        $c1 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char delimiter>;

        $c2 = virtualinvoke r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char getChar(java.util.Map,java.lang.String,char)>(r1, "replace", $c1);

        r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char replacement> = $c2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "reverse", 0);

        r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: boolean reverse> = $z0;

        $i3 = virtualinvoke r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "skip", 0);

        r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: int skip> = $i3;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public org.apache.lucene.analysis.Tokenizer create(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer $r4;
        org.apache.lucene.util.AttributeSource$AttributeFactory r2;
        org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory r0;
        char $c1, $c2, $c4, $c5;
        java.io.Reader r3;
        org.apache.lucene.analysis.path.PathHierarchyTokenizer $r1;
        int $i0, $i3;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory;

        r2 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r3 := @parameter1: java.io.Reader;

        $z0 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: boolean reverse>;

        if $z0 == 0 goto label1;

        $r4 = new org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer;

        $c5 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char delimiter>;

        $c4 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char replacement>;

        $i3 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: int skip>;

        specialinvoke $r4.<org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader,char,char,int)>(r2, r3, $c5, $c4, $i3);

        return $r4;

     label1:
        $r1 = new org.apache.lucene.analysis.path.PathHierarchyTokenizer;

        $c2 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char delimiter>;

        $c1 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: char replacement>;

        $i0 = r0.<org.apache.lucene.analysis.path.PathHierarchyTokenizerFactory: int skip>;

        specialinvoke $r1.<org.apache.lucene.analysis.path.PathHierarchyTokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader,char,char,int)>(r2, r3, $c2, $c1, $i0);

        return $r1;
    }
}
