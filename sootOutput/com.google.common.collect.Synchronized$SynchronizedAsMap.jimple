class com.google.common.collect.Synchronized$SynchronizedAsMap extends com.google.common.collect.Synchronized$SynchronizedMap
{
    transient java.util.Set asMapEntrySet;
    transient java.util.Collection asMapValues;
    private static final long serialVersionUID;

    void <init>(java.util.Map, java.lang.Object)
    {
        java.lang.Object r2;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: void <init>(java.util.Map,java.lang.Object)>(r1, r2);

        return;
    }

    public java.util.Collection get(java.lang.Object)
    {
        java.lang.Throwable $r6;
        java.util.Collection r4, $r7;
        java.lang.Object $r1, r2, $r3, $r5;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.util.Collection) $r3;

        if r4 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r5 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        $r7 = staticinvoke <com.google.common.collect.Synchronized: java.util.Collection access$400(java.util.Collection,java.lang.Object)>(r4, $r5);

     label3:
        exitmonitor $r1;

     label4:
        return $r7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.Set entrySet()
    {
        java.lang.Throwable $r8;
        java.util.Set $r2, $r3, $r6;
        java.util.Map $r5;
        java.lang.Object $r1, $r7;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries $r4;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Set asMapEntrySet>;

        if $r2 != null goto label2;

        $r4 = new com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r5 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Map delegate()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        specialinvoke $r4.<com.google.common.collect.Synchronized$SynchronizedAsMapEntries: void <init>(java.util.Set,java.lang.Object)>($r6, $r7);

        r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Set asMapEntrySet> = $r4;

     label2:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Set asMapEntrySet>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Collection values()
    {
        java.lang.Throwable $r8;
        java.util.Collection $r2, $r3, $r6;
        java.util.Map $r5;
        com.google.common.collect.Synchronized$SynchronizedAsMapValues $r4;
        java.lang.Object $r1, $r7;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Collection asMapValues>;

        if $r2 != null goto label2;

        $r4 = new com.google.common.collect.Synchronized$SynchronizedAsMapValues;

        $r5 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Map delegate()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.lang.Object mutex>;

        specialinvoke $r4.<com.google.common.collect.Synchronized$SynchronizedAsMapValues: void <init>(java.util.Collection,java.lang.Object)>($r6, $r7);

        r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Collection asMapValues> = $r4;

     label2:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Collection asMapValues>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collection $r1;
        java.lang.Object r2;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Collection values()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.collect.Synchronized$SynchronizedAsMap r0;
        java.util.Collection $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedAsMap: java.util.Collection get(java.lang.Object)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.Synchronized$SynchronizedAsMap: long serialVersionUID> = 0L;

        return;
    }
}
