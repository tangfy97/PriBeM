public class org.eclipse.jdt.internal.compiler.ast.ThisReference extends org.eclipse.jdt.internal.compiler.ast.Reference
{

    public static org.eclipse.jdt.internal.compiler.ast.ThisReference implicitThis()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.ThisReference $r0;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ThisReference;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: void <init>(int,int)>(0, 0);

        $i0 = $r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int bits>;

        $i1 = $i0 | 4;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int bits> = $i1;

        return $r0;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Reference: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int sourceStart> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int sourceEnd> = i1;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r1;
        org.eclipse.jdt.internal.compiler.ast.Assignment r4;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r0 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.ast.Assignment;

        z0 := @parameter4: boolean;

        return r0;
    }

    public boolean checkAccess(org.eclipse.jdt.internal.compiler.lookup.MethodScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1, $r3;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r2;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r0;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodScope;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: boolean isConstructorCall>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void fieldsOrThisBeforeConstructorInvocation(org.eclipse.jdt.internal.compiler.ast.ThisReference)>(r2);

        return 0;

     label1:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: boolean isStatic>;

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void errorThisSuperInStatic(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r2);

        return 0;

     label2:
        return 1;
    }

    public void generateAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;
        org.eclipse.jdt.internal.compiler.ast.Assignment r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.Assignment;

        z0 := @parameter3: boolean;

        return;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        int i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r1;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void aload_0()>();

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int bits>;

        $i2 = $i1 & 4;

        if $i2 != 0 goto label2;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i3);

     label2:
        return;
    }

    public void generateCompoundAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Expression, int, int, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.Expression r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        return;
    }

    public void generatePostIncrement(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.CompoundAssignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;
        org.eclipse.jdt.internal.compiler.ast.CompoundAssignment r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.CompoundAssignment;

        z0 := @parameter3: boolean;

        return;
    }

    public boolean isImplicitThis()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: int bits>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isThis()
    {
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        return 1;
    }

    public int nullStatus(org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r1;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $i1 = (int) -1;

        return $i1;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r1, $r2;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: boolean isImplicitThis()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("this");

        return $r2;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r3;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r0;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: boolean isImplicitThis()>();

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: boolean checkAccess(org.eclipse.jdt.internal.compiler.lookup.MethodScope)>($r4);

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingReceiverType()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r3;

        return $r3;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ThisReference r1;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ThisReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
