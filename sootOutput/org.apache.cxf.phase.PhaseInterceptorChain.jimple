public class org.apache.cxf.phase.PhaseInterceptorChain extends java.lang.Object implements org.apache.cxf.interceptor.InterceptorChain
{
    public static final java.lang.String PREVIOUS_MESSAGE;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.ThreadLocal CURRENT_MESSAGE;
    private final java.util.Map nameMap;
    private final org.apache.cxf.phase.Phase[] phases;
    private org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads;
    private org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails;
    private boolean[] hasAfters;
    private org.apache.cxf.interceptor.InterceptorChain$State state;
    private org.apache.cxf.message.Message pausedMessage;
    private org.apache.cxf.transport.MessageObserver faultObserver;
    private org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator;
    private final boolean isFineLogging;
    private boolean faultOccurred;

    private void <init>(org.apache.cxf.phase.PhaseInterceptorChain)
    {
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r11, $r12, $r13, $r15, $r17, $r18;
        java.util.logging.Level $r1;
        java.util.Map $r5;
        int i0, $i1, i2;
        boolean $z0;
        org.apache.cxf.phase.Phase[] $r6, $r7;
        org.apache.cxf.interceptor.InterceptorChain$State $r3;
        boolean[] $r8, $r9, $r10;
        java.util.logging.Logger $r2;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder $r14, $r16, r19, r20;
        org.apache.cxf.phase.PhaseInterceptorChain r0, r4;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r4 := @parameter0: org.apache.cxf.phase.PhaseInterceptorChain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging> = $z0;

        $r3 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r3;

        $r5 = r4.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.Map nameMap>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.Map nameMap> = $r5;

        $r6 = r4.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases> = $r6;

        $r7 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases>;

        i0 = lengthof $r7;

        $r8 = newarray (boolean)[i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters> = $r8;

        $r10 = r4.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters>;

        $r9 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, i0);

        $r11 = newarray (org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)[i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads> = $r11;

        $r12 = newarray (org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)[i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails> = $r12;

        r19 = null;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        $r13 = r4.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r20 = $r13[i2];

     label2:
        if r20 == null goto label5;

        $i1 = r20.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: int phaseIdx>;

        if $i1 != i2 goto label5;

        $r14 = new org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder;

        specialinvoke $r14.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: void <init>(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)>(r20);

        $r14.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = r19;

        if r19 == null goto label3;

        r19.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r14;

     label3:
        $r15 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r16 = $r15[i2];

        if $r16 != null goto label4;

        $r18 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r18[i2] = $r14;

     label4:
        $r17 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r17[i2] = $r14;

        r19 = $r14;

        r20 = r20.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }

    public void <init>(java.util.SortedSet)
    {
        java.util.SortedSet r4;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r7, $r8;
        java.util.HashMap $r6;
        java.lang.Integer $r16;
        java.util.logging.Level $r2;
        java.util.Map $r14;
        int $i0, i1;
        java.lang.String $r15;
        org.apache.cxf.phase.Phase r12;
        boolean $z0, $z1;
        org.apache.cxf.phase.Phase[] $r5, $r13;
        java.util.Iterator $r10;
        org.apache.cxf.interceptor.InterceptorChain$State $r1;
        boolean[] $r9;
        java.util.logging.Logger $r3;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.Object $r11;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r4 := @parameter0: java.util.SortedSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r1;

        $r3 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging> = $z0;

        $i0 = interfaceinvoke r4.<java.util.SortedSet: int size()>();

        $r5 = newarray (org.apache.cxf.phase.Phase)[$i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.Map nameMap> = $r6;

        $r7 = newarray (org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)[$i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads> = $r7;

        $r8 = newarray (org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)[$i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails> = $r8;

        $r9 = newarray (boolean)[$i0];

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters> = $r9;

        i1 = 0;

        $r10 = interfaceinvoke r4.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.cxf.phase.Phase) $r11;

        $r13 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases>;

        $r13[i1] = r12;

        $r14 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.Map nameMap>;

        $r15 = virtualinvoke r12.<org.apache.cxf.phase.Phase: java.lang.String getName()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.apache.cxf.message.Message getCurrentMessage()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        org.apache.cxf.message.Message $r2;

        $r0 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (org.apache.cxf.message.Message) $r1;

        return $r2;
    }

    public synchronized org.apache.cxf.interceptor.InterceptorChain$State getState()
    {
        org.apache.cxf.interceptor.InterceptorChain$State $r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        return $r1;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain cloneChain()
    {
        org.apache.cxf.phase.PhaseInterceptorChain $r0, r1;

        r1 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r0 = new org.apache.cxf.phase.PhaseInterceptorChain;

        specialinvoke $r0.<org.apache.cxf.phase.PhaseInterceptorChain: void <init>(org.apache.cxf.phase.PhaseInterceptorChain)>(r1);

        return $r0;
    }

    private void updateIterator()
    {
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r1, $r2;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r3;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        if $r1 != null goto label1;

        $r2 = new org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator;

        $r3 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        specialinvoke $r2.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: void <init>(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[])>($r3);

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator> = $r2;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void outputChainToLog(boolean)>(0);

     label1:
        return;
    }

    public void add(java.util.Collection)
    {
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.util.Collection r1;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r1 := @parameter0: java.util.Collection;

        virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void add(java.util.Collection,boolean)>(r1, 0);

        return;
    }

    public void add(java.util.Collection, boolean)
    {
        java.util.Iterator $r1;
        org.apache.cxf.interceptor.Interceptor r3;
        java.util.Collection r0;
        org.apache.cxf.phase.PhaseInterceptorChain r4;
        java.lang.Object $r2;
        boolean $z0, z1;

        r4 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r0 := @parameter0: java.util.Collection;

        z1 := @parameter1: boolean;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cxf.interceptor.Interceptor) $r2;

        virtualinvoke r4.<org.apache.cxf.phase.PhaseInterceptorChain: void add(org.apache.cxf.interceptor.Interceptor,boolean)>(r3, z1);

        goto label2;

     label3:
        return;
    }

    public void add(org.apache.cxf.interceptor.Interceptor)
    {
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        org.apache.cxf.interceptor.Interceptor r1;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r1 := @parameter0: org.apache.cxf.interceptor.Interceptor;

        virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void add(org.apache.cxf.interceptor.Interceptor,boolean)>(r1, 0);

        return;
    }

    public void add(org.apache.cxf.interceptor.Interceptor, boolean)
    {
        java.lang.Integer r6;
        java.util.Map $r4;
        boolean $z0, z1, $z2;
        java.util.Collection $r30;
        java.util.logging.Logger $r11, $r18;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r15, $r17, $r19, $r22, $r23, $r24, $r25, $r26, $r27;
        int $i0;
        java.lang.String $r2, $r16, $r21, $r28, $r29;
        java.util.Iterator $r7;
        org.apache.cxf.interceptor.Interceptor r0;
        org.apache.cxf.phase.PhaseInterceptor r1, r9;
        org.apache.cxf.phase.PhaseInterceptorChain r3;
        java.lang.Object $r5, $r8;
        java.lang.Class $r20;

        r3 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r0 := @parameter0: org.apache.cxf.interceptor.Interceptor;

        z1 := @parameter1: boolean;

        r1 = (org.apache.cxf.phase.PhaseInterceptor) r0;

        $r2 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getPhase()>();

        $r4 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.Map nameMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (java.lang.Integer) $r5;

        if r6 != null goto label3;

        $r18 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping interceptor ");

        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        if $r2 != null goto label1;

        $r29 = ": Phase declaration is missing.";

        goto label2;

     label1:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Phase ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified does not exist.");

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.util.logging.Logger: void warning(java.lang.String)>($r28);

        goto label5;

     label3:
        $z0 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging>;

        if $z0 == 0 goto label4;

        $r11 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding interceptor ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to phase ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void fine(java.lang.String)>($r16);

     label4:
        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        specialinvoke r3.<org.apache.cxf.phase.PhaseInterceptorChain: void insertInterceptor(int,org.apache.cxf.phase.PhaseInterceptor,boolean)>($i0, r1, z1);

     label5:
        $r30 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.util.Collection getAdditionalInterceptors()>();

        if $r30 == null goto label7;

        $r7 = interfaceinvoke $r30.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.cxf.phase.PhaseInterceptor) $r8;

        virtualinvoke r3.<org.apache.cxf.phase.PhaseInterceptorChain: void add(org.apache.cxf.interceptor.Interceptor,boolean)>(r9, z1);

        goto label6;

     label7:
        return;
    }

    public synchronized void pause()
    {
        java.lang.ThreadLocal $r2;
        org.apache.cxf.message.Message $r4;
        org.apache.cxf.interceptor.InterceptorChain$State $r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State PAUSED>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r1;

        $r2 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (org.apache.cxf.message.Message) $r3;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message pausedMessage> = $r4;

        return;
    }

    public synchronized void unpause()
    {
        org.apache.cxf.interceptor.InterceptorChain$State $r1, $r2, $r3, $r4, $r5;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State PAUSED>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r4 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State SUSPENDED>;

        if $r5 != $r4 goto label2;

     label1:
        $r3 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r3;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message pausedMessage> = null;

     label2:
        return;
    }

    public synchronized void suspend()
    {
        java.lang.ThreadLocal $r2;
        org.apache.cxf.message.Message $r4;
        org.apache.cxf.interceptor.InterceptorChain$State $r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State SUSPENDED>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r1;

        $r2 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (org.apache.cxf.message.Message) $r3;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message pausedMessage> = $r4;

        return;
    }

    public synchronized void resume()
    {
        org.apache.cxf.message.Message $r6;
        org.apache.cxf.interceptor.InterceptorChain$State $r1, $r2, $r3, $r4, $r5;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State PAUSED>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r4 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State SUSPENDED>;

        if $r5 != $r4 goto label2;

     label1:
        $r3 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r3;

        $r6 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message pausedMessage>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message pausedMessage> = null;

        virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean doIntercept(org.apache.cxf.message.Message)>($r6);

     label2:
        return;
    }

    public synchronized boolean doIntercept(org.apache.cxf.message.Message)
    {
        org.apache.cxf.service.Service r55;
        java.lang.Exception $r58, r59;
        org.apache.cxf.transport.MessageObserver $r37, $r60;
        java.lang.StringBuilder $r18, $r20, $r21, $r31, $r48;
        javax.xml.namespace.QName $r46, $r49;
        java.lang.Throwable $r28;
        org.apache.cxf.continuations.SuspendedInvocationException $r17, $r50;
        org.apache.cxf.logging.FaultListener $r43;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r12, $r13, $r51, $r52;
        java.lang.String $r22, $r23, $r27, $r34, $r42;
        org.apache.cxf.interceptor.Interceptor $r14;
        java.lang.RuntimeException $r30;
        org.apache.cxf.message.Exchange $r24, $r25, $r32, $r36, $r39, $r41, $r44;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, $z9, $z10;
        java.lang.ThreadLocal $r1, $r5, $r10, $r29;
        org.apache.cxf.service.model.OperationInfo r56;
        java.util.logging.Logger $r19;
        java.lang.ref.WeakReference $r26;
        org.apache.cxf.message.Message r3, r4;
        org.apache.cxf.interceptor.InterceptorChain$State $r6, $r7, $r8, $r9, $r11, $r15, $r16, $r53, $r54, $r61;
        java.lang.Object $r2, $r35, $r38, $r40, $r45, $r47, $r57;
        java.lang.Class $r33;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r4 := @parameter0: org.apache.cxf.message.Message;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void updateIterator()>();

        $r1 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (org.apache.cxf.message.Message) $r2;

     label01:
        $r5 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>(r4);

        if r3 == null goto label02;

        $r23 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String PREVIOUS_MESSAGE>;

        $z2 = interfaceinvoke r4.<org.apache.cxf.message.Message: boolean containsKey(java.lang.Object)>($r23);

        if $z2 != 0 goto label02;

        if r4 == r3 goto label02;

        $r24 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r25 = interfaceinvoke r3.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        if $r24 == $r25 goto label02;

        $r27 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String PREVIOUS_MESSAGE>;

        $r26 = new java.lang.ref.WeakReference;

        specialinvoke $r26.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r3);

        interfaceinvoke r4.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26);

     label02:
        $r53 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r54 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        if $r53 != $r54 goto label19;

        $r12 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $z0 = virtualinvoke $r12.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

     label03:
        $r13 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $r14 = virtualinvoke $r13.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor next()>();

        $z1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging>;

        if $z1 == 0 goto label04;

        $r19 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking handleMessage on interceptor ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.util.logging.Logger: void fine(java.lang.String)>($r22);

     label04:
        interfaceinvoke $r14.<org.apache.cxf.interceptor.Interceptor: void handleMessage(org.apache.cxf.message.Message)>(r4);

        $r16 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r15 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State SUSPENDED>;

        if $r16 != $r15 goto label05;

        $r17 = new org.apache.cxf.continuations.SuspendedInvocationException;

        specialinvoke $r17.<org.apache.cxf.continuations.SuspendedInvocationException: void <init>()>();

        throw $r17;

     label05:
        goto label02;

     label06:
        $r50 := @caughtexception;

        $r51 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $z6 = virtualinvoke $r51.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasPrevious()>();

        if $z6 == 0 goto label07;

        $r52 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        virtualinvoke $r52.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor previous()>();

     label07:
        virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void pause()>();

        throw $r50;

     label08:
        $r30 := @caughtexception;

        $z3 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean faultOccurred>;

        if $z3 != 0 goto label18;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean faultOccurred> = 1;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        if $r32 == null goto label10;

        $r44 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r45 = interfaceinvoke $r44.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/Service;");

        r55 = (org.apache.cxf.service.Service) $r45;

        if r55 == null goto label10;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r46 = interfaceinvoke r55.<org.apache.cxf.service.Service: javax.xml.namespace.QName getName()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r47 = interfaceinvoke $r44.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/model/OperationInfo;");

        r56 = (org.apache.cxf.service.model.OperationInfo) $r47;

        if r56 == null goto label09;

        $r48 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r49 = virtualinvoke r56.<org.apache.cxf.service.model.OperationInfo: javax.xml.namespace.QName getName()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

     label09:
        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

     label10:
        interfaceinvoke r4.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", $r30);

        virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void unwind(org.apache.cxf.message.Message)>(r4);

        $r57 = interfaceinvoke r4.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        $r58 = (java.lang.Exception) $r57;

        r59 = $r58;

        if $r58 != null goto label11;

        r59 = $r30;

     label11:
        $r33 = class "Lorg/apache/cxf/logging/FaultListener;";

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        $r35 = interfaceinvoke r4.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>($r34);

        $r43 = (org.apache.cxf.logging.FaultListener) $r35;

        z7 = 1;

        if $r43 == null goto label12;

        $r42 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        z7 = interfaceinvoke $r43.<org.apache.cxf.logging.FaultListener: boolean faultOccurred(java.lang.Exception,java.lang.String,org.apache.cxf.message.Message)>(r59, $r42, r4);

     label12:
        if z7 == 0 goto label13;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void doDefaultLogging(org.apache.cxf.message.Message,java.lang.Exception,java.lang.StringBuilder)>(r4, r59, $r31);

     label13:
        z8 = 0;

        $r36 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        if $r36 == null goto label17;

        $r38 = interfaceinvoke r4.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        if $r38 == null goto label14;

        $r41 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r41.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", r59);

     label14:
        $r39 = interfaceinvoke r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $z4 = interfaceinvoke $r39.<org.apache.cxf.message.Exchange: boolean isOneWay()>();

        if $z4 == 0 goto label15;

        $r40 = interfaceinvoke r4.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.oneway.robust");

        $z5 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r40);

        if $z5 != 0 goto label15;

        $z9 = 1;

        goto label16;

     label15:
        $z9 = 0;

     label16:
        z8 = $z9;

     label17:
        $r60 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.transport.MessageObserver faultObserver>;

        if $r60 == null goto label18;

        if z8 != 0 goto label18;

        $r37 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.transport.MessageObserver faultObserver>;

        interfaceinvoke $r37.<org.apache.cxf.transport.MessageObserver: void onMessage(org.apache.cxf.message.Message)>(r4);

     label18:
        $r61 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State ABORTED>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r61;

        goto label02;

     label19:
        $r7 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r6 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        if $r7 != $r6 goto label20;

        $r11 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State COMPLETE>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r11;

     label20:
        $r9 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r8 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State COMPLETE>;

        if $r9 != $r8 goto label21;

        $z10 = 1;

        goto label22;

     label21:
        $z10 = 0;

     label22:
        $r10 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        virtualinvoke $r10.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        return $z10;

     label23:
        $r28 := @caughtexception;

     label24:
        $r29 = <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE>;

        virtualinvoke $r29.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        throw $r28;

        catch org.apache.cxf.continuations.SuspendedInvocationException from label03 to label05 with label06;
        catch java.lang.RuntimeException from label03 to label05 with label08;
        catch java.lang.Throwable from label01 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    private void doDefaultLogging(org.apache.cxf.message.Message, java.lang.Exception, java.lang.StringBuilder)
    {
        org.apache.cxf.message.FaultMode r2, $r3, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.logging.Logger $r5, $r8, $r17, $r25, $r28, $r35;
        java.lang.Exception r15;
        java.lang.StringBuilder $r7, $r10, r11, $r12, $r13, $r16, $r19, $r20, $r21, $r27, $r30, $r31, $r32, $r37, $r38, $r39, $r40, $r43, $r44, $r46;
        java.lang.Throwable $r26, r34;
        java.util.logging.Level $r4, $r9, $r18, $r24, $r29, $r36;
        java.lang.String $r14, $r22, $r33, $r42, $r45, $r47;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.phase.PhaseInterceptorChain r23;
        java.lang.Object $r1;
        java.lang.Class $r41;

        r23 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r15 := @parameter1: java.lang.Exception;

        r11 := @parameter2: java.lang.StringBuilder;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/message/FaultMode;");

        r2 = (org.apache.cxf.message.FaultMode) $r1;

        $r3 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode CHECKED_APPLICATION_FAULT>;

        if r2 != $r3 goto label3;

        $z1 = r23.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging>;

        if $z1 == 0 goto label1;

        $r28 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r29 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has thrown exception, unwinding now");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r28, $r29, $r33, r15);

        goto label5;

     label1:
        $r25 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r24 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z2 = virtualinvoke $r25.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r24);

        if $z2 == 0 goto label5;

        r34 = r15;

        $z3 = r15 instanceof org.apache.cxf.interceptor.Fault;

        if $z3 == 0 goto label2;

        $r26 = virtualinvoke r15.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r26 == null goto label2;

        r34 = virtualinvoke r15.<java.lang.Exception: java.lang.Throwable getCause()>();

     label2:
        $r35 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r36 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has thrown exception, unwinding now: ");

        $r41 = virtualinvoke r34.<java.lang.Object: java.lang.Class getClass()>();

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.String getName()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r45 = virtualinvoke r15.<java.lang.Exception: java.lang.String getMessage()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r35, $r36, $r47);

        goto label5;

     label3:
        $r5 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label5;

        $r6 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode UNCHECKED_APPLICATION_FAULT>;

        if r2 != $r6 goto label4;

        $r17 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r18 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has thrown exception, unwinding now");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r17, $r18, $r22, r15);

        goto label5;

     label4:
        $r8 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r9 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interceptor for ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has thrown exception, unwinding now");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, $r9, $r14, r15);

     label5:
        return;
    }

    public synchronized boolean doInterceptStartingAfter(org.apache.cxf.message.Message, java.lang.String)
    {
        org.apache.cxf.interceptor.Interceptor $r6;
        org.apache.cxf.message.Message r3;
        org.apache.cxf.interceptor.InterceptorChain$State $r1, $r2;
        org.apache.cxf.phase.PhaseInterceptor r7;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r4, $r5;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.String $r8, r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r3 := @parameter0: org.apache.cxf.message.Message;

        r9 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void updateIterator()>();

     label1:
        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        if $r2 != $r1 goto label3;

        $r4 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $z0 = virtualinvoke $r4.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor next()>();

        r7 = (org.apache.cxf.phase.PhaseInterceptor) $r6;

        $r8 = interfaceinvoke r7.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        $z2 = virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean doIntercept(org.apache.cxf.message.Message)>(r3);

        return $z2;
    }

    public synchronized boolean doInterceptStartingAt(org.apache.cxf.message.Message, java.lang.String)
    {
        org.apache.cxf.interceptor.Interceptor $r6;
        org.apache.cxf.message.Message r3;
        org.apache.cxf.interceptor.InterceptorChain$State $r1, $r2;
        org.apache.cxf.phase.PhaseInterceptor r7;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r4, $r5, $r10;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.String $r8, r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r3 := @parameter0: org.apache.cxf.message.Message;

        r9 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void updateIterator()>();

     label1:
        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        if $r2 != $r1 goto label3;

        $r4 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $z0 = virtualinvoke $r4.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor next()>();

        r7 = (org.apache.cxf.phase.PhaseInterceptor) $r6;

        $r8 = interfaceinvoke r7.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        $r10 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        virtualinvoke $r10.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor previous()>();

        goto label3;

     label2:
        goto label1;

     label3:
        $z2 = virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean doIntercept(org.apache.cxf.message.Message)>(r3);

        return $z2;
    }

    public synchronized void reset()
    {
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r3, $r5;
        org.apache.cxf.interceptor.InterceptorChain$State $r1, $r2, $r4;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: void updateIterator()>();

        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state>;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State COMPLETE>;

        if $r2 != $r1 goto label1;

        $r4 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State EXECUTING>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r4;

        $r5 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        virtualinvoke $r5.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: void reset()>();

        goto label2;

     label1:
        $r3 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        virtualinvoke $r3.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: void reset()>();

     label2:
        return;
    }

    public void unwind(org.apache.cxf.message.Message)
    {
        java.util.logging.Level $r13, $r21;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r1, $r2;
        java.lang.String $r9, $r16, $r24;
        boolean $z0, $z1;
        org.apache.cxf.interceptor.Interceptor $r3;
        org.apache.cxf.message.Message r4;
        java.lang.RuntimeException $r17, $r18;
        java.util.logging.Logger $r6, $r12, $r20;
        java.lang.Exception $r10;
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r14, $r15, $r19, $r22, $r23;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r4 := @parameter0: org.apache.cxf.message.Message;

     label1:
        $r1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $z0 = virtualinvoke $r1.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label7;

        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.interceptor.Interceptor previous()>();

        $z1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging>;

        if $z1 == 0 goto label2;

        $r6 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking handleFault on interceptor ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>($r9);

     label2:
        interfaceinvoke $r3.<org.apache.cxf.interceptor.Interceptor: void handleFault(org.apache.cxf.message.Message)>(r4);

     label3:
        goto label6;

     label4:
        $r18 := @caughtexception;

        $r20 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r21 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in handleFault on interceptor ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r21, $r24, $r18);

        throw $r18;

     label5:
        $r10 := @caughtexception;

        $r12 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r13 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in handleFault on interceptor ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, $r16, $r10);

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r17;

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public void remove(org.apache.cxf.interceptor.Interceptor)
    {
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder $r3;
        org.apache.cxf.phase.PhaseInterceptor $r5;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r0;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r2;
        org.apache.cxf.interceptor.Interceptor r4;
        org.apache.cxf.phase.PhaseInterceptorChain r1;
        boolean $z0;

        r1 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r4 := @parameter0: org.apache.cxf.interceptor.Interceptor;

        $r0 = new org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator;

        $r2 = r1.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        specialinvoke $r0.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: void <init>(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[])>($r2);

     label1:
        $z0 = virtualinvoke $r0.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r0.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder nextInterceptorHolder()>();

        $r5 = $r3.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptor interceptor>;

        if $r5 != r4 goto label2;

        specialinvoke r1.<org.apache.cxf.phase.PhaseInterceptorChain: void remove(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)>($r3);

        return;

     label2:
        goto label1;

     label3:
        return;
    }

    public synchronized void abort()
    {
        org.apache.cxf.interceptor.InterceptorChain$State $r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = <org.apache.cxf.interceptor.InterceptorChain$State: org.apache.cxf.interceptor.InterceptorChain$State ABORTED>;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.interceptor.InterceptorChain$State state> = $r1;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.util.ListIterator $r1;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = virtualinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.util.ListIterator getIterator()>();

        return $r1;
    }

    public java.util.ListIterator getIterator()
    {
        org.apache.cxf.phase.PhaseInterceptorChain r1;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r0;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r2;

        r1 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r0 = new org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator;

        $r2 = r1.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        specialinvoke $r0.<org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator: void <init>(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[])>($r2);

        return $r0;
    }

    private void remove(org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder)
    {
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r4, $r7, $r8, $r11, $r13, $r14, $r17, $r22;
        int $i0, $i1, $i2;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder r0, $r1, $r2, $r5, $r6, $r9, $r10, $r12, $r15, $r16, $r18, $r19, $r20, $r21, $r23;
        org.apache.cxf.phase.PhaseInterceptorChain r3;

        r3 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r0 := @parameter0: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder;

        $r1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        if $r1 == null goto label1;

        $r21 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $r20 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r21.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r20;

     label1:
        $r2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if $r2 == null goto label2;

        $r19 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r18 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $r19.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r18;

     label2:
        $i2 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: int phaseIdx>;

        $r4 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r5 = $r4[$i2];

        if $r5 != r0 goto label4;

        $r12 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if $r12 == null goto label3;

        $r15 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $i1 = $r15.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: int phaseIdx>;

        if $i1 != $i2 goto label3;

        $r17 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r16 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r17[$i2] = $r16;

        goto label4;

     label3:
        $r13 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r13[$i2] = null;

        $r14 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r14[$i2] = null;

     label4:
        $r22 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r23 = $r22[$i2];

        if $r23 != r0 goto label6;

        $r6 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        if $r6 == null goto label5;

        $r9 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $i0 = $r9.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: int phaseIdx>;

        if $i0 != $i2 goto label5;

        $r11 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r10 = r0.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $r11[$i2] = $r10;

        goto label6;

     label5:
        $r7 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r7[$i2] = null;

        $r8 = r3.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r8[$i2] = null;

     label6:
        return;
    }

    private void insertInterceptor(int, org.apache.cxf.phase.PhaseInterceptor, boolean)
    {
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r3, $r9, $r12, $r14, $r16, $r18, $r21, $r24, $r26, $r27, $r31, $r32, $r37, $r38, $r41, $r42, $r43, $r45, $r47, $r49, $r51, $r55, $r58, $r63;
        java.util.Set $r5, $r6, $r30, $r40, $r66;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder $r4, $r10, $r11, $r13, $r15, $r17, $r19, $r20, $r22, $r23, $r25, $r33, $r34, $r44, $r46, $r48, $r50, $r52, $r53, $r54, $r56, $r57, $r59, r60, r61, r62, $r64, $r65, r67, $r70;
        org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator $r69;
        java.lang.String $r7, $r29, $r36;
        boolean[] $r8, $r39, $r68;
        org.apache.cxf.phase.PhaseInterceptor r1, r28, $r35;
        org.apache.cxf.phase.PhaseInterceptorChain r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        int i0, $i1, $i2, i3, i4, $i6;

        r2 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.cxf.phase.PhaseInterceptor;

        z6 := @parameter2: boolean;

        $r70 = new org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder;

        specialinvoke $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: void <init>(org.apache.cxf.phase.PhaseInterceptor,int)>(r1, i0);

        $r3 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r4 = $r3[i0];

        if $r4 != null goto label12;

        $r37 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r37[i0] = $r70;

        $r38 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r38[i0] = $r70;

        $r39 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters>;

        $r40 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.util.Set getAfter()>();

        $z13 = interfaceinvoke $r40.<java.util.Set: boolean isEmpty()>();

        if $z13 != 0 goto label01;

        $z14 = 1;

        goto label02;

     label01:
        $z14 = 0;

     label02:
        $r39[i0] = $z14;

        i3 = i0 - 1;

     label03:
        if i3 < 0 goto label05;

        $r58 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r59 = $r58[i3];

        if $r59 == null goto label04;

        goto label05;

     label04:
        $i6 = (int) -1;

        i3 = i3 + $i6;

        goto label03;

     label05:
        if i3 < 0 goto label07;

        $r49 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r50 = $r49[i3];

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r50;

        $r51 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r52 = $r51[i3];

        $r53 = $r52.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r53;

        $r54 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if $r54 == null goto label06;

        $r57 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r57.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r70;

     label06:
        $r55 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r56 = $r55[i3];

        $r56.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r70;

        goto label11;

     label07:
        i4 = i0 + 1;

     label08:
        $r41 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $i1 = lengthof $r41;

        if i4 >= $i1 goto label10;

        $r47 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r48 = $r47[i4];

        if $r48 == null goto label09;

        goto label10;

     label09:
        i4 = i4 + 1;

        goto label08;

     label10:
        $r42 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $i2 = lengthof $r42;

        if i4 == $i2 goto label11;

        $r43 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r44 = $r43[i4];

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r44;

        $r45 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r46 = $r45[i4];

        $r46.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r70;

     label11:
        goto label32;

     label12:
        $r5 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.util.Set getBefore()>();

        $r6 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.util.Set getAfter()>();

        r60 = null;

        r61 = null;

        $r7 = interfaceinvoke r1.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

        $r8 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters>;

        $z0 = $r8[i0];

        if $z0 != 0 goto label13;

        $z11 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z11 != 0 goto label22;

     label13:
        $r9 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r62 = $r9[i0];

     label14:
        $r63 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r64 = $r63[i0];

        $r65 = $r64.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if r62 == $r65 goto label20;

        r28 = r62.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptor interceptor>;

        $r29 = interfaceinvoke r28.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

        if $r29 == null goto label16;

        if r60 != null goto label16;

        $z9 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r29);

        if $z9 != 0 goto label15;

        $r30 = interfaceinvoke r28.<org.apache.cxf.phase.PhaseInterceptor: java.util.Set getAfter()>();

        $z10 = interfaceinvoke $r30.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z10 == 0 goto label16;

     label15:
        r60 = r62;

     label16:
        $r66 = interfaceinvoke r28.<org.apache.cxf.phase.PhaseInterceptor: java.util.Set getBefore()>();

        $z15 = interfaceinvoke $r66.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z15 != 0 goto label17;

        if $r29 == null goto label18;

        $z8 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r29);

        if $z8 == 0 goto label18;

     label17:
        r61 = r62;

     label18:
        if z6 != 0 goto label19;

        $z7 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z7 == 0 goto label19;

        return;

     label19:
        r62 = r62.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        goto label14;

     label20:
        if r61 != null goto label21;

        $z5 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>("*");

        if $z5 == 0 goto label21;

        $r27 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r60 = $r27[i0];

     label21:
        goto label25;

     label22:
        if z6 != 0 goto label25;

        $r31 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r67 = $r31[i0];

     label23:
        $r32 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r33 = $r32[i0];

        $r34 = $r33.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if r67 == $r34 goto label25;

        $r35 = r67.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptor interceptor>;

        $r36 = interfaceinvoke $r35.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

        $z12 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z12 == 0 goto label24;

        return;

     label24:
        r67 = r67.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        goto label23;

     label25:
        $r68 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: boolean[] hasAfters>;

        $z1 = $r68[i0];

        $z16 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z16 != 0 goto label26;

        $z17 = 1;

        goto label27;

     label26:
        $z17 = 0;

     label27:
        $z2 = $z1 | $z17;

        $r68[i0] = $z2;

        if r60 != null goto label28;

        if r61 != null goto label28;

        $z3 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label28;

        $z4 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z4 == 0 goto label28;

        $r26 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r60 = $r26[i0];

     label28:
        if r60 != null goto label30;

        $r16 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r17 = $r16[i0];

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r17;

        $r18 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r19 = $r18[i0];

        $r20 = $r19.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r20;

        $r21 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r22 = $r21[i0];

        $r22.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r70;

        $r23 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if $r23 == null goto label29;

        $r25 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        $r25.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r70;

     label29:
        $r24 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r24[i0] = $r70;

        goto label32;

     label30:
        $r10 = r60.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r10;

        $r11 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        if $r11 == null goto label31;

        $r15 = $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev>;

        $r15.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = $r70;

     label31:
        $r70.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next> = r60;

        r60.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder prev> = $r70;

        $r12 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r13 = $r12[i0];

        if $r13 != r60 goto label32;

        $r14 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r14[i0] = $r70;

     label32:
        $r69 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator iterator>;

        if $r69 == null goto label33;

        specialinvoke r2.<org.apache.cxf.phase.PhaseInterceptorChain: void outputChainToLog(boolean)>(1);

     label33:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.String $r1;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String toString(java.lang.String)>("");

        return $r1;
    }

    private java.lang.String toString(java.lang.String)
    {
        org.apache.cxf.phase.Phase[] $r7;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r9;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder $r10;
        int $i0, i1;
        org.apache.cxf.phase.PhaseInterceptorChain r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r6;
        java.lang.String $r3, r5, $r8;

        r2 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chain ");

        $r3 = specialinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Current flow:\n");

        i1 = 0;

     label1:
        $r7 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label3;

        $r9 = r2.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        $r10 = $r9[i1];

        if $r10 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        specialinvoke r2.<org.apache.cxf.phase.PhaseInterceptorChain: void printPhase(int,java.lang.StringBuilder)>(i1, $r0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void printPhase(int, java.lang.StringBuilder)
    {
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] $r6, $r7;
        int i0;
        java.lang.String $r4, $r12, r15;
        org.apache.cxf.phase.Phase $r3;
        boolean $z0, z1;
        org.apache.cxf.phase.Phase[] $r2;
        org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder $r8, $r9, r14;
        org.apache.cxf.phase.PhaseInterceptor $r10, $r13;
        org.apache.cxf.phase.PhaseInterceptorChain r1;
        java.lang.StringBuilder r0, $r5;
        java.lang.Class $r11;

        r1 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuilder;

        $r2 = r1.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.Phase[] phases>;

        $r3 = $r2[i0];

        $r4 = virtualinvoke $r3.<org.apache.cxf.phase.Phase: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r6 = r1.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] heads>;

        r14 = $r6[i0];

        z1 = 1;

     label1:
        $r7 = r1.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder[] tails>;

        $r8 = $r7[i0];

        $r9 = $r8.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        if r14 == $r9 goto label5;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $r10 = r14.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptor interceptor>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        r15 = $r12;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r12);

        if $z0 == 0 goto label4;

        $r13 = r14.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptor interceptor>;

        r15 = interfaceinvoke $r13.<org.apache.cxf.phase.PhaseInterceptor: java.lang.String getId()>();

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r14 = r14.<org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder: org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder next>;

        goto label1;

     label5:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        return;
    }

    private void outputChainToLog(boolean)
    {
        org.apache.cxf.phase.PhaseInterceptorChain r0;
        java.lang.String $r2, $r4;
        java.util.logging.Logger $r1, $r3;
        boolean $z0, z1;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: boolean isFineLogging>;

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $r3 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r4 = specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String toString(java.lang.String)>(" was modified");

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>($r4);

        goto label2;

     label1:
        $r1 = <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG>;

        $r2 = specialinvoke r0.<org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String toString(java.lang.String)>(" was created");

        virtualinvoke $r1.<java.util.logging.Logger: void fine(java.lang.String)>($r2);

     label2:
        return;
    }

    public org.apache.cxf.transport.MessageObserver getFaultObserver()
    {
        org.apache.cxf.transport.MessageObserver $r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        $r1 = r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.transport.MessageObserver faultObserver>;

        return $r1;
    }

    public void setFaultObserver(org.apache.cxf.transport.MessageObserver)
    {
        org.apache.cxf.transport.MessageObserver r1;
        org.apache.cxf.phase.PhaseInterceptorChain r0;

        r0 := @this: org.apache.cxf.phase.PhaseInterceptorChain;

        r1 := @parameter0: org.apache.cxf.transport.MessageObserver;

        r0.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.transport.MessageObserver faultObserver> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r7;
        java.util.logging.Logger $r6;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lorg/apache/cxf/phase/PhaseInterceptorChain;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PREVIOUS_MESSAGE");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.String PREVIOUS_MESSAGE> = $r5;

        $r6 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/phase/PhaseInterceptorChain;");

        <org.apache.cxf.phase.PhaseInterceptorChain: java.util.logging.Logger LOG> = $r6;

        $r7 = new java.lang.ThreadLocal;

        specialinvoke $r7.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.cxf.phase.PhaseInterceptorChain: java.lang.ThreadLocal CURRENT_MESSAGE> = $r7;

        return;
    }
}
