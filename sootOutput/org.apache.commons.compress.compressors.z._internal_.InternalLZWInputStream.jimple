public abstract class org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream extends org.apache.commons.compress.compressors.CompressorInputStream
{
    private final byte[] oneByte;
    protected final java.io.InputStream in;
    protected int clearCode;
    protected int codeSize;
    protected int bitsCached;
    protected int bitsCachedSize;
    protected int previousCode;
    protected int tableSize;
    protected int[] prefixes;
    protected byte[] characters;
    private byte[] outputStack;
    private int outputStackLocation;

    protected void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r1;
        int $i1, $i3;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        r2 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] oneByte> = $r1;

        $i1 = (int) -1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int clearCode> = $i1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int codeSize> = 9;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached> = 0;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize> = 0;

        $i3 = (int) -1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode> = $i3;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize> = 0;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: java.io.InputStream in> = r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r1, $r2;
        short $s2, $s3;
        byte $b1;
        int $i0, $i4;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] oneByte>;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int read(byte[])>($r1);

        if $i0 >= 0 goto label1;

        return $i0;

     label1:
        $r2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] oneByte>;

        $b1 = $r2[0];

        $s3 = (short) $b1;

        $s2 = 255 & $s3;

        $i4 = (int) $s2;

        return $i4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i7 = specialinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int readFromStack(byte[],int,int)>(r1, i0, i1);

     label1:
        $i2 = i1 - i7;

        if $i2 <= 0 goto label4;

        $i3 = virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int decompressNextSymbol()>();

        if $i3 >= 0 goto label3;

        if i7 <= 0 goto label2;

        virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: void count(int)>(i7);

        return i7;

     label2:
        return $i3;

     label3:
        $i5 = i0 + i7;

        $i4 = i1 - i7;

        $i6 = specialinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int readFromStack(byte[],int,int)>(r1, $i5, $i4);

        i7 = i7 + $i6;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: void count(int)>(i7);

        return i7;
    }

    protected abstract int decompressNextSymbol() throws java.io.IOException;

    protected abstract int addEntry(int, byte) throws java.io.IOException;

    protected void setClearCode(int)
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        i0 := @parameter0: int;

        $i1 = i0 - 1;

        $i2 = 1 << $i1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int clearCode> = $i2;

        return;
    }

    protected void initializeTables(int)
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r2, $r3, $r5;
        byte $b2;
        int[] $r1, $r4;
        int i0, i1, i3, $i5;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        i0 := @parameter0: int;

        i1 = 1 << i0;

        $r1 = newarray (int)[i1];

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int[] prefixes> = $r1;

        $r2 = newarray (byte)[i1];

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] characters> = $r2;

        $r3 = newarray (byte)[i1];

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] outputStack> = $r3;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation> = i1;

        i3 = 0;

     label1:
        if i3 >= 256 goto label2;

        $r4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int[] prefixes>;

        $i5 = (int) -1;

        $r4[i3] = $i5;

        $r5 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] characters>;

        $b2 = (byte) i3;

        $r5[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected int readNextCode() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

     label1:
        $i1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize>;

        $i0 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int codeSize>;

        if $i1 >= $i0 goto label3;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: java.io.InputStream in>;

        $i12 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if $i12 >= 0 goto label2;

        return $i12;

     label2:
        $i15 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached>;

        $i13 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize>;

        $i14 = $i12 << $i13;

        $i16 = $i15 | $i14;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached> = $i16;

        $i17 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize>;

        $i18 = $i17 + 8;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize> = $i18;

        goto label1;

     label3:
        $i2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int codeSize>;

        $i3 = 1 << $i2;

        i19 = $i3 - 1;

        $i4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached>;

        i5 = $i4 & i19;

        $i7 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached>;

        $i6 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int codeSize>;

        $i8 = $i7 >>> $i6;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCached> = $i8;

        $i10 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize>;

        $i9 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int codeSize>;

        $i11 = $i10 - $i9;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int bitsCachedSize> = $i11;

        return i5;
    }

    protected int addEntry(int, byte, int)
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r2;
        byte b5;
        int[] $r1;
        int i0, $i1, i2, i3, $i4, $i6, $i7, $i8, $i10;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        i3 := @parameter0: int;

        b5 := @parameter1: byte;

        i0 := @parameter2: int;

        $i1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize>;

        if $i1 >= i0 goto label1;

        i2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize>;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int[] prefixes>;

        $i4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize>;

        $r1[$i4] = i3;

        $r2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] characters>;

        $i6 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize>;

        $r2[$i6] = b5;

        $i7 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int tableSize> = $i8;

        return i2;

     label1:
        $i10 = (int) -1;

        return $i10;
    }

    protected int addRepeatOfPreviousCode() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r1;
        java.io.IOException $r4;
        byte b3;
        int[] $r2;
        int $i0, $i1, $i2, i4, $i6;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        $i0 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("The first code can\'t be a reference to its preceding code");

        throw $r4;

     label1:
        b3 = 0;

        i4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode>;

     label2:
        if i4 < 0 goto label3;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] characters>;

        b3 = $r1[i4];

        $r2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int[] prefixes>;

        i4 = $r2[i4];

        goto label2;

     label3:
        $i1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode>;

        $i2 = virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int addEntry(int,byte)>($i1, b3);

        return $i2;
    }

    protected int expandCodeToOutputStack(int, boolean) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r1, $r2, $r3;
        byte $b3, $b7;
        int[] $r4;
        int i0, $i1, $i2, $i4, $i5, $i6, i8, $i9, $i11;
        boolean z0;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i8 = i0;

     label1:
        if i8 < 0 goto label2;

        $r2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] outputStack>;

        $i5 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        $i6 = $i5 - 1;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation> = $i6;

        $r3 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] characters>;

        $b7 = $r3[i8];

        $r2[$i6] = $b7;

        $r4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int[] prefixes>;

        i8 = $r4[i8];

        goto label1;

     label2:
        $i1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode>;

        $i11 = (int) -1;

        if $i1 == $i11 goto label3;

        if z0 != 0 goto label3;

        $i4 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode>;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] outputStack>;

        $i2 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        $b3 = $r1[$i2];

        virtualinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int addEntry(int,byte)>($i4, $b3);

     label3:
        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int previousCode> = i0;

        $i9 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        return $i9;
    }

    private int readFromStack(byte[], int, int)
    {
        org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream r0;
        byte[] $r1, r2, $r3;
        int $i0, $i1, i2, i3, $i4, i5, $i6, $i7, $i8;

        r0 := @this: org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;

        r2 := @parameter0: byte[];

        i5 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] outputStack>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        i2 = $i1 - $i0;

        if i2 <= 0 goto label1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i3);

        $r3 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: byte[] outputStack>;

        $i6 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, i5, $i4);

        $i7 = r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation>;

        $i8 = $i7 + $i4;

        r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int outputStackLocation> = $i8;

        return $i4;

     label1:
        return 0;
    }
}
