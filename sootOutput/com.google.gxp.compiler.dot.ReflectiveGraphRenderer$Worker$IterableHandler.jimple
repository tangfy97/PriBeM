class com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler extends java.lang.Object implements com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$Handler
{
    final com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker this$0;

    private void <init>(com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker)
    {
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker r1;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler r0;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler;

        r1 := @parameter0: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker;

        r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isInlinable()
    {
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler r0;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler;

        return 0;
    }

    public void handle(java.lang.String, java.lang.Iterable)
    {
        com.google.gxp.compiler.dot.NodeShape $r5;
        java.lang.Iterable r4;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker $r1, $r10, $r17;
        int $i0, i1;
        java.lang.String r3, $r7, $r16, $r18;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler r0;
        boolean $z0;
        java.util.Iterator $r8;
        com.google.gxp.compiler.dot.GraphSink $r2, $r11;
        java.lang.Class $r6;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Iterable;

        $r1 = r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker this$0>;

        $r2 = staticinvoke <com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker: com.google.gxp.compiler.dot.GraphSink access$200(com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker)>($r1);

        $r5 = <com.google.gxp.compiler.dot.NodeShape: com.google.gxp.compiler.dot.NodeShape PARALLELOGRAM>;

        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        interfaceinvoke $r2.<com.google.gxp.compiler.dot.GraphSink: void simpleNode(java.lang.String,com.google.gxp.compiler.dot.NodeShape,java.lang.String)>(r3, $r5, $r7);

        i1 = 0;

        $r8 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker this$0>;

        $r11 = staticinvoke <com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker: com.google.gxp.compiler.dot.GraphSink access$200(com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker)>($r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = i1;

        i1 = i1 + 1;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker this$0>;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker: java.lang.String renderSubgraph(java.lang.Object)>($r9);

        interfaceinvoke $r11.<com.google.gxp.compiler.dot.GraphSink: void edge(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, $r18);

        goto label1;

     label2:
        return;
    }

    public volatile void handle(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler r0;
        java.lang.Iterable $r3;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Iterable) r2;

        virtualinvoke r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: void handle(java.lang.String,java.lang.Iterable)>(r1, $r3);

        return;
    }

    void <init>(com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker, com.google.gxp.compiler.dot.ReflectiveGraphRenderer$1)
    {
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$1 r2;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker r1;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler r0;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler;

        r1 := @parameter0: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker;

        r2 := @parameter1: com.google.gxp.compiler.dot.ReflectiveGraphRenderer$1;

        specialinvoke r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker$IterableHandler: void <init>(com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker)>(r1);

        return;
    }
}
