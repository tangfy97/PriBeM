public class org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.lang.Float r9;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r7;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r12;
        org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r1, $r11;
        java.lang.String $r5;
        boolean $z0, $z1;
        org.apache.lucene.queryparser.flexible.core.config.FieldConfig $r6;
        java.lang.CharSequence $r4;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.BoostQueryNode $r10;
        float $f0;
        java.lang.Object $r8;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        if $r1 == null goto label1;

        $r11 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z1 = $r11 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z1 != 0 goto label2;

     label1:
        $r12 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) r0;

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        if $r3 == null goto label2;

        $r4 = interfaceinvoke $r12.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: java.lang.CharSequence getField()>();

        $r5 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r3.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: org.apache.lucene.queryparser.flexible.core.config.FieldConfig getFieldConfig(java.lang.String)>($r5);

        if $r6 == null goto label2;

        $r7 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey BOOST>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.config.FieldConfig: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r7);

        r9 = (java.lang.Float) $r8;

        if r9 == null goto label2;

        $r10 = new org.apache.lucene.queryparser.flexible.core.nodes.BoostQueryNode;

        $f0 = virtualinvoke r9.<java.lang.Float: float floatValue()>();

        specialinvoke $r10.<org.apache.lucene.queryparser.flexible.core.nodes.BoostQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,float)>(r0, $f0);

        return $r10;

     label2:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor r1;
        java.util.List r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
