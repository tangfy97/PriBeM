public class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext extends java.lang.Object
{
    public final org.waveprotocol.wave.common.logging.LoggerBundle ops;
    public final org.waveprotocol.wave.common.logging.LoggerBundle delta;
    public final org.waveprotocol.wave.common.logging.LoggerBundle cc;
    public final org.waveprotocol.wave.common.logging.LoggerBundle view;

    public void <init>(org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.common.logging.LoggerBundle)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext r0;
        org.waveprotocol.wave.common.logging.LoggerBundle r1, r2, r3, r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LoggerBundle;

        r2 := @parameter1: org.waveprotocol.wave.common.logging.LoggerBundle;

        r3 := @parameter2: org.waveprotocol.wave.common.logging.LoggerBundle;

        r4 := @parameter3: org.waveprotocol.wave.common.logging.LoggerBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle ops> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle delta> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle cc> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle view> = r4;

        return;
    }
}
