public class org.bson.util.ClassMap extends java.lang.Object implements java.util.Map
{
    private java.util.Map _internalMap;
    private java.util.Map _cache;
    private static java.util.Map _ancestryCache;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        org.bson.util.ClassMap r0;

        r0 := @this: org.bson.util.ClassMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.bson.util.ClassMap: java.util.Map _internalMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.bson.util.ClassMap: java.util.Map _cache> = $r2;

        return;
    }

    protected java.util.Map getInternalMap()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = r0.<org.bson.util.ClassMap: java.util.Map _internalMap>;

        return $r1;
    }

    private void setInternalMap(java.util.Map)
    {
        org.bson.util.ClassMap r0;
        java.util.Map r1;

        r0 := @this: org.bson.util.ClassMap;

        r1 := @parameter0: java.util.Map;

        r0.<org.bson.util.ClassMap: java.util.Map _internalMap> = r1;

        return;
    }

    protected java.util.Map getCache()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = r0.<org.bson.util.ClassMap: java.util.Map _cache>;

        return $r1;
    }

    private void setCache(java.util.Map)
    {
        org.bson.util.ClassMap r0;
        java.util.Map r1;

        r0 := @this: org.bson.util.ClassMap;

        r1 := @parameter0: java.util.Map;

        r0.<org.bson.util.ClassMap: java.util.Map _cache> = r1;

        return;
    }

    public synchronized int size()
    {
        int $i0;
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public synchronized boolean isEmpty()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public synchronized boolean containsKey(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.bson.util.ClassMap r0;
        boolean $z0;

        r0 := @this: org.bson.util.ClassMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected synchronized boolean cacheContainsKey(java.lang.Object)
    {
        java.util.Map $r1;
        java.lang.Object r2;
        org.bson.util.ClassMap r0;
        boolean $z0;

        r0 := @this: org.bson.util.ClassMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public synchronized boolean containsValue(java.lang.Object)
    {
        java.util.Map $r1;
        java.lang.Object r2;
        org.bson.util.ClassMap r0;
        boolean $z0;

        r0 := @this: org.bson.util.ClassMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r2);

        return $z0;
    }

    public synchronized java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object r0, $r4, $r5;
        java.lang.Class r1;
        org.bson.util.ClassMap r2;
        boolean $z0;

        r2 := @this: org.bson.util.ClassMap;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.lang.Class) r0;

        $r3 = virtualinvoke r2.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r5;

     label1:
        $r4 = specialinvoke r2.<org.bson.util.ClassMap: java.lang.Object computeValue(java.lang.Class)>(r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    public synchronized java.lang.Object put(java.lang.Class, java.lang.Object)
    {
        java.util.Map $r1;
        java.lang.Class r2;
        java.lang.Object r3, $r4;
        org.bson.util.ClassMap r0;

        r0 := @this: org.bson.util.ClassMap;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        virtualinvoke r0.<org.bson.util.ClassMap: void initCache()>();

        return $r4;
    }

    public synchronized java.lang.Object remove(java.lang.Object)
    {
        java.util.Map $r1;
        java.lang.Object r2, $r3;
        org.bson.util.ClassMap r0;

        r0 := @this: org.bson.util.ClassMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        virtualinvoke r0.<org.bson.util.ClassMap: void initCache()>();

        return $r3;
    }

    public synchronized void putAll(java.util.Map)
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1, r2;

        r0 := @this: org.bson.util.ClassMap;

        r2 := @parameter0: java.util.Map;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>(r2);

        virtualinvoke r0.<org.bson.util.ClassMap: void initCache()>();

        return;
    }

    public synchronized void clear()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        virtualinvoke r0.<org.bson.util.ClassMap: void initCache()>();

        return;
    }

    public synchronized java.util.Set keySet()
    {
        java.util.Set $r2;
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public synchronized java.util.Collection values()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public synchronized java.util.Set entrySet()
    {
        java.util.Set $r2;
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r2, $r3;
        java.lang.Object r0;
        java.lang.ClassCastException $r4;
        org.bson.util.ClassMap r1, r5;
        boolean $z0;

        r1 := @this: org.bson.util.ClassMap;

        r0 := @parameter0: java.lang.Object;

     label1:
        r5 = (org.bson.util.ClassMap) r0;

        $r2 = virtualinvoke r1.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        $r3 = virtualinvoke r5.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        int $i0;
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    private java.lang.Object computeValue(java.lang.Class)
    {
        java.util.Iterator $r4;
        org.bson.util.ClassMap r2;
        java.util.List $r1;
        java.util.Map $r3;
        java.lang.Class r0, r6;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1;

        r2 := @this: org.bson.util.ClassMap;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.bson.util.ClassMap: java.util.List getAncestry(java.lang.Class)>(r0);

        $r3 = virtualinvoke r2.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Class) $r5;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    protected void initCache()
    {
        org.bson.util.ClassMap r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getInternalMap()>();

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.bson.util.ClassMap r0;
        java.util.Map $r1;

        r0 := @this: org.bson.util.ClassMap;

        $r1 = virtualinvoke r0.<org.bson.util.ClassMap: java.util.Map getCache()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.util.List getAncestry(java.lang.Class)
    {
        java.util.ArrayList $r4;
        java.util.List r3, $r5, r7;
        java.util.Map $r0;
        int $i0, $i1, $i2, i3;
        java.lang.Class r1;
        java.lang.Object $r2, $r6;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.bson.util.ClassMap: java.util.Map getClassAncestryCache()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.List) $r2;

        if r3 == null goto label1;

        r7 = r3;

        goto label4;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r7 = $r4;

        $r5 = staticinvoke <org.bson.util.ClassMap: java.util.List computeAncestry(java.lang.Class)>(r1);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i3 = 0;

     label2:
        if i3 >= $i0 goto label3;

        $i1 = $i0 - i3;

        $i2 = $i1 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        i3 = i3 + 1;

        goto label2;

     label3:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label4:
        return r7;
    }

    private static java.util.List computeAncestry(java.lang.Class)
    {
        java.lang.Class r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(class "Ljava/lang/Object;");

        staticinvoke <org.bson.util.ClassMap: void computeAncestry(java.lang.Class,java.util.List)>(r1, $r0);

        return $r0;
    }

    private static void computeAncestry(java.lang.Class, java.util.List)
    {
        java.lang.Class[] $r1;
        java.util.List r3;
        int $i0, i1, $i3;
        java.lang.Class r0, $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.util.List;

        if r0 == null goto label1;

        if r0 != class "Ljava/lang/Object;" goto label2;

     label1:
        return;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

     label3:
        if i1 < 0 goto label4;

        $r4 = $r1[i1];

        staticinvoke <org.bson.util.ClassMap: void computeAncestry(java.lang.Class,java.util.List)>($r4, r3);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label3;

     label4:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.bson.util.ClassMap: void computeAncestry(java.lang.Class,java.util.List)>($r2, r3);

        $z0 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label5;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r0);

     label5:
        return;
    }

    private static java.util.Map getClassAncestryCache()
    {
        java.util.Map $r0;

        $r0 = <org.bson.util.ClassMap: java.util.Map _ancestryCache>;

        return $r0;
    }

    private static void setClassAncestryCache(java.util.Map)
    {
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        <org.bson.util.ClassMap: java.util.Map _ancestryCache> = r0;

        return;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, $r4;
        java.lang.Class $r3;
        org.bson.util.ClassMap r0;

        r0 := @this: org.bson.util.ClassMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>($r3, r2);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.bson.util.ClassMap: java.util.Map _ancestryCache> = $r0;

        return;
    }
}
