public class org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException extends java.lang.RuntimeException
{
    private static final java.lang.String SOME_CLASS_IN_TOOLS_JAR;
    private static final java.lang.String STANDARD_EXPLANATION;
    private static java.lang.String ALTERNATE_EXPLANATION;

    public static boolean isClassloadingProblemPresent()
    {
        java.lang.ClassNotFoundException $r1;
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.sun.javadoc.Doclet");

     label2:
        return 0;

     label3:
        $r1 := @caughtexception;

        return 1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.lang.String $r1, $r2;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException;

        $r1 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String ALTERNATE_EXPLANATION>;

        if $r1 == null goto label1;

        $r2 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String ALTERNATE_EXPLANATION>;

        goto label2;

     label1:
        $r2 = "An error has occurred while invoking javadoc to inspect your source\nfiles.  This may be due to the fact that $JAVA_HOME/lib/tools.jar does\nnot seem to be in your system classloader.  One common case in which \nthis happens is when using the \'ant\' tool, which uses a special\ncontext classloader to load classes from tools.jar.\n\nThis situation elicits what is believed to a javadoc bug in the initial\nrelease of JDK 1.5.  Javadoc attempts to use its own context classloader\ntools.jar but ignores one that may have already been set, which leads\nto some classes being loaded into two different classloaders.  The\ntelltale sign of this problem is a javadoc error message saying that\n\'languageVersion() must return LanguageVersion - you might see this\nmessage in your process\' output.\n\nThis will hopefully be fixed in a later release of JDK 1.5; if a new\nversion of 1.5 has become available, you might be able to solve this\nby simply upgrading to the latest JDK.\n\nAlternatively, you can work around it by simply including \n$JAVA_HOME/lib/tools.jar in the java -classpath\nparameter.  If you are running ant, you will need to modify the standard\nant script to include tools.jar in the -classpath.\n";

     label2:
        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        return;
    }

    public static void setExplanation(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String ALTERNATE_EXPLANATION> = r0;

        return;
    }

    static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String STANDARD_EXPLANATION> = "An error has occurred while invoking javadoc to inspect your source\nfiles.  This may be due to the fact that $JAVA_HOME/lib/tools.jar does\nnot seem to be in your system classloader.  One common case in which \nthis happens is when using the \'ant\' tool, which uses a special\ncontext classloader to load classes from tools.jar.\n\nThis situation elicits what is believed to a javadoc bug in the initial\nrelease of JDK 1.5.  Javadoc attempts to use its own context classloader\ntools.jar but ignores one that may have already been set, which leads\nto some classes being loaded into two different classloaders.  The\ntelltale sign of this problem is a javadoc error message saying that\n\'languageVersion() must return LanguageVersion - you might see this\nmessage in your process\' output.\n\nThis will hopefully be fixed in a later release of JDK 1.5; if a new\nversion of 1.5 has become available, you might be able to solve this\nby simply upgrading to the latest JDK.\n\nAlternatively, you can work around it by simply including \n$JAVA_HOME/lib/tools.jar in the java -classpath\nparameter.  If you are running ant, you will need to modify the standard\nant script to include tools.jar in the -classpath.\n";

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String SOME_CLASS_IN_TOOLS_JAR> = "com.sun.javadoc.Doclet";

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassloadingException: java.lang.String ALTERNATE_EXPLANATION> = null;

        return;
    }
}
