public final class org.apache.http.conn.scheme.SchemeRegistry extends java.lang.Object
{
    private final java.util.concurrent.ConcurrentHashMap registeredSchemes;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.http.conn.scheme.SchemeRegistry r0;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes> = $r1;

        return;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.IllegalStateException $r3;
        org.apache.http.conn.scheme.Scheme $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheme \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not registered.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return $r2;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.conn.scheme.Scheme $r3;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.HttpHost r0;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r0 := @parameter0: org.apache.http.HttpHost;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host must not be null.");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r3 = virtualinvoke r1.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r2);

        return $r3;
    }

    public final org.apache.http.conn.scheme.Scheme get(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.conn.scheme.Scheme r4;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw $r5;

     label1:
        $r2 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.apache.http.conn.scheme.Scheme) $r3;

        return r4;
    }

    public final org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)
    {
        org.apache.http.conn.scheme.Scheme r0, r5;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r4;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r6;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r0 := @parameter0: org.apache.http.conn.scheme.Scheme;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme must not be null.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke r0.<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        r5 = (org.apache.http.conn.scheme.Scheme) $r4;

        return r5;
    }

    public final org.apache.http.conn.scheme.Scheme unregister(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.conn.scheme.Scheme r4;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw $r5;

     label1:
        $r2 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        r4 = (org.apache.http.conn.scheme.Scheme) $r3;

        return r4;
    }

    public final java.util.List getSchemeNames()
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Set $r3;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public void setItems(java.util.Map)
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        java.util.Map r0;
        java.util.concurrent.ConcurrentHashMap $r2, $r3;

        r1 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r3 = r1.<org.apache.http.conn.scheme.SchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r0);

        return;
    }
}
