public class org.apache.log4j.EnhancedPatternLayout extends org.apache.log4j.Layout
{
    public static final java.lang.String DEFAULT_CONVERSION_PATTERN;
    public static final java.lang.String TTCC_CONVERSION_PATTERN;
    protected final int BUF_SIZE;
    protected final int MAX_CAPACITY;
    public static final java.lang.String PATTERN_RULE_REGISTRY;
    private org.apache.log4j.helpers.PatternConverter head;
    private java.lang.String conversionPattern;
    private boolean handlesExceptions;

    public void <init>()
    {
        org.apache.log4j.EnhancedPatternLayout r0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        specialinvoke r0.<org.apache.log4j.EnhancedPatternLayout: void <init>(java.lang.String)>("%m%n");

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.EnhancedPatternLayout r0;
        org.apache.log4j.helpers.PatternConverter $r3, $r4, $r5;
        org.apache.log4j.pattern.BridgePatternConverter $r6;
        org.apache.log4j.helpers.PatternParser $r2;
        java.lang.String r1, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.Layout: void <init>()>();

        r0.<org.apache.log4j.EnhancedPatternLayout: int MAX_CAPACITY> = 1024;

        r0.<org.apache.log4j.EnhancedPatternLayout: int BUF_SIZE> = 256;

        r0.<org.apache.log4j.EnhancedPatternLayout: int BUF_SIZE> = 256;

        r0.<org.apache.log4j.EnhancedPatternLayout: int MAX_CAPACITY> = 1024;

        r0.<org.apache.log4j.EnhancedPatternLayout: java.lang.String conversionPattern> = r1;

        if r1 != null goto label1;

        $r7 = "%m%n";

        goto label2;

     label1:
        $r7 = r1;

     label2:
        $r2 = virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)>($r7);

        $r3 = virtualinvoke $r2.<org.apache.log4j.helpers.PatternParser: org.apache.log4j.helpers.PatternConverter parse()>();

        r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head> = $r3;

        $r4 = r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head>;

        $z0 = $r4 instanceof org.apache.log4j.pattern.BridgePatternConverter;

        if $z0 == 0 goto label5;

        $r5 = r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head>;

        $r6 = (org.apache.log4j.pattern.BridgePatternConverter) $r5;

        $z1 = virtualinvoke $r6.<org.apache.log4j.pattern.BridgePatternConverter: boolean ignoresThrowable()>();

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r0.<org.apache.log4j.EnhancedPatternLayout: boolean handlesExceptions> = $z2;

        goto label6;

     label5:
        r0.<org.apache.log4j.EnhancedPatternLayout: boolean handlesExceptions> = 0;

     label6:
        return;
    }

    public void setConversionPattern(java.lang.String)
    {
        org.apache.log4j.EnhancedPatternLayout r0;
        org.apache.log4j.helpers.PatternConverter $r5, $r6, $r7;
        org.apache.log4j.pattern.BridgePatternConverter $r8;
        org.apache.log4j.helpers.PatternParser $r4;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String convertSpecialChars(java.lang.String)>(r1);

        r0.<org.apache.log4j.EnhancedPatternLayout: java.lang.String conversionPattern> = $r2;

        $r3 = r0.<org.apache.log4j.EnhancedPatternLayout: java.lang.String conversionPattern>;

        $r4 = virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.log4j.helpers.PatternParser: org.apache.log4j.helpers.PatternConverter parse()>();

        r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head> = $r5;

        $r6 = r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head>;

        $z0 = $r6 instanceof org.apache.log4j.pattern.BridgePatternConverter;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head>;

        $r8 = (org.apache.log4j.pattern.BridgePatternConverter) $r7;

        $z1 = virtualinvoke $r8.<org.apache.log4j.pattern.BridgePatternConverter: boolean ignoresThrowable()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<org.apache.log4j.EnhancedPatternLayout: boolean handlesExceptions> = $z2;

        goto label4;

     label3:
        r0.<org.apache.log4j.EnhancedPatternLayout: boolean handlesExceptions> = 0;

     label4:
        return;
    }

    public java.lang.String getConversionPattern()
    {
        java.lang.String $r1;
        org.apache.log4j.EnhancedPatternLayout r0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        $r1 = r0.<org.apache.log4j.EnhancedPatternLayout: java.lang.String conversionPattern>;

        return $r1;
    }

    protected org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.pattern.BridgePatternParser $r0;
        org.apache.log4j.EnhancedPatternLayout r2;

        r2 := @this: org.apache.log4j.EnhancedPatternLayout;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.pattern.BridgePatternParser;

        specialinvoke $r0.<org.apache.log4j.pattern.BridgePatternParser: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public void activateOptions()
    {
        org.apache.log4j.EnhancedPatternLayout r0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        return;
    }

    public java.lang.String format(org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.StringBuffer $r0;
        org.apache.log4j.EnhancedPatternLayout r1;
        org.apache.log4j.helpers.PatternConverter r4;
        org.apache.log4j.spi.LoggingEvent r3;
        java.lang.String $r2;

        r1 := @this: org.apache.log4j.EnhancedPatternLayout;

        r3 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        r4 = r1.<org.apache.log4j.EnhancedPatternLayout: org.apache.log4j.helpers.PatternConverter head>;

     label1:
        if r4 == null goto label2;

        virtualinvoke r4.<org.apache.log4j.helpers.PatternConverter: void format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)>($r0, r3);

        r4 = r4.<org.apache.log4j.helpers.PatternConverter: org.apache.log4j.helpers.PatternConverter next>;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public boolean ignoresThrowable()
    {
        org.apache.log4j.EnhancedPatternLayout r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.EnhancedPatternLayout;

        $z0 = r0.<org.apache.log4j.EnhancedPatternLayout: boolean handlesExceptions>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.EnhancedPatternLayout: java.lang.String PATTERN_RULE_REGISTRY> = "PATTERN_RULE_REGISTRY";

        <org.apache.log4j.EnhancedPatternLayout: java.lang.String TTCC_CONVERSION_PATTERN> = "%r [%t] %p %c %x - %m%n";

        <org.apache.log4j.EnhancedPatternLayout: java.lang.String DEFAULT_CONVERSION_PATTERN> = "%m%n";

        return;
    }
}
