public class com.jhlabs.image.SphereFilter extends com.jhlabs.image.TransformFilter
{
    static final long serialVersionUID;
    private float a;
    private float b;
    private float a2;
    private float b2;
    private float centreX;
    private float centreY;
    private float refractionIndex;
    private float icentreX;
    private float icentreY;

    public void <init>()
    {
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.SphereFilter: float a> = 0.0F;

        r0.<com.jhlabs.image.SphereFilter: float b> = 0.0F;

        r0.<com.jhlabs.image.SphereFilter: float a2> = 0.0F;

        r0.<com.jhlabs.image.SphereFilter: float b2> = 0.0F;

        r0.<com.jhlabs.image.SphereFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.SphereFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.SphereFilter: float refractionIndex> = 1.5F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(1);

        virtualinvoke r0.<com.jhlabs.image.SphereFilter: void setRadius(float)>(100.0F);

        return;
    }

    public void setRefractionIndex(float)
    {
        float f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.SphereFilter: float refractionIndex> = f0;

        return;
    }

    public float getRefractionIndex()
    {
        float $f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        $f0 = r0.<com.jhlabs.image.SphereFilter: float refractionIndex>;

        return $f0;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.SphereFilter: float a> = f0;

        r0.<com.jhlabs.image.SphereFilter: float b> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        $f0 = r0.<com.jhlabs.image.SphereFilter: float a>;

        return $f0;
    }

    public void setCentreX(float)
    {
        float f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.SphereFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        float $f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        $f0 = r0.<com.jhlabs.image.SphereFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.SphereFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        $f0 = r0.<com.jhlabs.image.SphereFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        com.jhlabs.image.SphereFilter r0;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.SphereFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.SphereFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.SphereFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        java.awt.geom.Point2D$Float $r0;
        float $f0, $f1;
        com.jhlabs.image.SphereFilter r1;

        r1 := @this: com.jhlabs.image.SphereFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.SphereFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.SphereFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.SphereFilter r1;
        byte $b2, $b3;
        int $i0, $i1, $i4, $i5;
        java.awt.image.BufferedImage r0, r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        r1 := @this: com.jhlabs.image.SphereFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f1 = (float) $i0;

        $f0 = r1.<com.jhlabs.image.SphereFilter: float centreX>;

        $f2 = $f1 * $f0;

        r1.<com.jhlabs.image.SphereFilter: float icentreX> = $f2;

        $f4 = (float) $i1;

        $f3 = r1.<com.jhlabs.image.SphereFilter: float centreY>;

        $f5 = $f4 * $f3;

        r1.<com.jhlabs.image.SphereFilter: float icentreY> = $f5;

        $f6 = r1.<com.jhlabs.image.SphereFilter: float a>;

        $b2 = $f6 cmpl 0.0F;

        if $b2 != 0 goto label1;

        $i5 = $i0 / 2;

        $f15 = (float) $i5;

        r1.<com.jhlabs.image.SphereFilter: float a> = $f15;

     label1:
        $f7 = r1.<com.jhlabs.image.SphereFilter: float b>;

        $b3 = $f7 cmpl 0.0F;

        if $b3 != 0 goto label2;

        $i4 = $i1 / 2;

        $f14 = (float) $i4;

        r1.<com.jhlabs.image.SphereFilter: float b> = $f14;

     label2:
        $f9 = r1.<com.jhlabs.image.SphereFilter: float a>;

        $f8 = r1.<com.jhlabs.image.SphereFilter: float a>;

        $f10 = $f9 * $f8;

        r1.<com.jhlabs.image.SphereFilter: float a2> = $f10;

        $f12 = r1.<com.jhlabs.image.SphereFilter: float b>;

        $f11 = r1.<com.jhlabs.image.SphereFilter: float b>;

        $f13 = $f12 * $f11;

        r1.<com.jhlabs.image.SphereFilter: float b2> = $f13;

        $r3 = specialinvoke r1.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r0, r2);

        return $r3;
    }

    protected void transformInverse(int, int, float[])
    {
        byte $b2;
        float[] r1;
        com.jhlabs.image.SphereFilter r0;
        float $f0, $f1, f2, $f3, $f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, f26, f27, $f28, f29, $f30, $f31, $f32, $f33, $f34, $f35, f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, f44, f45, f46, f47, f48, f49;
        int i0, i1, $i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;

        r0 := @this: com.jhlabs.image.SphereFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.SphereFilter: float icentreX>;

        f2 = $f1 - $f0;

        $f4 = (float) i1;

        $f3 = r0.<com.jhlabs.image.SphereFilter: float icentreY>;

        f5 = $f4 - $f3;

        f6 = f2 * f2;

        f7 = f5 * f5;

        $f12 = r0.<com.jhlabs.image.SphereFilter: float b2>;

        $f8 = r0.<com.jhlabs.image.SphereFilter: float b2>;

        $f10 = $f8 * f6;

        $f9 = r0.<com.jhlabs.image.SphereFilter: float a2>;

        $f11 = $f10 / $f9;

        $f13 = $f12 - $f11;

        $b2 = f7 cmpl $f13;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        $f42 = (float) i0;

        r1[0] = $f42;

        $f43 = (float) i1;

        r1[1] = $f43;

        goto label2;

     label1:
        $f14 = r0.<com.jhlabs.image.SphereFilter: float refractionIndex>;

        f15 = 1.0F / $f14;

        $f16 = r0.<com.jhlabs.image.SphereFilter: float a2>;

        $f17 = f6 / $f16;

        $f20 = 1.0F - $f17;

        $f18 = r0.<com.jhlabs.image.SphereFilter: float b2>;

        $f19 = f7 / $f18;

        $f24 = $f20 - $f19;

        $f22 = r0.<com.jhlabs.image.SphereFilter: float a>;

        $f21 = r0.<com.jhlabs.image.SphereFilter: float b>;

        $f23 = $f22 * $f21;

        $f25 = $f24 * $f23;

        $d0 = (double) $f25;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f26 = (float) $d1;

        f27 = f26 * f26;

        $d3 = (double) f2;

        $f28 = f6 + f27;

        $d2 = (double) $f28;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double acos(double)>($d5);

        f29 = (float) $d6;

        f44 = 1.5707964F - f29;

        $d7 = (double) f44;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        $d9 = (double) f15;

        $d10 = $d8 * $d9;

        $d11 = staticinvoke <java.lang.Math: double asin(double)>($d10);

        f45 = (float) $d11;

        $f30 = 1.5707964F - f29;

        f46 = $f30 - f45;

        $f31 = (float) i0;

        $d12 = (double) f46;

        $d13 = staticinvoke <java.lang.Math: double tan(double)>($d12);

        $f32 = (float) $d13;

        $f33 = $f32 * f26;

        $f34 = $f31 - $f33;

        r1[0] = $f34;

        $d15 = (double) f5;

        $f35 = f7 + f27;

        $d14 = (double) $f35;

        $d16 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        $d17 = $d15 / $d16;

        $d18 = staticinvoke <java.lang.Math: double acos(double)>($d17);

        f36 = (float) $d18;

        f47 = 1.5707964F - f36;

        $d19 = (double) f47;

        $d20 = staticinvoke <java.lang.Math: double sin(double)>($d19);

        $d21 = (double) f15;

        $d22 = $d20 * $d21;

        $d23 = staticinvoke <java.lang.Math: double asin(double)>($d22);

        f48 = (float) $d23;

        $f37 = 1.5707964F - f36;

        f49 = $f37 - f48;

        $f38 = (float) i1;

        $d24 = (double) f49;

        $d25 = staticinvoke <java.lang.Math: double tan(double)>($d24);

        $f39 = (float) $d25;

        $f40 = $f39 * f26;

        $f41 = $f38 - $f40;

        r1[1] = $f41;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.SphereFilter r0;

        r0 := @this: com.jhlabs.image.SphereFilter;

        return "Distort/Sphere...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.SphereFilter: long serialVersionUID> = -8148404526162968279L;

        return;
    }
}
