public class com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions extends java.lang.Object
{
    private static final com.hp.hpl.jena.sparql.expr.NodeValue xsdString;
    private static final org.apache.jena.iri.IRIFactory iriFactory;
    public static boolean warningsForIRIs;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r4, $r11;
        java.lang.String r6, $r10, $r16;
        boolean $z0, $z1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r3;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r13, $r14, $r15;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Not a literal: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r2 == null goto label2;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Not a string literal: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        return $r1;
    }

    public static void checkTwoArgumentStringLiterals(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node $r2, $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r8, $r16, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r28, $r29, $r30, $r31, $r32, $r33;
        com.hp.hpl.jena.sparql.expr.NodeValue r1, r3;
        java.lang.String r0, $r5, $r6, $r15, $r23, $r25, $r26, $r34, r35, r36;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r24;
        com.hp.hpl.jena.datatypes.RDFDatatype $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r3);

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        r35 = $r5;

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        r36 = $r6;

        if $r5 != null goto label1;

        r35 = "";

     label1:
        if $r6 != null goto label2;

        r36 = "";

     label2:
        $r7 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r7 == null goto label5;

        $r24 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $r25 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $z5 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>($r25);

        if $z5 == 0 goto label3;

        return;

     label3:
        $r26 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z6 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 == 0 goto label4;

        return;

     label4:
        $r27 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Incompatible: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label5:
        $z0 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label6;

        $z4 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 != 0 goto label6;

        $r16 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Incompatible: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label6:
        $z1 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label7;

        $z2 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label7;

        $z3 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z3 != 0 goto label7;

        $r8 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Incompatible: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label7:
        return;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue sameTerm(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r4;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean sameTerm(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r4;
    }

    public static boolean sameTerm(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z4 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue rdfTermEquals(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r4;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean rdfTermEquals(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r4;
    }

    public static boolean rdfTermEquals(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r6;
        java.lang.String $r2, $r3, $r4, $r5, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z4 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label2;

        return 1;

     label2:
        $r6 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatch in RDFterm-equals: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r12);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r6);

     label3:
        return 0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue str(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String str(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r2);

        return $r3;
    }

    public static java.lang.String str(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        java.lang.String $r5, $r10, $r11, $r13;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.expr.ExprTypeException $r6;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r12;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        return $r13;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        return $r11;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z2 == 0 goto label3;

        $r6 = new com.hp.hpl.jena.sparql.expr.ExprTypeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Blank node: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprTypeException: void <init>(java.lang.String)>($r10);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r6);

     label3:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r1);

        return "[undef]";
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue datatype(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3;
        com.hp.hpl.jena.graph.Node $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node datatype(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node datatype(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, $r5, $r6;
        java.lang.String $r1, $r3, $r7, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.rdf.model.Resource $r4;
        com.hp.hpl.jena.sparql.expr.ExprTypeException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r8 = new com.hp.hpl.jena.sparql.expr.ExprTypeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("datatype: Not a literal: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.expr.ExprTypeException: void <init>(java.lang.String)>($r12);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r8);

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r1 == null goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        if $z3 == 0 goto label9;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r3 == null goto label5;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label6;

     label5:
        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        if $z4 != 0 goto label8;

        $r6 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node dtRDFlangString>;

        return $r6;

     label8:
        $r4 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource xstring>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        return $r5;

     label9:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue lang(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String lang(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r2);

        return $r3;
    }

    public static java.lang.String lang(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.expr.ExprTypeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r1, $r5, $r7, r8;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprTypeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lang: Not a literal: ");

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprTypeException: void <init>(java.lang.String)>($r7);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r2);

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        r8 = $r1;

        if $r1 != null goto label2;

        r8 = "";

     label2:
        return r8;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue langMatches(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r3;
        java.lang.String $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.sparql.expr.NodeValue langMatches(com.hp.hpl.jena.sparql.expr.NodeValue,java.lang.String)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue langMatches(com.hp.hpl.jena.sparql.expr.NodeValue, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r8, $r9, $r10, $r11, $r17;
        java.lang.String[] $r4, $r5;
        com.hp.hpl.jena.graph.Node $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r2, r3, r6, r7, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.expr.ExprTypeException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label01;

        $r12 = new com.hp.hpl.jena.sparql.expr.ExprTypeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("langMatches: not a literal: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.sparql.expr.ExprTypeException: void <init>(java.lang.String)>($r16);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r12);

        return null;

     label01:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 == 0 goto label04;

        if $r2 == null goto label02;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 == 0 goto label03;

     label02:
        $r10 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r10;

     label03:
        $r11 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r11;

     label04:
        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $i1 = lengthof $r5;

        $i0 = lengthof $r4;

        if $i1 <= $i0 goto label05;

        $r9 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r9;

     label05:
        i4 = 0;

     label06:
        $i2 = lengthof $r5;

        if i4 >= $i2 goto label11;

        r6 = $r5[i4];

        if r6 != null goto label07;

        goto label11;

     label07:
        $i3 = lengthof $r4;

        if i4 < $i3 goto label08;

        goto label11;

     label08:
        r7 = $r4[i4];

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z2 == 0 goto label09;

        goto label10;

     label09:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r7);

        if $z3 != 0 goto label10;

        $r8 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r8;

     label10:
        i4 = i4 + 1;

        goto label06;

     label11:
        $r17 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r17;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue isIRI(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isIRI(com.hp.hpl.jena.graph.Node)>($r1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r2;
    }

    public static boolean isIRI(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue isURI(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isIRI(com.hp.hpl.jena.graph.Node)>($r1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r2;
    }

    public static boolean isURI(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isIRI(com.hp.hpl.jena.graph.Node)>(r0);

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue isBlank(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isBlank(com.hp.hpl.jena.graph.Node)>($r1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r2;
    }

    public static boolean isBlank(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue isLiteral(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isLiteral(com.hp.hpl.jena.graph.Node)>($r1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r2;
    }

    public static boolean isLiteral(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue iri(com.hp.hpl.jena.sparql.expr.NodeValue, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean isIRI(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node iri(com.hp.hpl.jena.graph.Node,java.lang.String)>($r2, r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r4);

        return $r5;
    }

    public static com.hp.hpl.jena.graph.Node iri(com.hp.hpl.jena.graph.Node, java.lang.String)
    {
        org.apache.jena.iri.IRIFactory $r4, $r19;
        com.hp.hpl.jena.graph.Node r0, $r31, $r35;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r14, $r21;
        org.apache.jena.iri.IRI $r20, r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r22, $r23, $r24, $r27, $r28, $r29;
        org.apache.jena.iri.Violation r13;
        java.lang.String $r1, $r2, r3, $r11, $r18, $r25, $r26, $r30, r33, $r34;
        java.util.Iterator $r5;
        java.lang.Object $r12;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

        $r26 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r30);

        return $r31;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String simpleLiteralOrXSDString(com.hp.hpl.jena.graph.Node)>(r0);

        if $r1 != null goto label3;

        $r21 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t make an IRI from ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        if r3 == null goto label4;

        $r19 = <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: org.apache.jena.iri.IRIFactory iriFactory>;

        $r20 = virtualinvoke $r19.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r3);

        r32 = virtualinvoke $r20.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI create(java.lang.String)>($r2);

        goto label5;

     label4:
        $r4 = <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: org.apache.jena.iri.IRIFactory iriFactory>;

        r32 = virtualinvoke $r4.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>($r2);

     label5:
        $z2 = virtualinvoke r32.<org.apache.jena.iri.IRI: boolean isAbsolute()>();

        if $z2 != 0 goto label6;

        $r14 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative IRI string: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label6:
        $z3 = <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean warningsForIRIs>;

        if $z3 == 0 goto label8;

        $z4 = virtualinvoke r32.<org.apache.jena.iri.IRI: boolean hasViolation(boolean)>(0);

        if $z4 == 0 goto label8;

        r33 = "unknown violation from IRI library";

        $r5 = virtualinvoke r32.<org.apache.jena.iri.IRI: java.util.Iterator violations(boolean)>(0);

        $z5 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.jena.iri.Violation) $r12;

        r33 = virtualinvoke r13.<org.apache.jena.iri.Violation: java.lang.String getShortMessage()>();

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad IRI: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/nodevalue/NodeFunctions;", $r11);

     label8:
        $r34 = virtualinvoke r32.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r35 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r34);

        return $r35;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue struuid()
    {
        java.lang.String $r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String uuidString()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue uuid()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r6;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;
        com.hp.hpl.jena.graph.Node $r5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("urn:uuid:");

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String uuidString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r5);

        return $r6;
    }

    private static java.lang.String uuidString()
    {
        java.util.UUID $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r1 = virtualinvoke $r0.<java.util.UUID: java.lang.String toString()>();

        return $r1;
    }

    private static java.lang.String simpleLiteralOrXSDString(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r1 != null goto label2;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r4;

     label3:
        return null;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strDatatype(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r7;
        com.hp.hpl.jena.graph.Node $r3, $r6;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r8, $r13;
        java.lang.String $r2, $r4, $r12, $r17;
        boolean $z0, $z1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z0 != 0 goto label1;

        $r13 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string (arg 1): ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isIRI()>();

        if $z1 != 0 goto label2;

        $r8 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an IRI (arg 2): ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r2, null, $r5);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r6);

        return $r7;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strLang(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r5;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r6, $r11;
        java.lang.String $r2, $r3, $r10, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string (arg 1): ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z1 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string (arg 2): ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r2, $r3, null);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r4);

        return $r5;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        org.apache.jena.iri.IRIFactory $r3;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.rdf.model.Resource $r0;

        $r0 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource xstring>;

        $r1 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r1);

        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.sparql.expr.NodeValue xsdString> = $r2;

        $r3 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory iriImplementation()>();

        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: org.apache.jena.iri.IRIFactory iriFactory> = $r3;

        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: boolean warningsForIRIs> = 0;

        return;
    }
}
