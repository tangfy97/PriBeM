public class org.mozilla.universalchardet.prober.SBCSGroupProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private org.mozilla.universalchardet.prober.CharsetProber[] probers;
    private boolean[] isActive;
    private int bestGuess;
    private int activeNum;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r43, $r44;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r34, $r37, $r40, $r41, $r42;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r36, $r39;
        org.mozilla.universalchardet.prober.HebrewProber $r33;
        boolean[] $r2;
        org.mozilla.universalchardet.prober.SingleByteCharsetProber $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r35, $r38;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.CharsetProber)[13];

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers> = $r1;

        $r2 = newarray (boolean)[13];

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive> = $r2;

        $r5 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r5[0] = $r3;

        $r8 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r6 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r7 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel>;

        specialinvoke $r6.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r7);

        $r8[1] = $r6;

        $r11 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r9 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r10 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model>;

        specialinvoke $r9.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r10);

        $r11[2] = $r9;

        $r14 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r12 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r13 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel>;

        specialinvoke $r12.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r13);

        $r14[3] = $r12;

        $r17 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r15 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r16 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model>;

        specialinvoke $r15.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r16);

        $r17[4] = $r15;

        $r20 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r18 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r19 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model>;

        specialinvoke $r18.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r19);

        $r20[5] = $r18;

        $r23 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r21 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r22 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model>;

        specialinvoke $r21.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r22);

        $r23[6] = $r21;

        $r26 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r24 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r25 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model>;

        specialinvoke $r24.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r25);

        $r26[7] = $r24;

        $r29 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r27 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r28 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel>;

        specialinvoke $r27.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r28);

        $r29[8] = $r27;

        $r32 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r30 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r31 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel>;

        specialinvoke $r30.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r31);

        $r32[9] = $r30;

        $r33 = new org.mozilla.universalchardet.prober.HebrewProber;

        specialinvoke $r33.<org.mozilla.universalchardet.prober.HebrewProber: void <init>()>();

        $r34 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r34[10] = $r33;

        $r37 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r35 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r36 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel>;

        specialinvoke $r35.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel,boolean,org.mozilla.universalchardet.prober.CharsetProber)>($r36, 0, $r33);

        $r37[11] = $r35;

        $r40 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r38 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r39 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel>;

        specialinvoke $r38.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel,boolean,org.mozilla.universalchardet.prober.CharsetProber)>($r39, 1, $r33);

        $r40[12] = $r38;

        $r41 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r44 = $r41[11];

        $r42 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r43 = $r42[12];

        virtualinvoke $r33.<org.mozilla.universalchardet.prober.HebrewProber: void setModalProbers(org.mozilla.universalchardet.prober.CharsetProber,org.mozilla.universalchardet.prober.CharsetProber)>($r44, $r43);

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r2;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        java.lang.String $r3;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: float getConfidence()>();

        $i1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i2 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        $r2 = $r1[$i2];

        $r3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r3;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r8;
        org.mozilla.universalchardet.prober.CharsetProber[] $r5, $r7;
        byte $b1;
        int $i0, i2, $i3;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        boolean $z0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2, $r3, $r4;
        boolean[] $r6;
        float $f0, f1;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        f1 = 0.0F;

        $r2 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r2 != $r1 goto label1;

        return 0.99F;

     label1:
        $r4 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r4 != $r3 goto label2;

        return 0.01F;

     label2:
        i2 = 0;

     label3:
        $r5 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label6;

        $r6 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $z0 = $r6[i2];

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r7 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r8 = $r7[i2];

        $f0 = virtualinvoke $r8.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $b1 = f1 cmpg $f0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label5;

        f1 = $f0;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = i2;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return f1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber $r6;
        byte[] r1, $r7;
        java.nio.ByteBuffer $r2;
        org.mozilla.universalchardet.prober.CharsetProber[] $r3, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        boolean $z0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r8, $r9, $r10, $r12, $r13, $r14;
        boolean[] $r4, $r11;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: java.nio.ByteBuffer filterWithoutEnglishLetters(byte[],int,int)>(r1, i0, i1);

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if $i2 != 0 goto label1;

        goto label6;

     label1:
        i8 = 0;

     label2:
        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i3 = lengthof $r3;

        if i8 >= $i3 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $z0 = $r4[i8];

        if $z0 != 0 goto label3;

        goto label5;

     label3:
        $r5 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r6 = $r5[i8];

        $r7 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $r8 = virtualinvoke $r6.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[],int,int)>($r7, 0, $i4);

        $r9 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r8 != $r9 goto label4;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = i8;

        $r13 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r13;

        goto label6;

     label4:
        $r10 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r8 != $r10 goto label5;

        $r11 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $r11[i8] = 0;

        $i5 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        $i6 = $i5 - 1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = $i6;

        $i7 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        if $i7 > 0 goto label5;

        $r12 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r12;

        goto label6;

     label5:
        i8 = i8 + 1;

        goto label2;

     label6:
        $r14 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r14;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r4;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        boolean[] $r5;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1, $r3;
        int $i0, $i1, $i2, i3, $i5;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = 0;

        i3 = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r4 = $r3[i3];

        virtualinvoke $r4.<org.mozilla.universalchardet.prober.CharsetProber: void reset()>();

        $r5 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $r5[i3] = 1;

        $i1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        $i2 = $i1 + 1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i5 = (int) -1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = $i5;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        return;
    }

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.sequence.Ibm866Model $r4;
        org.mozilla.universalchardet.prober.sequence.Latin7Model $r6;
        org.mozilla.universalchardet.prober.sequence.Win1251Model $r0;
        org.mozilla.universalchardet.prober.sequence.Ibm855Model $r5;
        org.mozilla.universalchardet.prober.sequence.Koi8rModel $r1;
        org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel $r9;
        org.mozilla.universalchardet.prober.sequence.Win1253Model $r7;
        org.mozilla.universalchardet.prober.sequence.Latin5Model $r2;
        org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel $r8;
        org.mozilla.universalchardet.prober.sequence.HebrewModel $r10;
        org.mozilla.universalchardet.prober.sequence.MacCyrillicModel $r3;

        $r0 = new org.mozilla.universalchardet.prober.sequence.Win1251Model;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.sequence.Win1251Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model> = $r0;

        $r1 = new org.mozilla.universalchardet.prober.sequence.Koi8rModel;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.sequence.Koi8rModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel> = $r1;

        $r2 = new org.mozilla.universalchardet.prober.sequence.Latin5Model;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.sequence.Latin5Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model> = $r2;

        $r3 = new org.mozilla.universalchardet.prober.sequence.MacCyrillicModel;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.sequence.MacCyrillicModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel> = $r3;

        $r4 = new org.mozilla.universalchardet.prober.sequence.Ibm866Model;

        specialinvoke $r4.<org.mozilla.universalchardet.prober.sequence.Ibm866Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model> = $r4;

        $r5 = new org.mozilla.universalchardet.prober.sequence.Ibm855Model;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.sequence.Ibm855Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model> = $r5;

        $r6 = new org.mozilla.universalchardet.prober.sequence.Latin7Model;

        specialinvoke $r6.<org.mozilla.universalchardet.prober.sequence.Latin7Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model> = $r6;

        $r7 = new org.mozilla.universalchardet.prober.sequence.Win1253Model;

        specialinvoke $r7.<org.mozilla.universalchardet.prober.sequence.Win1253Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model> = $r7;

        $r8 = new org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel;

        specialinvoke $r8.<org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel> = $r8;

        $r9 = new org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel;

        specialinvoke $r9.<org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel> = $r9;

        $r10 = new org.mozilla.universalchardet.prober.sequence.HebrewModel;

        specialinvoke $r10.<org.mozilla.universalchardet.prober.sequence.HebrewModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel> = $r10;

        return;
    }
}
