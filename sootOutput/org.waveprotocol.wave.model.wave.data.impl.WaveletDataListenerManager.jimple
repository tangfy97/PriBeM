public class org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.WaveletDataListener
{
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public void <init>()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        return;
    }

    public void onBlipDataAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataTimestampModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        long l0, l1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataTimestampModified(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData,long,long)>(r5, r6, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataVersionModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        long l0, l1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataVersionModified(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData,long,long)>(r5, r6, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataContributorAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.wave.ParticipantId r7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r7 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataContributorAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6, r7);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataContributorRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.wave.ParticipantId r7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r7 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataContributorRemoved(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6, r7);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataSubmitted(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onBlipDataSubmitted(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        long l0, l1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.data.WaveletData,long,long)>(r5, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        long l0, l1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData,long,long)>(r5, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onHashedVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.version.HashedVersion r6, r7;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r7 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onHashedVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r5, r6, r7);

        goto label1;

     label2:
        return;
    }

    public void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void onParticipantRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onParticipantRemoved(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void onRemoteBlipDataContentModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletDataListener: void onRemoteBlipDataContentModified(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletDataListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletDataListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }
}
