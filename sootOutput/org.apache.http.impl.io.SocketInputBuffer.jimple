public class org.apache.http.impl.io.SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer implements org.apache.http.io.EofSensor
{
    private final java.net.Socket socket;
    private boolean eof;

    public void <init>(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket r1;
        org.apache.http.params.HttpParams r3;
        int i0;
        org.apache.http.impl.io.SocketInputBuffer r0;
        java.lang.IllegalArgumentException $r4;
        java.io.InputStream $r2;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket> = r1;

        r0.<org.apache.http.impl.io.SocketInputBuffer: boolean eof> = 0;

        if i0 >= 0 goto label2;

        i0 = virtualinvoke r1.<java.net.Socket: int getReceiveBufferSize()>();

     label2:
        if i0 >= 1024 goto label3;

        i0 = 1024;

     label3:
        $r2 = virtualinvoke r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>($r2, i0, r3);

        return;
    }

    protected int fillBuffer() throws java.io.IOException
    {
        int $i0, $i2;
        org.apache.http.impl.io.SocketInputBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        $i0 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.apache.http.impl.io.SocketInputBuffer: boolean eof> = $z0;

        return $i0;
    }

    public boolean isDataAvailable(int) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.net.Socket $r1, $r2, $r3, $r5;
        java.net.SocketTimeoutException $r6;
        int $i0, i1;
        org.apache.http.impl.io.SocketInputBuffer r0;
        boolean $z0, z1;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        i1 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

        z1 = $z0;

        if $z0 != 0 goto label6;

        $r1 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

     label1:
        $r2 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(i1);

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>();

        z1 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

     label2:
        $r3 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>($i0);

        goto label6;

     label3:
        $r6 := @caughtexception;

        throw $r6;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>($i0);

        throw $r4;

     label6:
        return z1;

        catch java.net.SocketTimeoutException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public boolean isEof()
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        $z0 = r0.<org.apache.http.impl.io.SocketInputBuffer: boolean eof>;

        return $z0;
    }
}
