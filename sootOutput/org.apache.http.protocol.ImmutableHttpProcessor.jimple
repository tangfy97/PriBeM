public final class org.apache.http.protocol.ImmutableHttpProcessor extends java.lang.Object implements org.apache.http.protocol.HttpProcessor
{
    private final org.apache.http.HttpRequestInterceptor[] requestInterceptors;
    private final org.apache.http.HttpResponseInterceptor[] responseInterceptors;

    public void <init>(org.apache.http.HttpRequestInterceptor[], org.apache.http.HttpResponseInterceptor[])
    {
        org.apache.http.HttpResponseInterceptor[] r3, $r4, $r5, $r7;
        org.apache.http.HttpRequestInterceptor[] r1, $r2, $r8, $r10;
        org.apache.http.HttpResponseInterceptor $r6;
        int i0, i1, i2, i3;
        org.apache.http.protocol.ImmutableHttpProcessor r0;
        org.apache.http.HttpRequestInterceptor $r9;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor[];

        r3 := @parameter1: org.apache.http.HttpResponseInterceptor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label3;

        i0 = lengthof r1;

        $r8 = newarray (org.apache.http.HttpRequestInterceptor)[i0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors> = $r8;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r10 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors>;

        $r9 = r1[i1];

        $r10[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = newarray (org.apache.http.HttpRequestInterceptor)[0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors> = $r2;

     label4:
        if r3 == null goto label7;

        i2 = lengthof r3;

        $r5 = newarray (org.apache.http.HttpResponseInterceptor)[i2];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors> = $r5;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        $r7 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors>;

        $r6 = r3[i3];

        $r7[i3] = $r6;

        i3 = i3 + 1;

        goto label5;

     label6:
        goto label8;

     label7:
        $r4 = newarray (org.apache.http.HttpResponseInterceptor)[0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors> = $r4;

     label8:
        return;
    }

    public void <init>(org.apache.http.protocol.HttpRequestInterceptorList, org.apache.http.protocol.HttpResponseInterceptorList)
    {
        org.apache.http.HttpResponseInterceptor[] $r4, $r5, $r6;
        org.apache.http.HttpRequestInterceptor[] $r2, $r8, $r9;
        org.apache.http.protocol.HttpResponseInterceptorList r3;
        org.apache.http.HttpResponseInterceptor $r7;
        int $i0, $i1, i2, i3;
        org.apache.http.protocol.ImmutableHttpProcessor r0;
        org.apache.http.protocol.HttpRequestInterceptorList r1;
        org.apache.http.HttpRequestInterceptor $r10;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestInterceptorList;

        r3 := @parameter1: org.apache.http.protocol.HttpResponseInterceptorList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label3;

        $i1 = interfaceinvoke r1.<org.apache.http.protocol.HttpRequestInterceptorList: int getRequestInterceptorCount()>();

        $r8 = newarray (org.apache.http.HttpRequestInterceptor)[$i1];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors> = $r8;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors>;

        $r10 = interfaceinvoke r1.<org.apache.http.protocol.HttpRequestInterceptorList: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>(i2);

        $r9[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = newarray (org.apache.http.HttpRequestInterceptor)[0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors> = $r2;

     label4:
        if r3 == null goto label7;

        $i0 = interfaceinvoke r3.<org.apache.http.protocol.HttpResponseInterceptorList: int getResponseInterceptorCount()>();

        $r5 = newarray (org.apache.http.HttpResponseInterceptor)[$i0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors> = $r5;

        i3 = 0;

     label5:
        if i3 >= $i0 goto label6;

        $r6 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors>;

        $r7 = interfaceinvoke r3.<org.apache.http.protocol.HttpResponseInterceptorList: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>(i3);

        $r6[i3] = $r7;

        i3 = i3 + 1;

        goto label5;

     label6:
        goto label8;

     label7:
        $r4 = newarray (org.apache.http.HttpResponseInterceptor)[0];

        r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors> = $r4;

     label8:
        return;
    }

    public void <init>(org.apache.http.HttpRequestInterceptor[])
    {
        org.apache.http.HttpRequestInterceptor[] r1;
        org.apache.http.protocol.ImmutableHttpProcessor r0;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor[];

        specialinvoke r0.<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.HttpRequestInterceptor[],org.apache.http.HttpResponseInterceptor[])>(r1, null);

        return;
    }

    public void <init>(org.apache.http.HttpResponseInterceptor[])
    {
        org.apache.http.HttpResponseInterceptor[] r1;
        org.apache.http.protocol.ImmutableHttpProcessor r0;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpResponseInterceptor[];

        specialinvoke r0.<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.HttpRequestInterceptor[],org.apache.http.HttpResponseInterceptor[])>(null, r1);

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.HttpRequest r3;
        org.apache.http.HttpRequestInterceptor[] $r1, $r2;
        org.apache.http.protocol.HttpContext r4;
        int $i0, i1;
        org.apache.http.protocol.ImmutableHttpProcessor r0;
        org.apache.http.HttpRequestInterceptor $r5;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r3 := @parameter0: org.apache.http.HttpRequest;

        r4 := @parameter1: org.apache.http.protocol.HttpContext;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpRequestInterceptor[] requestInterceptors>;

        $r5 = $r2[i1];

        interfaceinvoke $r5.<org.apache.http.HttpRequestInterceptor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r3, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.HttpResponseInterceptor[] $r1, $r2;
        org.apache.http.HttpResponseInterceptor $r5;
        org.apache.http.protocol.HttpContext r4;
        int $i0, i1;
        org.apache.http.HttpResponse r3;
        org.apache.http.protocol.ImmutableHttpProcessor r0;

        r0 := @this: org.apache.http.protocol.ImmutableHttpProcessor;

        r3 := @parameter0: org.apache.http.HttpResponse;

        r4 := @parameter1: org.apache.http.protocol.HttpContext;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.http.protocol.ImmutableHttpProcessor: org.apache.http.HttpResponseInterceptor[] responseInterceptors>;

        $r5 = $r2[i1];

        interfaceinvoke $r5.<org.apache.http.HttpResponseInterceptor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r3, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
