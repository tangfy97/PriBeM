public class com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker extends com.hp.hpl.jena.sparql.syntax.ElementVisitorBase
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker;

        specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementVisitorBase: void <init>()>();

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        com.hp.hpl.jena.sparql.syntax.ElementService $r7;
        com.hp.hpl.jena.sparql.syntax.ElementBind $r10;
        int $i0, i1;
        boolean $z0, $z1;
        java.util.Collection $r6, $r9;
        java.util.List $r1, $r2, $r5, $r8;
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker r11;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        com.hp.hpl.jena.sparql.syntax.Element r4;
        java.lang.Object $r3;

        r11 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (com.hp.hpl.jena.sparql.syntax.Element) $r3;

        $z0 = r4 instanceof com.hp.hpl.jena.sparql.syntax.ElementBind;

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: java.util.Collection calcScopeAll(java.util.List,int)>($r8, i1);

        $r10 = (com.hp.hpl.jena.sparql.syntax.ElementBind) r4;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: void check(java.util.Collection,com.hp.hpl.jena.sparql.syntax.ElementBind)>($r9, $r10);

     label2:
        $z1 = r4 instanceof com.hp.hpl.jena.sparql.syntax.ElementService;

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: java.util.Collection calcScopeAll(java.util.List,int)>($r5, i1);

        $r7 = (com.hp.hpl.jena.sparql.syntax.ElementService) r4;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: void check(java.util.Collection,com.hp.hpl.jena.sparql.syntax.ElementService)>($r6, $r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private static java.util.Collection calcScopeAll(java.util.List, int)
    {
        int i0;
        java.util.List r0;
        java.util.Collection $r1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: java.util.Collection calcScope(java.util.List,int,int)>(r0, 0, i0);

        return $r1;
    }

    private static java.util.Collection calcScope(java.util.List, int, int)
    {
        java.util.HashSet $r0;
        java.util.List r1;
        int i0, i1, i2;
        com.hp.hpl.jena.sparql.syntax.Element r3;
        java.lang.Object $r2;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (com.hp.hpl.jena.sparql.syntax.Element) $r2;

        staticinvoke <com.hp.hpl.jena.sparql.syntax.PatternVars: java.util.Collection vars(java.util.Collection,com.hp.hpl.jena.sparql.syntax.Element)>($r0, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static void check(java.util.Collection, com.hp.hpl.jena.sparql.syntax.ElementBind)
    {
        java.util.Collection r2;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.syntax.ElementBind r0;
        int $i1, $i3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;
        com.hp.hpl.jena.query.QueryParseException $r12;
        boolean $z0;

        r2 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementBind;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementBind: com.hp.hpl.jena.sparql.core.Var getVar()>();

        $z0 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r12 = new com.hp.hpl.jena.query.QueryParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BIND: Variable used when already in-scope: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r10, $i1, $i3);

        throw $r12;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementBind: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void access$200(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.core.Var)>(r2, $r3, $r1);

        return;
    }

    private static void check(java.util.Collection, com.hp.hpl.jena.sparql.syntax.ElementService)
    {
        com.hp.hpl.jena.sparql.syntax.ElementService r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        int $i1, $i3;
        java.lang.String $r11;
        com.hp.hpl.jena.query.QueryParseException $r13;
        boolean $z0, $z1, $z2;
        java.util.Collection r4;
        com.hp.hpl.jena.sparql.core.Var $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;

        r4 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementService;

        $z0 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isStrictMode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementService: com.hp.hpl.jena.graph.Node getServiceNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementService: com.hp.hpl.jena.graph.Node getServiceNode()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r2);

        $z2 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        $r13 = new com.hp.hpl.jena.query.QueryParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SERVICE: Variable not already in-scope: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r13.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r11, $i1, $i3);

        throw $r13;

     label1:
        return;
    }
}
