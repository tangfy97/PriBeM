public class org.eclipse.jdt.internal.core.util.Util extends java.lang.Object
{
    private static final java.lang.String ARGUMENTS_DELIMITER;
    private static final java.lang.String EMPTY_ARGUMENT;
    private static char[][] JAVA_LIKE_EXTENSIONS;
    public static boolean ENABLE_JAVA_LIKE_EXTENSIONS;
    private static final char[] BOOLEAN;
    private static final char[] BYTE;
    private static final char[] CHAR;
    private static final char[] DOUBLE;
    private static final char[] FLOAT;
    private static final char[] INT;
    private static final char[] LONG;
    private static final char[] SHORT;
    private static final char[] VOID;
    private static final char[] INIT;

    static void <clinit>()
    {
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        char[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;

        <org.eclipse.jdt.internal.core.util.Util: java.lang.String EMPTY_ARGUMENT> = "   ";

        <org.eclipse.jdt.internal.core.util.Util: java.lang.String ARGUMENTS_DELIMITER> = "#";

        <org.eclipse.jdt.internal.core.util.Util: boolean ENABLE_JAVA_LIKE_EXTENSIONS> = 1;

        $r0 = "boolean";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] BOOLEAN> = $r1;

        $r2 = "byte";

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] BYTE> = $r3;

        $r4 = "char";

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] CHAR> = $r5;

        $r6 = "double";

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] DOUBLE> = $r7;

        $r8 = "float";

        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] FLOAT> = $r9;

        $r10 = "int";

        $r11 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] INT> = $r11;

        $r12 = "long";

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] LONG> = $r13;

        $r14 = "short";

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] SHORT> = $r15;

        $r16 = "void";

        $r17 = virtualinvoke $r16.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] VOID> = $r17;

        $r18 = "<init>";

        $r19 = virtualinvoke $r18.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.core.util.Util: char[] INIT> = $r19;

        return;
    }

    private void <init>()
    {
        org.eclipse.jdt.internal.core.util.Util r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String[] arrayConcat(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r1, r2, $r3, $r4;
        int i0, $i1, $i2;
        java.lang.String r0;

        r1 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r0;

        return $r4;

     label2:
        i0 = lengthof r1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label3;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r0;

        return $r3;

     label3:
        $i2 = i0 + 1;

        r2 = newarray (java.lang.String)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        r2[i0] = r0;

        return r2;
    }

    private static int checkTypeSignature(java.lang.String, int, int, boolean)
    {
        int i0, i1, $i2, $i3, i4, i6, $i8, $i10, $i11, $i12, $i14, $i16, $i18, $i20;
        java.lang.String r0;
        boolean z0;
        char c5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i0 < i1 goto label01;

        $i8 = (int) -1;

        return $i8;

     label01:
        i4 = i0 + 1;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        i6 = 0;

        goto label04;

     label02:
        i6 = i6 + 1;

        if i4 < i1 goto label03;

        $i10 = (int) -1;

        return $i10;

     label03:
        $i2 = i4;

        i4 = i4 + 1;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

     label04:
        $i11 = (int) c5;

        if $i11 == 91 goto label02;

        $i12 = (int) c5;

        tableswitch($i12)
        {
            case 66: goto label05;
            case 67: goto label05;
            case 68: goto label05;
            case 69: goto label11;
            case 70: goto label05;
            case 71: goto label11;
            case 72: goto label11;
            case 73: goto label05;
            case 74: goto label05;
            case 75: goto label11;
            case 76: goto label08;
            case 77: goto label11;
            case 78: goto label11;
            case 79: goto label11;
            case 80: goto label11;
            case 81: goto label11;
            case 82: goto label11;
            case 83: goto label05;
            case 84: goto label11;
            case 85: goto label11;
            case 86: goto label06;
            case 87: goto label11;
            case 88: goto label11;
            case 89: goto label11;
            case 90: goto label05;
            default: goto label11;
        };

     label05:
        goto label12;

     label06:
        if z0 != 0 goto label07;

        $i14 = (int) -1;

        return $i14;

     label07:
        if i6 == 0 goto label12;

        $i16 = (int) -1;

        return $i16;

     label08:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i4);

        if $i3 <= i4 goto label09;

        if $i3 < i1 goto label10;

     label09:
        $i18 = (int) -1;

        return $i18;

     label10:
        i4 = $i3 + 1;

        goto label12;

     label11:
        $i20 = (int) -1;

        return $i20;

     label12:
        return i4;
    }

    public static int combineHashCodes(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * 17;

        $i3 = $i2 + i1;

        return $i3;
    }

    public static int compare(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i6, $i7, i8, $i10, $i11, $i12, $i14;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i8 = 0;

        goto label6;

     label4:
        $b4 = r0[i8];

        $b3 = r1[i8];

        $i11 = (int) $b4;

        $i12 = (int) $b3;

        i5 = $i11 - $i12;

        if i5 == 0 goto label5;

        return i5;

     label5:
        i8 = i8 + 1;

     label6:
        if i8 < $i2 goto label4;

        $i6 = lengthof r0;

        if $i6 <= $i2 goto label7;

        return 1;

     label7:
        $i7 = lengthof r1;

        if $i7 <= $i2 goto label8;

        $i14 = (int) -1;

        return $i14;

     label8:
        return 0;
    }

    public static int compare(char[], char[])
    {
        int i0, i1, $i2, $i4, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i15;
        char c3, c5;
        char[] r0, r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        i0 = lengthof r0;

        i1 = lengthof r1;

        i8 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        i9 = 0;

        goto label2;

     label1:
        c3 = r0[i9];

        $i4 = i9;

        i9 = i9 + 1;

        c5 = r1[$i4];

        $i10 = (int) c3;

        $i11 = (int) c5;

        if $i10 == $i11 goto label2;

        $i12 = (int) c3;

        $i13 = (int) c5;

        $i6 = $i12 - $i13;

        return $i6;

     label2:
        $i2 = i8;

        $i15 = (int) -1;

        i8 = i8 + $i15;

        if $i2 != 0 goto label1;

        $i7 = i0 - i1;

        return $i7;
    }

    public static java.lang.String concat(java.lang.String, char, java.lang.String)
    {
        char c4;
        int $i0, $i1, $i2, $i3, $i5;
        char[] $r1;
        java.lang.String $r0, r2, r3;

        r2 := @parameter0: java.lang.String;

        c4 := @parameter1: char;

        r3 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        r2 = "null";

     label1:
        if r3 != null goto label2;

        r3 = "null";

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i0 + 1;

        $i3 = $i2 + $i1;

        $r1 = newarray (char)[$i3];

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r1, 0);

        $r1[$i0] = c4;

        $i5 = $i0 + 1;

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, $r1, $i5);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;
    }

    public static java.lang.String concat(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r0, r2, r3;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        r2 = "null";

     label1:
        if r3 != null goto label2;

        r3 = "null";

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r1 = newarray (char)[$i2];

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r1, 0);

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, $r1, $i0);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;
    }

    public static final java.lang.String concatWith(java.lang.String[], char)
    {
        java.lang.String[] r1;
        char c2;
        java.lang.StringBuffer $r0;
        int i0, $i1, i3;
        java.lang.String $r2, $r3;

        r1 := @parameter0: java.lang.String[];

        c2 := @parameter1: char;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

        i0 = lengthof r1;

        goto label3;

     label1:
        $r2 = r1[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = i0 - 1;

        if i3 >= $i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static final java.lang.String concatWith(java.lang.String[], java.lang.String, char)
    {
        java.lang.String[] r0;
        char c1;
        java.lang.StringBuffer $r3;
        int $i0, $i2, i3, i4;
        java.lang.String r1, $r2, $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        c1 := @parameter2: char;

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        if r1 == null goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label4;

     label3:
        $r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String concatWith(java.lang.String[],char)>(r0, c1);

        return $r2;

     label4:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i4 = 0;

        i3 = lengthof r0;

        goto label6;

     label5:
        $r4 = r0[i4];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        i4 = i4 + 1;

     label6:
        if i4 < i3 goto label5;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String concat(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r1;
        java.lang.String $r0, r2, r3, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        r2 = "null";

     label1:
        if r3 != null goto label2;

        r3 = "null";

     label2:
        if r4 != null goto label3;

        r4 = "null";

     label3:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        $i3 = $i0 + $i1;

        $i4 = $i3 + $i2;

        $r1 = newarray (char)[$i4];

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r1, 0);

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, $r1, $i0);

        $i5 = $i0 + $i1;

        virtualinvoke r4.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r1, $i5);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;
    }

    public static java.lang.String convertTypeSignature(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        java.lang.String $r0, $r2;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r2;
    }

    public static java.lang.String defaultJavaExtension()
    {
        return ".java";
    }

    public static final java.lang.String editedString(java.lang.String, org.eclipse.text.edits.TextEdit)
    {
        java.lang.Throwable $r4, $r5;
        org.eclipse.text.edits.TextEdit r0;
        org.eclipse.jdt.internal.core.util.SimpleDocument $r6;
        org.eclipse.text.edits.MalformedTreeException $r7;
        org.eclipse.jface.text.BadLocationException $r8;
        java.lang.String r2, $r3;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.eclipse.text.edits.TextEdit;

        if r0 != null goto label1;

        return r2;

     label1:
        $r6 = new org.eclipse.jdt.internal.core.util.SimpleDocument;

        specialinvoke $r6.<org.eclipse.jdt.internal.core.util.SimpleDocument: void <init>(java.lang.String)>(r2);

     label2:
        virtualinvoke r0.<org.eclipse.text.edits.TextEdit: org.eclipse.text.edits.UndoEdit apply(org.eclipse.jface.text.IDocument,int)>($r6, 0);

        $r3 = virtualinvoke $r6.<org.eclipse.jdt.internal.core.util.SimpleDocument: java.lang.String get()>();

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        $r7 = (org.eclipse.text.edits.MalformedTreeException) $r5;

        virtualinvoke $r7.<org.eclipse.text.edits.MalformedTreeException: void printStackTrace()>();

        goto label6;

     label5:
        $r4 := @caughtexception;

        $r8 = (org.eclipse.jface.text.BadLocationException) $r4;

        virtualinvoke $r8.<org.eclipse.jface.text.BadLocationException: void printStackTrace()>();

     label6:
        return r2;

        catch org.eclipse.text.edits.MalformedTreeException from label2 to label3 with label4;
        catch org.eclipse.jface.text.BadLocationException from label2 to label3 with label5;
    }

    public static final boolean endsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        char $c3, $c4, $c6, $c7;
        int i0, i1, $i2, $i5, $i8, $i9, i10, $i11, $i12;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i8 = 0;

        goto label2;

     label1:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        i0 = $i8;

        if r1 != null goto label3;

        $i9 = 0;

        goto label4;

     label3:
        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

     label4:
        i1 = $i9;

        if $i9 <= i0 goto label5;

        return 0;

     label5:
        i10 = 1;

        goto label8;

     label6:
        $i2 = i1 - i10;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        $c4 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: char toLowerCase(char)>($c3);

        $i5 = i0 - i10;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $c7 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: char toLowerCase(char)>($c6);

        $i11 = (int) $c4;

        $i12 = (int) $c7;

        if $i11 == $i12 goto label7;

        return 0;

     label7:
        i10 = i10 + 1;

     label8:
        if i10 <= i1 goto label6;

        return 1;
    }

    public static boolean equalArrays(java.lang.Object[], java.lang.Object[], int)
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, $i2, i3;
        java.lang.Object $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i1 = lengthof r0;

        if $i1 < i0 goto label2;

        $i2 = lengthof r1;

        if $i2 >= i0 goto label3;

     label2:
        return 0;

     label3:
        i3 = 0;

        goto label7;

     label4:
        $r2 = r0[i3];

        if $r2 != null goto label5;

        $r5 = r1[i3];

        if $r5 == null goto label6;

        return 0;

     label5:
        $r4 = r0[i3];

        $r3 = r1[i3];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

     label7:
        if i3 < i0 goto label4;

        return 1;
    }

    public static boolean equalArraysOrNull(int[], int[])
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 == $i1 goto label4;

        return 0;

     label4:
        i4 = 0;

        goto label7;

     label5:
        $i3 = r0[i4];

        $i2 = r1[i4];

        if $i3 == $i2 goto label6;

        return 0;

     label6:
        i4 = i4 + 1;

     label7:
        if i4 < i0 goto label5;

        return 1;
    }

    public static boolean equalArraysOrNull(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, i2, $i4;
        java.lang.Object $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 == $i1 goto label4;

        return 0;

     label4:
        i2 = i0 - 1;

        goto label8;

     label5:
        $r2 = r0[i2];

        if $r2 != null goto label6;

        $r5 = r1[i2];

        if $r5 == null goto label7;

        return 0;

     label6:
        $r4 = r0[i2];

        $r3 = r1[i2];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label8:
        if i2 >= 0 goto label5;

        return 1;
    }

    public static boolean equalArraysOrNullSortFirst(org.eclipse.jdt.internal.core.util.Util$Comparable[], org.eclipse.jdt.internal.core.util.Util$Comparable[])
    {
        org.eclipse.jdt.internal.core.util.Util$Comparable $r0, $r1;
        int i0, $i1, i2;
        org.eclipse.jdt.internal.core.util.Util$Comparable[] r2, r3;
        boolean $z0;

        r2 := @parameter0: org.eclipse.jdt.internal.core.util.Util$Comparable[];

        r3 := @parameter1: org.eclipse.jdt.internal.core.util.Util$Comparable[];

        if r2 != r3 goto label1;

        return 1;

     label1:
        if r2 == null goto label2;

        if r3 != null goto label3;

     label2:
        return 0;

     label3:
        i0 = lengthof r2;

        $i1 = lengthof r3;

        if i0 == $i1 goto label4;

        return 0;

     label4:
        if i0 < 2 goto label5;

        r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.util.Util$Comparable[] sortCopy(org.eclipse.jdt.internal.core.util.Util$Comparable[])>(r2);

        r3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.util.Util$Comparable[] sortCopy(org.eclipse.jdt.internal.core.util.Util$Comparable[])>(r3);

     label5:
        i2 = 0;

        goto label8;

     label6:
        $r1 = r2[i2];

        $r0 = r3[i2];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        i2 = i2 + 1;

     label8:
        if i2 < i0 goto label6;

        return 1;
    }

    public static boolean equalArraysOrNullSortFirst(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r2, r3;
        int i0, $i1, i2;
        java.lang.String $r0, $r1;
        boolean $z0;

        r2 := @parameter0: java.lang.String[];

        r3 := @parameter1: java.lang.String[];

        if r2 != r3 goto label1;

        return 1;

     label1:
        if r2 == null goto label2;

        if r3 != null goto label3;

     label2:
        return 0;

     label3:
        i0 = lengthof r2;

        $i1 = lengthof r3;

        if i0 == $i1 goto label4;

        return 0;

     label4:
        if i0 < 2 goto label5;

        r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String[] sortCopy(java.lang.String[])>(r2);

        r3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String[] sortCopy(java.lang.String[])>(r3);

     label5:
        i2 = 0;

        goto label8;

     label6:
        $r1 = r2[i2];

        $r0 = r3[i2];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        i2 = i2 + 1;

     label8:
        if i2 < i0 goto label6;

        return 1;
    }

    public static boolean equalOrNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean equalsIgnoreJavaLikeExtension(java.lang.String, java.lang.String)
    {
        char[][] $r2;
        int $i0, $i1, i4, i5, $i6, $i7, $i10, i12, i13, i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String r0, r1;
        char $c2, $c3, $c8, $c9, $c11;
        char[] r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label01;

        return 0;

     label01:
        i12 = 0;

        goto label04;

     label02:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        $i15 = (int) $c2;

        $i16 = (int) $c3;

        if $i15 == $i16 goto label03;

        return 0;

     label03:
        i12 = i12 + 1;

     label04:
        if i12 < $i1 goto label02;

        $r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[][] getJavaLikeExtensions()>();

        i13 = 0;

        i4 = lengthof $r2;

        goto label12;

     label05:
        r3 = $r2[i13];

        i5 = $i1 + 1;

        $i6 = lengthof r3;

        $i7 = i5 + $i6;

        if $i7 == $i0 goto label06;

        goto label11;

     label06:
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i17 = (int) $c8;

        if $i17 == 46 goto label07;

        goto label11;

     label07:
        i14 = i5;

        goto label10;

     label08:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i10 = i14 - i5;

        $c11 = r3[$i10];

        $i18 = (int) $c9;

        $i19 = (int) $c11;

        if $i18 == $i19 goto label09;

        goto label11;

     label09:
        i14 = i14 + 1;

     label10:
        if i14 < $i0 goto label08;

        return 1;

     label11:
        i13 = i13 + 1;

     label12:
        if i13 < i4 goto label05;

        return 0;
    }

    public static java.lang.String extractLastName(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return r0;

     label1:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    public static java.lang.String[] extractParameterTypes(char[])
    {
        java.lang.String[] r1;
        int $i0, $i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i13, $i14, $i15;
        java.lang.String $r2, $r3;
        boolean $z0;
        char c3;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int getParameterCount(char[])>(r0);

        r1 = newarray (java.lang.String)[$i0];

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(40, r0);

        i10 = $i1 + 1;

        i11 = 0;

        i2 = lengthof r0;

        i12 = i10;

     label2:
        if i10 != i2 goto label3;

        goto label9;

     label3:
        c3 = r0[i10];

        $i13 = (int) c3;

        if $i13 != 41 goto label4;

        goto label9;

     label4:
        $i14 = (int) c3;

        if $i14 != 91 goto label5;

        i10 = i10 + 1;

        goto label2;

     label5:
        $i15 = (int) c3;

        if $i15 != 76 goto label8;

        $i6 = i10 + 1;

        $i7 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[],int)>(59, r0, $i6);

        i10 = $i7 + 1;

        if i10 == 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z0);

        $i8 = i11;

        i11 = i11 + 1;

        $i9 = i10 - i12;

        $r3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String convertTypeSignature(char[],int,int)>(r0, i12, $i9);

        r1[$i8] = $r3;

        i12 = i10;

        goto label2;

     label8:
        i10 = i10 + 1;

        $i4 = i11;

        i11 = i11 + 1;

        $i5 = i10 - i12;

        $r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String convertTypeSignature(char[],int,int)>(r0, i12, $i5);

        r1[$i4] = $r2;

        i12 = i10;

        goto label2;

     label9:
        return r1;
    }

    public static java.lang.String extractReturnType(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(41);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z0);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    private static org.eclipse.core.resources.IFile findFirstClassFile(org.eclipse.core.resources.IFolder)
    {
        java.lang.Throwable $r7;
        org.eclipse.core.resources.IFolder r0, $r5;
        org.eclipse.core.resources.IResource[] $r1;
        org.eclipse.core.resources.IResource r2;
        int i0, $i1, i2;
        org.eclipse.core.resources.IFile $r4, $r6;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: org.eclipse.core.resources.IFolder;

     label01:
        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IFolder: org.eclipse.core.resources.IResource[] members()>();

        i2 = 0;

        i0 = lengthof $r1;

        goto label07;

     label02:
        r2 = $r1[i2];

        $i1 = interfaceinvoke r2.<org.eclipse.core.resources.IResource: int getType()>();

        if $i1 != 2 goto label04;

        $r5 = (org.eclipse.core.resources.IFolder) r2;

        $r6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.core.resources.IFile findFirstClassFile(org.eclipse.core.resources.IFolder)>($r5);

     label03:
        return $r6;

     label04:
        $r3 = interfaceinvoke r2.<org.eclipse.core.resources.IResource: java.lang.String getName()>();

        $z0 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isClassFileName(java.lang.String)>($r3);

        if $z0 == 0 goto label06;

        $r4 = (org.eclipse.core.resources.IFile) r2;

     label05:
        return $r4;

     label06:
        i2 = i2 + 1;

     label07:
        if i2 < i0 goto label02;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        return null;

        catch org.eclipse.core.runtime.CoreException from label01 to label03 with label09;
        catch org.eclipse.core.runtime.CoreException from label04 to label05 with label09;
        catch org.eclipse.core.runtime.CoreException from label06 to label08 with label09;
    }

    public static java.lang.String findLineSeparator(char[])
    {
        int i0, i1, $i2, $i3, i4, i5, $i6;
        char[] r0;
        java.lang.String $r1;

        r0 := @parameter0: char[];

        i0 = lengthof r0;

        if i0 <= 0 goto label10;

        i4 = r0[0];

        i5 = 0;

        goto label09;

     label01:
        i1 = i4;

        $i2 = i0 - 1;

        if i5 >= $i2 goto label02;

        $i3 = i5 + 1;

        $i6 = r0[$i3];

        goto label03;

     label02:
        $i6 = 32;

     label03:
        i4 = $i6;

        tableswitch(i1)
        {
            case 10: goto label04;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label05;
            default: goto label08;
        };

     label04:
        return "\n";

     label05:
        if $i6 != 10 goto label06;

        $r1 = "\r\n";

        goto label07;

     label06:
        $r1 = "\r";

     label07:
        return $r1;

     label08:
        i5 = i5 + 1;

     label09:
        if i5 < i0 goto label01;

     label10:
        return null;
    }

    public static org.eclipse.jdt.core.util.IClassFileAttribute getAttribute(org.eclipse.jdt.core.util.IClassFileReader, char[])
    {
        org.eclipse.jdt.core.util.IClassFileAttribute $r2, $r5;
        int i0, i1;
        org.eclipse.jdt.core.util.IClassFileReader r0;
        char[] $r3, r4;
        org.eclipse.jdt.core.util.IClassFileAttribute[] $r1;
        boolean $z0;

        r0 := @parameter0: org.eclipse.jdt.core.util.IClassFileReader;

        r4 := @parameter1: char[];

        $r1 = interfaceinvoke r0.<org.eclipse.jdt.core.util.IClassFileReader: org.eclipse.jdt.core.util.IClassFileAttribute[] getAttributes()>();

        i1 = 0;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = $r1[i1];

        $r3 = interfaceinvoke $r2.<org.eclipse.jdt.core.util.IClassFileAttribute: char[] getAttributeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r3, r4);

        if $z0 == 0 goto label2;

        $r5 = $r1[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    public static org.eclipse.jdt.core.util.IClassFileAttribute getAttribute(org.eclipse.jdt.core.util.ICodeAttribute, char[])
    {
        org.eclipse.jdt.core.util.ICodeAttribute r0;
        org.eclipse.jdt.core.util.IClassFileAttribute $r2, $r5;
        int i0, i1;
        char[] $r3, r4;
        org.eclipse.jdt.core.util.IClassFileAttribute[] $r1;
        boolean $z0;

        r0 := @parameter0: org.eclipse.jdt.core.util.ICodeAttribute;

        r4 := @parameter1: char[];

        $r1 = interfaceinvoke r0.<org.eclipse.jdt.core.util.ICodeAttribute: org.eclipse.jdt.core.util.IClassFileAttribute[] getAttributes()>();

        i1 = 0;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = $r1[i1];

        $r3 = interfaceinvoke $r2.<org.eclipse.jdt.core.util.IClassFileAttribute: char[] getAttributeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r3, r4);

        if $z0 == 0 goto label2;

        $r5 = $r1[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    public static org.eclipse.jdt.core.util.IClassFileAttribute getAttribute(org.eclipse.jdt.core.util.IFieldInfo, char[])
    {
        org.eclipse.jdt.core.util.IFieldInfo r0;
        org.eclipse.jdt.core.util.IClassFileAttribute $r2, $r5;
        int i0, i1;
        char[] $r3, r4;
        org.eclipse.jdt.core.util.IClassFileAttribute[] $r1;
        boolean $z0;

        r0 := @parameter0: org.eclipse.jdt.core.util.IFieldInfo;

        r4 := @parameter1: char[];

        $r1 = interfaceinvoke r0.<org.eclipse.jdt.core.util.IFieldInfo: org.eclipse.jdt.core.util.IClassFileAttribute[] getAttributes()>();

        i1 = 0;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = $r1[i1];

        $r3 = interfaceinvoke $r2.<org.eclipse.jdt.core.util.IClassFileAttribute: char[] getAttributeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r3, r4);

        if $z0 == 0 goto label2;

        $r5 = $r1[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    public static org.eclipse.jdt.core.util.IClassFileAttribute getAttribute(org.eclipse.jdt.core.util.IMethodInfo, char[])
    {
        org.eclipse.jdt.core.util.IMethodInfo r0;
        org.eclipse.jdt.core.util.IClassFileAttribute $r2, $r5;
        int i0, i1;
        char[] $r3, r4;
        org.eclipse.jdt.core.util.IClassFileAttribute[] $r1;
        boolean $z0;

        r0 := @parameter0: org.eclipse.jdt.core.util.IMethodInfo;

        r4 := @parameter1: char[];

        $r1 = interfaceinvoke r0.<org.eclipse.jdt.core.util.IMethodInfo: org.eclipse.jdt.core.util.IClassFileAttribute[] getAttributes()>();

        i1 = 0;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = $r1[i1];

        $r3 = interfaceinvoke $r2.<org.eclipse.jdt.core.util.IClassFileAttribute: char[] getAttributeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r3, r4);

        if $z0 == 0 goto label2;

        $r5 = $r1[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    private static org.eclipse.jdt.core.IClassFile getClassFile(char[])
    {
        org.eclipse.jdt.core.IClassFile $r3;
        char $c5;
        org.eclipse.jdt.core.IPackageFragment $r1;
        int $i0, $i1, $i2, $i3, $i4, i6, $i8, $i10, $i12;
        char[] r0;
        java.lang.String $r4;

        r0 := @parameter0: char[];

        $i0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(124, r0);

        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(47, r0);

        i6 = $i1;

        $i8 = (int) -1;

        if $i1 != $i8 goto label1;

        $c5 = <java.io.File: char separatorChar>;

        i6 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>($c5, r0);

     label1:
        $i10 = (int) -1;

        if $i0 == $i10 goto label2;

        if i6 >= $i0 goto label2;

        i6 = $i0;

     label2:
        $i12 = (int) -1;

        if i6 != $i12 goto label3;

        return null;

     label3:
        $r1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.IPackageFragment getPackageFragment(char[],int,int)>(r0, i6, $i0);

        if $r1 != null goto label4;

        return null;

     label4:
        $r4 = new java.lang.String;

        $i2 = i6 + 1;

        $i3 = lengthof r0;

        $i4 = $i3 - $i2;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r0, $i2, $i4);

        $r3 = interfaceinvoke $r1.<org.eclipse.jdt.core.IPackageFragment: org.eclipse.jdt.core.IClassFile getClassFile(java.lang.String)>($r4);

        return $r3;
    }

    private static org.eclipse.jdt.core.ICompilationUnit getCompilationUnit(char[], org.eclipse.jdt.core.WorkingCopyOwner)
    {
        org.eclipse.jdt.core.ICompilationUnit $r4, $r6;
        char $c0;
        org.eclipse.jdt.core.IPackageFragment $r2;
        org.eclipse.jdt.core.WorkingCopyOwner r5;
        int $i1, $i2, $i3, $i4, $i6, $i8;
        char[] r0, $r1;
        java.lang.String $r7;

        r0 := @parameter0: char[];

        r5 := @parameter1: org.eclipse.jdt.core.WorkingCopyOwner;

        $c0 = <java.io.File: char separatorChar>;

        $r1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] replaceOnCopy(char[],char,char)>(r0, $c0, 47);

        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(47, $r1);

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        return null;

     label1:
        $i8 = (int) -1;

        $r2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.IPackageFragment getPackageFragment(char[],int,int)>($r1, $i1, $i8);

        if $r2 != null goto label2;

        return null;

     label2:
        $r7 = new java.lang.String;

        $i2 = $i1 + 1;

        $i3 = lengthof $r1;

        $i4 = $i3 - $i2;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r1, $i2, $i4);

        $r4 = interfaceinvoke $r2.<org.eclipse.jdt.core.IPackageFragment: org.eclipse.jdt.core.ICompilationUnit getCompilationUnit(java.lang.String)>($r7);

        if r5 == null goto label3;

        $r6 = interfaceinvoke $r4.<org.eclipse.jdt.core.ICompilationUnit: org.eclipse.jdt.core.ICompilationUnit findWorkingCopy(org.eclipse.jdt.core.WorkingCopyOwner)>(r5);

        if $r6 == null goto label3;

        return $r6;

     label3:
        return $r4;
    }

    public static char[][] getJavaLikeExtensions()
    {
        char[][] $r0, $r16, r19, $r21;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.core.runtime.content.IContentType $r2, $r6, $r7;
        org.eclipse.core.runtime.content.IContentType[] $r5;
        java.lang.String[] $r8;
        java.util.HashSet $r3;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.String $r9, $r10, $r14, $r17, r20;
        java.util.Iterator $r12;
        org.eclipse.core.runtime.content.IContentTypeManager $r1, $r4;
        char[] $r11, $r15, $r18;
        java.lang.Object $r13;

        $r0 = <org.eclipse.jdt.internal.core.util.Util: char[][] JAVA_LIKE_EXTENSIONS>;

        if $r0 != null goto label10;

        $z0 = <org.eclipse.jdt.internal.core.util.Util: boolean ENABLE_JAVA_LIKE_EXTENSIONS>;

        if $z0 != 0 goto label01;

        $r16 = newarray (char[])[1];

        $r17 = "java";

        $r18 = virtualinvoke $r17.<java.lang.String: char[] toCharArray()>();

        $r16[0] = $r18;

        <org.eclipse.jdt.internal.core.util.Util: char[][] JAVA_LIKE_EXTENSIONS> = $r16;

        goto label10;

     label01:
        $r1 = staticinvoke <org.eclipse.core.runtime.Platform: org.eclipse.core.runtime.content.IContentTypeManager getContentTypeManager()>();

        $r2 = interfaceinvoke $r1.<org.eclipse.core.runtime.content.IContentTypeManager: org.eclipse.core.runtime.content.IContentType getContentType(java.lang.String)>("org.eclipse.jdt.core.javaSource");

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = staticinvoke <org.eclipse.core.runtime.Platform: org.eclipse.core.runtime.content.IContentTypeManager getContentTypeManager()>();

        $r5 = interfaceinvoke $r4.<org.eclipse.core.runtime.content.IContentTypeManager: org.eclipse.core.runtime.content.IContentType[] getAllContentTypes()>();

        i2 = 0;

        i3 = lengthof $r5;

        goto label06;

     label02:
        $r6 = $r5[i2];

        $z1 = interfaceinvoke $r6.<org.eclipse.core.runtime.content.IContentType: boolean isKindOf(org.eclipse.core.runtime.content.IContentType)>($r2);

        if $z1 == 0 goto label05;

        $r7 = $r5[i2];

        $r8 = interfaceinvoke $r7.<org.eclipse.core.runtime.content.IContentType: java.lang.String[] getFileSpecs(int)>(8);

        i4 = 0;

        i5 = lengthof $r8;

        goto label04;

     label03:
        $r9 = $r8[i4];

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

     label04:
        if i4 < i5 goto label03;

     label05:
        i2 = i2 + 1;

     label06:
        if i2 < i3 goto label02;

        $i0 = virtualinvoke $r3.<java.util.HashSet: int size()>();

        r19 = newarray (char[])[$i0];

        $r10 = "java";

        $r11 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

        r19[0] = $r11;

        i6 = 1;

        $r12 = virtualinvoke $r3.<java.util.HashSet: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r13;

        $r14 = "java";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z2 == 0 goto label08;

        goto label09;

     label08:
        $i1 = i6;

        i6 = i6 + 1;

        $r15 = virtualinvoke r20.<java.lang.String: char[] toCharArray()>();

        r19[$i1] = $r15;

     label09:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label07;

        <org.eclipse.jdt.internal.core.util.Util: char[][] JAVA_LIKE_EXTENSIONS> = r19;

     label10:
        $r21 = <org.eclipse.jdt.internal.core.util.Util: char[][] JAVA_LIKE_EXTENSIONS>;

        return $r21;
    }

    public static long getJdkLevel(java.lang.Object)
    {
        java.util.Enumeration $r3;
        org.eclipse.jdt.internal.core.JavaModelManager $r1, $r17, $r19, $r24;
        org.eclipse.core.runtime.IPath $r27;
        java.util.zip.ZipFile $r2, r21;
        java.util.zip.ZipEntry r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.eclipse.core.runtime.Path $r25;
        java.lang.Throwable $r15, $r16, $r18;
        org.eclipse.core.resources.IFolder $r11;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException $r14;
        long $l0;
        org.eclipse.core.resources.IFile $r12;
        java.lang.String $r6, $r9;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader r20;
        java.io.IOException $r13;
        java.io.File $r8, r23;
        org.eclipse.core.resources.IResource $r10, $r26;
        java.lang.Object r0, $r4, r22;

        r0 := @parameter0: java.lang.Object;

     label01:
        r20 = null;

        $z0 = r0 instanceof org.eclipse.core.resources.IFolder;

        if $z0 == 0 goto label02;

        $r11 = (org.eclipse.core.resources.IFolder) r0;

        $r12 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.core.resources.IFile findFirstClassFile(org.eclipse.core.resources.IFolder)>($r11);

        if $r12 == null goto label13;

        $r26 = (org.eclipse.core.resources.IResource) $r12;

        r20 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader newClassFileReader(org.eclipse.core.resources.IResource)>($r26);

        goto label13;

     label02:
        r21 = null;

     label03:
        r22 = null;

        $z1 = r0 instanceof org.eclipse.core.resources.IResource;

        if $z1 == 0 goto label04;

        $r10 = (org.eclipse.core.resources.IResource) r0;

        r22 = interfaceinvoke $r10.<org.eclipse.core.resources.IResource: org.eclipse.core.runtime.IPath getFullPath()>();

        goto label05;

     label04:
        $z2 = r0 instanceof java.io.File;

        if $z2 == 0 goto label05;

        r23 = (java.io.File) r0;

        $z5 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z5 != 0 goto label05;

        $r25 = new org.eclipse.core.runtime.Path;

        $r8 = (java.io.File) r0;

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r25.<org.eclipse.core.runtime.Path: void <init>(java.lang.String)>($r9);

        r22 = $r25;

     label05:
        if r22 == null goto label12;

        $r1 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        $r27 = (org.eclipse.core.runtime.IPath) r22;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.core.JavaModelManager: java.util.zip.ZipFile getZipFile(org.eclipse.core.runtime.IPath)>($r27);

        r21 = $r2;

        $r3 = virtualinvoke $r2.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        goto label07;

     label06:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.util.zip.ZipEntry) $r4;

        $r6 = virtualinvoke r5.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z4 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isClassFileName(java.lang.String)>($r6);

        if $z4 == 0 goto label07;

        r20 = staticinvoke <org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader: org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader read(java.util.zip.ZipFile,java.lang.String)>($r2, $r6);

        goto label12;

     label07:
        $z3 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 != 0 goto label06;

     label08:
        goto label12;

     label09:
        $r18 := @caughtexception;

     label10:
        $r19 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        virtualinvoke $r19.<org.eclipse.jdt.internal.core.JavaModelManager: void closeZipFile(java.util.zip.ZipFile)>(r21);

        goto label13;

     label11:
        $r16 := @caughtexception;

        $r17 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        virtualinvoke $r17.<org.eclipse.jdt.internal.core.JavaModelManager: void closeZipFile(java.util.zip.ZipFile)>(r21);

        throw $r16;

     label12:
        $r24 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        virtualinvoke $r24.<org.eclipse.jdt.internal.core.JavaModelManager: void closeZipFile(java.util.zip.ZipFile)>(r21);

     label13:
        if r20 == null goto label18;

        $l0 = virtualinvoke r20.<org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader: long getVersion()>();

     label14:
        return $l0;

     label15:
        $r15 := @caughtexception;

        goto label18;

     label16:
        $r14 := @caughtexception;

        goto label18;

     label17:
        $r13 := @caughtexception;

     label18:
        return 0L;

        catch org.eclipse.core.runtime.CoreException from label03 to label08 with label09;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch org.eclipse.core.runtime.CoreException from label01 to label14 with label15;
        catch org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException from label01 to label14 with label16;
        catch java.io.IOException from label01 to label14 with label17;
    }

    public static java.lang.String getNameWithoutJavaLikeExtension(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int indexOfJavaLikeExtension(java.lang.String)>(r0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static java.lang.String getLineSeparator(java.lang.String, org.eclipse.jdt.core.IJavaProject)
    {
        java.lang.Object[] $r2, $r7;
        org.eclipse.core.runtime.preferences.IPreferencesService $r4, $r10;
        org.eclipse.core.resources.IProject $r9;
        int $i0;
        org.eclipse.core.runtime.preferences.IScopeContext[] $r16, $r17;
        org.eclipse.core.resources.ProjectScope $r14;
        java.lang.String r0, $r5, $r6, $r11, $r13;
        org.eclipse.jdt.core.IJavaProject r1;
        org.eclipse.core.runtime.preferences.InstanceScope $r15;
        char[] $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.eclipse.jdt.core.IJavaProject;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r12 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r13 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String findLineSeparator(char[])>($r12);

        if $r13 == null goto label1;

        return $r13;

     label1:
        if r1 == null goto label2;

        $r7 = newarray (org.eclipse.core.runtime.preferences.IScopeContext)[1];

        $r14 = new org.eclipse.core.resources.ProjectScope;

        $r9 = interfaceinvoke r1.<org.eclipse.jdt.core.IJavaProject: org.eclipse.core.resources.IProject getProject()>();

        specialinvoke $r14.<org.eclipse.core.resources.ProjectScope: void <init>(org.eclipse.core.resources.IProject)>($r9);

        $r7[0] = $r14;

        $r10 = staticinvoke <org.eclipse.core.runtime.Platform: org.eclipse.core.runtime.preferences.IPreferencesService getPreferencesService()>();

        $r16 = (org.eclipse.core.runtime.preferences.IScopeContext[]) $r7;

        $r11 = interfaceinvoke $r10.<org.eclipse.core.runtime.preferences.IPreferencesService: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String,org.eclipse.core.runtime.preferences.IScopeContext[])>("org.eclipse.core.runtime", "line.separator", null, $r16);

        if $r11 == null goto label2;

        return $r11;

     label2:
        $r2 = newarray (org.eclipse.core.runtime.preferences.IScopeContext)[1];

        $r15 = new org.eclipse.core.runtime.preferences.InstanceScope;

        specialinvoke $r15.<org.eclipse.core.runtime.preferences.InstanceScope: void <init>()>();

        $r2[0] = $r15;

        $r4 = staticinvoke <org.eclipse.core.runtime.Platform: org.eclipse.core.runtime.preferences.IPreferencesService getPreferencesService()>();

        $r17 = (org.eclipse.core.runtime.preferences.IScopeContext[]) $r2;

        $r5 = interfaceinvoke $r4.<org.eclipse.core.runtime.preferences.IPreferencesService: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String,org.eclipse.core.runtime.preferences.IScopeContext[])>("org.eclipse.core.runtime", "line.separator", null, $r17);

        if $r5 == null goto label3;

        return $r5;

     label3:
        $r6 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        return $r6;
    }

    private static java.lang.String getLineSeparator(char[], char[])
    {
        char[] r0, r2;
        java.lang.String $r1, $r3, $r4, r5;

        r2 := @parameter0: char[];

        r0 := @parameter1: char[];

        $r1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String findLineSeparator(char[])>(r0);

        r5 = $r1;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String findLineSeparator(char[])>(r2);

        r5 = $r3;

        if $r3 != null goto label1;

        $r4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String getLineSeparator(java.lang.String,org.eclipse.jdt.core.IJavaProject)>(null, null);

        return $r4;

     label1:
        return r5;
    }

    private static org.eclipse.jdt.core.IPackageFragment getPackageFragment(char[], int, int)
    {
        char[][] $r19;
        org.eclipse.jdt.core.IPackageFragment $r6, $r29, $r30, $r33, $r35;
        org.eclipse.core.runtime.IPath $r31;
        org.eclipse.jdt.core.IJavaProject $r10;
        org.eclipse.core.runtime.Path $r28;
        org.eclipse.jdt.internal.core.PackageFragmentRoot $r8, r12, r24;
        java.lang.String[] $r7, $r13, $r20, $r22;
        org.eclipse.core.resources.IWorkspaceRoot $r4;
        org.eclipse.core.resources.IWorkspace $r3;
        int i0, i1, $i2, $i3, $i4, $i6;
        java.lang.String $r15, $r26, $r27;
        org.eclipse.jdt.core.IPackageFragmentRoot $r11;
        org.eclipse.jdt.internal.core.PackageFragment $r9, $r14, $r21, $r23;
        org.eclipse.jdt.core.IJavaElement $r5, $r17;
        org.eclipse.core.resources.IResource $r32, $r34;
        char[] r2, $r18;
        java.lang.Object $r25;

        r2 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i6 = (int) -1;

        if i0 == $i6 goto label02;

        $r26 = new java.lang.String;

        specialinvoke $r26.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i0);

        $r17 = staticinvoke <org.eclipse.jdt.core.JavaCore: org.eclipse.jdt.core.IJavaElement create(java.lang.String)>($r26);

        r24 = (org.eclipse.jdt.internal.core.PackageFragmentRoot) $r17;

        if i1 != i0 goto label01;

        $r22 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        $r23 = virtualinvoke r24.<org.eclipse.jdt.internal.core.PackageFragmentRoot: org.eclipse.jdt.internal.core.PackageFragment getPackageFragment(java.lang.String[])>($r22);

        $r29 = (org.eclipse.jdt.core.IPackageFragment) $r23;

        return $r29;

     label01:
        $i4 = i0 + 1;

        $r18 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] subarray(char[],int,int)>(r2, $i4, i1);

        $r19 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitOn(char,char[])>(47, $r18);

        $r20 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] toStrings(char[][])>($r19);

        $r21 = virtualinvoke r24.<org.eclipse.jdt.internal.core.PackageFragmentRoot: org.eclipse.jdt.internal.core.PackageFragment getPackageFragment(java.lang.String[])>($r20);

        $r30 = (org.eclipse.jdt.core.IPackageFragment) $r21;

        return $r30;

     label02:
        $r28 = new org.eclipse.core.runtime.Path;

        $r27 = new java.lang.String;

        specialinvoke $r27.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i1);

        specialinvoke $r28.<org.eclipse.core.runtime.Path: void <init>(java.lang.String)>($r27);

        $r3 = staticinvoke <org.eclipse.core.resources.ResourcesPlugin: org.eclipse.core.resources.IWorkspace getWorkspace()>();

        $r4 = interfaceinvoke $r3.<org.eclipse.core.resources.IWorkspace: org.eclipse.core.resources.IWorkspaceRoot getRoot()>();

        $i2 = virtualinvoke $r28.<org.eclipse.core.runtime.Path: int segmentCount()>();

        if $i2 != 1 goto label03;

        $r15 = virtualinvoke $r28.<org.eclipse.core.runtime.Path: java.lang.String lastSegment()>();

        $r25 = interfaceinvoke $r4.<org.eclipse.core.resources.IWorkspaceRoot: org.eclipse.core.resources.IProject getProject(java.lang.String)>($r15);

        goto label04;

     label03:
        $r31 = (org.eclipse.core.runtime.IPath) $r28;

        $r25 = interfaceinvoke $r4.<org.eclipse.core.resources.IWorkspaceRoot: org.eclipse.core.resources.IFolder getFolder(org.eclipse.core.runtime.IPath)>($r31);

     label04:
        $r32 = (org.eclipse.core.resources.IResource) $r25;

        $r5 = staticinvoke <org.eclipse.jdt.core.JavaCore: org.eclipse.jdt.core.IJavaElement create(org.eclipse.core.resources.IResource)>($r32);

        if $r5 != null goto label05;

        return null;

     label05:
        $i3 = interfaceinvoke $r5.<org.eclipse.jdt.core.IJavaElement: int getElementType()>();

        tableswitch($i3)
        {
            case 2: goto label08;
            case 3: goto label07;
            case 4: goto label06;
            default: goto label10;
        };

     label06:
        $r6 = (org.eclipse.jdt.core.IPackageFragment) $r5;

        return $r6;

     label07:
        $r8 = (org.eclipse.jdt.internal.core.PackageFragmentRoot) $r5;

        $r7 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.core.PackageFragmentRoot: org.eclipse.jdt.internal.core.PackageFragment getPackageFragment(java.lang.String[])>($r7);

        $r33 = (org.eclipse.jdt.core.IPackageFragment) $r9;

        return $r33;

     label08:
        $r10 = (org.eclipse.jdt.core.IJavaProject) $r5;

        $r34 = (org.eclipse.core.resources.IResource) $r25;

        $r11 = interfaceinvoke $r10.<org.eclipse.jdt.core.IJavaProject: org.eclipse.jdt.core.IPackageFragmentRoot getPackageFragmentRoot(org.eclipse.core.resources.IResource)>($r34);

        r12 = (org.eclipse.jdt.internal.core.PackageFragmentRoot) $r11;

        if r12 != null goto label09;

        return null;

     label09:
        $r13 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        $r14 = virtualinvoke r12.<org.eclipse.jdt.internal.core.PackageFragmentRoot: org.eclipse.jdt.internal.core.PackageFragment getPackageFragment(java.lang.String[])>($r13);

        $r35 = (org.eclipse.jdt.core.IPackageFragment) $r14;

        return $r35;

     label10:
        return null;
    }

    public static int getParameterCount(char[])
    {
        char c1;
        int $i0, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9;
        char[] r0;
        boolean $z0, $z1;

        r0 := @parameter0: char[];

        $i0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(40, r0);

        i5 = $i0 + 1;

        if i5 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z0);

        i6 = 0;

        $i4 = lengthof r0;

     label03:
        if i5 != $i4 goto label04;

        goto label10;

     label04:
        c1 = r0[i5];

        $i7 = (int) c1;

        if $i7 != 41 goto label05;

        goto label10;

     label05:
        $i8 = (int) c1;

        if $i8 != 91 goto label06;

        i5 = i5 + 1;

        goto label03;

     label06:
        $i9 = (int) c1;

        if $i9 != 76 goto label09;

        i6 = i6 + 1;

        $i2 = i5 + 1;

        $i3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[],int)>(59, r0, $i2);

        i5 = $i3 + 1;

        if i5 == 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z1);

        goto label03;

     label09:
        i6 = i6 + 1;

        i5 = i5 + 1;

        goto label03;

     label10:
        return i6;
    }

    public static java.lang.String getProblemArgumentsForMarker(java.lang.String[])
    {
        java.lang.String[] r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r3, $r4;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(10);

        $i0 = lengthof r1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        i2 = 0;

        goto label5;

     label1:
        if i2 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#");

     label2:
        $r2 = r1[i2];

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        goto label4;

     label3:
        $r3 = r1[i2];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label4:
        i2 = i2 + 1;

     label5:
        $i3 = lengthof r1;

        if i2 < $i3 goto label1;

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String[] getProblemArgumentsFromMarker(java.lang.String)
    {
        java.lang.String[] $r4, r7;
        java.util.StringTokenizer $r9;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r0, $r1, $r3, r6, r8;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r5;

        r6 := @parameter0: java.lang.String;

        if r6 != null goto label01;

        return null;

     label01:
        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(58);

        $i7 = (int) -1;

        if $i0 != $i7 goto label02;

        return null;

     label02:
        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

     label03:
        $r0 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        return null;

     label06:
        $i3 = $i0 + 1;

        $r1 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i3, $i1);

        r7 = newarray (java.lang.String)[$i1];

        i5 = 0;

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, "#");

        goto label09;

     label07:
        $r3 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r8 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("   ");

        if $z0 == 0 goto label08;

        r8 = "";

     label08:
        $i4 = i5;

        i5 = i5 + 1;

        r7[$i4] = r8;

     label09:
        $z1 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label07;

        if i5 == $i2 goto label10;

        return null;

     label10:
        $r4 = newarray (java.lang.String)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, $r4, 0, i5);

        return $r4;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
    }

    public static byte[] getResourceContentsAsByteArray(org.eclipse.core.resources.IFile) throws org.eclipse.jdt.core.JavaModelException
    {
        java.lang.Throwable $r4, $r8, $r13, $r14;
        byte[] $r2;
        org.eclipse.jdt.core.JavaModelException $r10, $r11;
        java.io.IOException $r3, $r5, $r7;
        org.eclipse.core.runtime.CoreException $r12;
        int $i1;
        org.eclipse.core.resources.IFile r0;
        java.io.InputStream $r1;

        r0 := @parameter0: org.eclipse.core.resources.IFile;

     label01:
        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: java.io.InputStream getContents(boolean)>(1);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        $r10 = new org.eclipse.jdt.core.JavaModelException;

        $r12 = (org.eclipse.core.runtime.CoreException) $r8;

        specialinvoke $r10.<org.eclipse.jdt.core.JavaModelException: void <init>(org.eclipse.core.runtime.CoreException)>($r12);

        $r13 = (java.lang.Throwable) $r10;

        throw $r13;

     label04:
        $i1 = (int) -1;

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: byte[] getInputStreamAsByteArray(java.io.InputStream,int)>($r1, $i1);

     label05:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

     label08:
        return $r2;

     label09:
        $r5 := @caughtexception;

        $r11 = new org.eclipse.jdt.core.JavaModelException;

        specialinvoke $r11.<org.eclipse.jdt.core.JavaModelException: void <init>(java.lang.Throwable,int)>($r5, 985);

        $r14 = (java.lang.Throwable) $r11;

        throw $r14;

     label10:
        $r4 := @caughtexception;

     label11:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r3 := @caughtexception;

     label14:
        throw $r4;

        catch org.eclipse.core.runtime.CoreException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.io.IOException from label11 to label12 with label13;
    }

    public static char[] getResourceContentsAsCharArray(org.eclipse.core.resources.IFile) throws org.eclipse.jdt.core.JavaModelException
    {
        java.lang.Throwable $r2;
        org.eclipse.core.resources.IFile r0;
        char[] $r1;
        java.lang.String r3;

        r0 := @parameter0: org.eclipse.core.resources.IFile;

     label1:
        r3 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: java.lang.String getCharset()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = null;

     label4:
        $r1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[] getResourceContentsAsCharArray(org.eclipse.core.resources.IFile,java.lang.String)>(r0, r3);

        return $r1;

        catch org.eclipse.core.runtime.CoreException from label1 to label2 with label3;
    }

    public static char[] getResourceContentsAsCharArray(org.eclipse.core.resources.IFile, java.lang.String) throws org.eclipse.jdt.core.JavaModelException
    {
        java.lang.Throwable $r16, $r20, $r22, $r30, $r31, $r32, $r33;
        org.eclipse.jdt.core.JavaModelException $r26, $r27, $r28;
        long l1;
        org.eclipse.core.runtime.CoreException $r25;
        org.eclipse.core.runtime.IStatus $r29;
        org.eclipse.core.runtime.IPath $r1, $r12;
        int $i0;
        org.eclipse.core.resources.IFile r0;
        java.lang.String r4, $r11, $r13, $r14;
        java.net.URI $r6;
        org.eclipse.core.filesystem.IFileStore $r7;
        org.eclipse.core.filesystem.IFileInfo $r8;
        org.eclipse.core.runtime.Status $r24;
        java.io.IOException $r15, $r17, $r19;
        java.io.File $r2;
        char[] $r5;
        java.io.InputStream $r3;

        r0 := @parameter0: org.eclipse.core.resources.IFile;

        r4 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: org.eclipse.core.runtime.IPath getLocation()>();

        if $r1 != null goto label05;

     label01:
        $r6 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: java.net.URI getLocationURI()>();

        if $r6 != null goto label02;

        $r25 = new org.eclipse.core.runtime.CoreException;

        $r24 = new org.eclipse.core.runtime.Status;

        $r11 = <org.eclipse.jdt.internal.core.util.Messages: java.lang.String file_notFound>;

        $r12 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: org.eclipse.core.runtime.IPath getFullPath()>();

        $r13 = interfaceinvoke $r12.<org.eclipse.core.runtime.IPath: java.lang.String toString()>();

        $r14 = staticinvoke <org.eclipse.jdt.internal.core.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r11, $r13);

        specialinvoke $r24.<org.eclipse.core.runtime.Status: void <init>(int,java.lang.String,java.lang.String)>(4, "org.eclipse.jdt.core", $r14);

        $r29 = (org.eclipse.core.runtime.IStatus) $r24;

        specialinvoke $r25.<org.eclipse.core.runtime.CoreException: void <init>(org.eclipse.core.runtime.IStatus)>($r29);

        $r30 = (java.lang.Throwable) $r25;

        throw $r30;

     label02:
        $r7 = staticinvoke <org.eclipse.core.filesystem.EFS: org.eclipse.core.filesystem.IFileStore getStore(java.net.URI)>($r6);

        $r8 = interfaceinvoke $r7.<org.eclipse.core.filesystem.IFileStore: org.eclipse.core.filesystem.IFileInfo fetchInfo()>();

        l1 = interfaceinvoke $r8.<org.eclipse.core.filesystem.IFileInfo: long getLength()>();

     label03:
        goto label06;

     label04:
        $r22 := @caughtexception;

        $r26 = new org.eclipse.jdt.core.JavaModelException;

        specialinvoke $r26.<org.eclipse.jdt.core.JavaModelException: void <init>(java.lang.Throwable,int)>($r22, 969);

        $r31 = (java.lang.Throwable) $r26;

        throw $r31;

     label05:
        $r2 = interfaceinvoke $r1.<org.eclipse.core.runtime.IPath: java.io.File toFile()>();

        l1 = virtualinvoke $r2.<java.io.File: long length()>();

     label06:
        $r3 = interfaceinvoke r0.<org.eclipse.core.resources.IFile: java.io.InputStream getContents(boolean)>(1);

     label07:
        goto label09;

     label08:
        $r20 := @caughtexception;

        $r27 = new org.eclipse.jdt.core.JavaModelException;

        specialinvoke $r27.<org.eclipse.jdt.core.JavaModelException: void <init>(java.lang.Throwable,int)>($r20, 969);

        $r32 = (java.lang.Throwable) $r27;

        throw $r32;

     label09:
        $i0 = (int) l1;

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getInputStreamAsCharArray(java.io.InputStream,int,java.lang.String)>($r3, $i0, r4);

     label10:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

     label13:
        return $r5;

     label14:
        $r17 := @caughtexception;

        $r28 = new org.eclipse.jdt.core.JavaModelException;

        specialinvoke $r28.<org.eclipse.jdt.core.JavaModelException: void <init>(java.lang.Throwable,int)>($r17, 985);

        $r33 = (java.lang.Throwable) $r28;

        throw $r33;

     label15:
        $r16 := @caughtexception;

     label16:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r15 := @caughtexception;

     label19:
        throw $r16;

        catch org.eclipse.core.runtime.CoreException from label01 to label03 with label04;
        catch org.eclipse.core.runtime.CoreException from label06 to label07 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.io.IOException from label16 to label17 with label18;
    }

    public static java.lang.String getSignature(org.eclipse.jdt.core.dom.Type)
    {
        org.eclipse.jdt.core.dom.Type r1;
        java.lang.StringBuffer $r0;
        java.lang.String $r2, $r3;

        r1 := @parameter0: org.eclipse.jdt.core.dom.Type;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type,java.lang.StringBuffer)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = staticinvoke <org.eclipse.jdt.core.Signature: java.lang.String createTypeSignature(java.lang.String,boolean)>($r2, 0);

        return $r3;
    }

    public static java.lang.String getSourceAttachmentProperty(org.eclipse.core.runtime.IPath) throws org.eclipse.jdt.core.JavaModelException
    {
        java.lang.Throwable $r8, $r13;
        org.eclipse.core.runtime.QualifiedName $r6;
        org.eclipse.jdt.core.JavaModelException $r11;
        org.eclipse.core.runtime.CoreException $r12;
        org.eclipse.jdt.internal.core.JavaModelManager $r0;
        org.eclipse.core.resources.IWorkspaceRoot $r5;
        org.eclipse.core.runtime.IPath r2;
        org.eclipse.core.resources.IWorkspace $r4;
        java.util.Map r1;
        java.lang.Object $r3;
        java.lang.String $r7, r10;
        boolean $z0;

        r2 := @parameter0: org.eclipse.core.runtime.IPath;

        $r0 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        r1 = $r0.<org.eclipse.jdt.internal.core.JavaModelManager: java.util.Map rootPathToAttachments>;

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r10 = (java.lang.String) $r3;

        if r10 != null goto label6;

     label1:
        $r4 = staticinvoke <org.eclipse.core.resources.ResourcesPlugin: org.eclipse.core.resources.IWorkspace getWorkspace()>();

        $r5 = interfaceinvoke $r4.<org.eclipse.core.resources.IWorkspace: org.eclipse.core.resources.IWorkspaceRoot getRoot()>();

        $r6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.core.runtime.QualifiedName getSourceAttachmentPropertyName(org.eclipse.core.runtime.IPath)>(r2);

        $r7 = interfaceinvoke $r5.<org.eclipse.core.resources.IWorkspaceRoot: java.lang.String getPersistentProperty(org.eclipse.core.runtime.QualifiedName)>($r6);

        if $r7 != null goto label3;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, "");

     label2:
        return null;

     label3:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

     label4:
        return $r7;

     label5:
        $r8 := @caughtexception;

        $r11 = new org.eclipse.jdt.core.JavaModelException;

        $r12 = (org.eclipse.core.runtime.CoreException) $r8;

        specialinvoke $r11.<org.eclipse.jdt.core.JavaModelException: void <init>(org.eclipse.core.runtime.CoreException)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label6:
        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label7;

        return null;

     label7:
        return r10;

        catch org.eclipse.core.runtime.CoreException from label1 to label2 with label5;
        catch org.eclipse.core.runtime.CoreException from label3 to label4 with label5;
    }

    private static org.eclipse.core.runtime.QualifiedName getSourceAttachmentPropertyName(org.eclipse.core.runtime.IPath)
    {
        org.eclipse.core.runtime.QualifiedName $r0;
        org.eclipse.core.runtime.IPath r2;
        java.lang.StringBuffer $r1, $r4;
        java.lang.String $r3, $r5;

        r2 := @parameter0: org.eclipse.core.runtime.IPath;

        $r0 = new org.eclipse.core.runtime.QualifiedName;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("sourceattachment: ");

        $r3 = interfaceinvoke r2.<org.eclipse.core.runtime.IPath: java.lang.String toOSString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.eclipse.core.runtime.QualifiedName: void <init>(java.lang.String,java.lang.String)>("org.eclipse.jdt.core", $r5);

        return $r0;
    }

    public static void setSourceAttachmentProperty(org.eclipse.core.runtime.IPath, java.lang.String)
    {
        java.lang.Throwable $r9;
        org.eclipse.core.runtime.QualifiedName $r6;
        org.eclipse.core.runtime.CoreException $r10;
        org.eclipse.jdt.internal.core.JavaModelManager $r1, $r7;
        org.eclipse.core.resources.IWorkspaceRoot $r5;
        org.eclipse.core.runtime.IPath r2;
        org.eclipse.core.resources.IWorkspace $r4;
        java.util.Map $r3, $r8;
        java.lang.String r0;

        r2 := @parameter0: org.eclipse.core.runtime.IPath;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r7 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        $r8 = $r7.<org.eclipse.jdt.internal.core.JavaModelManager: java.util.Map rootPathToAttachments>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, "");

        goto label2;

     label1:
        $r1 = staticinvoke <org.eclipse.jdt.internal.core.JavaModelManager: org.eclipse.jdt.internal.core.JavaModelManager getJavaModelManager()>();

        $r3 = $r1.<org.eclipse.jdt.internal.core.JavaModelManager: java.util.Map rootPathToAttachments>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        $r4 = staticinvoke <org.eclipse.core.resources.ResourcesPlugin: org.eclipse.core.resources.IWorkspace getWorkspace()>();

        $r5 = interfaceinvoke $r4.<org.eclipse.core.resources.IWorkspace: org.eclipse.core.resources.IWorkspaceRoot getRoot()>();

        $r6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.core.runtime.QualifiedName getSourceAttachmentPropertyName(org.eclipse.core.runtime.IPath)>(r2);

        interfaceinvoke $r5.<org.eclipse.core.resources.IWorkspaceRoot: void setPersistentProperty(org.eclipse.core.runtime.QualifiedName,java.lang.String)>($r6, r0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = (org.eclipse.core.runtime.CoreException) $r9;

        virtualinvoke $r10.<org.eclipse.core.runtime.CoreException: void printStackTrace()>();

     label5:
        return;

        catch org.eclipse.core.runtime.CoreException from label2 to label3 with label4;
    }

    public static java.lang.String getDeclaringTypeSignature(java.lang.String)
    {
        java.lang.StringBuffer $r2;
        java.lang.String r1, $r3;
        org.eclipse.jdt.internal.core.util.KeyToSignature $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.eclipse.jdt.internal.core.util.KeyToSignature;

        specialinvoke $r0.<org.eclipse.jdt.internal.core.util.KeyToSignature: void <init>(java.lang.String,int)>(r1, 2);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.KeyToSignature: void parse()>();

        $r2 = $r0.<org.eclipse.jdt.internal.core.util.KeyToSignature: java.lang.StringBuffer signature>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type, java.lang.StringBuffer)
    {
        org.eclipse.jdt.core.dom.PrimitiveType$Code $r15;
        org.eclipse.jdt.core.dom.SimpleType $r11;
        org.eclipse.jdt.core.dom.Type r0, $r2, $r6, $r10, $r18;
        java.lang.StringBuffer r1;
        int $i0, $i1, i2;
        org.eclipse.jdt.core.dom.SimpleName $r4;
        java.lang.String $r5, $r13, $r16;
        org.eclipse.jdt.core.dom.Name $r12;
        boolean $z0, z1, $z2;
        java.util.Iterator $r8;
        org.eclipse.jdt.core.dom.WildcardType r20;
        java.util.List $r7;
        org.eclipse.jdt.core.dom.QualifiedType $r3;
        java.lang.Object $r9;
        org.eclipse.jdt.core.dom.PrimitiveType $r14;
        org.eclipse.jdt.core.dom.ArrayType r17;
        org.eclipse.jdt.core.dom.ParameterizedType r19;

        r0 := @parameter0: org.eclipse.jdt.core.dom.Type;

        r1 := @parameter1: java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.dom.Type: int getNodeType()>();

        lookupswitch($i0)
        {
            case 5: goto label01;
            case 39: goto label09;
            case 43: goto label11;
            case 74: goto label04;
            case 75: goto label10;
            case 76: goto label12;
            default: goto label16;
        };

     label01:
        r17 = (org.eclipse.jdt.core.dom.ArrayType) r0;

        $r18 = virtualinvoke r17.<org.eclipse.jdt.core.dom.ArrayType: org.eclipse.jdt.core.dom.Type getElementType()>();

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type,java.lang.StringBuffer)>($r18, r1);

        i2 = 0;

        $i1 = virtualinvoke r17.<org.eclipse.jdt.core.dom.ArrayType: int getDimensions()>();

        goto label03;

     label02:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i2 = i2 + 1;

     label03:
        if i2 < $i1 goto label02;

        goto label16;

     label04:
        r19 = (org.eclipse.jdt.core.dom.ParameterizedType) r0;

        $r6 = virtualinvoke r19.<org.eclipse.jdt.core.dom.ParameterizedType: org.eclipse.jdt.core.dom.Type getType()>();

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type,java.lang.StringBuffer)>($r6, r1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        $r7 = virtualinvoke r19.<org.eclipse.jdt.core.dom.ParameterizedType: java.util.List typeArguments()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        z1 = 1;

        goto label08;

     label05:
        if z1 != 0 goto label06;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        goto label07;

     label06:
        z1 = 0;

     label07:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.eclipse.jdt.core.dom.Type) $r9;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type,java.lang.StringBuffer)>($r10, r1);

     label08:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        goto label16;

     label09:
        $r14 = (org.eclipse.jdt.core.dom.PrimitiveType) r0;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.core.dom.PrimitiveType: org.eclipse.jdt.core.dom.PrimitiveType$Code getPrimitiveTypeCode()>();

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.core.dom.PrimitiveType$Code: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        goto label16;

     label10:
        $r3 = (org.eclipse.jdt.core.dom.QualifiedType) r0;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.core.dom.QualifiedType: org.eclipse.jdt.core.dom.SimpleName getName()>();

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.core.dom.SimpleName: java.lang.String getFullyQualifiedName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label16;

     label11:
        $r11 = (org.eclipse.jdt.core.dom.SimpleType) r0;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.core.dom.SimpleType: org.eclipse.jdt.core.dom.Name getName()>();

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.core.dom.Name: java.lang.String getFullyQualifiedName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        goto label16;

     label12:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        r20 = (org.eclipse.jdt.core.dom.WildcardType) r0;

        $r2 = virtualinvoke r20.<org.eclipse.jdt.core.dom.WildcardType: org.eclipse.jdt.core.dom.Type getBound()>();

        if $r2 != null goto label13;

        return;

     label13:
        $z0 = virtualinvoke r20.<org.eclipse.jdt.core.dom.WildcardType: boolean isUpperBound()>();

        if $z0 == 0 goto label14;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        goto label15;

     label14:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" super ");

     label15:
        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void getFullyQualifiedName(org.eclipse.jdt.core.dom.Type,java.lang.StringBuffer)>($r2, r1);

     label16:
        return;
    }

    public static java.lang.String[] getTrimmedSimpleNames(java.lang.String)
    {
        int i0, i1;
        java.lang.String[] $r1;
        java.lang.String r0, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.eclipse.jdt.core.Signature: java.lang.String[] getSimpleNames(java.lang.String)>(r0);

        i1 = 0;

        i0 = lengthof $r1;

        goto label2;

     label1:
        $r2 = $r1[i1];

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r1[i1] = $r3;

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return $r1;
    }

    public static org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.FieldBinding, org.eclipse.jdt.core.WorkingCopyOwner, org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)
    {
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r1, $r4;
        org.eclipse.jdt.core.IField $r9;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding r0;
        org.eclipse.jdt.core.IType r6;
        org.eclipse.jdt.core.WorkingCopyOwner r2;
        org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap r3;
        char[] $r7;
        java.lang.String $r8;
        org.eclipse.jdt.internal.core.JavaElement $r5, $r10;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.FieldBinding;

        r2 := @parameter1: org.eclipse.jdt.core.WorkingCopyOwner;

        r3 := @parameter2: org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $r5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r4, r2, r3);

        r6 = (org.eclipse.jdt.core.IType) $r5;

        if r6 != null goto label2;

        return null;

     label2:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: char[] name>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r7);

        $r9 = interfaceinvoke r6.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IField getField(java.lang.String)>($r8);

        $r10 = (org.eclipse.jdt.internal.core.JavaElement) $r9;

        return $r10;
    }

    public static org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.MethodBinding, org.eclipse.jdt.core.WorkingCopyOwner, org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)
    {
        char[][] $r28;
        org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap r2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r11;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding r0, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r43;
        org.eclipse.jdt.core.IType r5;
        java.lang.Throwable $r36;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r39;
        java.lang.String $r10, $r13, $r20, $r22, $r25, $r30, $r32, r44, $r45, r46;
        org.eclipse.jdt.internal.core.JavaElement $r4, $r18, $r19, $r27, $r35;
        org.eclipse.jdt.core.IMethod[] $r15, $r16;
        char[] $r7, $r12, $r21, $r24, $r29, $r31;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration r38;
        org.eclipse.jdt.core.WorkingCopyOwner r1;
        org.eclipse.jdt.internal.compiler.ast.Argument[] r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z8, $z9, $z10;
        org.eclipse.jdt.internal.compiler.ast.Argument r42;
        java.lang.String[] $r23, $r33, r41;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r37;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i8, i9;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r3, $r8, $r9;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] $r47;
        org.eclipse.jdt.core.IMethod $r14, $r17, $r26, $r34;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodBinding;

        r1 := @parameter1: org.eclipse.jdt.core.WorkingCopyOwner;

        r2 := @parameter2: org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $r4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r3, r1, r2);

        r5 = (org.eclipse.jdt.core.IType) $r4;

        if r5 != null goto label01;

        return null;

     label01:
        if r2 != null goto label02;

        $r37 = null;

        goto label03;

     label02:
        $r37 = interfaceinvoke r2.<org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap: org.eclipse.jdt.internal.compiler.ast.ASTNode get(org.eclipse.jdt.internal.compiler.lookup.Binding)>(r0);

     label03:
        if $r37 == null goto label10;

        $z3 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: boolean isBinary()>();

        if $z3 != 0 goto label10;

        $z4 = $r37 instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration;

        if $z4 == 0 goto label04;

        r38 = (org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) $r37;

        $r31 = r38.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: char[] selector>;

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r31);

        $r33 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        $r34 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IMethod getMethod(java.lang.String,java.lang.String[])>($r32, $r33);

        $r35 = (org.eclipse.jdt.internal.core.JavaElement) $r34;

        return $r35;

     label04:
        r39 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r37;

        r40 = r39.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        if r40 == null goto label08;

        $i3 = lengthof r40;

        r41 = newarray (java.lang.String)[$i3];

        i5 = 0;

        goto label07;

     label05:
        r42 = r40[i5];

        r43 = r42.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $i4 = virtualinvoke r43.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        $r28 = virtualinvoke r43.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r29 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r28, 46);

        $r30 = staticinvoke <org.eclipse.jdt.core.Signature: java.lang.String createTypeSignature(char[],boolean)>($r29, 0);

        r44 = $r30;

        if $i4 <= 0 goto label06;

        r44 = staticinvoke <org.eclipse.jdt.core.Signature: java.lang.String createArraySignature(java.lang.String,int)>($r30, $i4);

     label06:
        r41[i5] = r44;

        i5 = i5 + 1;

     label07:
        $i6 = lengthof r40;

        if i5 < $i6 goto label05;

        goto label09;

     label08:
        r41 = newarray (java.lang.String)[0];

     label09:
        $r24 = r39.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector>;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r24);

        $r26 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IMethod getMethod(java.lang.String,java.lang.String[])>($r25, r41);

        $r27 = (org.eclipse.jdt.internal.core.JavaElement) $r26;

        return $r27;

     label10:
        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding original()>();

        $z0 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isConstructor()>();

        if $z0 == 0 goto label11;

        $r45 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: java.lang.String getElementName()>();

        goto label12;

     label11:
        $r45 = new java.lang.String;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: char[] selector>;

        specialinvoke $r45.<java.lang.String: void <init>(char[])>($r7);

     label12:
        r46 = $r45;

        $z1 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: boolean isBinary()>();

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingType()>();

        if $z1 == 0 goto label13;

        $z2 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isConstructor()>();

        if $z2 == 0 goto label13;

        if $r9 == null goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        z6 = $z5;

        $r47 = $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] parameters>;

        if $r47 != null goto label15;

        $i7 = 0;

        goto label16;

     label15:
        $i7 = lengthof $r47;

     label16:
        i8 = $i7;

        if z6 == 0 goto label17;

        $z10 = 1;

        $z9 = 1;

        goto label18;

     label17:
        $z10 = 0;

        $z9 = 0;

     label18:
        z8 = $z10;

        $i0 = $z9 + i8;

        $r23 = newarray (java.lang.String)[$i0];

        if z6 == 0 goto label19;

        $r20 = new java.lang.String;

        $r21 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] genericTypeSignature()>();

        specialinvoke $r20.<java.lang.String: void <init>(char[])>($r21);

        $r22 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r23[0] = $r22;

     label19:
        i9 = 0;

        goto label21;

     label20:
        $i1 = z8 + i9;

        $r10 = new java.lang.String;

        $r11 = $r47[i9];

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] genericTypeSignature()>();

        specialinvoke $r10.<java.lang.String: void <init>(char[])>($r12);

        $r13 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r23[$i1] = $r13;

        i9 = i9 + 1;

     label21:
        if i9 < i8 goto label20;

        $r14 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IMethod getMethod(java.lang.String,java.lang.String[])>(r46, $r23);

        if $z1 == 0 goto label22;

        $r19 = (org.eclipse.jdt.internal.core.JavaElement) $r14;

        return $r19;

     label22:
        $r15 = interfaceinvoke r5.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IMethod[] getMethods()>();

     label23:
        goto label25;

     label24:
        $r36 := @caughtexception;

        return null;

     label25:
        $r16 = staticinvoke <org.eclipse.jdt.internal.core.Member: org.eclipse.jdt.core.IMethod[] findMethods(org.eclipse.jdt.core.IMethod,org.eclipse.jdt.core.IMethod[])>($r14, $r15);

        if $r16 == null goto label26;

        $i2 = lengthof $r16;

        if $i2 != 0 goto label27;

     label26:
        return null;

     label27:
        $r17 = $r16[0];

        $r18 = (org.eclipse.jdt.internal.core.JavaElement) $r17;

        return $r18;

        catch org.eclipse.jdt.core.JavaModelException from label22 to label23 with label24;
    }

    public static org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.core.WorkingCopyOwner, org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)
    {
        org.eclipse.jdt.core.IClassFile $r19, $r23, $r36;
        org.eclipse.jdt.core.IPackageFragment $r11;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r1, $r5, $r42, r51;
        org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap r3;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r46;
        org.eclipse.jdt.core.IType $r21, $r24, $r29, $r34, $r37, r57, r59;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r0;
        java.lang.Throwable $r50;
        org.eclipse.jdt.internal.compiler.lookup.Binding r55;
        java.lang.StringBuffer $r17, $r61;
        java.lang.String $r16, $r18, $r60, $r62, $r63, $r64;
        org.eclipse.jdt.internal.core.JavaElement $r4, $r10, $r22, $r26, $r30, $r35, $r38, $r43, $r45, $r47, $r49, $r54;
        org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding $r8;
        char[] $r6, $r12, $r13, $r28, $r33, $r40;
        org.eclipse.jdt.core.ICompilationUnit $r7, $r31;
        org.eclipse.jdt.internal.core.ClassFile r20, r53, r58;
        org.eclipse.jdt.core.WorkingCopyOwner r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, $i10, $i12, $i14;
        org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding $r41;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r25, r52;
        char $c6;
        org.eclipse.jdt.core.IJavaElement $r9;
        org.eclipse.jdt.core.IMethod r56;
        org.eclipse.jdt.core.ITypeParameter $r44, $r48;

        r51 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r2 := @parameter1: org.eclipse.jdt.core.WorkingCopyOwner;

        r3 := @parameter2: org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap;

        if r51 != null goto label01;

        return null;

     label01:
        $i0 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int kind()>();

        lookupswitch($i0)
        {
            case 68: goto label02;
            case 132: goto label03;
            case 516: goto label03;
            case 8196: goto label03;
            default: goto label04;
        };

     label02:
        $r0 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) r51;

        $r1 = virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType()>();

        $r4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r1, r2, r3);

        return $r4;

     label03:
        return null;

     label04:
        $z0 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isCapture()>();

        if $z0 == 0 goto label05;

        return null;

     label05:
        $z1 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isParameterizedType()>();

        if $z1 != 0 goto label06;

        $z8 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isRawType()>();

        if $z8 == 0 goto label07;

     label06:
        $r5 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>();

        r52 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) $r5;

        goto label08;

     label07:
        r52 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) r51;

     label08:
        $r6 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] getFileName()>();

        $z2 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isLocalType()>();

        if $z2 != 0 goto label09;

        $z4 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isAnonymousType()>();

        if $z4 == 0 goto label20;

     label09:
        $z3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isClassFileName(char[])>($r6);

        if $z3 == 0 goto label16;

        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(124, $r6);

        $i2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(47, $r6);

        i7 = $i2;

        $i10 = (int) -1;

        if $i2 != $i10 goto label10;

        $c6 = <java.io.File: char separatorChar>;

        i7 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>($c6, $r6);

     label10:
        $i12 = (int) -1;

        if $i1 == $i12 goto label11;

        if i7 >= $i1 goto label11;

        i7 = $i1;

     label11:
        $i14 = (int) -1;

        if i7 != $i14 goto label12;

        return null;

     label12:
        $r11 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.IPackageFragment getPackageFragment(char[],int,int)>($r6, i7, $i1);

        $r12 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] constantPoolName()>();

        if $r12 != null goto label15;

        $r23 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.IClassFile getClassFile(char[])>($r6);

        r53 = (org.eclipse.jdt.internal.core.ClassFile) $r23;

        if r53 != null goto label13;

        $r54 = null;

        goto label14;

     label13:
        $r24 = virtualinvoke r53.<org.eclipse.jdt.internal.core.ClassFile: org.eclipse.jdt.core.IType getType()>();

        $r54 = (org.eclipse.jdt.internal.core.JavaElement) $r24;

     label14:
        return $r54;

     label15:
        $i3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(47, $r12);

        $i5 = $i3 + 1;

        $i4 = lengthof $r12;

        $r13 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] subarray(char[],int,int)>($r12, $i5, $i4);

        $r61 = new java.lang.StringBuffer;

        $r60 = new java.lang.String;

        specialinvoke $r60.<java.lang.String: void <init>(char[])>($r13);

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r60);

        specialinvoke $r61.<java.lang.StringBuffer: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = interfaceinvoke $r11.<org.eclipse.jdt.core.IPackageFragment: org.eclipse.jdt.core.IClassFile getClassFile(java.lang.String)>($r18);

        r20 = (org.eclipse.jdt.internal.core.ClassFile) $r19;

        $r21 = virtualinvoke r20.<org.eclipse.jdt.internal.core.ClassFile: org.eclipse.jdt.core.IType getType()>();

        $r22 = (org.eclipse.jdt.internal.core.JavaElement) $r21;

        return $r22;

     label16:
        $r7 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.ICompilationUnit getCompilationUnit(char[],org.eclipse.jdt.core.WorkingCopyOwner)>($r6, r2);

        if $r7 != null goto label17;

        return null;

     label17:
        $r8 = (org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding) r52;

        i8 = $r8.<org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding: int sourceStart>;

        $r9 = interfaceinvoke $r7.<org.eclipse.jdt.core.ICompilationUnit: org.eclipse.jdt.core.IJavaElement getElementAt(int)>(i8);

        $r10 = (org.eclipse.jdt.internal.core.JavaElement) $r9;

     label18:
        return $r10;

     label19:
        $r50 := @caughtexception;

        return null;

     label20:
        $z5 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isTypeVariable()>();

        if $z5 == 0 goto label22;

        $r62 = new java.lang.String;

        $r40 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] sourceName()>();

        specialinvoke $r62.<java.lang.String: void <init>(char[])>($r40);

        $r41 = (org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding) r52;

        r55 = $r41.<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: org.eclipse.jdt.internal.compiler.lookup.Binding declaringElement>;

        $z7 = r55 instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding;

        if $z7 == 0 goto label21;

        $r46 = (org.eclipse.jdt.internal.compiler.lookup.MethodBinding) r55;

        $r47 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r46, r2, r3);

        r56 = (org.eclipse.jdt.core.IMethod) $r47;

        $r48 = interfaceinvoke r56.<org.eclipse.jdt.core.IMethod: org.eclipse.jdt.core.ITypeParameter getTypeParameter(java.lang.String)>($r62);

        $r49 = (org.eclipse.jdt.internal.core.JavaElement) $r48;

        return $r49;

     label21:
        $r42 = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) r55;

        $r43 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r42, r2, r3);

        r57 = (org.eclipse.jdt.core.IType) $r43;

        $r44 = interfaceinvoke r57.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.ITypeParameter getTypeParameter(java.lang.String)>($r62);

        $r45 = (org.eclipse.jdt.internal.core.JavaElement) $r44;

        return $r45;

     label22:
        if $r6 != null goto label23;

        return null;

     label23:
        $r25 = virtualinvoke r51.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingType()>();

        if $r25 != null goto label27;

        $z6 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isClassFileName(char[])>($r6);

        if $z6 == 0 goto label25;

        $r36 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.IClassFile getClassFile(char[])>($r6);

        r58 = (org.eclipse.jdt.internal.core.ClassFile) $r36;

        if r58 != null goto label24;

        return null;

     label24:
        $r37 = virtualinvoke r58.<org.eclipse.jdt.internal.core.ClassFile: org.eclipse.jdt.core.IType getType()>();

        $r38 = (org.eclipse.jdt.internal.core.JavaElement) $r37;

        return $r38;

     label25:
        $r31 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.core.ICompilationUnit getCompilationUnit(char[],org.eclipse.jdt.core.WorkingCopyOwner)>($r6, r2);

        if $r31 != null goto label26;

        return null;

     label26:
        $r63 = new java.lang.String;

        $r33 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] sourceName()>();

        specialinvoke $r63.<java.lang.String: void <init>(char[])>($r33);

        $r34 = interfaceinvoke $r31.<org.eclipse.jdt.core.ICompilationUnit: org.eclipse.jdt.core.IType getType(java.lang.String)>($r63);

        $r35 = (org.eclipse.jdt.internal.core.JavaElement) $r34;

        return $r35;

     label27:
        $r26 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: org.eclipse.jdt.internal.core.JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.core.WorkingCopyOwner,org.eclipse.jdt.internal.core.util.Util$BindingsToNodesMap)>($r25, r2, r3);

        r59 = (org.eclipse.jdt.core.IType) $r26;

        if r59 != null goto label28;

        return null;

     label28:
        $r64 = new java.lang.String;

        $r28 = virtualinvoke r52.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] sourceName()>();

        specialinvoke $r64.<java.lang.String: void <init>(char[])>($r28);

        $r29 = interfaceinvoke r59.<org.eclipse.jdt.core.IType: org.eclipse.jdt.core.IType getType(java.lang.String)>($r64);

        $r30 = (org.eclipse.jdt.internal.core.JavaElement) $r29;

        return $r30;

        catch org.eclipse.jdt.core.JavaModelException from label17 to label18 with label19;
    }

    public static int indexOfEnclosingPath(org.eclipse.core.runtime.IPath, org.eclipse.core.runtime.IPath[], int)
    {
        org.eclipse.core.runtime.IPath[] r0;
        org.eclipse.core.runtime.IPath r1, $r2, $r3, $r4;
        int i0, $i1, i2, i3, i4, $i6, $i8;
        boolean $z0, $z1;

        r1 := @parameter0: org.eclipse.core.runtime.IPath;

        r0 := @parameter1: org.eclipse.core.runtime.IPath[];

        i0 := @parameter2: int;

        $i6 = (int) -1;

        i2 = $i6;

        $i8 = (int) -1;

        i3 = $i8;

        i4 = 0;

        goto label4;

     label1:
        $r2 = r0[i4];

        $z0 = interfaceinvoke $r2.<org.eclipse.core.runtime.IPath: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = r0[i4];

        $z1 = interfaceinvoke $r3.<org.eclipse.core.runtime.IPath: boolean isPrefixOf(org.eclipse.core.runtime.IPath)>(r1);

        if $z1 == 0 goto label3;

        $r4 = r0[i4];

        $i1 = interfaceinvoke $r4.<org.eclipse.core.runtime.IPath: int segmentCount()>();

        if $i1 <= i3 goto label3;

        i3 = $i1;

        i2 = i4;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < i0 goto label1;

        return i2;
    }

    public static int indexOfJavaLikeExtension(java.lang.String)
    {
        char[][] $r1;
        int $i0, i1, i2, i3, i4, $i6, i9, i10, $i11, $i12, $i13, $i15;
        java.lang.String r0;
        char $c5, $c7, $c8;
        char[] r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[][] getJavaLikeExtensions()>();

        i9 = 0;

        i1 = lengthof $r1;

        goto label8;

     label1:
        r2 = $r1[i9];

        i2 = lengthof r2;

        i3 = $i0 - i2;

        i4 = i3 - 1;

        if i4 >= 0 goto label2;

        goto label7;

     label2:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i11 = (int) $c5;

        if $i11 == 46 goto label3;

        goto label7;

     label3:
        i10 = 0;

        goto label6;

     label4:
        $i6 = i3 + i10;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $c8 = r2[i10];

        $i12 = (int) $c7;

        $i13 = (int) $c8;

        if $i12 == $i13 goto label5;

        goto label7;

     label5:
        i10 = i10 + 1;

     label6:
        if i10 < i2 goto label4;

        return i4;

     label7:
        i9 = i9 + 1;

     label8:
        if i9 < i1 goto label1;

        $i15 = (int) -1;

        return $i15;
    }

    public static int indexOfMatchingPath(org.eclipse.core.runtime.IPath, org.eclipse.core.runtime.IPath[], int)
    {
        org.eclipse.core.runtime.IPath r1, $r2;
        org.eclipse.core.runtime.IPath[] r0;
        int i0, i1, $i3;
        boolean $z0;

        r1 := @parameter0: org.eclipse.core.runtime.IPath;

        r0 := @parameter1: org.eclipse.core.runtime.IPath[];

        i0 := @parameter2: int;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0[i1];

        $z0 = interfaceinvoke $r2.<org.eclipse.core.runtime.IPath: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $i3 = (int) -1;

        return $i3;
    }

    public static int indexOfNestedPath(org.eclipse.core.runtime.IPath, org.eclipse.core.runtime.IPath[], int)
    {
        org.eclipse.core.runtime.IPath[] r1;
        org.eclipse.core.runtime.IPath r0, $r2, $r3;
        int i0, i1, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: org.eclipse.core.runtime.IPath;

        r1 := @parameter1: org.eclipse.core.runtime.IPath[];

        i0 := @parameter2: int;

        i1 = 0;

        goto label4;

     label1:
        $r2 = r1[i1];

        $z0 = interfaceinvoke r0.<org.eclipse.core.runtime.IPath: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = r1[i1];

        $z1 = interfaceinvoke r0.<org.eclipse.core.runtime.IPath: boolean isPrefixOf(org.eclipse.core.runtime.IPath)>($r3);

        if $z1 == 0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        $i3 = (int) -1;

        return $i3;
    }

    protected static boolean isAttributeSupported(int)
    {
        org.eclipse.core.filesystem.IFileSystem $r0;
        int $i0, i1, $i2;

        i1 := @parameter0: int;

        $r0 = staticinvoke <org.eclipse.core.filesystem.EFS: org.eclipse.core.filesystem.IFileSystem getLocalFileSystem()>();

        $i0 = interfaceinvoke $r0.<org.eclipse.core.filesystem.IFileSystem: int attributes()>();

        $i2 = $i0 & i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isReadOnly(org.eclipse.core.resources.IResource)
    {
        org.eclipse.core.resources.IResource r0;
        org.eclipse.core.resources.ResourceAttributes $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.eclipse.core.resources.IResource;

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isReadOnlySupported()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IResource: org.eclipse.core.resources.ResourceAttributes getResourceAttributes()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke $r1.<org.eclipse.core.resources.ResourceAttributes: boolean isReadOnly()>();

        return $z1;

     label2:
        return 0;
    }

    public static boolean isReadOnlySupported()
    {
        boolean $z0;

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isAttributeSupported(int)>(2);

        return $z0;
    }

    public static final boolean isExcluded(org.eclipse.jdt.core.IJavaElement)
    {
        org.eclipse.jdt.internal.core.PackageFragmentRoot r12, r13;
        char[][] $r3, $r4, $r9, $r10;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.core.PackageFragment $r7;
        org.eclipse.jdt.core.IJavaElement r0, $r1, $r5, $r6, $r11;
        org.eclipse.core.resources.IResource $r2, $r8;

        r0 := @parameter0: org.eclipse.jdt.core.IJavaElement;

        $i0 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: int getElementType()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label4;
            default: goto label7;
        };

     label1:
        return 0;

     label2:
        $r6 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: org.eclipse.jdt.core.IJavaElement getAncestor(int)>(3);

        r12 = (org.eclipse.jdt.internal.core.PackageFragmentRoot) $r6;

        $r7 = (org.eclipse.jdt.internal.core.PackageFragment) r0;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.core.PackageFragment: org.eclipse.core.resources.IResource resource()>();

        if $r8 == null goto label3;

        $r9 = virtualinvoke r12.<org.eclipse.jdt.internal.core.PackageFragmentRoot: char[][] fullInclusionPatternChars()>();

        $r10 = virtualinvoke r12.<org.eclipse.jdt.internal.core.PackageFragmentRoot: char[][] fullExclusionPatternChars()>();

        $z2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isExcluded(org.eclipse.core.resources.IResource,char[][],char[][])>($r8, $r9, $r10);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r1 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: org.eclipse.jdt.core.IJavaElement getAncestor(int)>(3);

        r13 = (org.eclipse.jdt.internal.core.PackageFragmentRoot) $r1;

        $r2 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: org.eclipse.core.resources.IResource getResource()>();

        if $r2 != null goto label5;

        return 0;

     label5:
        $r3 = virtualinvoke r13.<org.eclipse.jdt.internal.core.PackageFragmentRoot: char[][] fullInclusionPatternChars()>();

        $r4 = virtualinvoke r13.<org.eclipse.jdt.internal.core.PackageFragmentRoot: char[][] fullExclusionPatternChars()>();

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isExcluded(org.eclipse.core.resources.IResource,char[][],char[][])>($r2, $r3, $r4);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        $r5 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: org.eclipse.jdt.core.IJavaElement getParent()>();

        $z1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isExcluded(org.eclipse.jdt.core.IJavaElement)>($r5);

        return $z1;

     label7:
        $r11 = interfaceinvoke r0.<org.eclipse.jdt.core.IJavaElement: org.eclipse.jdt.core.IJavaElement getAncestor(int)>(5);

        if $r11 == null goto label8;

        $z3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isExcluded(org.eclipse.jdt.core.IJavaElement)>($r11);

        if $z3 == 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    public static final boolean isExcluded(org.eclipse.core.runtime.IPath, char[][], char[][], boolean)
    {
        org.eclipse.core.runtime.IPath r1;
        char[] $r3;
        java.lang.String $r2;
        char[][] r0, r4;
        boolean z0, $z1;

        r1 := @parameter0: org.eclipse.core.runtime.IPath;

        r0 := @parameter1: char[][];

        r4 := @parameter2: char[][];

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        if r4 != null goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r1.<org.eclipse.core.runtime.IPath: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $z1 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isExcluded(char[],char[][],char[][],boolean)>($r3, r0, r4, z0);

        return $z1;
    }

    public static final boolean isExcluded(org.eclipse.core.resources.IResource, char[][], char[][])
    {
        org.eclipse.core.runtime.IPath $r1;
        org.eclipse.core.resources.IResource r0;
        int $i0;
        char[][] r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.eclipse.core.resources.IResource;

        r2 := @parameter1: char[][];

        r3 := @parameter2: char[][];

        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IResource: org.eclipse.core.runtime.IPath getFullPath()>();

        $i0 = interfaceinvoke r0.<org.eclipse.core.resources.IResource: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 == 4 goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = 1;

     label2:
        $z1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isExcluded(org.eclipse.core.runtime.IPath,char[][],char[][],boolean)>($r1, r2, r3, $z0);

        return $z1;
    }

    public static boolean isValidClassFileName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.eclipse.core.runtime.IStatus $r3;
        int $i0;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.JavaConventions: org.eclipse.core.runtime.IStatus validateClassFileName(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        $i0 = interfaceinvoke $r3.<org.eclipse.core.runtime.IStatus: int getSeverity()>();

        if $i0 == 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isValidCompilationUnitName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.eclipse.core.runtime.IStatus $r3;
        int $i0;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.JavaConventions: org.eclipse.core.runtime.IStatus validateCompilationUnitName(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        $i0 = interfaceinvoke $r3.<org.eclipse.core.runtime.IStatus: int getSeverity()>();

        if $i0 == 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isValidFolderNameForPackage(java.lang.String, java.lang.String, java.lang.String)
    {
        org.eclipse.core.runtime.IStatus $r3;
        int $i0;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.JavaConventions: org.eclipse.core.runtime.IStatus validateIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        $i0 = interfaceinvoke $r3.<org.eclipse.core.runtime.IStatus: int getSeverity()>();

        if $i0 == 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isValidMethodSignature(java.lang.String)
    {
        char $c1, $c2;
        int $i0, $i3, $i4, i5, i6, $i7, $i9, $i10;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i5 = 1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 == 40 goto label2;

        return 0;

     label2:
        if 1 < $i0 goto label5;

        return 0;

     label3:
        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int checkTypeSignature(java.lang.String,int,int,boolean)>(r0, i5, $i0, 0);

        i5 = $i3;

        $i9 = (int) -1;

        if $i3 != $i9 goto label4;

        return 0;

     label4:
        if $i3 < $i0 goto label5;

        return 0;

     label5:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i10 = (int) $c2;

        if $i10 != 41 goto label3;

        i6 = i5 + 1;

        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int checkTypeSignature(java.lang.String,int,int,boolean)>(r0, i6, $i0, 1);

        if $i4 != $i0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public static boolean isValidTypeSignature(java.lang.String, boolean)
    {
        int $i0, $i1;
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int checkTypeSignature(java.lang.String,int,int,boolean)>(r0, 0, $i0, z0);

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.String localTypeName(java.lang.String, int, int)
    {
        char $c2, $c4;
        int i0, i1, $i3, i5, $i6;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= 0 goto label1;

        $i3 = i0 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i6 = (int) $c4;

        if $i6 != 36 goto label1;

        return r0;

     label1:
        i5 = i0 + 1;

        goto label3;

     label2:
        i5 = i5 + 1;

     label3:
        if i5 >= i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 != 0 goto label2;

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, i1);

        return $r1;
    }

    public static void log(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable $r2, r3;
        org.eclipse.jdt.core.JavaModelException $r1;
        org.eclipse.core.runtime.ILog $r6;
        org.eclipse.core.runtime.Status $r7;
        org.eclipse.core.runtime.Plugin $r5;
        org.eclipse.core.runtime.IStatus $r8;
        java.lang.String r0;
        boolean $z0;

        r3 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: java.lang.String;

        $z0 = r3 instanceof org.eclipse.jdt.core.JavaModelException;

        if $z0 == 0 goto label1;

        $r1 = (org.eclipse.jdt.core.JavaModelException) r3;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.core.JavaModelException: java.lang.Throwable getException()>();

        if $r2 == null goto label1;

        r3 = $r2;

     label1:
        $r7 = new org.eclipse.core.runtime.Status;

        specialinvoke $r7.<org.eclipse.core.runtime.Status: void <init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)>(4, "org.eclipse.jdt.core", 4, r0, r3);

        $r5 = staticinvoke <org.eclipse.jdt.core.JavaCore: org.eclipse.core.runtime.Plugin getPlugin()>();

        $r6 = virtualinvoke $r5.<org.eclipse.core.runtime.Plugin: org.eclipse.core.runtime.ILog getLog()>();

        $r8 = (org.eclipse.core.runtime.IStatus) $r7;

        interfaceinvoke $r6.<org.eclipse.core.runtime.ILog: void log(org.eclipse.core.runtime.IStatus)>($r8);

        return;
    }

    public static void log(int, java.lang.String)
    {
        org.eclipse.core.runtime.IStatus $r5;
        org.eclipse.core.runtime.ILog $r3;
        int i0;
        org.eclipse.core.runtime.Status $r4;
        java.lang.String r1;
        org.eclipse.core.runtime.Plugin $r2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r4 = new org.eclipse.core.runtime.Status;

        specialinvoke $r4.<org.eclipse.core.runtime.Status: void <init>(int,java.lang.String,java.lang.String)>(i0, "org.eclipse.jdt.core", r1);

        $r2 = staticinvoke <org.eclipse.jdt.core.JavaCore: org.eclipse.core.runtime.Plugin getPlugin()>();

        $r3 = virtualinvoke $r2.<org.eclipse.core.runtime.Plugin: org.eclipse.core.runtime.ILog getLog()>();

        $r5 = (org.eclipse.core.runtime.IStatus) $r4;

        interfaceinvoke $r3.<org.eclipse.core.runtime.ILog: void log(org.eclipse.core.runtime.IStatus)>($r5);

        return;
    }

    public static org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader newClassFileReader(org.eclipse.core.resources.IResource) throws org.eclipse.core.runtime.CoreException, org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException, java.io.IOException
    {
        java.lang.Throwable $r6;
        org.eclipse.core.runtime.IPath $r3;
        org.eclipse.core.resources.IResource r0;
        org.eclipse.core.resources.IFile $r1;
        java.lang.String $r4;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader $r5;
        java.io.InputStream $r2, r7;

        r0 := @parameter0: org.eclipse.core.resources.IResource;

        r7 = null;

     label1:
        $r1 = (org.eclipse.core.resources.IFile) r0;

        $r2 = interfaceinvoke $r1.<org.eclipse.core.resources.IFile: java.io.InputStream getContents(boolean)>(1);

        r7 = $r2;

        $r3 = interfaceinvoke r0.<org.eclipse.core.resources.IResource: org.eclipse.core.runtime.IPath getFullPath()>();

        $r4 = interfaceinvoke $r3.<org.eclipse.core.runtime.IPath: java.lang.String toString()>();

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader: org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader read(java.io.InputStream,java.lang.String)>($r2, $r4);

     label2:
        if $r2 == null goto label3;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        if r7 == null goto label5;

        virtualinvoke r7.<java.io.InputStream: void close()>();

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static char[] normalizeCRs(char[], char[])
    {
        int i0, $i1, $i2, i3, i4, i5, i6, $i7, i8, i9, i10;
        org.eclipse.jdt.internal.core.util.CharArrayBuffer $r0;
        java.lang.String $r3;
        char[] r1, r2, $r4, r5, r6, r7;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        $r0 = new org.eclipse.jdt.internal.core.util.CharArrayBuffer;

        specialinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: void <init>()>();

        i3 = 0;

        i0 = lengthof r1;

        if i0 != 0 goto label01;

        return r1;

     label01:
        $r3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String getLineSeparator(char[],char[])>(r1, r2);

        i4 = r1[0];

        i5 = 0;

        goto label10;

     label02:
        i6 = i4;

        $i1 = i0 - 1;

        if i5 >= $i1 goto label03;

        $i2 = i5 + 1;

        $i7 = r1[$i2];

        goto label04;

     label03:
        $i7 = 32;

     label04:
        i4 = $i7;

        tableswitch(i6)
        {
            case 10: goto label05;
            case 11: goto label09;
            case 12: goto label09;
            case 13: goto label06;
            default: goto label09;
        };

     label05:
        i8 = i5 - i3;

        r5 = newarray (char)[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r5, 0, i8);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: org.eclipse.jdt.internal.core.util.CharArrayBuffer append(char[])>(r5);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: org.eclipse.jdt.internal.core.util.CharArrayBuffer append(java.lang.String)>($r3);

        i3 = i5 + 1;

        goto label09;

     label06:
        i9 = i5 - i3;

        if i9 < 0 goto label08;

        r6 = newarray (char)[i9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r6, 0, i9);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: org.eclipse.jdt.internal.core.util.CharArrayBuffer append(char[])>(r6);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: org.eclipse.jdt.internal.core.util.CharArrayBuffer append(java.lang.String)>($r3);

        if $i7 != 10 goto label07;

        i4 = 32;

        i3 = i5 + 2;

        goto label09;

     label07:
        i3 = i5 + 1;

        goto label09;

     label08:
        i3 = i5 + 1;

     label09:
        i5 = i5 + 1;

     label10:
        if i5 < i0 goto label02;

        if i3 <= 0 goto label12;

        i10 = i0 - i3;

        if i10 <= 0 goto label11;

        r7 = newarray (char)[i10];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r7, 0, i10);

        virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: org.eclipse.jdt.internal.core.util.CharArrayBuffer append(char[])>(r7);

     label11:
        $r4 = virtualinvoke $r0.<org.eclipse.jdt.internal.core.util.CharArrayBuffer: char[] getContents()>();

        return $r4;

     label12:
        return r1;
    }

    public static java.lang.String normalizeCRs(java.lang.String, java.lang.String)
    {
        char[] $r2, $r4, $r5;
        java.lang.String $r0, r1, r3;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();

        $r5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[] normalizeCRs(char[],char[])>($r2, $r4);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r5);

        return $r0;
    }

    public static java.lang.String packageName(org.eclipse.core.runtime.IPath, java.lang.String, java.lang.String)
    {
        org.eclipse.core.runtime.IPath r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, r3, r4, $r5;
        boolean $z0;

        r1 := @parameter0: org.eclipse.core.runtime.IPath;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        i3 = 0;

        $i0 = interfaceinvoke r1.<org.eclipse.core.runtime.IPath: int segmentCount()>();

        goto label4;

     label1:
        $r2 = interfaceinvoke r1.<org.eclipse.core.runtime.IPath: java.lang.String segment(int)>(i3);

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isValidFolderNameForPackage(java.lang.String,java.lang.String,java.lang.String)>($r2, r3, r4);

        if $z0 != 0 goto label2;

        return null;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = interfaceinvoke r1.<org.eclipse.core.runtime.IPath: int segmentCount()>();

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < $i0 goto label1;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static int prefixLength(char[], char[])
    {
        char $c3, $c4;
        int $i0, $i1, $i2, i5, i6, $i7, $i8;
        char[] r0, r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        i5 = 0;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i6 = 0;

        goto label2;

     label1:
        i5 = i5 + 1;

        i6 = i6 + 1;

     label2:
        if i6 >= $i2 goto label3;

        $c4 = r0[i6];

        $c3 = r1[i6];

        $i7 = (int) $c4;

        $i8 = (int) $c3;

        if $i7 == $i8 goto label1;

     label3:
        return i5;
    }

    public static int prefixLength(java.lang.String, java.lang.String)
    {
        char $c3, $c4;
        int $i0, $i1, $i2, i5, i6, $i7, $i8;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i5 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        i6 = 0;

        goto label2;

     label1:
        i5 = i5 + 1;

        i6 = i6 + 1;

     label2:
        if i6 >= $i2 goto label3;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c3;

        $i8 = (int) $c4;

        if $i7 == $i8 goto label1;

     label3:
        return i5;
    }

    private static void quickSort(char[][], int, int)
    {
        char[][] r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i10, $i12;
        char[] r1, $r2, r3, $r4, $r5;

        r0 := @parameter0: char[][];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i0 = i6;

        i1 = i7;

        $i2 = i7 - i6;

        $i3 = $i2 / 2;

        $i4 = i6 + $i3;

        r1 = r0[$i4];

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $r5 = r0[i6];

        $i8 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int compare(char[],char[])>($r5, r1);

        if $i8 < 0 goto label1;

        goto label4;

     label3:
        $i10 = (int) -1;

        i7 = i7 + $i10;

     label4:
        $r2 = r0[i7];

        $i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int compare(char[],char[])>(r1, $r2);

        if $i5 < 0 goto label3;

        if i6 > i7 goto label5;

        r3 = r0[i6];

        $r4 = r0[i7];

        r0[i6] = $r4;

        r0[i7] = r3;

        i6 = i6 + 1;

        $i12 = (int) -1;

        i7 = i7 + $i12;

     label5:
        if i6 <= i7 goto label2;

        if i0 >= i7 goto label6;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(char[][],int,int)>(r0, i0, i7);

     label6:
        if i6 >= i1 goto label7;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(char[][],int,int)>(r0, i6, i1);

     label7:
        return;
    }

    private static void quickSort(org.eclipse.jdt.internal.core.util.Util$Comparable[], int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i10, $i12;
        org.eclipse.jdt.internal.core.util.Util$Comparable[] r0;
        org.eclipse.jdt.internal.core.util.Util$Comparable r1, $r2, r3, $r4, $r5;

        r0 := @parameter0: org.eclipse.jdt.internal.core.util.Util$Comparable[];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i0 = i6;

        i1 = i7;

        $i2 = i7 - i6;

        $i3 = $i2 / 2;

        $i4 = i6 + $i3;

        r1 = r0[$i4];

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $r5 = r0[i6];

        $i8 = interfaceinvoke $r5.<org.eclipse.jdt.internal.core.util.Util$Comparable: int compareTo(org.eclipse.jdt.internal.core.util.Util$Comparable)>(r1);

        if $i8 < 0 goto label1;

        goto label4;

     label3:
        $i10 = (int) -1;

        i7 = i7 + $i10;

     label4:
        $r2 = r0[i7];

        $i5 = interfaceinvoke r1.<org.eclipse.jdt.internal.core.util.Util$Comparable: int compareTo(org.eclipse.jdt.internal.core.util.Util$Comparable)>($r2);

        if $i5 < 0 goto label3;

        if i6 > i7 goto label5;

        r3 = r0[i6];

        $r4 = r0[i7];

        r0[i6] = $r4;

        r0[i7] = r3;

        i6 = i6 + 1;

        $i12 = (int) -1;

        i7 = i7 + $i12;

     label5:
        if i6 <= i7 goto label2;

        if i0 >= i7 goto label6;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(org.eclipse.jdt.internal.core.util.Util$Comparable[],int,int)>(r0, i0, i7);

     label6:
        if i6 >= i1 goto label7;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(org.eclipse.jdt.internal.core.util.Util$Comparable[],int,int)>(r0, i6, i1);

     label7:
        return;
    }

    private static void quickSort(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, i7, $i8, i9, i10, $i11, $i13, $i15;

        r0 := @parameter0: int[];

        i9 := @parameter1: int;

        i10 := @parameter2: int;

        i0 = i9;

        i1 = i10;

        $i2 = i10 - i9;

        $i3 = $i2 / 2;

        $i4 = i9 + $i3;

        i5 = r0[$i4];

        goto label2;

     label1:
        i9 = i9 + 1;

     label2:
        $i11 = r0[i9];

        if $i11 < i5 goto label1;

        goto label4;

     label3:
        $i13 = (int) -1;

        i10 = i10 + $i13;

     label4:
        $i6 = r0[i10];

        if i5 < $i6 goto label3;

        if i9 > i10 goto label5;

        i7 = r0[i9];

        $i8 = r0[i10];

        r0[i9] = $i8;

        r0[i10] = i7;

        i9 = i9 + 1;

        $i15 = (int) -1;

        i10 = i10 + $i15;

     label5:
        if i9 <= i10 goto label2;

        if i0 >= i10 goto label6;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(int[],int,int)>(r0, i0, i10);

     label6:
        if i9 >= i1 goto label7;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(int[],int,int)>(r0, i9, i1);

     label7:
        return;
    }

    private static void quickSort(java.lang.Object[], int, int, org.eclipse.jdt.internal.core.util.Util$Comparer)
    {
        java.lang.Object[] r0;
        org.eclipse.jdt.internal.core.util.Util$Comparer r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i10, $i12;
        java.lang.Object r1, $r3, r4, $r5, $r6;

        r0 := @parameter0: java.lang.Object[];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        r2 := @parameter3: org.eclipse.jdt.internal.core.util.Util$Comparer;

        i0 = i6;

        i1 = i7;

        $i2 = i7 - i6;

        $i3 = $i2 / 2;

        $i4 = i6 + $i3;

        r1 = r0[$i4];

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $r6 = r0[i6];

        $i8 = interfaceinvoke r2.<org.eclipse.jdt.internal.core.util.Util$Comparer: int compare(java.lang.Object,java.lang.Object)>($r6, r1);

        if $i8 < 0 goto label1;

        goto label4;

     label3:
        $i10 = (int) -1;

        i7 = i7 + $i10;

     label4:
        $r3 = r0[i7];

        $i5 = interfaceinvoke r2.<org.eclipse.jdt.internal.core.util.Util$Comparer: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);

        if $i5 < 0 goto label3;

        if i6 > i7 goto label5;

        r4 = r0[i6];

        $r5 = r0[i7];

        r0[i6] = $r5;

        r0[i7] = r4;

        i6 = i6 + 1;

        $i12 = (int) -1;

        i7 = i7 + $i12;

     label5:
        if i6 <= i7 goto label2;

        if i0 >= i7 goto label6;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.Object[],int,int,org.eclipse.jdt.internal.core.util.Util$Comparer)>(r0, i0, i7, r2);

     label6:
        if i6 >= i1 goto label7;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.Object[],int,int,org.eclipse.jdt.internal.core.util.Util$Comparer)>(r0, i6, i1, r2);

     label7:
        return;
    }

    private static void quickSort(java.lang.String[], int, int)
    {
        java.lang.String[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i10, $i12;
        java.lang.String r1, $r2, r3, $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i0 = i6;

        i1 = i7;

        $i2 = i7 - i6;

        $i3 = $i2 / 2;

        $i4 = i6 + $i3;

        r1 = r0[$i4];

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $r5 = r0[i6];

        $i8 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>(r1);

        if $i8 < 0 goto label1;

        goto label4;

     label3:
        $i10 = (int) -1;

        i7 = i7 + $i10;

     label4:
        $r2 = r0[i7];

        $i5 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>($r2);

        if $i5 < 0 goto label3;

        if i6 > i7 goto label5;

        r3 = r0[i6];

        $r4 = r0[i7];

        r0[i6] = $r4;

        r0[i7] = r3;

        i6 = i6 + 1;

        $i12 = (int) -1;

        i7 = i7 + $i12;

     label5:
        if i6 <= i7 goto label2;

        if i0 >= i7 goto label6;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.String[],int,int)>(r0, i0, i7);

     label6:
        if i6 >= i1 goto label7;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.String[],int,int)>(r0, i6, i1);

     label7:
        return;
    }

    public static java.lang.String relativePath(org.eclipse.core.runtime.IPath, int)
    {
        java.lang.String[] $r1;
        org.eclipse.core.runtime.IPath r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r8;
        boolean $z0;
        char[] $r7;

        r0 := @parameter0: org.eclipse.core.runtime.IPath;

        i1 := @parameter1: int;

        $z0 = interfaceinvoke r0.<org.eclipse.core.runtime.IPath: boolean hasTrailingSeparator()>();

        $r1 = interfaceinvoke r0.<org.eclipse.core.runtime.IPath: java.lang.String[] segments()>();

        i9 = 0;

        i0 = lengthof $r1;

        if i0 <= i1 goto label3;

        i10 = i1;

        goto label2;

     label1:
        $r8 = $r1[i10];

        $i6 = virtualinvoke $r8.<java.lang.String: int length()>();

        i9 = i9 + $i6;

        i10 = i10 + 1;

     label2:
        if i10 < i0 goto label1;

        $i7 = i0 - i1;

        $i8 = $i7 - 1;

        i9 = i9 + $i8;

     label3:
        if $z0 == 0 goto label4;

        i9 = i9 + 1;

     label4:
        $r7 = newarray (char)[i9];

        i11 = 0;

        $i2 = lengthof $r1;

        $i5 = $i2 - 1;

        if $i5 < i1 goto label7;

        i12 = i1;

        goto label6;

     label5:
        $r3 = $r1[i12];

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = $r1[i12];

        virtualinvoke $r4.<java.lang.String: void getChars(int,int,char[],int)>(0, $i3, $r7, i11);

        i13 = i11 + $i3;

        i11 = i13 + 1;

        $r7[i13] = 47;

        i12 = i12 + 1;

     label6:
        if i12 < $i5 goto label5;

        $r5 = $r1[$i5];

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = $r1[$i5];

        virtualinvoke $r6.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, $r7, i11);

        i11 = i11 + $i4;

     label7:
        if $z0 == 0 goto label8;

        $r7[i11] = 47;

     label8:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r7);

        return $r2;
    }

    public static void resetJavaLikeExtensions()
    {
        <org.eclipse.jdt.internal.core.util.Util: char[][] JAVA_LIKE_EXTENSIONS> = null;

        return;
    }

    public static final java.lang.String[] splitOn(char, java.lang.String, int, int)
    {
        java.lang.String[] $r1, r4;
        int i0, i1, $i5, $i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15;
        java.lang.String r0, $r2, $r3;
        char $c2, c3, $c4;

        c3 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label01;

        $i6 = 0;

        goto label02;

     label01:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

     label02:
        if $i6 == 0 goto label03;

        if i0 <= i1 goto label04;

     label03:
        $r1 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        return $r1;

     label04:
        i7 = 1;

        i8 = i0;

        goto label07;

     label05:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i12 = (int) $c2;

        $i13 = (int) c3;

        if $i12 != $i13 goto label06;

        i7 = i7 + 1;

     label06:
        i8 = i8 + 1;

     label07:
        if i8 < i1 goto label05;

        r4 = newarray (java.lang.String)[i7];

        i9 = i0;

        i10 = 0;

        i11 = i0;

        goto label10;

     label08:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11);

        $i14 = (int) $c4;

        $i15 = (int) c3;

        if $i14 != $i15 goto label09;

        $i5 = i10;

        i10 = i10 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i9, i11);

        r4[$i5] = $r2;

        i9 = i11 + 1;

     label09:
        i11 = i11 + 1;

     label10:
        if i11 < i1 goto label08;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i9, i1);

        r4[i10] = $r3;

        return r4;
    }

    public static void setReadOnly(org.eclipse.core.resources.IResource, boolean)
    {
        java.lang.Throwable $r2;
        org.eclipse.core.resources.IResource r0;
        org.eclipse.core.resources.ResourceAttributes $r1;
        boolean $z0, z1;

        r0 := @parameter0: org.eclipse.core.resources.IResource;

        z1 := @parameter1: boolean;

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isReadOnlySupported()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke r0.<org.eclipse.core.resources.IResource: org.eclipse.core.resources.ResourceAttributes getResourceAttributes()>();

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke $r1.<org.eclipse.core.resources.ResourceAttributes: void setReadOnly(boolean)>(z1);

     label2:
        interfaceinvoke r0.<org.eclipse.core.resources.IResource: void setResourceAttributes(org.eclipse.core.resources.ResourceAttributes)>($r1);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch org.eclipse.core.runtime.CoreException from label2 to label3 with label4;
    }

    public static void sort(char[][])
    {
        int $i0, $i1, $i2;
        char[][] r0;

        r0 := @parameter0: char[][];

        $i0 = lengthof r0;

        if $i0 <= 1 goto label1;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(char[][],int,int)>(r0, 0, $i2);

     label1:
        return;
    }

    public static void sort(org.eclipse.jdt.internal.core.util.Util$Comparable[])
    {
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.core.util.Util$Comparable[] r0;

        r0 := @parameter0: org.eclipse.jdt.internal.core.util.Util$Comparable[];

        $i0 = lengthof r0;

        if $i0 <= 1 goto label1;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(org.eclipse.jdt.internal.core.util.Util$Comparable[],int,int)>(r0, 0, $i2);

     label1:
        return;
    }

    public static void sort(int[])
    {
        int[] r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 <= 1 goto label1;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(int[],int,int)>(r0, 0, $i2);

     label1:
        return;
    }

    public static void sort(java.lang.Object[], org.eclipse.jdt.internal.core.util.Util$Comparer)
    {
        java.lang.Object[] r0;
        org.eclipse.jdt.internal.core.util.Util$Comparer r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: org.eclipse.jdt.internal.core.util.Util$Comparer;

        $i0 = lengthof r0;

        if $i0 <= 1 goto label1;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.Object[],int,int,org.eclipse.jdt.internal.core.util.Util$Comparer)>(r0, 0, $i2, r1);

     label1:
        return;
    }

    public static void sort(java.lang.String[])
    {
        int $i0, $i1, $i2;
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 <= 1 goto label1;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.String[],int,int)>(r0, 0, $i2);

     label1:
        return;
    }

    public static org.eclipse.jdt.internal.core.util.Util$Comparable[] sortCopy(org.eclipse.jdt.internal.core.util.Util$Comparable[])
    {
        int i0;
        org.eclipse.jdt.internal.core.util.Util$Comparable[] r0, r1;

        r0 := @parameter0: org.eclipse.jdt.internal.core.util.Util$Comparable[];

        i0 = lengthof r0;

        r1 = newarray (org.eclipse.jdt.internal.core.util.Util$Comparable)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void sort(org.eclipse.jdt.internal.core.util.Util$Comparable[])>(r1);

        return r1;
    }

    public static org.eclipse.jdt.core.IJavaElement[] sortCopy(org.eclipse.jdt.core.IJavaElement[])
    {
        org.eclipse.jdt.core.IJavaElement[] r0, r1;
        org.eclipse.jdt.internal.core.util.Util$1 $r2;
        int i0;

        r0 := @parameter0: org.eclipse.jdt.core.IJavaElement[];

        i0 = lengthof r0;

        r1 = newarray (org.eclipse.jdt.core.IJavaElement)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        $r2 = new org.eclipse.jdt.internal.core.util.Util$1;

        specialinvoke $r2.<org.eclipse.jdt.internal.core.util.Util$1: void <init>()>();

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void sort(java.lang.Object[],org.eclipse.jdt.internal.core.util.Util$Comparer)>(r1, $r2);

        return r1;
    }

    public static java.lang.Object[] sortCopy(java.lang.Object[], org.eclipse.jdt.internal.core.util.Util$Comparer)
    {
        java.lang.Object[] r0, r1;
        org.eclipse.jdt.internal.core.util.Util$Comparer r2;
        int i0;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: org.eclipse.jdt.internal.core.util.Util$Comparer;

        i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void sort(java.lang.Object[],org.eclipse.jdt.internal.core.util.Util$Comparer)>(r1, r2);

        return r1;
    }

    public static java.lang.String[] sortCopy(java.lang.String[])
    {
        int i0;
        java.lang.String[] r0, r1;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.String)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void sort(java.lang.String[])>(r1);

        return r1;
    }

    public static boolean startsWithIgnoreCase(java.lang.String[], java.lang.String[], boolean)
    {
        java.lang.String[] r0, r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, z1, $z2;

        r1 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.lang.String[];

        z1 := @parameter2: boolean;

        i0 = lengthof r0;

        i1 = lengthof r1;

        if i0 <= i1 goto label1;

        return 0;

     label1:
        i5 = 0;

        goto label4;

     label2:
        $r3 = r1[i5];

        $r2 = r0[i5];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

     label4:
        $i2 = i0 - 1;

        if i5 < $i2 goto label2;

        if z1 != 0 goto label5;

        if i0 != i1 goto label6;

     label5:
        $i3 = i0 - 1;

        $r4 = r1[$i3];

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $i4 = i0 - 1;

        $r6 = r0[$i4];

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public static boolean matchesWithIgnoreCase(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.String r0, $r2, $r3;
        boolean $z0, $z1;
        char[] $r4, $r5, r6;

        r1 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i0 = lengthof r1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        if i0 != 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        if i0 != 0 goto label4;

        return 0;

     label4:
        i5 = i0 - 1;

        i6 = 0;

        goto label6;

     label5:
        $r2 = r1[i6];

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        i5 = i5 + $i2;

        i6 = i6 + 1;

     label6:
        if i6 < i0 goto label5;

        r6 = newarray (char)[i5];

        i7 = 0;

        i8 = 0;

        goto label9;

     label7:
        if i7 <= 0 goto label8;

        $i3 = i7;

        i7 = i7 + 1;

        r6[$i3] = 46;

     label8:
        $r3 = r1[i8];

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $i4 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r6, i7, $i4);

        i7 = i7 + $i4;

        i8 = i8 + 1;

     label9:
        if i8 < i0 goto label7;

        $r5 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean match(char[],char[],boolean)>($r5, r6, 0);

        return $z1;
    }

    public static char[][] toCharArrays(java.lang.String[])
    {
        int i0, i1;
        char[] $r3;
        java.lang.String[] r0;
        java.lang.String $r2;
        char[][] r1, $r4;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r4 = <org.eclipse.jdt.core.compiler.CharOperation: char[][] NO_CHAR_CHAR>;

        return $r4;

     label1:
        r1 = newarray (char[])[i0];

        i1 = 0;

        goto label3;

     label2:
        $r2 = r0[i1];

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        r1[i1] = $r3;

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        return r1;
    }

    public static char[][] toCompoundChars(java.lang.String)
    {
        char[][] $r3, r4;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, $i8, $i10, $i12;
        java.lang.String r0;
        char[] $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r3 = <org.eclipse.jdt.core.compiler.CharOperation: char[][] NO_CHAR_CHAR>;

        return $r3;

     label1:
        i4 = 1;

        i5 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        goto label3;

     label2:
        i4 = i4 + 1;

        $i1 = i5 + 1;

        i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(46, $i1);

     label3:
        $i10 = (int) -1;

        if i5 != $i10 goto label2;

        r4 = newarray (char[])[i4];

        i6 = 0;

        i7 = 0;

        goto label7;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(46, i6);

        $i12 = (int) -1;

        if $i2 != $i12 goto label5;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label6;

     label5:
        $i8 = $i2;

     label6:
        $i3 = $i8 - i6;

        $r1 = newarray (char)[$i3];

        r4[i7] = $r1;

        $r2 = r4[i7];

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i6, $i8, $r2, 0);

        i6 = $i8 + 1;

        i7 = i7 + 1;

     label7:
        if i7 < i4 goto label4;

        return r4;
    }

    public static java.io.File toLocalFile(java.net.URI, org.eclipse.core.runtime.IProgressMonitor) throws org.eclipse.core.runtime.CoreException
    {
        java.net.URI r0;
        org.eclipse.core.filesystem.IFileStore $r1;
        java.io.File $r3, r4;
        org.eclipse.core.runtime.IProgressMonitor r2;

        r0 := @parameter0: java.net.URI;

        r2 := @parameter1: org.eclipse.core.runtime.IProgressMonitor;

        $r1 = staticinvoke <org.eclipse.core.filesystem.EFS: org.eclipse.core.filesystem.IFileStore getStore(java.net.URI)>(r0);

        $r3 = interfaceinvoke $r1.<org.eclipse.core.filesystem.IFileStore: java.io.File toLocalFile(int,org.eclipse.core.runtime.IProgressMonitor)>(0, r2);

        r4 = $r3;

        if $r3 != null goto label1;

        r4 = interfaceinvoke $r1.<org.eclipse.core.filesystem.IFileStore: java.io.File toLocalFile(int,org.eclipse.core.runtime.IProgressMonitor)>(4096, r2);

     label1:
        return r4;
    }

    public static java.lang.String toString(char[][])
    {
        java.lang.StringBuffer $r0;
        int i0, i1;
        char[] $r2;
        java.lang.String $r3;
        char[][] r1;

        r1 := @parameter0: char[][];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        i0 = lengthof r1;

        goto label3;

     label1:
        if i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $r2 = r1[i1];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(char[][], char[])
    {
        char[][] r0;
        java.lang.StringBuffer $r1;
        int i0, i1;
        char[] $r2, r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: char[][];

        r3 := @parameter1: char[];

        if r0 != null goto label1;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[])>(r3);

        return $r5;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        i0 = lengthof r0;

        goto label3;

     label2:
        $r2 = r0[i1];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String[] toStrings(char[][])
    {
        int i0, i1;
        char[] $r3;
        java.lang.String[] r1;
        java.lang.String $r2;
        char[][] r0;

        r0 := @parameter0: char[][];

        i0 = lengthof r0;

        r1 = newarray (java.lang.String)[i0];

        i1 = 0;

        goto label2;

     label1:
        $r2 = new java.lang.String;

        $r3 = r0[i1];

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        r1[i1] = $r2;

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return r1;
    }

    private static void appendArrayTypeSignature(char[], int, java.lang.StringBuffer, boolean)
    {
        java.lang.StringBuffer r2, $r3;
        int i0, i1, $i2, $i3, i4, i6, i8, $i9, $i10;
        boolean z0;
        char c5, c7;
        java.lang.IllegalArgumentException $r6, $r7, $r8;
        char[] r0;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.StringBuffer;

        z0 := @parameter3: boolean;

        i0 = lengthof r0;

        $i2 = i0 - 1;

        if i1 < $i2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        c5 = r0[i1];

        $i9 = (int) c5;

        if $i9 == 91 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        i6 = i1 + 1;

        c7 = r0[i6];

        goto label5;

     label3:
        $i3 = i0 - 1;

        if i6 < $i3 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label4:
        i6 = i6 + 1;

        c7 = r0[i6];

     label5:
        $i10 = (int) c7;

        if $i10 == 91 goto label3;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void appendTypeSignature(char[],int,java.lang.StringBuffer,boolean)>(r0, i6, r2, z0);

        i8 = 0;

        i4 = i6 - i1;

        goto label7;

     label6:
        $r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i8 = i8 + 1;

     label7:
        if i8 < i4 goto label6;

        return;
    }

    private static void appendClassTypeSignature(char[], int, java.lang.StringBuffer, boolean)
    {
        char $c2, c3;
        java.lang.StringBuffer r1;
        int i0, $i1, i4, $i5, $i6;
        char[] r0;
        boolean z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        z0 := @parameter3: boolean;

        c3 = r0[i0];

        $i5 = (int) c3;

        if $i5 == 76 goto label1;

        return;

     label1:
        i4 = i0 + 1;

        $i1 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

     label2:
        $c2 = r0[i4];

        $i6 = (int) $c2;

        lookupswitch($i6)
        {
            case 36: goto label6;
            case 46: goto label4;
            case 47: goto label4;
            case 59: goto label3;
            default: goto label7;
        };

     label3:
        return;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>($i1);

        goto label8;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label8;

     label6:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label8;

     label7:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label8:
        i4 = i4 + 1;

        goto label2;
    }

    static void appendTypeSignature(char[], int, java.lang.StringBuffer, boolean)
    {
        java.lang.StringBuffer r1;
        int i0, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        char c1;
        char[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        z0 := @parameter3: boolean;

        c1 = r0[i0];

        $i6 = (int) c1;

        tableswitch($i6)
        {
            case 66: goto label05;
            case 67: goto label06;
            case 68: goto label07;
            case 69: goto label13;
            case 70: goto label08;
            case 71: goto label13;
            case 72: goto label13;
            case 73: goto label09;
            case 74: goto label10;
            case 75: goto label13;
            case 76: goto label02;
            case 77: goto label13;
            case 78: goto label13;
            case 79: goto label13;
            case 80: goto label13;
            case 81: goto label13;
            case 82: goto label13;
            case 83: goto label11;
            case 84: goto label03;
            case 85: goto label13;
            case 86: goto label12;
            case 87: goto label13;
            case 88: goto label13;
            case 89: goto label13;
            case 90: goto label04;
            case 91: goto label01;
            default: goto label13;
        };

     label01:
        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void appendArrayTypeSignature(char[],int,java.lang.StringBuffer,boolean)>(r0, i0, r1, z0);

        goto label13;

     label02:
        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void appendClassTypeSignature(char[],int,java.lang.StringBuffer,boolean)>(r0, i0, r1, z0);

        goto label13;

     label03:
        $i2 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeVariableSignature(char[],int)>(r0, i0);

        $i5 = i0 + 1;

        $i3 = $i2 - i0;

        $i4 = $i3 - 1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r0, $i5, $i4);

        goto label13;

     label04:
        $r2 = <org.eclipse.jdt.internal.core.util.Util: char[] BOOLEAN>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        goto label13;

     label05:
        $r10 = <org.eclipse.jdt.internal.core.util.Util: char[] BYTE>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r10);

        goto label13;

     label06:
        $r9 = <org.eclipse.jdt.internal.core.util.Util: char[] CHAR>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r9);

        goto label13;

     label07:
        $r8 = <org.eclipse.jdt.internal.core.util.Util: char[] DOUBLE>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r8);

        goto label13;

     label08:
        $r7 = <org.eclipse.jdt.internal.core.util.Util: char[] FLOAT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7);

        goto label13;

     label09:
        $r6 = <org.eclipse.jdt.internal.core.util.Util: char[] INT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        goto label13;

     label10:
        $r5 = <org.eclipse.jdt.internal.core.util.Util: char[] LONG>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

        goto label13;

     label11:
        $r4 = <org.eclipse.jdt.internal.core.util.Util: char[] SHORT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        goto label13;

     label12:
        $r3 = <org.eclipse.jdt.internal.core.util.Util: char[] VOID>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

     label13:
        return;
    }

    public static java.lang.String toString(char[], char[], char[], boolean, boolean)
    {
        char[][] $r8;
        java.lang.StringBuffer $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i15, $i16, $i18;
        java.lang.String $r9;
        boolean $z0, z1, z2;
        char $c6;
        char[] r0, $r1, r2, r4, $r5, $r6, r7;

        r4 := @parameter0: char[];

        r0 := @parameter1: char[];

        r2 := @parameter2: char[];

        z2 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r1 = <org.eclipse.jdt.internal.core.util.Util: char[] INIT>;

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>(r0, $r1);

        $i0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(40, r2);

        $i15 = (int) -1;

        if $i0 != $i15 goto label01;

        return "";

     label01:
        $r10 = new java.lang.StringBuffer;

        $i1 = lengthof r2;

        $i2 = $i1 + 10;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>($i2);

        $i3 = lengthof r4;

        if $i3 <= 0 goto label05;

        $c6 = r4[0];

        $i16 = (int) $c6;

        if $i16 != 91 goto label02;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>(r4, 47, 46);

        r7 = staticinvoke <org.eclipse.jdt.core.Signature: char[] toCharArray(char[])>(r4);

        goto label03;

     label02:
        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>(r4, 47, 46);

        r7 = r4;

     label03:
        $i7 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(46, r7);

        if z1 == 0 goto label04;

        $i18 = (int) -1;

        if $i7 == $i18 goto label04;

        $i11 = $i7 + 1;

        $i8 = lengthof r7;

        $i9 = $i8 - $i7;

        $i10 = $i9 - 1;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r7, $i11, $i10);

        goto label05;

     label04:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r7);

     label05:
        if $z0 != 0 goto label06;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        if r0 == null goto label06;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r0);

     label06:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r8 = staticinvoke <org.eclipse.jdt.core.Signature: char[][] getParameterTypes(char[])>(r2);

        i12 = 0;

        $i13 = lengthof $r8;

        goto label09;

     label07:
        $r5 = $r8[i12];

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void appendTypeSignature(char[],int,java.lang.StringBuffer,boolean)>($r5, 0, $r10, z1);

        $i4 = lengthof $r8;

        $i5 = $i4 - 1;

        if i12 == $i5 goto label08;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label08:
        i12 = i12 + 1;

     label09:
        if i12 < $i13 goto label07;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        if $z0 != 0 goto label10;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        if z2 == 0 goto label10;

        $r6 = staticinvoke <org.eclipse.jdt.core.Signature: char[] getReturnType(char[])>(r2);

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void appendTypeSignature(char[],int,java.lang.StringBuffer,boolean)>($r6, 0, $r10, z1);

     label10:
        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        return $r9;
    }

    public static java.lang.String[] typeParameterSignatures(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)
    {
        org.eclipse.jdt.internal.compiler.ast.Argument r4;
        java.lang.String[] $r2, r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5;
        int i0, $i1, i2;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.ast.Argument[] r1;
        java.lang.String $r6;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        if r1 == null goto label3;

        i0 = lengthof r1;

        r3 = newarray (java.lang.String)[i0];

        i2 = 0;

        goto label2;

     label1:
        r4 = r1[i2];

        $r5 = r4.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: java.lang.String typeSignature(org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r5);

        r3[i2] = $r6;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        return r3;

     label3:
        $r2 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        return $r2;
    }

    public static java.lang.String typeSignature(org.eclipse.jdt.internal.compiler.ast.TypeReference)
    {
        char[] $r2;
        java.lang.String $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r0;
        char[][] $r1;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r1, 46);

        $r3 = staticinvoke <org.eclipse.jdt.core.Signature: java.lang.String createTypeSignature(char[],boolean)>($r2, 0);

        return $r3;
    }

    public static void validateMethodSignature(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isValidMethodSignature(java.lang.String)>(r0);

        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z0);

        return;
    }

    public static void validateTypeSignature(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: boolean isValidTypeSignature(java.lang.String,boolean)>(r0, z0);

        staticinvoke <org.eclipse.core.runtime.Assert: boolean isTrue(boolean)>($z1);

        return;
    }

    public static void verbose(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: void verbose(java.lang.String,java.io.PrintStream)>(r0, $r1);

        return;
    }

    public static synchronized void verbose(java.lang.String, java.io.PrintStream)
    {
        java.io.PrintStream r1;
        java.lang.Thread $r2;
        int $i0, $i1, $i2, i3, $i4, $i6;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintStream;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(10, i3);

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.Object)>($r2);

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>(" ");

        $i1 = i3;

        $i6 = (int) -1;

        if $i0 != $i6 goto label2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label3;

     label2:
        $i4 = $i0 + 1;

     label3:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i4);

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>($r3);

        $i2 = $i0 + 1;

        i3 = $i2;

        if $i2 != 0 goto label1;

        virtualinvoke r1.<java.io.PrintStream: void println()>();

        return;
    }

    public static final boolean isJavaLikeFileName(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int indexOfJavaLikeExtension(java.lang.String)>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static final boolean isJavaLikeFileName(char[])
    {
        char[][] $r1;
        int i0, i1, i2, i3, $i4, $i5, $i7, i10, i11, $i12, $i13, $i14;
        char $c6, $c8, $c9;
        char[] r0, r2;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = lengthof r0;

        $r1 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[][] getJavaLikeExtensions()>();

        i10 = 0;

        i1 = lengthof $r1;

        goto label9;

     label2:
        r2 = $r1[i10];

        i2 = lengthof r2;

        i3 = i0 - i2;

        $i4 = i3 - 1;

        if $i4 >= 0 goto label3;

        goto label8;

     label3:
        $i5 = i3 - 1;

        $c6 = r0[$i5];

        $i12 = (int) $c6;

        if $i12 == 46 goto label4;

        goto label8;

     label4:
        i11 = 0;

        goto label7;

     label5:
        $i7 = i3 + i11;

        $c9 = r0[$i7];

        $c8 = r2[i11];

        $i13 = (int) $c9;

        $i14 = (int) $c8;

        if $i13 == $i14 goto label6;

        goto label8;

     label6:
        i11 = i11 + 1;

     label7:
        if i11 < i2 goto label5;

        return 1;

     label8:
        i10 = i10 + 1;

     label9:
        if i10 < i1 goto label2;

        return 0;
    }

    public static int scanTypeSignature(char[], int)
    {
        char c2;
        java.lang.IllegalArgumentException $r3, $r4;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        c2 = r0[i0];

        $i9 = (int) c2;

        lookupswitch($i9)
        {
            case 33: goto label6;
            case 42: goto label7;
            case 43: goto label7;
            case 45: goto label7;
            case 66: goto label5;
            case 67: goto label5;
            case 68: goto label5;
            case 70: goto label5;
            case 73: goto label5;
            case 74: goto label5;
            case 76: goto label3;
            case 81: goto label3;
            case 83: goto label5;
            case 84: goto label4;
            case 86: goto label5;
            case 90: goto label5;
            case 91: goto label2;
            default: goto label8;
        };

     label2:
        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanArrayTypeSignature(char[],int)>(r0, i0);

        return $i3;

     label3:
        $i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanClassTypeSignature(char[],int)>(r0, i0);

        return $i5;

     label4:
        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeVariableSignature(char[],int)>(r0, i0);

        return $i4;

     label5:
        $i6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanBaseTypeSignature(char[],int)>(r0, i0);

        return $i6;

     label6:
        $i8 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanCaptureTypeSignature(char[],int)>(r0, i0);

        return $i8;

     label7:
        $i7 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeBoundSignature(char[],int)>(r0, i0);

        return $i7;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }

    public static int scanBaseTypeSignature(char[], int)
    {
        char c2;
        java.lang.IllegalArgumentException $r4, $r5;
        int i0, $i1, $i3, $i4;
        char[] r0;
        java.lang.String $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        c2 = r0[i0];

        $r1 = "BCDFIJSVZ";

        $i4 = (int) c2;

        $i3 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i4);

        if $i3 < 0 goto label2;

        return i0;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;
    }

    public static int scanArrayTypeSignature(char[], int)
    {
        char c5, c7;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, i4, i6, $i8, $i9;
        char[] r0;

        r0 := @parameter0: char[];

        i4 := @parameter1: int;

        i0 = lengthof r0;

        $i1 = i0 - 1;

        if i4 < $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        c5 = r0[i4];

        $i8 = (int) c5;

        if $i8 == 91 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        i6 = i4 + 1;

        c7 = r0[i6];

        goto label5;

     label3:
        $i2 = i0 - 1;

        if i6 < $i2 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label4:
        i6 = i6 + 1;

        c7 = r0[i6];

     label5:
        $i9 = (int) c7;

        if $i9 == 91 goto label3;

        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeSignature(char[],int)>(r0, i6);

        return $i3;
    }

    public static int scanCaptureTypeSignature(char[], int)
    {
        char c3;
        java.lang.IllegalArgumentException $r3, $r4;
        int i0, $i1, $i2, $i4, $i5, $i6;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        if i0 < $i2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        c3 = r0[i0];

        $i6 = (int) c3;

        if $i6 == 33 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i4 = i0 + 1;

        $i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeBoundSignature(char[],int)>(r0, $i4);

        return $i5;
    }

    public static int scanTypeVariableSignature(char[], int)
    {
        char c7, c8;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 2;

        if i0 < $i2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        c7 = r0[i0];

        $i9 = (int) c7;

        if $i9 == 84 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $i3 = i0 + 1;

        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanIdentifier(char[],int)>(r0, $i3);

        $i5 = $i4 + 1;

        c8 = r0[$i5];

        $i10 = (int) c8;

        if $i10 != 59 goto label3;

        $i6 = $i4 + 1;

        return $i6;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;
    }

    public static int scanIdentifier(char[], int)
    {
        char $c3;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1, $i2, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        i5 = i0;

     label2:
        $c3 = r0[i5];

        $i7 = (int) $c3;

        if $i7 == 60 goto label3;

        $i8 = (int) $c3;

        if $i8 == 62 goto label3;

        $i9 = (int) $c3;

        if $i9 == 58 goto label3;

        $i10 = (int) $c3;

        if $i10 == 59 goto label3;

        $i11 = (int) $c3;

        if $i11 == 46 goto label3;

        $i12 = (int) $c3;

        if $i12 != 47 goto label4;

     label3:
        $i6 = i5 - 1;

        return $i6;

     label4:
        i5 = i5 + 1;

        $i2 = lengthof r0;

        if i5 != $i2 goto label2;

        $i4 = i5 - 1;

        return $i4;
    }

    public static int scanClassTypeSignature(char[], int)
    {
        int i0, $i1, $i2, $i3, i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15;
        char c4, c7;
        java.lang.IllegalArgumentException $r3, $r4;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 2;

        if i0 < $i2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        c4 = r0[i0];

        $i8 = (int) c4;

        if $i8 == 76 goto label2;

        $i9 = (int) c4;

        if $i9 == 81 goto label2;

        $i11 = (int) -1;

        return $i11;

     label2:
        i5 = i0 + 1;

     label3:
        $i6 = lengthof r0;

        if i5 < $i6 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label4:
        c7 = r0[i5];

        $i12 = (int) c7;

        if $i12 != 59 goto label5;

        return i5;

     label5:
        $i13 = (int) c7;

        if $i13 != 60 goto label6;

        i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeArgumentSignatures(char[],int)>(r0, i5);

        goto label8;

     label6:
        $i14 = (int) c7;

        if $i14 == 46 goto label7;

        $i15 = (int) c7;

        if $i15 != 47 goto label8;

     label7:
        $i3 = i5 + 1;

        i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanIdentifier(char[],int)>(r0, $i3);

     label8:
        i5 = i5 + 1;

        goto label3;
    }

    public static int scanTypeBoundSignature(char[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i10, $i12, $i13;
        char c9, c11;
        java.lang.IllegalArgumentException $r5, $r6, $r7, $r8;
        char[] r0;

        r0 := @parameter0: char[];

        i8 := @parameter1: int;

        $i0 = lengthof r0;

        if i8 < $i0 goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label01:
        c9 = r0[i8];

        $i12 = (int) c9;

        tableswitch($i12)
        {
            case 42: goto label02;
            case 43: goto label03;
            case 44: goto label04;
            case 45: goto label03;
            default: goto label04;
        };

     label02:
        return i8;

     label03:
        $i1 = lengthof r0;

        $i2 = $i1 - 2;

        if i8 < $i2 goto label05;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label04:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label05:
        i10 = i8 + 1;

        c11 = r0[i10];

        $i13 = (int) c11;

        lookupswitch($i13)
        {
            case 33: goto label06;
            case 42: goto label11;
            case 43: goto label07;
            case 45: goto label07;
            case 76: goto label08;
            case 81: goto label08;
            case 84: goto label09;
            case 91: goto label10;
            default: goto label12;
        };

     label06:
        $i7 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanCaptureTypeSignature(char[],int)>(r0, i10);

        return $i7;

     label07:
        $i6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeBoundSignature(char[],int)>(r0, i10);

        return $i6;

     label08:
        $i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanClassTypeSignature(char[],int)>(r0, i10);

        return $i5;

     label09:
        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeVariableSignature(char[],int)>(r0, i10);

        return $i4;

     label10:
        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanArrayTypeSignature(char[],int)>(r0, i10);

        return $i3;

     label11:
        return i10;

     label12:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;
    }

    public static int scanTypeArgumentSignatures(char[], int)
    {
        char c5, c7;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, i6, $i8, $i9;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        if i0 < $i2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        c5 = r0[i0];

        $i8 = (int) c5;

        if $i8 == 60 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        i6 = i0 + 1;

     label3:
        $i3 = lengthof r0;

        if i6 < $i3 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label4:
        c7 = r0[i6];

        $i9 = (int) c7;

        if $i9 != 62 goto label5;

        return i6;

     label5:
        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeArgumentSignature(char[],int)>(r0, i6);

        i6 = $i4 + 1;

        goto label3;
    }

    public static int scanTypeArgumentSignature(char[], int)
    {
        char c2;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1, $i3, $i4, $i5;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        c2 = r0[i0];

        $i5 = (int) c2;

        tableswitch($i5)
        {
            case 42: goto label2;
            case 43: goto label3;
            case 44: goto label4;
            case 45: goto label3;
            default: goto label4;
        };

     label2:
        return i0;

     label3:
        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeBoundSignature(char[],int)>(r0, i0);

        return $i3;

     label4:
        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeSignature(char[],int)>(r0, i0);

        return $i4;
    }

    public static final char[][][] getAllTypeArguments(char[][])
    {
        int i0, i1;
        char[] $r2;
        char[][] r0, $r3;
        char[][][] r1;

        r0 := @parameter0: char[][];

        if r0 != null goto label1;

        return null;

     label1:
        i0 = lengthof r0;

        r1 = newarray (char[][])[i0];

        i1 = 0;

        goto label3;

     label2:
        $r2 = r0[i1];

        $r3 = staticinvoke <org.eclipse.jdt.core.Signature: char[][] getTypeArguments(char[])>($r2);

        r1[i1] = $r3;

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        return r1;
    }

    public static java.lang.Object getAnnotationMemberValue(org.eclipse.jdt.internal.core.MemberValuePair, org.eclipse.jdt.internal.compiler.impl.Constant)
    {
        java.lang.Float $r4;
        java.lang.Double $r5;
        org.eclipse.jdt.internal.core.MemberValuePair r1;
        long $l2;
        java.lang.Integer $r3;
        short $s3;
        byte $b4;
        java.lang.Character $r10;
        java.lang.Long $r6;
        java.lang.Short $r8;
        int $i0, $i1;
        java.lang.Boolean $r7;
        java.lang.String $r2;
        java.lang.Byte $r9;
        double $d0;
        boolean $z0;
        char $c5;
        org.eclipse.jdt.internal.compiler.impl.Constant r0;
        float $f0;

        r1 := @parameter0: org.eclipse.jdt.internal.core.MemberValuePair;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.impl.Constant;

        if r0 != null goto label01;

        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 14;

        return null;

     label01:
        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        tableswitch($i0)
        {
            case 2: goto label05;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label08;
            case 6: goto label11;
            case 7: goto label09;
            case 8: goto label07;
            case 9: goto label06;
            case 10: goto label02;
            case 11: goto label10;
            default: goto label11;
        };

     label02:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 1;

        $r3 = new java.lang.Integer;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);

        return $r3;

     label03:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 2;

        $r9 = new java.lang.Byte;

        $b4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: byte byteValue()>();

        specialinvoke $r9.<java.lang.Byte: void <init>(byte)>($b4);

        return $r9;

     label04:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 3;

        $r8 = new java.lang.Short;

        $s3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: short shortValue()>();

        specialinvoke $r8.<java.lang.Short: void <init>(short)>($s3);

        return $r8;

     label05:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 4;

        $r10 = new java.lang.Character;

        $c5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: char charValue()>();

        specialinvoke $r10.<java.lang.Character: void <init>(char)>($c5);

        return $r10;

     label06:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 5;

        $r4 = new java.lang.Float;

        $f0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: float floatValue()>();

        specialinvoke $r4.<java.lang.Float: void <init>(float)>($f0);

        return $r4;

     label07:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 6;

        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: double doubleValue()>();

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d0);

        return $r5;

     label08:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 8;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r7;

     label09:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 7;

        $r6 = new java.lang.Long;

        $l2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        specialinvoke $r6.<java.lang.Long: void <init>(long)>($l2);

        return $r6;

     label10:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 9;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.Constant: java.lang.String stringValue()>();

        return $r2;

     label11:
        r1.<org.eclipse.jdt.internal.core.MemberValuePair: int valueKind> = 14;

        return null;
    }

    public static final char[][] splitTypeLevelsSignature(java.lang.String)
    {
        char[][] $r3, $r4, $r8, $r9, r11, r12;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, $i13, $i15, $i17;
        java.lang.String r0;
        char $c0;
        char[] $r1, $r2, $r5, $r6, $r7, $r10;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.eclipse.jdt.core.Signature: char[] removeCapture(char[])>($r1);

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>($r2, 36, 46);

        r11 = newarray (char[])[10];

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = lengthof $r2;

        goto label10;

     label01:
        $c0 = $r2[i9];

        $i13 = (int) $c0;

        lookupswitch($i13)
        {
            case 42: goto label05;
            case 46: goto label06;
            case 47: goto label08;
            case 59: goto label05;
            case 60: goto label04;
            case 62: goto label02;
            default: goto label09;
        };

     label02:
        $i15 = (int) -1;

        i8 = i8 + $i15;

        if i8 != 0 goto label09;

        $i1 = lengthof r11;

        if i7 != $i1 goto label03;

        $r4 = r11;

        $i2 = i7 + 10;

        $r3 = newarray (char[])[$i2];

        r11 = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i7);

     label03:
        goto label09;

     label04:
        i8 = i8 + 1;

        if i8 != 1 goto label09;

        goto label09;

     label05:
        if i8 != 1 goto label09;

        goto label09;

     label06:
        if i8 != 0 goto label09;

        $i3 = lengthof r11;

        if i7 != $i3 goto label07;

        $r9 = r11;

        $i5 = i7 + 10;

        $r8 = newarray (char[])[$i5];

        r11 = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i7);

     label07:
        $i4 = i9 + 1;

        $r5 = newarray (char)[$i4];

        r11[i7] = $r5;

        $r6 = r11[i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, i9);

        $r7 = r11[i7];

        $r7[i9] = 59;

        i7 = i7 + 1;

        goto label09;

     label08:
        $r2[i9] = 46;

     label09:
        i9 = i9 + 1;

     label10:
        if i9 < i10 goto label01;

        $i6 = i7 + 1;

        r12 = newarray (char[])[$i6];

        r12[0] = $r2;

        i11 = 1;

        i12 = i7 - 1;

        goto label12;

     label11:
        $r10 = r11[i12];

        r12[i11] = $r10;

        i11 = i11 + 1;

        $i17 = (int) -1;

        i12 = i12 + $i17;

     label12:
        if i11 <= i7 goto label11;

        return r12;
    }

    public static java.lang.String toAnchor(char[], java.lang.String, boolean)
    {
        char[] r1, $r3, $r4;
        java.lang.String $r0, r2;
        java.lang.IllegalArgumentException $r5;
        boolean z0;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $r0 = new java.lang.String;

        $r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $r4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: char[] toAnchor(char[],char[],boolean)>(r1, $r3, z0);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r4);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static char[] toAnchor(char[], char[], boolean)
    {
        char[][] $r3;
        java.lang.StringBuffer $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        boolean z0;
        java.lang.IllegalArgumentException $r8;
        char[] r0, r2, $r4, $r5, r7;

        r0 := @parameter0: char[];

        r2 := @parameter1: char[];

        z0 := @parameter2: boolean;

        $i0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[])>(40, r0);

        $i11 = (int) -1;

        if $i0 != $i11 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $r9 = new java.lang.StringBuffer;

        $i1 = lengthof r0;

        $i2 = $i1 + 10;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(int)>($i2);

        if r2 == null goto label2;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r2);

     label2:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r3 = staticinvoke <org.eclipse.jdt.core.Signature: char[][] getParameterTypes(char[])>(r0);

        i9 = 0;

        $i8 = lengthof $r3;

        goto label7;

     label3:
        $i3 = $i8 - 1;

        if i9 != $i3 goto label4;

        $r5 = $r3[i9];

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>($r5, 0, $r9, z0);

        goto label5;

     label4:
        $r4 = $r3[i9];

        staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>($r4, 0, $r9, 0);

     label5:
        $i4 = lengthof $r3;

        $i5 = $i4 - 1;

        if i9 == $i5 goto label6;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label6:
        i9 = i9 + 1;

     label7:
        if i9 < $i8 goto label3;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $i6 = virtualinvoke $r9.<java.lang.StringBuffer: int length()>();

        r7 = newarray (char)[$i6];

        $i7 = virtualinvoke $r9.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r9.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(0, $i7, r7, 0);

        return r7;
    }

    private static int appendTypeSignatureForAnchor(char[], int, java.lang.StringBuffer, boolean)
    {
        java.lang.StringBuffer r1;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0;
        char c2;
        java.lang.IllegalArgumentException $r14, $r15, $r16;
        char[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        z0 := @parameter3: boolean;

        $i1 = lengthof r0;

        if i0 < $i1 goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label01:
        c2 = r0[i0];

        if z0 == 0 goto label04;

        $i12 = (int) c2;

        lookupswitch($i12)
        {
            case 33: goto label03;
            case 42: goto label03;
            case 43: goto label03;
            case 45: goto label03;
            case 66: goto label03;
            case 67: goto label03;
            case 68: goto label03;
            case 70: goto label03;
            case 73: goto label03;
            case 74: goto label03;
            case 76: goto label03;
            case 83: goto label03;
            case 84: goto label03;
            case 86: goto label03;
            case 90: goto label03;
            case 91: goto label02;
            default: goto label03;
        };

     label02:
        $i11 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendArrayTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, i0, r1, 1);

        return $i11;

     label03:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label04:
        $i13 = (int) c2;

        lookupswitch($i13)
        {
            case 33: goto label17;
            case 42: goto label18;
            case 43: goto label18;
            case 45: goto label18;
            case 66: goto label09;
            case 67: goto label10;
            case 68: goto label11;
            case 70: goto label12;
            case 73: goto label13;
            case 74: goto label14;
            case 76: goto label06;
            case 83: goto label15;
            case 84: goto label07;
            case 86: goto label16;
            case 90: goto label08;
            case 91: goto label05;
            default: goto label19;
        };

     label05:
        $i3 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendArrayTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, i0, r1, 0);

        return $i3;

     label06:
        $i8 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendClassTypeSignatureForAnchor(char[],int,java.lang.StringBuffer)>(r0, i0, r1);

        return $i8;

     label07:
        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanTypeVariableSignature(char[],int)>(r0, i0);

        $i7 = i0 + 1;

        $i5 = $i4 - i0;

        $i6 = $i5 - 1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r0, $i7, $i6);

        return $i4;

     label08:
        $r2 = <org.eclipse.jdt.internal.core.util.Util: char[] BOOLEAN>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        return i0;

     label09:
        $r10 = <org.eclipse.jdt.internal.core.util.Util: char[] BYTE>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r10);

        return i0;

     label10:
        $r9 = <org.eclipse.jdt.internal.core.util.Util: char[] CHAR>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r9);

        return i0;

     label11:
        $r8 = <org.eclipse.jdt.internal.core.util.Util: char[] DOUBLE>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r8);

        return i0;

     label12:
        $r7 = <org.eclipse.jdt.internal.core.util.Util: char[] FLOAT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7);

        return i0;

     label13:
        $r6 = <org.eclipse.jdt.internal.core.util.Util: char[] INT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        return i0;

     label14:
        $r5 = <org.eclipse.jdt.internal.core.util.Util: char[] LONG>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

        return i0;

     label15:
        $r4 = <org.eclipse.jdt.internal.core.util.Util: char[] SHORT>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        return i0;

     label16:
        $r3 = <org.eclipse.jdt.internal.core.util.Util: char[] VOID>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

        return i0;

     label17:
        $i10 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendCaptureTypeSignatureForAnchor(char[],int,java.lang.StringBuffer)>(r0, i0, r1);

        return $i10;

     label18:
        $i9 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeArgumentSignatureForAnchor(char[],int,java.lang.StringBuffer)>(r0, i0, r1);

        return $i9;

     label19:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r16;
    }

    private static int appendTypeArgumentSignatureForAnchor(char[], int, java.lang.StringBuffer)
    {
        char c2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer r1;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        c2 = r0[i0];

        $i8 = (int) c2;

        tableswitch($i8)
        {
            case 42: goto label2;
            case 43: goto label3;
            case 44: goto label5;
            case 45: goto label4;
            default: goto label5;
        };

     label2:
        return i0;

     label3:
        $i5 = i0 + 1;

        $i6 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, $i5, r1, 0);

        return $i6;

     label4:
        $i3 = i0 + 1;

        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, $i3, r1, 0);

        return $i4;

     label5:
        $i7 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, i0, r1, 0);

        return $i7;
    }

    private static int appendCaptureTypeSignatureForAnchor(char[], int, java.lang.StringBuffer)
    {
        char c3;
        java.lang.IllegalArgumentException $r4, $r5;
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, $i4, $i5, $i6;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        if i0 < $i2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        c3 = r0[i0];

        $i6 = (int) c3;

        if $i6 == 33 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $i4 = i0 + 1;

        $i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeArgumentSignatureForAnchor(char[],int,java.lang.StringBuffer)>(r0, $i4, r1);

        return $i5;
    }

    private static int appendArrayTypeSignatureForAnchor(char[], int, java.lang.StringBuffer, boolean)
    {
        java.lang.StringBuffer r2, $r3, $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, i5, i7, i9, $i10, $i11;
        boolean z0;
        char c6, c8;
        java.lang.IllegalArgumentException $r9, $r10, $r11;
        char[] r0;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.StringBuffer;

        z0 := @parameter3: boolean;

        i0 = lengthof r0;

        $i2 = i0 - 1;

        if i1 < $i2 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label1:
        c6 = r0[i1];

        $i10 = (int) c6;

        if $i10 == 91 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label2:
        i7 = i1 + 1;

        c8 = r0[i7];

        goto label5;

     label3:
        $i3 = i0 - 1;

        if i7 < $i3 goto label4;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label4:
        i7 = i7 + 1;

        c8 = r0[i7];

     label5:
        $i11 = (int) c8;

        if $i11 == 91 goto label3;

        $i4 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int appendTypeSignatureForAnchor(char[],int,java.lang.StringBuffer,boolean)>(r0, i7, r2, 0);

        i9 = 1;

        i5 = i7 - i1;

        goto label7;

     label6:
        $r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i9 = i9 + 1;

     label7:
        if i9 < i5 goto label6;

        if z0 == 0 goto label8;

        $r5 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label9;

     label8:
        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label9:
        return $i4;
    }

    private static int appendClassTypeSignatureForAnchor(char[], int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, $i3, i5, $i6, $i8, $i9, $i10;
        char c4, c7;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuffer;

        $i1 = lengthof r0;

        $i2 = $i1 - 2;

        if i0 < $i2 goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label01:
        c4 = r0[i0];

        $i8 = (int) c4;

        if $i8 == 76 goto label02;

        $i9 = (int) c4;

        if $i9 == 81 goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label02:
        i5 = i0 + 1;

     label03:
        $i6 = lengthof r0;

        if i5 < $i6 goto label04;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label04:
        c7 = r0[i5];

        $i10 = (int) c7;

        lookupswitch($i10)
        {
            case 36: goto label09;
            case 46: goto label07;
            case 47: goto label08;
            case 59: goto label05;
            case 60: goto label06;
            default: goto label10;
        };

     label05:
        return i5;

     label06:
        $i3 = i5 + 1;

        i5 = staticinvoke <org.eclipse.jdt.internal.core.util.Util: int scanGenericEnd(char[],int)>(r0, $i3);

        goto label11;

     label07:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label11;

     label08:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        goto label11;

     label09:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label11;

     label10:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c7);

     label11:
        i5 = i5 + 1;

        goto label03;
    }

    private static int scanGenericEnd(char[], int)
    {
        char $c0, $c2;
        int i1, i3, i4, i5, $i6, $i7, $i9;
        char[] r0;

        r0 := @parameter0: char[];

        i3 := @parameter1: int;

        $c0 = r0[i3];

        $i6 = (int) $c0;

        if $i6 != 62 goto label1;

        return i3;

     label1:
        i1 = lengthof r0;

        i4 = 1;

        i5 = i3 + 1;

        goto label6;

     label2:
        $c2 = r0[i5];

        $i7 = (int) $c2;

        tableswitch($i7)
        {
            case 60: goto label4;
            case 61: goto label5;
            case 62: goto label3;
            default: goto label5;
        };

     label3:
        $i9 = (int) -1;

        i4 = i4 + $i9;

        if i4 != 0 goto label5;

        return i5;

     label4:
        i4 = i4 + 1;

     label5:
        i5 = i5 + 1;

     label6:
        if i5 <= i1 goto label2;

        return i5;
    }
}
