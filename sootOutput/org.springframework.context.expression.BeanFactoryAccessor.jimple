public class org.springframework.context.expression.BeanFactoryAccessor extends java.lang.Object implements org.springframework.expression.PropertyAccessor
{

    public void <init>()
    {
        org.springframework.context.expression.BeanFactoryAccessor r0;

        r0 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.BeanFactoryAccessor r3;
        org.springframework.beans.factory.BeanFactory $r2;
        java.lang.Object r0;
        java.lang.String r1;
        boolean $z0;
        org.springframework.expression.EvaluationContext r4;

        r3 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        r4 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String;

        $r2 = (org.springframework.beans.factory.BeanFactory) r0;

        $z0 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>(r1);

        return $z0;
    }

    public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.BeanFactoryAccessor r5;
        org.springframework.beans.factory.BeanFactory $r3;
        java.lang.Object r1, $r4;
        java.lang.String r2;
        org.springframework.expression.TypedValue $r0;
        org.springframework.expression.EvaluationContext r6;

        r5 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        r6 := @parameter0: org.springframework.expression.EvaluationContext;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        $r0 = new org.springframework.expression.TypedValue;

        $r3 = (org.springframework.beans.factory.BeanFactory) r1;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>(r2);

        specialinvoke $r0.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r4);

        return $r0;
    }

    public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.BeanFactoryAccessor r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        return 0;
    }

    public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.BeanFactoryAccessor r1;
        java.lang.Object r3, r5;
        java.lang.String r4;
        org.springframework.expression.AccessException $r0;
        org.springframework.expression.EvaluationContext r2;

        r1 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.Object;

        $r0 = new org.springframework.expression.AccessException;

        specialinvoke $r0.<org.springframework.expression.AccessException: void <init>(java.lang.String)>("Beans in a BeanFactory are read-only");

        throw $r0;
    }

    public java.lang.Class[] getSpecificTargetClasses()
    {
        java.lang.Class[] $r0;
        org.springframework.context.expression.BeanFactoryAccessor r1;

        r1 := @this: org.springframework.context.expression.BeanFactoryAccessor;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Lorg/springframework/beans/factory/BeanFactory;";

        return $r0;
    }
}
