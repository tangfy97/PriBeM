public class org.xmlpull.v1.builder.impl.XmlDocumentImpl extends java.lang.Object implements org.xmlpull.v1.builder.XmlDocument
{
    private java.util.List children;
    private org.xmlpull.v1.builder.XmlElement root;
    private java.lang.String version;
    private java.lang.Boolean standalone;
    private java.lang.String characterEncoding;

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.xmlpull.v1.builder.XmlElement $r7, $r8;
        java.util.List $r3, $r4, $r5;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0, r2;
        int $i0;
        java.lang.Object $r1, $r6;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.xmlpull.v1.builder.impl.XmlDocumentImpl) $r1;

        r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement root> = null;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        $r4 = specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlDocumentImpl,java.util.List)>(r2, $r3);

        r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children> = $r4;

        $i0 = specialinvoke r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: int findDocumentElement()>();

        if $i0 < 0 goto label1;

        $r5 = r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        $r7 = (org.xmlpull.v1.builder.XmlElement) $r6;

        r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement root> = $r7;

        $r8 = r2.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement root>;

        interfaceinvoke $r8.<org.xmlpull.v1.builder.XmlElement: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r2);

     label1:
        return r2;
    }

    private java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlDocumentImpl, java.util.List) throws java.lang.CloneNotSupportedException
    {
        java.lang.CloneNotSupportedException $r3, $r14;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r15, $r16, $r17, $r18;
        int $i0, $i1, i2;
        java.lang.String $r9, $r19, $r24;
        java.lang.reflect.Method $r12;
        boolean $z0, $z1;
        java.lang.Exception $r13;
        org.xmlpull.v1.builder.XmlElement r22;
        java.util.List r0;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r20, r21;
        java.lang.Object $r2, r23;
        java.lang.Class $r10, $r11;

        r20 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r21 := @parameter0: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r0 := @parameter1: java.util.List;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label02:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i1 goto label11;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = $r2 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label03;

        r22 = (org.xmlpull.v1.builder.XmlElement) $r2;

        r23 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlElement: java.lang.Object clone()>();

        goto label10;

     label03:
        $z1 = $r2 instanceof java.lang.Cloneable;

        if $z1 == 0 goto label07;

     label04:
        $r11 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", null);

        r23 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, null);

     label05:
        goto label10;

     label06:
        $r13 := @caughtexception;

        $r14 = new java.lang.CloneNotSupportedException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to call clone() on  ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label07:
        $r3 = new java.lang.CloneNotSupportedException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not clone ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of ");

        if $r2 == null goto label08;

        $r10 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r10.<java.lang.Class: java.lang.String toString()>();

        goto label09;

     label08:
        $r24 = "";

     label09:
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label10:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r23);

        i2 = i2 + 1;

        goto label02;

     label11:
        return $r1;

        catch java.lang.Exception from label04 to label05 with label06;
    }

    public void <init>(java.lang.String, java.lang.Boolean, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.Boolean r3;
        java.lang.String r2, r4;
        java.util.ArrayList $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Boolean;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children> = $r1;

        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.String version> = r2;

        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.Boolean standalone> = r3;

        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.String characterEncoding> = r4;

        return;
    }

    public java.lang.String getVersion()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.String version>;

        return $r1;
    }

    public java.lang.Boolean isStandalone()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.Boolean $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.Boolean standalone>;

        return $r1;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.String characterEncoding>;

        return $r1;
    }

    public void setCharacterEncodingScheme(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.lang.String characterEncoding> = r1;

        return;
    }

    public org.xmlpull.v1.builder.XmlProcessingInstruction newProcessingInstruction(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2, r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlProcessingInstruction addProcessingInstruction(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2, r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.Iterable children()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl$1 $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.impl.XmlDocumentImpl$1;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl$1: void <init>(org.xmlpull.v1.builder.impl.XmlDocumentImpl)>(r1);

        return $r0;
    }

    public void removeAllUnparsedEntities()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public void setDocumentElement(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        java.util.List $r2, $r3;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        int $i0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        $i0 = specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: int findDocumentElement()>();

        if $i0 < 0 goto label1;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, r1);

        goto label2;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement root> = r1;

        interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r0);

        return;
    }

    private int findDocumentElement()
    {
        java.util.List $r1, $r2;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        int $i0, i1, $i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        i1 = 0;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public org.xmlpull.v1.builder.XmlElement requiredElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlNamespace r1;
        org.xmlpull.v1.builder.XmlElement $r3;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r10;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.String r2, $r9, $r11;
        org.xmlpull.v1.builder.XmlBuilderException $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        $r4 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("document does not contain element with name ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in namespace ");

        $r9 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String,boolean)>(r1, r2, 0);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlNamespace $r2, r3, $r9;
        org.xmlpull.v1.builder.XmlElement $r1, $r6;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.lang.String r4, $r5, $r7, $r8, $r10;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r3 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r4 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement getDocumentElement()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        if $r2 == null goto label2;

        $r9 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        $r10 = interfaceinvoke $r9.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        goto label3;

     label2:
        $r10 = null;

     label3:
        if r3 == null goto label4;

        $r7 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label5;

        if $r10 == null goto label5;

        $r8 = interfaceinvoke r3.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

        return $r1;

     label4:
        $r5 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        if $r10 != null goto label5;

        return $r1;

     label5:
        if z1 == 0 goto label6;

        $r6 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement addDocumentElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r3, r4);

        return $r6;

     label6:
        return null;
    }

    public void insertChild(int, java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        int i0;
        java.lang.Object r2;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlComment addComment(java.lang.String)
    {
        java.util.List $r3;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        java.lang.String r2;
        org.xmlpull.v1.builder.impl.XmlCommentImpl $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlCommentImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlCommentImpl: void <init>(org.xmlpull.v1.builder.XmlContainer,java.lang.String)>(r1, r2);

        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public org.xmlpull.v1.builder.XmlDoctype newDoctype(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2, r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.Iterable unparsedEntities()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public void removeAllChildren()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlComment newComment(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r2;
        java.lang.String r1;
        org.xmlpull.v1.builder.impl.XmlCommentImpl $r0;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlCommentImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlCommentImpl: void <init>(org.xmlpull.v1.builder.XmlContainer,java.lang.String)>(null, r1);

        return $r0;
    }

    public void removeAllNotations()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlDoctype addDoctype(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2, r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public void addChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        java.lang.Object r2;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlNotation addNotation(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2, r3, r4, r5;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public java.lang.String getBaseUri()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.Iterable notations()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlElement addDocumentElement(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        org.xmlpull.v1.builder.XmlElement $r2;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement addDocumentElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(null, r1);

        return $r2;
    }

    public org.xmlpull.v1.builder.XmlElement addDocumentElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r4;
        org.xmlpull.v1.builder.impl.XmlElementImpl $r0;
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r3;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;
        org.xmlpull.v1.builder.XmlBuilderException $r5;

        r3 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlElementImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void <init>(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r3.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement getDocumentElement()>();

        if $r4 == null goto label1;

        $r5 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r5.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("document already has root element");

        throw $r5;

     label1:
        virtualinvoke r3.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: void setDocumentElement(org.xmlpull.v1.builder.XmlElement)>($r0);

        return $r0;
    }

    public boolean isAllDeclarationsProcessed()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlElement getDocumentElement()
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        org.xmlpull.v1.builder.XmlElement $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: org.xmlpull.v1.builder.XmlElement root>;

        return $r1;
    }

    static java.util.List access$000(org.xmlpull.v1.builder.impl.XmlDocumentImpl)
    {
        org.xmlpull.v1.builder.impl.XmlDocumentImpl r0;
        java.util.List $r1;

        r0 := @parameter0: org.xmlpull.v1.builder.impl.XmlDocumentImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlDocumentImpl: java.util.List children>;

        return $r1;
    }
}
